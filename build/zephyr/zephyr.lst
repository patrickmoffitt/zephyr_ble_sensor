
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
   0:	e8 40 00 20 2d 56 00 00 b1 b8 01 00 5d 56 00 00     .@. -V......]V..
  10:	5d 56 00 00 5d 56 00 00 5d 56 00 00 00 00 00 00     ]V..]V..]V......
	...
  2c:	2d 54 00 00 5d 56 00 00 00 00 00 00 e5 53 00 00     -T..]V.......S..
  3c:	09 a7 01 00                                         ....

00000040 <_irq_vector_table>:
  40:	ed 55 00 00 d5 41 01 00 ed 55 00 00 ed 55 00 00     .U...A...U...U..
  50:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  60:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  70:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  80:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  90:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  a0:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  b0:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  c0:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  d0:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  e0:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..
  f0:	ed 55 00 00 ed 55 00 00 ed 55 00 00 ed 55 00 00     .U...U...U...U..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_BT_HCI_TX_STACK_SIZE+0x9e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_BT_HCI_TX_STACK_SIZE+0xbc>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__aeabi_ldivmod>:
     89c:	b97b      	cbnz	r3, 8be <__aeabi_ldivmod+0x22>
     89e:	b972      	cbnz	r2, 8be <__aeabi_ldivmod+0x22>
     8a0:	2900      	cmp	r1, #0
     8a2:	bfbe      	ittt	lt
     8a4:	2000      	movlt	r0, #0
     8a6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
     8aa:	e006      	blt.n	8ba <__aeabi_ldivmod+0x1e>
     8ac:	bf08      	it	eq
     8ae:	2800      	cmpeq	r0, #0
     8b0:	bf1c      	itt	ne
     8b2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
     8b6:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     8ba:	f000 b9b7 	b.w	c2c <__aeabi_idiv0>
     8be:	f1ad 0c08 	sub.w	ip, sp, #8
     8c2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     8c6:	2900      	cmp	r1, #0
     8c8:	db09      	blt.n	8de <__aeabi_ldivmod+0x42>
     8ca:	2b00      	cmp	r3, #0
     8cc:	db1a      	blt.n	904 <__aeabi_ldivmod+0x68>
     8ce:	f000 f84d 	bl	96c <__udivmoddi4>
     8d2:	f8dd e004 	ldr.w	lr, [sp, #4]
     8d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8da:	b004      	add	sp, #16
     8dc:	4770      	bx	lr
     8de:	4240      	negs	r0, r0
     8e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8e4:	2b00      	cmp	r3, #0
     8e6:	db1b      	blt.n	920 <__aeabi_ldivmod+0x84>
     8e8:	f000 f840 	bl	96c <__udivmoddi4>
     8ec:	f8dd e004 	ldr.w	lr, [sp, #4]
     8f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     8f4:	b004      	add	sp, #16
     8f6:	4240      	negs	r0, r0
     8f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     8fc:	4252      	negs	r2, r2
     8fe:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     902:	4770      	bx	lr
     904:	4252      	negs	r2, r2
     906:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     90a:	f000 f82f 	bl	96c <__udivmoddi4>
     90e:	f8dd e004 	ldr.w	lr, [sp, #4]
     912:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     916:	b004      	add	sp, #16
     918:	4240      	negs	r0, r0
     91a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     91e:	4770      	bx	lr
     920:	4252      	negs	r2, r2
     922:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     926:	f000 f821 	bl	96c <__udivmoddi4>
     92a:	f8dd e004 	ldr.w	lr, [sp, #4]
     92e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     932:	b004      	add	sp, #16
     934:	4252      	negs	r2, r2
     936:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     93a:	4770      	bx	lr

0000093c <__aeabi_uldivmod>:
     93c:	b953      	cbnz	r3, 954 <__aeabi_uldivmod+0x18>
     93e:	b94a      	cbnz	r2, 954 <__aeabi_uldivmod+0x18>
     940:	2900      	cmp	r1, #0
     942:	bf08      	it	eq
     944:	2800      	cmpeq	r0, #0
     946:	bf1c      	itt	ne
     948:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     94c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     950:	f000 b96c 	b.w	c2c <__aeabi_idiv0>
     954:	f1ad 0c08 	sub.w	ip, sp, #8
     958:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     95c:	f000 f806 	bl	96c <__udivmoddi4>
     960:	f8dd e004 	ldr.w	lr, [sp, #4]
     964:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     968:	b004      	add	sp, #16
     96a:	4770      	bx	lr

0000096c <__udivmoddi4>:
     96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     970:	9e08      	ldr	r6, [sp, #32]
     972:	460d      	mov	r5, r1
     974:	4604      	mov	r4, r0
     976:	468e      	mov	lr, r1
     978:	2b00      	cmp	r3, #0
     97a:	f040 8082 	bne.w	a82 <__udivmoddi4+0x116>
     97e:	428a      	cmp	r2, r1
     980:	4617      	mov	r7, r2
     982:	d946      	bls.n	a12 <__udivmoddi4+0xa6>
     984:	fab2 f282 	clz	r2, r2
     988:	b14a      	cbz	r2, 99e <__udivmoddi4+0x32>
     98a:	f1c2 0120 	rsb	r1, r2, #32
     98e:	fa05 f302 	lsl.w	r3, r5, r2
     992:	fa20 f101 	lsr.w	r1, r0, r1
     996:	4097      	lsls	r7, r2
     998:	ea41 0e03 	orr.w	lr, r1, r3
     99c:	4094      	lsls	r4, r2
     99e:	ea4f 4817 	mov.w	r8, r7, lsr #16
     9a2:	0c23      	lsrs	r3, r4, #16
     9a4:	fbbe fcf8 	udiv	ip, lr, r8
     9a8:	b2b9      	uxth	r1, r7
     9aa:	fb08 ee1c 	mls	lr, r8, ip, lr
     9ae:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     9b2:	fb0c f001 	mul.w	r0, ip, r1
     9b6:	4298      	cmp	r0, r3
     9b8:	d90a      	bls.n	9d0 <__udivmoddi4+0x64>
     9ba:	18fb      	adds	r3, r7, r3
     9bc:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
     9c0:	f080 8116 	bcs.w	bf0 <__udivmoddi4+0x284>
     9c4:	4298      	cmp	r0, r3
     9c6:	f240 8113 	bls.w	bf0 <__udivmoddi4+0x284>
     9ca:	f1ac 0c02 	sub.w	ip, ip, #2
     9ce:	443b      	add	r3, r7
     9d0:	1a1b      	subs	r3, r3, r0
     9d2:	b2a4      	uxth	r4, r4
     9d4:	fbb3 f0f8 	udiv	r0, r3, r8
     9d8:	fb08 3310 	mls	r3, r8, r0, r3
     9dc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     9e0:	fb00 f101 	mul.w	r1, r0, r1
     9e4:	42a1      	cmp	r1, r4
     9e6:	d909      	bls.n	9fc <__udivmoddi4+0x90>
     9e8:	193c      	adds	r4, r7, r4
     9ea:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     9ee:	f080 8101 	bcs.w	bf4 <__udivmoddi4+0x288>
     9f2:	42a1      	cmp	r1, r4
     9f4:	f240 80fe 	bls.w	bf4 <__udivmoddi4+0x288>
     9f8:	3802      	subs	r0, #2
     9fa:	443c      	add	r4, r7
     9fc:	1a64      	subs	r4, r4, r1
     9fe:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a02:	2100      	movs	r1, #0
     a04:	b11e      	cbz	r6, a0e <__udivmoddi4+0xa2>
     a06:	40d4      	lsrs	r4, r2
     a08:	2300      	movs	r3, #0
     a0a:	e9c6 4300 	strd	r4, r3, [r6]
     a0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a12:	b902      	cbnz	r2, a16 <__udivmoddi4+0xaa>
     a14:	deff      	udf	#255	; 0xff
     a16:	fab2 f282 	clz	r2, r2
     a1a:	2a00      	cmp	r2, #0
     a1c:	d14f      	bne.n	abe <__udivmoddi4+0x152>
     a1e:	1bcb      	subs	r3, r1, r7
     a20:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     a24:	fa1f f887 	uxth.w	r8, r7
     a28:	2101      	movs	r1, #1
     a2a:	fbb3 fcfe 	udiv	ip, r3, lr
     a2e:	0c25      	lsrs	r5, r4, #16
     a30:	fb0e 331c 	mls	r3, lr, ip, r3
     a34:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a38:	fb08 f30c 	mul.w	r3, r8, ip
     a3c:	42ab      	cmp	r3, r5
     a3e:	d907      	bls.n	a50 <__udivmoddi4+0xe4>
     a40:	197d      	adds	r5, r7, r5
     a42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
     a46:	d202      	bcs.n	a4e <__udivmoddi4+0xe2>
     a48:	42ab      	cmp	r3, r5
     a4a:	f200 80e7 	bhi.w	c1c <__udivmoddi4+0x2b0>
     a4e:	4684      	mov	ip, r0
     a50:	1aed      	subs	r5, r5, r3
     a52:	b2a3      	uxth	r3, r4
     a54:	fbb5 f0fe 	udiv	r0, r5, lr
     a58:	fb0e 5510 	mls	r5, lr, r0, r5
     a5c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     a60:	fb08 f800 	mul.w	r8, r8, r0
     a64:	45a0      	cmp	r8, r4
     a66:	d907      	bls.n	a78 <__udivmoddi4+0x10c>
     a68:	193c      	adds	r4, r7, r4
     a6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     a6e:	d202      	bcs.n	a76 <__udivmoddi4+0x10a>
     a70:	45a0      	cmp	r8, r4
     a72:	f200 80d7 	bhi.w	c24 <__udivmoddi4+0x2b8>
     a76:	4618      	mov	r0, r3
     a78:	eba4 0408 	sub.w	r4, r4, r8
     a7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     a80:	e7c0      	b.n	a04 <__udivmoddi4+0x98>
     a82:	428b      	cmp	r3, r1
     a84:	d908      	bls.n	a98 <__udivmoddi4+0x12c>
     a86:	2e00      	cmp	r6, #0
     a88:	f000 80af 	beq.w	bea <__udivmoddi4+0x27e>
     a8c:	2100      	movs	r1, #0
     a8e:	e9c6 0500 	strd	r0, r5, [r6]
     a92:	4608      	mov	r0, r1
     a94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     a98:	fab3 f183 	clz	r1, r3
     a9c:	2900      	cmp	r1, #0
     a9e:	d14b      	bne.n	b38 <__udivmoddi4+0x1cc>
     aa0:	42ab      	cmp	r3, r5
     aa2:	d302      	bcc.n	aaa <__udivmoddi4+0x13e>
     aa4:	4282      	cmp	r2, r0
     aa6:	f200 80b7 	bhi.w	c18 <__udivmoddi4+0x2ac>
     aaa:	1a84      	subs	r4, r0, r2
     aac:	eb65 0303 	sbc.w	r3, r5, r3
     ab0:	2001      	movs	r0, #1
     ab2:	469e      	mov	lr, r3
     ab4:	2e00      	cmp	r6, #0
     ab6:	d0aa      	beq.n	a0e <__udivmoddi4+0xa2>
     ab8:	e9c6 4e00 	strd	r4, lr, [r6]
     abc:	e7a7      	b.n	a0e <__udivmoddi4+0xa2>
     abe:	f1c2 0c20 	rsb	ip, r2, #32
     ac2:	fa01 f302 	lsl.w	r3, r1, r2
     ac6:	4097      	lsls	r7, r2
     ac8:	fa20 f00c 	lsr.w	r0, r0, ip
     acc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     ad0:	fa21 fc0c 	lsr.w	ip, r1, ip
     ad4:	4318      	orrs	r0, r3
     ad6:	fbbc f1fe 	udiv	r1, ip, lr
     ada:	0c05      	lsrs	r5, r0, #16
     adc:	fb0e cc11 	mls	ip, lr, r1, ip
     ae0:	fa1f f887 	uxth.w	r8, r7
     ae4:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     ae8:	fb01 f308 	mul.w	r3, r1, r8
     aec:	42ab      	cmp	r3, r5
     aee:	fa04 f402 	lsl.w	r4, r4, r2
     af2:	d909      	bls.n	b08 <__udivmoddi4+0x19c>
     af4:	197d      	adds	r5, r7, r5
     af6:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
     afa:	f080 808b 	bcs.w	c14 <__udivmoddi4+0x2a8>
     afe:	42ab      	cmp	r3, r5
     b00:	f240 8088 	bls.w	c14 <__udivmoddi4+0x2a8>
     b04:	3902      	subs	r1, #2
     b06:	443d      	add	r5, r7
     b08:	1aeb      	subs	r3, r5, r3
     b0a:	b285      	uxth	r5, r0
     b0c:	fbb3 f0fe 	udiv	r0, r3, lr
     b10:	fb0e 3310 	mls	r3, lr, r0, r3
     b14:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     b18:	fb00 f308 	mul.w	r3, r0, r8
     b1c:	42ab      	cmp	r3, r5
     b1e:	d907      	bls.n	b30 <__udivmoddi4+0x1c4>
     b20:	197d      	adds	r5, r7, r5
     b22:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
     b26:	d271      	bcs.n	c0c <__udivmoddi4+0x2a0>
     b28:	42ab      	cmp	r3, r5
     b2a:	d96f      	bls.n	c0c <__udivmoddi4+0x2a0>
     b2c:	3802      	subs	r0, #2
     b2e:	443d      	add	r5, r7
     b30:	1aeb      	subs	r3, r5, r3
     b32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     b36:	e778      	b.n	a2a <__udivmoddi4+0xbe>
     b38:	f1c1 0c20 	rsb	ip, r1, #32
     b3c:	408b      	lsls	r3, r1
     b3e:	fa22 f70c 	lsr.w	r7, r2, ip
     b42:	431f      	orrs	r7, r3
     b44:	fa20 f40c 	lsr.w	r4, r0, ip
     b48:	fa05 f301 	lsl.w	r3, r5, r1
     b4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     b50:	fa25 f50c 	lsr.w	r5, r5, ip
     b54:	431c      	orrs	r4, r3
     b56:	0c23      	lsrs	r3, r4, #16
     b58:	fbb5 f9fe 	udiv	r9, r5, lr
     b5c:	fa1f f887 	uxth.w	r8, r7
     b60:	fb0e 5519 	mls	r5, lr, r9, r5
     b64:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     b68:	fb09 fa08 	mul.w	sl, r9, r8
     b6c:	45aa      	cmp	sl, r5
     b6e:	fa02 f201 	lsl.w	r2, r2, r1
     b72:	fa00 f301 	lsl.w	r3, r0, r1
     b76:	d908      	bls.n	b8a <__udivmoddi4+0x21e>
     b78:	197d      	adds	r5, r7, r5
     b7a:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
     b7e:	d247      	bcs.n	c10 <__udivmoddi4+0x2a4>
     b80:	45aa      	cmp	sl, r5
     b82:	d945      	bls.n	c10 <__udivmoddi4+0x2a4>
     b84:	f1a9 0902 	sub.w	r9, r9, #2
     b88:	443d      	add	r5, r7
     b8a:	eba5 050a 	sub.w	r5, r5, sl
     b8e:	b2a4      	uxth	r4, r4
     b90:	fbb5 f0fe 	udiv	r0, r5, lr
     b94:	fb0e 5510 	mls	r5, lr, r0, r5
     b98:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     b9c:	fb00 f808 	mul.w	r8, r0, r8
     ba0:	45a0      	cmp	r8, r4
     ba2:	d907      	bls.n	bb4 <__udivmoddi4+0x248>
     ba4:	193c      	adds	r4, r7, r4
     ba6:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     baa:	d22d      	bcs.n	c08 <__udivmoddi4+0x29c>
     bac:	45a0      	cmp	r8, r4
     bae:	d92b      	bls.n	c08 <__udivmoddi4+0x29c>
     bb0:	3802      	subs	r0, #2
     bb2:	443c      	add	r4, r7
     bb4:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     bb8:	eba4 0408 	sub.w	r4, r4, r8
     bbc:	fba0 8902 	umull	r8, r9, r0, r2
     bc0:	454c      	cmp	r4, r9
     bc2:	46c6      	mov	lr, r8
     bc4:	464d      	mov	r5, r9
     bc6:	d319      	bcc.n	bfc <__udivmoddi4+0x290>
     bc8:	d016      	beq.n	bf8 <__udivmoddi4+0x28c>
     bca:	b15e      	cbz	r6, be4 <__udivmoddi4+0x278>
     bcc:	ebb3 020e 	subs.w	r2, r3, lr
     bd0:	eb64 0405 	sbc.w	r4, r4, r5
     bd4:	fa04 fc0c 	lsl.w	ip, r4, ip
     bd8:	40ca      	lsrs	r2, r1
     bda:	ea4c 0202 	orr.w	r2, ip, r2
     bde:	40cc      	lsrs	r4, r1
     be0:	e9c6 2400 	strd	r2, r4, [r6]
     be4:	2100      	movs	r1, #0
     be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     bea:	4631      	mov	r1, r6
     bec:	4630      	mov	r0, r6
     bee:	e70e      	b.n	a0e <__udivmoddi4+0xa2>
     bf0:	46ac      	mov	ip, r5
     bf2:	e6ed      	b.n	9d0 <__udivmoddi4+0x64>
     bf4:	4618      	mov	r0, r3
     bf6:	e701      	b.n	9fc <__udivmoddi4+0x90>
     bf8:	4543      	cmp	r3, r8
     bfa:	d2e6      	bcs.n	bca <__udivmoddi4+0x25e>
     bfc:	ebb8 0e02 	subs.w	lr, r8, r2
     c00:	eb69 0507 	sbc.w	r5, r9, r7
     c04:	3801      	subs	r0, #1
     c06:	e7e0      	b.n	bca <__udivmoddi4+0x25e>
     c08:	4628      	mov	r0, r5
     c0a:	e7d3      	b.n	bb4 <__udivmoddi4+0x248>
     c0c:	4660      	mov	r0, ip
     c0e:	e78f      	b.n	b30 <__udivmoddi4+0x1c4>
     c10:	4681      	mov	r9, r0
     c12:	e7ba      	b.n	b8a <__udivmoddi4+0x21e>
     c14:	4661      	mov	r1, ip
     c16:	e777      	b.n	b08 <__udivmoddi4+0x19c>
     c18:	4608      	mov	r0, r1
     c1a:	e74b      	b.n	ab4 <__udivmoddi4+0x148>
     c1c:	f1ac 0c02 	sub.w	ip, ip, #2
     c20:	443d      	add	r5, r7
     c22:	e715      	b.n	a50 <__udivmoddi4+0xe4>
     c24:	3802      	subs	r0, #2
     c26:	443c      	add	r4, r7
     c28:	e726      	b.n	a78 <__udivmoddi4+0x10c>
     c2a:	bf00      	nop

00000c2c <__aeabi_idiv0>:
     c2c:	4770      	bx	lr
     c2e:	bf00      	nop

00000c30 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
     c30:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
     c32:	4d3e      	ldr	r5, [pc, #248]	; (d2c <bt_init+0xfc>)
     c34:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
     c38:	6899      	ldr	r1, [r3, #8]
     c3a:	f011 0101 	ands.w	r1, r1, #1
     c3e:	d11f      	bne.n	c80 <bt_init+0x50>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
     c40:	aa01      	add	r2, sp, #4
     c42:	f640 4003 	movw	r0, #3075	; 0xc03
     c46:	f005 fceb 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
     c4a:	4604      	mov	r4, r0
     c4c:	2800      	cmp	r0, #0
     c4e:	d16a      	bne.n	d26 <bt_init+0xf6>
		hci_reset_complete(rsp);
     c50:	9b01      	ldr	r3, [sp, #4]
	uint8_t status = buf->data[0];
     c52:	689b      	ldr	r3, [r3, #8]
	if (status) {
     c54:	781b      	ldrb	r3, [r3, #0]
     c56:	b983      	cbnz	r3, c7a <bt_init+0x4a>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
     c58:	f105 0398 	add.w	r3, r5, #152	; 0x98
     c5c:	4618      	mov	r0, r3
     c5e:	f01b f86b 	bl	1bd38 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
     c62:	f3bf 8f5b 	dmb	ish
     c66:	f000 0005 	and.w	r0, r0, #5
     c6a:	e853 2f00 	ldrex	r2, [r3]
     c6e:	e843 0100 	strex	r1, r0, [r3]
     c72:	2900      	cmp	r1, #0
     c74:	d1f9      	bne.n	c6a <bt_init+0x3a>
     c76:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
     c7a:	9801      	ldr	r0, [sp, #4]
     c7c:	f016 f8c0 	bl	16e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
     c80:	aa01      	add	r2, sp, #4
     c82:	2100      	movs	r1, #0
     c84:	f241 0003 	movw	r0, #4099	; 0x1003
     c88:	f005 fcca 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     c8c:	4604      	mov	r4, r0
     c8e:	2800      	cmp	r0, #0
     c90:	d149      	bne.n	d26 <bt_init+0xf6>
	read_local_features_complete(rsp);
     c92:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
     c94:	4826      	ldr	r0, [pc, #152]	; (d30 <bt_init+0x100>)
     c96:	6899      	ldr	r1, [r3, #8]
     c98:	2208      	movs	r2, #8
     c9a:	3101      	adds	r1, #1
     c9c:	f01a fec5 	bl	1ba2a <memcpy>
	net_buf_unref(rsp);
     ca0:	9801      	ldr	r0, [sp, #4]
     ca2:	f016 f8ad 	bl	16e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
     ca6:	4621      	mov	r1, r4
     ca8:	aa01      	add	r2, sp, #4
     caa:	f241 0001 	movw	r0, #4097	; 0x1001
     cae:	f005 fcb7 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     cb2:	4604      	mov	r4, r0
     cb4:	2800      	cmp	r0, #0
     cb6:	d136      	bne.n	d26 <bt_init+0xf6>
	read_local_ver_complete(rsp);
     cb8:	9801      	ldr	r0, [sp, #4]
     cba:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
     cbc:	785a      	ldrb	r2, [r3, #1]
     cbe:	f885 2038 	strb.w	r2, [r5, #56]	; 0x38
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
     cc2:	78d9      	ldrb	r1, [r3, #3]
     cc4:	789a      	ldrb	r2, [r3, #2]
     cc6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     cca:	876a      	strh	r2, [r5, #58]	; 0x3a
	bt_dev.lmp_version = rp->lmp_version;
     ccc:	791a      	ldrb	r2, [r3, #4]
     cce:	f885 2039 	strb.w	r2, [r5, #57]	; 0x39
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
     cd2:	7a19      	ldrb	r1, [r3, #8]
     cd4:	79da      	ldrb	r2, [r3, #7]
     cd6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     cda:	87aa      	strh	r2, [r5, #60]	; 0x3c
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
     cdc:	795a      	ldrb	r2, [r3, #5]
     cde:	799b      	ldrb	r3, [r3, #6]
     ce0:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
     ce4:	87eb      	strh	r3, [r5, #62]	; 0x3e
	net_buf_unref(rsp);
     ce6:	f016 f88b 	bl	16e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
     cea:	4621      	mov	r1, r4
     cec:	aa01      	add	r2, sp, #4
     cee:	f241 0002 	movw	r0, #4098	; 0x1002
     cf2:	f005 fc95 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     cf6:	4604      	mov	r4, r0
     cf8:	b9a8      	cbnz	r0, d26 <bt_init+0xf6>
	read_supported_commands_complete(rsp);
     cfa:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.supported_commands, rp->commands,
     cfc:	480d      	ldr	r0, [pc, #52]	; (d34 <bt_init+0x104>)
     cfe:	6899      	ldr	r1, [r3, #8]
     d00:	2240      	movs	r2, #64	; 0x40
     d02:	3101      	adds	r1, #1
     d04:	f01a fe91 	bl	1ba2a <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
     d08:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     d0c:	9801      	ldr	r0, [sp, #4]
		bt_dev.supported_commands[34] |= 0x04;
     d0e:	f043 0306 	orr.w	r3, r3, #6
     d12:	f885 306a 	strb.w	r3, [r5, #106]	; 0x6a
	net_buf_unref(rsp);
     d16:	f016 f873 	bl	16e00 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
     d1a:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     d1e:	065a      	lsls	r2, r3, #25
     d20:	d40a      	bmi.n	d38 <bt_init+0x108>
		return -ENODEV;
     d22:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
     d26:	4620      	mov	r0, r4
     d28:	b002      	add	sp, #8
     d2a:	bd70      	pop	{r4, r5, r6, pc}
     d2c:	20000000 	.word	0x20000000
     d30:	20000040 	.word	0x20000040
     d34:	20000048 	.word	0x20000048
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
     d38:	4621      	mov	r1, r4
     d3a:	aa01      	add	r2, sp, #4
     d3c:	f242 0003 	movw	r0, #8195	; 0x2003
     d40:	f005 fc6e 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     d44:	4604      	mov	r4, r0
     d46:	2800      	cmp	r0, #0
     d48:	d1ed      	bne.n	d26 <bt_init+0xf6>
	read_le_features_complete(rsp);
     d4a:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
     d4c:	48c2      	ldr	r0, [pc, #776]	; (1058 <bt_init+0x428>)
     d4e:	6899      	ldr	r1, [r3, #8]
     d50:	2208      	movs	r2, #8
     d52:	3101      	adds	r1, #1
     d54:	f01a fe69 	bl	1ba2a <memcpy>
	net_buf_unref(rsp);
     d58:	9801      	ldr	r0, [sp, #4]
     d5a:	f016 f851 	bl	16e00 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
     d5e:	4621      	mov	r1, r4
     d60:	aa01      	add	r2, sp, #4
     d62:	f242 0002 	movw	r0, #8194	; 0x2002
     d66:	f005 fc5b 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
     d6a:	4604      	mov	r4, r0
     d6c:	2800      	cmp	r0, #0
     d6e:	d1da      	bne.n	d26 <bt_init+0xf6>
		le_read_buffer_size_complete(rsp);
     d70:	9b01      	ldr	r3, [sp, #4]
     d72:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
     d74:	f8b3 2001 	ldrh.w	r2, [r3, #1]
     d78:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
     d7c:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
     d7e:	b121      	cbz	r1, d8a <bt_init+0x15a>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
     d80:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
     d82:	48b6      	ldr	r0, [pc, #728]	; (105c <bt_init+0x42c>)
     d84:	4611      	mov	r1, r2
     d86:	f01e f89b 	bl	1eec0 <z_impl_k_sem_init>
		net_buf_unref(rsp);
     d8a:	9801      	ldr	r0, [sp, #4]
     d8c:	f016 f838 	bl	16e00 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     d90:	f895 6044 	ldrb.w	r6, [r5, #68]	; 0x44
     d94:	f016 0620 	ands.w	r6, r6, #32
     d98:	f000 8139 	beq.w	100e <bt_init+0x3de>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
     d9c:	f895 3064 	ldrb.w	r3, [r5, #100]	; 0x64
     da0:	071b      	lsls	r3, r3, #28
     da2:	d511      	bpl.n	dc8 <bt_init+0x198>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
     da4:	aa01      	add	r2, sp, #4
     da6:	2100      	movs	r1, #0
     da8:	f242 001c 	movw	r0, #8220	; 0x201c
     dac:	f005 fc38 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
     db0:	4604      	mov	r4, r0
     db2:	2800      	cmp	r0, #0
     db4:	d1b7      	bne.n	d26 <bt_init+0xf6>
		le_read_supp_states_complete(rsp);
     db6:	9801      	ldr	r0, [sp, #4]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
     db8:	6883      	ldr	r3, [r0, #8]
     dba:	f853 2f01 	ldr.w	r2, [r3, #1]!
     dbe:	685b      	ldr	r3, [r3, #4]
	bt_dev.le.states = sys_get_le64(rp->le_states);
     dc0:	e9c5 232a 	strd	r2, r3, [r5, #168]	; 0xa8
		net_buf_unref(rsp);
     dc4:	f016 f81c 	bl	16e00 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
     dc8:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     dcc:	069e      	lsls	r6, r3, #26
     dce:	d523      	bpl.n	e18 <bt_init+0x1e8>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
     dd0:	f10d 0102 	add.w	r1, sp, #2
     dd4:	4668      	mov	r0, sp
     dd6:	f01b f9a8 	bl	1c12a <hci_le_read_max_data_len>
		if (err) {
     dda:	4604      	mov	r4, r0
     ddc:	2800      	cmp	r0, #0
     dde:	d1a2      	bne.n	d26 <bt_init+0xf6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     de0:	2104      	movs	r1, #4
     de2:	f242 0024 	movw	r0, #8228	; 0x2024
     de6:	f005 fbc1 	bl	656c <bt_hci_cmd_create>
		if (!buf) {
     dea:	4606      	mov	r6, r0
     dec:	2800      	cmp	r0, #0
     dee:	f000 8115 	beq.w	101c <bt_init+0x3ec>
		cp = net_buf_add(buf, sizeof(*cp));
     df2:	2104      	movs	r1, #4
     df4:	3008      	adds	r0, #8
     df6:	f01d fbcd 	bl	1e594 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
     dfa:	f8bd 3000 	ldrh.w	r3, [sp]
     dfe:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
     e00:	f8bd 3002 	ldrh.w	r3, [sp, #2]
     e04:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
     e06:	4622      	mov	r2, r4
     e08:	4631      	mov	r1, r6
     e0a:	f242 0024 	movw	r0, #8228	; 0x2024
     e0e:	f005 fc07 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
     e12:	4604      	mov	r4, r0
     e14:	2800      	cmp	r0, #0
     e16:	d186      	bne.n	d26 <bt_init+0xf6>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
     e18:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     e1c:	065c      	lsls	r4, r3, #25
     e1e:	d52c      	bpl.n	e7a <bt_init+0x24a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
     e20:	2102      	movs	r1, #2
     e22:	f242 002e 	movw	r0, #8238	; 0x202e
     e26:	f005 fba1 	bl	656c <bt_hci_cmd_create>
		if (!buf) {
     e2a:	4604      	mov	r4, r0
     e2c:	2800      	cmp	r0, #0
     e2e:	f000 80f5 	beq.w	101c <bt_init+0x3ec>
		cp = net_buf_add(buf, sizeof(*cp));
     e32:	2102      	movs	r1, #2
     e34:	3008      	adds	r0, #8
     e36:	f01d fbad 	bl	1e594 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
     e3a:	f06f 037b 	mvn.w	r3, #123	; 0x7b
     e3e:	7003      	strb	r3, [r0, #0]
     e40:	2303      	movs	r3, #3
     e42:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
     e44:	4621      	mov	r1, r4
     e46:	2200      	movs	r2, #0
     e48:	f242 002e 	movw	r0, #8238	; 0x202e
     e4c:	f005 fbe8 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
     e50:	4604      	mov	r4, r0
     e52:	2800      	cmp	r0, #0
     e54:	f47f af67 	bne.w	d26 <bt_init+0xf6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
     e58:	4601      	mov	r1, r0
     e5a:	aa01      	add	r2, sp, #4
     e5c:	f242 002a 	movw	r0, #8234	; 0x202a
     e60:	f005 fbde 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
     e64:	4604      	mov	r4, r0
     e66:	2800      	cmp	r0, #0
     e68:	f47f af5d 	bne.w	d26 <bt_init+0xf6>
		le_read_resolving_list_size_complete(rsp);
     e6c:	9801      	ldr	r0, [sp, #4]
	bt_dev.le.rl_size = rp->rl_size;
     e6e:	6883      	ldr	r3, [r0, #8]
     e70:	785b      	ldrb	r3, [r3, #1]
     e72:	f885 30e8 	strb.w	r3, [r5, #232]	; 0xe8
		net_buf_unref(rsp);
     e76:	f015 ffc3 	bl	16e00 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
     e7a:	2108      	movs	r1, #8
     e7c:	f242 0001 	movw	r0, #8193	; 0x2001
     e80:	f005 fb74 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
     e84:	4604      	mov	r4, r0
     e86:	2800      	cmp	r0, #0
     e88:	f000 80c8 	beq.w	101c <bt_init+0x3ec>
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     e8c:	2108      	movs	r1, #8
     e8e:	4408      	add	r0, r1
     e90:	f01d fb80 	bl	1e594 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
     e94:	f895 10a0 	ldrb.w	r1, [r5, #160]	; 0xa0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     e98:	f011 0f40 	tst.w	r1, #64	; 0x40
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
     e9c:	4602      	mov	r2, r0
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
     e9e:	f240 2302 	movw	r3, #514	; 0x202
     ea2:	bf08      	it	eq
     ea4:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
     ea6:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
     ea8:	bf4c      	ite	mi
     eaa:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
     eae:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
     eb2:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     eb4:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
     eb8:	bf48      	it	mi
     eba:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
     ebe:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     ec2:	f895 306a 	ldrb.w	r3, [r5, #106]	; 0x6a
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
     ec6:	bf18      	it	ne
     ec8:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     ecc:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     ed0:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
     ed2:	bf48      	it	mi
     ed4:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
     ed8:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
     eda:	bf08      	it	eq
     edc:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
     ee0:	2100      	movs	r1, #0
     ee2:	f01b f83e 	bl	1bf62 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
     ee6:	4621      	mov	r1, r4
     ee8:	2200      	movs	r2, #0
     eea:	f242 0001 	movw	r0, #8193	; 0x2001
     eee:	f005 fb97 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     ef2:	4604      	mov	r4, r0
     ef4:	2800      	cmp	r0, #0
     ef6:	f47f af16 	bne.w	d26 <bt_init+0xf6>
	if (BT_FEAT_BREDR(bt_dev.features)) {
     efa:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
     efe:	0698      	lsls	r0, r3, #26
     f00:	d41e      	bmi.n	f40 <bt_init+0x310>
	if (bt_dev.le.acl_mtu) {
     f02:	f8b5 10cc 	ldrh.w	r1, [r5, #204]	; 0xcc
     f06:	b9d9      	cbnz	r1, f40 <bt_init+0x310>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
     f08:	aa01      	add	r2, sp, #4
     f0a:	f241 0005 	movw	r0, #4101	; 0x1005
     f0e:	f005 fb87 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     f12:	4604      	mov	r4, r0
     f14:	2800      	cmp	r0, #0
     f16:	f47f af06 	bne.w	d26 <bt_init+0xf6>
	if (bt_dev.le.acl_mtu) {
     f1a:	f8b5 30cc 	ldrh.w	r3, [r5, #204]	; 0xcc
     f1e:	b963      	cbnz	r3, f3a <bt_init+0x30a>
	read_buffer_size_complete(rsp);
     f20:	9b01      	ldr	r3, [sp, #4]
     f22:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
     f24:	785a      	ldrb	r2, [r3, #1]
     f26:	7899      	ldrb	r1, [r3, #2]
     f28:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
     f2c:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
     f30:	889a      	ldrh	r2, [r3, #4]
     f32:	484a      	ldr	r0, [pc, #296]	; (105c <bt_init+0x42c>)
     f34:	4611      	mov	r1, r2
     f36:	f01d ffc3 	bl	1eec0 <z_impl_k_sem_init>
	net_buf_unref(rsp);
     f3a:	9801      	ldr	r0, [sp, #4]
     f3c:	f015 ff60 	bl	16e00 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
     f40:	2108      	movs	r1, #8
     f42:	f640 4001 	movw	r0, #3073	; 0xc01
     f46:	f005 fb11 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
     f4a:	4604      	mov	r4, r0
     f4c:	2800      	cmp	r0, #0
     f4e:	d065      	beq.n	101c <bt_init+0x3ec>
	ev = net_buf_add(buf, sizeof(*ev));
     f50:	2108      	movs	r1, #8
     f52:	4408      	add	r0, r1
     f54:	f01d fb1e 	bl	1e594 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     f58:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
     f5c:	07d9      	lsls	r1, r3, #31
	ev = net_buf_add(buf, sizeof(*ev));
     f5e:	4602      	mov	r2, r0
	if (IS_ENABLED(CONFIG_BT_SMP) &&
     f60:	d571      	bpl.n	1046 <bt_init+0x416>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
     f62:	a13b      	add	r1, pc, #236	; (adr r1, 1050 <bt_init+0x420>)
     f64:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
     f68:	f01a fffb 	bl	1bf62 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
     f6c:	4621      	mov	r1, r4
     f6e:	2200      	movs	r2, #0
     f70:	f640 4001 	movw	r0, #3073	; 0xc01
     f74:	f005 fb54 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     f78:	4604      	mov	r4, r0
     f7a:	2800      	cmp	r0, #0
     f7c:	f47f aed3 	bne.w	d26 <bt_init+0xf6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
     f80:	4601      	mov	r1, r0
     f82:	aa01      	add	r2, sp, #4
     f84:	f64f 4001 	movw	r0, #64513	; 0xfc01
     f88:	f005 fb4a 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     f8c:	4604      	mov	r4, r0
     f8e:	bb48      	cbnz	r0, fe4 <bt_init+0x3b4>
	net_buf_unref(rsp);
     f90:	9801      	ldr	r0, [sp, #4]
     f92:	f015 ff35 	bl	16e00 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
     f96:	4621      	mov	r1, r4
     f98:	aa01      	add	r2, sp, #4
     f9a:	f64f 4002 	movw	r0, #64514	; 0xfc02
     f9e:	f005 fb3f 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
     fa2:	4604      	mov	r4, r0
     fa4:	b9f0      	cbnz	r0, fe4 <bt_init+0x3b4>
	rp.cmds = (void *)rsp->data;
     fa6:	9b01      	ldr	r3, [sp, #4]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
     fa8:	482d      	ldr	r0, [pc, #180]	; (1060 <bt_init+0x430>)
     faa:	6899      	ldr	r1, [r3, #8]
     fac:	2202      	movs	r2, #2
     fae:	3101      	adds	r1, #1
     fb0:	f01a fd3b 	bl	1ba2a <memcpy>
	net_buf_unref(rsp);
     fb4:	9801      	ldr	r0, [sp, #4]
     fb6:	f015 ff23 	bl	16e00 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
     fba:	f895 3089 	ldrb.w	r3, [r5, #137]	; 0x89
     fbe:	075b      	lsls	r3, r3, #29
     fc0:	d510      	bpl.n	fe4 <bt_init+0x3b4>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
     fc2:	aa01      	add	r2, sp, #4
     fc4:	4621      	mov	r1, r4
     fc6:	f64f 4003 	movw	r0, #64515	; 0xfc03
     fca:	f005 fb29 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
     fce:	b948      	cbnz	r0, fe4 <bt_init+0x3b4>
		rp.feat = (void *)rsp->data;
     fd0:	9b01      	ldr	r3, [sp, #4]
		memcpy(bt_dev.vs_features, rp.feat->features,
     fd2:	4824      	ldr	r0, [pc, #144]	; (1064 <bt_init+0x434>)
     fd4:	6899      	ldr	r1, [r3, #8]
     fd6:	2201      	movs	r2, #1
     fd8:	4411      	add	r1, r2
     fda:	f01a fd26 	bl	1ba2a <memcpy>
		net_buf_unref(rsp);
     fde:	9801      	ldr	r0, [sp, #4]
     fe0:	f015 ff0e 	bl	16e00 <net_buf_unref>
		err = bt_conn_init();
     fe4:	f007 f952 	bl	828c <bt_conn_init>
		if (err) {
     fe8:	4604      	mov	r4, r0
     fea:	2800      	cmp	r0, #0
     fec:	f47f ae9b 	bne.w	d26 <bt_init+0xf6>
	k_delayed_work_init(&bt_dev.rpa_update, rpa_timeout);
     ff0:	491d      	ldr	r1, [pc, #116]	; (1068 <bt_init+0x438>)
     ff2:	481e      	ldr	r0, [pc, #120]	; (106c <bt_init+0x43c>)
     ff4:	f01d ffe2 	bl	1efbc <k_delayed_work_init>
		if (!bt_dev.id_count) {
     ff8:	79eb      	ldrb	r3, [r5, #7]
     ffa:	2b00      	cmp	r3, #0
     ffc:	f43f ae93 	beq.w	d26 <bt_init+0xf6>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1000:	2104      	movs	r1, #4
    1002:	481b      	ldr	r0, [pc, #108]	; (1070 <bt_init+0x440>)
    1004:	f01a fef2 	bl	1bdec <atomic_or>
	bt_finalize_init();
    1008:	f006 f800 	bl	700c <bt_finalize_init>
	return 0;
    100c:	e68b      	b.n	d26 <bt_init+0xf6>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    100e:	2102      	movs	r1, #2
    1010:	f640 406d 	movw	r0, #3181	; 0xc6d
    1014:	f005 faaa 	bl	656c <bt_hci_cmd_create>
		if (!buf) {
    1018:	4604      	mov	r4, r0
    101a:	b910      	cbnz	r0, 1022 <bt_init+0x3f2>
		return -ENOBUFS;
    101c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1020:	e681      	b.n	d26 <bt_init+0xf6>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    1022:	2102      	movs	r1, #2
    1024:	3008      	adds	r0, #8
    1026:	f01d fab5 	bl	1e594 <net_buf_simple_add>
		cp_le->le = 0x01;
    102a:	2301      	movs	r3, #1
    102c:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    102e:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1030:	4621      	mov	r1, r4
    1032:	4632      	mov	r2, r6
    1034:	f640 406d 	movw	r0, #3181	; 0xc6d
    1038:	f005 faf2 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
    103c:	4604      	mov	r4, r0
    103e:	2800      	cmp	r0, #0
    1040:	f43f aeac 	beq.w	d9c <bt_init+0x16c>
    1044:	e66f      	b.n	d26 <bt_init+0xf6>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    1046:	480b      	ldr	r0, [pc, #44]	; (1074 <bt_init+0x444>)
    1048:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    104c:	e78c      	b.n	f68 <bt_init+0x338>
    104e:	bf00      	nop
    1050:	02008890 	.word	0x02008890
    1054:	20008000 	.word	0x20008000
    1058:	200000a0 	.word	0x200000a0
    105c:	200000d0 	.word	0x200000d0
    1060:	20000089 	.word	0x20000089
    1064:	20000088 	.word	0x20000088
    1068:	000068e1 	.word	0x000068e1
    106c:	20000138 	.word	0x20000138
    1070:	20000098 	.word	0x20000098
    1074:	02008810 	.word	0x02008810

00001078 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    107c:	e9d0 c70b 	ldrd	ip, r7, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1080:	f8d0 8028 	ldr.w	r8, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1084:	eb0c 0407 	add.w	r4, ip, r7
	start_to_address_expected_us = EVENT_JITTER_US +
    1088:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    108a:	45a0      	cmp	r8, r4
{
    108c:	460e      	mov	r6, r1
    108e:	4615      	mov	r5, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1090:	d818      	bhi.n	10c4 <ull_drift_ticks_get+0x4c>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1092:	4f1b      	ldr	r7, [pc, #108]	; (1100 <ull_drift_ticks_get+0x88>)
    1094:	a318      	add	r3, pc, #96	; (adr r3, 10f8 <ull_drift_ticks_get+0x80>)
    1096:	e9d3 2300 	ldrd	r2, r3, [r3]
    109a:	fbac 0107 	umull	r0, r1, ip, r7
    109e:	f7ff fc4d 	bl	93c <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    10a2:	eba4 0408 	sub.w	r4, r4, r8
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    10a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    10aa:	6030      	str	r0, [r6, #0]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    10ac:	a312      	add	r3, pc, #72	; (adr r3, 10f8 <ull_drift_ticks_get+0x80>)
    10ae:	e9d3 2300 	ldrd	r2, r3, [r3]
    10b2:	fba4 0107 	umull	r0, r1, r4, r7
    10b6:	f7ff fc41 	bl	93c <__aeabi_uldivmod>
    10ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    10be:	6028      	str	r0, [r5, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    10c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    10c4:	4c0e      	ldr	r4, [pc, #56]	; (1100 <ull_drift_ticks_get+0x88>)
    10c6:	a30c      	add	r3, pc, #48	; (adr r3, 10f8 <ull_drift_ticks_get+0x80>)
    10c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    10cc:	fba8 0104 	umull	r0, r1, r8, r4
    10d0:	f7ff fc34 	bl	93c <__aeabi_uldivmod>
    10d4:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    10d8:	f107 0030 	add.w	r0, r7, #48	; 0x30
		*ticks_drift_plus =
    10dc:	6033      	str	r3, [r6, #0]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    10de:	fba0 0104 	umull	r0, r1, r0, r4
    10e2:	a305      	add	r3, pc, #20	; (adr r3, 10f8 <ull_drift_ticks_get+0x80>)
    10e4:	e9d3 2300 	ldrd	r2, r3, [r3]
    10e8:	f7ff fc28 	bl	93c <__aeabi_uldivmod>
    10ec:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    10f0:	6028      	str	r0, [r5, #0]
}
    10f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    10f6:	bf00      	nop
    10f8:	1afd498d 	.word	0x1afd498d
    10fc:	00000007 	.word	0x00000007
    1100:	3b9aca00 	.word	0x3b9aca00
    1104:	00000000 	.word	0x00000000

00001108 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
inline struct ll_adv_set *ull_adv_is_enabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || !adv->is_enabled) {
    110c:	4cb2      	ldr	r4, [pc, #712]	; (13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>)
{
    110e:	b08f      	sub	sp, #60	; 0x3c
	if (!enable) {
    1110:	2800      	cmp	r0, #0
    1112:	f000 81cd 	beq.w	14b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x128>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1116:	f894 60d6 	ldrb.w	r6, [r4, #214]	; 0xd6
    111a:	f016 0601 	ands.w	r6, r6, #1
    111e:	d137      	bne.n	1190 <ll_adv_enable+0x88>
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1120:	f894 807c 	ldrb.w	r8, [r4, #124]	; 0x7c
		ull_filter_adv_update(lll->filter_policy);
    1124:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1128:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
    112c:	2727      	movs	r7, #39	; 0x27
    112e:	232d      	movs	r3, #45	; 0x2d
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1130:	fb07 4808 	mla	r8, r7, r8, r4
    1134:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1138:	fb17 3702 	smlabb	r7, r7, r2, r3
		lll->rl_idx = FILTER_IDX_NONE;
    113c:	23ff      	movs	r3, #255	; 0xff
    113e:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
		ull_filter_adv_update(lll->filter_policy);
    1142:	f012 fa8f 	bl	13664 <ull_filter_adv_update>
		if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1146:	f894 00d6 	ldrb.w	r0, [r4, #214]	; 0xd6
    114a:	0741      	lsls	r1, r0, #29
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    114c:	f108 087d 	add.w	r8, r8, #125	; 0x7d
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1150:	eb04 0907 	add.w	r9, r4, r7
    1154:	f100 8129 	bmi.w	13aa <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x22>
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
    1158:	5de0      	ldrb	r0, [r4, r7]
    115a:	4631      	mov	r1, r6
    115c:	f3c0 1080 	ubfx	r0, r0, #6, #1
    1160:	f00b fc46 	bl	c9f0 <ll_addr_get>
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
    1164:	2206      	movs	r2, #6
    1166:	4601      	mov	r1, r0
				tx_addr = ll_addr_get(pdu_adv->tx_addr, NULL);
    1168:	4605      	mov	r5, r0
			memcpy(&pdu_adv->adv_ind.addr[0], tx_addr,
    116a:	f109 0002 	add.w	r0, r9, #2
    116e:	f01a fc5c 	bl	1ba2a <memcpy>
			memcpy(&pdu_scan->scan_rsp.addr[0], tx_addr,
    1172:	4629      	mov	r1, r5
    1174:	2206      	movs	r2, #6
    1176:	f108 0002 	add.w	r0, r8, #2
    117a:	f01a fc56 	bl	1ba2a <memcpy>
		if (pdu_adv->tx_addr &&
    117e:	5de3      	ldrb	r3, [r4, r7]
    1180:	065a      	lsls	r2, r3, #25
    1182:	d40a      	bmi.n	119a <ll_adv_enable+0x92>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1184:	f013 0f0e 	tst.w	r3, #14
    1188:	f040 80e6 	bne.w	1358 <ll_adv_enable+0x250>
		if (lll->conn) {
    118c:	6a63      	ldr	r3, [r4, #36]	; 0x24
    118e:	b18b      	cbz	r3, 11b4 <ll_adv_enable+0xac>
	ret = ull_ticker_status_take(ret, &ret_cb);
	if (ret) {
		mark = ull_disable_unmark(adv);
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
    1190:	260c      	movs	r6, #12
}
    1192:	4630      	mov	r0, r6
    1194:	b00f      	add	sp, #60	; 0x3c
    1196:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !mem_nz(pdu_adv->adv_ind.addr, BDADDR_SIZE)) {
    119a:	2106      	movs	r1, #6
    119c:	f109 0002 	add.w	r0, r9, #2
    11a0:	f00a f878 	bl	b294 <mem_nz>
		if (pdu_adv->tx_addr &&
    11a4:	2800      	cmp	r0, #0
    11a6:	f000 822d 	beq.w	1604 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x27c>
    11aa:	5de3      	ldrb	r3, [r4, r7]
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    11ac:	f013 0f0e 	tst.w	r3, #14
    11b0:	d0ec      	beq.n	118c <ll_adv_enable+0x84>
    11b2:	e0d1      	b.n	1358 <ll_adv_enable+0x250>
		link = ll_rx_link_alloc();
    11b4:	f00d fe88 	bl	eec8 <ll_rx_link_alloc>
		if (!link) {
    11b8:	4682      	mov	sl, r0
    11ba:	2800      	cmp	r0, #0
    11bc:	f000 8247 	beq.w	164e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2c6>
		node_rx = ll_rx_alloc();
    11c0:	f00d fe8e 	bl	eee0 <ll_rx_alloc>
		if (!node_rx) {
    11c4:	4683      	mov	fp, r0
    11c6:	2800      	cmp	r0, #0
    11c8:	f000 825a 	beq.w	1680 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f8>
		conn = ll_conn_acquire();
    11cc:	f00f f89e 	bl	1030c <ll_conn_acquire>
		if (!conn) {
    11d0:	4605      	mov	r5, r0
    11d2:	2800      	cmp	r0, #0
    11d4:	f000 8251 	beq.w	167a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2f2>
		conn_lll->handle = 0xFFFF;
    11d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
		if (!conn_lll->link_tx_free) {
    11dc:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
    11de:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
    11e0:	f105 031c 	add.w	r3, r5, #28
    11e4:	930b      	str	r3, [sp, #44]	; 0x2c
		if (!conn_lll->link_tx_free) {
    11e6:	2800      	cmp	r0, #0
    11e8:	f000 822d 	beq.w	1646 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2be>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    11ec:	f105 026c 	add.w	r2, r5, #108	; 0x6c
    11f0:	f105 0168 	add.w	r1, r5, #104	; 0x68
    11f4:	f00a f85a 	bl	b2ac <memq_init>
		conn_lll->phy_tx = BIT(0);
    11f8:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
    11fc:	f895 e03d 	ldrb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
    1200:	f895 00dc 	ldrb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1204:	f895 1126 	ldrb.w	r1, [r5, #294]	; 0x126
		conn_lll->slave.latency_enabled = 0;
    1208:	f895 c040 	ldrb.w	ip, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
    120c:	f8c5 a130 	str.w	sl, [r5, #304]	; 0x130
		conn_lll->phy_tx = BIT(0);
    1210:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    1214:	f022 0207 	bic.w	r2, r2, #7
    1218:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    121c:	f042 0201 	orr.w	r2, r2, #1
		conn_lll->data_chan_sel = 0;
    1220:	f00e 0e3f 	and.w	lr, lr, #63	; 0x3f
    1224:	f06e 0e7f 	orn	lr, lr, #127	; 0x7f
		conn->common.fex_valid = 0;
    1228:	f020 0003 	bic.w	r0, r0, #3
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    122c:	f021 0103 	bic.w	r1, r1, #3
		conn_lll->phy_tx = BIT(0);
    1230:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->tx_pwr_lvl = RADIO_TXP_DEFAULT;
    1234:	2200      	movs	r2, #0
		conn_lll->slave.latency_enabled = 0;
    1236:	f362 0c00 	bfi	ip, r2, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    123a:	f04f 131b 	mov.w	r3, #1769499	; 0x1b001b
		conn_lll->data_chan_sel = 0;
    123e:	f885 e03d 	strb.w	lr, [r5, #61]	; 0x3d
		conn->common.fex_valid = 0;
    1242:	f885 00dc 	strb.w	r0, [r5, #220]	; 0xdc
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1246:	f885 1126 	strb.w	r1, [r5, #294]	; 0x126
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    124a:	4864      	ldr	r0, [pc, #400]	; (13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>)
		conn->llcp_feature.features_conn = LL_FEAT;
    124c:	4964      	ldr	r1, [pc, #400]	; (13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>)
		conn_lll->tx_pwr_lvl = RADIO_TXP_DEFAULT;
    124e:	f885 20c1 	strb.w	r2, [r5, #193]	; 0xc1
		conn->connect_expire = 6;
    1252:	f04f 0e06 	mov.w	lr, #6
		conn_lll->slave.window_widening_event_us = 0;
    1256:	e9c5 2213 	strd	r2, r2, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
    125a:	f885 203f 	strb.w	r2, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    125e:	866a      	strh	r2, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
    1260:	636a      	str	r2, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
    1262:	656a      	str	r2, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
    1264:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
    1268:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    126c:	f8a5 20e8 	strh.w	r2, [r5, #232]	; 0xe8
    1270:	f885 20ea 	strb.w	r2, [r5, #234]	; 0xea
		conn->llcp_rx = NULL;
    1274:	f8c5 2100 	str.w	r2, [r5, #256]	; 0x100
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1278:	f8a5 2104 	strh.w	r2, [r5, #260]	; 0x104
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    127c:	f8a5 2118 	strh.w	r2, [r5, #280]	; 0x118
		conn->llcp_feature.features_peer = 0;
    1280:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    1284:	f8a5 2124 	strh.w	r2, [r5, #292]	; 0x124
		conn->llcp_terminate.reason_peer = 0;
    1288:	f885 212f 	strb.w	r2, [r5, #303]	; 0x12f
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    128c:	65eb      	str	r3, [r5, #92]	; 0x5c
		conn_lll->slave.latency_enabled = 0;
    128e:	f885 c040 	strb.w	ip, [r5, #64]	; 0x40
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1292:	6628      	str	r0, [r5, #96]	; 0x60
		conn->connect_expire = 6;
    1294:	f8a5 e0c4 	strh.w	lr, [r5, #196]	; 0xc4
		conn->llcp_feature.features_conn = LL_FEAT;
    1298:	f8c5 111c 	str.w	r1, [r5, #284]	; 0x11c
		conn_lll->link_tx_free = NULL;
    129c:	67aa      	str	r2, [r5, #120]	; 0x78
		conn->llcp_conn_param.disabled = 0;
    129e:	f895 e172 	ldrb.w	lr, [r5, #370]	; 0x172
		conn->llcp_length.disabled = 0U;
    12a2:	f895 c19a 	ldrb.w	ip, [r5, #410]	; 0x19a
		conn_lll->sn = 0;
    12a6:	f895 007e 	ldrb.w	r0, [r5, #126]	; 0x7e
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    12aa:	f895 1152 	ldrb.w	r1, [r5, #338]	; 0x152
		conn_lll->packet_tx_head_len = 0;
    12ae:	f8a5 207c 	strh.w	r2, [r5, #124]	; 0x7c
		conn->llcp_length.disabled = 0U;
    12b2:	f362 0cc3 	bfi	ip, r2, #3, #1
		conn->llcp_conn_param.disabled = 0;
    12b6:	f362 1e04 	bfi	lr, r2, #4, #1
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    12ba:	f021 0107 	bic.w	r1, r1, #7
		conn_lll->sn = 0;
    12be:	f020 001f 	bic.w	r0, r0, #31
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    12c2:	f8a5 2150 	strh.w	r2, [r5, #336]	; 0x150
		conn->llcp_conn_param.req = 0;
    12c6:	f8a5 2170 	strh.w	r2, [r5, #368]	; 0x170
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    12ca:	f8a5 2198 	strh.w	r2, [r5, #408]	; 0x198
		conn->llcp_length.cache.tx_octets = 0U;
    12ce:	f8a5 21a4 	strh.w	r2, [r5, #420]	; 0x1a4
		conn->llcp_length.disabled = 0U;
    12d2:	f885 c19a 	strb.w	ip, [r5, #410]	; 0x19a
		conn->llcp_conn_param.disabled = 0;
    12d6:	f885 e172 	strb.w	lr, [r5, #370]	; 0x172
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    12da:	f885 1152 	strb.w	r1, [r5, #338]	; 0x152
		conn_lll->sn = 0;
    12de:	f885 007e 	strb.w	r0, [r5, #126]	; 0x7e
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    12e2:	f00f fb5f 	bl	109a4 <ull_conn_default_tx_octets_get>
    12e6:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
    12ea:	f00f fb61 	bl	109b0 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    12ee:	f8d5 31a8 	ldr.w	r3, [r5, #424]	; 0x1a8
    12f2:	493c      	ldr	r1, [pc, #240]	; (13e4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x5c>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    12f4:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    12f8:	4019      	ands	r1, r3
    12fa:	f8c5 11a8 	str.w	r1, [r5, #424]	; 0x1a8
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    12fe:	f00f fb5d 	bl	109bc <ull_conn_default_phy_tx_get>
    1302:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
    1306:	f360 0102 	bfi	r1, r0, #0, #3
    130a:	f885 11ac 	strb.w	r1, [r5, #428]	; 0x1ac
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    130e:	f00f fb5b 	bl	109c8 <ull_conn_default_phy_rx_get>
		adv->node_rx_cc_free = node_rx;
    1312:	e9c4 ab33 	strd	sl, fp, [r4, #204]	; 0xcc
		lll->conn = conn_lll;
    1316:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1318:	6263      	str	r3, [r4, #36]	; 0x24
		conn->phy_pref_flags = 0;
    131a:	f895 11ac 	ldrb.w	r1, [r5, #428]	; 0x1ac
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    131e:	f895 c020 	ldrb.w	ip, [r5, #32]
	hdr->parent = parent;
    1322:	61ed      	str	r5, [r5, #28]
    1324:	0103      	lsls	r3, r0, #4
		conn->tx_data = conn->tx_data_last = 0;
    1326:	2200      	movs	r2, #0
		conn->phy_pref_flags = 0;
    1328:	f003 0370 	and.w	r3, r3, #112	; 0x70
    132c:	f021 0178 	bic.w	r1, r1, #120	; 0x78
    1330:	430b      	orrs	r3, r1
	hdr->is_stop = 0U;
    1332:	f362 0c00 	bfi	ip, r2, #0, #1
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1336:	e9c5 226e 	strd	r2, r2, [r5, #440]	; 0x1b8
    133a:	e9c5 226c 	strd	r2, r2, [r5, #432]	; 0x1b0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    133e:	e9c5 2205 	strd	r2, r2, [r5, #20]
		conn->tx_data = conn->tx_data_last = 0;
    1342:	f8c5 21c0 	str.w	r2, [r5, #448]	; 0x1c0
		conn->phy_pref_flags = 0;
    1346:	f885 31ac 	strb.w	r3, [r5, #428]	; 0x1ac
    134a:	f885 c020 	strb.w	ip, [r5, #32]
		err = lll_clock_wait();
    134e:	f013 fb5d 	bl	14a0c <lll_clock_wait>
		if (err) {
    1352:	2800      	cmp	r0, #0
    1354:	f040 8160 	bne.w	1618 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x290>
	uint8_t ch_map = lll->chan_map;
    1358:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    135c:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    135e:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1362:	a80d      	add	r0, sp, #52	; 0x34
	uint8_t ch_map = lll->chan_map;
    1364:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1368:	f00a f914 	bl	b594 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    136c:	2800      	cmp	r0, #0
    136e:	f000 8094 	beq.w	149a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x112>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    1372:	5de3      	ldrb	r3, [r4, r7]
    1374:	f003 030f 	and.w	r3, r3, #15
    1378:	2b02      	cmp	r3, #2
    137a:	d035      	beq.n	13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    137c:	2b01      	cmp	r3, #1
    137e:	f000 814f 	beq.w	1620 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x298>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    1382:	f898 2001 	ldrb.w	r2, [r8, #1]
    1386:	3210      	adds	r2, #16
		const uint16_t scan_rsp_us =
    1388:	00d2      	lsls	r2, r2, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    138a:	2b00      	cmp	r3, #0
    138c:	f040 813c 	bne.w	1608 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x280>
				adv_size += pdu_adv->len;
    1390:	f899 3001 	ldrb.w	r3, [r9, #1]
    1394:	3310      	adds	r3, #16
    1396:	00db      	lsls	r3, r3, #3
    1398:	f503 714d 	add.w	r1, r3, #820	; 0x334
    139c:	440a      	add	r2, r1
    139e:	f503 739a 	add.w	r3, r3, #308	; 0x134
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    13a2:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    13a4:	fb03 2000 	mla	r0, r3, r0, r2
    13a8:	e02a      	b.n	1400 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x78>
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    13aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    13ae:	4632      	mov	r2, r6
    13b0:	f104 01d7 	add.w	r1, r4, #215	; 0xd7
    13b4:	f012 fb3a 	bl	13a2c <ull_filter_rl_find>
			if (lll->rl_idx != FILTER_IDX_NONE) {
    13b8:	28ff      	cmp	r0, #255	; 0xff
			lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    13ba:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
			if (lll->rl_idx != FILTER_IDX_NONE) {
    13be:	d002      	beq.n	13c6 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x3e>
				ull_filter_rpa_update(false);
    13c0:	4630      	mov	r0, r6
    13c2:	f012 f9f1 	bl	137a8 <ull_filter_rpa_update>
			ull_filter_adv_pdu_update(adv, pdu_adv);
    13c6:	4649      	mov	r1, r9
    13c8:	4803      	ldr	r0, [pc, #12]	; (13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>)
    13ca:	f012 f965 	bl	13698 <ull_filter_adv_pdu_update>
			ull_filter_adv_pdu_update(adv, pdu_scan);
    13ce:	4802      	ldr	r0, [pc, #8]	; (13d8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x50>)
    13d0:	4641      	mov	r1, r8
    13d2:	f012 f961 	bl	13698 <ull_filter_adv_pdu_update>
		if (!priv) {
    13d6:	e6d2      	b.n	117e <ll_adv_enable+0x76>
    13d8:	20001e58 	.word	0x20001e58
    13dc:	01480148 	.word	0x01480148
    13e0:	0001497f 	.word	0x0001497f
    13e4:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
    13e8:	f899 3001 	ldrb.w	r3, [r9, #1]
    13ec:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    13ee:	00db      	lsls	r3, r3, #3
    13f0:	fb00 f303 	mul.w	r3, r0, r3
    13f4:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    13f8:	3801      	subs	r0, #1
    13fa:	2264      	movs	r2, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    13fc:	fb02 3000 	mla	r0, r2, r0, r3
    1400:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1404:	49a8      	ldr	r1, [pc, #672]	; (16a8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x320>)
	hdr->parent = parent;
    1406:	61e4      	str	r4, [r4, #28]
    1408:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    140a:	f365 0300 	bfi	r3, r5, #0, #1
	adv->evt.ticks_xtal_to_start =
    140e:	2231      	movs	r2, #49	; 0x31
    1410:	f884 3020 	strb.w	r3, [r4, #32]
    1414:	6022      	str	r2, [r4, #0]
    1416:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    141a:	a3a1      	add	r3, pc, #644	; (adr r3, 16a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x318>)
    141c:	e9d3 2300 	ldrd	r2, r3, [r3]
	adv->evt.ticks_preempt_to_start =
    1420:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1424:	fba0 0101 	umull	r0, r1, r0, r1
    1428:	f7ff fa88 	bl	93c <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    142c:	f8b4 90d4 	ldrh.w	r9, [r4, #212]	; 0xd4
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1430:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1432:	f00b fad7 	bl	c9e4 <ticker_ticks_now_get>
    1436:	4680      	mov	r8, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1438:	f1b9 0f00 	cmp.w	r9, #0
    143c:	d107      	bne.n	144e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xc6>
    143e:	5de5      	ldrb	r5, [r4, r7]
    1440:	f005 050f 	and.w	r5, r5, #15
    1444:	f1a5 0501 	sub.w	r5, r5, #1
    1448:	fab5 f585 	clz	r5, r5
    144c:	096d      	lsrs	r5, r5, #5
    144e:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    1452:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    1456:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    145a:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
    145e:	f000 8086 	beq.w	156e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1e6>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1462:	f8df 9258 	ldr.w	r9, [pc, #600]	; 16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>
				   (adv->evt.ticks_slot + ticks_slot_overhead),
    1466:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1468:	4990      	ldr	r1, [pc, #576]	; (16ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x324>)
    146a:	9304      	str	r3, [sp, #16]
    146c:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    146e:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1470:	af0c      	add	r7, sp, #48	; 0x30
    1472:	9301      	str	r3, [sp, #4]
    1474:	9105      	str	r1, [sp, #20]
    1476:	e9cd 9707 	strd	r9, r7, [sp, #28]
    147a:	2103      	movs	r1, #3
    147c:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1480:	9406      	str	r4, [sp, #24]
    1482:	462a      	mov	r2, r5
    1484:	9000      	str	r0, [sp, #0]
    1486:	4643      	mov	r3, r8
		ret_cb = TICKER_STATUS_BUSY;
    1488:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    148a:	f00b f9f9 	bl	c880 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    148e:	4639      	mov	r1, r7
    1490:	f00d fdae 	bl	eff0 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1494:	2800      	cmp	r0, #0
    1496:	f000 80a2 	beq.w	15de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x256>
	if (adv->lll.conn) {
    149a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    149c:	2b00      	cmp	r3, #0
    149e:	f43f ae77 	beq.w	1190 <ll_adv_enable+0x88>
		conn_release(adv);
    14a2:	f00e f8d3 	bl	f64c <conn_release.constprop.0>
	return BT_HCI_ERR_CMD_DISALLOWED;
    14a6:	260c      	movs	r6, #12
}
    14a8:	4630      	mov	r0, r6
    14aa:	b00f      	add	sp, #60	; 0x3c
    14ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (!adv || !adv->is_enabled) {
    14b0:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    14b4:	07dd      	lsls	r5, r3, #31
    14b6:	f57f ae6b 	bpl.w	1190 <ll_adv_enable+0x88>
	mark = ull_disable_mark(adv);
    14ba:	4620      	mov	r0, r4
    14bc:	f00d fdc0 	bl	f040 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    14c0:	4284      	cmp	r4, r0
    14c2:	d00c      	beq.n	14de <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x156>
    14c4:	4a7a      	ldr	r2, [pc, #488]	; (16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>)
    14c6:	497b      	ldr	r1, [pc, #492]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
    14c8:	487b      	ldr	r0, [pc, #492]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
    14ca:	f44f 63e4 	mov.w	r3, #1824	; 0x720
    14ce:	f018 fc92 	bl	19df6 <printk>
    14d2:	4040      	eors	r0, r0
    14d4:	f380 8811 	msr	BASEPRI, r0
    14d8:	f04f 0003 	mov.w	r0, #3
    14dc:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    14de:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    14e2:	07d8      	lsls	r0, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    14e4:	ad0d      	add	r5, sp, #52	; 0x34
	if (adv->lll.is_hdcd) {
    14e6:	d50e      	bpl.n	1506 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x17e>
		ret_cb = TICKER_STATUS_BUSY;
    14e8:	2202      	movs	r2, #2
    14ea:	920d      	str	r2, [sp, #52]	; 0x34
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    14ec:	2103      	movs	r1, #3
    14ee:	4b73      	ldr	r3, [pc, #460]	; (16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>)
    14f0:	9500      	str	r5, [sp, #0]
    14f2:	2201      	movs	r2, #1
    14f4:	2000      	movs	r0, #0
    14f6:	f00b fa2f 	bl	c958 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    14fa:	4629      	mov	r1, r5
    14fc:	f00d fd78 	bl	eff0 <ull_ticker_status_take>
		if (ret) {
    1500:	2800      	cmp	r0, #0
    1502:	f040 80c2 	bne.w	168a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x302>
	ret_cb = TICKER_STATUS_BUSY;
    1506:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    1508:	2103      	movs	r1, #3
    150a:	4b6c      	ldr	r3, [pc, #432]	; (16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>)
    150c:	9500      	str	r5, [sp, #0]
    150e:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    1510:	920d      	str	r2, [sp, #52]	; 0x34
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    1512:	f00b fa21 	bl	c958 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1516:	4629      	mov	r1, r5
    1518:	f00d fd6a 	bl	eff0 <ull_ticker_status_take>
	if (ret) {
    151c:	2800      	cmp	r0, #0
    151e:	f040 8098 	bne.w	1652 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2ca>
	}

	ret = ull_disable(&adv->lll);
    1522:	4867      	ldr	r0, [pc, #412]	; (16c0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x338>)
    1524:	f00d fdc8 	bl	f0b8 <ull_disable>
	LL_ASSERT(!ret);
    1528:	2800      	cmp	r0, #0
    152a:	d17e      	bne.n	162a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a2>

	mark = ull_disable_unmark(adv);
    152c:	4865      	ldr	r0, [pc, #404]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    152e:	f00d fd93 	bl	f058 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    1532:	4284      	cmp	r4, r0
    1534:	d00c      	beq.n	1550 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1c8>
    1536:	4a5e      	ldr	r2, [pc, #376]	; (16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>)
    1538:	495e      	ldr	r1, [pc, #376]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
    153a:	485f      	ldr	r0, [pc, #380]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
    153c:	f240 7342 	movw	r3, #1858	; 0x742
    1540:	f018 fc59 	bl	19df6 <printk>
    1544:	4040      	eors	r0, r0
    1546:	f380 8811 	msr	BASEPRI, r0
    154a:	f04f 0003 	mov.w	r0, #3
    154e:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
    1550:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1552:	b10b      	cbz	r3, 1558 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1d0>
		conn_release(adv);
    1554:	f00e f87a 	bl	f64c <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
    1558:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
    155c:	2600      	movs	r6, #0
	adv->is_enabled = 0U;
    155e:	f36f 0300 	bfc	r3, #0, #1
}
    1562:	4630      	mov	r0, r6
	adv->is_enabled = 0U;
    1564:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
}
    1568:	b00f      	add	sp, #60	; 0x3c
    156a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    156e:	4856      	ldr	r0, [pc, #344]	; (16c8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x340>)
		const uint32_t ticks_slot = adv->evt.ticks_slot +
    1570:	68e2      	ldr	r2, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1572:	4b56      	ldr	r3, [pc, #344]	; (16cc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x344>)
		ret = ticker_start_ext(
    1574:	f8df e144 	ldr.w	lr, [pc, #324]	; 16bc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x334>
    1578:	9406      	str	r4, [sp, #24]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    157a:	fba9 0100 	umull	r0, r1, r9, r0
    157e:	2791      	movs	r7, #145	; 0x91
    1580:	fb07 1109 	mla	r1, r7, r9, r1
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1584:	f202 1747 	addw	r7, r2, #327	; 0x147
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1588:	601f      	str	r7, [r3, #0]
		ret = ticker_start_ext(
    158a:	9204      	str	r2, [sp, #16]
    158c:	4a47      	ldr	r2, [pc, #284]	; (16ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x324>)
    158e:	9309      	str	r3, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1590:	f04f 0902 	mov.w	r9, #2
		ret = ticker_start_ext(
    1594:	f64f 7cff 	movw	ip, #65535	; 0xffff
    1598:	9205      	str	r2, [sp, #20]
    159a:	af0c      	add	r7, sp, #48	; 0x30
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    159c:	a340      	add	r3, pc, #256	; (adr r3, 16a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x318>)
    159e:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret = ticker_start_ext(
    15a2:	e9cd e707 	strd	lr, r7, [sp, #28]
    15a6:	9502      	str	r5, [sp, #8]
		ret_cb = TICKER_STATUS_BUSY;
    15a8:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
		ret = ticker_start_ext(
    15ac:	f8cd c00c 	str.w	ip, [sp, #12]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    15b0:	f7ff f9c4 	bl	93c <__aeabi_uldivmod>
		ret = ticker_start_ext(
    15b4:	464a      	mov	r2, r9
    15b6:	e9cd 5000 	strd	r5, r0, [sp]
    15ba:	4643      	mov	r3, r8
    15bc:	4628      	mov	r0, r5
    15be:	2103      	movs	r1, #3
    15c0:	f00b f908 	bl	c7d4 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    15c4:	4639      	mov	r1, r7
    15c6:	f00d fd13 	bl	eff0 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    15ca:	2800      	cmp	r0, #0
    15cc:	f47f af65 	bne.w	149a <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x112>
	adv->is_enabled = 1;
    15d0:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    15d4:	f043 0301 	orr.w	r3, r3, #1
    15d8:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	return 0;
    15dc:	e5d9      	b.n	1192 <ll_adv_enable+0x8a>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15de:	493c      	ldr	r1, [pc, #240]	; (16d0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x348>)
    15e0:	9105      	str	r1, [sp, #20]
    15e2:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    15e6:	9200      	str	r2, [sp, #0]
    15e8:	e9cd 9707 	strd	r9, r7, [sp, #28]
    15ec:	e9cd 0003 	strd	r0, r0, [sp, #12]
    15f0:	e9cd 0001 	strd	r0, r0, [sp, #4]
    15f4:	9406      	str	r4, [sp, #24]
    15f6:	4643      	mov	r3, r8
    15f8:	2201      	movs	r2, #1
    15fa:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    15fc:	950c      	str	r5, [sp, #48]	; 0x30
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    15fe:	f00b f93f 	bl	c880 <ticker_start>
    1602:	e7df      	b.n	15c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x23c>
			return BT_HCI_ERR_INVALID_PARAM;
    1604:	2612      	movs	r6, #18
    1606:	e5c4      	b.n	1192 <ll_adv_enable+0x8a>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1608:	2b06      	cmp	r3, #6
    160a:	f43f aec1 	beq.w	1390 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x8>
    160e:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    1612:	f44f 721b 	mov.w	r2, #620	; 0x26c
    1616:	e6c4      	b.n	13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
			conn_release(adv);
    1618:	f00e f818 	bl	f64c <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    161c:	2603      	movs	r6, #3
    161e:	e5b8      	b.n	1192 <ll_adv_enable+0x8a>
    1620:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    1624:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
    1628:	e6bb      	b.n	13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
	LL_ASSERT(!ret);
    162a:	4a21      	ldr	r2, [pc, #132]	; (16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>)
    162c:	4929      	ldr	r1, [pc, #164]	; (16d4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x34c>)
    162e:	4822      	ldr	r0, [pc, #136]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
    1630:	f240 733f 	movw	r3, #1855	; 0x73f
    1634:	f018 fbdf 	bl	19df6 <printk>
    1638:	4040      	eors	r0, r0
    163a:	f380 8811 	msr	BASEPRI, r0
    163e:	f04f 0003 	mov.w	r0, #3
    1642:	df02      	svc	2
    1644:	e772      	b.n	152c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a4>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1646:	f105 0070 	add.w	r0, r5, #112	; 0x70
    164a:	67a8      	str	r0, [r5, #120]	; 0x78
    164c:	e5ce      	b.n	11ec <ll_adv_enable+0xe4>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    164e:	2607      	movs	r6, #7
    1650:	e59f      	b.n	1192 <ll_adv_enable+0x8a>
		mark = ull_disable_unmark(adv);
    1652:	481c      	ldr	r0, [pc, #112]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    1654:	f00d fd00 	bl	f058 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    1658:	4284      	cmp	r4, r0
    165a:	f43f ad99 	beq.w	1190 <ll_adv_enable+0x88>
    165e:	f240 7339 	movw	r3, #1849	; 0x739
    1662:	4a13      	ldr	r2, [pc, #76]	; (16b0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x328>)
    1664:	4913      	ldr	r1, [pc, #76]	; (16b4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x32c>)
    1666:	4814      	ldr	r0, [pc, #80]	; (16b8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x330>)
    1668:	f018 fbc5 	bl	19df6 <printk>
    166c:	4040      	eors	r0, r0
    166e:	f380 8811 	msr	BASEPRI, r0
    1672:	f04f 0003 	mov.w	r0, #3
    1676:	df02      	svc	2
    1678:	e58a      	b.n	1190 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    167a:	4658      	mov	r0, fp
    167c:	f00d fc36 	bl	eeec <ll_rx_release>
			ll_rx_link_release(link);
    1680:	4650      	mov	r0, sl
    1682:	f00d fc27 	bl	eed4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1686:	2607      	movs	r6, #7
    1688:	e583      	b.n	1192 <ll_adv_enable+0x8a>
			mark = ull_disable_unmark(adv);
    168a:	480e      	ldr	r0, [pc, #56]	; (16c4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x33c>)
    168c:	f00d fce4 	bl	f058 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    1690:	4284      	cmp	r4, r0
    1692:	f43f ad7d 	beq.w	1190 <ll_adv_enable+0x88>
    1696:	f240 732b 	movw	r3, #1835	; 0x72b
    169a:	e7e2      	b.n	1662 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2da>
    169c:	f3af 8000 	nop.w
    16a0:	1afd498d 	.word	0x1afd498d
    16a4:	00000007 	.word	0x00000007
    16a8:	3b9aca00 	.word	0x3b9aca00
    16ac:	0000f3bd 	.word	0x0000f3bd
    16b0:	0001ff24 	.word	0x0001ff24
    16b4:	00020014 	.word	0x00020014
    16b8:	0001fcdc 	.word	0x0001fcdc
    16bc:	0000efe5 	.word	0x0000efe5
    16c0:	20001e74 	.word	0x20001e74
    16c4:	20001e58 	.word	0x20001e58
    16c8:	84e72a00 	.word	0x84e72a00
    16cc:	20001f38 	.word	0x20001f38
    16d0:	0000f5c9 	.word	0x0000f5c9
    16d4:	0001fe0c 	.word	0x0001fe0c

000016d8 <ull_conn_llcp>:

	return 0;
}

int ull_conn_llcp(struct ll_conn *conn, uint32_t ticks_at_expire, uint16_t lazy)
{
    16d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    16dc:	4604      	mov	r4, r0
	/* Check if no other procedure with instant is requested and not in
	 * Encryption setup.
	 */
	if ((conn->llcp_ack == conn->llcp_req) &&
    16de:	f890 70e9 	ldrb.w	r7, [r0, #233]	; 0xe9
    16e2:	f890 00e8 	ldrb.w	r0, [r0, #232]	; 0xe8
    16e6:	4287      	cmp	r7, r0
{
    16e8:	b08d      	sub	sp, #52	; 0x34
    16ea:	460d      	mov	r5, r1
    16ec:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
    16ee:	d00e      	beq.n	170e <ull_conn_llcp+0x36>
	}

	/* Check if procedures with instant or encryption setup is requested or
	 * active.
	 */
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
    16f0:	1bc0      	subs	r0, r0, r7
    16f2:	f000 0003 	and.w	r0, r0, #3
    16f6:	2802      	cmp	r0, #2
    16f8:	d01b      	beq.n	1732 <ull_conn_llcp+0x5a>
			break;
		}
	}

	/* Terminate Procedure Request */
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
    16fa:	f894 212d 	ldrb.w	r2, [r4, #301]	; 0x12d
    16fe:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    1702:	429a      	cmp	r2, r3
    1704:	d130      	bne.n	1768 <ull_conn_llcp+0x90>
				conn->procedure_expire++;
			}
		}
	}

	return 0;
    1706:	2000      	movs	r0, #0
}
    1708:	b00d      	add	sp, #52	; 0x34
    170a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !conn->llcp_enc.pause_rx) {
    170e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	if ((conn->llcp_ack == conn->llcp_req) &&
    1712:	f013 0801 	ands.w	r8, r3, #1
    1716:	d1f0      	bne.n	16fa <ull_conn_llcp+0x22>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
    1718:	f894 1105 	ldrb.w	r1, [r4, #261]	; 0x105
    171c:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
    1720:	428a      	cmp	r2, r1
    1722:	f000 8394 	beq.w	1e4e <ull_conn_llcp+0x776>
			conn->llcp_ack -= 2U;
    1726:	1eb8      	subs	r0, r7, #2
			conn->llcp_type = LLCP_CONN_UPD;
    1728:	2301      	movs	r3, #1
			conn->llcp_ack -= 2U;
    172a:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CONN_UPD;
    172e:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    1732:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
    1736:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
    173a:	429a      	cmp	r2, r3
    173c:	d006      	beq.n	174c <ull_conn_llcp+0x74>
			if ((conn->llcp_length.state ==
    173e:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
    1742:	f002 0106 	and.w	r1, r2, #6
    1746:	2904      	cmp	r1, #4
    1748:	f000 83c5 	beq.w	1ed6 <ull_conn_llcp+0x7fe>
		switch (conn->llcp_type) {
    174c:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
    1750:	1e7b      	subs	r3, r7, #1
    1752:	2b05      	cmp	r3, #5
    1754:	f200 836d 	bhi.w	1e32 <ull_conn_llcp+0x75a>
    1758:	e8df f013 	tbh	[pc, r3, lsl #1]
    175c:	0304005c 	.word	0x0304005c
    1760:	036b0280 	.word	0x036b0280
    1764:	01a9032e 	.word	0x01a9032e
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1768:	4829      	ldr	r0, [pc, #164]	; (1810 <ull_conn_llcp+0x138>)
    176a:	f009 fd49 	bl	b200 <mem_acquire>
		if (tx) {
    176e:	b358      	cbz	r0, 17c8 <ull_conn_llcp+0xf0>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
    1770:	f894 312c 	ldrb.w	r3, [r4, #300]	; 0x12c
    1774:	f884 312d 	strb.w	r3, [r4, #301]	; 0x12d
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1778:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    177a:	2202      	movs	r2, #2
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    177c:	f043 0303 	orr.w	r3, r3, #3
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
    1780:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
    1782:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
    1784:	71c2      	strb	r2, [r0, #7]
					 struct node_tx *tx, bool pause)
{
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* data/ctrl packet is in the head */
	    conn->tx_head &&
    1786:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_tx->llctrl.terminate_ind.error_code =
    178a:	f894 212e 	ldrb.w	r2, [r4, #302]	; 0x12e
    178e:	7202      	strb	r2, [r0, #8]
	if (
    1790:	b32b      	cbz	r3, 17de <ull_conn_llcp+0x106>
#if defined(CONFIG_BT_CTLR_LE_ENC)
	    !conn->llcp_enc.pause_tx &&
    1792:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1796:	0791      	lsls	r1, r2, #30
    1798:	d421      	bmi.n	17de <ull_conn_llcp+0x106>
#endif /* CONFIG_BT_CTLR_LE_ENC */
#if defined(CONFIG_BT_CTLR_PHY)
	    !conn->llcp_phy.pause_tx &&
    179a:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    179e:	07d2      	lsls	r2, r2, #31
    17a0:	d41d      	bmi.n	17de <ull_conn_llcp+0x106>

		/* if data transmitted once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->tx_head == conn->tx_data) {
    17a2:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    17a6:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    17a8:	bf04      	itt	eq
    17aa:	681a      	ldreq	r2, [r3, #0]
    17ac:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->tx_ctrl) {
    17b0:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    17b4:	b9b2      	cbnz	r2, 17e4 <ull_conn_llcp+0x10c>
			tx->next = conn->tx_head->next;
    17b6:	681a      	ldr	r2, [r3, #0]
    17b8:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    17ba:	6018      	str	r0, [r3, #0]
			 * control PDU in Encryption Procedure that is not
			 * implicitly paused, will set the control and control
			 * last marker.
			 */
			if (!pause) {
				conn->tx_ctrl = tx;
    17bc:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    17be:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
			ctrl_tx_last_enqueue(conn, tx);
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (!tx->next) {
    17c2:	b90b      	cbnz	r3, 17c8 <ull_conn_llcp+0xf0>
		conn->tx_data_last = tx;
    17c4:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
		if (!conn->procedure_expire) {
    17c8:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
    17cc:	2800      	cmp	r0, #0
    17ce:	d19a      	bne.n	1706 <ull_conn_llcp+0x2e>
			conn->procedure_expire = conn->supervision_reload;
    17d0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
    17d4:	2b01      	cmp	r3, #1
    17d6:	d90e      	bls.n	17f6 <ull_conn_llcp+0x11e>
			conn->procedure_expire = conn->supervision_reload;
    17d8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    17dc:	e793      	b.n	1706 <ull_conn_llcp+0x2e>
		if (!conn->tx_ctrl) {
    17de:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    17e2:	b172      	cbz	r2, 1802 <ull_conn_llcp+0x12a>
	tx->next = conn->tx_ctrl_last->next;
    17e4:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    17e8:	681a      	ldr	r2, [r3, #0]
    17ea:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    17ec:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    17ee:	6803      	ldr	r3, [r0, #0]
    17f0:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
    17f4:	e7e5      	b.n	17c2 <ull_conn_llcp+0xea>
				conn->procedure_expire++;
    17f6:	3301      	adds	r3, #1
    17f8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
    17fc:	b00d      	add	sp, #52	; 0x34
    17fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    1802:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    1804:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    1808:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    180c:	e7d9      	b.n	17c2 <ull_conn_llcp+0xea>
    180e:	bf00      	nop
    1810:	200021a4 	.word	0x200021a4
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1814:	f8df a440 	ldr.w	sl, [pc, #1088]	; 1c58 <ull_conn_llcp+0x580>

	/* set mutex */
	if (!conn_upd) {
    1818:	f8da 3000 	ldr.w	r3, [sl]
    181c:	2b00      	cmp	r3, #0
    181e:	f000 8502 	beq.w	2226 <ull_conn_llcp+0xb4e>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1822:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
    1826:	8e62      	ldrh	r2, [r4, #50]	; 0x32

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1828:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    182c:	4490      	add	r8, r2
    182e:	44b0      	add	r8, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1830:	f013 0303 	ands.w	r3, r3, #3
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1834:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1838:	f040 83ec 	bne.w	2014 <ull_conn_llcp+0x93c>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    183c:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    1840:	eba8 0209 	sub.w	r2, r8, r9
    1844:	fa1f fb82 	uxth.w	fp, r2
				    pdu_ctrl_tx, NULL, NULL);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */

		ctrl_tx_enqueue(conn, tx);

	} else if (instant_latency <= 0x7FFF) {
    1848:	0412      	lsls	r2, r2, #16
    184a:	f53f af56 	bmi.w	16fa <ull_conn_llcp+0x22>
		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;
		conn->llcp_ack = conn->llcp_req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    184e:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
    1852:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1856:	f894 0104 	ldrb.w	r0, [r4, #260]	; 0x104
    185a:	f884 0105 	strb.w	r0, [r4, #261]	; 0x105
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    185e:	428a      	cmp	r2, r1
		conn->llcp_ack = conn->llcp_req;
    1860:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1864:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1868:	d009      	beq.n	187e <ull_conn_llcp+0x1a6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    186a:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    186e:	f002 0207 	and.w	r2, r2, #7
    1872:	2a05      	cmp	r2, #5
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    1874:	bf04      	itt	eq
    1876:	f884 1171 	strbeq.w	r1, [r4, #369]	; 0x171

			/* Stop procedure timeout */
			conn->procedure_expire = 0U;
    187a:	f8a4 30cc 	strheq.w	r3, [r4, #204]	; 0xcc
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    187e:	f8da 3000 	ldr.w	r3, [sl]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1882:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		if (conn_upd_curr == conn) {
    1886:	429c      	cmp	r4, r3
	conn_upd_curr = NULL;
    1888:	bf04      	itt	eq
    188a:	2300      	moveq	r3, #0
    188c:	f8ca 3000 	streq.w	r3, [sl]
		LL_ASSERT(rx && rx->hdr.link);
    1890:	2f00      	cmp	r7, #0
    1892:	f000 8599 	beq.w	23c8 <ull_conn_llcp+0xcf0>
    1896:	6838      	ldr	r0, [r7, #0]
    1898:	2800      	cmp	r0, #0
    189a:	f000 8595 	beq.w	23c8 <ull_conn_llcp+0xcf0>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    189e:	f8b4 3108 	ldrh.w	r3, [r4, #264]	; 0x108
    18a2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
		conn->llcp_rx = rx->hdr.link->mem;
    18a4:	6841      	ldr	r1, [r0, #4]
    18a6:	f8b4 c10a 	ldrh.w	ip, [r4, #266]	; 0x10a
    18aa:	f8c4 1100 	str.w	r1, [r4, #256]	; 0x100
		if ((conn->llcp_cu.interval != lll->interval) ||
    18ae:	4293      	cmp	r3, r2
    18b0:	f000 86db 	beq.w	266a <ull_conn_llcp+0xf92>
    18b4:	f8b4 e10c 	ldrh.w	lr, [r4, #268]	; 0x10c
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
				       lll->interval * 1250) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    18b8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    18ba:	80fa      	strh	r2, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    18bc:	210e      	movs	r1, #14

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
    18be:	2200      	movs	r2, #0
			cu->interval = conn->llcp_cu.interval;
    18c0:	83fb      	strh	r3, [r7, #30]
			cu->latency = conn->llcp_cu.latency;
    18c2:	f8a7 c020 	strh.w	ip, [r7, #32]
			cu->timeout = conn->llcp_cu.timeout;
    18c6:	f8a7 e022 	strh.w	lr, [r7, #34]	; 0x22
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    18ca:	7139      	strb	r1, [r7, #4]
			cu->status = 0x00;
    18cc:	773a      	strb	r2, [r7, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    18ce:	4639      	mov	r1, r7
    18d0:	f00d fb12 	bl	eef8 <ll_rx_put>
		ll_rx_sched();
    18d4:	f00d fb1a 	bl	ef0c <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    18d8:	6823      	ldr	r3, [r4, #0]
    18da:	2b00      	cmp	r3, #0
    18dc:	da09      	bge.n	18f2 <ull_conn_llcp+0x21a>
			uint32_t ticks_prepare_to_start =
    18de:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    18e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    18e6:	428a      	cmp	r2, r1
    18e8:	bf2c      	ite	cs
    18ea:	18a9      	addcs	r1, r5, r2
    18ec:	1869      	addcc	r1, r5, r1
			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    18ee:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    18f0:	1acd      	subs	r5, r1, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    18f2:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    18f4:	f8b4 7108 	ldrh.w	r7, [r4, #264]	; 0x108
		conn_interval_old = instant_latency * lll->interval;
    18f8:	fb13 f30b 	smulbb	r3, r3, fp
    18fc:	b29b      	uxth	r3, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    18fe:	fbb3 f1f7 	udiv	r1, r3, r7
		conn_interval_new = latency * conn->llcp_cu.interval;
    1902:	fb17 f201 	smulbb	r2, r7, r1
    1906:	b292      	uxth	r2, r2
		if (conn_interval_new > conn_interval_old) {
    1908:	4293      	cmp	r3, r2
		latency = conn_interval_old / conn->llcp_cu.interval;
    190a:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    190e:	f080 8549 	bcs.w	23a4 <ull_conn_llcp+0xccc>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1912:	1ad3      	subs	r3, r2, r3
    1914:	48c4      	ldr	r0, [pc, #784]	; (1c28 <ull_conn_llcp+0x550>)
    1916:	f240 42e2 	movw	r2, #1250	; 0x4e2
    191a:	fb02 f303 	mul.w	r3, r2, r3
    191e:	fba3 0100 	umull	r0, r1, r3, r0
    1922:	a3bf      	add	r3, pc, #764	; (adr r3, 1c20 <ull_conn_llcp+0x548>)
    1924:	e9d3 2300 	ldrd	r2, r3, [r3]
    1928:	f7ff f808 	bl	93c <__aeabi_uldivmod>
    192c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1930:	4405      	add	r5, r0
				(conn_interval_new - conn_interval_old) * 1250U);
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) * 1250U);
		}
		lll->latency_prepare += lazy;
    1932:	8e62      	ldrh	r2, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1934:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    1938:	eba9 0808 	sub.w	r8, r9, r8
    193c:	44d0      	add	r8, sl
		lll->latency_prepare += lazy;
    193e:	4432      	add	r2, r6
		lll->latency_prepare -= (instant_latency - latency);
    1940:	4490      	add	r8, r2
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    1942:	f240 49e2 	movw	r9, #1250	; 0x4e2
		} else if (lll->role) {
    1946:	2b00      	cmp	r3, #0
		lll->latency_prepare -= (instant_latency - latency);
    1948:	f8a4 8032 	strh.w	r8, [r4, #50]	; 0x32
		conn_interval_us = conn->llcp_cu.interval * 1250U;
    194c:	fb09 f707 	mul.w	r7, r9, r7
		} else if (lll->role) {
    1950:	f2c0 854a 	blt.w	23e8 <ull_conn_llcp+0xd10>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    1954:	4ab5      	ldr	r2, [pc, #724]	; (1c2c <ull_conn_llcp+0x554>)
    1956:	49b6      	ldr	r1, [pc, #728]	; (1c30 <ull_conn_llcp+0x558>)
    1958:	48b6      	ldr	r0, [pc, #728]	; (1c34 <ull_conn_llcp+0x55c>)
    195a:	f640 1361 	movw	r3, #2401	; 0x961
    195e:	f018 fa4a 	bl	19df6 <printk>
    1962:	4040      	eors	r0, r0
    1964:	f380 8811 	msr	BASEPRI, r0
    1968:	f04f 0003 	mov.w	r0, #3
    196c:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    196e:	f04f 0800 	mov.w	r8, #0
		periodic_us = conn_interval_us;
    1972:	463e      	mov	r6, r7

		lll->interval = conn->llcp_cu.interval;
		lll->latency = conn->llcp_cu.latency;

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1974:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
		lll->latency = conn->llcp_cu.latency;
    1978:	f8b4 110a 	ldrh.w	r1, [r4, #266]	; 0x10a
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    197c:	4bae      	ldr	r3, [pc, #696]	; (1c38 <ull_conn_llcp+0x560>)
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    197e:	48af      	ldr	r0, [pc, #700]	; (1c3c <ull_conn_llcp+0x564>)
		lll->latency = conn->llcp_cu.latency;
    1980:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1982:	f242 7c10 	movw	ip, #10000	; 0x2710
    1986:	fb0c 7202 	mla	r2, ip, r2, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    198a:	443b      	add	r3, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    198c:	4438      	add	r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    198e:	fbb3 f3f7 	udiv	r3, r3, r7
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    1992:	f101 0c06 	add.w	ip, r1, #6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1996:	3a01      	subs	r2, #1
    1998:	fbb2 f2f7 	udiv	r2, r2, r7
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    199c:	fbb0 f7f7 	udiv	r7, r0, r7
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19a0:	b298      	uxth	r0, r3
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    19a2:	f8a4 20c6 	strh.w	r2, [r4, #198]	; 0xc6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19a6:	4560      	cmp	r0, ip
		lll->interval = conn->llcp_cu.interval;
    19a8:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    19ac:	f8a4 00d2 	strh.w	r0, [r4, #210]	; 0xd2
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    19b0:	f8a4 70ca 	strh.w	r7, [r4, #202]	; 0xca
		lll->interval = conn->llcp_cu.interval;
    19b4:	85e2      	strh	r2, [r4, #46]	; 0x2e
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19b6:	dd02      	ble.n	19be <ull_conn_llcp+0x2e6>
				     (conn->apto_reload - (lll->latency + 6)) :
    19b8:	1a40      	subs	r0, r0, r1
    19ba:	3806      	subs	r0, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19bc:	b280      	uxth	r0, r0
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    19be:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    19c2:	f8a4 00ce 	strh.w	r0, [r4, #206]	; 0xce
		if (conn->llcp_cu.cmd) {
    19c6:	075b      	lsls	r3, r3, #29
			conn->supervision_expire = 0U;
    19c8:	bf44      	itt	mi
    19ca:	2300      	movmi	r3, #0
    19cc:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    19d0:	2102      	movs	r1, #2
    19d2:	2001      	movs	r0, #1
    19d4:	f014 ff92 	bl	168fc <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    19d8:	2200      	movs	r2, #0
    19da:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    19dc:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    19de:	2001      	movs	r0, #1
    19e0:	f009 fcb2 	bl	b348 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    19e4:	4996      	ldr	r1, [pc, #600]	; (1c40 <ull_conn_llcp+0x568>)
    19e6:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    19ea:	4620      	mov	r0, r4
    19ec:	f009 fc3e 	bl	b26c <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    19f0:	1cc2      	adds	r2, r0, #3
    19f2:	fa5f fa82 	uxtb.w	sl, r2
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    19f6:	4b93      	ldr	r3, [pc, #588]	; (1c44 <ull_conn_llcp+0x56c>)
    19f8:	9400      	str	r4, [sp, #0]
    19fa:	4652      	mov	r2, sl
    19fc:	2101      	movs	r1, #1
    19fe:	2000      	movs	r0, #0
    1a00:	f00a ffaa 	bl	c958 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1a04:	f030 0302 	bics.w	r3, r0, #2
    1a08:	d00c      	beq.n	1a24 <ull_conn_llcp+0x34c>
    1a0a:	4a88      	ldr	r2, [pc, #544]	; (1c2c <ull_conn_llcp+0x554>)
    1a0c:	498e      	ldr	r1, [pc, #568]	; (1c48 <ull_conn_llcp+0x570>)
    1a0e:	4889      	ldr	r0, [pc, #548]	; (1c34 <ull_conn_llcp+0x55c>)
    1a10:	f44f 6319 	mov.w	r3, #2448	; 0x990
    1a14:	f018 f9ef 	bl	19df6 <printk>
    1a18:	4040      	eors	r0, r0
    1a1a:	f380 8811 	msr	BASEPRI, r0
    1a1e:	f04f 0003 	mov.w	r0, #3
    1a22:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    1a24:	4b80      	ldr	r3, [pc, #512]	; (1c28 <ull_conn_llcp+0x550>)
    1a26:	fba6 6703 	umull	r6, r7, r6, r3
    1a2a:	4630      	mov	r0, r6
    1a2c:	a37c      	add	r3, pc, #496	; (adr r3, 1c20 <ull_conn_llcp+0x548>)
    1a2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    1a32:	4639      	mov	r1, r7
    1a34:	f7fe ff82 	bl	93c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(periodic_us),
    1a38:	4a84      	ldr	r2, [pc, #528]	; (1c4c <ull_conn_llcp+0x574>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a3a:	68e3      	ldr	r3, [r4, #12]
    1a3c:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    1a3e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
    1a42:	fbab 2302 	umull	r2, r3, fp, r2
    1a46:	2007      	movs	r0, #7
    1a48:	fb00 330b 	mla	r3, r0, fp, r3
    1a4c:	1ab0      	subs	r0, r6, r2
    1a4e:	eb67 0103 	sbc.w	r1, r7, r3
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a52:	9408      	str	r4, [sp, #32]
    1a54:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    1a56:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a5a:	2400      	movs	r4, #0
				     HAL_TICKER_REMAINDER(periodic_us),
    1a5c:	2300      	movs	r3, #0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a5e:	4f7c      	ldr	r7, [pc, #496]	; (1c50 <ull_conn_llcp+0x578>)
    1a60:	4e7c      	ldr	r6, [pc, #496]	; (1c54 <ull_conn_llcp+0x57c>)
    1a62:	9707      	str	r7, [sp, #28]
    1a64:	9605      	str	r6, [sp, #20]
    1a66:	9403      	str	r4, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    1a68:	f7fe ff68 	bl	93c <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    1a6c:	462b      	mov	r3, r5
    1a6e:	e9cd b001 	strd	fp, r0, [sp, #4]
    1a72:	f8cd 8000 	str.w	r8, [sp]
    1a76:	4620      	mov	r0, r4
    1a78:	4652      	mov	r2, sl
    1a7a:	2101      	movs	r1, #1
    1a7c:	f00a ff00 	bl	c880 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    1a80:	f030 0302 	bics.w	r3, r0, #2
    1a84:	d00c      	beq.n	1aa0 <ull_conn_llcp+0x3c8>
    1a86:	4a69      	ldr	r2, [pc, #420]	; (1c2c <ull_conn_llcp+0x554>)
    1a88:	496f      	ldr	r1, [pc, #444]	; (1c48 <ull_conn_llcp+0x570>)
    1a8a:	486a      	ldr	r0, [pc, #424]	; (1c34 <ull_conn_llcp+0x55c>)
    1a8c:	f640 13aa 	movw	r3, #2474	; 0x9aa
    1a90:	f018 f9b1 	bl	19df6 <printk>
    1a94:	4040      	eors	r0, r0
    1a96:	f380 8811 	msr	BASEPRI, r0
    1a9a:	f04f 0003 	mov.w	r0, #3
    1a9e:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    1aa0:	f1b9 0f00 	cmp.w	r9, #0
    1aa4:	f040 85fc 	bne.w	26a0 <ull_conn_llcp+0xfc8>
				return -ECANCELED;
    1aa8:	f06f 0047 	mvn.w	r0, #71	; 0x47
    1aac:	e62c      	b.n	1708 <ull_conn_llcp+0x30>
			event_counter = lll->event_counter +
    1aae:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    1ab0:	8e63      	ldrh	r3, [r4, #50]	; 0x32
static inline void event_phy_upd_ind_prep(struct ll_conn *conn,
					  uint16_t event_counter)
{
	struct node_rx_pu *upd;

	if (conn->llcp.phy_upd_ind.initiate) {
    1ab2:	f894 50ec 	ldrb.w	r5, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1ab6:	441a      	add	r2, r3
					lll->latency_prepare + lazy;
    1ab8:	4432      	add	r2, r6
	if (conn->llcp.phy_upd_ind.initiate) {
    1aba:	07ef      	lsls	r7, r5, #31
			event_counter = lll->event_counter +
    1abc:	b296      	uxth	r6, r2
	if (conn->llcp.phy_upd_ind.initiate) {
    1abe:	46ab      	mov	fp, r5
    1ac0:	f100 8313 	bmi.w	20ea <ull_conn_llcp+0xa12>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);

		ctrl_tx_enqueue(conn, tx);
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
    1ac4:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
    1ac8:	1ab6      	subs	r6, r6, r2
    1aca:	0437      	lsls	r7, r6, #16
    1acc:	f53f ae15 	bmi.w	16fa <ull_conn_llcp+0x22>
	if (!conn->common.fex_valid ||
    1ad0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc

		/* procedure request acked */
		conn->llcp_ack = conn->llcp_req;

		/* apply new phy */
		old_tx = lll->phy_tx;
    1ad4:	f894 8064 	ldrb.w	r8, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
    1ad8:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
		conn->llcp_ack = conn->llcp_req;
    1adc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		uint16_t eff_tx_time = lll->max_tx_time;
		uint16_t eff_rx_time = lll->max_rx_time;
    1ae0:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		conn->llcp_ack = conn->llcp_req;
    1ae4:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	if (!conn->common.fex_valid ||
    1ae8:	07d6      	lsls	r6, r2, #31
		old_tx = lll->phy_tx;
    1aea:	f008 0807 	and.w	r8, r8, #7
		old_rx = lll->phy_rx;
    1aee:	f00a 0a07 	and.w	sl, sl, #7
	if (!conn->common.fex_valid ||
    1af2:	f140 85de 	bpl.w	26b2 <ull_conn_llcp+0xfda>
	feature_coded_phy = (conn->llcp_feature.features_conn &
    1af6:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
    1afa:	0510      	lsls	r0, r2, #20
    1afc:	f140 85d9 	bpl.w	26b2 <ull_conn_llcp+0xfda>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    1b00:	f8b4 90d8 	ldrh.w	r9, [r4, #216]	; 0xd8
    1b04:	f5b9 6f29 	cmp.w	r9, #2704	; 0xa90
    1b08:	bf28      	it	cs
    1b0a:	f44f 6929 	movcs.w	r9, #2704	; 0xa90
    1b0e:	f5b9 7fa4 	cmp.w	r9, #328	; 0x148
    1b12:	f44f 6329 	mov.w	r3, #2704	; 0xa90
    1b16:	bf38      	it	cc
    1b18:	f44f 79a4 	movcc.w	r9, #328	; 0x148
    1b1c:	930b      	str	r3, [sp, #44]	; 0x2c
		uint16_t max_rx_time, max_tx_time;

		dle_max_time_get(conn, &max_rx_time, &max_tx_time);
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		if (conn->llcp.phy_upd_ind.tx) {
    1b1e:	f015 0f1c 	tst.w	r5, #28
    1b22:	f040 8639 	bne.w	2798 <ull_conn_llcp+0x10c0>
		uint16_t eff_tx_time = lll->max_tx_time;
    1b26:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
						    lll->phy_tx,
						    max_tx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		if (conn->llcp.phy_upd_ind.rx) {
    1b2a:	f015 0fe0 	tst.w	r5, #224	; 0xe0
    1b2e:	d00c      	beq.n	1b4a <ull_conn_llcp+0x472>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1b30:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
			eff_rx_time =
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1b34:	f894 005e 	ldrb.w	r0, [r4, #94]	; 0x5e
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
    1b38:	0969      	lsrs	r1, r5, #5
    1b3a:	f361 0202 	bfi	r2, r1, #0, #3
    1b3e:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
    1b42:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1b44:	f00e f864 	bl	fc10 <calc_eff_time>
    1b48:	4607      	mov	r7, r0
					      max_rx_time);

#endif /* CONFIG_BT_CTLR_DATA_LENGTH */
		}
		lll->phy_flags = conn->phy_pref_flags;
    1b4a:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
    1b4e:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1b52:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		lll->phy_flags = conn->phy_pref_flags;
    1b56:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    1b5a:	f362 01c3 	bfi	r1, r2, #3, #1
    1b5e:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
		LL_ASSERT(rx && rx->hdr.link);
    1b62:	2d00      	cmp	r5, #0
    1b64:	f000 86fe 	beq.w	2964 <ull_conn_llcp+0x128c>
    1b68:	6828      	ldr	r0, [r5, #0]
    1b6a:	2800      	cmp	r0, #0
    1b6c:	f000 86fa 	beq.w	2964 <ull_conn_llcp+0x128c>
		conn->llcp_rx = rx->hdr.link->mem;
    1b70:	6842      	ldr	r2, [r0, #4]

		/* generate event if phy changed or initiated by cmd */
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1b72:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_rx = rx->hdr.link->mem;
    1b76:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1b7a:	f01b 0f02 	tst.w	fp, #2
    1b7e:	f040 879d 	bne.w	2abc <ull_conn_llcp+0x13e4>
		    (lll->phy_rx == old_rx)) {
    1b82:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1b86:	f003 0307 	and.w	r3, r3, #7
    1b8a:	4598      	cmp	r8, r3
		    (lll->phy_rx == old_rx)) {
    1b8c:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    1b90:	f001 8065 	beq.w	2c5e <ull_conn_llcp+0x1586>
			ll_rx_sched();

			return;
		}

		rx->hdr.handle = lll->handle;
    1b94:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
    1b96:	80e9      	strh	r1, [r5, #6]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1b98:	f04f 0c12 	mov.w	ip, #18

		upd = (void *)rx->pdu;
		upd->status = 0U;
    1b9c:	2100      	movs	r1, #0
    1b9e:	7729      	strb	r1, [r5, #28]
		upd->tx = lll->phy_tx;
    1ba0:	776b      	strb	r3, [r5, #29]
		upd->rx = lll->phy_rx;
    1ba2:	77aa      	strb	r2, [r5, #30]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    1ba4:	f885 c004 	strb.w	ip, [r5, #4]

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1ba8:	4629      	mov	r1, r5
    1baa:	f00d f9a5 	bl	eef8 <ll_rx_put>

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
		/* get a rx node for ULL->LL */
		rx = conn->llcp_rx;
    1bae:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    1bb2:	2d00      	cmp	r5, #0
    1bb4:	f000 86e8 	beq.w	2988 <ull_conn_llcp+0x12b0>
    1bb8:	6828      	ldr	r0, [r5, #0]
    1bba:	2800      	cmp	r0, #0
    1bbc:	f000 86e4 	beq.w	2988 <ull_conn_llcp+0x12b0>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Update max tx and/or max rx if changed */
		if ((eff_tx_time <= lll->max_tx_time) &&
    1bc0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
    1bc4:	6842      	ldr	r2, [r0, #4]
    1bc6:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		if ((eff_tx_time <= lll->max_tx_time) &&
    1bca:	42b3      	cmp	r3, r6
    1bcc:	d309      	bcc.n	1be2 <ull_conn_llcp+0x50a>
    1bce:	454b      	cmp	r3, r9
    1bd0:	d807      	bhi.n	1be2 <ull_conn_llcp+0x50a>
		    (lll->max_tx_time <= max_tx_time) &&
		    (eff_rx_time <= lll->max_rx_time) &&
    1bd2:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
    1bd6:	42bb      	cmp	r3, r7
    1bd8:	d303      	bcc.n	1be2 <ull_conn_llcp+0x50a>
		    (eff_rx_time <= lll->max_rx_time) &&
    1bda:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    1bdc:	4293      	cmp	r3, r2
    1bde:	f241 8052 	bls.w	2c86 <ull_conn_llcp+0x15ae>
			/* enqueue rx node towards Thread */
			ll_rx_put(rx->hdr.link, rx);
			ll_rx_sched();
			return;
		}
		lll->max_tx_time = eff_tx_time;
    1be2:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
    1be6:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		rx->hdr.handle = lll->handle;
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;

		struct pdu_data *pdu_rx = (void *)rx->pdu;

		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1bea:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
    1bec:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1bee:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1bf0:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1bf4:	2102      	movs	r1, #2
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1bf6:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1bf8:	7129      	strb	r1, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
    1bfa:	772b      	strb	r3, [r5, #28]
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
    1bfc:	776a      	strb	r2, [r5, #29]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;

		struct pdu_data_llctrl_length_req *lr =
			(void *)&pdu_rx->llctrl.length_rsp;

		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1bfe:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1c02:	f8b4 205c 	ldrh.w	r2, [r4, #92]	; 0x5c
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    1c06:	842b      	strh	r3, [r5, #32]
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1c08:	2315      	movs	r3, #21
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
    1c0a:	84aa      	strh	r2, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    1c0c:	77eb      	strb	r3, [r5, #31]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1c0e:	4629      	mov	r1, r5
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    1c10:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
    1c12:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    1c14:	f00d f970 	bl	eef8 <ll_rx_put>
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

		ll_rx_sched();
    1c18:	f00d f978 	bl	ef0c <ll_rx_sched>
    1c1c:	e56d      	b.n	16fa <ull_conn_llcp+0x22>
    1c1e:	bf00      	nop
    1c20:	1afd498d 	.word	0x1afd498d
    1c24:	00000007 	.word	0x00000007
    1c28:	3b9aca00 	.word	0x3b9aca00
    1c2c:	00020020 	.word	0x00020020
    1c30:	0001fd3c 	.word	0x0001fd3c
    1c34:	0001fcdc 	.word	0x0001fcdc
    1c38:	01c9c37f 	.word	0x01c9c37f
    1c3c:	026259ff 	.word	0x026259ff
    1c40:	20001f58 	.word	0x20001f58
    1c44:	0000ff41 	.word	0x0000ff41
    1c48:	00020158 	.word	0x00020158
    1c4c:	1afd498d 	.word	0x1afd498d
    1c50:	0000fee9 	.word	0x0000fee9
    1c54:	00012f81 	.word	0x00012f81
    1c58:	20002120 	.word	0x20002120
	if (conn->llcp.encryption.state) {
    1c5c:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1c60:	f013 0503 	ands.w	r5, r3, #3
    1c64:	f000 8284 	beq.w	2170 <ull_conn_llcp+0xa98>
		if (lll->role &&
    1c68:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    1c6c:	2b00      	cmp	r3, #0
    1c6e:	f6bf ad44 	bge.w	16fa <ull_conn_llcp+0x22>
    1c72:	2d01      	cmp	r5, #1
    1c74:	f47f ad41 	bne.w	16fa <ull_conn_llcp+0x22>
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1c78:	48bb      	ldr	r0, [pc, #748]	; (1f68 <ull_conn_llcp+0x890>)
    1c7a:	f009 fac1 	bl	b200 <mem_acquire>
	if (!tx) {
    1c7e:	4605      	mov	r5, r0
    1c80:	2800      	cmp	r0, #0
    1c82:	f43f ad3a 	beq.w	16fa <ull_conn_llcp+0x22>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c86:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1c88:	220d      	movs	r2, #13
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c8a:	f043 0303 	orr.w	r3, r3, #3
			   sizeof(struct pdu_data_llctrl_enc_rsp);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1c8e:	2704      	movs	r7, #4
	BUILD_ASSERT(offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), ivs) ==
		     (offsetof(__typeof(pdu_ctrl_tx->llctrl.enc_rsp), skds) +
		     sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds)));

	/* NOTE: if not sufficient random numbers, ignore waiting */
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1c90:	f100 0608 	add.w	r6, r0, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1c94:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
    1c96:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
    1c98:	71c7      	strb	r7, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
    1c9a:	210c      	movs	r1, #12
    1c9c:	4630      	mov	r0, r6
    1c9e:	f012 fcb5 	bl	1460c <lll_csrand_isr_get>
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.skds) +
			   sizeof(pdu_ctrl_tx->llctrl.enc_rsp.ivs));

	/* things from slave stored for session key calculation */
	memcpy(&conn->llcp.encryption.skd[8],
    1ca2:	4631      	mov	r1, r6
    1ca4:	2208      	movs	r2, #8
    1ca6:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
    1caa:	f019 febe 	bl	1ba2a <memcpy>
	       &pdu_ctrl_tx->llctrl.enc_rsp.skds[0], 8);
	memcpy(&conn->lll.ccm_rx.iv[4],
    1cae:	463a      	mov	r2, r7
    1cb0:	f105 0110 	add.w	r1, r5, #16
    1cb4:	f104 009c 	add.w	r0, r4, #156	; 0x9c
    1cb8:	f019 feb7 	bl	1ba2a <memcpy>
	    conn->tx_head &&
    1cbc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    1cc0:	2b00      	cmp	r3, #0
    1cc2:	f000 86e3 	beq.w	2a8c <ull_conn_llcp+0x13b4>
	    !conn->llcp_enc.pause_tx &&
    1cc6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1cca:	0790      	lsls	r0, r2, #30
    1ccc:	f100 86de 	bmi.w	2a8c <ull_conn_llcp+0x13b4>
	    !conn->llcp_phy.pause_tx &&
    1cd0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1cd4:	07d1      	lsls	r1, r2, #31
    1cd6:	f100 86d9 	bmi.w	2a8c <ull_conn_llcp+0x13b4>
		if (conn->tx_head == conn->tx_data) {
    1cda:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1cde:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1ce0:	bf04      	itt	eq
    1ce2:	681a      	ldreq	r2, [r3, #0]
    1ce4:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1ce8:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1cec:	2a00      	cmp	r2, #0
    1cee:	f001 8125 	beq.w	2f3c <ull_conn_llcp+0x1864>
	tx->next = conn->tx_ctrl_last->next;
    1cf2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1cf6:	681a      	ldr	r2, [r3, #0]
    1cf8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1cfa:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    1cfc:	682b      	ldr	r3, [r5, #0]
    1cfe:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1d02:	2b00      	cmp	r3, #0
    1d04:	f001 80ce 	beq.w	2ea4 <ull_conn_llcp+0x17cc>
			rx = ll_pdu_rx_alloc();
    1d08:	f00d f924 	bl	ef54 <ll_pdu_rx_alloc>
			if (!rx) {
    1d0c:	4605      	mov	r5, r0
    1d0e:	2800      	cmp	r0, #0
    1d10:	f43f acf3 	beq.w	16fa <ull_conn_llcp+0x22>
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d14:	7f2b      	ldrb	r3, [r5, #28]
			rx->hdr.handle = conn->lll.handle;
    1d16:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1d18:	80ea      	strh	r2, [r5, #6]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d1a:	f043 0303 	orr.w	r3, r3, #3
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d1e:	2602      	movs	r6, #2
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1d20:	2117      	movs	r1, #23
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1d22:	2203      	movs	r2, #3
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    1d24:	772b      	strb	r3, [r5, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
    1d26:	7769      	strb	r1, [r5, #29]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    1d28:	77ea      	strb	r2, [r5, #31]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1d2a:	f204 1155 	addw	r1, r4, #341	; 0x155
    1d2e:	2208      	movs	r2, #8
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1d30:	712e      	strb	r6, [r5, #4]
			memcpy(&pdu->llctrl.enc_req.rand[0],
    1d32:	f105 0020 	add.w	r0, r5, #32
    1d36:	f019 fe78 	bl	1ba2a <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
    1d3a:	f894 3153 	ldrb.w	r3, [r4, #339]	; 0x153
    1d3e:	f885 3028 	strb.w	r3, [r5, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
    1d42:	f894 3154 	ldrb.w	r3, [r4, #340]	; 0x154
    1d46:	f885 3029 	strb.w	r3, [r5, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
    1d4a:	6828      	ldr	r0, [r5, #0]
    1d4c:	4629      	mov	r1, r5
    1d4e:	f00d f8d3 	bl	eef8 <ll_rx_put>
			ll_rx_sched();
    1d52:	f00d f8db 	bl	ef0c <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
    1d56:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    1d5a:	f366 0301 	bfi	r3, r6, #0, #2
    1d5e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
    1d62:	e4ca      	b.n	16fa <ull_conn_llcp+0x22>
			event_counter = lll->event_counter +
    1d64:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
    1d66:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
    1d68:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
    1d6c:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
    1d6e:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
    1d70:	07df      	lsls	r7, r3, #31
			event_counter = lll->event_counter +
    1d72:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
    1d74:	f100 8100 	bmi.w	1f78 <ull_conn_llcp+0x8a0>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
    1d78:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1d7c:	1ab6      	subs	r6, r6, r2
    1d7e:	0435      	lsls	r5, r6, #16
    1d80:	f53f acbb 	bmi.w	16fa <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    1d84:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1d88:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
    1d8c:	f104 0538 	add.w	r5, r4, #56	; 0x38
    1d90:	2205      	movs	r2, #5
    1d92:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1d96:	4628      	mov	r0, r5
    1d98:	f019 fe47 	bl	1ba2a <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
    1d9c:	4628      	mov	r0, r5
    1d9e:	2105      	movs	r1, #5
    1da0:	f009 fbf8 	bl	b594 <util_ones_count_get>
		lll->data_chan_count =
    1da4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1da8:	2201      	movs	r2, #1
		lll->data_chan_count =
    1daa:	f360 0305 	bfi	r3, r0, #0, #6
    1dae:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
    1db2:	f884 21c4 	strb.w	r2, [r4, #452]	; 0x1c4
    1db6:	e4a0      	b.n	16fa <ull_conn_llcp+0x22>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1db8:	486b      	ldr	r0, [pc, #428]	; (1f68 <ull_conn_llcp+0x890>)
    1dba:	f009 fa21 	bl	b200 <mem_acquire>
	if (tx) {
    1dbe:	2800      	cmp	r0, #0
    1dc0:	f43f ac9b 	beq.w	16fa <ull_conn_llcp+0x22>
		conn->llcp_ack = conn->llcp_req;
    1dc4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1dc8:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1dcc:	2301      	movs	r3, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dce:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
    1dd0:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    1dd2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1dd6:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1dda:	2112      	movs	r1, #18
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1ddc:	7102      	strb	r2, [r0, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
    1dde:	71c1      	strb	r1, [r0, #7]
	if (
    1de0:	2b00      	cmp	r3, #0
    1de2:	f000 82d4 	beq.w	238e <ull_conn_llcp+0xcb6>
	    !conn->llcp_enc.pause_tx &&
    1de6:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1dea:	0791      	lsls	r1, r2, #30
    1dec:	f100 82cf 	bmi.w	238e <ull_conn_llcp+0xcb6>
	    !conn->llcp_phy.pause_tx &&
    1df0:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1df4:	07d2      	lsls	r2, r2, #31
    1df6:	f100 82ca 	bmi.w	238e <ull_conn_llcp+0xcb6>
		if (conn->tx_head == conn->tx_data) {
    1dfa:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1dfe:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1e00:	bf04      	itt	eq
    1e02:	681a      	ldreq	r2, [r3, #0]
    1e04:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1e08:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1e0c:	2a00      	cmp	r2, #0
    1e0e:	f001 8061 	beq.w	2ed4 <ull_conn_llcp+0x17fc>
	tx->next = conn->tx_ctrl_last->next;
    1e12:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1e16:	681a      	ldr	r2, [r3, #0]
    1e18:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    1e1a:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    1e1c:	6803      	ldr	r3, [r0, #0]
    1e1e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    1e22:	2b00      	cmp	r3, #0
    1e24:	f000 84b4 	beq.w	2790 <ull_conn_llcp+0x10b8>
		conn->procedure_expire = conn->procedure_reload;
    1e28:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    1e2c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    1e30:	e463      	b.n	16fa <ull_conn_llcp+0x22>
			LL_ASSERT(0);
    1e32:	4a4e      	ldr	r2, [pc, #312]	; (1f6c <ull_conn_llcp+0x894>)
    1e34:	494e      	ldr	r1, [pc, #312]	; (1f70 <ull_conn_llcp+0x898>)
    1e36:	484f      	ldr	r0, [pc, #316]	; (1f74 <ull_conn_llcp+0x89c>)
    1e38:	f240 33bf 	movw	r3, #959	; 0x3bf
    1e3c:	f017 ffdb 	bl	19df6 <printk>
    1e40:	4040      	eors	r0, r0
    1e42:	f380 8811 	msr	BASEPRI, r0
    1e46:	f04f 0003 	mov.w	r0, #3
    1e4a:	df02      	svc	2
			break;
    1e4c:	e455      	b.n	16fa <ull_conn_llcp+0x22>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
    1e4e:	f894 2119 	ldrb.w	r2, [r4, #281]	; 0x119
    1e52:	f894 c118 	ldrb.w	ip, [r4, #280]	; 0x118
    1e56:	4562      	cmp	r2, ip
    1e58:	d154      	bne.n	1f04 <ull_conn_llcp+0x82c>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
    1e5a:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
    1e5e:	f894 c124 	ldrb.w	ip, [r4, #292]	; 0x124
    1e62:	4562      	cmp	r2, ip
    1e64:	f000 8312 	beq.w	248c <ull_conn_llcp+0xdb4>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
    1e68:	eba2 020c 	sub.w	r2, r2, ip
    1e6c:	07d1      	lsls	r1, r2, #31
    1e6e:	f57f ac44 	bpl.w	16fa <ull_conn_llcp+0x22>
	if (conn->llcp_version.tx == 0U) {
    1e72:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
    1e76:	07da      	lsls	r2, r3, #31
    1e78:	f140 8748 	bpl.w	2d0c <ull_conn_llcp+0x1634>
	} else if (conn->llcp_version.rx) {
    1e7c:	079a      	lsls	r2, r3, #30
    1e7e:	f140 8732 	bpl.w	2ce6 <ull_conn_llcp+0x160e>
		rx = ll_pdu_rx_alloc();
    1e82:	f00d f867 	bl	ef54 <ll_pdu_rx_alloc>
		if (!rx) {
    1e86:	4601      	mov	r1, r0
    1e88:	b300      	cbz	r0, 1ecc <ull_conn_llcp+0x7f4>
		conn->llcp_version.ack = conn->llcp_version.req;
    1e8a:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
    1e8e:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e92:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1e94:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1e96:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1e98:	f043 0303 	orr.w	r3, r3, #3
    1e9c:	770b      	strb	r3, [r1, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1e9e:	2002      	movs	r0, #2
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1ea0:	2206      	movs	r2, #6
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1ea2:	230c      	movs	r3, #12
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1ea4:	7108      	strb	r0, [r1, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
    1ea6:	774a      	strb	r2, [r1, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
    1ea8:	77cb      	strb	r3, [r1, #31]
		pdu->llctrl.version_ind.version_number =
    1eaa:	f894 0127 	ldrb.w	r0, [r4, #295]	; 0x127
		pdu->llctrl.version_ind.company_id =
    1eae:	f8b4 2128 	ldrh.w	r2, [r4, #296]	; 0x128
		pdu->llctrl.version_ind.sub_version_number =
    1eb2:	f8b4 312a 	ldrh.w	r3, [r4, #298]	; 0x12a
    1eb6:	f8a1 3023 	strh.w	r3, [r1, #35]	; 0x23
		pdu->llctrl.version_ind.version_number =
    1eba:	f881 0020 	strb.w	r0, [r1, #32]
		pdu->llctrl.version_ind.company_id =
    1ebe:	f8a1 2021 	strh.w	r2, [r1, #33]	; 0x21
		ll_rx_put(rx->hdr.link, rx);
    1ec2:	6808      	ldr	r0, [r1, #0]
    1ec4:	f00d f818 	bl	eef8 <ll_rx_put>
		ll_rx_sched();
    1ec8:	f00d f820 	bl	ef0c <ll_rx_sched>
	break;
    1ecc:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    1ed0:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    1ed4:	e40c      	b.n	16f0 <ull_conn_llcp+0x18>
	switch (conn->llcp_length.state) {
    1ed6:	f002 0107 	and.w	r1, r2, #7
    1eda:	2906      	cmp	r1, #6
    1edc:	f201 81ae 	bhi.w	323c <ull_conn_llcp+0x1b64>
    1ee0:	a001      	add	r0, pc, #4	; (adr r0, 1ee8 <ull_conn_llcp+0x810>)
    1ee2:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    1ee6:	bf00      	nop
    1ee8:	000022bd 	.word	0x000022bd
    1eec:	0000174d 	.word	0x0000174d
    1ef0:	0000174d 	.word	0x0000174d
    1ef4:	0000174d 	.word	0x0000174d
    1ef8:	0000222f 	.word	0x0000222f
    1efc:	0000222f 	.word	0x0000222f
    1f00:	0000174d 	.word	0x0000174d
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
    1f04:	eba2 020c 	sub.w	r2, r2, ip
    1f08:	07d3      	lsls	r3, r2, #31
    1f0a:	f57f abf6 	bpl.w	16fa <ull_conn_llcp+0x22>
	if (conn->common.fex_valid) {
    1f0e:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
    1f12:	f011 0701 	ands.w	r7, r1, #1
    1f16:	f000 83e0 	beq.w	26da <ull_conn_llcp+0x1002>
		rx = ll_pdu_rx_alloc();
    1f1a:	f00d f81b 	bl	ef54 <ll_pdu_rx_alloc>
		if (!rx) {
    1f1e:	4607      	mov	r7, r0
    1f20:	2800      	cmp	r0, #0
    1f22:	d0d3      	beq.n	1ecc <ull_conn_llcp+0x7f4>
		conn->llcp_feature.ack = conn->llcp_feature.req;
    1f24:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
    1f28:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f2c:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
    1f2e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
    1f30:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f32:	f043 0303 	orr.w	r3, r3, #3
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1f36:	2209      	movs	r2, #9
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f38:	2002      	movs	r0, #2
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1f3a:	4641      	mov	r1, r8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    1f3c:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    1f3e:	7138      	strb	r0, [r7, #4]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
    1f40:	777a      	strb	r2, [r7, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
    1f42:	77fa      	strb	r2, [r7, #31]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
    1f44:	f107 0020 	add.w	r0, r7, #32
    1f48:	2208      	movs	r2, #8
    1f4a:	f019 fd99 	bl	1ba80 <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
    1f4e:	f8d4 3120 	ldr.w	r3, [r4, #288]	; 0x120
	dst[0] = val;
    1f52:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
    1f56:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    1f5a:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1f5c:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
    1f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
    1f64:	4639      	mov	r1, r7
    1f66:	e7ac      	b.n	1ec2 <ull_conn_llcp+0x7ea>
    1f68:	200021a4 	.word	0x200021a4
    1f6c:	00020020 	.word	0x00020020
    1f70:	0001fd3c 	.word	0x0001fd3c
    1f74:	0001fcdc 	.word	0x0001fcdc
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    1f78:	48ce      	ldr	r0, [pc, #824]	; (22b4 <ull_conn_llcp+0xbdc>)
    1f7a:	f009 f941 	bl	b200 <mem_acquire>
		if (tx) {
    1f7e:	4605      	mov	r5, r0
    1f80:	2800      	cmp	r0, #0
    1f82:	f43f abba 	beq.w	16fa <ull_conn_llcp+0x22>
			conn->llcp.chan_map.instant = event_counter +
    1f86:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f88:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
    1f8a:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
    1f8e:	4433      	add	r3, r6
						      conn->lll.latency + 6;
    1f90:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
    1f92:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			conn->llcp.chan_map.initiate = 0U;
    1f96:	f36f 0100 	bfc	r1, #0, #1
			pdu_ctrl_tx->llctrl.opcode =
    1f9a:	2301      	movs	r3, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1f9c:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1fa0:	2008      	movs	r0, #8
			conn->llcp.chan_map.initiate = 0U;
    1fa2:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    1fa6:	712a      	strb	r2, [r5, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    1fa8:	7168      	strb	r0, [r5, #5]
			pdu_ctrl_tx->llctrl.opcode =
    1faa:	71eb      	strb	r3, [r5, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
    1fac:	2205      	movs	r2, #5
    1fae:	f104 01ed 	add.w	r1, r4, #237	; 0xed
    1fb2:	1828      	adds	r0, r5, r0
    1fb4:	f019 fd39 	bl	1ba2a <memcpy>
	    conn->tx_head &&
    1fb8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
    1fbc:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
    1fc0:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
    1fc4:	2b00      	cmp	r3, #0
    1fc6:	f000 80c8 	beq.w	215a <ull_conn_llcp+0xa82>
	    !conn->llcp_enc.pause_tx &&
    1fca:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    1fce:	0791      	lsls	r1, r2, #30
    1fd0:	f100 80c3 	bmi.w	215a <ull_conn_llcp+0xa82>
	    !conn->llcp_phy.pause_tx &&
    1fd4:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    1fd8:	07d2      	lsls	r2, r2, #31
    1fda:	f100 80be 	bmi.w	215a <ull_conn_llcp+0xa82>
		if (conn->tx_head == conn->tx_data) {
    1fde:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    1fe2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    1fe4:	bf04      	itt	eq
    1fe6:	681a      	ldreq	r2, [r3, #0]
    1fe8:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    1fec:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    1ff0:	2a00      	cmp	r2, #0
    1ff2:	f000 8782 	beq.w	2efa <ull_conn_llcp+0x1822>
	tx->next = conn->tx_ctrl_last->next;
    1ff6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    1ffa:	681a      	ldr	r2, [r3, #0]
    1ffc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    1ffe:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    2000:	682b      	ldr	r3, [r5, #0]
    2002:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2006:	2b00      	cmp	r3, #0
    2008:	f47f ab77 	bne.w	16fa <ull_conn_llcp+0x22>
		conn->tx_data_last = tx;
    200c:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    2010:	f7ff bb73 	b.w	16fa <ull_conn_llcp+0x22>
		rx = ll_pdu_rx_alloc_peek(1);
    2014:	2001      	movs	r0, #1
    2016:	f00c ff7f 	bl	ef18 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    201a:	4606      	mov	r6, r0
    201c:	2800      	cmp	r0, #0
    201e:	f43f ab6c 	beq.w	16fa <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2022:	48a4      	ldr	r0, [pc, #656]	; (22b4 <ull_conn_llcp+0xbdc>)
    2024:	f009 f8ec 	bl	b200 <mem_acquire>
		if (!tx) {
    2028:	4605      	mov	r5, r0
    202a:	2800      	cmp	r0, #0
    202c:	f43f ab65 	beq.w	16fa <ull_conn_llcp+0x22>
		(void)ll_pdu_rx_alloc();
    2030:	f00c ff90 	bl	ef54 <ll_pdu_rx_alloc>
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2034:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		rx->hdr.link->mem = conn->llcp_rx;
    2036:	6832      	ldr	r2, [r6, #0]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2038:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    203c:	4443      	add	r3, r8
    203e:	3306      	adds	r3, #6
    2040:	b299      	uxth	r1, r3
		rx->hdr.link->mem = conn->llcp_rx;
    2042:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    2046:	6053      	str	r3, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2048:	792a      	ldrb	r2, [r5, #4]
		conn->llcp_rx = rx;
    204a:	f8c4 6100 	str.w	r6, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    204e:	f36f 0001 	bfc	r0, #0, #2
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2052:	230c      	movs	r3, #12
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2054:	f884 0106 	strb.w	r0, [r4, #262]	; 0x106
	conn->llcp.conn_upd.instant = event_counter + conn->lll.latency + 6;
    2058:	f8a4 10ec 	strh.w	r1, [r4, #236]	; 0xec
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    205c:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2060:	716b      	strb	r3, [r5, #5]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    2062:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
	    conn->tx_head &&
    2066:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    206a:	4e93      	ldr	r6, [pc, #588]	; (22b8 <ull_conn_llcp+0xbe0>)
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    206c:	712a      	strb	r2, [r5, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    206e:	2200      	movs	r2, #0
    2070:	71ea      	strb	r2, [r5, #7]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us / 1250U);
    2072:	fba6 2303 	umull	r2, r3, r6, r3
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    2076:	f894 6114 	ldrb.w	r6, [r4, #276]	; 0x114
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    207a:	f8b4 2108 	ldrh.w	r2, [r4, #264]	; 0x108
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    207e:	722e      	strb	r6, [r5, #8]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2080:	f3c3 238f 	ubfx	r3, r3, #10, #16
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2084:	f8b4 610a 	ldrh.w	r6, [r4, #266]	; 0x10a
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2088:	f8a5 200b 	strh.w	r2, [r5, #11]
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    208c:	f8b4 210c 	ldrh.w	r2, [r4, #268]	; 0x10c
    2090:	f8a5 200f 	strh.w	r2, [r5, #15]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2094:	f8a5 600d 	strh.w	r6, [r5, #13]
	pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    2098:	f8a5 1011 	strh.w	r1, [r5, #17]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    209c:	f8a5 3009 	strh.w	r3, [r5, #9]
	if (
    20a0:	2800      	cmp	r0, #0
    20a2:	f000 830c 	beq.w	26be <ull_conn_llcp+0xfe6>
	    !conn->llcp_enc.pause_tx &&
    20a6:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    20aa:	079e      	lsls	r6, r3, #30
    20ac:	f100 8307 	bmi.w	26be <ull_conn_llcp+0xfe6>
	    !conn->llcp_phy.pause_tx &&
    20b0:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    20b4:	07d9      	lsls	r1, r3, #31
    20b6:	f100 8302 	bmi.w	26be <ull_conn_llcp+0xfe6>
		if (conn->tx_head == conn->tx_data) {
    20ba:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    20be:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    20c0:	bf04      	itt	eq
    20c2:	6803      	ldreq	r3, [r0, #0]
    20c4:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    20c8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    20cc:	2b00      	cmp	r3, #0
    20ce:	f000 871f 	beq.w	2f10 <ull_conn_llcp+0x1838>
	tx->next = conn->tx_ctrl_last->next;
    20d2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    20d6:	681a      	ldr	r2, [r3, #0]
    20d8:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    20da:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    20dc:	6828      	ldr	r0, [r5, #0]
	conn->tx_ctrl_last = tx;
    20de:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    20e2:	2800      	cmp	r0, #0
    20e4:	f47f ab09 	bne.w	16fa <ull_conn_llcp+0x22>
    20e8:	e790      	b.n	200c <ull_conn_llcp+0x934>
		rx = ll_pdu_rx_alloc_peek(2);
    20ea:	2002      	movs	r0, #2
    20ec:	f00c ff14 	bl	ef18 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    20f0:	4680      	mov	r8, r0
    20f2:	2800      	cmp	r0, #0
    20f4:	f43f ab01 	beq.w	16fa <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    20f8:	486e      	ldr	r0, [pc, #440]	; (22b4 <ull_conn_llcp+0xbdc>)
    20fa:	f009 f881 	bl	b200 <mem_acquire>
		if (!tx) {
    20fe:	4605      	mov	r5, r0
    2100:	2800      	cmp	r0, #0
    2102:	f43f aafa 	beq.w	16fa <ull_conn_llcp+0x22>
		conn->llcp.phy_upd_ind.initiate = 0U;
    2106:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    210a:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
    210e:	f3c3 1242 	ubfx	r2, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
    2112:	ea42 0293 	orr.w	r2, r2, r3, lsr #2
    2116:	f012 0707 	ands.w	r7, r2, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
    211a:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
    211e:	b2db      	uxtb	r3, r3
    2120:	f040 85c2 	bne.w	2ca8 <ull_conn_llcp+0x15d0>
			conn->llcp_ack = conn->llcp_req;
    2124:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
    2128:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
    212c:	0798      	lsls	r0, r3, #30
			conn->llcp_ack = conn->llcp_req;
    212e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
    2132:	f100 867a 	bmi.w	2e2a <ull_conn_llcp+0x1752>
    2136:	463b      	mov	r3, r7
    2138:	4639      	mov	r1, r7
		pdu_ctrl_tx->len =
    213a:	2205      	movs	r2, #5
    213c:	716a      	strb	r2, [r5, #5]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
    213e:	722f      	strb	r7, [r5, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2140:	792a      	ldrb	r2, [r5, #4]
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
    2142:	726b      	strb	r3, [r5, #9]
	    conn->tx_head &&
    2144:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
    2148:	8169      	strh	r1, [r5, #10]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    214a:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode =
    214e:	2118      	movs	r1, #24
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2150:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_tx->llctrl.opcode =
    2152:	71e9      	strb	r1, [r5, #7]
	if (
    2154:	2b00      	cmp	r3, #0
    2156:	f47f af38 	bne.w	1fca <ull_conn_llcp+0x8f2>
		if (!conn->tx_ctrl) {
    215a:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    215e:	2a00      	cmp	r2, #0
    2160:	f47f af49 	bne.w	1ff6 <ull_conn_llcp+0x91e>
			tx->next = conn->tx_head;
    2164:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2166:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    216a:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    216e:	e74a      	b.n	2006 <ull_conn_llcp+0x92e>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2170:	4850      	ldr	r0, [pc, #320]	; (22b4 <ull_conn_llcp+0xbdc>)
    2172:	f009 f845 	bl	b200 <mem_acquire>
	if (!tx) {
    2176:	4606      	mov	r6, r0
    2178:	2800      	cmp	r0, #0
    217a:	f43f aabe 	beq.w	16fa <ull_conn_llcp+0x22>
	if (!lll->role) {
    217e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    2182:	2b00      	cmp	r3, #0
	pdu_ctrl_tx = (void *)tx->pdu;
    2184:	f100 0804 	add.w	r8, r0, #4
	if (!lll->role) {
    2188:	f280 8419 	bge.w	29be <ull_conn_llcp+0x12e6>
	else if (!lll->enc_rx) {
    218c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
    2190:	071d      	lsls	r5, r3, #28
    2192:	f100 8608 	bmi.w	2da6 <ull_conn_llcp+0x16ce>
		if (conn->llcp.encryption.error_code) {
    2196:	f894 50ed 	ldrb.w	r5, [r4, #237]	; 0xed
    219a:	2d00      	cmp	r5, #0
    219c:	f000 84a1 	beq.w	2ae2 <ull_conn_llcp+0x140a>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    21a0:	7903      	ldrb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    21a2:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    21a6:	f043 0303 	orr.w	r3, r3, #3
    21aa:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
    21ac:	07d0      	lsls	r0, r2, #31
    21ae:	f140 8628 	bpl.w	2e02 <ull_conn_llcp+0x172a>
	    (conn->llcp_feature.features_conn &
    21b2:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	if (conn->common.fex_valid &&
    21b6:	0759      	lsls	r1, r3, #29
    21b8:	f140 8623 	bpl.w	2e02 <ull_conn_llcp+0x172a>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    21bc:	2211      	movs	r2, #17
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    21be:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
    21c0:	7275      	strb	r5, [r6, #9]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    21c2:	71f2      	strb	r2, [r6, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
    21c4:	7233      	strb	r3, [r6, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
    21c6:	7177      	strb	r7, [r6, #5]
	    conn->tx_head &&
    21c8:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	conn->llcp.encryption.error_code = 0U;
    21cc:	2200      	movs	r2, #0
    21ce:	f884 20ed 	strb.w	r2, [r4, #237]	; 0xed
	if (
    21d2:	2b00      	cmp	r3, #0
    21d4:	f000 84cf 	beq.w	2b76 <ull_conn_llcp+0x149e>
	    !conn->llcp_enc.pause_tx &&
    21d8:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    21dc:	0792      	lsls	r2, r2, #30
    21de:	f100 84ca 	bmi.w	2b76 <ull_conn_llcp+0x149e>
	    !conn->llcp_phy.pause_tx &&
    21e2:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    21e6:	07d7      	lsls	r7, r2, #31
    21e8:	f100 84c5 	bmi.w	2b76 <ull_conn_llcp+0x149e>
		if (conn->tx_head == conn->tx_data) {
    21ec:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    21f0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    21f2:	bf04      	itt	eq
    21f4:	681a      	ldreq	r2, [r3, #0]
    21f6:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    21fa:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    21fe:	2a00      	cmp	r2, #0
    2200:	f000 86fd 	beq.w	2ffe <ull_conn_llcp+0x1926>
	tx->next = conn->tx_ctrl_last->next;
    2204:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2208:	681a      	ldr	r2, [r3, #0]
    220a:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    220c:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    220e:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2212:	6833      	ldr	r3, [r6, #0]
    2214:	2b00      	cmp	r3, #0
    2216:	f000 851e 	beq.w	2c56 <ull_conn_llcp+0x157e>
	conn->llcp_ack = conn->llcp_req;
    221a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    221e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
    2222:	f7ff ba6a 	b.w	16fa <ull_conn_llcp+0x22>
		conn_upd_curr = conn;
    2226:	f8ca 4000 	str.w	r4, [sl]
    222a:	f7ff bafa 	b.w	1822 <ull_conn_llcp+0x14a>
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    222e:	f002 0207 	and.w	r2, r2, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    2232:	f8b4 c19c 	ldrh.w	ip, [r4, #412]	; 0x19c
		lll->max_rx_time = conn->llcp_length.rx_time;
    2236:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    223a:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    223e:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    2242:	f8a4 c05e 	strh.w	ip, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2246:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
    2248:	f8a4 1062 	strh.w	r1, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    224c:	f000 84b3 	beq.w	2bb6 <ull_conn_llcp+0x14de>
			conn->llcp_length.state =
    2250:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    2254:	2206      	movs	r2, #6
    2256:	f362 0302 	bfi	r3, r2, #0, #3
    225a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    225e:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    2262:	2f00      	cmp	r7, #0
    2264:	f000 8493 	beq.w	2b8e <ull_conn_llcp+0x14b6>
    2268:	6838      	ldr	r0, [r7, #0]
    226a:	2800      	cmp	r0, #0
    226c:	f000 848f 	beq.w	2b8e <ull_conn_llcp+0x14b6>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2270:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    2272:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    2274:	f8b4 e02c 	ldrh.w	lr, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    2278:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    227c:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2280:	2202      	movs	r2, #2
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2282:	773b      	strb	r3, [r7, #28]
		pdu_ctrl_rx->len =
    2284:	f04f 0a09 	mov.w	sl, #9
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2288:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    228a:	f8a7 e006 	strh.w	lr, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    228e:	f8a7 c020 	strh.w	ip, [r7, #32]
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2292:	8479      	strh	r1, [r7, #34]	; 0x22
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2294:	713a      	strb	r2, [r7, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2296:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    2298:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    229a:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    229e:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		pdu_ctrl_rx->len =
    22a2:	f887 a01d 	strb.w	sl, [r7, #29]
		ll_rx_put(rx->hdr.link, rx);
    22a6:	f00c fe27 	bl	eef8 <ll_rx_put>
		ll_rx_sched();
    22aa:	f00c fe2f 	bl	ef0c <ll_rx_sched>
	break;
    22ae:	f7ff ba4d 	b.w	174c <ull_conn_llcp+0x74>
    22b2:	bf00      	nop
    22b4:	200021a4 	.word	0x200021a4
    22b8:	d1b71759 	.word	0xd1b71759
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    22bc:	48be      	ldr	r0, [pc, #760]	; (25b8 <ull_conn_llcp+0xee0>)
    22be:	f008 ff9f 	bl	b200 <mem_acquire>
		if (!tx) {
    22c2:	2800      	cmp	r0, #0
    22c4:	f43f aa42 	beq.w	174c <ull_conn_llcp+0x74>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    22c8:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    22cc:	f8b4 119e 	ldrh.w	r1, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    22d0:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    22d4:	f8a4 10d6 	strh.w	r1, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    22d8:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    22da:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    22de:	f367 0202 	bfi	r2, r7, #0, #3
    22e2:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->len =
    22e6:	2709      	movs	r7, #9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22e8:	7902      	ldrb	r2, [r0, #4]
		pdu_ctrl_tx->len =
    22ea:	7147      	strb	r7, [r0, #5]
	if (!conn->common.fex_valid ||
    22ec:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
	feature_coded_phy = (conn->llcp_feature.features_conn &
    22f0:	f8d4 e11c 	ldr.w	lr, [r4, #284]	; 0x11c
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    22f4:	8181      	strh	r1, [r0, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    22f6:	f042 0203 	orr.w	r2, r2, #3
    22fa:	7102      	strb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    22fc:	221b      	movs	r2, #27
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    22fe:	f04f 0c14 	mov.w	ip, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    2302:	2100      	movs	r1, #0
    2304:	7202      	strb	r2, [r0, #8]
	if (!conn->common.fex_valid ||
    2306:	07fa      	lsls	r2, r7, #31
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    2308:	f880 c007 	strb.w	ip, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    230c:	7241      	strb	r1, [r0, #9]
	if (!conn->common.fex_valid ||
    230e:	f140 83b9 	bpl.w	2a84 <ull_conn_llcp+0x13ac>
    2312:	f41e 6f00 	tst.w	lr, #2048	; 0x800
    2316:	f000 83b5 	beq.w	2a84 <ull_conn_llcp+0x13ac>
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    231a:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    231e:	bf28      	it	cs
    2320:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
    2324:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    2328:	bf38      	it	cc
    232a:	f44f 73a4 	movcc.w	r3, #328	; 0x148
    232e:	f44f 6129 	mov.w	r1, #2704	; 0xa90
	    conn->tx_head &&
    2332:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    2336:	8141      	strh	r1, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    2338:	81c3      	strh	r3, [r0, #14]
	if (
    233a:	2a00      	cmp	r2, #0
    233c:	f000 8334 	beq.w	29a8 <ull_conn_llcp+0x12d0>
	    !conn->llcp_enc.pause_tx &&
    2340:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    2344:	079b      	lsls	r3, r3, #30
    2346:	f100 832f 	bmi.w	29a8 <ull_conn_llcp+0x12d0>
	    !conn->llcp_phy.pause_tx &&
    234a:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    234e:	07df      	lsls	r7, r3, #31
    2350:	f100 832a 	bmi.w	29a8 <ull_conn_llcp+0x12d0>
		if (conn->tx_head == conn->tx_data) {
    2354:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    2358:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
    235a:	bf04      	itt	eq
    235c:	6813      	ldreq	r3, [r2, #0]
    235e:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2362:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2366:	2b00      	cmp	r3, #0
    2368:	f000 85ff 	beq.w	2f6a <ull_conn_llcp+0x1892>
	tx->next = conn->tx_ctrl_last->next;
    236c:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2370:	681a      	ldr	r2, [r3, #0]
    2372:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2374:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2376:	6802      	ldr	r2, [r0, #0]
    2378:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    237c:	2a00      	cmp	r2, #0
    237e:	f000 8546 	beq.w	2e0e <ull_conn_llcp+0x1736>
		conn->procedure_expire = conn->procedure_reload;
    2382:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    2386:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	break;
    238a:	f7ff b9df 	b.w	174c <ull_conn_llcp+0x74>
		if (!conn->tx_ctrl) {
    238e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2392:	2a00      	cmp	r2, #0
    2394:	f47f ad3d 	bne.w	1e12 <ull_conn_llcp+0x73a>
			tx->next = conn->tx_head;
    2398:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    239a:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    239e:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    23a2:	e53e      	b.n	1e22 <ull_conn_llcp+0x74a>
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    23a4:	fb07 3311 	mls	r3, r7, r1, r3
    23a8:	f240 42e2 	movw	r2, #1250	; 0x4e2
    23ac:	4883      	ldr	r0, [pc, #524]	; (25bc <ull_conn_llcp+0xee4>)
    23ae:	b29b      	uxth	r3, r3
    23b0:	fb02 f303 	mul.w	r3, r2, r3
    23b4:	fba3 0100 	umull	r0, r1, r3, r0
    23b8:	a37d      	add	r3, pc, #500	; (adr r3, 25b0 <ull_conn_llcp+0xed8>)
    23ba:	e9d3 2300 	ldrd	r2, r3, [r3]
    23be:	f7fe fabd 	bl	93c <__aeabi_uldivmod>
    23c2:	1a2d      	subs	r5, r5, r0
    23c4:	f7ff bab5 	b.w	1932 <ull_conn_llcp+0x25a>
		LL_ASSERT(rx && rx->hdr.link);
    23c8:	4a7d      	ldr	r2, [pc, #500]	; (25c0 <ull_conn_llcp+0xee8>)
    23ca:	497e      	ldr	r1, [pc, #504]	; (25c4 <ull_conn_llcp+0xeec>)
    23cc:	487e      	ldr	r0, [pc, #504]	; (25c8 <ull_conn_llcp+0xef0>)
    23ce:	f640 03ec 	movw	r3, #2284	; 0x8ec
    23d2:	f017 fd10 	bl	19df6 <printk>
    23d6:	4040      	eors	r0, r0
    23d8:	f380 8811 	msr	BASEPRI, r0
    23dc:	f04f 0003 	mov.w	r0, #3
    23e0:	df02      	svc	2
    23e2:	6838      	ldr	r0, [r7, #0]
    23e4:	f7ff ba5b 	b.w	189e <ull_conn_llcp+0x1c6>
			lll->slave.window_widening_prepare_us -=
    23e8:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				lll->slave.window_widening_periodic_us *
    23ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    23ec:	4e73      	ldr	r6, [pc, #460]	; (25bc <ull_conn_llcp+0xee4>)
			lll->slave.window_widening_prepare_us -=
    23ee:	fb03 231b 	mls	r3, r3, fp, r2
    23f2:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    23f4:	f012 fb4a 	bl	14a8c <lll_clock_ppm_local_get>
    23f8:	4680      	mov	r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    23fa:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    23fe:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2402:	f012 fb45 	bl	14a90 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    2406:	eb08 0300 	add.w	r3, r8, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    240a:	fb07 f303 	mul.w	r3, r7, r3
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    240e:	486f      	ldr	r0, [pc, #444]	; (25cc <ull_conn_llcp+0xef4>)
			lll->slave.window_widening_prepare_us +=
    2410:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
				conn->llcp_cu.win_size * 1250U;
    2412:	f894 1114 	ldrb.w	r1, [r4, #276]	; 0x114
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2416:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
    241a:	f203 233f 	addw	r3, r3, #575	; 0x23f
    241e:	fba0 0303 	umull	r0, r3, r0, r3
    2422:	ea4f 4b93 	mov.w	fp, r3, lsr #18
				lll->slave.window_widening_periodic_us *
    2426:	fb0b f00a 	mul.w	r0, fp, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    242a:	087b      	lsrs	r3, r7, #1
			lll->slave.window_widening_prepare_us +=
    242c:	4402      	add	r2, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    242e:	3b96      	subs	r3, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    2430:	429a      	cmp	r2, r3
    2432:	bf28      	it	cs
    2434:	461a      	movcs	r2, r3
				conn->llcp_cu.win_size * 1250U;
    2436:	fb09 fc01 	mul.w	ip, r9, r1
			conn->slave.ticks_to_offset = 0U;
    243a:	f04f 0e00 	mov.w	lr, #0
			lll->slave.window_widening_max_us =
    243e:	e9c4 3212 	strd	r3, r2, [r4, #72]	; 0x48
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2442:	fba0 0106 	umull	r0, r1, r0, r6
    2446:	a35a      	add	r3, pc, #360	; (adr r3, 25b0 <ull_conn_llcp+0xed8>)
    2448:	e9d3 2300 	ldrd	r2, r3, [r3]
			lll->slave.window_size_prepare_us =
    244c:	f8c4 c054 	str.w	ip, [r4, #84]	; 0x54
			conn->slave.ticks_to_offset = 0U;
    2450:	f8c4 e0e4 	str.w	lr, [r4, #228]	; 0xe4
			lll->slave.window_widening_periodic_us =
    2454:	f8c4 b044 	str.w	fp, [r4, #68]	; 0x44
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2458:	f7fe fa70 	bl	93c <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    245c:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2460:	4684      	mov	ip, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2462:	485b      	ldr	r0, [pc, #364]	; (25d0 <ull_conn_llcp+0xef8>)
    2464:	fba0 3003 	umull	r3, r0, r0, r3
    2468:	0a80      	lsrs	r0, r0, #10
    246a:	fb09 f000 	mul.w	r0, r9, r0
    246e:	fba0 0106 	umull	r0, r1, r0, r6
    2472:	a34f      	add	r3, pc, #316	; (adr r3, 25b0 <ull_conn_llcp+0xed8>)
    2474:	e9d3 2300 	ldrd	r2, r3, [r3]
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2478:	eba5 050c 	sub.w	r5, r5, ip
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    247c:	f7fe fa5e 	bl	93c <__aeabi_uldivmod>
			periodic_us -= lll->slave.window_widening_periodic_us;
    2480:	eba7 060b 	sub.w	r6, r7, fp
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2484:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    2488:	f7ff ba74 	b.w	1974 <ull_conn_llcp+0x29c>
		} else if (conn->llcp_conn_param.ack !=
    248c:	f894 c171 	ldrb.w	ip, [r4, #369]	; 0x171
    2490:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
    2494:	4594      	cmp	ip, r2
    2496:	f000 818f 	beq.w	27b8 <ull_conn_llcp+0x10e0>
	conn_upd = conn_upd_curr;
    249a:	f8df a138 	ldr.w	sl, [pc, #312]	; 25d4 <ull_conn_llcp+0xefc>
    249e:	f8da 2000 	ldr.w	r2, [sl]
	if (conn_upd && (conn_upd != conn)) {
    24a2:	2a00      	cmp	r2, #0
    24a4:	f000 84e7 	beq.w	2e76 <ull_conn_llcp+0x179e>
    24a8:	4294      	cmp	r4, r2
    24aa:	f47f a926 	bne.w	16fa <ull_conn_llcp+0x22>
	switch (conn->llcp_conn_param.state) {
    24ae:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    24b2:	f002 0207 	and.w	r2, r2, #7
    24b6:	2a05      	cmp	r2, #5
    24b8:	f200 86bd 	bhi.w	3236 <ull_conn_llcp+0x1b5e>
    24bc:	f20f 0c04 	addw	ip, pc, #4
    24c0:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    24c4:	000025d9 	.word	0x000025d9
    24c8:	0000252d 	.word	0x0000252d
    24cc:	000024dd 	.word	0x000024dd
    24d0:	000016f1 	.word	0x000016f1
    24d4:	000016f1 	.word	0x000016f1
    24d8:	000016f1 	.word	0x000016f1
	if (conn->llcp_enc.pause_tx) {
    24dc:	079b      	lsls	r3, r3, #30
    24de:	f53f a90c 	bmi.w	16fa <ull_conn_llcp+0x22>
	rx = ll_pdu_rx_alloc();
    24e2:	f00c fd37 	bl	ef54 <ll_pdu_rx_alloc>
	if (!rx) {
    24e6:	4601      	mov	r1, r0
    24e8:	2800      	cmp	r0, #0
    24ea:	f43f acef 	beq.w	1ecc <ull_conn_llcp+0x7f4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    24ee:	7f03      	ldrb	r3, [r0, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    24f0:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    24f4:	2003      	movs	r0, #3
    24f6:	f360 0202 	bfi	r2, r0, #0, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    24fa:	4303      	orrs	r3, r0
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
    24fc:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
	rx->hdr.handle = conn->lll.handle;
    2500:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    2502:	770b      	strb	r3, [r1, #28]
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2504:	2702      	movs	r7, #2
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2506:	2318      	movs	r3, #24
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2508:	710f      	strb	r7, [r1, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    250a:	774b      	strb	r3, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    250c:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2510:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rx->hdr.handle = conn->lll.handle;
    2514:	80c8      	strh	r0, [r1, #6]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2516:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    251a:	840a      	strh	r2, [r1, #32]
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    251c:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    2520:	844b      	strh	r3, [r1, #34]	; 0x22
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2522:	230f      	movs	r3, #15
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2524:	8488      	strh	r0, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    2526:	84ca      	strh	r2, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2528:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
    252a:	e4ca      	b.n	1ec2 <ull_conn_llcp+0x7ea>
	if (conn->llcp_conn_param.status) {
    252c:	f894 7173 	ldrb.w	r7, [r4, #371]	; 0x173
    2530:	2f00      	cmp	r7, #0
    2532:	f040 8535 	bne.w	2fa0 <ull_conn_llcp+0x18c8>
	if (!conn->lll.role) {
    2536:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
    253a:	2b00      	cmp	r3, #0
    253c:	f2c0 8574 	blt.w	3028 <ull_conn_llcp+0x1950>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2540:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		if (conn->llcp_conn_param.preferred_periodicity) {
    2544:	f894 017c 	ldrb.w	r0, [r4, #380]	; 0x17c
		conn->llcp_cu.win_offset_us = 0U;
    2548:	f8c4 7110 	str.w	r7, [r4, #272]	; 0x110
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    254c:	2205      	movs	r2, #5
    254e:	f362 0302 	bfi	r3, r2, #0, #3
		conn->llcp_cu.win_size = 1U;
    2552:	2201      	movs	r2, #1
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
    2554:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
		conn->llcp_cu.win_size = 1U;
    2558:	f884 2114 	strb.w	r2, [r4, #276]	; 0x114
		if (conn->llcp_conn_param.preferred_periodicity) {
    255c:	2800      	cmp	r0, #0
    255e:	f000 8632 	beq.w	31c6 <ull_conn_llcp+0x1aee>
				((conn->llcp_conn_param.interval_min /
    2562:	f8b4 3174 	ldrh.w	r3, [r4, #372]	; 0x174
    2566:	fbb3 f3f0 	udiv	r3, r3, r0
				  conn->llcp_conn_param.preferred_periodicity) +
    256a:	4413      	add	r3, r2
			conn->llcp_cu.interval =
    256c:	fb13 f300 	smulbb	r3, r3, r0
    2570:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    2572:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2576:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
    257a:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
    257e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2582:	009b      	lsls	r3, r3, #2
    2584:	f020 0207 	bic.w	r2, r0, #7
    2588:	f043 0302 	orr.w	r3, r3, #2
    258c:	4313      	orrs	r3, r2
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    258e:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    2592:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
    2596:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.ack--;
    259a:	3901      	subs	r1, #1
    259c:	f884 1105 	strb.w	r1, [r4, #261]	; 0x105
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
    25a0:	f8a4 010a 	strh.w	r0, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
    25a4:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
		return;
    25a8:	f7ff b8a7 	b.w	16fa <ull_conn_llcp+0x22>
    25ac:	f3af 8000 	nop.w
    25b0:	1afd498d 	.word	0x1afd498d
    25b4:	00000007 	.word	0x00000007
    25b8:	200021a4 	.word	0x200021a4
    25bc:	3b9aca00 	.word	0x3b9aca00
    25c0:	00020020 	.word	0x00020020
    25c4:	00020144 	.word	0x00020144
    25c8:	0001fcdc 	.word	0x0001fcdc
    25cc:	431bde83 	.word	0x431bde83
    25d0:	d1b71759 	.word	0xd1b71759
    25d4:	20002120 	.word	0x20002120
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    25d8:	48e0      	ldr	r0, [pc, #896]	; (295c <ull_conn_llcp+0x1284>)
			event_counter = lll->event_counter +
    25da:	8ee7      	ldrh	r7, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
    25dc:	f8b4 8032 	ldrh.w	r8, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    25e0:	f008 fe0e 	bl	b200 <mem_acquire>
	if (!tx) {
    25e4:	4601      	mov	r1, r0
    25e6:	2800      	cmp	r0, #0
    25e8:	f43f ac70 	beq.w	1ecc <ull_conn_llcp+0x7f4>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    25ec:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25f0:	790a      	ldrb	r2, [r1, #4]
			event_counter = lll->event_counter +
    25f2:	eb07 0308 	add.w	r3, r7, r8
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    25f6:	2704      	movs	r7, #4
    25f8:	f367 0002 	bfi	r0, r7, #0, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    25fc:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2600:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
    2602:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2606:	710a      	strb	r2, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
    2608:	714f      	strb	r7, [r1, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    260a:	f8b4 7174 	ldrh.w	r7, [r4, #372]	; 0x174
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    260e:	f8b4 0176 	ldrh.w	r0, [r4, #374]	; 0x176
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2612:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
    2616:	810f      	strh	r7, [r1, #8]
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2618:	4433      	add	r3, r6
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    261a:	f8b4 717a 	ldrh.w	r7, [r4, #378]	; 0x17a
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
    261e:	8148      	strh	r0, [r1, #10]
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
    2620:	818a      	strh	r2, [r1, #12]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2622:	200f      	movs	r0, #15
	p->preferred_periodicity = 0U;
    2624:	2200      	movs	r2, #0
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
    2626:	f8a1 3011 	strh.w	r3, [r1, #17]
	p->offset1 = sys_cpu_to_le16(0xffff);
    262a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
    262e:	81cf      	strh	r7, [r1, #14]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2630:	71c8      	strb	r0, [r1, #7]
	p->offset1 = sys_cpu_to_le16(0xffff);
    2632:	754b      	strb	r3, [r1, #21]
    2634:	758b      	strb	r3, [r1, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
    2636:	75cb      	strb	r3, [r1, #23]
    2638:	760b      	strb	r3, [r1, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
    263a:	764b      	strb	r3, [r1, #25]
    263c:	768b      	strb	r3, [r1, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
    263e:	76cb      	strb	r3, [r1, #27]
    2640:	770b      	strb	r3, [r1, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
    2642:	774b      	strb	r3, [r1, #29]
    2644:	778b      	strb	r3, [r1, #30]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2646:	4620      	mov	r0, r4
	p->preferred_periodicity = 0U;
    2648:	740a      	strb	r2, [r1, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
    264a:	74ca      	strb	r2, [r1, #19]
    264c:	750a      	strb	r2, [r1, #20]
	ctrl_tx_pause_enqueue(conn, tx, false);
    264e:	f00d fb47 	bl	fce0 <ctrl_tx_pause_enqueue>
	conn->procedure_expire = conn->procedure_reload;
    2652:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    2656:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    265a:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
	conn_upd_curr = conn;
    265e:	f8ca 4000 	str.w	r4, [sl]
	conn->procedure_expire = conn->procedure_reload;
    2662:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2666:	f7ff b843 	b.w	16f0 <ull_conn_llcp+0x18>
		if ((conn->llcp_cu.interval != lll->interval) ||
    266a:	8e22      	ldrh	r2, [r4, #48]	; 0x30
    266c:	4562      	cmp	r2, ip
    266e:	f47f a921 	bne.w	18b4 <ull_conn_llcp+0x1dc>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2672:	f240 42e2 	movw	r2, #1250	; 0x4e2
    2676:	f8b4 e10c 	ldrh.w	lr, [r4, #268]	; 0x10c
		    (conn->llcp_cu.latency != lll->latency) ||
    267a:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    267e:	fb02 fa03 	mul.w	sl, r2, r3
    2682:	f242 7210 	movw	r2, #10000	; 0x2710
    2686:	fb02 a20e 	mla	r2, r2, lr, sl
    268a:	3a01      	subs	r2, #1
    268c:	fbb2 f2fa 	udiv	r2, r2, sl
		    (conn->llcp_cu.latency != lll->latency) ||
    2690:	b292      	uxth	r2, r2
    2692:	4291      	cmp	r1, r2
    2694:	f47f a910 	bne.w	18b8 <ull_conn_llcp+0x1e0>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2698:	2303      	movs	r3, #3
    269a:	713b      	strb	r3, [r7, #4]
    269c:	f7ff b917 	b.w	18ce <ull_conn_llcp+0x1f6>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    26a0:	2201      	movs	r2, #1
    26a2:	4610      	mov	r0, r2
    26a4:	2102      	movs	r1, #2
    26a6:	f008 fe4f 	bl	b348 <mayfly_enable>
				return -ECANCELED;
    26aa:	f06f 0047 	mvn.w	r0, #71	; 0x47
    26ae:	f7ff b82b 	b.w	1708 <ull_conn_llcp+0x30>
    26b2:	f44f 79a4 	mov.w	r9, #328	; 0x148
    26b6:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
    26ba:	f7ff ba30 	b.w	1b1e <ull_conn_llcp+0x446>
		if (!conn->tx_ctrl) {
    26be:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    26c2:	2b00      	cmp	r3, #0
    26c4:	f47f ad05 	bne.w	20d2 <ull_conn_llcp+0x9fa>
			tx->next = conn->tx_head;
    26c8:	6028      	str	r0, [r5, #0]
				conn->tx_ctrl = tx;
    26ca:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    26ce:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    26d2:	2800      	cmp	r0, #0
    26d4:	f47f a811 	bne.w	16fa <ull_conn_llcp+0x22>
    26d8:	e498      	b.n	200c <ull_conn_llcp+0x934>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    26da:	48a0      	ldr	r0, [pc, #640]	; (295c <ull_conn_llcp+0x1284>)
    26dc:	f008 fd90 	bl	b200 <mem_acquire>
	if (tx) {
    26e0:	4680      	mov	r8, r0
    26e2:	2800      	cmp	r0, #0
    26e4:	f43f abf2 	beq.w	1ecc <ull_conn_llcp+0x7f4>
		conn->llcp_feature.ack--;
    26e8:	f894 3119 	ldrb.w	r3, [r4, #281]	; 0x119
		conn->llcp_feature.features_conn = LL_FEAT;
    26ec:	4a9c      	ldr	r2, [pc, #624]	; (2960 <ull_conn_llcp+0x1288>)
    26ee:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
		conn->llcp_feature.ack--;
    26f2:	3b01      	subs	r3, #1
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    26f4:	2209      	movs	r2, #9
		conn->llcp_feature.ack--;
    26f6:	f884 3119 	strb.w	r3, [r4, #281]	; 0x119
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
    26fa:	7142      	strb	r2, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
    26fc:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2700:	7903      	ldrb	r3, [r0, #4]
		pdu->llctrl.opcode = !conn->lll.role ?
    2702:	2a00      	cmp	r2, #0
    2704:	bfac      	ite	ge
    2706:	2208      	movge	r2, #8
    2708:	220e      	movlt	r2, #14
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    270a:	f043 0303 	orr.w	r3, r3, #3
		pdu->llctrl.opcode = !conn->lll.role ?
    270e:	71c2      	strb	r2, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2710:	2208      	movs	r2, #8
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2712:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
    2714:	4639      	mov	r1, r7
    2716:	4410      	add	r0, r2
    2718:	f019 f9b2 	bl	1ba80 <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
    271c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
	dst[0] = val;
    2720:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
    2724:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
    2728:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    272a:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
    272e:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
    2732:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2736:	2b00      	cmp	r3, #0
    2738:	f000 81b4 	beq.w	2aa4 <ull_conn_llcp+0x13cc>
	    !conn->llcp_enc.pause_tx &&
    273c:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2740:	0797      	lsls	r7, r2, #30
    2742:	f100 81af 	bmi.w	2aa4 <ull_conn_llcp+0x13cc>
	    !conn->llcp_phy.pause_tx &&
    2746:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    274a:	07d0      	lsls	r0, r2, #31
    274c:	f100 81aa 	bmi.w	2aa4 <ull_conn_llcp+0x13cc>
		if (conn->tx_head == conn->tx_data) {
    2750:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2754:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2756:	bf04      	itt	eq
    2758:	681a      	ldreq	r2, [r3, #0]
    275a:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    275e:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2762:	2a00      	cmp	r2, #0
    2764:	f000 8409 	beq.w	2f7a <ull_conn_llcp+0x18a2>
	tx->next = conn->tx_ctrl_last->next;
    2768:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    276c:	681a      	ldr	r2, [r3, #0]
    276e:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
    2772:	f8c3 8000 	str.w	r8, [r3]
	conn->tx_ctrl_last = tx;
    2776:	f8d8 3000 	ldr.w	r3, [r8]
    277a:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
	if (!tx->next) {
    277e:	2b00      	cmp	r3, #0
    2780:	f000 8394 	beq.w	2eac <ull_conn_llcp+0x17d4>
		conn->procedure_expire = conn->procedure_reload;
    2784:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
    2788:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    278c:	f7ff bb9e 	b.w	1ecc <ull_conn_llcp+0x7f4>
		conn->tx_data_last = tx;
    2790:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2794:	f7ff bb48 	b.w	1e28 <ull_conn_llcp+0x750>
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    2798:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    279c:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
    27a0:	f3c5 0182 	ubfx	r1, r5, #2, #3
    27a4:	f361 0202 	bfi	r2, r1, #0, #3
    27a8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
    27ac:	464a      	mov	r2, r9
    27ae:	f00d fa2f 	bl	fc10 <calc_eff_time>
    27b2:	4606      	mov	r6, r0
    27b4:	f7ff b9b9 	b.w	1b2a <ull_conn_llcp+0x452>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    27b8:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
    27bc:	f894 3199 	ldrb.w	r3, [r4, #409]	; 0x199
    27c0:	428b      	cmp	r3, r1
    27c2:	f000 8203 	beq.w	2bcc <ull_conn_llcp+0x14f4>
	switch (conn->llcp_length.state) {
    27c6:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
    27ca:	f003 0207 	and.w	r2, r3, #7
    27ce:	2a06      	cmp	r2, #6
    27d0:	f200 8522 	bhi.w	3218 <ull_conn_llcp+0x1b40>
    27d4:	f20f 0c04 	addw	ip, pc, #4
    27d8:	f85c f022 	ldr.w	pc, [ip, r2, lsl #2]
    27dc:	00002883 	.word	0x00002883
    27e0:	000016f1 	.word	0x000016f1
    27e4:	000016f1 	.word	0x000016f1
    27e8:	000016f1 	.word	0x000016f1
    27ec:	000027f9 	.word	0x000027f9
    27f0:	000027f9 	.word	0x000027f9
    27f4:	000016f1 	.word	0x000016f1
		lll->max_rx_octets = conn->llcp_length.rx_octets;
    27f8:	f8b4 219c 	ldrh.w	r2, [r4, #412]	; 0x19c
    27fc:	f8a4 205e 	strh.w	r2, [r4, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2800:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_time = conn->llcp_length.rx_time;
    2804:	f8b4 01a0 	ldrh.w	r0, [r4, #416]	; 0x1a0
		tx_octets = conn->llcp_length.tx_octets;
    2808:	f8b4 919e 	ldrh.w	r9, [r4, #414]	; 0x19e
		uint16_t tx_time = conn->llcp_length.tx_time;
    280c:	f8b4 81a2 	ldrh.w	r8, [r4, #418]	; 0x1a2
		lll->max_rx_time = conn->llcp_length.rx_time;
    2810:	f8a4 0062 	strh.w	r0, [r4, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
    2814:	2a04      	cmp	r2, #4
    2816:	f000 83e8 	beq.w	2fea <ull_conn_llcp+0x1912>
			conn->llcp_length.state =
    281a:	2206      	movs	r2, #6
    281c:	f362 0302 	bfi	r3, r2, #0, #3
    2820:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
		rx = conn->llcp_rx;
    2824:	f8d4 7100 	ldr.w	r7, [r4, #256]	; 0x100
		LL_ASSERT(rx && rx->hdr.link);
    2828:	2f00      	cmp	r7, #0
    282a:	f000 838f 	beq.w	2f4c <ull_conn_llcp+0x1874>
    282e:	6838      	ldr	r0, [r7, #0]
    2830:	2800      	cmp	r0, #0
    2832:	f000 838b 	beq.w	2f4c <ull_conn_llcp+0x1874>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2836:	7f3b      	ldrb	r3, [r7, #28]
		conn->llcp_rx = rx->hdr.link->mem;
    2838:	6842      	ldr	r2, [r0, #4]
		rx->hdr.handle = conn->lll.handle;
    283a:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
		conn->llcp_rx = rx->hdr.link->mem;
    283e:	f8c4 2100 	str.w	r2, [r4, #256]	; 0x100
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
    2842:	f043 0303 	orr.w	r3, r3, #3
    2846:	773b      	strb	r3, [r7, #28]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    2848:	2202      	movs	r2, #2
		pdu_ctrl_rx->len =
    284a:	2309      	movs	r3, #9
    284c:	777b      	strb	r3, [r7, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
    284e:	713a      	strb	r2, [r7, #4]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2850:	f8b4 105e 	ldrh.w	r1, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
    2854:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
    2858:	847a      	strh	r2, [r7, #34]	; 0x22
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    285a:	2315      	movs	r3, #21
		rx->hdr.handle = conn->lll.handle;
    285c:	f8a7 c006 	strh.w	ip, [r7, #6]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
    2860:	8439      	strh	r1, [r7, #32]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
    2862:	77fb      	strb	r3, [r7, #31]
		ll_rx_put(rx->hdr.link, rx);
    2864:	4639      	mov	r1, r7
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
    2866:	f8a7 9024 	strh.w	r9, [r7, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    286a:	f8a7 8026 	strh.w	r8, [r7, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
    286e:	f00c fb43 	bl	eef8 <ll_rx_put>
		ll_rx_sched();
    2872:	f00c fb4b 	bl	ef0c <ll_rx_sched>
	break;
    2876:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    287a:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    287e:	f7fe bf37 	b.w	16f0 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2882:	4836      	ldr	r0, [pc, #216]	; (295c <ull_conn_llcp+0x1284>)
    2884:	f008 fcbc 	bl	b200 <mem_acquire>
		if (!tx) {
    2888:	4601      	mov	r1, r0
    288a:	2800      	cmp	r0, #0
    288c:	f43f ab1e 	beq.w	1ecc <ull_conn_llcp+0x7f4>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    2890:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    2894:	f8b4 019e 	ldrh.w	r0, [r4, #414]	; 0x19e
		conn->default_tx_time = conn->llcp_length.tx_time;
    2898:	f8b4 31a2 	ldrh.w	r3, [r4, #418]	; 0x1a2
		conn->default_tx_octets = conn->llcp_length.tx_octets;
    289c:	f8a4 00d6 	strh.w	r0, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    28a0:	2701      	movs	r7, #1
		conn->default_tx_time = conn->llcp_length.tx_time;
    28a2:	f8a4 30d8 	strh.w	r3, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    28a6:	f367 0202 	bfi	r2, r7, #0, #3
		pdu_ctrl_tx->len =
    28aa:	2709      	movs	r7, #9
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
    28ac:	f884 219a 	strb.w	r2, [r4, #410]	; 0x19a
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28b0:	790a      	ldrb	r2, [r1, #4]
		pdu_ctrl_tx->len =
    28b2:	714f      	strb	r7, [r1, #5]
	if (!conn->common.fex_valid ||
    28b4:	f894 70dc 	ldrb.w	r7, [r4, #220]	; 0xdc
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
    28b8:	8188      	strh	r0, [r1, #12]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28ba:	f042 0203 	orr.w	r2, r2, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    28be:	2014      	movs	r0, #20
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    28c0:	f04f 0c00 	mov.w	ip, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    28c4:	710a      	strb	r2, [r1, #4]
	if (!conn->common.fex_valid ||
    28c6:	07ff      	lsls	r7, r7, #31
	feature_coded_phy = (conn->llcp_feature.features_conn &
    28c8:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
    28cc:	71c8      	strb	r0, [r1, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
    28ce:	f04f 001b 	mov.w	r0, #27
    28d2:	f881 c009 	strb.w	ip, [r1, #9]
    28d6:	7208      	strb	r0, [r1, #8]
	if (!conn->common.fex_valid ||
    28d8:	f140 8398 	bpl.w	300c <ull_conn_llcp+0x1934>
    28dc:	0510      	lsls	r0, r2, #20
    28de:	f140 83ed 	bpl.w	30bc <ull_conn_llcp+0x19e4>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    28e2:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
    28e6:	bf28      	it	cs
    28e8:	f44f 6329 	movcs.w	r3, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
    28ec:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
    28f0:	bf38      	it	cc
    28f2:	f44f 73a4 	movcc.w	r3, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
    28f6:	f44f 6229 	mov.w	r2, #2704	; 0xa90
	    conn->tx_head &&
    28fa:	f8d4 01b0 	ldr.w	r0, [r4, #432]	; 0x1b0
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
    28fe:	81cb      	strh	r3, [r1, #14]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
    2900:	f5b2 7fa4 	cmp.w	r2, #328	; 0x148
    2904:	bf38      	it	cc
    2906:	f44f 72a4 	movcc.w	r2, #328	; 0x148
    290a:	814a      	strh	r2, [r1, #10]
	if (
    290c:	2800      	cmp	r0, #0
    290e:	f000 830a 	beq.w	2f26 <ull_conn_llcp+0x184e>
	    !conn->llcp_enc.pause_tx &&
    2912:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	    conn->tx_head &&
    2916:	079b      	lsls	r3, r3, #30
    2918:	f100 8305 	bmi.w	2f26 <ull_conn_llcp+0x184e>
	    !conn->llcp_phy.pause_tx &&
    291c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
    2920:	07df      	lsls	r7, r3, #31
    2922:	f100 8300 	bmi.w	2f26 <ull_conn_llcp+0x184e>
		if (conn->tx_head == conn->tx_data) {
    2926:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
    292a:	4298      	cmp	r0, r3
			conn->tx_data = conn->tx_data->next;
    292c:	bf04      	itt	eq
    292e:	6803      	ldreq	r3, [r0, #0]
    2930:	f8c4 31bc 	streq.w	r3, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2934:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2938:	2b00      	cmp	r3, #0
    293a:	f000 845f 	beq.w	31fc <ull_conn_llcp+0x1b24>
	tx->next = conn->tx_ctrl_last->next;
    293e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2942:	681a      	ldr	r2, [r3, #0]
    2944:	600a      	str	r2, [r1, #0]
	conn->tx_ctrl_last->next = tx;
    2946:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last = tx;
    2948:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
	if (!tx->next) {
    294c:	680b      	ldr	r3, [r1, #0]
    294e:	2b00      	cmp	r3, #0
    2950:	f47f af18 	bne.w	2784 <ull_conn_llcp+0x10ac>
		conn->tx_data_last = tx;
    2954:	f8c4 11c0 	str.w	r1, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    2958:	e714      	b.n	2784 <ull_conn_llcp+0x10ac>
    295a:	bf00      	nop
    295c:	200021a4 	.word	0x200021a4
    2960:	0001497f 	.word	0x0001497f
		LL_ASSERT(rx && rx->hdr.link);
    2964:	4acc      	ldr	r2, [pc, #816]	; (2c98 <ull_conn_llcp+0x15c0>)
    2966:	49cd      	ldr	r1, [pc, #820]	; (2c9c <ull_conn_llcp+0x15c4>)
    2968:	48cd      	ldr	r0, [pc, #820]	; (2ca0 <ull_conn_llcp+0x15c8>)
    296a:	f640 6365 	movw	r3, #3685	; 0xe65
    296e:	f017 fa42 	bl	19df6 <printk>
    2972:	4040      	eors	r0, r0
    2974:	f380 8811 	msr	BASEPRI, r0
    2978:	f04f 0003 	mov.w	r0, #3
    297c:	df02      	svc	2
    297e:	6828      	ldr	r0, [r5, #0]
    2980:	f894 b0ec 	ldrb.w	fp, [r4, #236]	; 0xec
    2984:	f7ff b8f4 	b.w	1b70 <ull_conn_llcp+0x498>
		LL_ASSERT(rx && rx->hdr.link);
    2988:	4ac3      	ldr	r2, [pc, #780]	; (2c98 <ull_conn_llcp+0x15c0>)
    298a:	49c4      	ldr	r1, [pc, #784]	; (2c9c <ull_conn_llcp+0x15c4>)
    298c:	48c4      	ldr	r0, [pc, #784]	; (2ca0 <ull_conn_llcp+0x15c8>)
    298e:	f640 6391 	movw	r3, #3729	; 0xe91
    2992:	f017 fa30 	bl	19df6 <printk>
    2996:	4040      	eors	r0, r0
    2998:	f380 8811 	msr	BASEPRI, r0
    299c:	f04f 0003 	mov.w	r0, #3
    29a0:	df02      	svc	2
    29a2:	6828      	ldr	r0, [r5, #0]
    29a4:	f7ff b90c 	b.w	1bc0 <ull_conn_llcp+0x4e8>
		if (!conn->tx_ctrl) {
    29a8:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    29ac:	2b00      	cmp	r3, #0
    29ae:	f47f acdd 	bne.w	236c <ull_conn_llcp+0xc94>
			tx->next = conn->tx_head;
    29b2:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
    29b4:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    29b8:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    29bc:	e4de      	b.n	237c <ull_conn_llcp+0xca4>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
    29be:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    29c2:	463b      	mov	r3, r7
    29c4:	462a      	mov	r2, r5
    29c6:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    29ca:	f204 105d 	addw	r0, r4, #349	; 0x15d
    29ce:	f013 f9f5 	bl	15dbc <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
    29d2:	4639      	mov	r1, r7
    29d4:	2210      	movs	r2, #16
    29d6:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    29da:	f019 f826 	bl	1ba2a <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    29de:	2208      	movs	r2, #8
    29e0:	f104 0198 	add.w	r1, r4, #152	; 0x98
    29e4:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    29e8:	f019 f81f 	bl	1ba2a <memcpy>
		lll->ccm_rx.direction = 0;
    29ec:	f894 0097 	ldrb.w	r0, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
    29f0:	f894 20b8 	ldrb.w	r2, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
    29f4:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    29f8:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
		lll->enc_rx = 1;
    29fc:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_rx.direction = 0;
    2a00:	f365 0000 	bfi	r0, r5, #0, #1
		lll->ccm_tx.direction = 1;
    2a04:	f042 0201 	orr.w	r2, r2, #1
		lll->ccm_rx.direction = 0;
    2a08:	f884 0097 	strb.w	r0, [r4, #151]	; 0x97
		lll->enc_rx = 1;
    2a0c:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
    2a10:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2a14:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2a18:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2a1c:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2a20:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2a24:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2a28:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
		lll->ccm_tx.counter = 0;
    2a2c:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2a30:	4641      	mov	r1, r8
		lll->ccm_tx.counter = 0;
    2a32:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
		lll->ccm_tx.direction = 1;
    2a36:	f884 20b8 	strb.w	r2, [r4, #184]	; 0xb8
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2a3a:	4620      	mov	r0, r4
    2a3c:	f00d fb1e 	bl	1007c <start_enc_rsp_send>
	    conn->tx_head &&
    2a40:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2a44:	2b00      	cmp	r3, #0
    2a46:	d041      	beq.n	2acc <ull_conn_llcp+0x13f4>
	    !conn->llcp_enc.pause_tx &&
    2a48:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2a4c:	0792      	lsls	r2, r2, #30
    2a4e:	d43d      	bmi.n	2acc <ull_conn_llcp+0x13f4>
	    !conn->llcp_phy.pause_tx &&
    2a50:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2a54:	07d7      	lsls	r7, r2, #31
    2a56:	d439      	bmi.n	2acc <ull_conn_llcp+0x13f4>
		if (conn->tx_head == conn->tx_data) {
    2a58:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2a5c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2a5e:	bf04      	itt	eq
    2a60:	681a      	ldreq	r2, [r3, #0]
    2a62:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2a66:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2a6a:	2a00      	cmp	r2, #0
    2a6c:	f000 8290 	beq.w	2f90 <ull_conn_llcp+0x18b8>
	tx->next = conn->tx_ctrl_last->next;
    2a70:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2a74:	681a      	ldr	r2, [r3, #0]
    2a76:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2a78:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2a7a:	6833      	ldr	r3, [r6, #0]
    2a7c:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
}
    2a80:	f7ff bbc8 	b.w	2214 <ull_conn_llcp+0xb3c>
    2a84:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2a88:	4619      	mov	r1, r3
    2a8a:	e452      	b.n	2332 <ull_conn_llcp+0xc5a>
		if (!conn->tx_ctrl) {
    2a8c:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2a90:	2a00      	cmp	r2, #0
    2a92:	f47f a92e 	bne.w	1cf2 <ull_conn_llcp+0x61a>
			tx->next = conn->tx_head;
    2a96:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2a98:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2a9c:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
    2aa0:	f7ff b92f 	b.w	1d02 <ull_conn_llcp+0x62a>
		if (!conn->tx_ctrl) {
    2aa4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2aa8:	2a00      	cmp	r2, #0
    2aaa:	f47f ae5d 	bne.w	2768 <ull_conn_llcp+0x1090>
			tx->next = conn->tx_head;
    2aae:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
    2ab2:	e9c4 886c 	strd	r8, r8, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2ab6:	f8c4 81b8 	str.w	r8, [r4, #440]	; 0x1b8
    2aba:	e660      	b.n	277e <ull_conn_llcp+0x10a6>
    2abc:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
    2ac0:	f003 0307 	and.w	r3, r3, #7
    2ac4:	f002 0207 	and.w	r2, r2, #7
    2ac8:	f7ff b864 	b.w	1b94 <ull_conn_llcp+0x4bc>
		if (!conn->tx_ctrl) {
    2acc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2ad0:	2a00      	cmp	r2, #0
    2ad2:	d1cd      	bne.n	2a70 <ull_conn_llcp+0x1398>
			tx->next = conn->tx_head;
    2ad4:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2ad6:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2ada:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2ade:	f7ff bb99 	b.w	2214 <ull_conn_llcp+0xb3c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
    2ae2:	f104 077f 	add.w	r7, r4, #127	; 0x7f
    2ae6:	463b      	mov	r3, r7
    2ae8:	462a      	mov	r2, r5
    2aea:	f104 01ee 	add.w	r1, r4, #238	; 0xee
    2aee:	f204 105d 	addw	r0, r4, #349	; 0x15d
    2af2:	f013 f963 	bl	15dbc <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
    2af6:	4639      	mov	r1, r7
    2af8:	2210      	movs	r2, #16
    2afa:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
    2afe:	f018 ff94 	bl	1ba2a <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
    2b02:	2208      	movs	r2, #8
    2b04:	f104 0198 	add.w	r1, r4, #152	; 0x98
    2b08:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
    2b0c:	f018 ff8d 	bl	1ba2a <memcpy>
			lll->ccm_rx.direction = 1U;
    2b10:	f894 2097 	ldrb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2b14:	f894 10b8 	ldrb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2b18:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2b1c:	f884 508f 	strb.w	r5, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
    2b20:	f042 0201 	orr.w	r2, r2, #1
			lll->ccm_tx.direction = 0U;
    2b24:	f365 0100 	bfi	r1, r5, #0, #1
			lll->enc_rx = 1U;
    2b28:	f043 0308 	orr.w	r3, r3, #8
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2b2c:	2001      	movs	r0, #1
			lll->ccm_rx.direction = 1U;
    2b2e:	f884 2097 	strb.w	r2, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
    2b32:	f884 10b8 	strb.w	r1, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
    2b36:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
    2b3a:	f884 5090 	strb.w	r5, [r4, #144]	; 0x90
    2b3e:	f884 5091 	strb.w	r5, [r4, #145]	; 0x91
    2b42:	f884 5092 	strb.w	r5, [r4, #146]	; 0x92
    2b46:	f884 5093 	strb.w	r5, [r4, #147]	; 0x93
    2b4a:	f884 5094 	strb.w	r5, [r4, #148]	; 0x94
    2b4e:	f884 5095 	strb.w	r5, [r4, #149]	; 0x95
    2b52:	f884 5096 	strb.w	r5, [r4, #150]	; 0x96
			lll->ccm_tx.counter = 0U;
    2b56:	f8c4 50b0 	str.w	r5, [r4, #176]	; 0xb0
    2b5a:	f8c4 50b4 	str.w	r5, [r4, #180]	; 0xb4
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b5e:	7932      	ldrb	r2, [r6, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
    2b60:	7170      	strb	r0, [r6, #5]
	    conn->tx_head &&
    2b62:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b66:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
    2b6a:	2105      	movs	r1, #5
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2b6c:	7132      	strb	r2, [r6, #4]
			pdu_ctrl_tx->llctrl.opcode =
    2b6e:	71f1      	strb	r1, [r6, #7]
	if (
    2b70:	2b00      	cmp	r3, #0
    2b72:	f47f ab31 	bne.w	21d8 <ull_conn_llcp+0xb00>
		if (!conn->tx_ctrl) {
    2b76:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2b7a:	2a00      	cmp	r2, #0
    2b7c:	f47f ab42 	bne.w	2204 <ull_conn_llcp+0xb2c>
			tx->next = conn->tx_head;
    2b80:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2b82:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2b86:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2b8a:	f7ff bb42 	b.w	2212 <ull_conn_llcp+0xb3a>
		LL_ASSERT(rx && rx->hdr.link);
    2b8e:	4a42      	ldr	r2, [pc, #264]	; (2c98 <ull_conn_llcp+0x15c0>)
    2b90:	4942      	ldr	r1, [pc, #264]	; (2c9c <ull_conn_llcp+0x15c4>)
    2b92:	4843      	ldr	r0, [pc, #268]	; (2ca0 <ull_conn_llcp+0x15c8>)
    2b94:	f640 5335 	movw	r3, #3381	; 0xd35
    2b98:	f017 f92d 	bl	19df6 <printk>
    2b9c:	4040      	eors	r0, r0
    2b9e:	f380 8811 	msr	BASEPRI, r0
    2ba2:	f04f 0003 	mov.w	r0, #3
    2ba6:	df02      	svc	2
    2ba8:	6838      	ldr	r0, [r7, #0]
    2baa:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
    2bae:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
    2bb2:	f7ff bb5d 	b.w	2270 <ull_conn_llcp+0xb98>
			if (!conn->llcp_length.cache.tx_octets) {
    2bb6:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2bba:	2a00      	cmp	r2, #0
    2bbc:	f040 8179 	bne.w	2eb2 <ull_conn_llcp+0x17da>
				conn->llcp_length.ack = conn->llcp_length.req;
    2bc0:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2bc4:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2bc8:	f7ff bb49 	b.w	225e <ull_conn_llcp+0xb86>
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
    2bcc:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
    2bd0:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
    2bd4:	429a      	cmp	r2, r3
    2bd6:	f43e ad90 	beq.w	16fa <ull_conn_llcp+0x22>
	switch (conn->llcp_phy.state) {
    2bda:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    2bde:	f002 0103 	and.w	r1, r2, #3
    2be2:	2903      	cmp	r1, #3
    2be4:	f000 8277 	beq.w	30d6 <ull_conn_llcp+0x19fe>
    2be8:	2900      	cmp	r1, #0
    2bea:	f47e ad86 	bne.w	16fa <ull_conn_llcp+0x22>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2bee:	482d      	ldr	r0, [pc, #180]	; (2ca4 <ull_conn_llcp+0x15cc>)
    2bf0:	f008 fb06 	bl	b200 <mem_acquire>
		if (!tx) {
    2bf4:	4601      	mov	r1, r0
    2bf6:	2800      	cmp	r0, #0
    2bf8:	f43f a968 	beq.w	1ecc <ull_conn_llcp+0x7f4>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2bfc:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2c00:	f894 21ac 	ldrb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2c04:	f894 71ab 	ldrb.w	r7, [r4, #427]	; 0x1ab
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2c08:	2001      	movs	r0, #1
    2c0a:	f360 0301 	bfi	r3, r0, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2c0e:	f3c3 0082 	ubfx	r0, r3, #2, #3
    2c12:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2c16:	f3c3 1042 	ubfx	r0, r3, #5, #3
    2c1a:	f360 1206 	bfi	r2, r0, #4, #3
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2c1e:	f3c7 0740 	ubfx	r7, r7, #1, #1
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c22:	7908      	ldrb	r0, [r1, #4]
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
    2c24:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		conn->phy_pref_flags = conn->llcp_phy.flags;
    2c28:	f367 02c3 	bfi	r2, r7, #3, #1
    2c2c:	f884 21ac 	strb.w	r2, [r4, #428]	; 0x1ac
		conn->phy_pref_tx = conn->llcp_phy.tx;
    2c30:	f3c3 0c82 	ubfx	ip, r3, #2, #3
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c34:	f040 0003 	orr.w	r0, r0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
    2c38:	f3c3 1342 	ubfx	r3, r3, #5, #3
		pdu_ctrl_tx->len =
    2c3c:	2703      	movs	r7, #3
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2c3e:	2216      	movs	r2, #22
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2c40:	7108      	strb	r0, [r1, #4]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
    2c42:	71ca      	strb	r2, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
    2c44:	f881 c008 	strb.w	ip, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
    2c48:	724b      	strb	r3, [r1, #9]
		pdu_ctrl_tx->len =
    2c4a:	714f      	strb	r7, [r1, #5]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2c4c:	2200      	movs	r2, #0
    2c4e:	4620      	mov	r0, r4
    2c50:	f00d f846 	bl	fce0 <ctrl_tx_pause_enqueue>
    2c54:	e596      	b.n	2784 <ull_conn_llcp+0x10ac>
		conn->tx_data_last = tx;
    2c56:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2c5a:	f7ff bade 	b.w	221a <ull_conn_llcp+0xb42>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
    2c5e:	4592      	cmp	sl, r2
    2c60:	f47e af98 	bne.w	1b94 <ull_conn_llcp+0x4bc>
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2c64:	2303      	movs	r3, #3
    2c66:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2c68:	4629      	mov	r1, r5
    2c6a:	f00c f945 	bl	eef8 <ll_rx_put>
				rx = conn->llcp_rx;
    2c6e:	f8d4 5100 	ldr.w	r5, [r4, #256]	; 0x100
				LL_ASSERT(rx && rx->hdr.link);
    2c72:	2d00      	cmp	r5, #0
    2c74:	f000 8271 	beq.w	315a <ull_conn_llcp+0x1a82>
    2c78:	6828      	ldr	r0, [r5, #0]
    2c7a:	2800      	cmp	r0, #0
    2c7c:	f000 826d 	beq.w	315a <ull_conn_llcp+0x1a82>
				conn->llcp_rx = rx->hdr.link->mem;
    2c80:	6843      	ldr	r3, [r0, #4]
    2c82:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
    2c86:	2303      	movs	r3, #3
    2c88:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
    2c8a:	4629      	mov	r1, r5
    2c8c:	f00c f934 	bl	eef8 <ll_rx_put>
			ll_rx_sched();
    2c90:	f00c f93c 	bl	ef0c <ll_rx_sched>
			return;
    2c94:	f7fe bd31 	b.w	16fa <ull_conn_llcp+0x22>
    2c98:	00020020 	.word	0x00020020
    2c9c:	00020144 	.word	0x00020144
    2ca0:	0001fcdc 	.word	0x0001fcdc
    2ca4:	200021a4 	.word	0x200021a4
			conn->llcp.phy_upd_ind.instant = event_counter +
    2ca8:	8e23      	ldrh	r3, [r4, #48]	; 0x30
    2caa:	4433      	add	r3, r6
							 lll->latency +
    2cac:	3306      	adds	r3, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
    2cae:	f8a4 30ee 	strh.w	r3, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
    2cb2:	f00c f94f 	bl	ef54 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2cb6:	f8d8 3000 	ldr.w	r3, [r8]
    2cba:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2cbe:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2cc0:	f8c4 8100 	str.w	r8, [r4, #256]	; 0x100
			rx = ll_pdu_rx_alloc();
    2cc4:	f00c f946 	bl	ef54 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
    2cc8:	6803      	ldr	r3, [r0, #0]
    2cca:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
    2cce:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
    2cd0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2cd4:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2cd8:	f8c4 0100 	str.w	r0, [r4, #256]	; 0x100
    2cdc:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2ce0:	095b      	lsrs	r3, r3, #5
    2ce2:	f7ff ba2a 	b.w	213a <ull_conn_llcp+0xa62>
		LL_ASSERT(0);
    2ce6:	f640 3354 	movw	r3, #2900	; 0xb54
		LL_ASSERT(0);
    2cea:	4aca      	ldr	r2, [pc, #808]	; (3014 <ull_conn_llcp+0x193c>)
    2cec:	49ca      	ldr	r1, [pc, #808]	; (3018 <ull_conn_llcp+0x1940>)
    2cee:	48cb      	ldr	r0, [pc, #812]	; (301c <ull_conn_llcp+0x1944>)
    2cf0:	f017 f881 	bl	19df6 <printk>
    2cf4:	4040      	eors	r0, r0
    2cf6:	f380 8811 	msr	BASEPRI, r0
    2cfa:	f04f 0003 	mov.w	r0, #3
    2cfe:	df02      	svc	2
		break;
    2d00:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2d04:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    2d08:	f7fe bcf2 	b.w	16f0 <ull_conn_llcp+0x18>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2d0c:	48c4      	ldr	r0, [pc, #784]	; (3020 <ull_conn_llcp+0x1948>)
    2d0e:	f008 fa77 	bl	b200 <mem_acquire>
		if (tx) {
    2d12:	2800      	cmp	r0, #0
    2d14:	f43f a8da 	beq.w	1ecc <ull_conn_llcp+0x7f4>
			conn->llcp_version.ack--;
    2d18:	f894 2125 	ldrb.w	r2, [r4, #293]	; 0x125
			conn->llcp_version.tx = 1U;
    2d1c:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
			conn->llcp_version.ack--;
    2d20:	3a01      	subs	r2, #1
    2d22:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2d26:	7902      	ldrb	r2, [r0, #4]
			conn->llcp_version.tx = 1U;
    2d28:	f043 0301 	orr.w	r3, r3, #1
			pdu->len =
    2d2c:	2106      	movs	r1, #6
			conn->llcp_version.tx = 1U;
    2d2e:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2d32:	f042 0203 	orr.w	r2, r2, #3
			pdu->len =
    2d36:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
    2d38:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
			pdu->ll_id = PDU_DATA_LLID_CTRL;
    2d3c:	7102      	strb	r2, [r0, #4]
			pdu->llctrl.version_ind.version_number =
    2d3e:	210b      	movs	r1, #11
			pdu->llctrl.version_ind.company_id = cid;
    2d40:	f06f 020e 	mvn.w	r2, #14
			pdu->llctrl.opcode =
    2d44:	270c      	movs	r7, #12
			pdu->llctrl.version_ind.version_number =
    2d46:	7201      	strb	r1, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
    2d48:	7242      	strb	r2, [r0, #9]
    2d4a:	2105      	movs	r1, #5
			pdu->llctrl.version_ind.sub_version_number = svn;
    2d4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
			pdu->llctrl.opcode =
    2d50:	71c7      	strb	r7, [r0, #7]
			pdu->llctrl.version_ind.company_id = cid;
    2d52:	7281      	strb	r1, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
    2d54:	72c2      	strb	r2, [r0, #11]
    2d56:	7302      	strb	r2, [r0, #12]
	if (
    2d58:	2b00      	cmp	r3, #0
    2d5a:	f000 80c3 	beq.w	2ee4 <ull_conn_llcp+0x180c>
	    !conn->llcp_enc.pause_tx &&
    2d5e:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2d62:	0797      	lsls	r7, r2, #30
    2d64:	f100 80be 	bmi.w	2ee4 <ull_conn_llcp+0x180c>
	    !conn->llcp_phy.pause_tx &&
    2d68:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2d6c:	07d1      	lsls	r1, r2, #31
    2d6e:	f100 80b9 	bmi.w	2ee4 <ull_conn_llcp+0x180c>
		if (conn->tx_head == conn->tx_data) {
    2d72:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2d76:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2d78:	bf04      	itt	eq
    2d7a:	681a      	ldreq	r2, [r3, #0]
    2d7c:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2d80:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2d84:	2a00      	cmp	r2, #0
    2d86:	f000 8218 	beq.w	31ba <ull_conn_llcp+0x1ae2>
	tx->next = conn->tx_ctrl_last->next;
    2d8a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2d8e:	681a      	ldr	r2, [r3, #0]
    2d90:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
    2d92:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
    2d94:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2d98:	6803      	ldr	r3, [r0, #0]
    2d9a:	2b00      	cmp	r3, #0
    2d9c:	f47f acf2 	bne.w	2784 <ull_conn_llcp+0x10ac>
		conn->tx_data_last = tx;
    2da0:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
			conn->procedure_expire = conn->procedure_reload;
    2da4:	e4ee      	b.n	2784 <ull_conn_llcp+0x10ac>
		start_enc_rsp_send(conn, pdu_ctrl_tx);
    2da6:	4641      	mov	r1, r8
    2da8:	4620      	mov	r0, r4
    2daa:	f00d f967 	bl	1007c <start_enc_rsp_send>
	    conn->tx_head &&
    2dae:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	if (
    2db2:	b383      	cbz	r3, 2e16 <ull_conn_llcp+0x173e>
	    !conn->llcp_enc.pause_tx &&
    2db4:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
    2db8:	0795      	lsls	r5, r2, #30
    2dba:	d42c      	bmi.n	2e16 <ull_conn_llcp+0x173e>
	    !conn->llcp_phy.pause_tx &&
    2dbc:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
    2dc0:	07d0      	lsls	r0, r2, #31
    2dc2:	d428      	bmi.n	2e16 <ull_conn_llcp+0x173e>
		if (conn->tx_head == conn->tx_data) {
    2dc4:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
    2dc8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2dca:	bf04      	itt	eq
    2dcc:	681a      	ldreq	r2, [r3, #0]
    2dce:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    2dd2:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2dd6:	2a00      	cmp	r2, #0
    2dd8:	f000 8177 	beq.w	30ca <ull_conn_llcp+0x19f2>
	tx->next = conn->tx_ctrl_last->next;
    2ddc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    2de0:	681a      	ldr	r2, [r3, #0]
    2de2:	6032      	str	r2, [r6, #0]
	conn->tx_ctrl_last->next = tx;
    2de4:	601e      	str	r6, [r3, #0]
	conn->tx_ctrl_last = tx;
    2de6:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
	if (!tx->next) {
    2dea:	6833      	ldr	r3, [r6, #0]
    2dec:	2b00      	cmp	r3, #0
    2dee:	f000 808c 	beq.w	2f0a <ull_conn_llcp+0x1832>
		conn->llcp_enc.pause_rx = 0U;
    2df2:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
    2df6:	f023 0303 	bic.w	r3, r3, #3
    2dfa:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
    2dfe:	f7ff ba0c 	b.w	221a <ull_conn_llcp+0xb42>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2e02:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
    2e04:	7235      	strb	r5, [r6, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
    2e06:	71f3      	strb	r3, [r6, #7]
		p->error_code =	conn->llcp.encryption.error_code;
    2e08:	2702      	movs	r7, #2
    2e0a:	f7ff b9dc 	b.w	21c6 <ull_conn_llcp+0xaee>
		conn->tx_data_last = tx;
    2e0e:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
    2e12:	f7ff bab6 	b.w	2382 <ull_conn_llcp+0xcaa>
		if (!conn->tx_ctrl) {
    2e16:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2e1a:	2a00      	cmp	r2, #0
    2e1c:	d1de      	bne.n	2ddc <ull_conn_llcp+0x1704>
			tx->next = conn->tx_head;
    2e1e:	6033      	str	r3, [r6, #0]
				conn->tx_ctrl = tx;
    2e20:	e9c4 666c 	strd	r6, r6, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2e24:	f8c4 61b8 	str.w	r6, [r4, #440]	; 0x1b8
    2e28:	e7df      	b.n	2dea <ull_conn_llcp+0x1712>
				(void)ll_pdu_rx_alloc();
    2e2a:	f00c f893 	bl	ef54 <ll_pdu_rx_alloc>
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2e2e:	2312      	movs	r3, #18
				rx->hdr.handle = lll->handle;
    2e30:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
				upd->status = 0U;
    2e32:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
    2e36:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
    2e3a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
    2e3e:	f8d8 0000 	ldr.w	r0, [r8]
				rx->hdr.handle = lll->handle;
    2e42:	f8a8 2006 	strh.w	r2, [r8, #6]
				upd->tx = lll->phy_tx;
    2e46:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2e4a:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
    2e4e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
    2e52:	f3c3 0302 	ubfx	r3, r3, #0, #3
    2e56:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
    2e5a:	4641      	mov	r1, r8
    2e5c:	f00c f84c 	bl	eef8 <ll_rx_put>
				ll_rx_sched();
    2e60:	f00c f854 	bl	ef0c <ll_rx_sched>
    2e64:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
    2e68:	f8b4 10ee 	ldrh.w	r1, [r4, #238]	; 0xee
    2e6c:	f3c3 0782 	ubfx	r7, r3, #2, #3
    2e70:	095b      	lsrs	r3, r3, #5
    2e72:	f7ff b962 	b.w	213a <ull_conn_llcp+0xa62>
	switch (conn->llcp_conn_param.state) {
    2e76:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
    2e7a:	f002 0207 	and.w	r2, r2, #7
    2e7e:	2a05      	cmp	r2, #5
    2e80:	f200 81d9 	bhi.w	3236 <ull_conn_llcp+0x1b5e>
    2e84:	a001      	add	r0, pc, #4	; (adr r0, 2e8c <ull_conn_llcp+0x17b4>)
    2e86:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
    2e8a:	bf00      	nop
    2e8c:	000025d9 	.word	0x000025d9
    2e90:	0000252d 	.word	0x0000252d
    2e94:	000024dd 	.word	0x000024dd
    2e98:	000016fb 	.word	0x000016fb
    2e9c:	000016fb 	.word	0x000016fb
    2ea0:	000016fb 	.word	0x000016fb
		conn->tx_data_last = tx;
    2ea4:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
    2ea8:	f7fe bf2e 	b.w	1d08 <ull_conn_llcp+0x630>
    2eac:	f8c4 81c0 	str.w	r8, [r4, #448]	; 0x1c0
		conn->procedure_expire = conn->procedure_reload;
    2eb0:	e468      	b.n	2784 <ull_conn_llcp+0x10ac>
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2eb2:	f894 019a 	ldrb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.tx_time =
    2eb6:	f8b4 71a6 	ldrh.w	r7, [r4, #422]	; 0x1a6
				conn->llcp_length.tx_octets =
    2eba:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.cache.tx_octets = 0;
    2ebe:	2300      	movs	r3, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2ec0:	f363 0002 	bfi	r0, r3, #0, #3
    2ec4:	f884 019a 	strb.w	r0, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    2ec8:	f8a4 31a4 	strh.w	r3, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    2ecc:	f8a4 71a2 	strh.w	r7, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    2ed0:	f7ff b9c5 	b.w	225e <ull_conn_llcp+0xb86>
			tx->next = conn->tx_head->next;
    2ed4:	681a      	ldr	r2, [r3, #0]
    2ed6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    2ed8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
    2eda:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
    2edc:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2ee0:	f7fe bf9f 	b.w	1e22 <ull_conn_llcp+0x74a>
		if (!conn->tx_ctrl) {
    2ee4:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
    2ee8:	2a00      	cmp	r2, #0
    2eea:	f47f af4e 	bne.w	2d8a <ull_conn_llcp+0x16b2>
			tx->next = conn->tx_head;
    2eee:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
    2ef0:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2ef4:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
    2ef8:	e74e      	b.n	2d98 <ull_conn_llcp+0x16c0>
			tx->next = conn->tx_head->next;
    2efa:	681a      	ldr	r2, [r3, #0]
    2efc:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2efe:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2f00:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2f02:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2f06:	f7ff b87e 	b.w	2006 <ull_conn_llcp+0x92e>
		conn->tx_data_last = tx;
    2f0a:	f8c4 61c0 	str.w	r6, [r4, #448]	; 0x1c0
    2f0e:	e770      	b.n	2df2 <ull_conn_llcp+0x171a>
			tx->next = conn->tx_head->next;
    2f10:	6803      	ldr	r3, [r0, #0]
    2f12:	602b      	str	r3, [r5, #0]
			conn->tx_head->next = tx;
    2f14:	6005      	str	r5, [r0, #0]
				conn->tx_ctrl = tx;
    2f16:	6828      	ldr	r0, [r5, #0]
				conn->tx_ctrl_last = tx;
    2f18:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
    2f1c:	2800      	cmp	r0, #0
    2f1e:	f47e abec 	bne.w	16fa <ull_conn_llcp+0x22>
    2f22:	f7ff b873 	b.w	200c <ull_conn_llcp+0x934>
		if (!conn->tx_ctrl) {
    2f26:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    2f2a:	2b00      	cmp	r3, #0
    2f2c:	f47f ad07 	bne.w	293e <ull_conn_llcp+0x1266>
			tx->next = conn->tx_head;
    2f30:	6008      	str	r0, [r1, #0]
				conn->tx_ctrl = tx;
    2f32:	e9c4 116c 	strd	r1, r1, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
    2f36:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
    2f3a:	e507      	b.n	294c <ull_conn_llcp+0x1274>
			tx->next = conn->tx_head->next;
    2f3c:	681a      	ldr	r2, [r3, #0]
    2f3e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2f40:	601d      	str	r5, [r3, #0]
				conn->tx_ctrl = tx;
    2f42:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    2f44:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    2f48:	f7fe bedb 	b.w	1d02 <ull_conn_llcp+0x62a>
		LL_ASSERT(rx && rx->hdr.link);
    2f4c:	4a31      	ldr	r2, [pc, #196]	; (3014 <ull_conn_llcp+0x193c>)
    2f4e:	4935      	ldr	r1, [pc, #212]	; (3024 <ull_conn_llcp+0x194c>)
    2f50:	4832      	ldr	r0, [pc, #200]	; (301c <ull_conn_llcp+0x1944>)
    2f52:	f640 5335 	movw	r3, #3381	; 0xd35
    2f56:	f016 ff4e 	bl	19df6 <printk>
    2f5a:	4040      	eors	r0, r0
    2f5c:	f380 8811 	msr	BASEPRI, r0
    2f60:	f04f 0003 	mov.w	r0, #3
    2f64:	df02      	svc	2
    2f66:	6838      	ldr	r0, [r7, #0]
    2f68:	e465      	b.n	2836 <ull_conn_llcp+0x115e>
			tx->next = conn->tx_head->next;
    2f6a:	6813      	ldr	r3, [r2, #0]
    2f6c:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
    2f6e:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
    2f70:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
    2f72:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    2f76:	f7ff ba01 	b.w	237c <ull_conn_llcp+0xca4>
			tx->next = conn->tx_head->next;
    2f7a:	681a      	ldr	r2, [r3, #0]
    2f7c:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
    2f80:	f8c3 8000 	str.w	r8, [r3]
				conn->tx_ctrl = tx;
    2f84:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
    2f88:	e9c4 886d 	strd	r8, r8, [r4, #436]	; 0x1b4
    2f8c:	f7ff bbf7 	b.w	277e <ull_conn_llcp+0x10a6>
			tx->next = conn->tx_head->next;
    2f90:	681a      	ldr	r2, [r3, #0]
    2f92:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    2f94:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl = tx;
    2f96:	6833      	ldr	r3, [r6, #0]
				conn->tx_ctrl_last = tx;
    2f98:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    2f9c:	f7ff b93a 	b.w	2214 <ull_conn_llcp+0xb3c>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    2fa0:	481f      	ldr	r0, [pc, #124]	; (3020 <ull_conn_llcp+0x1948>)
    2fa2:	f008 f92d 	bl	b200 <mem_acquire>
		if (!tx) {
    2fa6:	4601      	mov	r1, r0
    2fa8:	2800      	cmp	r0, #0
    2faa:	f43e af8f 	beq.w	1ecc <ull_conn_llcp+0x7f4>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
    2fae:	7903      	ldrb	r3, [r0, #4]
    2fb0:	f043 0303 	orr.w	r3, r3, #3
    2fb4:	710b      	strb	r3, [r1, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2fb6:	2011      	movs	r0, #17
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2fb8:	2203      	movs	r2, #3
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2fba:	230f      	movs	r3, #15
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    2fbc:	71c8      	strb	r0, [r1, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    2fbe:	714a      	strb	r2, [r1, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
    2fc0:	720b      	strb	r3, [r1, #8]
		rej->error_code = conn->llcp_conn_param.status;
    2fc2:	f894 3173 	ldrb.w	r3, [r4, #371]	; 0x173
    2fc6:	724b      	strb	r3, [r1, #9]
	ctrl_tx_pause_enqueue(conn, tx, false);
    2fc8:	4620      	mov	r0, r4
    2fca:	2200      	movs	r2, #0
    2fcc:	f00c fe88 	bl	fce0 <ctrl_tx_pause_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2fd0:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
    2fd4:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
    2fd8:	2300      	movs	r3, #0
    2fda:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    2fde:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
    2fe2:	f8ca 3000 	str.w	r3, [sl]
		return;
    2fe6:	f7fe bb83 	b.w	16f0 <ull_conn_llcp+0x18>
			if (!conn->llcp_length.cache.tx_octets) {
    2fea:	f8b4 21a4 	ldrh.w	r2, [r4, #420]	; 0x1a4
    2fee:	2a00      	cmp	r2, #0
    2ff0:	f040 80c2 	bne.w	3178 <ull_conn_llcp+0x1aa0>
				conn->llcp_length.ack = conn->llcp_length.req;
    2ff4:	f884 1199 	strb.w	r1, [r4, #409]	; 0x199
				conn->procedure_expire = 0U;
    2ff8:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
    2ffc:	e412      	b.n	2824 <ull_conn_llcp+0x114c>
			tx->next = conn->tx_head->next;
    2ffe:	681a      	ldr	r2, [r3, #0]
    3000:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    3002:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    3004:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    3008:	f7ff b903 	b.w	2212 <ull_conn_llcp+0xb3a>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    300c:	f44f 73a4 	mov.w	r3, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    3010:	461a      	mov	r2, r3
    3012:	e472      	b.n	28fa <ull_conn_llcp+0x1222>
    3014:	00020020 	.word	0x00020020
    3018:	0001fd3c 	.word	0x0001fd3c
    301c:	0001fcdc 	.word	0x0001fcdc
    3020:	200021a4 	.word	0x200021a4
    3024:	00020144 	.word	0x00020144
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    3028:	488c      	ldr	r0, [pc, #560]	; (325c <ull_conn_llcp+0x1b84>)
    302a:	f008 f8e9 	bl	b200 <mem_acquire>
	if (!tx) {
    302e:	4601      	mov	r1, r0
    3030:	2800      	cmp	r0, #0
    3032:	f43e af4b 	beq.w	1ecc <ull_conn_llcp+0x7f4>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    3036:	7903      	ldrb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    3038:	2218      	movs	r2, #24
	pdu->ll_id = PDU_DATA_LLID_CTRL;
    303a:	f043 0303 	orr.w	r3, r3, #3
    303e:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
    3040:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
    3042:	f8b4 2174 	ldrh.w	r2, [r4, #372]	; 0x174
	rsp->interval_max =
    3046:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
	rsp->latency =
    304a:	f8b4 0178 	ldrh.w	r0, [r4, #376]	; 0x178
	rsp->interval_min =
    304e:	810a      	strh	r2, [r1, #8]
	rsp->timeout =
    3050:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
	rsp->interval_max =
    3054:	814b      	strh	r3, [r1, #10]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    3056:	2310      	movs	r3, #16
	rsp->latency =
    3058:	8188      	strh	r0, [r1, #12]
	rsp->timeout =
    305a:	81ca      	strh	r2, [r1, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
    305c:	71cb      	strb	r3, [r1, #7]
	rsp->preferred_periodicity =
    305e:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
    3062:	740b      	strb	r3, [r1, #16]
	rsp->reference_conn_event_count =
    3064:	f8b4 317e 	ldrh.w	r3, [r4, #382]	; 0x17e
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    3068:	f8b4 0180 	ldrh.w	r0, [r4, #384]	; 0x180
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    306c:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
	rsp->reference_conn_event_count =
    3070:	f8a1 3011 	strh.w	r3, [r1, #17]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    3074:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
    3078:	f8a1 0013 	strh.w	r0, [r1, #19]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    307c:	f8b4 0186 	ldrh.w	r0, [r4, #390]	; 0x186
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
    3080:	f8a1 2015 	strh.w	r2, [r1, #21]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    3084:	f8b4 2188 	ldrh.w	r2, [r4, #392]	; 0x188
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
    3088:	f8a1 3017 	strh.w	r3, [r1, #23]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
    308c:	f8b4 318a 	ldrh.w	r3, [r4, #394]	; 0x18a
    3090:	f8a1 301d 	strh.w	r3, [r1, #29]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
    3094:	f8a1 0019 	strh.w	r0, [r1, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
    3098:	f8a1 201b 	strh.w	r2, [r1, #27]
	ctrl_tx_pause_enqueue(conn, tx, false);
    309c:	4620      	mov	r0, r4
    309e:	463a      	mov	r2, r7
    30a0:	f00c fe1e 	bl	fce0 <ctrl_tx_pause_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    30a4:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
	conn_upd_curr = NULL;
    30a8:	f8ca 7000 	str.w	r7, [sl]
    30ac:	f894 00e8 	ldrb.w	r0, [r4, #232]	; 0xe8
    30b0:	f894 70e9 	ldrb.w	r7, [r4, #233]	; 0xe9
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    30b4:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
}
    30b8:	f7fe bb1a 	b.w	16f0 <ull_conn_llcp+0x18>
	    (!feature_coded_phy && !feature_phy_2m)) {
    30bc:	05d2      	lsls	r2, r2, #23
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
    30be:	f44f 73a4 	mov.w	r3, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
    30c2:	f140 808d 	bpl.w	31e0 <ull_conn_llcp+0x1b08>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
    30c6:	22a8      	movs	r2, #168	; 0xa8
    30c8:	e417      	b.n	28fa <ull_conn_llcp+0x1222>
			tx->next = conn->tx_head->next;
    30ca:	681a      	ldr	r2, [r3, #0]
    30cc:	6032      	str	r2, [r6, #0]
			conn->tx_head->next = tx;
    30ce:	601e      	str	r6, [r3, #0]
				conn->tx_ctrl_last = tx;
    30d0:	e9c4 666d 	strd	r6, r6, [r4, #436]	; 0x1b4
    30d4:	e689      	b.n	2dea <ull_conn_llcp+0x1712>
		if (conn->llcp_phy.tx & BIT(1)) {
    30d6:	0711      	lsls	r1, r2, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
    30d8:	f884 31a9 	strb.w	r3, [r4, #425]	; 0x1a9
		if (conn->llcp_phy.tx & BIT(1)) {
    30dc:	f3c2 0382 	ubfx	r3, r2, #2, #3
    30e0:	d561      	bpl.n	31a6 <ull_conn_llcp+0x1ace>
			conn->llcp_phy.tx = BIT(1);
    30e2:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    30e6:	2202      	movs	r2, #2
    30e8:	f362 0384 	bfi	r3, r2, #2, #3
    30ec:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.rx & BIT(1)) {
    30f0:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    30f4:	0658      	lsls	r0, r3, #25
    30f6:	ea4f 1253 	mov.w	r2, r3, lsr #5
    30fa:	d54c      	bpl.n	3196 <ull_conn_llcp+0x1abe>
			conn->llcp_phy.rx = BIT(1);
    30fc:	2202      	movs	r2, #2
    30fe:	f362 1347 	bfi	r3, r2, #5, #3
    3102:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    3106:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    310a:	f894 c064 	ldrb.w	ip, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    310e:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3112:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3116:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
    311a:	f3c2 0182 	ubfx	r1, r2, #2, #3
    311e:	f00c 0c07 	and.w	ip, ip, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
    3122:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
    3126:	458c      	cmp	ip, r1
    3128:	bf08      	it	eq
    312a:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    312c:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
    312e:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
    3132:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
    3136:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
    313a:	bf08      	it	eq
    313c:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
    313e:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
		conn->llcp_ack -= 2U;
    3142:	1eb8      	subs	r0, r7, #2
		conn->llcp.phy_upd_ind.initiate = 1U;
    3144:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
    3148:	2206      	movs	r2, #6
		conn->llcp_ack -= 2U;
    314a:	f884 00e9 	strb.w	r0, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.initiate = 1U;
    314e:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
    3152:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
    3156:	f7fe baf9 	b.w	174c <ull_conn_llcp+0x74>
				LL_ASSERT(rx && rx->hdr.link);
    315a:	4a41      	ldr	r2, [pc, #260]	; (3260 <ull_conn_llcp+0x1b88>)
    315c:	4941      	ldr	r1, [pc, #260]	; (3264 <ull_conn_llcp+0x1b8c>)
    315e:	4842      	ldr	r0, [pc, #264]	; (3268 <ull_conn_llcp+0x1b90>)
    3160:	f640 6374 	movw	r3, #3700	; 0xe74
    3164:	f016 fe47 	bl	19df6 <printk>
    3168:	4040      	eors	r0, r0
    316a:	f380 8811 	msr	BASEPRI, r0
    316e:	f04f 0003 	mov.w	r0, #3
    3172:	df02      	svc	2
    3174:	6828      	ldr	r0, [r5, #0]
    3176:	e583      	b.n	2c80 <ull_conn_llcp+0x15a8>
				conn->llcp_length.cache.tx_octets = 0;
    3178:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    317a:	f361 0302 	bfi	r3, r1, #0, #3
				conn->llcp_length.tx_octets =
    317e:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.tx_time =
    3182:	f8b4 21a6 	ldrh.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    3186:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
    318a:	f8a4 11a4 	strh.w	r1, [r4, #420]	; 0x1a4
				conn->llcp_length.tx_time =
    318e:	f8a4 21a2 	strh.w	r2, [r4, #418]	; 0x1a2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
    3192:	f7ff bb47 	b.w	2824 <ull_conn_llcp+0x114c>
		} else if (conn->llcp_phy.rx & BIT(0)) {
    3196:	07d1      	lsls	r1, r2, #31
    3198:	d519      	bpl.n	31ce <ull_conn_llcp+0x1af6>
			conn->llcp_phy.rx = BIT(0);
    319a:	2201      	movs	r2, #1
    319c:	f362 1347 	bfi	r3, r2, #5, #3
    31a0:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    31a4:	e7af      	b.n	3106 <ull_conn_llcp+0x1a2e>
		} else if (conn->llcp_phy.tx & BIT(0)) {
    31a6:	07da      	lsls	r2, r3, #31
    31a8:	d51d      	bpl.n	31e6 <ull_conn_llcp+0x1b0e>
			conn->llcp_phy.tx = BIT(0);
    31aa:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    31ae:	2201      	movs	r2, #1
    31b0:	f362 0384 	bfi	r3, r2, #2, #3
    31b4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    31b8:	e79a      	b.n	30f0 <ull_conn_llcp+0x1a18>
			tx->next = conn->tx_head->next;
    31ba:	681a      	ldr	r2, [r3, #0]
    31bc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
    31be:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
    31c0:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
    31c4:	e5e8      	b.n	2d98 <ull_conn_llcp+0x16c0>
				conn->llcp_conn_param.interval_max;
    31c6:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
    31ca:	f7ff b9d2 	b.w	2572 <ull_conn_llcp+0xe9a>
		} else if (conn->llcp_phy.rx & BIT(2)) {
    31ce:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = BIT(2);
    31d2:	bf18      	it	ne
    31d4:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
    31d6:	f362 1347 	bfi	r3, r2, #5, #3
    31da:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    31de:	e792      	b.n	3106 <ull_conn_llcp+0x1a2e>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
    31e0:	461a      	mov	r2, r3
    31e2:	f7ff bb8a 	b.w	28fa <ull_conn_llcp+0x1222>
		} else if (conn->llcp_phy.tx & BIT(2)) {
    31e6:	f013 0304 	ands.w	r3, r3, #4
    31ea:	d00e      	beq.n	320a <ull_conn_llcp+0x1b32>
			conn->llcp_phy.tx = BIT(2);
    31ec:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
    31f0:	2204      	movs	r2, #4
    31f2:	f362 0384 	bfi	r3, r2, #2, #3
    31f6:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
    31fa:	e779      	b.n	30f0 <ull_conn_llcp+0x1a18>
			tx->next = conn->tx_head->next;
    31fc:	6803      	ldr	r3, [r0, #0]
    31fe:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
    3200:	6001      	str	r1, [r0, #0]
				conn->tx_ctrl_last = tx;
    3202:	e9c4 116d 	strd	r1, r1, [r4, #436]	; 0x1b4
    3206:	f7ff bba1 	b.w	294c <ull_conn_llcp+0x1274>
			conn->llcp_phy.tx = 0U;
    320a:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
    320e:	f363 0284 	bfi	r2, r3, #2, #3
    3212:	f884 21aa 	strb.w	r2, [r4, #426]	; 0x1aa
    3216:	e76b      	b.n	30f0 <ull_conn_llcp+0x1a18>
		LL_ASSERT(0);
    3218:	4a11      	ldr	r2, [pc, #68]	; (3260 <ull_conn_llcp+0x1b88>)
    321a:	4914      	ldr	r1, [pc, #80]	; (326c <ull_conn_llcp+0x1b94>)
    321c:	4812      	ldr	r0, [pc, #72]	; (3268 <ull_conn_llcp+0x1b90>)
    321e:	f640 535d 	movw	r3, #3421	; 0xd5d
    3222:	f016 fde8 	bl	19df6 <printk>
    3226:	4040      	eors	r0, r0
    3228:	f380 8811 	msr	BASEPRI, r0
    322c:	f04f 0003 	mov.w	r0, #3
    3230:	df02      	svc	2
		break;
    3232:	f7fe be4b 	b.w	1ecc <ull_conn_llcp+0x7f4>
		LL_ASSERT(0);
    3236:	f640 4361 	movw	r3, #3169	; 0xc61
    323a:	e556      	b.n	2cea <ull_conn_llcp+0x1612>
		LL_ASSERT(0);
    323c:	4a08      	ldr	r2, [pc, #32]	; (3260 <ull_conn_llcp+0x1b88>)
    323e:	490b      	ldr	r1, [pc, #44]	; (326c <ull_conn_llcp+0x1b94>)
    3240:	4809      	ldr	r0, [pc, #36]	; (3268 <ull_conn_llcp+0x1b90>)
    3242:	f640 535d 	movw	r3, #3421	; 0xd5d
    3246:	f016 fdd6 	bl	19df6 <printk>
    324a:	4040      	eors	r0, r0
    324c:	f380 8811 	msr	BASEPRI, r0
    3250:	f04f 0003 	mov.w	r0, #3
    3254:	df02      	svc	2
		break;
    3256:	f7fe ba79 	b.w	174c <ull_conn_llcp+0x74>
    325a:	bf00      	nop
    325c:	200021a4 	.word	0x200021a4
    3260:	00020020 	.word	0x00020020
    3264:	00020144 	.word	0x00020144
    3268:	0001fcdc 	.word	0x0001fcdc
    326c:	0001fd3c 	.word	0x0001fd3c

00003270 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    3270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
	conn = lll->hdr.parent;
    3274:	469c      	mov	ip, r3
{
    3276:	b093      	sub	sp, #76	; 0x4c
	conn = lll->hdr.parent;
    3278:	f85c 6b0c 	ldr.w	r6, [ip], #12
{
    327c:	461c      	mov	r4, r3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    327e:	6813      	ldr	r3, [r2, #0]
{
    3280:	4686      	mov	lr, r0
    3282:	460d      	mov	r5, r1

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    3284:	4660      	mov	r0, ip
    3286:	312e      	adds	r1, #46	; 0x2e
{
    3288:	4617      	mov	r7, r2
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    328a:	f104 0a08 	add.w	sl, r4, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    328e:	2203      	movs	r2, #3
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    3290:	f8d3 9000 	ldr.w	r9, [r3]
{
    3294:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    3298:	f104 081c 	add.w	r8, r4, #28
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    329c:	f018 fbc5 	bl	1ba2a <memcpy>
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    32a0:	f105 012a 	add.w	r1, r5, #42	; 0x2a
    32a4:	2204      	movs	r2, #4
    32a6:	4650      	mov	r0, sl
    32a8:	f018 fbbf 	bl	1ba2a <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    32ac:	f105 013a 	add.w	r1, r5, #58	; 0x3a
    32b0:	2205      	movs	r2, #5
    32b2:	4640      	mov	r0, r8
    32b4:	f018 fbb9 	bl	1ba2a <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    32b8:	4640      	mov	r0, r8
    32ba:	2105      	movs	r1, #5
    32bc:	f008 f96a 	bl	b594 <util_ones_count_get>
    32c0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    32c4:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    32c8:	f360 0305 	bfi	r3, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    32cc:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    32ce:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    32d2:	d90a      	bls.n	32ea <ull_slave_setup+0x7a>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    32d4:	f895 303f 	ldrb.w	r3, [r5, #63]	; 0x3f
    32d8:	f003 021f 	and.w	r2, r3, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    32dc:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    32de:	f3c3 0104 	ubfx	r1, r3, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    32e2:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    32e4:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    32e8:	d902      	bls.n	32f0 <ull_slave_setup+0x80>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    32ea:	b013      	add	sp, #76	; 0x4c
    32ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    32f0:	683a      	ldr	r2, [r7, #0]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    32f2:	f896 10dc 	ldrb.w	r1, [r6, #220]	; 0xdc
	((struct lll_adv *)ftr->param)->conn = NULL;
    32f6:	2000      	movs	r0, #0
    32f8:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    32fa:	f8b5 8034 	ldrh.w	r8, [r5, #52]	; 0x34
	lll->interval = interval;
    32fe:	f8a4 8012 	strh.w	r8, [r4, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    3302:	f895 2036 	ldrb.w	r2, [r5, #54]	; 0x36
    3306:	f895 0037 	ldrb.w	r0, [r5, #55]	; 0x37
	conn->slave.sca = pdu_adv->connect_ind.sca;
    330a:	095b      	lsrs	r3, r3, #5
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    330c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	conn->slave.sca = pdu_adv->connect_ind.sca;
    3310:	f363 0184 	bfi	r1, r3, #2, #3
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    3314:	82a2      	strh	r2, [r4, #20]
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    3316:	8e6b      	ldrh	r3, [r5, #50]	; 0x32
	conn->slave.sca = pdu_adv->connect_ind.sca;
    3318:	f886 10dc 	strb.w	r1, [r6, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    331c:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		(((lll_clock_ppm_local_get() +
    3320:	f011 fbb4 	bl	14a8c <lll_clock_ppm_local_get>
    3324:	4603      	mov	r3, r0
		   lll_clock_ppm_get(conn->slave.sca)) *
    3326:	f896 00dc 	ldrb.w	r0, [r6, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    332a:	930b      	str	r3, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    332c:	f3c0 0082 	ubfx	r0, r0, #2, #3
    3330:	f011 fbae 	bl	14a90 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    3334:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    3336:	f8df c338 	ldr.w	ip, [pc, #824]	; 3670 <ull_slave_setup+0x400>
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    333a:	f895 1031 	ldrb.w	r1, [r5, #49]	; 0x31
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    333e:	8aa2      	ldrh	r2, [r4, #20]
	conn_interval_us = interval * 1250U;
    3340:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    3344:	fa1f f888 	uxth.w	r8, r8
	conn_interval_us = interval * 1250U;
    3348:	fb0b f808 	mul.w	r8, fp, r8
		(((lll_clock_ppm_local_get() +
    334c:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    334e:	fb08 f000 	mul.w	r0, r8, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    3352:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    3356:	f200 203f 	addw	r0, r0, #575	; 0x23f
    335a:	fbac c000 	umull	ip, r0, ip, r0
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    335e:	ea4f 0c58 	mov.w	ip, r8, lsr #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    3362:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    3364:	fb0b f101 	mul.w	r1, fp, r1
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    3368:	f1ac 0c96 	sub.w	ip, ip, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    336c:	62a0      	str	r0, [r4, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    336e:	f8c4 c02c 	str.w	ip, [r4, #44]	; 0x2c
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size * 1250U;
    3372:	63e1      	str	r1, [r4, #60]	; 0x3c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    3374:	8f29      	ldrh	r1, [r5, #56]	; 0x38
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    3376:	4bb4      	ldr	r3, [pc, #720]	; (3648 <ull_slave_setup+0x3d8>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    3378:	f8ad 1036 	strh.w	r1, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    337c:	f242 7c10 	movw	ip, #10000	; 0x2710
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    3380:	b289      	uxth	r1, r1
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    3382:	fb0c 8101 	mla	r1, ip, r1, r8
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    3386:	48b1      	ldr	r0, [pc, #708]	; (364c <ull_slave_setup+0x3dc>)
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    3388:	4443      	add	r3, r8
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    338a:	f102 0c06 	add.w	ip, r2, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    338e:	3901      	subs	r1, #1
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    3390:	fbb3 f3f8 	udiv	r3, r3, r8
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    3394:	fbb1 f1f8 	udiv	r1, r1, r8
    3398:	f8a6 10c6 	strh.w	r1, [r6, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    339c:	b299      	uxth	r1, r3
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    339e:	4561      	cmp	r1, ip
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    33a0:	4440      	add	r0, r8
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    33a2:	f8a6 10d2 	strh.w	r1, [r6, #210]	; 0xd2
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    33a6:	fbb0 f0f8 	udiv	r0, r0, r8
    33aa:	f8a6 00ca 	strh.w	r0, [r6, #202]	; 0xca
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    33ae:	dd02      	ble.n	33b6 <ull_slave_setup+0x146>
			     (conn->apto_reload - (lll->latency + 6)) :
    33b0:	1a89      	subs	r1, r1, r2
    33b2:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    33b4:	b289      	uxth	r1, r1
    33b6:	f8a6 10ce 	strh.w	r1, [r6, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    33ba:	2204      	movs	r2, #4
    33bc:	4651      	mov	r1, sl
    33be:	f106 00e0 	add.w	r0, r6, #224	; 0xe0
    33c2:	f018 fb32 	bl	1ba2a <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    33c6:	7f2b      	ldrb	r3, [r5, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    33c8:	f105 0b1e 	add.w	fp, r5, #30
    33cc:	4659      	mov	r1, fp
	peer_addr_type = pdu_adv->tx_addr;
    33ce:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    33d2:	2206      	movs	r2, #6
    33d4:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    33d6:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    33da:	f018 fb26 	bl	1ba2a <memcpy>
	chan_sel = pdu_adv->chan_sel;
    33de:	7f2b      	ldrb	r3, [r5, #28]
	cc->status = 0U;
    33e0:	f44f 7280 	mov.w	r2, #256	; 0x100
    33e4:	83aa      	strh	r2, [r5, #28]
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    33e6:	f899 002a 	ldrb.w	r0, [r9, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    33ea:	f897 a012 	ldrb.w	sl, [r7, #18]
	chan_sel = pdu_adv->chan_sel;
    33ee:	f3c3 1240 	ubfx	r2, r3, #5, #1
    33f2:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
    33f6:	920b      	str	r2, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    33f8:	f010 fe00 	bl	13ffc <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    33fc:	2206      	movs	r2, #6
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    33fe:	4601      	mov	r1, r0
    3400:	2800      	cmp	r0, #0
    3402:	f040 80ef 	bne.w	35e4 <ull_slave_setup+0x374>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    3406:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    340a:	f018 fb39 	bl	1ba80 <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    340e:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    3412:	f000 80f1 	beq.w	35f8 <ull_slave_setup+0x388>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    3416:	4659      	mov	r1, fp
    3418:	4650      	mov	r0, sl
    341a:	f105 021f 	add.w	r2, r5, #31
    341e:	f010 f859 	bl	134d4 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    3422:	7fab      	ldrb	r3, [r5, #30]
    3424:	3302      	adds	r3, #2
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    3426:	a910      	add	r1, sp, #64	; 0x40
		cc->peer_addr_type += 2;
    3428:	77ab      	strb	r3, [r5, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    342a:	2206      	movs	r2, #6
    342c:	f105 0025 	add.w	r0, r5, #37	; 0x25
    3430:	f018 fafb 	bl	1ba2a <memcpy>
	cc->sca = conn->slave.sca;
    3434:	f896 30dc 	ldrb.w	r3, [r6, #220]	; 0xdc
	cc->interval = lll->interval;
    3438:	8a61      	ldrh	r1, [r4, #18]
	cc->latency = lll->latency;
    343a:	8aa2      	ldrh	r2, [r4, #20]
    343c:	86aa      	strh	r2, [r5, #52]	; 0x34
	cc->sca = conn->slave.sca;
    343e:	f3c3 0382 	ubfx	r3, r3, #2, #3
    3442:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
	cc->timeout = timeout;
    3446:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cc->interval = lll->interval;
    344a:	8669      	strh	r1, [r5, #50]	; 0x32
	cc->timeout = timeout;
    344c:	86eb      	strh	r3, [r5, #54]	; 0x36
	lll->handle = ll_conn_handle_get(conn);
    344e:	4630      	mov	r0, r6
    3450:	f00c ff68 	bl	10324 <ll_conn_handle_get>
	lll->tx_pwr_lvl = RADIO_TXP_DEFAULT;
    3454:	2300      	movs	r3, #0
	lll->handle = ll_conn_handle_get(conn);
    3456:	8220      	strh	r0, [r4, #16]
	rx->handle = lll->handle;
    3458:	80e8      	strh	r0, [r5, #6]
	lll->tx_pwr_lvl = RADIO_TXP_DEFAULT;
    345a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
		ll_rx_put(link, rx);
    345e:	980a      	ldr	r0, [sp, #40]	; 0x28
    3460:	4629      	mov	r1, r5
		rx_csa = (void *)ftr->extra;
    3462:	687d      	ldr	r5, [r7, #4]
		ll_rx_put(link, rx);
    3464:	f00b fd48 	bl	eef8 <ll_rx_put>
		rx->handle = lll->handle;
    3468:	8a23      	ldrh	r3, [r4, #16]
    346a:	80eb      	strh	r3, [r5, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    346c:	2311      	movs	r3, #17
    346e:	712b      	strb	r3, [r5, #4]
		if (chan_sel) {
    3470:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    3472:	6828      	ldr	r0, [r5, #0]
		if (chan_sel) {
    3474:	2b00      	cmp	r3, #0
    3476:	f000 80cf 	beq.w	3618 <ull_slave_setup+0x3a8>
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    347a:	f894 e009 	ldrb.w	lr, [r4, #9]
				      lll->access_addr[0];
    347e:	7a23      	ldrb	r3, [r4, #8]
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    3480:	f894 c00b 	ldrb.w	ip, [r4, #11]
				      lll->access_addr[2];
    3484:	7aa1      	ldrb	r1, [r4, #10]
			lll->data_chan_sel = 1;
    3486:	f894 2021 	ldrb.w	r2, [r4, #33]	; 0x21
			uint16_t aa_ms = ((uint16_t)lll->access_addr[3] << 8) |
    348a:	ea41 210c 	orr.w	r1, r1, ip, lsl #8
			uint16_t aa_ls = ((uint16_t)lll->access_addr[1] << 8) |
    348e:	ea43 230e 	orr.w	r3, r3, lr, lsl #8
			lll->data_chan_id = aa_ms ^ aa_ls;
    3492:	404b      	eors	r3, r1
			lll->data_chan_sel = 1;
    3494:	f042 0240 	orr.w	r2, r2, #64	; 0x40
			cs->csa = 0x01;
    3498:	2101      	movs	r1, #1
			lll->data_chan_id = aa_ms ^ aa_ls;
    349a:	8463      	strh	r3, [r4, #34]	; 0x22
			lll->data_chan_sel = 1;
    349c:	f884 2021 	strb.w	r2, [r4, #33]	; 0x21
			cs->csa = 0x01;
    34a0:	7729      	strb	r1, [r5, #28]
	ll_rx_put(link, rx);
    34a2:	4629      	mov	r1, r5
    34a4:	f00b fd28 	bl	eef8 <ll_rx_put>
	ll_rx_sched();
    34a8:	f00b fd30 	bl	ef0c <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    34ac:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
    34b0:	2101      	movs	r1, #1
    34b2:	f000 0007 	and.w	r0, r0, #7
    34b6:	f011 fa03 	bl	148c0 <lll_radio_rx_ready_delay_get>
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    34ba:	4a65      	ldr	r2, [pc, #404]	; (3650 <ull_slave_setup+0x3e0>)
	conn->evt.ticks_active_to_start = 0U;
    34bc:	2500      	movs	r5, #0
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    34be:	4682      	mov	sl, r0
	conn->evt.ticks_xtal_to_start =
    34c0:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    34c2:	f200 4052 	addw	r0, r0, #1106	; 0x452
    34c6:	fba0 0102 	umull	r0, r1, r0, r2
	conn->evt.ticks_xtal_to_start =
    34ca:	6033      	str	r3, [r6, #0]
	conn->evt.ticks_preempt_to_start =
    34cc:	e9c6 5501 	strd	r5, r5, [r6, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    34d0:	a35b      	add	r3, pc, #364	; (adr r3, 3640 <ull_slave_setup+0x3d0>)
    34d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    34d6:	f7fd fa31 	bl	93c <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    34da:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    34dc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	; 0x30
    34e0:	68fc      	ldr	r4, [r7, #12]
    34e2:	f240 4ee2 	movw	lr, #1250	; 0x4e2
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    34e6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    34ea:	f5a4 7cae 	sub.w	ip, r4, #348	; 0x15c
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    34ee:	462a      	mov	r2, r5
	conn_offset_us += ((uint64_t)win_offset + 1) * 1250U;
    34f0:	fb0e e401 	mla	r4, lr, r1, lr
	conn->evt.ticks_slot =
    34f4:	60f0      	str	r0, [r6, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    34f6:	2102      	movs	r1, #2
    34f8:	2001      	movs	r0, #1
	conn_offset_us -= EVENT_JITTER_US;
    34fa:	4464      	add	r4, ip
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    34fc:	eba8 0803 	sub.w	r8, r8, r3
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    3500:	f007 ff22 	bl	b348 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    3504:	4648      	mov	r0, r9
    3506:	f00c fa3d 	bl	f984 <ull_adv_handle_get>
    350a:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    350c:	4b51      	ldr	r3, [pc, #324]	; (3654 <ull_slave_setup+0x3e4>)
    350e:	f8cd 9000 	str.w	r9, [sp]
    3512:	b2d2      	uxtb	r2, r2
    3514:	4628      	mov	r0, r5
    3516:	2101      	movs	r1, #1
    3518:	f009 fa1e 	bl	c958 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    351c:	2801      	cmp	r0, #1
	conn_offset_us -= ready_delay_us;
    351e:	eba4 040a 	sub.w	r4, r4, sl
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3522:	f000 8085 	beq.w	3630 <ull_slave_setup+0x3c0>
	if (adv->lll.is_hdcd) {
    3526:	f899 3028 	ldrb.w	r3, [r9, #40]	; 0x28
    352a:	07db      	lsls	r3, r3, #31
    352c:	d478      	bmi.n	3620 <ull_slave_setup+0x3b0>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    352e:	4630      	mov	r0, r6
    3530:	f00c fef8 	bl	10324 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3534:	f8df b118 	ldr.w	fp, [pc, #280]	; 3650 <ull_slave_setup+0x3e0>
    3538:	fba8 890b 	umull	r8, r9, r8, fp
    353c:	a340      	add	r3, pc, #256	; (adr r3, 3640 <ull_slave_setup+0x3d0>)
    353e:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    3542:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    3544:	4649      	mov	r1, r9
    3546:	4640      	mov	r0, r8
    3548:	f7fd f9f8 	bl	93c <__aeabi_uldivmod>
				     HAL_TICKER_REMAINDER(conn_interval_us),
    354c:	4a42      	ldr	r2, [pc, #264]	; (3658 <ull_slave_setup+0x3e8>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    354e:	9606      	str	r6, [sp, #24]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3550:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
    3554:	fbaa 2302 	umull	r2, r3, sl, r2
    3558:	2107      	movs	r1, #7
    355a:	fb01 330a 	mla	r3, r1, sl, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    355e:	f44f 71a0 	mov.w	r1, #320	; 0x140
    3562:	68bf      	ldr	r7, [r7, #8]
    3564:	9108      	str	r1, [sp, #32]
    3566:	493d      	ldr	r1, [pc, #244]	; (365c <ull_slave_setup+0x3ec>)
    3568:	9107      	str	r1, [sp, #28]
    356a:	493d      	ldr	r1, [pc, #244]	; (3660 <ull_slave_setup+0x3f0>)
    356c:	9105      	str	r1, [sp, #20]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    356e:	ebb8 0002 	subs.w	r0, r8, r2
    3572:	eb69 0103 	sbc.w	r1, r9, r3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3576:	68f3      	ldr	r3, [r6, #12]
    3578:	9304      	str	r3, [sp, #16]
    357a:	2600      	movs	r6, #0
				     HAL_TICKER_REMAINDER(conn_interval_us),
    357c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    3580:	2300      	movs	r3, #0
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3582:	9603      	str	r6, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    3584:	f7fd f9da 	bl	93c <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3588:	a32d      	add	r3, pc, #180	; (adr r3, 3640 <ull_slave_setup+0x3d0>)
    358a:	e9d3 2300 	ldrd	r2, r3, [r3]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    358e:	4684      	mov	ip, r0
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3590:	fba4 010b 	umull	r0, r1, r4, fp
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    3594:	e9cd ac01 	strd	sl, ip, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    3598:	f7fd f9d0 	bl	93c <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    359c:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    359e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    35a2:	b2ed      	uxtb	r5, r5
    35a4:	3f31      	subs	r7, #49	; 0x31
    35a6:	463b      	mov	r3, r7
    35a8:	9000      	str	r0, [sp, #0]
    35aa:	462a      	mov	r2, r5
    35ac:	4630      	mov	r0, r6
    35ae:	2101      	movs	r1, #1
    35b0:	f009 f966 	bl	c880 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    35b4:	f030 0302 	bics.w	r3, r0, #2
    35b8:	d00c      	beq.n	35d4 <ull_slave_setup+0x364>
    35ba:	4a2a      	ldr	r2, [pc, #168]	; (3664 <ull_slave_setup+0x3f4>)
    35bc:	492a      	ldr	r1, [pc, #168]	; (3668 <ull_slave_setup+0x3f8>)
    35be:	482b      	ldr	r0, [pc, #172]	; (366c <ull_slave_setup+0x3fc>)
    35c0:	f240 1341 	movw	r3, #321	; 0x141
    35c4:	f016 fc17 	bl	19df6 <printk>
    35c8:	4040      	eors	r0, r0
    35ca:	f380 8811 	msr	BASEPRI, r0
    35ce:	f04f 0003 	mov.w	r0, #3
    35d2:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    35d4:	2201      	movs	r2, #1
    35d6:	4610      	mov	r0, r2
    35d8:	2102      	movs	r1, #2
    35da:	f007 feb5 	bl	b348 <mayfly_enable>
}
    35de:	b013      	add	sp, #76	; 0x4c
    35e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    35e4:	f105 0124 	add.w	r1, r5, #36	; 0x24
    35e8:	f105 002b 	add.w	r0, r5, #43	; 0x2b
    35ec:	f018 fa1d 	bl	1ba2a <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    35f0:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    35f4:	f47f af0f 	bne.w	3416 <ull_slave_setup+0x1a6>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    35f8:	2206      	movs	r2, #6
    35fa:	2100      	movs	r1, #0
    35fc:	f105 0025 	add.w	r0, r5, #37	; 0x25
    3600:	f018 fa3e 	bl	1ba80 <memset>
		cc->peer_addr_type = peer_addr_type;
    3604:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    3608:	77ab      	strb	r3, [r5, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    360a:	a910      	add	r1, sp, #64	; 0x40
    360c:	2206      	movs	r2, #6
    360e:	f105 001f 	add.w	r0, r5, #31
    3612:	f018 fa0a 	bl	1ba2a <memcpy>
    3616:	e70d      	b.n	3434 <ull_slave_setup+0x1c4>
			cs->csa = 0x00;
    3618:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    361c:	772b      	strb	r3, [r5, #28]
    361e:	e740      	b.n	34a2 <ull_slave_setup+0x232>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    3620:	2300      	movs	r3, #0
    3622:	2201      	movs	r2, #1
    3624:	9300      	str	r3, [sp, #0]
    3626:	4618      	mov	r0, r3
    3628:	4611      	mov	r1, r2
    362a:	f009 f995 	bl	c958 <ticker_stop>
    362e:	e77e      	b.n	352e <ull_slave_setup+0x2be>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    3630:	f00b fd1e 	bl	f070 <ull_disable_mark_get>
    3634:	4581      	cmp	r9, r0
    3636:	f43f af76 	beq.w	3526 <ull_slave_setup+0x2b6>
    363a:	f00f fc7d 	bl	12f38 <ticker_op_stop_adv_cb.part.0>
    363e:	e772      	b.n	3526 <ull_slave_setup+0x2b6>
    3640:	1afd498d 	.word	0x1afd498d
    3644:	00000007 	.word	0x00000007
    3648:	01c9c37f 	.word	0x01c9c37f
    364c:	026259ff 	.word	0x026259ff
    3650:	3b9aca00 	.word	0x3b9aca00
    3654:	00012f65 	.word	0x00012f65
    3658:	1afd498d 	.word	0x1afd498d
    365c:	00012f09 	.word	0x00012f09
    3660:	00012f81 	.word	0x00012f81
    3664:	00020214 	.word	0x00020214
    3668:	00020158 	.word	0x00020158
    366c:	0001fcdc 	.word	0x0001fcdc
    3670:	431bde83 	.word	0x431bde83

00003674 <bme680_power_on>:
/*
 * @brief Turn the BME680 sensor on.
 *
 * @return 0 on success or negative error value.
 */
int bme680_power_on() {
    3674:	b508      	push	{r3, lr}
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    3676:	4807      	ldr	r0, [pc, #28]	; (3694 <bme680_power_on+0x20>)
    3678:	f015 f862 	bl	18740 <z_impl_device_get_binding>
    // GPIO Controller 0
    const struct device *gpio_0;
    const char *dev_gpio0_label =
            DT_LABEL(DT_INST(0, nordic_nrf_gpio));
    gpio_0 = device_get_binding(dev_gpio0_label);
    if (gpio_0 == NULL) {
    367c:	b130      	cbz	r0, 368c <bme680_power_on+0x18>
        return -EINVAL;
    }
    LOG_INF("Bound device %s.\n", dev_gpio0_label);
    gpio_pin_t a0 = 4;
    uint32_t flags = GPIO_OUTPUT_HIGH;
    int return_code = gpio_pin_configure(gpio_0, a0, flags);
    367e:	f44f 6120 	mov.w	r1, #2560	; 0xa00
    3682:	f016 fa97 	bl	19bb4 <gpio_pin_configure.constprop.0>
    if (return_code < 0) {
    3686:	ea00 70e0 	and.w	r0, r0, r0, asr #31
        LOG_ERR("Failed to configure pins for %s device.\n", dev_gpio0_label);
        return return_code;
    }
    LOG_INF("Set pin %d on device %s.\n", a0, dev_gpio0_label);
    return 0;
}
    368a:	bd08      	pop	{r3, pc}
        return -EINVAL;
    368c:	f06f 0015 	mvn.w	r0, #21
    3690:	e7fb      	b.n	368a <bme680_power_on+0x16>
    3692:	bf00      	nop
    3694:	00020958 	.word	0x00020958

00003698 <bme680_power_off>:
/*
 * @brief Save power by turning the BME680 sensor off.
 *
 * @return 0 on success or negative error value.
 */
int bme680_power_off(){
    3698:	b508      	push	{r3, lr}
    369a:	4807      	ldr	r0, [pc, #28]	; (36b8 <bme680_power_off+0x20>)
    369c:	f015 f850 	bl	18740 <z_impl_device_get_binding>
    const struct device *gpio_0;
    const char *dev_gpio0_label =
            DT_LABEL(DT_INST(0, nordic_nrf_gpio));
    gpio_0 = device_get_binding(dev_gpio0_label);
    if (gpio_0 == NULL) {
    36a0:	b130      	cbz	r0, 36b0 <bme680_power_off+0x18>
        return -EINVAL;
    }
    LOG_INF("Bound device %s.\n", dev_gpio0_label);
    gpio_pin_t a0 = 4;
    uint32_t flags = GPIO_INPUT | GPIO_PULL_DOWN;
    int return_code = gpio_pin_configure(gpio_0, a0, flags);
    36a2:	f44f 7190 	mov.w	r1, #288	; 0x120
    36a6:	f016 fa85 	bl	19bb4 <gpio_pin_configure.constprop.0>
    if (return_code < 0) {
    36aa:	ea00 70e0 	and.w	r0, r0, r0, asr #31
        LOG_ERR("Failed to configure pins for %s device.\n", dev_gpio0_label);
        return return_code;
    }
    LOG_INF("Set pin %d on device %s.\n", a0, dev_gpio0_label);
    return 0;
}
    36ae:	bd08      	pop	{r3, pc}
        return -EINVAL;
    36b0:	f06f 0015 	mvn.w	r0, #21
    36b4:	e7fb      	b.n	36ae <bme680_power_off+0x16>
    36b6:	bf00      	nop
    36b8:	00020958 	.word	0x00020958

000036bc <bind_dev_bme680>:
/*
 * @brief Bind BME680 sensor to device struct
 *
 * @return -EINVAL if label is not found or can't be used or 0 on success.
 */
int bind_dev_bme680(){
    36bc:	b508      	push	{r3, lr}
    36be:	4805      	ldr	r0, [pc, #20]	; (36d4 <bind_dev_bme680+0x18>)
    36c0:	f015 f83e 	bl	18740 <z_impl_device_get_binding>
    const char *dev_bme680_label =
            DT_LABEL(DT_INST(0, bosch_bme680));
    dev_bme680 = device_get_binding(dev_bme680_label);
    36c4:	4b04      	ldr	r3, [pc, #16]	; (36d8 <bind_dev_bme680+0x1c>)
    if (dev_bme680 == NULL) {
    36c6:	2800      	cmp	r0, #0
    dev_bme680 = device_get_binding(dev_bme680_label);
    36c8:	6018      	str	r0, [r3, #0]
        LOG_ERR("Failed to bind %s device.\n", dev_bme680_label);
        return -EINVAL;
    }
    LOG_INF("Bound device %s\n", dev_bme680->name);
    return 0;
}
    36ca:	bf0c      	ite	eq
    36cc:	f06f 0015 	mvneq.w	r0, #21
    36d0:	2000      	movne	r0, #0
    36d2:	bd08      	pop	{r3, pc}
    36d4:	0002095f 	.word	0x0002095f
    36d8:	200013e8 	.word	0x200013e8

000036dc <sensor_val_arr_to_int>:
 * @param lhs The integer for the left-hand side of the decimal point.
 * @param rhs The integer for the right-hand side of the decimal point.
 * @param places The number of decimal places required.
 */
static int sensor_val_arr_to_int(int lhs, int rhs, int places)
{
    36dc:	b5f0      	push	{r4, r5, r6, r7, lr}
    int pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000};
    36de:	4e14      	ldr	r6, [pc, #80]	; (3730 <sensor_val_arr_to_int+0x54>)
{
    36e0:	4614      	mov	r4, r2
    36e2:	4684      	mov	ip, r0
    36e4:	460f      	mov	r7, r1
    int pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000};
    36e6:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    36e8:	b08b      	sub	sp, #44	; 0x2c
    int pow10[] = {1, 10, 100, 1000, 10000, 100000, 1000000};
    36ea:	ad03      	add	r5, sp, #12
    36ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    36ee:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    36f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    lhs *= pow10[places];
    36f6:	ab0a      	add	r3, sp, #40	; 0x28
    36f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
    char rhs_char[7];
    snprintf(rhs_char, sizeof(rhs_char), "%06d", rhs);
    36fc:	4a0d      	ldr	r2, [pc, #52]	; (3734 <sensor_val_arr_to_int+0x58>)
    lhs *= pow10[places];
    36fe:	f853 5c1c 	ldr.w	r5, [r3, #-28]
    snprintf(rhs_char, sizeof(rhs_char), "%06d", rhs);
    3702:	2107      	movs	r1, #7
    3704:	463b      	mov	r3, r7
    3706:	a801      	add	r0, sp, #4
    lhs *= pow10[places];
    3708:	fb05 f50c 	mul.w	r5, r5, ip
    snprintf(rhs_char, sizeof(rhs_char), "%06d", rhs);
    370c:	f002 f960 	bl	59d0 <snprintf>
    int p = places - 1;
    3710:	1e62      	subs	r2, r4, #1
    for (int i=0; i<places; i++)
    3712:	ab01      	add	r3, sp, #4
    3714:	ac03      	add	r4, sp, #12
    {
        lhs += (rhs_char[i] - 48) * pow10[p]; // ascii[48] = '0'
    3716:	f813 1b01 	ldrb.w	r1, [r3], #1
    371a:	f854 0022 	ldr.w	r0, [r4, r2, lsl #2]
    371e:	3930      	subs	r1, #48	; 0x30
    for (int i=0; i<places; i++)
    3720:	3a01      	subs	r2, #1
        lhs += (rhs_char[i] - 48) * pow10[p]; // ascii[48] = '0'
    3722:	fb00 5501 	mla	r5, r0, r1, r5
    for (int i=0; i<places; i++)
    3726:	d2f6      	bcs.n	3716 <sensor_val_arr_to_int+0x3a>
        p--;
    }
    return lhs;
}
    3728:	4628      	mov	r0, r5
    372a:	b00b      	add	sp, #44	; 0x2c
    372c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    372e:	bf00      	nop
    3730:	0001f620 	.word	0x0001f620
    3734:	00020966 	.word	0x00020966

00003738 <bt_ready>:
    return return_code;
}

// BT Enable event callback function.
void bt_ready(int err)
{
    3738:	b570      	push	{r4, r5, r6, lr}
    if (err) {
    373a:	4606      	mov	r6, r0
{
    373c:	b088      	sub	sp, #32
    if (err) {
    373e:	b988      	cbnz	r0, 3764 <bt_ready+0x2c>
        return_code = settings_load();
        if (return_code != 0)
            LOG_ERR("BT settings load failed.");
    }

    return_code = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad,
    3740:	4d09      	ldr	r5, [pc, #36]	; (3768 <bt_ready+0x30>)
    return_code = bt_gatt_service_register(&primary_svc);
    3742:	480a      	ldr	r0, [pc, #40]	; (376c <bt_ready+0x34>)
    3744:	f006 f8c2 	bl	98cc <bt_gatt_service_register>
        return_code = settings_load();
    3748:	f016 ff05 	bl	1a556 <settings_load>
    return_code = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad,
    374c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    374e:	ac03      	add	r4, sp, #12
    3750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3752:	682b      	ldr	r3, [r5, #0]
    3754:	6023      	str	r3, [r4, #0]
    3756:	4906      	ldr	r1, [pc, #24]	; (3770 <bt_ready+0x38>)
    3758:	9600      	str	r6, [sp, #0]
    375a:	4633      	mov	r3, r6
    375c:	2203      	movs	r2, #3
    375e:	a803      	add	r0, sp, #12
    3760:	f003 fee0 	bl	7524 <bt_le_adv_start>
        LOG_ERR("Advertising failed to start (err %d)\n", return_code);
        return;
    }

    LOG_INF("Advertising successfully started.\n");
}
    3764:	b008      	add	sp, #32
    3766:	bd70      	pop	{r4, r5, r6, pc}
    3768:	0001f63c 	.word	0x0001f63c
    376c:	200004d4 	.word	0x200004d4
    3770:	0001f700 	.word	0x0001f700

00003774 <bt_gatt_notify_readings>:

int bt_gatt_notify_readings() {
    3774:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int return_code = 0;
    // Test is true for uninitialized BME680 sensor.
    while(T_val[0] == 0U && H_val[0] == 0U && P_val[0] == 0U && G_val[0] == 0U) {
    3778:	f8df 8104 	ldr.w	r8, [pc, #260]	; 3880 <bt_gatt_notify_readings+0x10c>
    377c:	4f3e      	ldr	r7, [pc, #248]	; (3878 <bt_gatt_notify_readings+0x104>)
    377e:	4e3f      	ldr	r6, [pc, #252]	; (387c <bt_gatt_notify_readings+0x108>)
int bt_gatt_notify_readings() {
    3780:	b08f      	sub	sp, #60	; 0x3c
    int return_code = 0;
    3782:	2400      	movs	r4, #0
    while(T_val[0] == 0U && H_val[0] == 0U && P_val[0] == 0U && G_val[0] == 0U) {
    3784:	683a      	ldr	r2, [r7, #0]
    3786:	f8d8 3000 	ldr.w	r3, [r8]
    378a:	f8df 9120 	ldr.w	r9, [pc, #288]	; 38ac <bt_gatt_notify_readings+0x138>
    378e:	4313      	orrs	r3, r2
    3790:	6832      	ldr	r2, [r6, #0]
    3792:	4313      	orrs	r3, r2
    3794:	f8d9 2000 	ldr.w	r2, [r9]
    3798:	4313      	orrs	r3, r2
    379a:	d01d      	beq.n	37d8 <bt_gatt_notify_readings+0x64>
        return_code = update_sensor_data();
        k_sleep(K_MSEC(25));
    }

    if (return_code < 0) {
    379c:	2c00      	cmp	r4, #0
    379e:	db17      	blt.n	37d0 <bt_gatt_notify_readings+0x5c>
        LOG_ERR("Update sensor data failed (error: %d).\n", return_code);
        return return_code;
    }

    bt_gatt_notify(NULL, &primary_attrs[2], T_val, sizeof(T_val));
    37a0:	4937      	ldr	r1, [pc, #220]	; (3880 <bt_gatt_notify_readings+0x10c>)
    37a2:	4838      	ldr	r0, [pc, #224]	; (3884 <bt_gatt_notify_readings+0x110>)
    37a4:	f016 fa5d 	bl	19c62 <bt_gatt_notify.constprop.0>
    bt_gatt_notify(NULL, &primary_attrs[5], H_val, sizeof(H_val));
    37a8:	4933      	ldr	r1, [pc, #204]	; (3878 <bt_gatt_notify_readings+0x104>)
    37aa:	4837      	ldr	r0, [pc, #220]	; (3888 <bt_gatt_notify_readings+0x114>)
    37ac:	f016 fa59 	bl	19c62 <bt_gatt_notify.constprop.0>
    bt_gatt_notify(NULL, &primary_attrs[8], P_val, sizeof(P_val));
    37b0:	4932      	ldr	r1, [pc, #200]	; (387c <bt_gatt_notify_readings+0x108>)
    37b2:	4836      	ldr	r0, [pc, #216]	; (388c <bt_gatt_notify_readings+0x118>)
    37b4:	f016 fa55 	bl	19c62 <bt_gatt_notify.constprop.0>
    bt_gatt_notify(NULL, &primary_attrs[11], G_val, sizeof(G_val));
    37b8:	4649      	mov	r1, r9
    37ba:	4835      	ldr	r0, [pc, #212]	; (3890 <bt_gatt_notify_readings+0x11c>)
    37bc:	f016 fa51 	bl	19c62 <bt_gatt_notify.constprop.0>
    bt_gatt_notify(NULL, &primary_attrs[16], B_val, sizeof(B_val));
    37c0:	4934      	ldr	r1, [pc, #208]	; (3894 <bt_gatt_notify_readings+0x120>)
    37c2:	4835      	ldr	r0, [pc, #212]	; (3898 <bt_gatt_notify_readings+0x124>)
    37c4:	f016 fa4d 	bl	19c62 <bt_gatt_notify.constprop.0>
    bt_gatt_notify(NULL, &primary_attrs[20], A_val, sizeof(A_val));
    37c8:	4934      	ldr	r1, [pc, #208]	; (389c <bt_gatt_notify_readings+0x128>)
    37ca:	4835      	ldr	r0, [pc, #212]	; (38a0 <bt_gatt_notify_readings+0x12c>)
    37cc:	f016 fa49 	bl	19c62 <bt_gatt_notify.constprop.0>

    return return_code;
    37d0:	4620      	mov	r0, r4
    37d2:	b00f      	add	sp, #60	; 0x3c
    37d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return_code = sensor_sample_fetch(dev_bme680);
    37d8:	4d32      	ldr	r5, [pc, #200]	; (38a4 <bt_gatt_notify_readings+0x130>)
    battery = read_battery();
    37da:	a808      	add	r0, sp, #32
    37dc:	f000 f8ac 	bl	3938 <read_battery>
    return_code = sensor_sample_fetch(dev_bme680);
    37e0:	6828      	ldr	r0, [r5, #0]
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    37e2:	6883      	ldr	r3, [r0, #8]
    37e4:	2138      	movs	r1, #56	; 0x38
    37e6:	68db      	ldr	r3, [r3, #12]
    37e8:	4798      	blx	r3
    if (return_code < 0) {
    37ea:	1e04      	subs	r4, r0, #0
    37ec:	db3d      	blt.n	386a <bt_gatt_notify_readings+0xf6>
    temp.val1 += temp_calib.val1;
    37ee:	4a2e      	ldr	r2, [pc, #184]	; (38a8 <bt_gatt_notify_readings+0x134>)
    37f0:	9b00      	ldr	r3, [sp, #0]
    37f2:	6811      	ldr	r1, [r2, #0]
    temp.val2 += temp_calib.val2;
    37f4:	6852      	ldr	r2, [r2, #4]
    return_code = sensor_channel_get(dev_bme680, SENSOR_CHAN_AMBIENT_TEMP,
    37f6:	6828      	ldr	r0, [r5, #0]
    temp.val1 += temp_calib.val1;
    37f8:	440b      	add	r3, r1
    37fa:	9300      	str	r3, [sp, #0]
    temp.val2 += temp_calib.val2;
    37fc:	9b01      	ldr	r3, [sp, #4]
    return_code = sensor_channel_get(dev_bme680, SENSOR_CHAN_AMBIENT_TEMP,
    37fe:	210d      	movs	r1, #13
    temp.val2 += temp_calib.val2;
    3800:	4413      	add	r3, r2
    return_code = sensor_channel_get(dev_bme680, SENSOR_CHAN_AMBIENT_TEMP,
    3802:	466a      	mov	r2, sp
    temp.val2 += temp_calib.val2;
    3804:	9301      	str	r3, [sp, #4]
    return_code = sensor_channel_get(dev_bme680, SENSOR_CHAN_AMBIENT_TEMP,
    3806:	f016 f9e2 	bl	19bce <sensor_channel_get>
    if (return_code < 0) {
    380a:	1e04      	subs	r4, r0, #0
    380c:	db2d      	blt.n	386a <bt_gatt_notify_readings+0xf6>
    return_code = sensor_channel_get(dev_bme680, SENSOR_CHAN_HUMIDITY,
    380e:	6828      	ldr	r0, [r5, #0]
    3810:	aa04      	add	r2, sp, #16
    3812:	2110      	movs	r1, #16
    3814:	f016 f9db 	bl	19bce <sensor_channel_get>
    if (return_code < 0) {
    3818:	1e04      	subs	r4, r0, #0
    381a:	db26      	blt.n	386a <bt_gatt_notify_readings+0xf6>
    return_code = sensor_channel_get(dev_bme680, SENSOR_CHAN_PRESS,
    381c:	6828      	ldr	r0, [r5, #0]
    381e:	aa02      	add	r2, sp, #8
    3820:	210e      	movs	r1, #14
    3822:	f016 f9d4 	bl	19bce <sensor_channel_get>
    if (return_code < 0) {
    3826:	1e04      	subs	r4, r0, #0
    3828:	db1f      	blt.n	386a <bt_gatt_notify_readings+0xf6>
    return_code = sensor_channel_get(dev_bme680, SENSOR_CHAN_GAS_RES,
    382a:	6828      	ldr	r0, [r5, #0]
    382c:	aa06      	add	r2, sp, #24
    382e:	211d      	movs	r1, #29
    3830:	f016 f9cd 	bl	19bce <sensor_channel_get>
    if (return_code < 0) {
    3834:	1e04      	subs	r4, r0, #0
    3836:	db18      	blt.n	386a <bt_gatt_notify_readings+0xf6>
    T_val[0] = sensor_val_arr_to_int(temp.val1, temp.val2, 2);
    3838:	e9dd 0100 	ldrd	r0, r1, [sp]
    383c:	2202      	movs	r2, #2
    383e:	f7ff ff4d 	bl	36dc <sensor_val_arr_to_int>
    H_val[0] = sensor_val_arr_to_int(humidity.val1, humidity.val2, 2);
    3842:	2202      	movs	r2, #2
    T_val[0] = sensor_val_arr_to_int(temp.val1, temp.val2, 2);
    3844:	f8c8 0000 	str.w	r0, [r8]
    H_val[0] = sensor_val_arr_to_int(humidity.val1, humidity.val2, 2);
    3848:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    384c:	f7ff ff46 	bl	36dc <sensor_val_arr_to_int>
    P_val[0] = sensor_val_arr_to_int(press.val1, press.val2, 4);
    3850:	2204      	movs	r2, #4
    H_val[0] = sensor_val_arr_to_int(humidity.val1, humidity.val2, 2);
    3852:	6038      	str	r0, [r7, #0]
    P_val[0] = sensor_val_arr_to_int(press.val1, press.val2, 4);
    3854:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
    3858:	f7ff ff40 	bl	36dc <sensor_val_arr_to_int>
    G_val[0] = gas_ohms.val1;
    385c:	9b06      	ldr	r3, [sp, #24]
    385e:	f8c9 3000 	str.w	r3, [r9]
    B_val[0] = battery.millivolts;
    3862:	4b0c      	ldr	r3, [pc, #48]	; (3894 <bt_gatt_notify_readings+0x120>)
    3864:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    P_val[0] = sensor_val_arr_to_int(press.val1, press.val2, 4);
    3866:	6030      	str	r0, [r6, #0]
    B_val[0] = battery.millivolts;
    3868:	601a      	str	r2, [r3, #0]
	return z_impl_k_sleep(timeout);
    386a:	2100      	movs	r1, #0
    386c:	f44f 704d 	mov.w	r0, #820	; 0x334
    3870:	f015 fd68 	bl	19344 <z_impl_k_sleep>
    3874:	e786      	b.n	3784 <bt_gatt_notify_readings+0x10>
    3876:	bf00      	nop
    3878:	200013f8 	.word	0x200013f8
    387c:	200013fc 	.word	0x200013fc
    3880:	20001400 	.word	0x20001400
    3884:	2000031c 	.word	0x2000031c
    3888:	20000358 	.word	0x20000358
    388c:	20000394 	.word	0x20000394
    3890:	200003d0 	.word	0x200003d0
    3894:	200013f0 	.word	0x200013f0
    3898:	20000434 	.word	0x20000434
    389c:	200013ec 	.word	0x200013ec
    38a0:	20000484 	.word	0x20000484
    38a4:	200013e8 	.word	0x200013e8
    38a8:	0001f6f8 	.word	0x0001f6f8
    38ac:	200013f4 	.word	0x200013f4

000038b0 <sleep_now>:

int loop_counter = 0;
int loop_counter_limit = 2880;
void sleep_now(){
    LOG_INF("Going to sleep.");
    loop_counter = loop_counter_limit;
    38b0:	4b02      	ldr	r3, [pc, #8]	; (38bc <sleep_now+0xc>)
    38b2:	681a      	ldr	r2, [r3, #0]
    38b4:	4b02      	ldr	r3, [pc, #8]	; (38c0 <sleep_now+0x10>)
    38b6:	601a      	str	r2, [r3, #0]
}
    38b8:	4770      	bx	lr
    38ba:	bf00      	nop
    38bc:	200004e0 	.word	0x200004e0
    38c0:	20001404 	.word	0x20001404

000038c4 <main>:

void main(void)
{
    38c4:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_uptime_ticks();
    38c6:	f01b fbda 	bl	1f07e <z_impl_k_uptime_ticks>
    uint32_t now = k_uptime_get_32();

    int return_code;
    return_code = bind_dev_bme680();
    38ca:	f7ff fef7 	bl	36bc <bind_dev_bme680>
    if (return_code != 0) {
    38ce:	bb48      	cbnz	r0, 3924 <main+0x60>
        LOG_ERR("Failed to bind BME680 (error %d).", return_code);
        return;
    }

    bt_gatt_notify_readings(); // Loads sensor reading into BT structs.
    38d0:	f7ff ff50 	bl	3774 <bt_gatt_notify_readings>

    // Setup BLE
    return_code = bt_enable(bt_ready);
    38d4:	4814      	ldr	r0, [pc, #80]	; (3928 <main+0x64>)
    38d6:	f003 fbab 	bl	7030 <bt_enable>
    if (return_code) {
    38da:	bb18      	cbnz	r0, 3924 <main+0x60>
        LOG_ERR("Bluetooth enable failed (return code %d)\n", return_code);
        return;
    }

    bt_conn_cb_register(&conn_callbacks);
    38dc:	4813      	ldr	r0, [pc, #76]	; (392c <main+0x68>)

    while (loop_counter < loop_counter_limit) {
    38de:	4c14      	ldr	r4, [pc, #80]	; (3930 <main+0x6c>)
    38e0:	4d14      	ldr	r5, [pc, #80]	; (3934 <main+0x70>)
    bt_conn_cb_register(&conn_callbacks);
    38e2:	f004 f9d3 	bl	7c8c <bt_conn_cb_register>
    while (loop_counter < loop_counter_limit) {
    38e6:	6822      	ldr	r2, [r4, #0]
    38e8:	682b      	ldr	r3, [r5, #0]
    38ea:	429a      	cmp	r2, r3
    38ec:	db0d      	blt.n	390a <main+0x46>
        k_yield();
        bt_gatt_notify_readings();
        loop_counter++;
    }

    return_code = bme680_power_off();
    38ee:	f7ff fed3 	bl	3698 <bme680_power_off>
    if (return_code == 0){
        LOG_INF("BME680 power off.\n");
    }
    return_code = bt_le_adv_stop();
    38f2:	f003 fe25 	bl	7540 <bt_le_adv_stop>
	return z_impl_k_sleep(timeout);
    38f6:	f04f 70e1 	mov.w	r0, #29491200	; 0x1c20000
    38fa:	2100      	movs	r1, #0
    38fc:	f015 fd22 	bl	19344 <z_impl_k_sleep>

    LOG_INF("Elapsed time %d ms.", (k_uptime_get_32() - now));

    k_sleep(K_MINUTES(15));
    sys_reboot(SYS_REBOOT_COLD);
}
    3900:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    sys_reboot(SYS_REBOOT_COLD);
    3904:	2001      	movs	r0, #1
    3906:	f001 b90f 	b.w	4b28 <sys_reboot>
    390a:	2100      	movs	r1, #0
    390c:	f44f 70c5 	mov.w	r0, #394	; 0x18a
    3910:	f015 fd18 	bl	19344 <z_impl_k_sleep>
	z_impl_k_yield();
    3914:	f015 fcca 	bl	192ac <z_impl_k_yield>
        bt_gatt_notify_readings();
    3918:	f7ff ff2c 	bl	3774 <bt_gatt_notify_readings>
        loop_counter++;
    391c:	6823      	ldr	r3, [r4, #0]
    391e:	3301      	adds	r3, #1
    3920:	6023      	str	r3, [r4, #0]
    3922:	e7e0      	b.n	38e6 <main+0x22>
}
    3924:	bd38      	pop	{r3, r4, r5, pc}
    3926:	bf00      	nop
    3928:	00003739 	.word	0x00003739
    392c:	200002d8 	.word	0x200002d8
    3930:	20001404 	.word	0x20001404
    3934:	200004e0 	.word	0x200004e0

00003938 <read_battery>:


#include "vbatt.h"
LOG_MODULE_REGISTER(vbatt);

struct adc_results read_battery(){
    3938:	b570      	push	{r4, r5, r6, lr}
    struct divider_data dd;
    struct adc_results results = {0, 0, 0,
    393a:	4d53      	ldr	r5, [pc, #332]	; (3a88 <read_battery+0x150>)
struct adc_results read_battery(){
    393c:	4606      	mov	r6, r0
    struct adc_results results = {0, 0, 0,
    393e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
struct adc_results read_battery(){
    3940:	b094      	sub	sp, #80	; 0x50
    struct adc_results results = {0, 0, 0,
    3942:	ac04      	add	r4, sp, #16
    3944:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3946:	e895 0003 	ldmia.w	r5, {r0, r1}
    394a:	e884 0003 	stmia.w	r4, {r0, r1}
    394e:	484f      	ldr	r0, [pc, #316]	; (3a8c <read_battery+0x154>)
    3950:	f014 fef6 	bl	18740 <z_impl_device_get_binding>
            0, "0.0"};
    int return_code;

    LOG_INF("%s status: %s\n", VDIV_LABEL, VDIV_STATUS);

    dd.adc = device_get_binding(VDIV_ADC_LABEL);
    3954:	900a      	str	r0, [sp, #40]	; 0x28
    if (dd.adc == NULL) {
    3956:	b950      	cbnz	r0, 396e <read_battery+0x36>
        LOG_ERR("Unable to bind %s adc device.", VDIV_LABEL);
        return results;
    3958:	ad04      	add	r5, sp, #16
    395a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    395c:	4634      	mov	r4, r6
    395e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3960:	e895 0003 	ldmia.w	r5, {r0, r1}
    3964:	e884 0003 	stmia.w	r4, {r0, r1}
            NRF52840_ADC_GAIN_RATIO_1_6,
            results.res_bits,
            results.millivolts);
    LOG_INF("Battery voltage: %s\n", log_strdup(results.volts));
    return results;
    3968:	4630      	mov	r0, r6
    396a:	b014      	add	sp, #80	; 0x50
    396c:	bd70      	pop	{r4, r5, r6, pc}
    396e:	4848      	ldr	r0, [pc, #288]	; (3a90 <read_battery+0x158>)
    3970:	f014 fee6 	bl	18740 <z_impl_device_get_binding>
    dd.gpio = device_get_binding(VDIV_GPIO_LABEL);
    3974:	900b      	str	r0, [sp, #44]	; 0x2c
    if (dd.gpio == NULL) {
    3976:	2800      	cmp	r0, #0
    3978:	d0ee      	beq.n	3958 <read_battery+0x20>
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
    397a:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
    397c:	6883      	ldr	r3, [r0, #8]
    397e:	f44f 52b0 	mov.w	r2, #5632	; 0x1600
    3982:	681b      	ldr	r3, [r3, #0]
    3984:	211d      	movs	r1, #29
    3986:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
    3988:	2800      	cmp	r0, #0
    398a:	d175      	bne.n	3a78 <read_battery+0x140>
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
    398c:	6823      	ldr	r3, [r4, #0]
    398e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
    3992:	6023      	str	r3, [r4, #0]
    dd.adc_cfg = (struct adc_channel_cfg){
    3994:	2300      	movs	r3, #0
    3996:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    399a:	2304      	movs	r3, #4
    399c:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    39a0:	f244 0328 	movw	r3, #16424	; 0x4028
    39a4:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
    39a8:	2306      	movs	r3, #6
    return_code = adc_channel_setup(dd.adc, &dd.adc_cfg);
    39aa:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd.adc_cfg = (struct adc_channel_cfg){
    39ac:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    39b0:	6883      	ldr	r3, [r0, #8]
    39b2:	a90c      	add	r1, sp, #48	; 0x30
    39b4:	681b      	ldr	r3, [r3, #0]
    39b6:	4798      	blx	r3
    if (return_code < 0) {
    39b8:	2800      	cmp	r0, #0
    39ba:	dbcd      	blt.n	3958 <read_battery+0x20>
    return_code = gpio_pin_set(dd.gpio, VDIV_GPIO_PIN, 1);
    39bc:	980b      	ldr	r0, [sp, #44]	; 0x2c

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
    39be:	68c3      	ldr	r3, [r0, #12]
    39c0:	681b      	ldr	r3, [r3, #0]
    39c2:	009b      	lsls	r3, r3, #2
	return api->port_clear_bits_raw(port, pins);
    39c4:	6883      	ldr	r3, [r0, #8]
	return api->port_set_bits_raw(port, pins);
    39c6:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
	return api->port_clear_bits_raw(port, pins);
    39ca:	bf4c      	ite	mi
    39cc:	691b      	ldrmi	r3, [r3, #16]
	return api->port_set_bits_raw(port, pins);
    39ce:	68db      	ldrpl	r3, [r3, #12]
    39d0:	4798      	blx	r3
    if (return_code < 0) {
    39d2:	2800      	cmp	r0, #0
    39d4:	dbc0      	blt.n	3958 <read_battery+0x20>
    dd.raw = 0;
    39d6:	2400      	movs	r4, #0
    dd.adc_seq = (struct adc_sequence){
    39d8:	2214      	movs	r2, #20
    39da:	4621      	mov	r1, r4
    39dc:	a80e      	add	r0, sp, #56	; 0x38
    dd.raw = 0;
    39de:	9413      	str	r4, [sp, #76]	; 0x4c
    dd.adc_seq = (struct adc_sequence){
    39e0:	f018 f84e 	bl	1ba80 <memset>
    39e4:	aa13      	add	r2, sp, #76	; 0x4c
    39e6:	9210      	str	r2, [sp, #64]	; 0x40
    39e8:	2204      	movs	r2, #4
    39ea:	2301      	movs	r3, #1
    39ec:	9211      	str	r2, [sp, #68]	; 0x44
    39ee:	f240 420e 	movw	r2, #1038	; 0x40e
    return_code = adc_read(dd.adc, &dd.adc_seq);
    39f2:	980a      	ldr	r0, [sp, #40]	; 0x28
    dd.adc_seq = (struct adc_sequence){
    39f4:	930f      	str	r3, [sp, #60]	; 0x3c
    39f6:	f8ad 2048 	strh.w	r2, [sp, #72]	; 0x48
    39fa:	f88d 304a 	strb.w	r3, [sp, #74]	; 0x4a
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    39fe:	6883      	ldr	r3, [r0, #8]
    3a00:	a90e      	add	r1, sp, #56	; 0x38
    3a02:	685b      	ldr	r3, [r3, #4]
    3a04:	4798      	blx	r3
    if (return_code < 0) {
    3a06:	42a0      	cmp	r0, r4
    3a08:	dba6      	blt.n	3958 <read_battery+0x20>
    return_code = adc_raw_to_millivolts(adc_ref_internal(dd.adc),
    3a0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    results.divided_mV = dd.raw;
    3a0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
static inline uint16_t adc_ref_internal(const struct device *dev)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->ref_internal;
    3a0e:	6892      	ldr	r2, [r2, #8]
    3a10:	9306      	str	r3, [sp, #24]
    return_code = adc_raw_to_millivolts(adc_ref_internal(dd.adc),
    3a12:	8912      	ldrh	r2, [r2, #8]
	int ret = adc_gain_invert(gain, &adc_mv);
    3a14:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    dd.adc_seq.calibrate = false;
    3a18:	f88d 404a 	strb.w	r4, [sp, #74]	; 0x4a
	int32_t adc_mv = *valp * ref_mv;
    3a1c:	4353      	muls	r3, r2
	int ret = adc_gain_invert(gain, &adc_mv);
    3a1e:	a903      	add	r1, sp, #12
    return_code = adc_raw_to_millivolts(adc_ref_internal(dd.adc),
    3a20:	f89d 4048 	ldrb.w	r4, [sp, #72]	; 0x48
	int32_t adc_mv = *valp * ref_mv;
    3a24:	9303      	str	r3, [sp, #12]
	int ret = adc_gain_invert(gain, &adc_mv);
    3a26:	f013 fa1f 	bl	16e68 <adc_gain_invert>
	if (ret == 0) {
    3a2a:	bb40      	cbnz	r0, 3a7e <read_battery+0x146>
		*valp = (adc_mv >> resolution);
    3a2c:	9b03      	ldr	r3, [sp, #12]
    3a2e:	4123      	asrs	r3, r4
    3a30:	9306      	str	r3, [sp, #24]
    results.adc_ref_mV = adc_ref_internal(dd.adc);
    3a32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    results.res_bits = 1UL << dd.adc_seq.resolution;
    3a34:	f89d 2048 	ldrb.w	r2, [sp, #72]	; 0x48
	return api->ref_internal;
    3a38:	689b      	ldr	r3, [r3, #8]
    results.millivolts = VDIV_DIVISOR * results.divided_mV;
    3a3a:	9806      	ldr	r0, [sp, #24]
    results.adc_ref_mV = adc_ref_internal(dd.adc);
    3a3c:	891b      	ldrh	r3, [r3, #8]
    3a3e:	f8ad 3010 	strh.w	r3, [sp, #16]
    results.res_bits = 1UL << dd.adc_seq.resolution;
    3a42:	2301      	movs	r3, #1
    3a44:	4093      	lsls	r3, r2
    results.millivolts = VDIV_DIVISOR * results.divided_mV;
    3a46:	0040      	lsls	r0, r0, #1
    results.res_bits = 1UL << dd.adc_seq.resolution;
    3a48:	9305      	str	r3, [sp, #20]
    results.millivolts = VDIV_DIVISOR * results.divided_mV;
    3a4a:	9007      	str	r0, [sp, #28]
    snprintf(results.volts, sizeof(results.volts), "%f.3f",
    3a4c:	f7fc fcaa 	bl	3a4 <__aeabi_i2d>
    3a50:	4b10      	ldr	r3, [pc, #64]	; (3a94 <read_battery+0x15c>)
    3a52:	2200      	movs	r2, #0
    3a54:	f7fc fe3a 	bl	6cc <__aeabi_ddiv>
    return results;
    3a58:	ac04      	add	r4, sp, #16
    snprintf(results.volts, sizeof(results.volts), "%f.3f",
    3a5a:	e9cd 0100 	strd	r0, r1, [sp]
    3a5e:	4a0e      	ldr	r2, [pc, #56]	; (3a98 <read_battery+0x160>)
    3a60:	2106      	movs	r1, #6
    3a62:	a808      	add	r0, sp, #32
    3a64:	f001 ffb4 	bl	59d0 <snprintf>
    return results;
    3a68:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3a6a:	4635      	mov	r5, r6
    3a6c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3a6e:	e894 0003 	ldmia.w	r4, {r0, r1}
    3a72:	e885 0003 	stmia.w	r5, {r0, r1}
    3a76:	e777      	b.n	3968 <read_battery+0x30>
    if (return_code < 0) {
    3a78:	f6ff af6e 	blt.w	3958 <read_battery+0x20>
    3a7c:	e78a      	b.n	3994 <read_battery+0x5c>
    if (return_code == -EINVAL) {
    3a7e:	3016      	adds	r0, #22
    3a80:	f43f af6a 	beq.w	3958 <read_battery+0x20>
    3a84:	e7d5      	b.n	3a32 <read_battery+0xfa>
    3a86:	bf00      	nop
    3a88:	0001f650 	.word	0x0001f650
    3a8c:	000209c9 	.word	0x000209c9
    3a90:	00020958 	.word	0x00020958
    3a94:	408f4000 	.word	0x408f4000
    3a98:	000209cf 	.word	0x000209cf

00003a9c <print_digits>:
}
#endif /* CONFIG_PRINTK */

static void print_digits(out_func_t out, void *ctx, printk_val_t num, unsigned int base,
			 bool pad_before, char pad_char, int min_width)
{
    3a9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    3aa0:	b087      	sub	sp, #28
	char buf[DIGITS_BUFLEN];
	unsigned int i;

	/* Print it backwards into the end of the buffer, low digits first */
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
		buf[i] = "0123456789abcdef"[num % base];
    3aa2:	4c21      	ldr	r4, [pc, #132]	; (3b28 <print_digits+0x8c>)
{
    3aa4:	f89d 903c 	ldrb.w	r9, [sp, #60]	; 0x3c
    3aa8:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
    3aac:	4606      	mov	r6, r0
    3aae:	460f      	mov	r7, r1
    3ab0:	4610      	mov	r0, r2
    3ab2:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
    3ab4:	2514      	movs	r5, #20
    3ab6:	ea50 0301 	orrs.w	r3, r0, r1
    3aba:	d117      	bne.n	3aec <print_digits+0x50>
		buf[i] = '0';
	} else {
		i++;
	}

	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3abc:	9c11      	ldr	r4, [sp, #68]	; 0x44
	if (i == DIGITS_BUFLEN - 1U) {
    3abe:	2d14      	cmp	r5, #20
		i++;
    3ac0:	bf18      	it	ne
    3ac2:	3501      	addne	r5, #1
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3ac4:	f1a4 0415 	sub.w	r4, r4, #21
		buf[i] = '0';
    3ac8:	bf08      	it	eq
    3aca:	2330      	moveq	r3, #48	; 0x30
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3acc:	442c      	add	r4, r5
		buf[i] = '0';
    3ace:	bf08      	it	eq
    3ad0:	f88d 3014 	strbeq.w	r3, [sp, #20]
	int pad = MAX(min_width - (int)(DIGITS_BUFLEN - i), 0);
    3ad4:	ea24 74e4 	bic.w	r4, r4, r4, asr #31

	for (/**/; pad > 0 && pad_before; pad--) {
    3ad8:	b114      	cbz	r4, 3ae0 <print_digits+0x44>
    3ada:	f1b9 0f00 	cmp.w	r9, #0
    3ade:	d112      	bne.n	3b06 <print_digits+0x6a>
		out(pad_char, ctx);
	}
	for (/**/; i < DIGITS_BUFLEN; i++) {
    3ae0:	2d14      	cmp	r5, #20
    3ae2:	d915      	bls.n	3b10 <print_digits+0x74>
		out(buf[i], ctx);
	}
	for (/**/; pad > 0; pad--) {
    3ae4:	b9d4      	cbnz	r4, 3b1c <print_digits+0x80>
		out(pad_char, ctx);
	}
}
    3ae6:	b007      	add	sp, #28
    3ae8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		buf[i] = "0123456789abcdef"[num % base];
    3aec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    3aee:	2300      	movs	r3, #0
    3af0:	f7fc ff24 	bl	93c <__aeabi_uldivmod>
    3af4:	5ca2      	ldrb	r2, [r4, r2]
    3af6:	f80d 2005 	strb.w	r2, [sp, r5]
    3afa:	4684      	mov	ip, r0
    3afc:	460b      	mov	r3, r1
		num /= base;
    3afe:	4660      	mov	r0, ip
    3b00:	4619      	mov	r1, r3
	for (i = DIGITS_BUFLEN - 1U; num != 0U; i--) {
    3b02:	3d01      	subs	r5, #1
    3b04:	e7d7      	b.n	3ab6 <print_digits+0x1a>
		out(pad_char, ctx);
    3b06:	4639      	mov	r1, r7
    3b08:	4640      	mov	r0, r8
    3b0a:	47b0      	blx	r6
	for (/**/; pad > 0 && pad_before; pad--) {
    3b0c:	3c01      	subs	r4, #1
    3b0e:	e7e3      	b.n	3ad8 <print_digits+0x3c>
		out(buf[i], ctx);
    3b10:	f81d 0005 	ldrb.w	r0, [sp, r5]
    3b14:	4639      	mov	r1, r7
    3b16:	47b0      	blx	r6
	for (/**/; i < DIGITS_BUFLEN; i++) {
    3b18:	3501      	adds	r5, #1
    3b1a:	e7e1      	b.n	3ae0 <print_digits+0x44>
		out(pad_char, ctx);
    3b1c:	4639      	mov	r1, r7
    3b1e:	4640      	mov	r0, r8
    3b20:	47b0      	blx	r6
	for (/**/; pad > 0; pad--) {
    3b22:	3c01      	subs	r4, #1
    3b24:	e7de      	b.n	3ae4 <print_digits+0x48>
    3b26:	bf00      	nop
    3b28:	000209d5 	.word	0x000209d5

00003b2c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    3b2c:	680b      	ldr	r3, [r1, #0]
    3b2e:	3301      	adds	r3, #1
    3b30:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    3b32:	4b01      	ldr	r3, [pc, #4]	; (3b38 <char_out+0xc>)
    3b34:	681b      	ldr	r3, [r3, #0]
    3b36:	4718      	bx	r3
    3b38:	200004e4 	.word	0x200004e4

00003b3c <z_vprintk>:
{
    3b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	char length_mod = 0;
    3b40:	2600      	movs	r6, #0
{
    3b42:	b087      	sub	sp, #28
    3b44:	4605      	mov	r5, r0
    3b46:	468b      	mov	fp, r1
    3b48:	461c      	mov	r4, r3
	while (*fmt) {
    3b4a:	f102 3aff 	add.w	sl, r2, #4294967295	; 0xffffffff
	int min_width = -1;
    3b4e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    3b52:	4637      	mov	r7, r6
			might_format = 0;
    3b54:	f04f 0900 	mov.w	r9, #0
					break;
    3b58:	e007      	b.n	3b6a <z_vprintk+0x2e>
		if (!might_format) {
    3b5a:	f1b9 0f00 	cmp.w	r9, #0
    3b5e:	d10b      	bne.n	3b78 <z_vprintk+0x3c>
			if (*fmt != '%') {
    3b60:	2825      	cmp	r0, #37	; 0x25
    3b62:	f000 810a 	beq.w	3d7a <z_vprintk+0x23e>
				out((int)*fmt, ctx);
    3b66:	4659      	mov	r1, fp
    3b68:	47a8      	blx	r5
	while (*fmt) {
    3b6a:	f81a 0f01 	ldrb.w	r0, [sl, #1]!
    3b6e:	2800      	cmp	r0, #0
    3b70:	d1f3      	bne.n	3b5a <z_vprintk+0x1e>
}
    3b72:	b007      	add	sp, #28
    3b74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			switch (*fmt) {
    3b78:	287a      	cmp	r0, #122	; 0x7a
    3b7a:	d80a      	bhi.n	3b92 <z_vprintk+0x56>
    3b7c:	2862      	cmp	r0, #98	; 0x62
    3b7e:	d810      	bhi.n	3ba2 <z_vprintk+0x66>
    3b80:	2830      	cmp	r0, #48	; 0x30
    3b82:	d051      	beq.n	3c28 <z_vprintk+0xec>
    3b84:	d844      	bhi.n	3c10 <z_vprintk+0xd4>
    3b86:	2825      	cmp	r0, #37	; 0x25
    3b88:	f000 80f5 	beq.w	3d76 <z_vprintk+0x23a>
    3b8c:	282d      	cmp	r0, #45	; 0x2d
    3b8e:	f000 80fb 	beq.w	3d88 <z_vprintk+0x24c>
					out((int)'%', ctx);
    3b92:	4659      	mov	r1, fp
    3b94:	2025      	movs	r0, #37	; 0x25
    3b96:	47a8      	blx	r5
					out((int)*fmt, ctx);
    3b98:	f89a 0000 	ldrb.w	r0, [sl]
    3b9c:	4659      	mov	r1, fp
    3b9e:	47a8      	blx	r5
    3ba0:	e7d8      	b.n	3b54 <z_vprintk+0x18>
    3ba2:	f1a0 0363 	sub.w	r3, r0, #99	; 0x63
    3ba6:	2b17      	cmp	r3, #23
    3ba8:	d8f3      	bhi.n	3b92 <z_vprintk+0x56>
    3baa:	a201      	add	r2, pc, #4	; (adr r2, 3bb0 <z_vprintk+0x74>)
    3bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    3bb0:	00003d6f 	.word	0x00003d6f
    3bb4:	00003c71 	.word	0x00003c71
    3bb8:	00003b93 	.word	0x00003b93
    3bbc:	00003b93 	.word	0x00003b93
    3bc0:	00003b93 	.word	0x00003b93
    3bc4:	00003c53 	.word	0x00003c53
    3bc8:	00003c71 	.word	0x00003c71
    3bcc:	00003b93 	.word	0x00003b93
    3bd0:	00003b93 	.word	0x00003b93
    3bd4:	00003c53 	.word	0x00003c53
    3bd8:	00003b93 	.word	0x00003b93
    3bdc:	00003b93 	.word	0x00003b93
    3be0:	00003b93 	.word	0x00003b93
    3be4:	00003ceb 	.word	0x00003ceb
    3be8:	00003b93 	.word	0x00003b93
    3bec:	00003b93 	.word	0x00003b93
    3bf0:	00003d37 	.word	0x00003d37
    3bf4:	00003b93 	.word	0x00003b93
    3bf8:	00003c71 	.word	0x00003c71
    3bfc:	00003b93 	.word	0x00003b93
    3c00:	00003b93 	.word	0x00003b93
    3c04:	00003c19 	.word	0x00003c19
    3c08:	00003b93 	.word	0x00003b93
    3c0c:	00003c53 	.word	0x00003c53
			switch (*fmt) {
    3c10:	2839      	cmp	r0, #57	; 0x39
    3c12:	d915      	bls.n	3c40 <z_vprintk+0x104>
    3c14:	2858      	cmp	r0, #88	; 0x58
    3c16:	d1bc      	bne.n	3b92 <z_vprintk+0x56>
				if (*fmt == 'p') {
    3c18:	f89a 3000 	ldrb.w	r3, [sl]
    3c1c:	2b70      	cmp	r3, #112	; 0x70
    3c1e:	d16e      	bne.n	3cfe <z_vprintk+0x1c2>
					x = va_arg(ap, unsigned int);
    3c20:	f854 2b04 	ldr.w	r2, [r4], #4
    3c24:	2300      	movs	r3, #0
    3c26:	e075      	b.n	3d14 <z_vprintk+0x1d8>
				if (min_width < 0 && padding == PAD_NONE) {
    3c28:	f1b8 0f00 	cmp.w	r8, #0
    3c2c:	da0b      	bge.n	3c46 <z_vprintk+0x10a>
    3c2e:	2f00      	cmp	r7, #0
    3c30:	f000 80ac 	beq.w	3d8c <z_vprintk+0x250>
					min_width = *fmt - '0';
    3c34:	f1a0 0830 	sub.w	r8, r0, #48	; 0x30
					padding = PAD_SPACE_BEFORE;
    3c38:	2f00      	cmp	r7, #0
    3c3a:	bf08      	it	eq
    3c3c:	2702      	moveq	r7, #2
    3c3e:	e794      	b.n	3b6a <z_vprintk+0x2e>
				if (min_width < 0) {
    3c40:	f1b8 0f00 	cmp.w	r8, #0
    3c44:	dbf6      	blt.n	3c34 <z_vprintk+0xf8>
					min_width = 10 * min_width + *fmt - '0';
    3c46:	230a      	movs	r3, #10
    3c48:	fb03 0808 	mla	r8, r3, r8, r0
    3c4c:	f1a8 0830 	sub.w	r8, r8, #48	; 0x30
    3c50:	e7f2      	b.n	3c38 <z_vprintk+0xfc>
				if (*fmt == 'h' && length_mod == 'h') {
    3c52:	2868      	cmp	r0, #104	; 0x68
    3c54:	d103      	bne.n	3c5e <z_vprintk+0x122>
    3c56:	2e68      	cmp	r6, #104	; 0x68
    3c58:	d106      	bne.n	3c68 <z_vprintk+0x12c>
					length_mod = 'H';
    3c5a:	2648      	movs	r6, #72	; 0x48
    3c5c:	e785      	b.n	3b6a <z_vprintk+0x2e>
				} else if (*fmt == 'l' && length_mod == 'l') {
    3c5e:	286c      	cmp	r0, #108	; 0x6c
    3c60:	d102      	bne.n	3c68 <z_vprintk+0x12c>
    3c62:	2e6c      	cmp	r6, #108	; 0x6c
    3c64:	f000 8094 	beq.w	3d90 <z_vprintk+0x254>
				} else if (length_mod == 0) {
    3c68:	2e00      	cmp	r6, #0
    3c6a:	d192      	bne.n	3b92 <z_vprintk+0x56>
    3c6c:	4606      	mov	r6, r0
    3c6e:	e77c      	b.n	3b6a <z_vprintk+0x2e>
				if (length_mod == 'z') {
    3c70:	2e7a      	cmp	r6, #122	; 0x7a
    3c72:	d106      	bne.n	3c82 <z_vprintk+0x146>
					d = va_arg(ap, long);
    3c74:	46a1      	mov	r9, r4
    3c76:	f859 2b04 	ldr.w	r2, [r9], #4
    3c7a:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    3c7c:	2875      	cmp	r0, #117	; 0x75
    3c7e:	d123      	bne.n	3cc8 <z_vprintk+0x18c>
    3c80:	e00f      	b.n	3ca2 <z_vprintk+0x166>
				} else if (length_mod == 'l') {
    3c82:	2e6c      	cmp	r6, #108	; 0x6c
    3c84:	d0f6      	beq.n	3c74 <z_vprintk+0x138>
				} else if (length_mod == 'L') {
    3c86:	2e4c      	cmp	r6, #76	; 0x4c
    3c88:	d105      	bne.n	3c96 <z_vprintk+0x15a>
					long long lld = va_arg(ap, long long);
    3c8a:	3407      	adds	r4, #7
    3c8c:	f024 0907 	bic.w	r9, r4, #7
					d = (printk_val_t) lld;
    3c90:	e8f9 2302 	ldrd	r2, r3, [r9], #8
    3c94:	e7f2      	b.n	3c7c <z_vprintk+0x140>
				} else if (*fmt == 'u') {
    3c96:	2875      	cmp	r0, #117	; 0x75
					d = va_arg(ap, unsigned int);
    3c98:	6822      	ldr	r2, [r4, #0]
    3c9a:	f104 0904 	add.w	r9, r4, #4
				} else if (*fmt == 'u') {
    3c9e:	d112      	bne.n	3cc6 <z_vprintk+0x18a>
					d = va_arg(ap, unsigned int);
    3ca0:	2300      	movs	r3, #0
	print_digits(out, ctx, num, 10U, padding != PAD_SPACE_AFTER,
    3ca2:	1ef8      	subs	r0, r7, #3
    3ca4:	bf18      	it	ne
    3ca6:	2001      	movne	r0, #1
    3ca8:	2f01      	cmp	r7, #1
    3caa:	bf0c      	ite	eq
    3cac:	2430      	moveq	r4, #48	; 0x30
    3cae:	2420      	movne	r4, #32
    3cb0:	9001      	str	r0, [sp, #4]
    3cb2:	200a      	movs	r0, #10
    3cb4:	e9cd 4802 	strd	r4, r8, [sp, #8]
    3cb8:	9000      	str	r0, [sp, #0]
    3cba:	4659      	mov	r1, fp
    3cbc:	4628      	mov	r0, r5
    3cbe:	f7ff feed 	bl	3a9c <print_digits>
}
    3cc2:	464c      	mov	r4, r9
    3cc4:	e746      	b.n	3b54 <z_vprintk+0x18>
					d = va_arg(ap, int);
    3cc6:	17d3      	asrs	r3, r2, #31
				if (*fmt != 'u' && negative(d)) {
    3cc8:	2a00      	cmp	r2, #0
    3cca:	f173 0100 	sbcs.w	r1, r3, #0
    3cce:	dae8      	bge.n	3ca2 <z_vprintk+0x166>
					out((int)'-', ctx);
    3cd0:	4659      	mov	r1, fp
    3cd2:	202d      	movs	r0, #45	; 0x2d
    3cd4:	e9cd 2304 	strd	r2, r3, [sp, #16]
    3cd8:	47a8      	blx	r5
					d = -d;
    3cda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    3cde:	4252      	negs	r2, r2
    3ce0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
					min_width--;
    3ce4:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    3ce8:	e7db      	b.n	3ca2 <z_vprintk+0x166>
				out('0', ctx);
    3cea:	4659      	mov	r1, fp
    3cec:	2030      	movs	r0, #48	; 0x30
    3cee:	47a8      	blx	r5
				out('x', ctx);
    3cf0:	4659      	mov	r1, fp
    3cf2:	2078      	movs	r0, #120	; 0x78
    3cf4:	47a8      	blx	r5
				min_width = sizeof(void *) * 2U;
    3cf6:	f04f 0808 	mov.w	r8, #8
				padding = PAD_ZERO_BEFORE;
    3cfa:	2701      	movs	r7, #1
    3cfc:	e78c      	b.n	3c18 <z_vprintk+0xdc>
				} else if (length_mod == 'l') {
    3cfe:	2e6c      	cmp	r6, #108	; 0x6c
    3d00:	d08e      	beq.n	3c20 <z_vprintk+0xe4>
				} else if (length_mod == 'L') {
    3d02:	2e4c      	cmp	r6, #76	; 0x4c
    3d04:	d18c      	bne.n	3c20 <z_vprintk+0xe4>
					x = va_arg(ap, unsigned long long);
    3d06:	1de3      	adds	r3, r4, #7
    3d08:	f023 0307 	bic.w	r3, r3, #7
    3d0c:	461c      	mov	r4, r3
    3d0e:	685b      	ldr	r3, [r3, #4]
    3d10:	f854 2b08 	ldr.w	r2, [r4], #8
	print_digits(out, ctx, num, 16U, padding != PAD_SPACE_AFTER,
    3d14:	1ef8      	subs	r0, r7, #3
    3d16:	bf18      	it	ne
    3d18:	2001      	movne	r0, #1
    3d1a:	2f01      	cmp	r7, #1
    3d1c:	bf0c      	ite	eq
    3d1e:	2130      	moveq	r1, #48	; 0x30
    3d20:	2120      	movne	r1, #32
    3d22:	e9cd 1802 	strd	r1, r8, [sp, #8]
    3d26:	2110      	movs	r1, #16
    3d28:	9001      	str	r0, [sp, #4]
    3d2a:	9100      	str	r1, [sp, #0]
    3d2c:	4628      	mov	r0, r5
    3d2e:	4659      	mov	r1, fp
    3d30:	f7ff feb4 	bl	3a9c <print_digits>
    3d34:	e70e      	b.n	3b54 <z_vprintk+0x18>
				char *s = va_arg(ap, char *);
    3d36:	f854 3b04 	ldr.w	r3, [r4], #4
				while (*s) {
    3d3a:	4699      	mov	r9, r3
    3d3c:	464a      	mov	r2, r9
    3d3e:	f819 0b01 	ldrb.w	r0, [r9], #1
    3d42:	b978      	cbnz	r0, 3d64 <z_vprintk+0x228>
				if (padding == PAD_SPACE_AFTER) {
    3d44:	2f03      	cmp	r7, #3
    3d46:	d125      	bne.n	3d94 <z_vprintk+0x258>
					int remaining = min_width - (s - start);
    3d48:	eba2 0903 	sub.w	r9, r2, r3
    3d4c:	eba8 0909 	sub.w	r9, r8, r9
					while (remaining-- > 0) {
    3d50:	f1b9 0f00 	cmp.w	r9, #0
    3d54:	f77f aefe 	ble.w	3b54 <z_vprintk+0x18>
						out(' ', ctx);
    3d58:	4659      	mov	r1, fp
    3d5a:	2020      	movs	r0, #32
    3d5c:	47a8      	blx	r5
    3d5e:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    3d62:	e7f5      	b.n	3d50 <z_vprintk+0x214>
					out((int)(*s++), ctx);
    3d64:	4659      	mov	r1, fp
    3d66:	9304      	str	r3, [sp, #16]
    3d68:	47a8      	blx	r5
    3d6a:	9b04      	ldr	r3, [sp, #16]
    3d6c:	e7e6      	b.n	3d3c <z_vprintk+0x200>
				out(c, ctx);
    3d6e:	f854 0b04 	ldr.w	r0, [r4], #4
    3d72:	4659      	mov	r1, fp
    3d74:	e713      	b.n	3b9e <z_vprintk+0x62>
				out((int)'%', ctx);
    3d76:	4659      	mov	r1, fp
    3d78:	e711      	b.n	3b9e <z_vprintk+0x62>
				length_mod = 0;
    3d7a:	464e      	mov	r6, r9
				padding = PAD_NONE;
    3d7c:	464f      	mov	r7, r9
				min_width = -1;
    3d7e:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
				might_format = 1;
    3d82:	f04f 0901 	mov.w	r9, #1
    3d86:	e6f0      	b.n	3b6a <z_vprintk+0x2e>
			switch (*fmt) {
    3d88:	2703      	movs	r7, #3
    3d8a:	e6ee      	b.n	3b6a <z_vprintk+0x2e>
					padding = PAD_ZERO_BEFORE;
    3d8c:	2701      	movs	r7, #1
    3d8e:	e6ec      	b.n	3b6a <z_vprintk+0x2e>
					length_mod = 'L';
    3d90:	264c      	movs	r6, #76	; 0x4c
    3d92:	e6ea      	b.n	3b6a <z_vprintk+0x2e>
			might_format = 0;
    3d94:	4681      	mov	r9, r0
    3d96:	e6e8      	b.n	3b6a <z_vprintk+0x2e>

00003d98 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    3d98:	b507      	push	{r0, r1, r2, lr}
    3d9a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    3d9c:	2100      	movs	r1, #0
{
    3d9e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    3da0:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	z_vprintk(char_out, &ctx, fmt, ap);
    3da2:	4803      	ldr	r0, [pc, #12]	; (3db0 <vprintk+0x18>)
    3da4:	a901      	add	r1, sp, #4
    3da6:	f7ff fec9 	bl	3b3c <z_vprintk>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    3daa:	b003      	add	sp, #12
    3dac:	f85d fb04 	ldr.w	pc, [sp], #4
    3db0:	00003b2d 	.word	0x00003b2d

00003db4 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    3db4:	b530      	push	{r4, r5, lr}
    3db6:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    3db8:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    3dbc:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    3dbe:	2500      	movs	r5, #0

	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3dc0:	4805      	ldr	r0, [pc, #20]	; (3dd8 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    3dc2:	9503      	str	r5, [sp, #12]
	z_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3dc4:	a901      	add	r1, sp, #4
    3dc6:	f7ff feb9 	bl	3b3c <z_vprintk>

	if (ctx.count < ctx.max) {
    3dca:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    3dce:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    3dd0:	bfb8      	it	lt
    3dd2:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    3dd4:	b005      	add	sp, #20
    3dd6:	bd30      	pop	{r4, r5, pc}
    3dd8:	00019dd1 	.word	0x00019dd1

00003ddc <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    3ddc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3de0:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    3de4:	f019 0808 	ands.w	r8, r9, #8
{
    3de8:	4604      	mov	r4, r0
    3dea:	4693      	mov	fp, r2
	if (processing) {
    3dec:	d00d      	beq.n	3e0a <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    3dee:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    3df0:	bf0c      	ite	eq
    3df2:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    3df6:	f049 0920 	orrne.w	r9, r9, #32
    3dfa:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    3dfe:	f38b 8811 	msr	BASEPRI, fp
    3e02:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    3e06:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e0a:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    3e0e:	2902      	cmp	r1, #2
    3e10:	d107      	bne.n	3e22 <process_event+0x46>
			evt = process_recheck(mgr);
    3e12:	4620      	mov	r0, r4
    3e14:	f016 f809 	bl	19e2a <process_recheck>
		if (evt == EVT_NOP) {
    3e18:	2800      	cmp	r0, #0
    3e1a:	d0f0      	beq.n	3dfe <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    3e1c:	2801      	cmp	r0, #1
    3e1e:	8b23      	ldrh	r3, [r4, #24]
    3e20:	d14e      	bne.n	3ec0 <process_event+0xe4>
			res = mgr->last_res;
    3e22:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e24:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    3e26:	2f00      	cmp	r7, #0
    3e28:	da15      	bge.n	3e56 <process_event+0x7a>
		*clients = mgr->clients;
    3e2a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3e2c:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    3e30:	e9c4 8800 	strd	r8, r8, [r4]
    3e34:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3e38:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    3e3a:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    3e3c:	8b21      	ldrh	r1, [r4, #24]
    3e3e:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    3e42:	45ca      	cmp	sl, r9
    3e44:	d002      	beq.n	3e4c <process_event+0x70>
		if (do_monitors
    3e46:	68a3      	ldr	r3, [r4, #8]
    3e48:	2b00      	cmp	r3, #0
    3e4a:	d15a      	bne.n	3f02 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    3e4c:	b90d      	cbnz	r5, 3e52 <process_event+0x76>
		    || (transit != NULL)) {
    3e4e:	2e00      	cmp	r6, #0
    3e50:	d071      	beq.n	3f36 <process_event+0x15a>
    3e52:	2300      	movs	r3, #0
    3e54:	e056      	b.n	3f04 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    3e56:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    3e5a:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    3e5c:	2a01      	cmp	r2, #1
    3e5e:	d81e      	bhi.n	3e9e <process_event+0xc2>
		*clients = mgr->clients;
    3e60:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    3e64:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    3e66:	6825      	ldr	r5, [r4, #0]
	list->head = NULL;
    3e68:	b289      	uxth	r1, r1
	list->tail = NULL;
    3e6a:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    3e6e:	d10a      	bne.n	3e86 <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3e70:	b13d      	cbz	r5, 3e82 <process_event+0xa6>
    3e72:	8b63      	ldrh	r3, [r4, #26]
    3e74:	462a      	mov	r2, r5
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3e76:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    3e78:	3301      	adds	r3, #1
    3e7a:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    3e7c:	2a00      	cmp	r2, #0
    3e7e:	d1fa      	bne.n	3e76 <process_event+0x9a>
    3e80:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3e82:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    3e86:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3e88:	4620      	mov	r0, r4
    3e8a:	f015 ffce 	bl	19e2a <process_recheck>
    3e8e:	4606      	mov	r6, r0
    3e90:	2800      	cmp	r0, #0
    3e92:	d0d3      	beq.n	3e3c <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3e94:	8b23      	ldrh	r3, [r4, #24]
    3e96:	f043 0320 	orr.w	r3, r3, #32
    3e9a:	8323      	strh	r3, [r4, #24]
    3e9c:	e7cd      	b.n	3e3a <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    3e9e:	2b04      	cmp	r3, #4
    3ea0:	d10c      	bne.n	3ebc <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3ea2:	f021 0107 	bic.w	r1, r1, #7
    3ea6:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    3ea8:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    3eaa:	4620      	mov	r0, r4
    3eac:	f015 ffbd 	bl	19e2a <process_recheck>
    3eb0:	4605      	mov	r5, r0
    3eb2:	2800      	cmp	r0, #0
    3eb4:	d0c1      	beq.n	3e3a <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    3eb6:	f041 0120 	orr.w	r1, r1, #32
    3eba:	8321      	strh	r1, [r4, #24]
    3ebc:	2500      	movs	r5, #0
    3ebe:	e7bc      	b.n	3e3a <process_event+0x5e>
		} else if (evt == EVT_START) {
    3ec0:	2803      	cmp	r0, #3
    3ec2:	d109      	bne.n	3ed8 <process_event+0xfc>
			transit = mgr->transitions->start;
    3ec4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3ec6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    3eca:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3ecc:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    3ed0:	8323      	strh	r3, [r4, #24]
}
    3ed2:	2500      	movs	r5, #0
		res = 0;
    3ed4:	462f      	mov	r7, r5
    3ed6:	e7b1      	b.n	3e3c <process_event+0x60>
		} else if (evt == EVT_STOP) {
    3ed8:	2804      	cmp	r0, #4
    3eda:	d106      	bne.n	3eea <process_event+0x10e>
			transit = mgr->transitions->stop;
    3edc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3ede:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    3ee2:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3ee4:	f043 0304 	orr.w	r3, r3, #4
    3ee8:	e7f2      	b.n	3ed0 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    3eea:	2805      	cmp	r0, #5
    3eec:	d106      	bne.n	3efc <process_event+0x120>
			transit = mgr->transitions->reset;
    3eee:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3ef0:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    3ef4:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    3ef6:	f043 0305 	orr.w	r3, r3, #5
    3efa:	e7e9      	b.n	3ed0 <process_event+0xf4>
    3efc:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    3efe:	462e      	mov	r6, r5
    3f00:	e7e8      	b.n	3ed4 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    3f02:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    3f04:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    3f08:	8321      	strh	r1, [r4, #24]
    3f0a:	f38b 8811 	msr	BASEPRI, fp
    3f0e:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    3f12:	b9fb      	cbnz	r3, 3f54 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    3f14:	bb85      	cbnz	r5, 3f78 <process_event+0x19c>
			if (transit != NULL) {
    3f16:	b116      	cbz	r6, 3f1e <process_event+0x142>
				transit(mgr, transition_complete);
    3f18:	491f      	ldr	r1, [pc, #124]	; (3f98 <process_event+0x1bc>)
    3f1a:	4620      	mov	r0, r4
    3f1c:	47b0      	blx	r6
	__asm__ volatile(
    3f1e:	f04f 0320 	mov.w	r3, #32
    3f22:	f3ef 8b11 	mrs	fp, BASEPRI
    3f26:	f383 8811 	msr	BASEPRI, r3
    3f2a:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    3f2e:	8b23      	ldrh	r3, [r4, #24]
    3f30:	f023 0308 	bic.w	r3, r3, #8
    3f34:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    3f36:	8b23      	ldrh	r3, [r4, #24]
    3f38:	06da      	lsls	r2, r3, #27
    3f3a:	d525      	bpl.n	3f88 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    3f3c:	f023 0310 	bic.w	r3, r3, #16
    3f40:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    3f42:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    3f44:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    3f48:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    3f4c:	2900      	cmp	r1, #0
    3f4e:	f47f af5e 	bne.w	3e0e <process_event+0x32>
out:
    3f52:	e754      	b.n	3dfe <process_event+0x22>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3f54:	68a1      	ldr	r1, [r4, #8]
    3f56:	2900      	cmp	r1, #0
    3f58:	d0dc      	beq.n	3f14 <process_event+0x138>
    3f5a:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    3f5e:	f8d1 b004 	ldr.w	fp, [r1, #4]
    3f62:	463b      	mov	r3, r7
    3f64:	4652      	mov	r2, sl
    3f66:	4620      	mov	r0, r4
    3f68:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    3f6a:	f1b9 0f00 	cmp.w	r9, #0
    3f6e:	d0d1      	beq.n	3f14 <process_event+0x138>
    3f70:	4649      	mov	r1, r9
    3f72:	f8d9 9000 	ldr.w	r9, [r9]
    3f76:	e7f2      	b.n	3f5e <process_event+0x182>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    3f78:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    3f7a:	463b      	mov	r3, r7
    3f7c:	4652      	mov	r2, sl
    3f7e:	4620      	mov	r0, r4
    3f80:	682d      	ldr	r5, [r5, #0]
    3f82:	f015 ff6e 	bl	19e62 <notify_one>
    3f86:	e7c5      	b.n	3f14 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    3f88:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    3f8c:	bf1e      	ittt	ne
    3f8e:	f023 0320 	bicne.w	r3, r3, #32
    3f92:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    3f94:	2102      	movne	r1, #2
    3f96:	e7d5      	b.n	3f44 <process_event+0x168>
    3f98:	00019e8f 	.word	0x00019e8f

00003f9c <z_prf>:
	*sptr = p;
	return i;
}

int z_prf(int (*func)(), void *dest, const char *format, va_list vargs)
{
    3f9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fa0:	b0a1      	sub	sp, #132	; 0x84
    3fa2:	461e      	mov	r6, r3
	struct zero_padding zero;
	VALTYPE val;

#define PUTC(c)	do { if ((*func)(c, dest) == EOF) return EOF; } while (false)

	count = 0;
    3fa4:	2300      	movs	r3, #0
{
    3fa6:	9003      	str	r0, [sp, #12]
    3fa8:	4689      	mov	r9, r1
	count = 0;
    3faa:	9302      	str	r3, [sp, #8]

	while ((c = *format++)) {
    3fac:	4613      	mov	r3, r2
    3fae:	f813 0b01 	ldrb.w	r0, [r3], #1
    3fb2:	9306      	str	r3, [sp, #24]
    3fb4:	b158      	cbz	r0, 3fce <z_prf+0x32>
		if (c != '%') {
    3fb6:	2825      	cmp	r0, #37	; 0x25
    3fb8:	f000 8081 	beq.w	40be <z_prf+0x122>
			PUTC(c);
    3fbc:	4649      	mov	r1, r9
    3fbe:	9b03      	ldr	r3, [sp, #12]
    3fc0:	4798      	blx	r3
    3fc2:	3001      	adds	r0, #1
    3fc4:	f040 844a 	bne.w	485c <z_prf+0x8c0>
    3fc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    3fcc:	9302      	str	r3, [sp, #8]
		}
	}
	return count;

#undef PUTC
}
    3fce:	9802      	ldr	r0, [sp, #8]
    3fd0:	b021      	add	sp, #132	; 0x84
    3fd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				switch (c) {
    3fd6:	2d2b      	cmp	r5, #43	; 0x2b
    3fd8:	d065      	beq.n	40a6 <z_prf+0x10a>
    3fda:	d85c      	bhi.n	4096 <z_prf+0xfa>
    3fdc:	2d20      	cmp	r5, #32
    3fde:	d065      	beq.n	40ac <z_prf+0x110>
    3fe0:	2d23      	cmp	r5, #35	; 0x23
    3fe2:	d066      	beq.n	40b2 <z_prf+0x116>
    3fe4:	2d00      	cmp	r5, #0
    3fe6:	d0f2      	beq.n	3fce <z_prf+0x32>
					fzero = true;
    3fe8:	f8cd 8018 	str.w	r8, [sp, #24]
			while (strchr("-+ #0", (c = *format++)) != NULL) {
    3fec:	f8dd 8018 	ldr.w	r8, [sp, #24]
    3ff0:	48a4      	ldr	r0, [pc, #656]	; (4284 <z_prf+0x2e8>)
    3ff2:	f818 5b01 	ldrb.w	r5, [r8], #1
    3ff6:	4629      	mov	r1, r5
    3ff8:	f017 fcd7 	bl	1b9aa <strchr>
    3ffc:	2800      	cmp	r0, #0
    3ffe:	d1ea      	bne.n	3fd6 <z_prf+0x3a>
			if (c == '*') {
    4000:	2d2a      	cmp	r5, #42	; 0x2a
    4002:	d163      	bne.n	40cc <z_prf+0x130>
				width = va_arg(vargs, int);
    4004:	f856 3b04 	ldr.w	r3, [r6], #4
    4008:	9307      	str	r3, [sp, #28]
				if (width < 0) {
    400a:	2b00      	cmp	r3, #0
					width = -width;
    400c:	bfbf      	itttt	lt
    400e:	425b      	neglt	r3, r3
    4010:	9307      	strlt	r3, [sp, #28]
					fminus = true;
    4012:	2301      	movlt	r3, #1
    4014:	930d      	strlt	r3, [sp, #52]	; 0x34
				c = *format++;
    4016:	9b06      	ldr	r3, [sp, #24]
    4018:	f898 5000 	ldrb.w	r5, [r8]
    401c:	f103 0802 	add.w	r8, r3, #2
			if (c == '.') {
    4020:	2d2e      	cmp	r5, #46	; 0x2e
    4022:	d178      	bne.n	4116 <z_prf+0x17a>
				if (c == '*') {
    4024:	f898 3000 	ldrb.w	r3, [r8]
    4028:	2b2a      	cmp	r3, #42	; 0x2a
    402a:	d171      	bne.n	4110 <z_prf+0x174>
					precision = va_arg(vargs, int);
    402c:	f856 4b04 	ldr.w	r4, [r6], #4
				c = *format++;
    4030:	f108 0801 	add.w	r8, r8, #1
				c = *format++;
    4034:	f818 5b01 	ldrb.w	r5, [r8], #1
			if (strchr("hlz", c) != NULL) {
    4038:	4893      	ldr	r0, [pc, #588]	; (4288 <z_prf+0x2ec>)
    403a:	4629      	mov	r1, r5
    403c:	462f      	mov	r7, r5
    403e:	f017 fcb4 	bl	1b9aa <strchr>
    4042:	2800      	cmp	r0, #0
    4044:	d06a      	beq.n	411c <z_prf+0x180>
				c = *format++;
    4046:	4643      	mov	r3, r8
				} else if (i == 'h' && c == 'h') {
    4048:	2f68      	cmp	r7, #104	; 0x68
				c = *format++;
    404a:	f813 5b01 	ldrb.w	r5, [r3], #1
    404e:	9306      	str	r3, [sp, #24]
				} else if (i == 'h' && c == 'h') {
    4050:	d107      	bne.n	4062 <z_prf+0xc6>
    4052:	2d68      	cmp	r5, #104	; 0x68
    4054:	d105      	bne.n	4062 <z_prf+0xc6>
					c = *format++;
    4056:	f108 0302 	add.w	r3, r8, #2
    405a:	f898 5001 	ldrb.w	r5, [r8, #1]
    405e:	9306      	str	r3, [sp, #24]
					i = 'H';
    4060:	2748      	movs	r7, #72	; 0x48
			switch (c) {
    4062:	2d78      	cmp	r5, #120	; 0x78
    4064:	d808      	bhi.n	4078 <z_prf+0xdc>
    4066:	2d57      	cmp	r5, #87	; 0x57
    4068:	d85c      	bhi.n	4124 <z_prf+0x188>
    406a:	2d25      	cmp	r5, #37	; 0x25
    406c:	f000 83f2 	beq.w	4854 <z_prf+0x8b8>
    4070:	f200 80a2 	bhi.w	41b8 <z_prf+0x21c>
    4074:	2d00      	cmp	r5, #0
    4076:	d0aa      	beq.n	3fce <z_prf+0x32>
				PUTC('%');
    4078:	9b03      	ldr	r3, [sp, #12]
    407a:	4649      	mov	r1, r9
    407c:	2025      	movs	r0, #37	; 0x25
    407e:	4798      	blx	r3
    4080:	3001      	adds	r0, #1
    4082:	d0a1      	beq.n	3fc8 <z_prf+0x2c>
				PUTC(c);
    4084:	9b03      	ldr	r3, [sp, #12]
    4086:	4649      	mov	r1, r9
    4088:	4628      	mov	r0, r5
    408a:	4798      	blx	r3
    408c:	3001      	adds	r0, #1
    408e:	d09b      	beq.n	3fc8 <z_prf+0x2c>
				count += 2;
    4090:	9b02      	ldr	r3, [sp, #8]
    4092:	3302      	adds	r3, #2
    4094:	e3e4      	b.n	4860 <z_prf+0x8c4>
				switch (c) {
    4096:	2d2d      	cmp	r5, #45	; 0x2d
    4098:	d00e      	beq.n	40b8 <z_prf+0x11c>
					fzero = true;
    409a:	2d30      	cmp	r5, #48	; 0x30
    409c:	9b08      	ldr	r3, [sp, #32]
    409e:	bf08      	it	eq
    40a0:	2301      	moveq	r3, #1
    40a2:	9308      	str	r3, [sp, #32]
    40a4:	e7a0      	b.n	3fe8 <z_prf+0x4c>
					fplus = true;
    40a6:	2301      	movs	r3, #1
    40a8:	9309      	str	r3, [sp, #36]	; 0x24
    40aa:	e79d      	b.n	3fe8 <z_prf+0x4c>
					fspace = true;
    40ac:	2301      	movs	r3, #1
    40ae:	930c      	str	r3, [sp, #48]	; 0x30
    40b0:	e79a      	b.n	3fe8 <z_prf+0x4c>
					falt = true;
    40b2:	f04f 0a01 	mov.w	sl, #1
    40b6:	e797      	b.n	3fe8 <z_prf+0x4c>
				switch (c) {
    40b8:	2301      	movs	r3, #1
    40ba:	930d      	str	r3, [sp, #52]	; 0x34
    40bc:	e794      	b.n	3fe8 <z_prf+0x4c>
			fminus = fplus = fspace = falt = fzero = false;
    40be:	2300      	movs	r3, #0
    40c0:	9308      	str	r3, [sp, #32]
    40c2:	930c      	str	r3, [sp, #48]	; 0x30
    40c4:	9309      	str	r3, [sp, #36]	; 0x24
    40c6:	930d      	str	r3, [sp, #52]	; 0x34
    40c8:	469a      	mov	sl, r3
    40ca:	e78f      	b.n	3fec <z_prf+0x50>
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    40cc:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
			} else if (!isdigit((int)c)) {
    40d0:	2b09      	cmp	r3, #9
				width = 0;
    40d2:	9007      	str	r0, [sp, #28]
			} else if (!isdigit((int)c)) {
    40d4:	d8a4      	bhi.n	4020 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    40d6:	220a      	movs	r2, #10
	while (isdigit((int)*p)) {
    40d8:	f8dd 8018 	ldr.w	r8, [sp, #24]
    40dc:	f818 5b01 	ldrb.w	r5, [r8], #1
    40e0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    40e4:	2b09      	cmp	r3, #9
    40e6:	d89b      	bhi.n	4020 <z_prf+0x84>
		i = 10 * i + *p++ - '0';
    40e8:	9b07      	ldr	r3, [sp, #28]
    40ea:	fb02 5503 	mla	r5, r2, r3, r5
    40ee:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
    40f2:	e9cd 8306 	strd	r8, r3, [sp, #24]
    40f6:	e7ef      	b.n	40d8 <z_prf+0x13c>
    40f8:	fb01 3404 	mla	r4, r1, r4, r3
    40fc:	3c30      	subs	r4, #48	; 0x30
    40fe:	4690      	mov	r8, r2
	while (isdigit((int)*p)) {
    4100:	4642      	mov	r2, r8
    4102:	f812 3b01 	ldrb.w	r3, [r2], #1
    4106:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    410a:	2809      	cmp	r0, #9
    410c:	d9f4      	bls.n	40f8 <z_prf+0x15c>
    410e:	e791      	b.n	4034 <z_prf+0x98>
	int i = 0;
    4110:	2400      	movs	r4, #0
		i = 10 * i + *p++ - '0';
    4112:	210a      	movs	r1, #10
    4114:	e7f4      	b.n	4100 <z_prf+0x164>
			precision = -1;
    4116:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    411a:	e78d      	b.n	4038 <z_prf+0x9c>
    411c:	f8cd 8018 	str.w	r8, [sp, #24]
			i = 0;
    4120:	4607      	mov	r7, r0
    4122:	e79e      	b.n	4062 <z_prf+0xc6>
    4124:	f1a5 0358 	sub.w	r3, r5, #88	; 0x58
    4128:	2b20      	cmp	r3, #32
    412a:	d8a5      	bhi.n	4078 <z_prf+0xdc>
    412c:	a201      	add	r2, pc, #4	; (adr r2, 4134 <z_prf+0x198>)
    412e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    4132:	bf00      	nop
    4134:	000047b9 	.word	0x000047b9
    4138:	00004079 	.word	0x00004079
    413c:	00004079 	.word	0x00004079
    4140:	00004079 	.word	0x00004079
    4144:	00004079 	.word	0x00004079
    4148:	00004079 	.word	0x00004079
    414c:	00004079 	.word	0x00004079
    4150:	00004079 	.word	0x00004079
    4154:	00004079 	.word	0x00004079
    4158:	00004079 	.word	0x00004079
    415c:	00004079 	.word	0x00004079
    4160:	0000428d 	.word	0x0000428d
    4164:	00004363 	.word	0x00004363
    4168:	000041c5 	.word	0x000041c5
    416c:	000041c5 	.word	0x000041c5
    4170:	000041c5 	.word	0x000041c5
    4174:	00004079 	.word	0x00004079
    4178:	00004363 	.word	0x00004363
    417c:	00004079 	.word	0x00004079
    4180:	00004079 	.word	0x00004079
    4184:	00004079 	.word	0x00004079
    4188:	00004079 	.word	0x00004079
    418c:	00004745 	.word	0x00004745
    4190:	000047b9 	.word	0x000047b9
    4194:	0000476f 	.word	0x0000476f
    4198:	00004079 	.word	0x00004079
    419c:	00004079 	.word	0x00004079
    41a0:	00004791 	.word	0x00004791
    41a4:	00004079 	.word	0x00004079
    41a8:	000047b9 	.word	0x000047b9
    41ac:	00004079 	.word	0x00004079
    41b0:	00004079 	.word	0x00004079
    41b4:	000047b9 	.word	0x000047b9
			switch (c) {
    41b8:	f1a5 0345 	sub.w	r3, r5, #69	; 0x45
    41bc:	b2db      	uxtb	r3, r3
    41be:	2b02      	cmp	r3, #2
    41c0:	f63f af5a 	bhi.w	4078 <z_prf+0xdc>
				u.d = va_arg(vargs, double);
    41c4:	3607      	adds	r6, #7
    41c6:	f026 0307 	bic.w	r3, r6, #7
    41ca:	4619      	mov	r1, r3
    41cc:	e8f1 2302 	ldrd	r2, r3, [r1], #8
	fract = (double_temp << 11) & ~HIGHBIT64;
    41d0:	02d8      	lsls	r0, r3, #11
    41d2:	ea40 5052 	orr.w	r0, r0, r2, lsr #21
    41d6:	02d6      	lsls	r6, r2, #11
    41d8:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
    41dc:	9604      	str	r6, [sp, #16]
    41de:	9005      	str	r0, [sp, #20]
    41e0:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
	if (sign) {
    41e4:	2a00      	cmp	r2, #0
				u.d = va_arg(vargs, double);
    41e6:	9101      	str	r1, [sp, #4]
	exp = double_temp >> 52 & 0x7ff;
    41e8:	f3c3 510a 	ubfx	r1, r3, #20, #11
	if (sign) {
    41ec:	f173 0300 	sbcs.w	r3, r3, #0
	fract = (double_temp << 11) & ~HIGHBIT64;
    41f0:	e9cd 6714 	strd	r6, r7, [sp, #80]	; 0x50
	if (sign) {
    41f4:	f280 80e5 	bge.w	43c2 <z_prf+0x426>
		*buf++ = '-';
    41f8:	232d      	movs	r3, #45	; 0x2d
		*buf++ = ' ';
    41fa:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    41fe:	f10d 0765 	add.w	r7, sp, #101	; 0x65
	if (exp == 0x7ff) {
    4202:	f240 73ff 	movw	r3, #2047	; 0x7ff
    4206:	4299      	cmp	r1, r3
    4208:	f040 80f6 	bne.w	43f8 <z_prf+0x45c>
		if (!fract) {
    420c:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
    4210:	430a      	orrs	r2, r1
    4212:	f1a5 0541 	sub.w	r5, r5, #65	; 0x41
    4216:	f107 0303 	add.w	r3, r7, #3
    421a:	f040 80e2 	bne.w	43e2 <z_prf+0x446>
			if (isupper((int)c)) {
    421e:	2d19      	cmp	r5, #25
    4220:	f200 80d9 	bhi.w	43d6 <z_prf+0x43a>
				*buf++ = 'I';
    4224:	2249      	movs	r2, #73	; 0x49
    4226:	703a      	strb	r2, [r7, #0]
				*buf++ = 'N';
    4228:	224e      	movs	r2, #78	; 0x4e
    422a:	707a      	strb	r2, [r7, #1]
				*buf++ = 'F';
    422c:	2246      	movs	r2, #70	; 0x46
		*buf = 0;
    422e:	2400      	movs	r4, #0
		return buf - start;
    4230:	ae19      	add	r6, sp, #100	; 0x64
				*buf++ = 'n';
    4232:	70ba      	strb	r2, [r7, #2]
		*buf = 0;
    4234:	70fc      	strb	r4, [r7, #3]
		return buf - start;
    4236:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    4238:	46a2      	mov	sl, r4
    423a:	46a3      	mov	fp, r4
				if (fplus || fspace || (buf[0] == '-')) {
    423c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    423e:	2a00      	cmp	r2, #0
    4240:	f040 827d 	bne.w	473e <z_prf+0x7a2>
    4244:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    4246:	2a00      	cmp	r2, #0
    4248:	f040 8279 	bne.w	473e <z_prf+0x7a2>
    424c:	f89d 8064 	ldrb.w	r8, [sp, #100]	; 0x64
    4250:	f1a8 022d 	sub.w	r2, r8, #45	; 0x2d
    4254:	f1d2 0800 	rsbs	r8, r2, #0
    4258:	eb48 0802 	adc.w	r8, r8, r2
				clen += zero.predot + zero.postdot + zero.trail;
    425c:	eb0b 060a 	add.w	r6, fp, sl
    4260:	4433      	add	r3, r6
    4262:	191e      	adds	r6, r3, r4
				if (!isdigit((int)buf[prefix])) {
    4264:	ab20      	add	r3, sp, #128	; 0x80
    4266:	4443      	add	r3, r8
    4268:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
    426c:	3b30      	subs	r3, #48	; 0x30
    426e:	2b09      	cmp	r3, #9
    4270:	f200 82fe 	bhi.w	4870 <z_prf+0x8d4>
			} else if (fzero) {
    4274:	9b08      	ldr	r3, [sp, #32]
    4276:	2b00      	cmp	r3, #0
    4278:	f000 82fd 	beq.w	4876 <z_prf+0x8da>
    427c:	9b07      	ldr	r3, [sp, #28]
    427e:	af19      	add	r7, sp, #100	; 0x64
    4280:	1b9b      	subs	r3, r3, r6
    4282:	e014      	b.n	42ae <z_prf+0x312>
    4284:	000209e6 	.word	0x000209e6
    4288:	000209ec 	.word	0x000209ec
				buf[0] = va_arg(vargs, int);
    428c:	4632      	mov	r2, r6
				break;
    428e:	f04f 0800 	mov.w	r8, #0
				buf[0] = va_arg(vargs, int);
    4292:	f852 3b04 	ldr.w	r3, [r2], #4
    4296:	9201      	str	r2, [sp, #4]
    4298:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
				clen = 1;
    429c:	2601      	movs	r6, #1
				break;
    429e:	4644      	mov	r4, r8
    42a0:	af19      	add	r7, sp, #100	; 0x64
				zero_head = precision - clen + prefix;
    42a2:	eb04 0308 	add.w	r3, r4, r8
			zero.predot = zero.postdot = zero.trail = 0;
    42a6:	2400      	movs	r4, #0
				zero_head = precision - clen + prefix;
    42a8:	1b9b      	subs	r3, r3, r6
			zero.predot = zero.postdot = zero.trail = 0;
    42aa:	46a2      	mov	sl, r4
    42ac:	46a3      	mov	fp, r4
			if (zero_head < 0) {
    42ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			width -= clen + zero_head;
    42b2:	199a      	adds	r2, r3, r6
    42b4:	9208      	str	r2, [sp, #32]
    42b6:	9a07      	ldr	r2, [sp, #28]
    42b8:	1999      	adds	r1, r3, r6
    42ba:	1a55      	subs	r5, r2, r1
			if (!fminus && width > 0) {
    42bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    42be:	b912      	cbnz	r2, 42c6 <z_prf+0x32a>
    42c0:	2d00      	cmp	r5, #0
    42c2:	f300 82ed 	bgt.w	48a0 <z_prf+0x904>
			while (prefix-- > 0) {
    42c6:	eb07 0208 	add.w	r2, r7, r8
    42ca:	42ba      	cmp	r2, r7
    42cc:	f040 82ea 	bne.w	48a4 <z_prf+0x908>
			while (zero_head-- > 0) {
    42d0:	3b01      	subs	r3, #1
    42d2:	f080 82f5 	bcs.w	48c0 <z_prf+0x924>
			clen -= prefix;
    42d6:	eba6 0608 	sub.w	r6, r6, r8
			if (zero.predot) {
    42da:	f1bb 0f00 	cmp.w	fp, #0
    42de:	d010      	beq.n	4302 <z_prf+0x366>
				c = *cptr;
    42e0:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c)) {
    42e2:	eb07 0806 	add.w	r8, r7, r6
    42e6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    42ea:	2b09      	cmp	r3, #9
    42ec:	eba8 0607 	sub.w	r6, r8, r7
    42f0:	f240 82f1 	bls.w	48d6 <z_prf+0x93a>
    42f4:	46d8      	mov	r8, fp
				while (zero.predot-- > 0) {
    42f6:	f1b8 0801 	subs.w	r8, r8, #1
    42fa:	f080 82f5 	bcs.w	48e8 <z_prf+0x94c>
				clen -= zero.predot;
    42fe:	eba6 060b 	sub.w	r6, r6, fp
			if (zero.postdot) {
    4302:	f1ba 0f00 	cmp.w	sl, #0
    4306:	d016      	beq.n	4336 <z_prf+0x39a>
    4308:	eb07 0806 	add.w	r8, r7, r6
					c = *cptr++;
    430c:	f817 bb01 	ldrb.w	fp, [r7], #1
					PUTC(c);
    4310:	9b03      	ldr	r3, [sp, #12]
    4312:	4649      	mov	r1, r9
    4314:	4658      	mov	r0, fp
    4316:	4798      	blx	r3
    4318:	3001      	adds	r0, #1
    431a:	f43f ae55 	beq.w	3fc8 <z_prf+0x2c>
				} while (c != '.');
    431e:	f1bb 0f2e 	cmp.w	fp, #46	; 0x2e
    4322:	eba8 0607 	sub.w	r6, r8, r7
    4326:	d1f1      	bne.n	430c <z_prf+0x370>
				while (zero.postdot-- > 0) {
    4328:	46d0      	mov	r8, sl
    432a:	f1b8 0f00 	cmp.w	r8, #0
    432e:	f300 82e4 	bgt.w	48fa <z_prf+0x95e>
				clen -= zero.postdot;
    4332:	eba6 060a 	sub.w	r6, r6, sl
			if (zero.trail) {
    4336:	b194      	cbz	r4, 435e <z_prf+0x3c2>
				c = *cptr;
    4338:	7838      	ldrb	r0, [r7, #0]
				while (isdigit((int)c) || c == '.') {
    433a:	eb07 0806 	add.w	r8, r7, r6
    433e:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
    4342:	2b09      	cmp	r3, #9
    4344:	eba8 0607 	sub.w	r6, r8, r7
    4348:	f240 82e2 	bls.w	4910 <z_prf+0x974>
    434c:	282e      	cmp	r0, #46	; 0x2e
    434e:	f000 82df 	beq.w	4910 <z_prf+0x974>
				while (zero.trail-- > 0) {
    4352:	46a0      	mov	r8, r4
    4354:	f1b8 0f00 	cmp.w	r8, #0
    4358:	f300 82e3 	bgt.w	4922 <z_prf+0x986>
				clen -= zero.trail;
    435c:	1b36      	subs	r6, r6, r4
    435e:	443e      	add	r6, r7
    4360:	e2f2      	b.n	4948 <z_prf+0x9ac>
				switch (i) {
    4362:	6835      	ldr	r5, [r6, #0]
	if (value < 0) {
    4364:	1d33      	adds	r3, r6, #4
    4366:	2d00      	cmp	r5, #0
    4368:	9301      	str	r3, [sp, #4]
    436a:	da1c      	bge.n	43a6 <z_prf+0x40a>
		*buf++ = '-';
    436c:	232d      	movs	r3, #45	; 0x2d
    436e:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		value = -value;
    4372:	4269      	negs	r1, r5
		*buf++ = ' ';
    4374:	f10d 0665 	add.w	r6, sp, #101	; 0x65
	return _to_x(buf, value, 10);
    4378:	4630      	mov	r0, r6
    437a:	220a      	movs	r2, #10
    437c:	f016 f85a 	bl	1a434 <_to_x>
				if (fplus || fspace || val < 0) {
    4380:	9b09      	ldr	r3, [sp, #36]	; 0x24
	return (buf + _to_udec(buf, value)) - start;
    4382:	4406      	add	r6, r0
    4384:	a819      	add	r0, sp, #100	; 0x64
    4386:	1a36      	subs	r6, r6, r0
				if (fplus || fspace || val < 0) {
    4388:	2b00      	cmp	r3, #0
    438a:	f040 826c 	bne.w	4866 <z_prf+0x8ca>
    438e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4390:	2b00      	cmp	r3, #0
    4392:	f040 8268 	bne.w	4866 <z_prf+0x8ca>
    4396:	ea4f 78d5 	mov.w	r8, r5, lsr #31
			if (precision >= 0) {
    439a:	2c00      	cmp	r4, #0
    439c:	da80      	bge.n	42a0 <z_prf+0x304>
			zero.predot = zero.postdot = zero.trail = 0;
    439e:	2400      	movs	r4, #0
    43a0:	46a2      	mov	sl, r4
    43a2:	46a3      	mov	fp, r4
    43a4:	e766      	b.n	4274 <z_prf+0x2d8>
	} else if (fplus) {
    43a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43a8:	b123      	cbz	r3, 43b4 <z_prf+0x418>
		*buf++ = '+';
    43aa:	232b      	movs	r3, #43	; 0x2b
		*buf++ = ' ';
    43ac:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
    43b0:	4629      	mov	r1, r5
    43b2:	e7df      	b.n	4374 <z_prf+0x3d8>
	} else if (fspace) {
    43b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    43b6:	b10b      	cbz	r3, 43bc <z_prf+0x420>
		*buf++ = ' ';
    43b8:	2320      	movs	r3, #32
    43ba:	e7f7      	b.n	43ac <z_prf+0x410>
    43bc:	4629      	mov	r1, r5
    43be:	ae19      	add	r6, sp, #100	; 0x64
    43c0:	e7da      	b.n	4378 <z_prf+0x3dc>
	} else if (fplus) {
    43c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
    43c4:	b10b      	cbz	r3, 43ca <z_prf+0x42e>
		*buf++ = '+';
    43c6:	232b      	movs	r3, #43	; 0x2b
    43c8:	e717      	b.n	41fa <z_prf+0x25e>
	} else if (fspace) {
    43ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    43cc:	b10b      	cbz	r3, 43d2 <z_prf+0x436>
		*buf++ = ' ';
    43ce:	2320      	movs	r3, #32
    43d0:	e713      	b.n	41fa <z_prf+0x25e>
    43d2:	af19      	add	r7, sp, #100	; 0x64
    43d4:	e715      	b.n	4202 <z_prf+0x266>
				*buf++ = 'i';
    43d6:	2269      	movs	r2, #105	; 0x69
    43d8:	703a      	strb	r2, [r7, #0]
				*buf++ = 'n';
    43da:	226e      	movs	r2, #110	; 0x6e
    43dc:	707a      	strb	r2, [r7, #1]
				*buf++ = 'f';
    43de:	2266      	movs	r2, #102	; 0x66
    43e0:	e725      	b.n	422e <z_prf+0x292>
			if (isupper((int)c)) {
    43e2:	2d19      	cmp	r5, #25
				*buf++ = 'N';
    43e4:	bf99      	ittee	ls
    43e6:	224e      	movls	r2, #78	; 0x4e
				*buf++ = 'A';
    43e8:	2141      	movls	r1, #65	; 0x41
				*buf++ = 'n';
    43ea:	226e      	movhi	r2, #110	; 0x6e
				*buf++ = 'a';
    43ec:	2161      	movhi	r1, #97	; 0x61
				*buf++ = 'N';
    43ee:	bf94      	ite	ls
    43f0:	703a      	strbls	r2, [r7, #0]
				*buf++ = 'n';
    43f2:	703a      	strbhi	r2, [r7, #0]
				*buf++ = 'a';
    43f4:	7079      	strb	r1, [r7, #1]
    43f6:	e71a      	b.n	422e <z_prf+0x292>
	if ((exp | fract) != 0) {
    43f8:	9b04      	ldr	r3, [sp, #16]
    43fa:	9805      	ldr	r0, [sp, #20]
    43fc:	430b      	orrs	r3, r1
    43fe:	930e      	str	r3, [sp, #56]	; 0x38
    4400:	17cb      	asrs	r3, r1, #31
    4402:	4303      	orrs	r3, r0
    4404:	930f      	str	r3, [sp, #60]	; 0x3c
    4406:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
		c = 'f';
    440a:	2d46      	cmp	r5, #70	; 0x46
    440c:	bf08      	it	eq
    440e:	2566      	moveq	r5, #102	; 0x66
	if ((exp | fract) != 0) {
    4410:	4313      	orrs	r3, r2
    4412:	f000 8107 	beq.w	4624 <z_prf+0x688>
		if (exp == 0) {
    4416:	2900      	cmp	r1, #0
    4418:	f000 809f 	beq.w	455a <z_prf+0x5be>
		fract |= HIGHBIT64;
    441c:	9b15      	ldr	r3, [sp, #84]	; 0x54
    441e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    4422:	f2a1 38fe 	subw	r8, r1, #1022	; 0x3fe
		fract |= HIGHBIT64;
    4426:	9315      	str	r3, [sp, #84]	; 0x54
    4428:	2600      	movs	r6, #0
	while (exp <= -3) {
    442a:	f118 0f02 	cmn.w	r8, #2
    442e:	f2c0 80a8 	blt.w	4582 <z_prf+0x5e6>
	while (exp > 0) {
    4432:	f1b8 0f00 	cmp.w	r8, #0
    4436:	f300 80d4 	bgt.w	45e2 <z_prf+0x646>
		_rlrshift(&fract);
    443a:	a814      	add	r0, sp, #80	; 0x50
		exp++;
    443c:	f108 0801 	add.w	r8, r8, #1
		_rlrshift(&fract);
    4440:	f016 f81c 	bl	1a47c <_rlrshift>
	while (exp < (0 + 4)) {
    4444:	f1b8 0f04 	cmp.w	r8, #4
    4448:	d1f7      	bne.n	443a <z_prf+0x49e>
		precision = 6;		/* Default precision if none given */
    444a:	2c00      	cmp	r4, #0
	if ((c == 'g') || (c == 'G')) {
    444c:	f005 03df 	and.w	r3, r5, #223	; 0xdf
		precision = 6;		/* Default precision if none given */
    4450:	bfb8      	it	lt
    4452:	2406      	movlt	r4, #6
	if ((c == 'g') || (c == 'G')) {
    4454:	2b47      	cmp	r3, #71	; 0x47
    4456:	f040 80ee 	bne.w	4636 <z_prf+0x69a>
		if (decexp < (-4 + 1) || decexp > precision) {
    445a:	1cf1      	adds	r1, r6, #3
    445c:	db02      	blt.n	4464 <z_prf+0x4c8>
    445e:	42b4      	cmp	r4, r6
    4460:	f280 80e3 	bge.w	462a <z_prf+0x68e>
			c += 'e' - 'g';
    4464:	3d02      	subs	r5, #2
    4466:	b2ed      	uxtb	r5, r5
			if (precision > 0) {
    4468:	2c00      	cmp	r4, #0
    446a:	f000 80ea 	beq.w	4642 <z_prf+0x6a6>
				precision--;
    446e:	3c01      	subs	r4, #1
		if (!falt && (precision > 0)) {
    4470:	f1ba 0f00 	cmp.w	sl, #0
    4474:	f040 80e5 	bne.w	4642 <z_prf+0x6a6>
    4478:	2c00      	cmp	r4, #0
    447a:	bfd4      	ite	le
    447c:	f04f 0800 	movle.w	r8, #0
    4480:	f04f 0801 	movgt.w	r8, #1
	if (c == 'f') {
    4484:	2d66      	cmp	r5, #102	; 0x66
    4486:	f040 80de 	bne.w	4646 <z_prf+0x6aa>
		if (exp < 0) {
    448a:	eb14 0b06 	adds.w	fp, r4, r6
    448e:	f04f 0566 	mov.w	r5, #102	; 0x66
    4492:	f100 80db 	bmi.w	464c <z_prf+0x6b0>
	if (exp > 16) {
    4496:	f1bb 0f10 	cmp.w	fp, #16
    449a:	bfa8      	it	ge
    449c:	f04f 0b10 	movge.w	fp, #16
    44a0:	2310      	movs	r3, #16
    44a2:	9313      	str	r3, [sp, #76]	; 0x4c
	ltemp = 0x0800000000000000;
    44a4:	2200      	movs	r2, #0
    44a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    44aa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
	while (exp--) {
    44ae:	f1bb 0b01 	subs.w	fp, fp, #1
    44b2:	f080 80ce 	bcs.w	4652 <z_prf+0x6b6>
	fract += ltemp;
    44b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
    44b8:	9a16      	ldr	r2, [sp, #88]	; 0x58
    44ba:	9917      	ldr	r1, [sp, #92]	; 0x5c
    44bc:	189b      	adds	r3, r3, r2
    44be:	9a15      	ldr	r2, [sp, #84]	; 0x54
    44c0:	eb41 0202 	adc.w	r2, r1, r2
    44c4:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
	if ((fract >> 32) & 0xF0000000) {
    44c8:	f002 4370 	and.w	r3, r2, #4026531840	; 0xf0000000
    44cc:	9310      	str	r3, [sp, #64]	; 0x40
    44ce:	2300      	movs	r3, #0
    44d0:	9311      	str	r3, [sp, #68]	; 0x44
    44d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
    44d6:	4313      	orrs	r3, r2
    44d8:	d006      	beq.n	44e8 <z_prf+0x54c>
		_ldiv5(&fract);
    44da:	a814      	add	r0, sp, #80	; 0x50
    44dc:	f015 ffe0 	bl	1a4a0 <_ldiv5>
		_rlrshift(&fract);
    44e0:	a814      	add	r0, sp, #80	; 0x50
    44e2:	f015 ffcb 	bl	1a47c <_rlrshift>
		decexp++;
    44e6:	3601      	adds	r6, #1
	if (c == 'f') {
    44e8:	2d66      	cmp	r5, #102	; 0x66
    44ea:	f040 80cf 	bne.w	468c <z_prf+0x6f0>
		if (decexp > 0) {
    44ee:	2e00      	cmp	r6, #0
    44f0:	f340 80b6 	ble.w	4660 <z_prf+0x6c4>
			while (decexp > 0 && digit_count > 0) {
    44f4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
    44f6:	2b00      	cmp	r3, #0
    44f8:	dd07      	ble.n	450a <z_prf+0x56e>
				*buf++ = _get_digit(&fract, &digit_count);
    44fa:	a913      	add	r1, sp, #76	; 0x4c
    44fc:	a814      	add	r0, sp, #80	; 0x50
    44fe:	f015 fff8 	bl	1a4f2 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    4502:	3e01      	subs	r6, #1
				*buf++ = _get_digit(&fract, &digit_count);
    4504:	f807 0b01 	strb.w	r0, [r7], #1
			while (decexp > 0 && digit_count > 0) {
    4508:	d1f4      	bne.n	44f4 <z_prf+0x558>
			zp->predot = decexp;
    450a:	46b3      	mov	fp, r6
    450c:	463b      	mov	r3, r7
			decexp = 0;
    450e:	2600      	movs	r6, #0
		if (falt || (precision > 0)) {
    4510:	f1ba 0f00 	cmp.w	sl, #0
    4514:	d101      	bne.n	451a <z_prf+0x57e>
    4516:	2c00      	cmp	r4, #0
    4518:	dd15      	ble.n	4546 <z_prf+0x5aa>
			*buf++ = '.';
    451a:	222e      	movs	r2, #46	; 0x2e
    451c:	f803 2b01 	strb.w	r2, [r3], #1
		if (decexp < 0 && precision > 0) {
    4520:	2e00      	cmp	r6, #0
    4522:	f000 80ae 	beq.w	4682 <z_prf+0x6e6>
    4526:	2c00      	cmp	r4, #0
    4528:	f340 80ad 	ble.w	4686 <z_prf+0x6ea>
			zp->postdot = -decexp;
    452c:	f1c6 0a00 	rsb	sl, r6, #0
    4530:	45a2      	cmp	sl, r4
    4532:	bfa8      	it	ge
    4534:	46a2      	movge	sl, r4
			precision -= zp->postdot;
    4536:	eba4 040a 	sub.w	r4, r4, sl
		while (precision > 0 && digit_count > 0) {
    453a:	2c00      	cmp	r4, #0
    453c:	dd03      	ble.n	4546 <z_prf+0x5aa>
    453e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4540:	2a00      	cmp	r2, #0
    4542:	f300 8094 	bgt.w	466e <z_prf+0x6d2>
	if (prune_zero) {
    4546:	f1b8 0f00 	cmp.w	r8, #0
    454a:	f040 80b4 	bne.w	46b6 <z_prf+0x71a>
	*buf = 0;
    454e:	2200      	movs	r2, #0
	return buf - start;
    4550:	ae19      	add	r6, sp, #100	; 0x64
	*buf = 0;
    4552:	701a      	strb	r2, [r3, #0]
	return buf - start;
    4554:	1b9b      	subs	r3, r3, r6
    4556:	e671      	b.n	423c <z_prf+0x2a0>
				exp--;
    4558:	3901      	subs	r1, #1
			while (((fract <<= 1) & HIGHBIT64) == 0) {
    455a:	9b04      	ldr	r3, [sp, #16]
    455c:	18db      	adds	r3, r3, r3
    455e:	9304      	str	r3, [sp, #16]
    4560:	9b05      	ldr	r3, [sp, #20]
    4562:	415b      	adcs	r3, r3
    4564:	9305      	str	r3, [sp, #20]
    4566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    456a:	2a00      	cmp	r2, #0
    456c:	f173 0300 	sbcs.w	r3, r3, #0
    4570:	daf2      	bge.n	4558 <z_prf+0x5bc>
    4572:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    4576:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    457a:	e74f      	b.n	441c <z_prf+0x480>
			_rlrshift(&fract);
    457c:	a814      	add	r0, sp, #80	; 0x50
    457e:	f015 ff7d 	bl	1a47c <_rlrshift>
		while ((fract >> 32) >= (MAXFP1 / 5)) {
    4582:	e9dd 2c14 	ldrd	r2, ip, [sp, #80]	; 0x50
    4586:	2300      	movs	r3, #0
    4588:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
    458c:	930b      	str	r3, [sp, #44]	; 0x2c
    458e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    4592:	2900      	cmp	r1, #0
    4594:	bf08      	it	eq
    4596:	f1b0 3f33 	cmpeq.w	r0, #858993459	; 0x33333333
    459a:	f108 0801 	add.w	r8, r8, #1
    459e:	d2ed      	bcs.n	457c <z_prf+0x5e0>
		fract *= 5U;
    45a0:	2005      	movs	r0, #5
    45a2:	fba2 2300 	umull	r2, r3, r2, r0
    45a6:	fb00 330c 	mla	r3, r0, ip, r3
    45aa:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
		decexp--;
    45ae:	3e01      	subs	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    45b0:	f04f 0e00 	mov.w	lr, #0
    45b4:	2100      	movs	r1, #0
    45b6:	f04f 0c00 	mov.w	ip, #0
    45ba:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    45be:	458c      	cmp	ip, r1
    45c0:	bf08      	it	eq
    45c2:	459b      	cmpeq	fp, r3
    45c4:	d206      	bcs.n	45d4 <z_prf+0x638>
    45c6:	f1be 0f00 	cmp.w	lr, #0
    45ca:	f43f af2e 	beq.w	442a <z_prf+0x48e>
    45ce:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
    45d2:	e72a      	b.n	442a <z_prf+0x48e>
			fract <<= 1;
    45d4:	1892      	adds	r2, r2, r2
    45d6:	415b      	adcs	r3, r3
			exp--;
    45d8:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    45dc:	f04f 0e01 	mov.w	lr, #1
    45e0:	e7e8      	b.n	45b4 <z_prf+0x618>
		_ldiv5(&fract);
    45e2:	a814      	add	r0, sp, #80	; 0x50
    45e4:	f015 ff5c 	bl	1a4a0 <_ldiv5>
		exp--;
    45e8:	e9dd 1014 	ldrd	r1, r0, [sp, #80]	; 0x50
    45ec:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
		decexp++;
    45f0:	3601      	adds	r6, #1
		while ((fract >> 32) <= (MAXFP1 / 2)) {
    45f2:	f04f 0e00 	mov.w	lr, #0
    45f6:	2300      	movs	r3, #0
    45f8:	f04f 0c00 	mov.w	ip, #0
    45fc:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
    4600:	459c      	cmp	ip, r3
    4602:	bf08      	it	eq
    4604:	4583      	cmpeq	fp, r0
    4606:	d206      	bcs.n	4616 <z_prf+0x67a>
    4608:	f1be 0f00 	cmp.w	lr, #0
    460c:	f43f af11 	beq.w	4432 <z_prf+0x496>
    4610:	e9cd 1014 	strd	r1, r0, [sp, #80]	; 0x50
    4614:	e70d      	b.n	4432 <z_prf+0x496>
			fract <<= 1;
    4616:	1849      	adds	r1, r1, r1
    4618:	4140      	adcs	r0, r0
			exp--;
    461a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    461e:	f04f 0e01 	mov.w	lr, #1
    4622:	e7e8      	b.n	45f6 <z_prf+0x65a>
    4624:	2600      	movs	r6, #0
    4626:	46b0      	mov	r8, r6
    4628:	e707      	b.n	443a <z_prf+0x49e>
			precision -= decexp;
    462a:	1ba4      	subs	r4, r4, r6
		if (!falt && (precision > 0)) {
    462c:	f1ba 0f00 	cmp.w	sl, #0
    4630:	d104      	bne.n	463c <z_prf+0x6a0>
			c = 'f';
    4632:	2566      	movs	r5, #102	; 0x66
    4634:	e720      	b.n	4478 <z_prf+0x4dc>
	prune_zero = false;		/* Assume trailing 0's allowed     */
    4636:	f04f 0800 	mov.w	r8, #0
    463a:	e723      	b.n	4484 <z_prf+0x4e8>
    463c:	f04f 0800 	mov.w	r8, #0
    4640:	e723      	b.n	448a <z_prf+0x4ee>
    4642:	f04f 0800 	mov.w	r8, #0
		exp = precision + 1;
    4646:	f104 0b01 	add.w	fp, r4, #1
    464a:	e724      	b.n	4496 <z_prf+0x4fa>
			exp = 0;
    464c:	f04f 0b00 	mov.w	fp, #0
    4650:	e726      	b.n	44a0 <z_prf+0x504>
		_ldiv5(&ltemp);
    4652:	a816      	add	r0, sp, #88	; 0x58
    4654:	f015 ff24 	bl	1a4a0 <_ldiv5>
		_rlrshift(&ltemp);
    4658:	a816      	add	r0, sp, #88	; 0x58
    465a:	f015 ff0f 	bl	1a47c <_rlrshift>
    465e:	e726      	b.n	44ae <z_prf+0x512>
			*buf++ = '0';
    4660:	463b      	mov	r3, r7
    4662:	2230      	movs	r2, #48	; 0x30
    4664:	f803 2b01 	strb.w	r2, [r3], #1
			zero.predot = zero.postdot = zero.trail = 0;
    4668:	f04f 0b00 	mov.w	fp, #0
    466c:	e750      	b.n	4510 <z_prf+0x574>
			*buf++ = _get_digit(&fract, &digit_count);
    466e:	a913      	add	r1, sp, #76	; 0x4c
    4670:	a814      	add	r0, sp, #80	; 0x50
    4672:	930a      	str	r3, [sp, #40]	; 0x28
    4674:	f015 ff3d 	bl	1a4f2 <_get_digit>
    4678:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    467a:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    467c:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    4680:	e75b      	b.n	453a <z_prf+0x59e>
			zero.predot = zero.postdot = zero.trail = 0;
    4682:	46b2      	mov	sl, r6
    4684:	e759      	b.n	453a <z_prf+0x59e>
    4686:	f04f 0a00 	mov.w	sl, #0
    468a:	e75c      	b.n	4546 <z_prf+0x5aa>
		*buf = _get_digit(&fract, &digit_count);
    468c:	a913      	add	r1, sp, #76	; 0x4c
    468e:	a814      	add	r0, sp, #80	; 0x50
    4690:	f015 ff2f 	bl	1a4f2 <_get_digit>
		if (*buf++ != '0') {
    4694:	2830      	cmp	r0, #48	; 0x30
		*buf = _get_digit(&fract, &digit_count);
    4696:	7038      	strb	r0, [r7, #0]
			decexp--;
    4698:	bf18      	it	ne
    469a:	f106 36ff 	addne.w	r6, r6, #4294967295	; 0xffffffff
		if (falt || (precision > 0)) {
    469e:	f1ba 0f00 	cmp.w	sl, #0
    46a2:	d137      	bne.n	4714 <z_prf+0x778>
    46a4:	2c00      	cmp	r4, #0
    46a6:	dc35      	bgt.n	4714 <z_prf+0x778>
		if (*buf++ != '0') {
    46a8:	1c7b      	adds	r3, r7, #1
	if (prune_zero) {
    46aa:	f1b8 0f00 	cmp.w	r8, #0
    46ae:	d043      	beq.n	4738 <z_prf+0x79c>
			zero.predot = zero.postdot = zero.trail = 0;
    46b0:	f04f 0b00 	mov.w	fp, #0
    46b4:	46da      	mov	sl, fp
		while (*--buf == '0')
    46b6:	4619      	mov	r1, r3
    46b8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    46bc:	2a30      	cmp	r2, #48	; 0x30
    46be:	d0fa      	beq.n	46b6 <z_prf+0x71a>
		if (*buf != '.') {
    46c0:	2a2e      	cmp	r2, #46	; 0x2e
    46c2:	bf18      	it	ne
    46c4:	460b      	movne	r3, r1
    46c6:	2400      	movs	r4, #0
	if ((c == 'e') || (c == 'E')) {
    46c8:	f005 02df 	and.w	r2, r5, #223	; 0xdf
    46cc:	2a45      	cmp	r2, #69	; 0x45
    46ce:	f47f af3e 	bne.w	454e <z_prf+0x5b2>
		if (decexp < 0) {
    46d2:	2e00      	cmp	r6, #0
		*buf++ = c;
    46d4:	4619      	mov	r1, r3
			decexp = -decexp;
    46d6:	bfba      	itte	lt
    46d8:	4276      	neglt	r6, r6
			*buf++ = '-';
    46da:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    46dc:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    46de:	2e63      	cmp	r6, #99	; 0x63
		*buf++ = c;
    46e0:	f801 5b02 	strb.w	r5, [r1], #2
			*buf++ = '-';
    46e4:	705a      	strb	r2, [r3, #1]
		if (decexp >= 100) {
    46e6:	dd08      	ble.n	46fa <z_prf+0x75e>
			*buf++ = (decexp / 100) + '0';
    46e8:	2064      	movs	r0, #100	; 0x64
    46ea:	fb96 f2f0 	sdiv	r2, r6, r0
    46ee:	f102 0530 	add.w	r5, r2, #48	; 0x30
    46f2:	1cd9      	adds	r1, r3, #3
    46f4:	709d      	strb	r5, [r3, #2]
			decexp %= 100;
    46f6:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    46fa:	200a      	movs	r0, #10
    46fc:	460b      	mov	r3, r1
    46fe:	fb96 f2f0 	sdiv	r2, r6, r0
		decexp %= 10;
    4702:	fb00 6612 	mls	r6, r0, r2, r6
		*buf++ = (decexp / 10) + '0';
    4706:	f102 0530 	add.w	r5, r2, #48	; 0x30
		*buf++ = decexp + '0';
    470a:	3630      	adds	r6, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    470c:	f803 5b02 	strb.w	r5, [r3], #2
		*buf++ = decexp + '0';
    4710:	704e      	strb	r6, [r1, #1]
    4712:	e71c      	b.n	454e <z_prf+0x5b2>
			*buf++ = '.';
    4714:	222e      	movs	r2, #46	; 0x2e
    4716:	1cbb      	adds	r3, r7, #2
    4718:	707a      	strb	r2, [r7, #1]
		while (precision > 0 && digit_count > 0) {
    471a:	2c00      	cmp	r4, #0
    471c:	ddc5      	ble.n	46aa <z_prf+0x70e>
    471e:	9a13      	ldr	r2, [sp, #76]	; 0x4c
    4720:	2a00      	cmp	r2, #0
    4722:	ddc2      	ble.n	46aa <z_prf+0x70e>
			*buf++ = _get_digit(&fract, &digit_count);
    4724:	a913      	add	r1, sp, #76	; 0x4c
    4726:	a814      	add	r0, sp, #80	; 0x50
    4728:	930a      	str	r3, [sp, #40]	; 0x28
    472a:	f015 fee2 	bl	1a4f2 <_get_digit>
    472e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			precision--;
    4730:	3c01      	subs	r4, #1
			*buf++ = _get_digit(&fract, &digit_count);
    4732:	f803 0b01 	strb.w	r0, [r3], #1
			precision--;
    4736:	e7f0      	b.n	471a <z_prf+0x77e>
			zero.predot = zero.postdot = zero.trail = 0;
    4738:	46c3      	mov	fp, r8
    473a:	46c2      	mov	sl, r8
    473c:	e7c4      	b.n	46c8 <z_prf+0x72c>
					prefix = 1;
    473e:	f04f 0801 	mov.w	r8, #1
    4742:	e58b      	b.n	425c <z_prf+0x2c0>
				switch (i) {
    4744:	4632      	mov	r2, r6
    4746:	2f68      	cmp	r7, #104	; 0x68
    4748:	f852 3b04 	ldr.w	r3, [r2], #4
    474c:	9201      	str	r2, [sp, #4]
    474e:	d006      	beq.n	475e <z_prf+0x7c2>
    4750:	2f6c      	cmp	r7, #108	; 0x6c
    4752:	d009      	beq.n	4768 <z_prf+0x7cc>
    4754:	2f48      	cmp	r7, #72	; 0x48
    4756:	d107      	bne.n	4768 <z_prf+0x7cc>
					*va_arg(vargs, char *) = count;
    4758:	9a02      	ldr	r2, [sp, #8]
    475a:	701a      	strb	r2, [r3, #0]
					break;
    475c:	e001      	b.n	4762 <z_prf+0x7c6>
					*va_arg(vargs, short *) = count;
    475e:	9a02      	ldr	r2, [sp, #8]
    4760:	801a      	strh	r2, [r3, #0]
				continue;
    4762:	9e01      	ldr	r6, [sp, #4]
    4764:	9a06      	ldr	r2, [sp, #24]
    4766:	e421      	b.n	3fac <z_prf+0x10>
					*va_arg(vargs, int *) = count;
    4768:	9a02      	ldr	r2, [sp, #8]
    476a:	601a      	str	r2, [r3, #0]
					break;
    476c:	e7f9      	b.n	4762 <z_prf+0x7c6>
		*buf++ = '0';
    476e:	f647 0330 	movw	r3, #30768	; 0x7830
    4772:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
	len = _to_x(buf, value, 16);
    4776:	4633      	mov	r3, r6
    4778:	2210      	movs	r2, #16
    477a:	f853 1b04 	ldr.w	r1, [r3], #4
    477e:	9301      	str	r3, [sp, #4]
    4780:	f10d 0066 	add.w	r0, sp, #102	; 0x66
    4784:	f015 fe56 	bl	1a434 <_to_x>
				prefix = 2;
    4788:	f04f 0802 	mov.w	r8, #2
	return len + (buf - buf0);
    478c:	1c86      	adds	r6, r0, #2
				break;
    478e:	e604      	b.n	439a <z_prf+0x3fe>
				cptr = va_arg(vargs, char *);
    4790:	4633      	mov	r3, r6
					precision = INT_MAX;
    4792:	2c00      	cmp	r4, #0
				cptr = va_arg(vargs, char *);
    4794:	f853 7b04 	ldr.w	r7, [r3], #4
    4798:	9301      	str	r3, [sp, #4]
					precision = INT_MAX;
    479a:	bfb8      	it	lt
    479c:	f06f 4400 	mvnlt.w	r4, #2147483648	; 0x80000000
				for (clen = 0; clen < precision; clen++) {
    47a0:	2600      	movs	r6, #0
    47a2:	42b4      	cmp	r4, r6
    47a4:	d103      	bne.n	47ae <z_prf+0x812>
    47a6:	4626      	mov	r6, r4
    47a8:	2400      	movs	r4, #0
    47aa:	46a0      	mov	r8, r4
    47ac:	e579      	b.n	42a2 <z_prf+0x306>
					if (cptr[clen] == '\0') {
    47ae:	5dbb      	ldrb	r3, [r7, r6]
    47b0:	2b00      	cmp	r3, #0
    47b2:	d05b      	beq.n	486c <z_prf+0x8d0>
				for (clen = 0; clen < precision; clen++) {
    47b4:	3601      	adds	r6, #1
    47b6:	e7f4      	b.n	47a2 <z_prf+0x806>
				switch (i) {
    47b8:	1d33      	adds	r3, r6, #4
				if (c == 'o') {
    47ba:	2d6f      	cmp	r5, #111	; 0x6f
    47bc:	6831      	ldr	r1, [r6, #0]
    47be:	9301      	str	r3, [sp, #4]
    47c0:	d119      	bne.n	47f6 <z_prf+0x85a>
	if (alt_form) {
    47c2:	f1ba 0f00 	cmp.w	sl, #0
    47c6:	d008      	beq.n	47da <z_prf+0x83e>
		*buf++ = '0';
    47c8:	2330      	movs	r3, #48	; 0x30
    47ca:	f88d 3064 	strb.w	r3, [sp, #100]	; 0x64
		if (!value) {
    47ce:	b979      	cbnz	r1, 47f0 <z_prf+0x854>
			*buf++ = 0;
    47d0:	f88d 1065 	strb.w	r1, [sp, #101]	; 0x65
			prefix = 0;
    47d4:	4688      	mov	r8, r1
			return 1;
    47d6:	2601      	movs	r6, #1
    47d8:	e5df      	b.n	439a <z_prf+0x3fe>
    47da:	ad19      	add	r5, sp, #100	; 0x64
	return (buf - buf0) + _to_x(buf, value, 8);
    47dc:	4628      	mov	r0, r5
    47de:	2208      	movs	r2, #8
    47e0:	f015 fe28 	bl	1a434 <_to_x>
    47e4:	ae19      	add	r6, sp, #100	; 0x64
    47e6:	1bad      	subs	r5, r5, r6
    47e8:	182e      	adds	r6, r5, r0
			prefix = 0;
    47ea:	f04f 0800 	mov.w	r8, #0
    47ee:	e5d4      	b.n	439a <z_prf+0x3fe>
		*buf++ = '0';
    47f0:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    47f4:	e7f2      	b.n	47dc <z_prf+0x840>
				} else if (c == 'u') {
    47f6:	2d75      	cmp	r5, #117	; 0x75
    47f8:	d105      	bne.n	4806 <z_prf+0x86a>
	return _to_x(buf, value, 10);
    47fa:	220a      	movs	r2, #10
    47fc:	a819      	add	r0, sp, #100	; 0x64
    47fe:	f015 fe19 	bl	1a434 <_to_x>
    4802:	4606      	mov	r6, r0
    4804:	e7f1      	b.n	47ea <z_prf+0x84e>
	if (alt_form) {
    4806:	f1ba 0f00 	cmp.w	sl, #0
    480a:	d011      	beq.n	4830 <z_prf+0x894>
		*buf++ = '0';
    480c:	f647 0330 	movw	r3, #30768	; 0x7830
    4810:	f8ad 3064 	strh.w	r3, [sp, #100]	; 0x64
		*buf++ = 'x';
    4814:	f10d 0766 	add.w	r7, sp, #102	; 0x66
	len = _to_x(buf, value, 16);
    4818:	2210      	movs	r2, #16
    481a:	4638      	mov	r0, r7
    481c:	f015 fe0a 	bl	1a434 <_to_x>
	if (prefix == 'X') {
    4820:	2d58      	cmp	r5, #88	; 0x58
    4822:	d007      	beq.n	4834 <z_prf+0x898>
	return len + (buf - buf0);
    4824:	ae19      	add	r6, sp, #100	; 0x64
    4826:	1bbf      	subs	r7, r7, r6
    4828:	183e      	adds	r6, r7, r0
						prefix = 2;
    482a:	ea4f 084a 	mov.w	r8, sl, lsl #1
    482e:	e5b4      	b.n	439a <z_prf+0x3fe>
    4830:	af19      	add	r7, sp, #100	; 0x64
    4832:	e7f1      	b.n	4818 <z_prf+0x87c>
    4834:	aa19      	add	r2, sp, #100	; 0x64
		if (*buf >= 'a' && *buf <= 'z') {
    4836:	f812 3b01 	ldrb.w	r3, [r2], #1
    483a:	f1a3 0161 	sub.w	r1, r3, #97	; 0x61
    483e:	2919      	cmp	r1, #25
    4840:	d803      	bhi.n	484a <z_prf+0x8ae>
			*buf += 'A' - 'a';
    4842:	3b20      	subs	r3, #32
    4844:	f802 3c01 	strb.w	r3, [r2, #-1]
	} while (*buf++);
    4848:	e7f5      	b.n	4836 <z_prf+0x89a>
    484a:	f812 3c01 	ldrb.w	r3, [r2, #-1]
    484e:	2b00      	cmp	r3, #0
    4850:	d1f1      	bne.n	4836 <z_prf+0x89a>
    4852:	e7e7      	b.n	4824 <z_prf+0x888>
				PUTC('%');
    4854:	4649      	mov	r1, r9
    4856:	4628      	mov	r0, r5
    4858:	f7ff bbb1 	b.w	3fbe <z_prf+0x22>
				count++;
    485c:	9b02      	ldr	r3, [sp, #8]
    485e:	3301      	adds	r3, #1
				continue;
    4860:	e9cd 6301 	strd	r6, r3, [sp, #4]
    4864:	e77d      	b.n	4762 <z_prf+0x7c6>
					prefix = 1;
    4866:	f04f 0801 	mov.w	r8, #1
    486a:	e596      	b.n	439a <z_prf+0x3fe>
    486c:	461c      	mov	r4, r3
    486e:	e79c      	b.n	47aa <z_prf+0x80e>
			cptr = buf;
    4870:	af19      	add	r7, sp, #100	; 0x64
				zero_head = 0;
    4872:	2300      	movs	r3, #0
    4874:	e51d      	b.n	42b2 <z_prf+0x316>
    4876:	9b08      	ldr	r3, [sp, #32]
    4878:	af19      	add	r7, sp, #100	; 0x64
    487a:	e51a      	b.n	42b2 <z_prf+0x316>
    487c:	9309      	str	r3, [sp, #36]	; 0x24
					PUTC(' ');
    487e:	4649      	mov	r1, r9
    4880:	9b03      	ldr	r3, [sp, #12]
    4882:	9207      	str	r2, [sp, #28]
    4884:	2020      	movs	r0, #32
    4886:	4798      	blx	r3
    4888:	3001      	adds	r0, #1
    488a:	9a07      	ldr	r2, [sp, #28]
    488c:	9b09      	ldr	r3, [sp, #36]	; 0x24
    488e:	f43f ab9b 	beq.w	3fc8 <z_prf+0x2c>
				while (width-- > 0) {
    4892:	3a01      	subs	r2, #1
    4894:	d2f2      	bcs.n	487c <z_prf+0x8e0>
				count += width;
    4896:	9902      	ldr	r1, [sp, #8]
    4898:	4429      	add	r1, r5
    489a:	9102      	str	r1, [sp, #8]
				while (width-- > 0) {
    489c:	4615      	mov	r5, r2
    489e:	e512      	b.n	42c6 <z_prf+0x32a>
    48a0:	462a      	mov	r2, r5
    48a2:	e7f6      	b.n	4892 <z_prf+0x8f6>
    48a4:	9309      	str	r3, [sp, #36]	; 0x24
				PUTC(*cptr++);
    48a6:	f817 0b01 	ldrb.w	r0, [r7], #1
    48aa:	9b03      	ldr	r3, [sp, #12]
    48ac:	9207      	str	r2, [sp, #28]
    48ae:	4649      	mov	r1, r9
    48b0:	4798      	blx	r3
    48b2:	3001      	adds	r0, #1
    48b4:	9a07      	ldr	r2, [sp, #28]
    48b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
    48b8:	f47f ad07 	bne.w	42ca <z_prf+0x32e>
    48bc:	f7ff bb84 	b.w	3fc8 <z_prf+0x2c>
    48c0:	9307      	str	r3, [sp, #28]
				PUTC('0');
    48c2:	4649      	mov	r1, r9
    48c4:	9b03      	ldr	r3, [sp, #12]
    48c6:	2030      	movs	r0, #48	; 0x30
    48c8:	4798      	blx	r3
    48ca:	3001      	adds	r0, #1
    48cc:	9b07      	ldr	r3, [sp, #28]
    48ce:	f47f acff 	bne.w	42d0 <z_prf+0x334>
    48d2:	f7ff bb79 	b.w	3fc8 <z_prf+0x2c>
					PUTC(c);
    48d6:	9b03      	ldr	r3, [sp, #12]
    48d8:	4649      	mov	r1, r9
    48da:	4798      	blx	r3
    48dc:	3001      	adds	r0, #1
    48de:	f43f ab73 	beq.w	3fc8 <z_prf+0x2c>
					c = *++cptr;
    48e2:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    48e6:	e4fe      	b.n	42e6 <z_prf+0x34a>
					PUTC('0');
    48e8:	9b03      	ldr	r3, [sp, #12]
    48ea:	4649      	mov	r1, r9
    48ec:	2030      	movs	r0, #48	; 0x30
    48ee:	4798      	blx	r3
    48f0:	3001      	adds	r0, #1
    48f2:	f47f ad00 	bne.w	42f6 <z_prf+0x35a>
    48f6:	f7ff bb67 	b.w	3fc8 <z_prf+0x2c>
					PUTC('0');
    48fa:	9b03      	ldr	r3, [sp, #12]
    48fc:	4649      	mov	r1, r9
    48fe:	2030      	movs	r0, #48	; 0x30
    4900:	4798      	blx	r3
    4902:	3001      	adds	r0, #1
    4904:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    4908:	f47f ad0f 	bne.w	432a <z_prf+0x38e>
    490c:	f7ff bb5c 	b.w	3fc8 <z_prf+0x2c>
					PUTC(c);
    4910:	9b03      	ldr	r3, [sp, #12]
    4912:	4649      	mov	r1, r9
    4914:	4798      	blx	r3
    4916:	3001      	adds	r0, #1
    4918:	f43f ab56 	beq.w	3fc8 <z_prf+0x2c>
					c = *++cptr;
    491c:	f817 0f01 	ldrb.w	r0, [r7, #1]!
    4920:	e50d      	b.n	433e <z_prf+0x3a2>
					PUTC('0');
    4922:	9b03      	ldr	r3, [sp, #12]
    4924:	4649      	mov	r1, r9
    4926:	2030      	movs	r0, #48	; 0x30
    4928:	4798      	blx	r3
    492a:	3001      	adds	r0, #1
    492c:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    4930:	f47f ad10 	bne.w	4354 <z_prf+0x3b8>
    4934:	f7ff bb48 	b.w	3fc8 <z_prf+0x2c>
				PUTC(*cptr++);
    4938:	f817 0b01 	ldrb.w	r0, [r7], #1
    493c:	9b03      	ldr	r3, [sp, #12]
    493e:	4649      	mov	r1, r9
    4940:	4798      	blx	r3
    4942:	3001      	adds	r0, #1
    4944:	f43f ab40 	beq.w	3fc8 <z_prf+0x2c>
			while (clen-- > 0) {
    4948:	1bf3      	subs	r3, r6, r7
    494a:	2b00      	cmp	r3, #0
    494c:	dcf4      	bgt.n	4938 <z_prf+0x99c>
			count += clen;
    494e:	9b02      	ldr	r3, [sp, #8]
    4950:	9a08      	ldr	r2, [sp, #32]
			if (width > 0) {
    4952:	2d00      	cmp	r5, #0
			count += clen;
    4954:	4413      	add	r3, r2
    4956:	9302      	str	r3, [sp, #8]
			if (width > 0) {
    4958:	f77f af03 	ble.w	4762 <z_prf+0x7c6>
    495c:	462c      	mov	r4, r5
    495e:	e006      	b.n	496e <z_prf+0x9d2>
					PUTC(' ');
    4960:	9b03      	ldr	r3, [sp, #12]
    4962:	4649      	mov	r1, r9
    4964:	2020      	movs	r0, #32
    4966:	4798      	blx	r3
    4968:	3001      	adds	r0, #1
    496a:	f43f ab2d 	beq.w	3fc8 <z_prf+0x2c>
				while (width-- > 0) {
    496e:	3c01      	subs	r4, #1
    4970:	d2f6      	bcs.n	4960 <z_prf+0x9c4>
				count += width;
    4972:	9b02      	ldr	r3, [sp, #8]
    4974:	442b      	add	r3, r5
    4976:	9302      	str	r3, [sp, #8]
    4978:	e6f3      	b.n	4762 <z_prf+0x7c6>
    497a:	bf00      	nop

0000497c <read_pnp_id>:

#if CONFIG_BT_DIS_PNP
static ssize_t read_pnp_id(struct bt_conn *conn,
			   const struct bt_gatt_attr *attr, void *buf,
			   uint16_t len, uint16_t offset)
{
    497c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &dis_pnp_id,
    497e:	2407      	movs	r4, #7
    4980:	9402      	str	r4, [sp, #8]
    4982:	4c04      	ldr	r4, [pc, #16]	; (4994 <read_pnp_id+0x18>)
    4984:	9401      	str	r4, [sp, #4]
    4986:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    498a:	9400      	str	r4, [sp, #0]
    498c:	f018 feea 	bl	1d764 <bt_gatt_attr_read>
				 sizeof(dis_pnp_id));
}
    4990:	b004      	add	sp, #16
    4992:	bd10      	pop	{r4, pc}
    4994:	200009e7 	.word	0x200009e7

00004998 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    4998:	4b10      	ldr	r3, [pc, #64]	; (49dc <settings_save_one+0x44>)
{
    499a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    499e:	681c      	ldr	r4, [r3, #0]
{
    49a0:	4605      	mov	r5, r0
    49a2:	460e      	mov	r6, r1
    49a4:	4617      	mov	r7, r2
	if (!cs) {
    49a6:	b1ac      	cbz	r4, 49d4 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    49a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49b0:	480b      	ldr	r0, [pc, #44]	; (49e0 <settings_save_one+0x48>)
    49b2:	f014 f87d 	bl	18ab0 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    49b6:	6863      	ldr	r3, [r4, #4]
    49b8:	4632      	mov	r2, r6
    49ba:	f8d3 8008 	ldr.w	r8, [r3, #8]
    49be:	4629      	mov	r1, r5
    49c0:	463b      	mov	r3, r7
    49c2:	4620      	mov	r0, r4
    49c4:	47c0      	blx	r8
    49c6:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    49c8:	4805      	ldr	r0, [pc, #20]	; (49e0 <settings_save_one+0x48>)
    49ca:	f014 f8e9 	bl	18ba0 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    49ce:	4620      	mov	r0, r4
    49d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    49d4:	f06f 0401 	mvn.w	r4, #1
    49d8:	e7f9      	b.n	49ce <settings_save_one+0x36>
    49da:	bf00      	nop
    49dc:	20001410 	.word	0x20001410
    49e0:	20000ac8 	.word	0x20000ac8

000049e4 <settings_load_subtree>:
{
    49e4:	b530      	push	{r4, r5, lr}
    49e6:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    49e8:	2300      	movs	r3, #0
{
    49ea:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    49ec:	e9cd 3302 	strd	r3, r3, [sp, #8]
    49f0:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    49f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    49f6:	480c      	ldr	r0, [pc, #48]	; (4a28 <settings_load_subtree+0x44>)
    49f8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    49fc:	f014 f858 	bl	18ab0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4a00:	4b0a      	ldr	r3, [pc, #40]	; (4a2c <settings_load_subtree+0x48>)
    4a02:	681c      	ldr	r4, [r3, #0]
    4a04:	b134      	cbz	r4, 4a14 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    4a06:	6863      	ldr	r3, [r4, #4]
    4a08:	4620      	mov	r0, r4
    4a0a:	681b      	ldr	r3, [r3, #0]
    4a0c:	a901      	add	r1, sp, #4
    4a0e:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4a10:	6824      	ldr	r4, [r4, #0]
	return node->next;
    4a12:	e7f7      	b.n	4a04 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    4a14:	4628      	mov	r0, r5
    4a16:	f000 f83b 	bl	4a90 <settings_commit_subtree>
    4a1a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    4a1c:	4802      	ldr	r0, [pc, #8]	; (4a28 <settings_load_subtree+0x44>)
    4a1e:	f014 f8bf 	bl	18ba0 <z_impl_k_mutex_unlock>
}
    4a22:	4620      	mov	r0, r4
    4a24:	b005      	add	sp, #20
    4a26:	bd30      	pop	{r4, r5, pc}
    4a28:	20000ac8 	.word	0x20000ac8
    4a2c:	20001408 	.word	0x20001408

00004a30 <settings_load_subtree_direct>:
{
    4a30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    4a32:	e9cd 0101 	strd	r0, r1, [sp, #4]
    4a36:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    4a38:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    4a3c:	480a      	ldr	r0, [pc, #40]	; (4a68 <settings_load_subtree_direct+0x38>)
    4a3e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    4a42:	f014 f835 	bl	18ab0 <z_impl_k_mutex_lock>
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    4a46:	4b09      	ldr	r3, [pc, #36]	; (4a6c <settings_load_subtree_direct+0x3c>)
    4a48:	681c      	ldr	r4, [r3, #0]
    4a4a:	b134      	cbz	r4, 4a5a <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    4a4c:	6863      	ldr	r3, [r4, #4]
    4a4e:	4620      	mov	r0, r4
    4a50:	681b      	ldr	r3, [r3, #0]
    4a52:	a901      	add	r1, sp, #4
    4a54:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4a56:	6824      	ldr	r4, [r4, #0]
	return node->next;
    4a58:	e7f7      	b.n	4a4a <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    4a5a:	4803      	ldr	r0, [pc, #12]	; (4a68 <settings_load_subtree_direct+0x38>)
    4a5c:	f014 f8a0 	bl	18ba0 <z_impl_k_mutex_unlock>
}
    4a60:	2000      	movs	r0, #0
    4a62:	b004      	add	sp, #16
    4a64:	bd10      	pop	{r4, pc}
    4a66:	bf00      	nop
    4a68:	20000ac8 	.word	0x20000ac8
    4a6c:	20001408 	.word	0x20001408

00004a70 <settings_store_init>:
	list->head = NULL;
    4a70:	4b02      	ldr	r3, [pc, #8]	; (4a7c <settings_store_init+0xc>)
    4a72:	2200      	movs	r2, #0
	list->tail = NULL;
    4a74:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    4a78:	4770      	bx	lr
    4a7a:	bf00      	nop
    4a7c:	20001408 	.word	0x20001408

00004a80 <settings_init>:
	list->head = NULL;
    4a80:	4b02      	ldr	r3, [pc, #8]	; (4a8c <settings_init+0xc>)
    4a82:	2200      	movs	r2, #0
	list->tail = NULL;
    4a84:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    4a88:	f7ff bff2 	b.w	4a70 <settings_store_init>
    4a8c:	20001414 	.word	0x20001414

00004a90 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    4a90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4a92:	4c1a      	ldr	r4, [pc, #104]	; (4afc <settings_commit_subtree+0x6c>)
    4a94:	4f1a      	ldr	r7, [pc, #104]	; (4b00 <settings_commit_subtree+0x70>)
{
    4a96:	4606      	mov	r6, r0
	rc = 0;
    4a98:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4a9a:	42bc      	cmp	r4, r7
    4a9c:	d306      	bcc.n	4aac <settings_commit_subtree+0x1c>
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    4a9e:	4b19      	ldr	r3, [pc, #100]	; (4b04 <settings_commit_subtree+0x74>)
    4aa0:	681c      	ldr	r4, [r3, #0]
    4aa2:	b10c      	cbz	r4, 4aa8 <settings_commit_subtree+0x18>
    4aa4:	3c14      	subs	r4, #20
    4aa6:	b99c      	cbnz	r4, 4ad0 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    4aa8:	4628      	mov	r0, r5
    4aaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4aac:	b91e      	cbnz	r6, 4ab6 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    4aae:	68e3      	ldr	r3, [r4, #12]
    4ab0:	b94b      	cbnz	r3, 4ac6 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    4ab2:	3414      	adds	r4, #20
    4ab4:	e7f1      	b.n	4a9a <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4ab6:	6820      	ldr	r0, [r4, #0]
    4ab8:	2200      	movs	r2, #0
    4aba:	4631      	mov	r1, r6
    4abc:	f015 fd52 	bl	1a564 <settings_name_steq>
    4ac0:	2800      	cmp	r0, #0
    4ac2:	d1f4      	bne.n	4aae <settings_commit_subtree+0x1e>
    4ac4:	e7f5      	b.n	4ab2 <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    4ac6:	4798      	blx	r3
				rc = rc2;
    4ac8:	2d00      	cmp	r5, #0
    4aca:	bf08      	it	eq
    4acc:	4605      	moveq	r5, r0
    4ace:	e7f0      	b.n	4ab2 <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4ad0:	b936      	cbnz	r6, 4ae0 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    4ad2:	68e3      	ldr	r3, [r4, #12]
    4ad4:	b963      	cbnz	r3, 4af0 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    4ad6:	f114 0f14 	cmn.w	r4, #20
    4ada:	d0e5      	beq.n	4aa8 <settings_commit_subtree+0x18>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    4adc:	6964      	ldr	r4, [r4, #20]
    4ade:	e7e0      	b.n	4aa2 <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    4ae0:	6820      	ldr	r0, [r4, #0]
    4ae2:	2200      	movs	r2, #0
    4ae4:	4631      	mov	r1, r6
    4ae6:	f015 fd3d 	bl	1a564 <settings_name_steq>
    4aea:	2800      	cmp	r0, #0
    4aec:	d1f1      	bne.n	4ad2 <settings_commit_subtree+0x42>
    4aee:	e7f2      	b.n	4ad6 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    4af0:	4798      	blx	r3
				rc = rc2;
    4af2:	2d00      	cmp	r5, #0
    4af4:	bf08      	it	eq
    4af6:	4605      	moveq	r5, r0
    4af8:	e7ed      	b.n	4ad6 <settings_commit_subtree+0x46>
    4afa:	bf00      	nop
    4afc:	0001f5c8 	.word	0x0001f5c8
    4b00:	0001f618 	.word	0x0001f618
    4b04:	20001414 	.word	0x20001414

00004b08 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    4b08:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    4b0a:	4c06      	ldr	r4, [pc, #24]	; (4b24 <settings_subsys_init+0x1c>)
    4b0c:	7823      	ldrb	r3, [r4, #0]
    4b0e:	b93b      	cbnz	r3, 4b20 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    4b10:	f7ff ffb6 	bl	4a80 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    4b14:	f015 fd5f 	bl	1a5d6 <settings_backend_init>

	if (!err) {
    4b18:	b908      	cbnz	r0, 4b1e <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    4b1a:	2301      	movs	r3, #1
    4b1c:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    4b1e:	bd10      	pop	{r4, pc}
		return 0;
    4b20:	2000      	movs	r0, #0
    4b22:	e7fc      	b.n	4b1e <settings_subsys_init+0x16>
    4b24:	20002926 	.word	0x20002926

00004b28 <sys_reboot>:

extern void sys_arch_reboot(int type);
extern void sys_clock_disable(void);

void sys_reboot(int type)
{
    4b28:	b508      	push	{r3, lr}
    4b2a:	4604      	mov	r4, r0
    4b2c:	f04f 0220 	mov.w	r2, #32
    4b30:	f3ef 8311 	mrs	r3, BASEPRI
    4b34:	f382 8811 	msr	BASEPRI, r2
    4b38:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
#ifdef CONFIG_SYS_CLOCK_EXISTS
	sys_clock_disable();
    4b3c:	f015 fde6 	bl	1a70c <sys_clock_disable>
#endif

	sys_arch_reboot(type);
    4b40:	4620      	mov	r0, r4
    4b42:	f000 ff75 	bl	5a30 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    4b46:	4803      	ldr	r0, [pc, #12]	; (4b54 <sys_reboot+0x2c>)
    4b48:	f015 f955 	bl	19df6 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    4b4c:	f000 fd10 	bl	5570 <arch_cpu_idle>
    4b50:	e7fc      	b.n	4b4c <sys_reboot+0x24>
    4b52:	bf00      	nop
    4b54:	00020a12 	.word	0x00020a12

00004b58 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = DEVICE_GET(clock_nrf)->data;
	size_t offset = (size_t)(mgr - data->mgr);
    4b58:	4a0e      	ldr	r2, [pc, #56]	; (4b94 <onoff_stop+0x3c>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4b5a:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4b5c:	1a84      	subs	r4, r0, r2
    4b5e:	10a3      	asrs	r3, r4, #2
    4b60:	4c0d      	ldr	r4, [pc, #52]	; (4b98 <onoff_stop+0x40>)
    4b62:	435c      	muls	r4, r3
{
    4b64:	4605      	mov	r5, r0
    4b66:	b2e4      	uxtb	r4, r4
	err = set_off_state(&subdata->flags, ctx);
    4b68:	200c      	movs	r0, #12
    4b6a:	fb00 2004 	mla	r0, r0, r4, r2
{
    4b6e:	460e      	mov	r6, r1
	err = set_off_state(&subdata->flags, ctx);
    4b70:	2140      	movs	r1, #64	; 0x40
    4b72:	4408      	add	r0, r1
    4b74:	f015 fd3a 	bl	1a5ec <set_off_state>
	if (err < 0) {
    4b78:	1e01      	subs	r1, r0, #0
    4b7a:	db05      	blt.n	4b88 <onoff_stop+0x30>
	get_sub_config(dev, type)->stop();
    4b7c:	4b07      	ldr	r3, [pc, #28]	; (4b9c <onoff_stop+0x44>)
    4b7e:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
    4b82:	6863      	ldr	r3, [r4, #4]
    4b84:	4798      	blx	r3
	return 0;
    4b86:	2100      	movs	r1, #0
	int res;

	res = stop(DEVICE_GET(clock_nrf), get_subsys(mgr), CTX_ONOFF);
	notify(mgr, res);
    4b88:	4628      	mov	r0, r5
    4b8a:	4633      	mov	r3, r6
}
    4b8c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    4b90:	4718      	bx	r3
    4b92:	bf00      	nop
    4b94:	2000142c 	.word	0x2000142c
    4b98:	b6db6db7 	.word	0xb6db6db7
    4b9c:	0001f7b8 	.word	0x0001f7b8

00004ba0 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    4ba0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    4ba4:	4e10      	ldr	r6, [pc, #64]	; (4be8 <onoff_start+0x48>)
    4ba6:	1b84      	subs	r4, r0, r6
    4ba8:	10a3      	asrs	r3, r4, #2
    4baa:	4c10      	ldr	r4, [pc, #64]	; (4bec <onoff_start+0x4c>)
    4bac:	435c      	muls	r4, r3
    4bae:	b2e4      	uxtb	r4, r4
	err = set_starting_state(&subdata->flags, ctx);
    4bb0:	250c      	movs	r5, #12
    4bb2:	4365      	muls	r5, r4
{
    4bb4:	4680      	mov	r8, r0
	err = set_starting_state(&subdata->flags, ctx);
    4bb6:	f105 0040 	add.w	r0, r5, #64	; 0x40
{
    4bba:	460f      	mov	r7, r1
	err = set_starting_state(&subdata->flags, ctx);
    4bbc:	4430      	add	r0, r6
    4bbe:	2140      	movs	r1, #64	; 0x40
    4bc0:	f015 fd2d 	bl	1a61e <set_starting_state>
	if (err < 0) {
    4bc4:	1e01      	subs	r1, r0, #0
    4bc6:	db09      	blt.n	4bdc <onoff_start+0x3c>
	subdata->cb = data->cb;
    4bc8:	4a09      	ldr	r2, [pc, #36]	; (4bf0 <onoff_start+0x50>)
    4bca:	1973      	adds	r3, r6, r5
	subdata->user_data = data->user_data;
    4bcc:	e9c3 270e 	strd	r2, r7, [r3, #56]	; 0x38
	 get_sub_config(dev, type)->start();
    4bd0:	4b08      	ldr	r3, [pc, #32]	; (4bf4 <onoff_start+0x54>)
    4bd2:	f853 3034 	ldr.w	r3, [r3, r4, lsl #3]
	err = async_start(DEVICE_GET(clock_nrf), get_subsys(mgr),
			  &data, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    4bd6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    4bda:	4718      	bx	r3
		notify(mgr, err);
    4bdc:	4640      	mov	r0, r8
    4bde:	463b      	mov	r3, r7
}
    4be0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    4be4:	4718      	bx	r3
    4be6:	bf00      	nop
    4be8:	2000142c 	.word	0x2000142c
    4bec:	b6db6db7 	.word	0xb6db6db7
    4bf0:	0001a681 	.word	0x0001a681
    4bf4:	0001f7b8 	.word	0x0001f7b8

00004bf8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4bf8:	2200      	movs	r2, #0
{
    4bfa:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4bfc:	2101      	movs	r1, #1
{
    4bfe:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    4c00:	4610      	mov	r0, r2
    4c02:	f000 fc55 	bl	54b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    4c06:	2000      	movs	r0, #0
    4c08:	f000 fc20 	bl	544c <arch_irq_enable>
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
		nrf_gpio_pin_mcu_select(PIN_XL2,
					NRF_GPIO_PIN_MCUSEL_PERIPHERAL);
	}
#endif
	nrfx_err = nrfx_clock_init(clock_event_handler);
    4c0c:	480f      	ldr	r0, [pc, #60]	; (4c4c <clk_init+0x54>)
    4c0e:	f013 fa6d 	bl	180ec <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    4c12:	4b0f      	ldr	r3, [pc, #60]	; (4c50 <clk_init+0x58>)
    4c14:	4298      	cmp	r0, r3
    4c16:	d115      	bne.n	4c44 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    4c18:	f019 fe3f 	bl	1e89a <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    4c1c:	68e6      	ldr	r6, [r4, #12]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    4c1e:	490d      	ldr	r1, [pc, #52]	; (4c54 <clk_init+0x5c>)
    4c20:	4630      	mov	r0, r6
    4c22:	f015 f951 	bl	19ec8 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    4c26:	2800      	cmp	r0, #0
    4c28:	db0b      	blt.n	4c42 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4c2a:	2501      	movs	r5, #1
    4c2c:	6435      	str	r5, [r6, #64]	; 0x40
						get_sub_data(dev, i);
    4c2e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    4c30:	4908      	ldr	r1, [pc, #32]	; (4c54 <clk_init+0x5c>)
    4c32:	f104 001c 	add.w	r0, r4, #28
    4c36:	f015 f947 	bl	19ec8 <onoff_manager_init>
		if (err < 0) {
    4c3a:	2800      	cmp	r0, #0
    4c3c:	db01      	blt.n	4c42 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    4c3e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    4c40:	2000      	movs	r0, #0
}
    4c42:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    4c44:	f06f 0004 	mvn.w	r0, #4
    4c48:	e7fb      	b.n	4c42 <clk_init+0x4a>
    4c4a:	bf00      	nop
    4c4c:	00004c8d 	.word	0x00004c8d
    4c50:	0bad0000 	.word	0x0bad0000
    4c54:	0001f7c8 	.word	0x0001f7c8

00004c58 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    4c58:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    4c5a:	230c      	movs	r3, #12
    4c5c:	4809      	ldr	r0, [pc, #36]	; (4c84 <clkstarted_handle.constprop.0+0x2c>)
    4c5e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    4c60:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    4c62:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    4c64:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    4c68:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    4c6a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    4c6c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    4c6e:	4418      	add	r0, r3
    4c70:	f015 fcf3 	bl	1a65a <set_on_state>
	if (callback) {
    4c74:	b12d      	cbz	r5, 4c82 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    4c76:	4632      	mov	r2, r6
    4c78:	462b      	mov	r3, r5
    4c7a:	4803      	ldr	r0, [pc, #12]	; (4c88 <clkstarted_handle.constprop.0+0x30>)
}
    4c7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    4c80:	4718      	bx	r3
}
    4c82:	bd70      	pop	{r4, r5, r6, pc}
    4c84:	2000142c 	.word	0x2000142c
    4c88:	200009f0 	.word	0x200009f0

00004c8c <clock_event_handler>:
	switch (event) {
    4c8c:	b110      	cbz	r0, 4c94 <clock_event_handler+0x8>
    4c8e:	2801      	cmp	r0, #1
    4c90:	d004      	beq.n	4c9c <clock_event_handler+0x10>
    4c92:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    4c94:	4b03      	ldr	r3, [pc, #12]	; (4ca4 <clock_event_handler+0x18>)
    4c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    4c98:	075b      	lsls	r3, r3, #29
    4c9a:	d101      	bne.n	4ca0 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    4c9c:	f7ff bfdc 	b.w	4c58 <clkstarted_handle.constprop.0>
}
    4ca0:	4770      	bx	lr
    4ca2:	bf00      	nop
    4ca4:	2000142c 	.word	0x2000142c

00004ca8 <generic_hfclk_start>:
{
    4ca8:	b508      	push	{r3, lr}
    4caa:	f04f 0320 	mov.w	r3, #32
    4cae:	f3ef 8111 	mrs	r1, BASEPRI
    4cb2:	f383 8811 	msr	BASEPRI, r3
    4cb6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    4cba:	4a12      	ldr	r2, [pc, #72]	; (4d04 <generic_hfclk_start+0x5c>)
    4cbc:	6813      	ldr	r3, [r2, #0]
    4cbe:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    4cc2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    4cc6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    4cc8:	d00c      	beq.n	4ce4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4cca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4cce:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4cd2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    4cd6:	f013 0301 	ands.w	r3, r3, #1
    4cda:	d003      	beq.n	4ce4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    4cdc:	480a      	ldr	r0, [pc, #40]	; (4d08 <generic_hfclk_start+0x60>)
    4cde:	f015 fcbc 	bl	1a65a <set_on_state>
			already_started = true;
    4ce2:	2301      	movs	r3, #1
	__asm__ volatile(
    4ce4:	f381 8811 	msr	BASEPRI, r1
    4ce8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    4cec:	b123      	cbz	r3, 4cf8 <generic_hfclk_start+0x50>
}
    4cee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(DEVICE_GET(clock_nrf),
    4cf2:	2000      	movs	r0, #0
    4cf4:	f7ff bfb0 	b.w	4c58 <clkstarted_handle.constprop.0>
}
    4cf8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4cfc:	2001      	movs	r0, #1
    4cfe:	f013 ba05 	b.w	1810c <nrfx_clock_start>
    4d02:	bf00      	nop
    4d04:	2000147c 	.word	0x2000147c
    4d08:	2000146c 	.word	0x2000146c

00004d0c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4d0c:	4b09      	ldr	r3, [pc, #36]	; (4d34 <generic_hfclk_stop+0x28>)
    4d0e:	f3bf 8f5b 	dmb	ish
    4d12:	e853 2f00 	ldrex	r2, [r3]
    4d16:	f022 0102 	bic.w	r1, r2, #2
    4d1a:	e843 1000 	strex	r0, r1, [r3]
    4d1e:	2800      	cmp	r0, #0
    4d20:	d1f7      	bne.n	4d12 <generic_hfclk_stop+0x6>
    4d22:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    4d26:	07d3      	lsls	r3, r2, #31
    4d28:	d402      	bmi.n	4d30 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4d2a:	2001      	movs	r0, #1
    4d2c:	f013 ba20 	b.w	18170 <nrfx_clock_stop>
}
    4d30:	4770      	bx	lr
    4d32:	bf00      	nop
    4d34:	2000147c 	.word	0x2000147c

00004d38 <api_blocking_start>:
{
    4d38:	b510      	push	{r4, lr}
    4d3a:	b08a      	sub	sp, #40	; 0x28
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4d3c:	2300      	movs	r3, #0
    4d3e:	2201      	movs	r2, #1
    4d40:	e9cd 3206 	strd	r3, r2, [sp, #24]
	struct clock_control_async_data data = {
    4d44:	9301      	str	r3, [sp, #4]
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4d46:	aa08      	add	r2, sp, #32
	struct clock_control_async_data data = {
    4d48:	4b0a      	ldr	r3, [pc, #40]	; (4d74 <api_blocking_start+0x3c>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4d4a:	e9cd 2208 	strd	r2, r2, [sp, #32]
    4d4e:	ac04      	add	r4, sp, #16
	err = api_start(dev, subsys, &data);
    4d50:	aa01      	add	r2, sp, #4
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    4d52:	e9cd 4404 	strd	r4, r4, [sp, #16]
	struct clock_control_async_data data = {
    4d56:	e9cd 3402 	strd	r3, r4, [sp, #8]
	err = api_start(dev, subsys, &data);
    4d5a:	f015 fcb7 	bl	1a6cc <api_start>
	if (err < 0) {
    4d5e:	2800      	cmp	r0, #0
    4d60:	db05      	blt.n	4d6e <api_blocking_start+0x36>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    4d62:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    4d66:	2300      	movs	r3, #0
    4d68:	4620      	mov	r0, r4
    4d6a:	f014 fb37 	bl	193dc <z_impl_k_sem_take>
}
    4d6e:	b00a      	add	sp, #40	; 0x28
    4d70:	bd10      	pop	{r4, pc}
    4d72:	bf00      	nop
    4d74:	0001a693 	.word	0x0001a693

00004d78 <z_nrf_clock_control_get_onoff>:
}
    4d78:	4a02      	ldr	r2, [pc, #8]	; (4d84 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    4d7a:	b2c3      	uxtb	r3, r0
}
    4d7c:	201c      	movs	r0, #28
    4d7e:	fb03 2000 	mla	r0, r3, r0, r2
    4d82:	4770      	bx	lr
    4d84:	2000142c 	.word	0x2000142c

00004d88 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4d88:	4b09      	ldr	r3, [pc, #36]	; (4db0 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    4d8a:	f3bf 8f5b 	dmb	ish
    4d8e:	e853 2f00 	ldrex	r2, [r3]
    4d92:	f042 0101 	orr.w	r1, r2, #1
    4d96:	e843 1000 	strex	r0, r1, [r3]
    4d9a:	2800      	cmp	r0, #0
    4d9c:	d1f7      	bne.n	4d8e <z_nrf_clock_bt_ctlr_hf_request+0x6>
    4d9e:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    4da2:	0793      	lsls	r3, r2, #30
    4da4:	d402      	bmi.n	4dac <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    4da6:	2001      	movs	r0, #1
    4da8:	f013 b9b0 	b.w	1810c <nrfx_clock_start>
}
    4dac:	4770      	bx	lr
    4dae:	bf00      	nop
    4db0:	2000147c 	.word	0x2000147c

00004db4 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4db4:	4b09      	ldr	r3, [pc, #36]	; (4ddc <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    4db6:	f3bf 8f5b 	dmb	ish
    4dba:	e853 2f00 	ldrex	r2, [r3]
    4dbe:	f022 0101 	bic.w	r1, r2, #1
    4dc2:	e843 1000 	strex	r0, r1, [r3]
    4dc6:	2800      	cmp	r0, #0
    4dc8:	d1f7      	bne.n	4dba <z_nrf_clock_bt_ctlr_hf_release+0x6>
    4dca:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    4dce:	0793      	lsls	r3, r2, #30
    4dd0:	d402      	bmi.n	4dd8 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    4dd2:	2001      	movs	r0, #1
    4dd4:	f013 b9cc 	b.w	18170 <nrfx_clock_stop>
}
    4dd8:	4770      	bx	lr
    4dda:	bf00      	nop
    4ddc:	2000147c 	.word	0x2000147c

00004de0 <z_nrf_clock_control_lf_on>:
{
    4de0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4de4:	493a      	ldr	r1, [pc, #232]	; (4ed0 <z_nrf_clock_control_lf_on+0xf0>)
    4de6:	f3bf 8f5b 	dmb	ish
    4dea:	4606      	mov	r6, r0
    4dec:	2201      	movs	r2, #1
    4dee:	e851 3f00 	ldrex	r3, [r1]
    4df2:	e841 2000 	strex	r0, r2, [r1]
    4df6:	2800      	cmp	r0, #0
    4df8:	d1f9      	bne.n	4dee <z_nrf_clock_control_lf_on+0xe>
    4dfa:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    4dfe:	b933      	cbnz	r3, 4e0e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    4e00:	4934      	ldr	r1, [pc, #208]	; (4ed4 <z_nrf_clock_control_lf_on+0xf4>)
		err = onoff_request(mgr, &cli);
    4e02:	4835      	ldr	r0, [pc, #212]	; (4ed8 <z_nrf_clock_control_lf_on+0xf8>)
    4e04:	604b      	str	r3, [r1, #4]
    4e06:	60cb      	str	r3, [r1, #12]
    4e08:	608a      	str	r2, [r1, #8]
    4e0a:	f015 f870 	bl	19eee <onoff_request>
	switch (start_mode) {
    4e0e:	1e73      	subs	r3, r6, #1
    4e10:	2b01      	cmp	r3, #1
    4e12:	d832      	bhi.n	4e7a <z_nrf_clock_control_lf_on+0x9a>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    4e14:	2e01      	cmp	r6, #1
    4e16:	d107      	bne.n	4e28 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    4e18:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4e1c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    4e20:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    4e24:	2b01      	cmp	r3, #1
    4e26:	d028      	beq.n	4e7a <z_nrf_clock_control_lf_on+0x9a>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    4e28:	f01a f85a 	bl	1eee0 <k_is_in_isr>
    4e2c:	4604      	mov	r4, r0
    4e2e:	b918      	cbnz	r0, 4e38 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    4e30:	4b2a      	ldr	r3, [pc, #168]	; (4edc <z_nrf_clock_control_lf_on+0xfc>)
	int key = isr_mode ? irq_lock() : 0;
    4e32:	781b      	ldrb	r3, [r3, #0]
    4e34:	2b00      	cmp	r3, #0
    4e36:	d144      	bne.n	4ec2 <z_nrf_clock_control_lf_on+0xe2>
	__asm__ volatile(
    4e38:	f04f 0320 	mov.w	r3, #32
    4e3c:	f3ef 8511 	mrs	r5, BASEPRI
    4e40:	f383 8811 	msr	BASEPRI, r3
    4e44:	f3bf 8f6f 	isb	sy
    4e48:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e4a:	4f25      	ldr	r7, [pc, #148]	; (4ee0 <z_nrf_clock_control_lf_on+0x100>)
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4e4c:	f8df 8094 	ldr.w	r8, [pc, #148]	; 4ee4 <z_nrf_clock_control_lf_on+0x104>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4e50:	f8df 9094 	ldr.w	r9, [pc, #148]	; 4ee8 <z_nrf_clock_control_lf_on+0x108>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    4e54:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4e58:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    4e5c:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    4e60:	03d2      	lsls	r2, r2, #15
    4e62:	d50c      	bpl.n	4e7e <z_nrf_clock_control_lf_on+0x9e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    4e64:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    4e68:	2b01      	cmp	r3, #1
    4e6a:	d001      	beq.n	4e70 <z_nrf_clock_control_lf_on+0x90>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    4e6c:	2e01      	cmp	r6, #1
    4e6e:	d106      	bne.n	4e7e <z_nrf_clock_control_lf_on+0x9e>
	if (isr_mode) {
    4e70:	b30c      	cbz	r4, 4eb6 <z_nrf_clock_control_lf_on+0xd6>
	__asm__ volatile(
    4e72:	f385 8811 	msr	BASEPRI, r5
    4e76:	f3bf 8f6f 	isb	sy
}
    4e7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode) {
    4e7e:	b1ac      	cbz	r4, 4eac <z_nrf_clock_control_lf_on+0xcc>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    4e80:	4628      	mov	r0, r5
    4e82:	f000 fb83 	bl	558c <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    4e86:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    4e8a:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    4e8e:	2b00      	cmp	r3, #0
    4e90:	d1e0      	bne.n	4e54 <z_nrf_clock_control_lf_on+0x74>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4e92:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    4e94:	2900      	cmp	r1, #0
    4e96:	d0dd      	beq.n	4e54 <z_nrf_clock_control_lf_on+0x74>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4e98:	603b      	str	r3, [r7, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    4e9a:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    4e9c:	2301      	movs	r3, #1
    4e9e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    4ea2:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4ea6:	f8c9 3000 	str.w	r3, [r9]
}
    4eaa:	e7d3      	b.n	4e54 <z_nrf_clock_control_lf_on+0x74>
	return z_impl_k_sleep(timeout);
    4eac:	2100      	movs	r1, #0
    4eae:	2021      	movs	r0, #33	; 0x21
    4eb0:	f014 fa48 	bl	19344 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4eb4:	e7e7      	b.n	4e86 <z_nrf_clock_control_lf_on+0xa6>
    p_reg->INTENSET = mask;
    4eb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4eba:	2202      	movs	r2, #2
    4ebc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    4ec0:	e7db      	b.n	4e7a <z_nrf_clock_control_lf_on+0x9a>
    p_reg->INTENCLR = mask;
    4ec2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4ec6:	2202      	movs	r2, #2
    4ec8:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    4ecc:	4605      	mov	r5, r0
}
    4ece:	e7bc      	b.n	4e4a <z_nrf_clock_control_lf_on+0x6a>
    4ed0:	20001480 	.word	0x20001480
    4ed4:	2000141c 	.word	0x2000141c
    4ed8:	20001448 	.word	0x20001448
    4edc:	200029d6 	.word	0x200029d6
    4ee0:	40000104 	.word	0x40000104
    4ee4:	e000e100 	.word	0xe000e100
    4ee8:	40000008 	.word	0x40000008

00004eec <handle_next_cycle_case>:
 * counter progresses during that time it means that 1 cycle elapsed and
 * interrupt is set pending.
 */
static void handle_next_cycle_case(uint32_t t)
{
	set_comparator(t + 2);
    4eec:	1c82      	adds	r2, r0, #2

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE  void nrf_rtc_cc_set(NRF_RTC_Type * p_reg, uint32_t ch, uint32_t cc_val)
{
    p_reg->CC[ch] = cc_val;
    4eee:	4b08      	ldr	r3, [pc, #32]	; (4f10 <handle_next_cycle_case+0x24>)
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4ef0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    4ef4:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    4ef8:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
	while (t != counter()) {
    4efc:	4290      	cmp	r0, r2
    4efe:	d100      	bne.n	4f02 <handle_next_cycle_case+0x16>
		 * generated. Trigger interrupt.
		 */
		t = counter();
		set_comparator(t + 2);
	}
}
    4f00:	4770      	bx	lr
    4f02:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
		set_comparator(t + 2);
    4f06:	1c82      	adds	r2, r0, #2
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4f08:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
    4f0c:	e7f2      	b.n	4ef4 <handle_next_cycle_case+0x8>
    4f0e:	bf00      	nop
    4f10:	40011000 	.word	0x40011000

00004f14 <rtc_nrf_isr>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4f14:	4b07      	ldr	r3, [pc, #28]	; (4f34 <rtc_nrf_isr+0x20>)
    4f16:	2200      	movs	r2, #0
    4f18:	601a      	str	r2, [r3, #0]
    4f1a:	681b      	ldr	r3, [r3, #0]
{
	ARG_UNUSED(arg);
	event_clear();

	uint32_t t = get_comparator();
	uint32_t dticks = counter_sub(t, last_count) / CYC_PER_TICK;
    4f1c:	4a06      	ldr	r2, [pc, #24]	; (4f38 <rtc_nrf_isr+0x24>)
    return p_reg->CC[ch];
    4f1e:	4b07      	ldr	r3, [pc, #28]	; (4f3c <rtc_nrf_isr+0x28>)
    4f20:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
    4f24:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    4f26:	1ac0      	subs	r0, r0, r3
    4f28:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    4f2c:	4403      	add	r3, r0
    4f2e:	6013      	str	r3, [r2, #0]
		 * so it won't get preempted by the interrupt.
		 */
		set_absolute_alarm(last_count + CYC_PER_TICK);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ? dticks : (dticks > 0));
    4f30:	f014 bc9e 	b.w	19870 <z_clock_announce>
    4f34:	40011140 	.word	0x40011140
    4f38:	20001484 	.word	0x20001484
    4f3c:	40011000 	.word	0x40011000

00004f40 <z_clock_driver_init>:
}

int z_clock_driver_init(const struct device *device)
{
    4f40:	b538      	push	{r3, r4, r5, lr}
}

NRF_STATIC_INLINE void nrf_rtc_prescaler_set(NRF_RTC_Type * p_reg, uint32_t val)
{
    NRFX_ASSERT(val <= (RTC_PRESCALER_PRESCALER_Msk >> RTC_PRESCALER_PRESCALER_Pos));
    p_reg->PRESCALER = val;
    4f42:	4d10      	ldr	r5, [pc, #64]	; (4f84 <z_clock_driver_init+0x44>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4f44:	4b10      	ldr	r3, [pc, #64]	; (4f88 <z_clock_driver_init+0x48>)
    p_reg->PRESCALER = val;
    4f46:	2400      	movs	r4, #0
    4f48:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4f4c:	601c      	str	r4, [r3, #0]
    4f4e:	681b      	ldr	r3, [r3, #0]
    4f50:	4b0e      	ldr	r3, [pc, #56]	; (4f8c <z_clock_driver_init+0x4c>)
    4f52:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    4f56:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    p_reg->INTENSET = mask;
    4f5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4f5e:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
	nrf_rtc_prescaler_set(RTC, 0);
	event_clear();
	NVIC_ClearPendingIRQ(RTC_IRQn);
	int_enable();

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4f62:	4622      	mov	r2, r4
    4f64:	2101      	movs	r1, #1
    4f66:	2011      	movs	r0, #17
    4f68:	f000 faa2 	bl	54b0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4f6c:	2011      	movs	r0, #17
    4f6e:	f000 fa6d 	bl	544c <arch_irq_enable>
    return (uint32_t)p_reg + task;
}

NRF_STATIC_INLINE void nrf_rtc_task_trigger(NRF_RTC_Type * p_reg, nrf_rtc_task_t task)
{
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4f72:	4a07      	ldr	r2, [pc, #28]	; (4f90 <z_clock_driver_init+0x50>)
    4f74:	2301      	movs	r3, #1
    4f76:	6013      	str	r3, [r2, #0]

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		set_comparator(counter() + CYC_PER_TICK);
	}

	z_nrf_clock_control_lf_on(mode);
    4f78:	2002      	movs	r0, #2
    4f7a:	602b      	str	r3, [r5, #0]
    4f7c:	f7ff ff30 	bl	4de0 <z_nrf_clock_control_lf_on>

	return 0;
}
    4f80:	4620      	mov	r0, r4
    4f82:	bd38      	pop	{r3, r4, r5, pc}
    4f84:	40011000 	.word	0x40011000
    4f88:	40011140 	.word	0x40011140
    4f8c:	e000e100 	.word	0xe000e100
    4f90:	40011008 	.word	0x40011008

00004f94 <z_clock_set_timeout>:

void z_clock_set_timeout(int32_t ticks, bool idle)
{
    4f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);

	uint32_t unannounced = counter_sub(counter(), last_count);
    4f96:	4b2b      	ldr	r3, [pc, #172]	; (5044 <z_clock_set_timeout+0xb0>)
     return p_reg->COUNTER;
    4f98:	4c2b      	ldr	r4, [pc, #172]	; (5048 <z_clock_set_timeout+0xb4>)
    4f9a:	6819      	ldr	r1, [r3, #0]
    4f9c:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4fa0:	4d2a      	ldr	r5, [pc, #168]	; (504c <z_clock_set_timeout+0xb8>)
	return (a - b) & COUNTER_MAX;
    4fa2:	1a52      	subs	r2, r2, r1
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4fa4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
    4fa8:	bf08      	it	eq
    4faa:	4628      	moveq	r0, r5
	return (a - b) & COUNTER_MAX;
    4fac:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
	/* If we haven't announced for more than half the 24-bit wrap
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
    4fb0:	0212      	lsls	r2, r2, #8
    4fb2:	d436      	bmi.n	5022 <z_clock_set_timeout+0x8e>
	ticks = MAX(MIN(ticks - 1, (int32_t)MAX_TICKS), 0);
    4fb4:	3801      	subs	r0, #1
    4fb6:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
    4fba:	42a8      	cmp	r0, r5
    4fbc:	bfa8      	it	ge
    4fbe:	4628      	movge	r0, r5
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    4fc0:	3301      	adds	r3, #1
    4fc2:	4418      	add	r0, r3
	 */
	if (cyc > MAX_CYCLES) {
		cyc = MAX_CYCLES;
	}

	cyc += last_count;
    4fc4:	42a8      	cmp	r0, r5
    4fc6:	bf94      	ite	ls
    4fc8:	180d      	addls	r5, r1, r0
    4fca:	194d      	addhi	r5, r1, r5
    p_reg->INTENCLR = mask;
    4fcc:	f44f 3180 	mov.w	r1, #65536	; 0x10000
    4fd0:	f8c4 1308 	str.w	r1, [r4, #776]	; 0x308
     return p_reg->COUNTER;
    4fd4:	f8d4 2504 	ldr.w	r2, [r4, #1284]	; 0x504
    return p_reg->CC[ch];
    4fd8:	f8d4 3540 	ldr.w	r3, [r4, #1344]	; 0x540
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4fdc:	4e1c      	ldr	r6, [pc, #112]	; (5050 <z_clock_set_timeout+0xbc>)
    4fde:	2700      	movs	r7, #0
	return (a - b) & COUNTER_MAX;
    4fe0:	1a9b      	subs	r3, r3, r2
    4fe2:	6037      	str	r7, [r6, #0]
    4fe4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    4fe8:	6830      	ldr	r0, [r6, #0]
	if (counter_sub(prev_val, now) == 1) {
    4fea:	2b01      	cmp	r3, #1
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    4fec:	f022 407f 	bic.w	r0, r2, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4ff0:	f8c4 0540 	str.w	r0, [r4, #1344]	; 0x540
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4ff4:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	if (counter_sub(prev_val, now) == 1) {
    4ff8:	d104      	bne.n	5004 <z_clock_set_timeout+0x70>
	z_impl_k_busy_wait(usec_to_wait);
    4ffa:	200f      	movs	r0, #15
    4ffc:	f019 ff76 	bl	1eeec <z_impl_k_busy_wait>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    5000:	6037      	str	r7, [r6, #0]
    5002:	6833      	ldr	r3, [r6, #0]
    5004:	4b13      	ldr	r3, [pc, #76]	; (5054 <z_clock_set_timeout+0xc0>)
    5006:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    500a:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
     return p_reg->COUNTER;
    500e:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5012:	1a2b      	subs	r3, r5, r0
    5014:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	if (diff == 1) {
    5018:	2b01      	cmp	r3, #1
    501a:	d104      	bne.n	5026 <z_clock_set_timeout+0x92>
		handle_next_cycle_case(t);
    501c:	f7ff ff66 	bl	4eec <handle_next_cycle_case>
    5020:	e00b      	b.n	503a <z_clock_set_timeout+0xa6>
		ticks = 0;
    5022:	2000      	movs	r0, #0
    5024:	e7cc      	b.n	4fc0 <z_clock_set_timeout+0x2c>
	nrf_rtc_cc_set(RTC, 0, cyc & COUNTER_MAX);
    5026:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    502a:	f8c4 3540 	str.w	r3, [r4, #1344]	; 0x540
     return p_reg->COUNTER;
    502e:	f8d4 0504 	ldr.w	r0, [r4, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    5032:	1a2d      	subs	r5, r5, r0
    5034:	3d02      	subs	r5, #2
	if (diff > MAX_CYCLES) {
    5036:	022b      	lsls	r3, r5, #8
    5038:	d4f0      	bmi.n	501c <z_clock_set_timeout+0x88>
    p_reg->INTENSET = mask;
    503a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    503e:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
	set_protected_absolute_alarm(cyc);
}
    5042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    5044:	20001484 	.word	0x20001484
    5048:	40011000 	.word	0x40011000
    504c:	007fffff 	.word	0x007fffff
    5050:	40011140 	.word	0x40011140
    5054:	e000e100 	.word	0xe000e100

00005058 <z_clock_elapsed>:
	__asm__ volatile(
    5058:	f04f 0220 	mov.w	r2, #32
    505c:	f3ef 8311 	mrs	r3, BASEPRI
    5060:	f382 8811 	msr	BASEPRI, r2
    5064:	f3bf 8f6f 	isb	sy
     return p_reg->COUNTER;
    5068:	4a06      	ldr	r2, [pc, #24]	; (5084 <z_clock_elapsed+0x2c>)
    506a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    506e:	4a06      	ldr	r2, [pc, #24]	; (5088 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    5070:	6812      	ldr	r2, [r2, #0]
    5072:	1a80      	subs	r0, r0, r2
    5074:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    5078:	f383 8811 	msr	BASEPRI, r3
    507c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    5080:	4770      	bx	lr
    5082:	bf00      	nop
    5084:	40011000 	.word	0x40011000
    5088:	20001484 	.word	0x20001484

0000508c <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    508c:	4b01      	ldr	r3, [pc, #4]	; (5094 <uECC_get_rng+0x8>)
    508e:	6818      	ldr	r0, [r3, #0]
    5090:	4770      	bx	lr
    5092:	bf00      	nop
    5094:	20000500 	.word	0x20000500

00005098 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    5098:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    509a:	2208      	movs	r2, #8
{
    509c:	b089      	sub	sp, #36	; 0x24
    509e:	460c      	mov	r4, r1
    50a0:	4606      	mov	r6, r0
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    50a2:	f015 fcf6 	bl	1aa92 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    50a6:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    50a8:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    50aa:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    50ac:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    50ae:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    50b0:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    50b2:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    50b4:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    50b6:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    50b8:	9307      	str	r3, [sp, #28]
	tmp[0] = tmp[1] = tmp[2] = 0;
    50ba:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    50bc:	2308      	movs	r3, #8
    50be:	466a      	mov	r2, sp
    50c0:	4669      	mov	r1, sp
    50c2:	4668      	mov	r0, sp
	tmp[0] = tmp[1] = tmp[2] = 0;
    50c4:	e9cd 7701 	strd	r7, r7, [sp, #4]
    50c8:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    50ca:	f015 fbe4 	bl	1a896 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    50ce:	2308      	movs	r3, #8
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    50d0:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    50d2:	466a      	mov	r2, sp
    50d4:	4631      	mov	r1, r6
    50d6:	4630      	mov	r0, r6
    50d8:	f015 fbdd 	bl	1a896 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    50dc:	6b23      	ldr	r3, [r4, #48]	; 0x30
    50de:	9303      	str	r3, [sp, #12]
	tmp[4] = product[13];
    50e0:	6b63      	ldr	r3, [r4, #52]	; 0x34
    50e2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[14];
    50e4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    50e6:	9305      	str	r3, [sp, #20]
	tmp[6] = product[15];
    50e8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    50ea:	4405      	add	r5, r0
	tmp[7] = 0;
    50ec:	e9cd 3706 	strd	r3, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    50f0:	466a      	mov	r2, sp
    50f2:	2308      	movs	r3, #8
    50f4:	4669      	mov	r1, sp
    50f6:	4668      	mov	r0, sp
    50f8:	f015 fbcd 	bl	1a896 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    50fc:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    50fe:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5100:	2308      	movs	r3, #8
    5102:	466a      	mov	r2, sp
    5104:	4630      	mov	r0, r6
    5106:	f015 fbc6 	bl	1a896 <uECC_vli_add>

	/* s3 */
	tmp[0] = product[8];
    510a:	6a23      	ldr	r3, [r4, #32]
    510c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[9];
    510e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5110:	9301      	str	r3, [sp, #4]
	tmp[2] = product[10];
    5112:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    5114:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    5116:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    5118:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    511a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    511c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    511e:	4405      	add	r5, r0
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5120:	2308      	movs	r3, #8
    5122:	466a      	mov	r2, sp
    5124:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    5126:	e9cd 7704 	strd	r7, r7, [sp, #16]
    512a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    512c:	f015 fbb3 	bl	1a896 <uECC_vli_add>

	/* s4 */
	tmp[0] = product[9];
    5130:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5132:	9300      	str	r3, [sp, #0]
	tmp[1] = product[10];
    5134:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    5136:	6ba2      	ldr	r2, [r4, #56]	; 0x38
	tmp[1] = product[10];
    5138:	9301      	str	r3, [sp, #4]
	tmp[2] = product[11];
    513a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    513c:	9302      	str	r3, [sp, #8]
	tmp[4] = product[14];
    513e:	9204      	str	r2, [sp, #16]
	tmp[3] = product[13];
    5140:	6b63      	ldr	r3, [r4, #52]	; 0x34
	tmp[5] = product[15];
    5142:	6be2      	ldr	r2, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    5144:	9303      	str	r3, [sp, #12]
	tmp[6] = product[13];
    5146:	e9cd 2305 	strd	r2, r3, [sp, #20]
	tmp[7] = product[8];
    514a:	6a23      	ldr	r3, [r4, #32]
    514c:	9307      	str	r3, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    514e:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    5150:	2308      	movs	r3, #8
    5152:	466a      	mov	r2, sp
    5154:	4630      	mov	r0, r6
    5156:	f015 fb9e 	bl	1a896 <uECC_vli_add>

	/* d1 */
	tmp[0] = product[11];
    515a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    515c:	9300      	str	r3, [sp, #0]
	tmp[1] = product[12];
    515e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5160:	9301      	str	r3, [sp, #4]
	tmp[2] = product[13];
    5162:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5164:	9302      	str	r3, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    5166:	6a23      	ldr	r3, [r4, #32]
    5168:	9306      	str	r3, [sp, #24]
	tmp[7] = product[10];
    516a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    516c:	9307      	str	r3, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    516e:	4405      	add	r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5170:	2308      	movs	r3, #8
    5172:	466a      	mov	r2, sp
    5174:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    5176:	e9cd 7704 	strd	r7, r7, [sp, #16]
    517a:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    517c:	f015 fcbf 	bl	1aafe <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    5180:	6b23      	ldr	r3, [r4, #48]	; 0x30
    5182:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    5184:	6b63      	ldr	r3, [r4, #52]	; 0x34
    5186:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    5188:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    518a:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    518c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    518e:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    5190:	6a63      	ldr	r3, [r4, #36]	; 0x24
    5192:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    5194:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    5196:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    5198:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    519a:	2308      	movs	r3, #8
    519c:	466a      	mov	r2, sp
    519e:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    51a0:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    51a4:	f015 fcab 	bl	1aafe <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    51a8:	6b63      	ldr	r3, [r4, #52]	; 0x34
    51aa:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    51ac:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    51ae:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    51b0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    51b2:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    51b4:	6a23      	ldr	r3, [r4, #32]
    51b6:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    51b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51ba:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    51bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    51be:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    51c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    51c4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    51c6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    51c8:	2308      	movs	r3, #8
    51ca:	466a      	mov	r2, sp
    51cc:	4630      	mov	r0, r6
    51ce:	f015 fc96 	bl	1aafe <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    51d2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    51d4:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    51d6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    51d8:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    51dc:	6a63      	ldr	r3, [r4, #36]	; 0x24
    51de:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    51e0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    51e2:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    51e4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    51e6:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    51ea:	6b63      	ldr	r3, [r4, #52]	; 0x34
    51ec:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    51ee:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    51f0:	2308      	movs	r3, #8
    51f2:	466a      	mov	r2, sp
    51f4:	4630      	mov	r0, r6
    51f6:	f015 fc82 	bl	1aafe <uECC_vli_sub>

	if (carry < 0) {
    51fa:	1a2d      	subs	r5, r5, r0
    51fc:	d410      	bmi.n	5220 <vli_mmod_fast_secp256r1+0x188>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    51fe:	4c0d      	ldr	r4, [pc, #52]	; (5234 <vli_mmod_fast_secp256r1+0x19c>)
		while (carry || 
    5200:	b935      	cbnz	r5, 5210 <vli_mmod_fast_secp256r1+0x178>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    5202:	2208      	movs	r2, #8
    5204:	4631      	mov	r1, r6
    5206:	4620      	mov	r0, r4
    5208:	f015 fc4f 	bl	1aaaa <uECC_vli_cmp_unsafe>
		while (carry || 
    520c:	2801      	cmp	r0, #1
    520e:	d00f      	beq.n	5230 <vli_mmod_fast_secp256r1+0x198>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5210:	2308      	movs	r3, #8
    5212:	4622      	mov	r2, r4
    5214:	4631      	mov	r1, r6
    5216:	4630      	mov	r0, r6
    5218:	f015 fc71 	bl	1aafe <uECC_vli_sub>
    521c:	1a2d      	subs	r5, r5, r0
    521e:	e7ef      	b.n	5200 <vli_mmod_fast_secp256r1+0x168>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    5220:	4a04      	ldr	r2, [pc, #16]	; (5234 <vli_mmod_fast_secp256r1+0x19c>)
    5222:	2308      	movs	r3, #8
    5224:	4631      	mov	r1, r6
    5226:	4630      	mov	r0, r6
    5228:	f015 fb35 	bl	1a896 <uECC_vli_add>
		while (carry < 0);
    522c:	182d      	adds	r5, r5, r0
    522e:	d4f8      	bmi.n	5222 <vli_mmod_fast_secp256r1+0x18a>
		}
	}
}
    5230:	b009      	add	sp, #36	; 0x24
    5232:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5234:	0001f7d8 	.word	0x0001f7d8

00005238 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    5238:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    523a:	4e26      	ldr	r6, [pc, #152]	; (52d4 <tc_aes128_set_encrypt_key+0x9c>)
{
    523c:	4607      	mov	r7, r0
    523e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    5240:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    5242:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    5244:	ad01      	add	r5, sp, #4
    5246:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    5248:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    524a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    524c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    5250:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    5254:	4638      	mov	r0, r7
    5256:	2f00      	cmp	r7, #0
    5258:	d038      	beq.n	52cc <tc_aes128_set_encrypt_key+0x94>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    525a:	2c00      	cmp	r4, #0
    525c:	d038      	beq.n	52d0 <tc_aes128_set_encrypt_key+0x98>
    525e:	1f38      	subs	r0, r7, #4
    5260:	4621      	mov	r1, r4
    5262:	4602      	mov	r2, r0
    5264:	3410      	adds	r4, #16
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    5266:	784b      	ldrb	r3, [r1, #1]
    5268:	780d      	ldrb	r5, [r1, #0]
    526a:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    526c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    5270:	78cd      	ldrb	r5, [r1, #3]
    5272:	432b      	orrs	r3, r5
    5274:	788d      	ldrb	r5, [r1, #2]
    5276:	3104      	adds	r1, #4
    5278:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    527c:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    527e:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    5282:	d1f0      	bne.n	5266 <tc_aes128_set_encrypt_key+0x2e>
	}

	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
    5284:	4c14      	ldr	r4, [pc, #80]	; (52d8 <tc_aes128_set_encrypt_key+0xa0>)
    5286:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    5288:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    528a:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    528c:	d116      	bne.n	52bc <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    528e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    5292:	5ca5      	ldrb	r5, [r4, r2]
    5294:	0e1a      	lsrs	r2, r3, #24
    5296:	5ca2      	ldrb	r2, [r4, r2]
    5298:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    529c:	f3c3 2507 	ubfx	r5, r3, #8, #8
    52a0:	b2db      	uxtb	r3, r3
    52a2:	5d65      	ldrb	r5, [r4, r5]
    52a4:	5ce3      	ldrb	r3, [r4, r3]
    52a6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    52aa:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    52ae:	ad0c      	add	r5, sp, #48	; 0x30
    52b0:	f021 0303 	bic.w	r3, r1, #3
    52b4:	442b      	add	r3, r5
    52b6:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    52ba:	4053      	eors	r3, r2
		}
		s->words[i] = s->words[i-Nk] ^ t;
    52bc:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    52c0:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    52c2:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    52c4:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    52c6:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    52c8:	d1de      	bne.n	5288 <tc_aes128_set_encrypt_key+0x50>
	}

	return TC_CRYPTO_SUCCESS;
    52ca:	2001      	movs	r0, #1
}
    52cc:	b00d      	add	sp, #52	; 0x34
    52ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    52d0:	4620      	mov	r0, r4
    52d2:	e7fb      	b.n	52cc <tc_aes128_set_encrypt_key+0x94>
    52d4:	0001f668 	.word	0x0001f668
    52d8:	00020a4b 	.word	0x00020a4b

000052dc <tc_aes_encrypt>:
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
	(void) _copy(s, sizeof(t), t, sizeof(t));
}

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
    52dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    52e0:	4615      	mov	r5, r2
    52e2:	b089      	sub	sp, #36	; 0x24
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    52e4:	4606      	mov	r6, r0
    52e6:	2800      	cmp	r0, #0
    52e8:	d058      	beq.n	539c <tc_aes_encrypt+0xc0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    52ea:	2900      	cmp	r1, #0
    52ec:	d059      	beq.n	53a2 <tc_aes_encrypt+0xc6>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    52ee:	2a00      	cmp	r2, #0
    52f0:	d059      	beq.n	53a6 <tc_aes_encrypt+0xca>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    52f2:	2310      	movs	r3, #16
    52f4:	460a      	mov	r2, r1
    52f6:	4668      	mov	r0, sp
    52f8:	4619      	mov	r1, r3
    52fa:	f015 fa08 	bl	1a70e <_copy>
	add_round_key(state, s->words);
    52fe:	4629      	mov	r1, r5
    5300:	4668      	mov	r0, sp
		s[i] = sbox[s[i]];
    5302:	4c2a      	ldr	r4, [pc, #168]	; (53ac <tc_aes_encrypt+0xd0>)
	add_round_key(state, s->words);
    5304:	f016 f90d 	bl	1b522 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
    5308:	f105 0710 	add.w	r7, r5, #16
    530c:	46a1      	mov	r9, r4
    530e:	35a0      	adds	r5, #160	; 0xa0
	for (i = 0; i < (Nb * Nk); ++i) {
    5310:	46e8      	mov	r8, sp
{
    5312:	466a      	mov	r2, sp
    5314:	2310      	movs	r3, #16
		s[i] = sbox[s[i]];
    5316:	7811      	ldrb	r1, [r2, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    5318:	3b01      	subs	r3, #1
		s[i] = sbox[s[i]];
    531a:	5c61      	ldrb	r1, [r4, r1]
    531c:	f802 1b01 	strb.w	r1, [r2], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    5320:	d1f9      	bne.n	5316 <tc_aes_encrypt+0x3a>
		sub_bytes(state);
		shift_rows(state);
    5322:	4668      	mov	r0, sp
    5324:	f016 f942 	bl	1b5ac <shift_rows>
	mult_row_column(t, s);
    5328:	4669      	mov	r1, sp
    532a:	a804      	add	r0, sp, #16
    532c:	f016 f977 	bl	1b61e <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
    5330:	a901      	add	r1, sp, #4
    5332:	a805      	add	r0, sp, #20
    5334:	f016 f973 	bl	1b61e <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
    5338:	a902      	add	r1, sp, #8
    533a:	a806      	add	r0, sp, #24
    533c:	f016 f96f 	bl	1b61e <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
    5340:	a903      	add	r1, sp, #12
    5342:	a807      	add	r0, sp, #28
    5344:	f016 f96b 	bl	1b61e <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
    5348:	2310      	movs	r3, #16
    534a:	4619      	mov	r1, r3
    534c:	eb0d 0203 	add.w	r2, sp, r3
    5350:	4668      	mov	r0, sp
    5352:	f015 f9dc 	bl	1a70e <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    5356:	4639      	mov	r1, r7
    5358:	4668      	mov	r0, sp
    535a:	3710      	adds	r7, #16
    535c:	f016 f8e1 	bl	1b522 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
    5360:	42af      	cmp	r7, r5
    5362:	d1d5      	bne.n	5310 <tc_aes_encrypt+0x34>
    5364:	2410      	movs	r4, #16
		s[i] = sbox[s[i]];
    5366:	f898 3000 	ldrb.w	r3, [r8]
	for (i = 0; i < (Nb * Nk); ++i) {
    536a:	3c01      	subs	r4, #1
		s[i] = sbox[s[i]];
    536c:	f819 3003 	ldrb.w	r3, [r9, r3]
    5370:	f808 3b01 	strb.w	r3, [r8], #1
	for (i = 0; i < (Nb * Nk); ++i) {
    5374:	d1f7      	bne.n	5366 <tc_aes_encrypt+0x8a>
	}

	sub_bytes(state);
	shift_rows(state);
    5376:	4668      	mov	r0, sp
    5378:	f016 f918 	bl	1b5ac <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
    537c:	4629      	mov	r1, r5
    537e:	4668      	mov	r0, sp
    5380:	f016 f8cf 	bl	1b522 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
    5384:	2310      	movs	r3, #16
    5386:	4619      	mov	r1, r3
    5388:	466a      	mov	r2, sp
    538a:	4630      	mov	r0, r6
    538c:	f015 f9bf 	bl	1a70e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    5390:	4668      	mov	r0, sp
    5392:	2210      	movs	r2, #16
    5394:	4621      	mov	r1, r4
    5396:	f015 f9c7 	bl	1a728 <_set>

	return TC_CRYPTO_SUCCESS;
    539a:	2001      	movs	r0, #1
}
    539c:	b009      	add	sp, #36	; 0x24
    539e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return TC_CRYPTO_FAIL;
    53a2:	4608      	mov	r0, r1
    53a4:	e7fa      	b.n	539c <tc_aes_encrypt+0xc0>
    53a6:	4610      	mov	r0, r2
    53a8:	e7f8      	b.n	539c <tc_aes_encrypt+0xc0>
    53aa:	bf00      	nop
    53ac:	00020a4b 	.word	0x00020a4b

000053b0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    53b0:	4a09      	ldr	r2, [pc, #36]	; (53d8 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    53b2:	490a      	ldr	r1, [pc, #40]	; (53dc <arch_swap+0x2c>)
	_current->arch.basepri = key;
    53b4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    53b6:	6809      	ldr	r1, [r1, #0]
    53b8:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    53ba:	4909      	ldr	r1, [pc, #36]	; (53e0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    53bc:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    53be:	684b      	ldr	r3, [r1, #4]
    53c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    53c4:	604b      	str	r3, [r1, #4]
    53c6:	2300      	movs	r3, #0
    53c8:	f383 8811 	msr	BASEPRI, r3
    53cc:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    53d0:	6893      	ldr	r3, [r2, #8]
}
    53d2:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    53d4:	4770      	bx	lr
    53d6:	bf00      	nop
    53d8:	200028c0 	.word	0x200028c0
    53dc:	00020954 	.word	0x00020954
    53e0:	e000ed00 	.word	0xe000ed00

000053e4 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    53e4:	490f      	ldr	r1, [pc, #60]	; (5424 <z_arm_pendsv+0x40>)
    ldr r2, [r1, #_kernel_offset_to_current]
    53e6:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    53e8:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    53ec:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    53ee:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    53f2:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    53f6:	2020      	movs	r0, #32
    msr BASEPRI, r0
    53f8:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    53fc:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    5400:	4f09      	ldr	r7, [pc, #36]	; (5428 <z_arm_pendsv+0x44>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    5402:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    5406:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    5408:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    540a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    540c:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    540e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    5410:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    5412:	f380 8811 	msr	BASEPRI, r0
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    5416:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    541a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    541e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (_IntExit or z_arm_svc)
     */
    bx lr
    5422:	4770      	bx	lr
    ldr r1, =_kernel
    5424:	200028c0 	.word	0x200028c0
    ldr v4, =_SCS_ICSR
    5428:	e000ed04 	.word	0xe000ed04

0000542c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    542c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    5430:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    5432:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    5436:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    543a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    543c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    5440:	2902      	cmp	r1, #2
    beq _oops
    5442:	d0ff      	beq.n	5444 <_oops>

00005444 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    5444:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    5446:	f016 fa2f 	bl	1b8a8 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    544a:	bd01      	pop	{r0, pc}

0000544c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    544c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    544e:	2b00      	cmp	r3, #0
    5450:	db08      	blt.n	5464 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5452:	2201      	movs	r2, #1
    5454:	f000 001f 	and.w	r0, r0, #31
    5458:	fa02 f000 	lsl.w	r0, r2, r0
    545c:	095b      	lsrs	r3, r3, #5
    545e:	4a02      	ldr	r2, [pc, #8]	; (5468 <arch_irq_enable+0x1c>)
    5460:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    5464:	4770      	bx	lr
    5466:	bf00      	nop
    5468:	e000e100 	.word	0xe000e100

0000546c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    546c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    546e:	2b00      	cmp	r3, #0
    5470:	db0d      	blt.n	548e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    5472:	2201      	movs	r2, #1
    5474:	095b      	lsrs	r3, r3, #5
    5476:	f000 001f 	and.w	r0, r0, #31
    547a:	fa02 f000 	lsl.w	r0, r2, r0
    547e:	3320      	adds	r3, #32
    5480:	4a03      	ldr	r2, [pc, #12]	; (5490 <arch_irq_disable+0x24>)
    5482:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    5486:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    548a:	f3bf 8f6f 	isb	sy
}
    548e:	4770      	bx	lr
    5490:	e000e100 	.word	0xe000e100

00005494 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    5494:	4b05      	ldr	r3, [pc, #20]	; (54ac <arch_irq_is_enabled+0x18>)
    5496:	0942      	lsrs	r2, r0, #5
    5498:	f000 001f 	and.w	r0, r0, #31
    549c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    54a0:	2301      	movs	r3, #1
    54a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    54a6:	4010      	ands	r0, r2
    54a8:	4770      	bx	lr
    54aa:	bf00      	nop
    54ac:	e000e100 	.word	0xe000e100

000054b0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    54b0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    54b2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    54b4:	bfa8      	it	ge
    54b6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    54ba:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    54be:	bfb8      	it	lt
    54c0:	4b06      	ldrlt	r3, [pc, #24]	; (54dc <z_arm_irq_priority_set+0x2c>)
    54c2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    54c6:	bfac      	ite	ge
    54c8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    54cc:	f000 000f 	andlt.w	r0, r0, #15
    54d0:	b2c9      	uxtb	r1, r1
    54d2:	bfb4      	ite	lt
    54d4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    54d6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    54da:	4770      	bx	lr
    54dc:	e000ed14 	.word	0xe000ed14

000054e0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
    54e0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    54e2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    54e4:	4b04      	ldr	r3, [pc, #16]	; (54f8 <_arch_isr_direct_pm+0x18>)
    54e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    54e8:	b118      	cbz	r0, 54f2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    54ea:	2200      	movs	r2, #0
    54ec:	625a      	str	r2, [r3, #36]	; 0x24
		z_sys_power_save_idle_exit(idle_val);
    54ee:	f019 faae 	bl	1ea4e <z_sys_power_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    54f2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    54f4:	bd08      	pop	{r3, pc}
    54f6:	bf00      	nop
    54f8:	200028c0 	.word	0x200028c0

000054fc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    54fc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    5500:	9b00      	ldr	r3, [sp, #0]
    5502:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    5506:	490a      	ldr	r1, [pc, #40]	; (5530 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    5508:	9b01      	ldr	r3, [sp, #4]
    550a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    550e:	9b02      	ldr	r3, [sp, #8]
    5510:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    5514:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    5518:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    551c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    5520:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    5524:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    5526:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    5528:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    552a:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    552c:	4770      	bx	lr
    552e:	bf00      	nop
    5530:	00019f81 	.word	0x00019f81

00005534 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    5534:	b508      	push	{r3, lr}
    5536:	4606      	mov	r6, r0
    5538:	460d      	mov	r5, r1
    553a:	4614      	mov	r4, r2
	z_arm_configure_static_mpu_regions();
    553c:	f000 f99c 	bl	5878 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    5540:	4b07      	ldr	r3, [pc, #28]	; (5560 <arch_switch_to_main_thread+0x2c>)
    5542:	609e      	str	r6, [r3, #8]

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    5544:	4620      	mov	r0, r4
    5546:	f385 8809 	msr	PSP, r5
    554a:	2100      	movs	r1, #0
    554c:	b663      	cpsie	if
    554e:	f381 8811 	msr	BASEPRI, r1
    5552:	f3bf 8f6f 	isb	sy
    5556:	2200      	movs	r2, #0
    5558:	2300      	movs	r3, #0
    555a:	f014 fd11 	bl	19f80 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    555e:	bf00      	nop
    5560:	200028c0 	.word	0x200028c0

00005564 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    5564:	4901      	ldr	r1, [pc, #4]	; (556c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    5566:	2210      	movs	r2, #16
	str	r2, [r1]
    5568:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    556a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    556c:	e000ed10 	.word	0xe000ed10

00005570 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    5570:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    5572:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    5574:	f380 8811 	msr	BASEPRI, r0
	isb
    5578:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    557c:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    5580:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    5582:	b662      	cpsie	i
	isb
    5584:	f3bf 8f6f 	isb	sy

	bx	lr
    5588:	4770      	bx	lr
    558a:	bf00      	nop

0000558c <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    558c:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    558e:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    5590:	f381 8811 	msr	BASEPRI, r1

	wfe
    5594:	bf20      	wfe

	msr	BASEPRI, r0
    5596:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    559a:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    559c:	4770      	bx	lr
    559e:	bf00      	nop

000055a0 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    55a0:	bf30      	wfi
    b z_SysNmiOnReset
    55a2:	f7ff bffd 	b.w	55a0 <z_SysNmiOnReset>
    55a6:	bf00      	nop

000055a8 <z_arm_prep_c>:
#else
#define VECTOR_ADDRESS CONFIG_SRAM_BASE_ADDRESS
#endif
static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    55a8:	4a0e      	ldr	r2, [pc, #56]	; (55e4 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    55aa:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    55ac:	4b0e      	ldr	r3, [pc, #56]	; (55e8 <z_arm_prep_c+0x40>)
    55ae:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    55b2:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    55b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    55b8:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    55bc:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    55c0:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    55c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    55c8:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    55cc:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    55d0:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    55d4:	f013 f91e 	bl	18814 <z_bss_zero>
	z_data_copy();
    55d8:	f013 f926 	bl	18828 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    55dc:	f000 f91e 	bl	581c <z_arm_interrupt_init>
	z_cstart();
    55e0:	f013 f954 	bl	1888c <z_cstart>
    55e4:	00000000 	.word	0x00000000
    55e8:	e000ed00 	.word	0xe000ed00

000055ec <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    55ec:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    55ee:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    55f0:	4a0b      	ldr	r2, [pc, #44]	; (5620 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    55f2:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    55f4:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    55f6:	bf1e      	ittt	ne
	movne	r1, #0
    55f8:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    55fa:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_sys_power_save_idle_exit
    55fc:	f019 fa27 	blne	1ea4e <z_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    5600:	b662      	cpsie	i
#endif

#endif /* CONFIG_SYS_POWER_MANAGEMENT */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    5602:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    5606:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    560a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    560e:	4905      	ldr	r1, [pc, #20]	; (5624 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    5610:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    5612:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    5614:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    5616:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    561a:	4903      	ldr	r1, [pc, #12]	; (5628 <_isr_wrapper+0x3c>)
	bx r1
    561c:	4708      	bx	r1
    561e:	0000      	.short	0x0000
	ldr r2, =_kernel
    5620:	200028c0 	.word	0x200028c0
	ldr r1, =_sw_isr_table
    5624:	0001f40c 	.word	0x0001f40c
	ldr r1, =z_arm_int_exit
    5628:	00005801 	.word	0x00005801

0000562c <__start>:
 * search for a __start symbol instead, so create that alias here.
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    562c:	f016 fa58 	bl	1bae0 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    5630:	2020      	movs	r0, #32
    msr BASEPRI, r0
    5632:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    5636:	4808      	ldr	r0, [pc, #32]	; (5658 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    5638:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
    563c:	1840      	adds	r0, r0, r1
    msr PSP, r0
    563e:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    5642:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    5646:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    5648:	4308      	orrs	r0, r1
    msr CONTROL, r0
    564a:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    564e:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    5652:	f7ff ffa9 	bl	55a8 <z_arm_prep_c>
    5656:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    5658:	20004228 	.word	0x20004228

0000565c <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    565c:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    5660:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    5664:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    5666:	4672      	mov	r2, lr
	bl z_arm_fault
    5668:	f000 f84e 	bl	5708 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    566c:	bd01      	pop	{r0, pc}
    566e:	bf00      	nop

00005670 <mem_manage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    5670:	4b0c      	ldr	r3, [pc, #48]	; (56a4 <mem_manage_fault.isra.0+0x34>)
    5672:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    5674:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    5676:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5678:	0792      	lsls	r2, r2, #30
    567a:	d508      	bpl.n	568e <mem_manage_fault.isra.0+0x1e>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		mmfar = SCB->MMFAR;
    567c:	6b5a      	ldr	r2, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    567e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5680:	0612      	lsls	r2, r2, #24
    5682:	d504      	bpl.n	568e <mem_manage_fault.isra.0+0x1e>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault) {
    5684:	b118      	cbz	r0, 568e <mem_manage_fault.isra.0+0x1e>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    5686:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    5688:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    568c:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    568e:	4b05      	ldr	r3, [pc, #20]	; (56a4 <mem_manage_fault.isra.0+0x34>)
    5690:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    5692:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * if the memory violation error is a stack corruption.
	 *
	 * By design, being a Stacking MemManage fault is a necessary
	 * and sufficient condition for a thread stack corruption.
	 */
	if (SCB->CFSR & SCB_CFSR_MSTKERR_Msk) {
    5694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    5696:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    5698:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    569a:	f042 02ff 	orr.w	r2, r2, #255	; 0xff
    569e:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    56a0:	7008      	strb	r0, [r1, #0]

	return reason;
}
    56a2:	4770      	bx	lr
    56a4:	e000ed00 	.word	0xe000ed00

000056a8 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    56a8:	4b0d      	ldr	r3, [pc, #52]	; (56e0 <bus_fault.isra.0+0x38>)
    56aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    56ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    56ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56b0:	0592      	lsls	r2, r2, #22
    56b2:	d508      	bpl.n	56c6 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    56b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    56b6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56b8:	0412      	lsls	r2, r2, #16
    56ba:	d504      	bpl.n	56c6 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault) {
    56bc:	b118      	cbz	r0, 56c6 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    56be:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    56c4:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    56c6:	4b06      	ldr	r3, [pc, #24]	; (56e0 <bus_fault.isra.0+0x38>)
    56c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    56ca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56cc:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    56ce:	bf58      	it	pl
    56d0:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    56d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf);
    56d4:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    56d6:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    56da:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    56dc:	7008      	strb	r0, [r1, #0]

	return reason;
}
    56de:	4770      	bx	lr
    56e0:	e000ed00 	.word	0xe000ed00

000056e4 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    56e4:	4b07      	ldr	r3, [pc, #28]	; (5704 <usage_fault.isra.0+0x20>)
    56e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    56e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    56ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    56ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    56ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    56f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    56f2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    56f4:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    56f8:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    56fc:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    56fe:	2000      	movs	r0, #0
    5700:	4770      	bx	lr
    5702:	bf00      	nop
    5704:	e000ed00 	.word	0xe000ed00

00005708 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    5708:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    570a:	4b36      	ldr	r3, [pc, #216]	; (57e4 <z_arm_fault+0xdc>)
    570c:	685b      	ldr	r3, [r3, #4]
{
    570e:	b08a      	sub	sp, #40	; 0x28
    5710:	460e      	mov	r6, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    5712:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5716:	2500      	movs	r5, #0
    5718:	f385 8811 	msr	BASEPRI, r5
    571c:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    5720:	f002 417f 	and.w	r1, r2, #4278190080	; 0xff000000
    5724:	f1b1 4f7f 	cmp.w	r1, #4278190080	; 0xff000000
    5728:	d111      	bne.n	574e <z_arm_fault+0x46>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    572a:	f002 010c 	and.w	r1, r2, #12
    572e:	2908      	cmp	r1, #8
    5730:	d00d      	beq.n	574e <z_arm_fault+0x46>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    5732:	0711      	lsls	r1, r2, #28
    5734:	d401      	bmi.n	573a <z_arm_fault+0x32>
			ptr_esf = (z_arch_esf_t *)msp;
    5736:	4606      	mov	r6, r0
			*nested_exc = true;
    5738:	2501      	movs	r5, #1
	*recoverable = false;
    573a:	2200      	movs	r2, #0
    573c:	3b03      	subs	r3, #3
    573e:	f88d 2007 	strb.w	r2, [sp, #7]
	switch (fault) {
    5742:	2b03      	cmp	r3, #3
    5744:	d847      	bhi.n	57d6 <z_arm_fault+0xce>
    5746:	e8df f003 	tbb	[pc, r3]
    574a:	3e04      	.short	0x3e04
    574c:	3b42      	.short	0x3b42
		return NULL;
    574e:	462e      	mov	r6, r5
    5750:	e7f3      	b.n	573a <z_arm_fault+0x32>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    5752:	4b24      	ldr	r3, [pc, #144]	; (57e4 <z_arm_fault+0xdc>)
    5754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    5756:	0792      	lsls	r2, r2, #30
    5758:	d43d      	bmi.n	57d6 <z_arm_fault+0xce>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    575a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    575c:	f014 4480 	ands.w	r4, r4, #1073741824	; 0x40000000
    5760:	d008      	beq.n	5774 <z_arm_fault+0x6c>
		if (SCB_MMFSR != 0) {
    5762:	3328      	adds	r3, #40	; 0x28
    5764:	781b      	ldrb	r3, [r3, #0]
    5766:	b1eb      	cbz	r3, 57a4 <z_arm_fault+0x9c>
			reason = mem_manage_fault(esf, 1, recoverable);
    5768:	f10d 0107 	add.w	r1, sp, #7
    576c:	2001      	movs	r0, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    576e:	f7ff ff7f 	bl	5670 <mem_manage_fault.isra.0>
		reason = usage_fault(esf);
    5772:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    5774:	f89d 3007 	ldrb.w	r3, [sp, #7]
    5778:	b993      	cbnz	r3, 57a0 <z_arm_fault+0x98>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    577a:	2220      	movs	r2, #32
    577c:	4631      	mov	r1, r6
    577e:	a802      	add	r0, sp, #8
    5780:	f016 f953 	bl	1ba2a <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    5784:	9b09      	ldr	r3, [sp, #36]	; 0x24
    5786:	b345      	cbz	r5, 57da <z_arm_fault+0xd2>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    5788:	f3c3 0208 	ubfx	r2, r3, #0, #9
    578c:	b922      	cbnz	r2, 5798 <z_arm_fault+0x90>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    578e:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    5792:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    5796:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    5798:	a902      	add	r1, sp, #8
    579a:	4620      	mov	r0, r4
    579c:	f016 f882 	bl	1b8a4 <z_arm_fatal_error>
}
    57a0:	b00a      	add	sp, #40	; 0x28
    57a2:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    57a4:	4b10      	ldr	r3, [pc, #64]	; (57e8 <z_arm_fault+0xe0>)
    57a6:	781b      	ldrb	r3, [r3, #0]
    57a8:	b12b      	cbz	r3, 57b6 <z_arm_fault+0xae>
			reason = bus_fault(esf, 1, recoverable);
    57aa:	f10d 0107 	add.w	r1, sp, #7
    57ae:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    57b0:	f7ff ff7a 	bl	56a8 <bus_fault.isra.0>
    57b4:	e7dd      	b.n	5772 <z_arm_fault+0x6a>
		} else if (SCB_UFSR != 0) {
    57b6:	4b0d      	ldr	r3, [pc, #52]	; (57ec <z_arm_fault+0xe4>)
    57b8:	8818      	ldrh	r0, [r3, #0]
    57ba:	b284      	uxth	r4, r0
    57bc:	2c00      	cmp	r4, #0
    57be:	d0d9      	beq.n	5774 <z_arm_fault+0x6c>
		reason = usage_fault(esf);
    57c0:	f7ff ff90 	bl	56e4 <usage_fault.isra.0>
    57c4:	e7d5      	b.n	5772 <z_arm_fault+0x6a>
		reason = mem_manage_fault(esf, 0, recoverable);
    57c6:	f10d 0107 	add.w	r1, sp, #7
    57ca:	2000      	movs	r0, #0
    57cc:	e7cf      	b.n	576e <z_arm_fault+0x66>
		reason = bus_fault(esf, 0, recoverable);
    57ce:	f10d 0107 	add.w	r1, sp, #7
    57d2:	2000      	movs	r0, #0
    57d4:	e7ec      	b.n	57b0 <z_arm_fault+0xa8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    57d6:	2400      	movs	r4, #0
    57d8:	e7cc      	b.n	5774 <z_arm_fault+0x6c>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    57da:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    57de:	f023 0301 	bic.w	r3, r3, #1
    57e2:	e7d8      	b.n	5796 <z_arm_fault+0x8e>
    57e4:	e000ed00 	.word	0xe000ed00
    57e8:	e000ed29 	.word	0xe000ed29
    57ec:	e000ed2a 	.word	0xe000ed2a

000057f0 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    57f0:	4a02      	ldr	r2, [pc, #8]	; (57fc <z_arm_fault_init+0xc>)
    57f2:	6953      	ldr	r3, [r2, #20]
    57f4:	f043 0310 	orr.w	r3, r3, #16
    57f8:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    57fa:	4770      	bx	lr
    57fc:	e000ed00 	.word	0xe000ed00

00005800 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    5800:	4b04      	ldr	r3, [pc, #16]	; (5814 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    5802:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    5804:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    5806:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    5808:	d003      	beq.n	5812 <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    580a:	4903      	ldr	r1, [pc, #12]	; (5818 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    580c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    5810:	600a      	str	r2, [r1, #0]

00005812 <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    5812:	4770      	bx	lr
	ldr r3, =_kernel
    5814:	200028c0 	.word	0x200028c0
	ldr r1, =_SCS_ICSR
    5818:	e000ed04 	.word	0xe000ed04

0000581c <z_arm_interrupt_init>:
    581c:	4804      	ldr	r0, [pc, #16]	; (5830 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    581e:	2300      	movs	r3, #0
    5820:	2120      	movs	r1, #32
    5822:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    5824:	3301      	adds	r3, #1
    5826:	2b30      	cmp	r3, #48	; 0x30
    5828:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    582c:	d1f9      	bne.n	5822 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    582e:	4770      	bx	lr
    5830:	e000e100 	.word	0xe000e100

00005834 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    5834:	b508      	push	{r3, lr}
	if (_current == thread) {
    5836:	4b0e      	ldr	r3, [pc, #56]	; (5870 <z_impl_k_thread_abort+0x3c>)
    5838:	689b      	ldr	r3, [r3, #8]
    583a:	4283      	cmp	r3, r0
    583c:	d107      	bne.n	584e <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    583e:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    5842:	b193      	cbz	r3, 586a <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    5844:	4a0b      	ldr	r2, [pc, #44]	; (5874 <z_impl_k_thread_abort+0x40>)
    5846:	6853      	ldr	r3, [r2, #4]
    5848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    584c:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    584e:	f013 fbdf 	bl	19010 <z_thread_single_abort>
	__asm__ volatile(
    5852:	f04f 0320 	mov.w	r3, #32
    5856:	f3ef 8011 	mrs	r0, BASEPRI
    585a:	f383 8811 	msr	BASEPRI, r3
    585e:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    5862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    5866:	f019 ba60 	b.w	1ed2a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    586a:	f013 feb3 	bl	195d4 <z_self_abort>
    586e:	bf00      	nop
    5870:	200028c0 	.word	0x200028c0
    5874:	e000ed00 	.word	0xe000ed00

00005878 <z_arm_configure_static_mpu_regions>:
 *
 * For some MPU architectures, such as the unmodified ARMv8-M MPU,
 * the function must execute with MPU enabled.
 */
void z_arm_configure_static_mpu_regions(void)
{
    5878:	b51f      	push	{r0, r1, r2, r3, r4, lr}
		.size = (uint32_t)&_nocache_ram_size,
		.attr = K_MEM_PARTITION_P_RW_U_NA_NOCACHE,
		};
#endif /* CONFIG_NOCACHE_MEMORY */
#if defined(CONFIG_ARCH_HAS_RAMFUNC_SUPPORT)
		const struct k_mem_partition ramfunc_region =
    587a:	4b08      	ldr	r3, [pc, #32]	; (589c <z_arm_configure_static_mpu_regions+0x24>)
    587c:	9301      	str	r3, [sp, #4]
    587e:	4b08      	ldr	r3, [pc, #32]	; (58a0 <z_arm_configure_static_mpu_regions+0x28>)
    5880:	9302      	str	r3, [sp, #8]
    5882:	4b08      	ldr	r3, [pc, #32]	; (58a4 <z_arm_configure_static_mpu_regions+0x2c>)
    5884:	9303      	str	r3, [sp, #12]
#endif /* !CONFIG_MULTITHREADING && CONFIG_MPU_STACK_GUARD */
	/* Define a constant array of k_mem_partition objects
	 * to hold the configuration of the respective static
	 * MPU regions.
	 */
	const struct k_mem_partition *static_regions[] = {
    5886:	ab01      	add	r3, sp, #4
    5888:	9300      	str	r3, [sp, #0]
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    588a:	4a07      	ldr	r2, [pc, #28]	; (58a8 <z_arm_configure_static_mpu_regions+0x30>)
    588c:	4b07      	ldr	r3, [pc, #28]	; (58ac <z_arm_configure_static_mpu_regions+0x34>)
    588e:	2101      	movs	r1, #1
    5890:	4668      	mov	r0, sp
    5892:	f000 f893 	bl	59bc <arm_core_mpu_configure_static_mpu_regions>
	};

	arm_core_mpu_mark_areas_for_dynamic_regions(dyn_region_areas,
		ARRAY_SIZE(dyn_region_areas));
#endif /* CONFIG_MPU_REQUIRES_NON_OVERLAPPING_REGIONS */
}
    5896:	b005      	add	sp, #20
    5898:	f85d fb04 	ldr.w	pc, [sp], #4
    589c:	20000000 	.word	0x20000000
    58a0:	00000000 	.word	0x00000000
    58a4:	060b0000 	.word	0x060b0000
    58a8:	20000000 	.word	0x20000000
    58ac:	20040000 	.word	0x20040000

000058b0 <mpu_configure_regions>:
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    58b0:	f8df c084 	ldr.w	ip, [pc, #132]	; 5938 <mpu_configure_regions+0x88>
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct k_mem_partition
	*regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    58b4:	b5f0      	push	{r4, r5, r6, r7, lr}
    58b6:	4606      	mov	r6, r0
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    58b8:	2700      	movs	r7, #0
	int reg_index = start_reg_index;
    58ba:	4610      	mov	r0, r2
	for (i = 0; i < regions_num; i++) {
    58bc:	428f      	cmp	r7, r1
    58be:	db00      	blt.n	58c2 <mpu_configure_regions+0x12>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    58c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i]->size == 0U) {
    58c2:	f856 e027 	ldr.w	lr, [r6, r7, lsl #2]
    58c6:	f8de 4004 	ldr.w	r4, [lr, #4]
    58ca:	b394      	cbz	r4, 5932 <mpu_configure_regions+0x82>
		if (do_sanity_check &&
    58cc:	b143      	cbz	r3, 58e0 <mpu_configure_regions+0x30>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    58ce:	1e65      	subs	r5, r4, #1
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    58d0:	422c      	tst	r4, r5
    58d2:	d119      	bne.n	5908 <mpu_configure_regions+0x58>
		&&
    58d4:	2c1f      	cmp	r4, #31
    58d6:	d917      	bls.n	5908 <mpu_configure_regions+0x58>
		((part->start & (part->size - 1U)) == 0U);
    58d8:	f8de 2000 	ldr.w	r2, [lr]
		&&
    58dc:	4215      	tst	r5, r2
    58de:	d113      	bne.n	5908 <mpu_configure_regions+0x58>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    58e0:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, regions[i]);
    58e2:	b2c2      	uxtb	r2, r0
	region_conf.base = new_region->start;
    58e4:	f8de 5000 	ldr.w	r5, [lr]
	get_region_attr_from_k_mem_partition_info(&region_conf.attr,
    58e8:	f8de 0008 	ldr.w	r0, [lr, #8]
    58ec:	d90f      	bls.n	590e <mpu_configure_regions+0x5e>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    58ee:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    58f2:	d80e      	bhi.n	5912 <mpu_configure_regions+0x62>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    58f4:	3c01      	subs	r4, #1
    58f6:	fab4 f484 	clz	r4, r4
    58fa:	f1c4 041f 	rsb	r4, r4, #31
    58fe:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    5900:	2a07      	cmp	r2, #7
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    5902:	ea44 0400 	orr.w	r4, r4, r0
    5906:	d906      	bls.n	5916 <mpu_configure_regions+0x66>
			return -EINVAL;
    5908:	f06f 0015 	mvn.w	r0, #21
    590c:	e7d8      	b.n	58c0 <mpu_configure_regions+0x10>
		return REGION_32B;
    590e:	2408      	movs	r4, #8
    5910:	e7f6      	b.n	5900 <mpu_configure_regions+0x50>
		return REGION_4G;
    5912:	243e      	movs	r4, #62	; 0x3e
    5914:	e7f4      	b.n	5900 <mpu_configure_regions+0x50>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5916:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    591a:	4315      	orrs	r5, r2
    591c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    5920:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    5924:	f8cc 2008 	str.w	r2, [ip, #8]
		reg_index++;
    5928:	1c50      	adds	r0, r2, #1
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    592a:	f8cc 500c 	str.w	r5, [ip, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    592e:	f8cc 4010 	str.w	r4, [ip, #16]
	for (i = 0; i < regions_num; i++) {
    5932:	3701      	adds	r7, #1
    5934:	e7c2      	b.n	58bc <mpu_configure_regions+0xc>
    5936:	bf00      	nop
    5938:	e000ed90 	.word	0xe000ed90

0000593c <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    593c:	4b03      	ldr	r3, [pc, #12]	; (594c <arm_core_mpu_enable+0x10>)
    593e:	2205      	movs	r2, #5
    5940:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    5942:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    5946:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    594a:	4770      	bx	lr
    594c:	e000ed90 	.word	0xe000ed90

00005950 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    5950:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    5954:	4b01      	ldr	r3, [pc, #4]	; (595c <arm_core_mpu_disable+0xc>)
    5956:	2200      	movs	r2, #0
    5958:	605a      	str	r2, [r3, #4]
}
    595a:	4770      	bx	lr
    595c:	e000ed90 	.word	0xe000ed90

00005960 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    5960:	4913      	ldr	r1, [pc, #76]	; (59b0 <arm_mpu_init+0x50>)
    5962:	6808      	ldr	r0, [r1, #0]
    5964:	2808      	cmp	r0, #8
{
    5966:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    5968:	d81e      	bhi.n	59a8 <arm_mpu_init+0x48>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    596a:	f7ff fff1 	bl	5950 <arm_core_mpu_disable>
	MPU->RNR = index;
    596e:	4c11      	ldr	r4, [pc, #68]	; (59b4 <arm_mpu_init+0x54>)
    5970:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    5972:	2200      	movs	r2, #0
    5974:	4290      	cmp	r0, r2
    5976:	f101 010c 	add.w	r1, r1, #12
    597a:	d105      	bne.n	5988 <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    597c:	4b0e      	ldr	r3, [pc, #56]	; (59b8 <arm_mpu_init+0x58>)
    597e:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    5980:	f7ff ffdc 	bl	593c <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    5984:	2000      	movs	r0, #0
}
    5986:	bd10      	pop	{r4, pc}
    5988:	60a2      	str	r2, [r4, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    598a:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    598e:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    5992:	4313      	orrs	r3, r2
    5994:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    5998:	60e3      	str	r3, [r4, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    599a:	f851 3c04 	ldr.w	r3, [r1, #-4]
    599e:	f043 0301 	orr.w	r3, r3, #1
    59a2:	6123      	str	r3, [r4, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    59a4:	3201      	adds	r2, #1
    59a6:	e7e5      	b.n	5974 <arm_mpu_init+0x14>
		return -1;
    59a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    59ac:	e7eb      	b.n	5986 <arm_mpu_init+0x26>
    59ae:	bf00      	nop
    59b0:	0001f884 	.word	0x0001f884
    59b4:	e000ed90 	.word	0xe000ed90
    59b8:	20002927 	.word	0x20002927

000059bc <arm_core_mpu_configure_static_mpu_regions>:
{
    59bc:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct k_mem_partition
	*static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    59be:	4c03      	ldr	r4, [pc, #12]	; (59cc <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    59c0:	2301      	movs	r3, #1
    59c2:	7822      	ldrb	r2, [r4, #0]
    59c4:	f7ff ff74 	bl	58b0 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    59c8:	7020      	strb	r0, [r4, #0]
}
    59ca:	bd10      	pop	{r4, pc}
    59cc:	20002927 	.word	0x20002927

000059d0 <snprintf>:
	return 0; /* indicate keep going so we get the total count */
}

int snprintf(char *_MLIBC_RESTRICT s, size_t len,
	     const char *_MLIBC_RESTRICT format, ...)
{
    59d0:	b40c      	push	{r2, r3}
    59d2:	b51f      	push	{r0, r1, r2, r3, r4, lr}

	struct emitter p;
	int     r;
	char    dummy;

	if (len == 0) {
    59d4:	b909      	cbnz	r1, 59da <snprintf+0xa>
		s = &dummy; /* write final NUL to dummy, can't change *s */
    59d6:	f10d 0003 	add.w	r0, sp, #3
	}

	p.ptr = s;
	p.len = (int) len;
    59da:	e9cd 0102 	strd	r0, r1, [sp, #8]

	va_start(vargs, format);
    59de:	ab07      	add	r3, sp, #28
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    59e0:	9a06      	ldr	r2, [sp, #24]
    59e2:	4806      	ldr	r0, [pc, #24]	; (59fc <snprintf+0x2c>)
	va_start(vargs, format);
    59e4:	9301      	str	r3, [sp, #4]
	r = z_prf(sprintf_out, (void *) (&p), format, vargs);
    59e6:	a902      	add	r1, sp, #8
    59e8:	f7fe fad8 	bl	3f9c <z_prf>
	va_end(vargs);

	*(p.ptr) = 0;
    59ec:	9b02      	ldr	r3, [sp, #8]
    59ee:	2200      	movs	r2, #0
    59f0:	701a      	strb	r2, [r3, #0]
	return r;
}
    59f2:	b005      	add	sp, #20
    59f4:	f85d eb04 	ldr.w	lr, [sp], #4
    59f8:	b002      	add	sp, #8
    59fa:	4770      	bx	lr
    59fc:	0001bac7 	.word	0x0001bac7

00005a00 <nordicsemi_nrf52_init>:
    5a00:	f04f 0320 	mov.w	r3, #32
    5a04:	f3ef 8211 	mrs	r2, BASEPRI
    5a08:	f383 8811 	msr	BASEPRI, r3
    5a0c:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    5a10:	4906      	ldr	r1, [pc, #24]	; (5a2c <nordicsemi_nrf52_init+0x2c>)
    5a12:	2301      	movs	r3, #1
    5a14:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    5a18:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    5a1c:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    5a20:	f382 8811 	msr	BASEPRI, r2
    5a24:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    5a28:	2000      	movs	r0, #0
    5a2a:	4770      	bx	lr
    5a2c:	4001e000 	.word	0x4001e000

00005a30 <sys_arch_reboot>:
    *p_gpregret = val;
    5a30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    5a34:	b2c0      	uxtb	r0, r0
    5a36:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    5a3a:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5a3e:	4905      	ldr	r1, [pc, #20]	; (5a54 <sys_arch_reboot+0x24>)
    5a40:	4b05      	ldr	r3, [pc, #20]	; (5a58 <sys_arch_reboot+0x28>)
    5a42:	68ca      	ldr	r2, [r1, #12]
    5a44:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    5a48:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    5a4a:	60cb      	str	r3, [r1, #12]
    5a4c:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    5a50:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5a52:	e7fd      	b.n	5a50 <sys_arch_reboot+0x20>
    5a54:	e000ed00 	.word	0xe000ed00
    5a58:	05fa0004 	.word	0x05fa0004

00005a5c <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    5a5c:	b120      	cbz	r0, 5a68 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    5a5e:	4b03      	ldr	r3, [pc, #12]	; (5a6c <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    5a60:	0180      	lsls	r0, r0, #6
    5a62:	f043 0301 	orr.w	r3, r3, #1
    5a66:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    5a68:	4770      	bx	lr
    5a6a:	bf00      	nop
    5a6c:	0001f6f0 	.word	0x0001f6f0

00005a70 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    5a70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5a74:	4f5b      	ldr	r7, [pc, #364]	; (5be4 <ecc_thread+0x174>)
	return z_impl_k_sem_take(sem, timeout);
    5a76:	f8df 8184 	ldr.w	r8, [pc, #388]	; 5bfc <ecc_thread+0x18c>
    5a7a:	463e      	mov	r6, r7
    5a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5a80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5a84:	4640      	mov	r0, r8
    5a86:	f013 fca9 	bl	193dc <z_impl_k_sem_take>
    5a8a:	f3bf 8f5b 	dmb	ish
    5a8e:	683c      	ldr	r4, [r7, #0]
    5a90:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5a94:	f014 0401 	ands.w	r4, r4, #1
    5a98:	d055      	beq.n	5b46 <ecc_thread+0xd6>
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5a9a:	f8df 915c 	ldr.w	r9, [pc, #348]	; 5bf8 <ecc_thread+0x188>
    5a9e:	4c52      	ldr	r4, [pc, #328]	; (5be8 <ecc_thread+0x178>)
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5aa0:	4d52      	ldr	r5, [pc, #328]	; (5bec <ecc_thread+0x17c>)
		rc = uECC_make_key(ecc.pk, ecc.private_key, &curve_secp256r1);
    5aa2:	4853      	ldr	r0, [pc, #332]	; (5bf0 <ecc_thread+0x180>)
    5aa4:	464a      	mov	r2, r9
    5aa6:	4621      	mov	r1, r4
    5aa8:	f014 fe49 	bl	1a73e <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    5aac:	2800      	cmp	r0, #0
    5aae:	d03e      	beq.n	5b2e <ecc_thread+0xbe>
	} while (memcmp(ecc.private_key, debug_private_key, 32) == 0);
    5ab0:	2220      	movs	r2, #32
    5ab2:	4629      	mov	r1, r5
    5ab4:	4620      	mov	r0, r4
    5ab6:	f015 ffa8 	bl	1ba0a <memcmp>
    5aba:	2800      	cmp	r0, #0
    5abc:	d0f1      	beq.n	5aa2 <ecc_thread+0x32>
	return 0;
    5abe:	f04f 0900 	mov.w	r9, #0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5ac2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5ac6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5aca:	2001      	movs	r0, #1
    5acc:	f001 fed0 	bl	7870 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5ad0:	f100 0508 	add.w	r5, r0, #8
    5ad4:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5ad6:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5ad8:	4628      	mov	r0, r5
    5ada:	f018 fd5b 	bl	1e594 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5ade:	233e      	movs	r3, #62	; 0x3e
    5ae0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5ae2:	2342      	movs	r3, #66	; 0x42
    5ae4:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5ae6:	2101      	movs	r1, #1
    5ae8:	4628      	mov	r0, r5
    5aea:	f018 fd53 	bl	1e594 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    5aee:	2308      	movs	r3, #8
    5af0:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5af2:	2141      	movs	r1, #65	; 0x41
    5af4:	4628      	mov	r0, r5
    5af6:	f018 fd4d 	bl	1e594 <net_buf_simple_add>
    5afa:	4605      	mov	r5, r0
	evt->status = status;
    5afc:	f800 9b01 	strb.w	r9, [r0], #1
	if (status) {
    5b00:	f1b9 0f00 	cmp.w	r9, #0
    5b04:	d016      	beq.n	5b34 <ecc_thread+0xc4>
		(void)memset(evt->key, 0, sizeof(evt->key));
    5b06:	2240      	movs	r2, #64	; 0x40
    5b08:	2100      	movs	r1, #0
    5b0a:	f015 ffb9 	bl	1ba80 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5b0e:	f3bf 8f5b 	dmb	ish
    5b12:	e856 3f00 	ldrex	r3, [r6]
    5b16:	f023 0301 	bic.w	r3, r3, #1
    5b1a:	e846 3200 	strex	r2, r3, [r6]
    5b1e:	2a00      	cmp	r2, #0
    5b20:	d1f7      	bne.n	5b12 <ecc_thread+0xa2>
    5b22:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5b26:	4620      	mov	r0, r4
	bt_recv(buf);
    5b28:	f001 f9c4 	bl	6eb4 <bt_recv>
	while (true) {
    5b2c:	e7a6      	b.n	5a7c <ecc_thread+0xc>
			return BT_HCI_ERR_UNSPECIFIED;
    5b2e:	f04f 091f 	mov.w	r9, #31
    5b32:	e7c6      	b.n	5ac2 <ecc_thread+0x52>
		sys_memcpy_swap(evt->key, ecc.pk, 32);
    5b34:	492e      	ldr	r1, [pc, #184]	; (5bf0 <ecc_thread+0x180>)
    5b36:	f016 f840 	bl	1bbba <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.pk[32], 32);
    5b3a:	492e      	ldr	r1, [pc, #184]	; (5bf4 <ecc_thread+0x184>)
    5b3c:	f105 0021 	add.w	r0, r5, #33	; 0x21
    5b40:	f016 f83b 	bl	1bbba <sys_memcpy_swap.constprop.0>
    5b44:	e7e3      	b.n	5b0e <ecc_thread+0x9e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5b46:	f3bf 8f5b 	dmb	ish
    5b4a:	683b      	ldr	r3, [r7, #0]
    5b4c:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5b50:	079b      	lsls	r3, r3, #30
    5b52:	d593      	bpl.n	5a7c <ecc_thread+0xc>
	ret = uECC_valid_public_key(ecc.pk, &curve_secp256r1);
    5b54:	4928      	ldr	r1, [pc, #160]	; (5bf8 <ecc_thread+0x188>)
    5b56:	4826      	ldr	r0, [pc, #152]	; (5bf0 <ecc_thread+0x180>)
    5b58:	f015 fcc0 	bl	1b4dc <uECC_valid_public_key>
	if (ret < 0) {
    5b5c:	2800      	cmp	r0, #0
    5b5e:	db07      	blt.n	5b70 <ecc_thread+0x100>
		ret = uECC_shared_secret(ecc.pk, ecc.private_key, ecc.dhkey,
    5b60:	4a23      	ldr	r2, [pc, #140]	; (5bf0 <ecc_thread+0x180>)
    5b62:	4b25      	ldr	r3, [pc, #148]	; (5bf8 <ecc_thread+0x188>)
    5b64:	f1a2 0120 	sub.w	r1, r2, #32
    5b68:	4610      	mov	r0, r2
    5b6a:	f014 fe37 	bl	1a7dc <uECC_shared_secret>
    5b6e:	4604      	mov	r4, r0
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5b74:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    5b78:	2001      	movs	r0, #1
    5b7a:	f001 fe79 	bl	7870 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    5b7e:	f100 0908 	add.w	r9, r0, #8
    5b82:	2102      	movs	r1, #2
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    5b84:	4605      	mov	r5, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    5b86:	4648      	mov	r0, r9
    5b88:	f018 fd04 	bl	1e594 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    5b8c:	233e      	movs	r3, #62	; 0x3e
    5b8e:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    5b90:	2322      	movs	r3, #34	; 0x22
    5b92:	7043      	strb	r3, [r0, #1]
	meta = net_buf_add(buf, sizeof(*meta));
    5b94:	2101      	movs	r1, #1
    5b96:	4648      	mov	r0, r9
    5b98:	f018 fcfc 	bl	1e594 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    5b9c:	2309      	movs	r3, #9
    5b9e:	7003      	strb	r3, [r0, #0]
	evt = net_buf_add(buf, sizeof(*evt));
    5ba0:	2121      	movs	r1, #33	; 0x21
    5ba2:	4648      	mov	r0, r9
    5ba4:	f018 fcf6 	bl	1e594 <net_buf_simple_add>
    5ba8:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    5baa:	3001      	adds	r0, #1
    5bac:	b99c      	cbnz	r4, 5bd6 <ecc_thread+0x166>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    5bae:	221f      	movs	r2, #31
    5bb0:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    5bb2:	21ff      	movs	r1, #255	; 0xff
    5bb4:	2220      	movs	r2, #32
    5bb6:	f015 ff63 	bl	1ba80 <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5bba:	f3bf 8f5b 	dmb	ish
    5bbe:	e856 3f00 	ldrex	r3, [r6]
    5bc2:	f023 0302 	bic.w	r3, r3, #2
    5bc6:	e846 3200 	strex	r2, r3, [r6]
    5bca:	2a00      	cmp	r2, #0
    5bcc:	d1f7      	bne.n	5bbe <ecc_thread+0x14e>
    5bce:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    5bd2:	4628      	mov	r0, r5
    5bd4:	e7a8      	b.n	5b28 <ecc_thread+0xb8>
		evt->status = 0U;
    5bd6:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    5bd8:	4905      	ldr	r1, [pc, #20]	; (5bf0 <ecc_thread+0x180>)
		evt->status = 0U;
    5bda:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey, sizeof(ecc.dhkey));
    5bdc:	f015 ffed 	bl	1bbba <sys_memcpy_swap.constprop.0>
    5be0:	e7eb      	b.n	5bba <ecc_thread+0x14a>
    5be2:	bf00      	nop
    5be4:	20001488 	.word	0x20001488
    5be8:	20002928 	.word	0x20002928
    5bec:	0001f954 	.word	0x0001f954
    5bf0:	20002948 	.word	0x20002948
    5bf4:	20002968 	.word	0x20002968
    5bf8:	0001f8a4 	.word	0x0001f8a4
    5bfc:	20000adc 	.word	0x20000adc

00005c00 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    5c00:	b570      	push	{r4, r5, r6, lr}
	 * pointer to an enum causes issues on qemu_x86 because the true
	 * size is 8-bit, but the enum is 32-bit on qemu_x86. So we put in
	 * a temporary cast to 8-bit to ensure only 8 bits are read from
	 * the pointer.
	 */
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    5c02:	7d05      	ldrb	r5, [r0, #20]
    5c04:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    5c06:	b9ad      	cbnz	r5, 5c34 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    5c08:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    5c0a:	881a      	ldrh	r2, [r3, #0]
    5c0c:	f242 0125 	movw	r1, #8229	; 0x2025
    5c10:	428a      	cmp	r2, r1
    5c12:	d017      	beq.n	5c44 <bt_hci_ecc_send+0x44>
    5c14:	f242 0126 	movw	r1, #8230	; 0x2026
    5c18:	428a      	cmp	r2, r1
    5c1a:	d03c      	beq.n	5c96 <bt_hci_ecc_send+0x96>
    5c1c:	f242 0101 	movw	r1, #8193	; 0x2001
    5c20:	428a      	cmp	r2, r1
    5c22:	d107      	bne.n	5c34 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    5c24:	78da      	ldrb	r2, [r3, #3]
    5c26:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5c2a:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    5c2c:	791a      	ldrb	r2, [r3, #4]
    5c2e:	f022 0201 	bic.w	r2, r2, #1
    5c32:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    5c34:	4b31      	ldr	r3, [pc, #196]	; (5cfc <bt_hci_ecc_send+0xfc>)
    5c36:	f8d3 3124 	ldr.w	r3, [r3, #292]	; 0x124
    5c3a:	4620      	mov	r0, r4
    5c3c:	691b      	ldr	r3, [r3, #16]
}
    5c3e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    5c42:	4718      	bx	r3
			net_buf_pull(buf, sizeof(*chdr));
    5c44:	2103      	movs	r1, #3
    5c46:	3008      	adds	r0, #8
    5c48:	f018 fcc3 	bl	1e5d2 <net_buf_simple_pull>
	net_buf_unref(buf);
    5c4c:	4620      	mov	r0, r4
    5c4e:	f011 f8d7 	bl	16e00 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c52:	f3bf 8f5b 	dmb	ish
    5c56:	4b2a      	ldr	r3, [pc, #168]	; (5d00 <bt_hci_ecc_send+0x100>)
    5c58:	681a      	ldr	r2, [r3, #0]
    5c5a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    5c5e:	0790      	lsls	r0, r2, #30
    5c60:	d507      	bpl.n	5c72 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    5c62:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    5c64:	4629      	mov	r1, r5
    5c66:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    5c6a:	f015 ff82 	bl	1bb72 <send_cmd_status>
}
    5c6e:	2000      	movs	r0, #0
    5c70:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5c72:	f3bf 8f5b 	dmb	ish
    5c76:	e853 2f00 	ldrex	r2, [r3]
    5c7a:	f042 0101 	orr.w	r1, r2, #1
    5c7e:	e843 1000 	strex	r0, r1, [r3]
    5c82:	2800      	cmp	r0, #0
    5c84:	d1f7      	bne.n	5c76 <bt_hci_ecc_send+0x76>
    5c86:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    5c8a:	07d1      	lsls	r1, r2, #31
    5c8c:	d4e9      	bmi.n	5c62 <bt_hci_ecc_send+0x62>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5c8e:	481d      	ldr	r0, [pc, #116]	; (5d04 <bt_hci_ecc_send+0x104>)
    5c90:	f013 fb7e 	bl	19390 <z_impl_k_sem_give>
}
    5c94:	e7e6      	b.n	5c64 <bt_hci_ecc_send+0x64>
			net_buf_pull(buf, sizeof(*chdr));
    5c96:	2103      	movs	r1, #3
    5c98:	3008      	adds	r0, #8
    5c9a:	f018 fc9a 	bl	1e5d2 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5c9e:	f3bf 8f5b 	dmb	ish
    5ca2:	4b17      	ldr	r3, [pc, #92]	; (5d00 <bt_hci_ecc_send+0x100>)
    5ca4:	681a      	ldr	r2, [r3, #0]
    5ca6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    5caa:	07d2      	lsls	r2, r2, #31
    5cac:	d507      	bpl.n	5cbe <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    5cae:	250c      	movs	r5, #12
	net_buf_unref(buf);
    5cb0:	4620      	mov	r0, r4
    5cb2:	f011 f8a5 	bl	16e00 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    5cb6:	4629      	mov	r1, r5
    5cb8:	f242 0026 	movw	r0, #8230	; 0x2026
    5cbc:	e7d5      	b.n	5c6a <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    5cbe:	89a2      	ldrh	r2, [r4, #12]
    5cc0:	2a3f      	cmp	r2, #63	; 0x3f
    5cc2:	d919      	bls.n	5cf8 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5cc4:	f3bf 8f5b 	dmb	ish
    5cc8:	e853 2f00 	ldrex	r2, [r3]
    5ccc:	f042 0102 	orr.w	r1, r2, #2
    5cd0:	e843 1000 	strex	r0, r1, [r3]
    5cd4:	2800      	cmp	r0, #0
    5cd6:	d1f7      	bne.n	5cc8 <bt_hci_ecc_send+0xc8>
    5cd8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    5cdc:	0793      	lsls	r3, r2, #30
    5cde:	d4e6      	bmi.n	5cae <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    5ce0:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.pk, cmd->key, 32);
    5ce2:	4809      	ldr	r0, [pc, #36]	; (5d08 <bt_hci_ecc_send+0x108>)
    5ce4:	f015 ff69 	bl	1bbba <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.pk[32], &cmd->key[32], 32);
    5ce8:	4808      	ldr	r0, [pc, #32]	; (5d0c <bt_hci_ecc_send+0x10c>)
    5cea:	3120      	adds	r1, #32
    5cec:	f015 ff65 	bl	1bbba <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    5cf0:	4804      	ldr	r0, [pc, #16]	; (5d04 <bt_hci_ecc_send+0x104>)
    5cf2:	f013 fb4d 	bl	19390 <z_impl_k_sem_give>
}
    5cf6:	e7db      	b.n	5cb0 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    5cf8:	2512      	movs	r5, #18
    5cfa:	e7d9      	b.n	5cb0 <bt_hci_ecc_send+0xb0>
    5cfc:	20000000 	.word	0x20000000
    5d00:	20001488 	.word	0x20001488
    5d04:	20000adc 	.word	0x20000adc
    5d08:	20002948 	.word	0x20002948
    5d0c:	20002968 	.word	0x20002968

00005d10 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    5d10:	b510      	push	{r4, lr}
    5d12:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5d14:	4c0c      	ldr	r4, [pc, #48]	; (5d48 <bt_hci_ecc_init+0x38>)
    5d16:	490d      	ldr	r1, [pc, #52]	; (5d4c <bt_hci_ecc_init+0x3c>)
    5d18:	2200      	movs	r2, #0
    5d1a:	2300      	movs	r3, #0
    5d1c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5d20:	2300      	movs	r3, #0
    5d22:	220a      	movs	r2, #10
    5d24:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5d28:	e9cd 3301 	strd	r3, r3, [sp, #4]
    5d2c:	9300      	str	r3, [sp, #0]
    5d2e:	f44f 628a 	mov.w	r2, #1104	; 0x450
    5d32:	4b07      	ldr	r3, [pc, #28]	; (5d50 <bt_hci_ecc_init+0x40>)
    5d34:	4620      	mov	r0, r4
    5d36:	f013 fbc3 	bl	194c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    5d3a:	4906      	ldr	r1, [pc, #24]	; (5d54 <bt_hci_ecc_init+0x44>)
    5d3c:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    5d3e:	b008      	add	sp, #32
    5d40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5d44:	f019 b8d4 	b.w	1eef0 <z_impl_k_thread_name_set>
    5d48:	20000c70 	.word	0x20000c70
    5d4c:	20002bc0 	.word	0x20002bc0
    5d50:	00005a71 	.word	0x00005a71
    5d54:	00020b5a 	.word	0x00020b5a

00005d58 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    5d58:	b510      	push	{r4, lr}
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    5d5a:	4c08      	ldr	r4, [pc, #32]	; (5d7c <save_id+0x24>)
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    5d5c:	4808      	ldr	r0, [pc, #32]	; (5d80 <save_id+0x28>)
    5d5e:	79e2      	ldrb	r2, [r4, #7]
    5d60:	4621      	mov	r1, r4
    5d62:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    5d66:	f7fe fe17 	bl	4998 <settings_save_one>
	if (err) {
		BT_ERR("Failed to save ID (err %d)", err);
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    5d6a:	79e2      	ldrb	r2, [r4, #7]
    5d6c:	4805      	ldr	r0, [pc, #20]	; (5d84 <save_id+0x2c>)
    5d6e:	f504 7194 	add.w	r1, r4, #296	; 0x128
    5d72:	0112      	lsls	r2, r2, #4
	if (err) {
		BT_ERR("Failed to save IRK (err %d)", err);
	}
#endif
}
    5d74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    5d78:	f7fe be0e 	b.w	4998 <settings_save_one>
    5d7c:	20000000 	.word	0x20000000
    5d80:	00020b61 	.word	0x00020b61
    5d84:	00020b67 	.word	0x00020b67

00005d88 <set>:
{
    5d88:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5d8c:	4605      	mov	r5, r0
    5d8e:	4616      	mov	r6, r2
    5d90:	461f      	mov	r7, r3
	if (!name) {
    5d92:	b928      	cbnz	r0, 5da0 <set+0x18>
		return -ENOENT;
    5d94:	f06f 0401 	mvn.w	r4, #1
}
    5d98:	4620      	mov	r0, r4
    5d9a:	b002      	add	sp, #8
    5d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = settings_name_next(name, &next);
    5da0:	a901      	add	r1, sp, #4
    5da2:	f014 fc02 	bl	1a5aa <settings_name_next>
	if (!strncmp(name, "id", len)) {
    5da6:	491c      	ldr	r1, [pc, #112]	; (5e18 <set+0x90>)
    5da8:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    5daa:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    5dac:	4628      	mov	r0, r5
    5dae:	f015 fe1d 	bl	1b9ec <strncmp>
    5db2:	4604      	mov	r4, r0
    5db4:	b9e0      	cbnz	r0, 5df0 <set+0x68>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5db6:	f3bf 8f5b 	dmb	ish
    5dba:	4d18      	ldr	r5, [pc, #96]	; (5e1c <set+0x94>)
    5dbc:	682b      	ldr	r3, [r5, #0]
    5dbe:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    5dc2:	075b      	lsls	r3, r3, #29
    5dc4:	d501      	bpl.n	5dca <set+0x42>
{
    5dc6:	2400      	movs	r4, #0
    5dc8:	e7e6      	b.n	5d98 <set+0x10>
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    5dca:	3d98      	subs	r5, #152	; 0x98
    5dcc:	2207      	movs	r2, #7
    5dce:	4629      	mov	r1, r5
    5dd0:	4638      	mov	r0, r7
    5dd2:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    5dd4:	2806      	cmp	r0, #6
    5dd6:	d806      	bhi.n	5de6 <set+0x5e>
			(void)memset(bt_dev.id_addr, 0,
    5dd8:	2207      	movs	r2, #7
    5dda:	4621      	mov	r1, r4
    5ddc:	4628      	mov	r0, r5
    5dde:	f015 fe4f 	bl	1ba80 <memset>
			bt_dev.id_count = 0U;
    5de2:	71ec      	strb	r4, [r5, #7]
    5de4:	e7d8      	b.n	5d98 <set+0x10>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    5de6:	2307      	movs	r3, #7
    5de8:	fbb0 f0f3 	udiv	r0, r0, r3
    5dec:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    5dee:	e7d3      	b.n	5d98 <set+0x10>
	if (!strncmp(name, "irk", len)) {
    5df0:	490b      	ldr	r1, [pc, #44]	; (5e20 <set+0x98>)
    5df2:	4642      	mov	r2, r8
    5df4:	4628      	mov	r0, r5
    5df6:	f015 fdf9 	bl	1b9ec <strncmp>
    5dfa:	4604      	mov	r4, r0
    5dfc:	2800      	cmp	r0, #0
    5dfe:	d1c9      	bne.n	5d94 <set+0xc>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    5e00:	4908      	ldr	r1, [pc, #32]	; (5e24 <set+0x9c>)
    5e02:	2210      	movs	r2, #16
    5e04:	4638      	mov	r0, r7
    5e06:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    5e08:	280f      	cmp	r0, #15
    5e0a:	d8dc      	bhi.n	5dc6 <set+0x3e>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    5e0c:	2210      	movs	r2, #16
    5e0e:	4621      	mov	r1, r4
    5e10:	4804      	ldr	r0, [pc, #16]	; (5e24 <set+0x9c>)
    5e12:	f015 fe35 	bl	1ba80 <memset>
    5e16:	e7bf      	b.n	5d98 <set+0x10>
    5e18:	00020b64 	.word	0x00020b64
    5e1c:	20000098 	.word	0x20000098
    5e20:	00020b6a 	.word	0x00020b6a
    5e24:	20000128 	.word	0x20000128

00005e28 <bt_settings_encode_key>:
{
    5e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e2c:	b088      	sub	sp, #32
    5e2e:	799c      	ldrb	r4, [r3, #6]
    5e30:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
    5e34:	795d      	ldrb	r5, [r3, #5]
    5e36:	791e      	ldrb	r6, [r3, #4]
    5e38:	78df      	ldrb	r7, [r3, #3]
    5e3a:	f893 c002 	ldrb.w	ip, [r3, #2]
    5e3e:	f893 e001 	ldrb.w	lr, [r3, #1]
    5e42:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    5e44:	f1b8 0f00 	cmp.w	r8, #0
    5e48:	d00e      	beq.n	5e68 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    5e4a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    5e4e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    5e52:	4613      	mov	r3, r2
    5e54:	e9cd 6702 	strd	r6, r7, [sp, #8]
    5e58:	e9cd 4500 	strd	r4, r5, [sp]
    5e5c:	4a08      	ldr	r2, [pc, #32]	; (5e80 <bt_settings_encode_key+0x58>)
    5e5e:	f013 ffd7 	bl	19e10 <snprintk>
}
    5e62:	b008      	add	sp, #32
    5e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    5e68:	e9cd e305 	strd	lr, r3, [sp, #20]
    5e6c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    5e70:	4613      	mov	r3, r2
    5e72:	e9cd 5601 	strd	r5, r6, [sp, #4]
    5e76:	4a03      	ldr	r2, [pc, #12]	; (5e84 <bt_settings_encode_key+0x5c>)
    5e78:	9400      	str	r4, [sp, #0]
    5e7a:	f013 ffc9 	bl	19e10 <snprintk>
}
    5e7e:	e7f0      	b.n	5e62 <bt_settings_encode_key+0x3a>
    5e80:	00020b6e 	.word	0x00020b6e
    5e84:	00020b92 	.word	0x00020b92

00005e88 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e88:	4909      	ldr	r1, [pc, #36]	; (5eb0 <bt_settings_save_id+0x28>)
    5e8a:	f3bf 8f5b 	dmb	ish
    5e8e:	e851 3f00 	ldrex	r3, [r1]
    5e92:	f043 0201 	orr.w	r2, r3, #1
    5e96:	e841 2000 	strex	r0, r2, [r1]
    5e9a:	2800      	cmp	r0, #0
    5e9c:	d1f7      	bne.n	5e8e <bt_settings_save_id+0x6>
    5e9e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5ea2:	07db      	lsls	r3, r3, #31
    5ea4:	d403      	bmi.n	5eae <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    5ea6:	4803      	ldr	r0, [pc, #12]	; (5eb4 <bt_settings_save_id+0x2c>)
    5ea8:	3908      	subs	r1, #8
    5eaa:	f018 becf 	b.w	1ec4c <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    5eae:	4770      	bx	lr
    5eb0:	2000050c 	.word	0x2000050c
    5eb4:	20001348 	.word	0x20001348

00005eb8 <commit>:

static int commit(void)
{
    5eb8:	b510      	push	{r4, lr}
#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
		bt_set_name(CONFIG_BT_DEVICE_NAME);
	}
#endif
	if (!bt_dev.id_count) {
    5eba:	4c15      	ldr	r4, [pc, #84]	; (5f10 <commit+0x58>)
    5ebc:	79e3      	ldrb	r3, [r4, #7]
    5ebe:	b1e3      	cbz	r3, 5efa <commit+0x42>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5ec0:	f3bf 8f5b 	dmb	ish
    5ec4:	4c13      	ldr	r4, [pc, #76]	; (5f14 <commit+0x5c>)
    5ec6:	6823      	ldr	r3, [r4, #0]
    5ec8:	f3bf 8f5b 	dmb	ish
			BT_ERR("Unable to setup an identity address");
			return err;
		}
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    5ecc:	079b      	lsls	r3, r3, #30
    5ece:	d401      	bmi.n	5ed4 <commit+0x1c>
		bt_finalize_init();
    5ed0:	f001 f89c 	bl	700c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ed4:	f3bf 8f5b 	dmb	ish
    5ed8:	e854 0f00 	ldrex	r0, [r4]
    5edc:	f420 4300 	bic.w	r3, r0, #32768	; 0x8000
    5ee0:	e844 3200 	strex	r2, r3, [r4]
    5ee4:	2a00      	cmp	r2, #0
    5ee6:	d1f7      	bne.n	5ed8 <commit+0x20>
    5ee8:	f3bf 8f5b 	dmb	ish
	}

	/* If any part of the Identity Information of the device has been
	 * generated this Identity needs to be saved persistently.
	 */
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    5eec:	f410 4000 	ands.w	r0, r0, #32768	; 0x8000
    5ef0:	d00c      	beq.n	5f0c <commit+0x54>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
    5ef2:	f7ff ffc9 	bl	5e88 <bt_settings_save_id>
	}

	return 0;
    5ef6:	2000      	movs	r0, #0
    5ef8:	e008      	b.n	5f0c <commit+0x54>
		bt_setup_public_id_addr();
    5efa:	f001 f92d 	bl	7158 <bt_setup_public_id_addr>
	if (!bt_dev.id_count) {
    5efe:	79e3      	ldrb	r3, [r4, #7]
    5f00:	2b00      	cmp	r3, #0
    5f02:	d1dd      	bne.n	5ec0 <commit+0x8>
		err = bt_setup_random_id_addr();
    5f04:	f001 f9c2 	bl	728c <bt_setup_random_id_addr>
		if (err) {
    5f08:	2800      	cmp	r0, #0
    5f0a:	d0d9      	beq.n	5ec0 <commit+0x8>
}
    5f0c:	bd10      	pop	{r4, pc}
    5f0e:	bf00      	nop
    5f10:	20000000 	.word	0x20000000
    5f14:	20000098 	.word	0x20000098

00005f18 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    5f18:	b4f0      	push	{r4, r5, r6, r7}
	switch (src->type) {
    5f1a:	7802      	ldrb	r2, [r0, #0]
    5f1c:	2a01      	cmp	r2, #1
{
    5f1e:	4604      	mov	r4, r0
    5f20:	460b      	mov	r3, r1
	switch (src->type) {
    5f22:	d016      	beq.n	5f52 <uuid_to_uuid128+0x3a>
    5f24:	2a02      	cmp	r2, #2
    5f26:	d02c      	beq.n	5f82 <uuid_to_uuid128+0x6a>
    5f28:	b98a      	cbnz	r2, 5f4e <uuid_to_uuid128+0x36>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    5f2a:	4a19      	ldr	r2, [pc, #100]	; (5f90 <uuid_to_uuid128+0x78>)
    5f2c:	460d      	mov	r5, r1
    5f2e:	f102 0710 	add.w	r7, r2, #16
    5f32:	6810      	ldr	r0, [r2, #0]
    5f34:	6851      	ldr	r1, [r2, #4]
    5f36:	462e      	mov	r6, r5
    5f38:	c603      	stmia	r6!, {r0, r1}
    5f3a:	3208      	adds	r2, #8
    5f3c:	42ba      	cmp	r2, r7
    5f3e:	4635      	mov	r5, r6
    5f40:	d1f7      	bne.n	5f32 <uuid_to_uuid128+0x1a>
    5f42:	7812      	ldrb	r2, [r2, #0]
    5f44:	7032      	strb	r2, [r6, #0]
		sys_put_le16(BT_UUID_16(src)->val,
    5f46:	8862      	ldrh	r2, [r4, #2]
	dst[0] = val;
    5f48:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    5f4a:	0a12      	lsrs	r2, r2, #8
    5f4c:	739a      	strb	r2, [r3, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    5f4e:	bcf0      	pop	{r4, r5, r6, r7}
    5f50:	4770      	bx	lr
		*dst = uuid128_base;
    5f52:	4a0f      	ldr	r2, [pc, #60]	; (5f90 <uuid_to_uuid128+0x78>)
    5f54:	460d      	mov	r5, r1
    5f56:	f102 0710 	add.w	r7, r2, #16
    5f5a:	6810      	ldr	r0, [r2, #0]
    5f5c:	6851      	ldr	r1, [r2, #4]
    5f5e:	462e      	mov	r6, r5
    5f60:	c603      	stmia	r6!, {r0, r1}
    5f62:	3208      	adds	r2, #8
    5f64:	42ba      	cmp	r2, r7
    5f66:	4635      	mov	r5, r6
    5f68:	d1f7      	bne.n	5f5a <uuid_to_uuid128+0x42>
    5f6a:	7812      	ldrb	r2, [r2, #0]
    5f6c:	7032      	strb	r2, [r6, #0]
		sys_put_le32(BT_UUID_32(src)->val,
    5f6e:	6862      	ldr	r2, [r4, #4]
	dst[0] = val;
    5f70:	735a      	strb	r2, [r3, #13]
	dst[1] = val >> 8;
    5f72:	f3c2 2107 	ubfx	r1, r2, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    5f76:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    5f78:	73da      	strb	r2, [r3, #15]
	dst[1] = val >> 8;
    5f7a:	0a12      	lsrs	r2, r2, #8
    5f7c:	7399      	strb	r1, [r3, #14]
    5f7e:	741a      	strb	r2, [r3, #16]
}
    5f80:	e7e5      	b.n	5f4e <uuid_to_uuid128+0x36>
		memcpy(dst, src, sizeof(*dst));
    5f82:	4601      	mov	r1, r0
}
    5f84:	bcf0      	pop	{r4, r5, r6, r7}
		memcpy(dst, src, sizeof(*dst));
    5f86:	2211      	movs	r2, #17
    5f88:	4618      	mov	r0, r3
    5f8a:	f015 bd4e 	b.w	1ba2a <memcpy>
    5f8e:	bf00      	nop
    5f90:	00020bb6 	.word	0x00020bb6

00005f94 <le_dhkey_complete>:
{
    5f94:	b510      	push	{r4, lr}
	if (dh_key_cb) {
    5f96:	4c06      	ldr	r4, [pc, #24]	; (5fb0 <le_dhkey_complete+0x1c>)
    5f98:	6822      	ldr	r2, [r4, #0]
    5f9a:	b132      	cbz	r2, 5faa <le_dhkey_complete+0x16>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    5f9c:	6880      	ldr	r0, [r0, #8]
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    5f9e:	7803      	ldrb	r3, [r0, #0]
    5fa0:	b923      	cbnz	r3, 5fac <le_dhkey_complete+0x18>
    5fa2:	3001      	adds	r0, #1
    5fa4:	4790      	blx	r2
		dh_key_cb = NULL;
    5fa6:	2300      	movs	r3, #0
    5fa8:	6023      	str	r3, [r4, #0]
}
    5faa:	bd10      	pop	{r4, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    5fac:	2000      	movs	r0, #0
    5fae:	e7f9      	b.n	5fa4 <le_dhkey_complete+0x10>
    5fb0:	200014a4 	.word	0x200014a4

00005fb4 <le_rpa_invalidate>:
{
    5fb4:	b508      	push	{r3, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    5fb6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    5fba:	480a      	ldr	r0, [pc, #40]	; (5fe4 <le_rpa_invalidate+0x30>)
    5fbc:	f015 fead 	bl	1bd1a <atomic_and>
    5fc0:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    5fc4:	4807      	ldr	r0, [pc, #28]	; (5fe4 <le_rpa_invalidate+0x30>)
    5fc6:	f015 fea8 	bl	1bd1a <atomic_and>
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
    5fca:	4807      	ldr	r0, [pc, #28]	; (5fe8 <le_rpa_invalidate+0x34>)
    5fcc:	2105      	movs	r1, #5
    5fce:	f015 feb9 	bl	1bd44 <atomic_test_bit>
    5fd2:	b930      	cbnz	r0, 5fe2 <le_rpa_invalidate+0x2e>
}
    5fd4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    5fd8:	4803      	ldr	r0, [pc, #12]	; (5fe8 <le_rpa_invalidate+0x34>)
    5fda:	f06f 0110 	mvn.w	r1, #16
    5fde:	f015 be9c 	b.w	1bd1a <atomic_and>
    5fe2:	bd08      	pop	{r3, pc}
    5fe4:	20000098 	.word	0x20000098
    5fe8:	2000002c 	.word	0x2000002c

00005fec <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    5fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    5fee:	4f0a      	ldr	r7, [pc, #40]	; (6018 <id_find+0x2c>)
{
    5ff0:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    5ff2:	2500      	movs	r5, #0
    5ff4:	79fb      	ldrb	r3, [r7, #7]
    5ff6:	b2ec      	uxtb	r4, r5
    5ff8:	42a3      	cmp	r3, r4
    5ffa:	d802      	bhi.n	6002 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    5ffc:	f06f 0401 	mvn.w	r4, #1
    6000:	e008      	b.n	6014 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    6002:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    6006:	4439      	add	r1, r7
    6008:	4630      	mov	r0, r6
    600a:	f015 fea2 	bl	1bd52 <bt_addr_le_cmp>
    600e:	3501      	adds	r5, #1
    6010:	2800      	cmp	r0, #0
    6012:	d1ef      	bne.n	5ff4 <id_find+0x8>
}
    6014:	4620      	mov	r0, r4
    6016:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6018:	20000000 	.word	0x20000000

0000601c <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    601c:	6843      	ldr	r3, [r0, #4]
{
    601e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    6020:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    6022:	0558      	lsls	r0, r3, #21
    6024:	d408      	bmi.n	6038 <valid_adv_param+0x1c>
		return false;
	}

	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6026:	6922      	ldr	r2, [r4, #16]
    6028:	b10a      	cbz	r2, 602e <valid_adv_param+0x12>
    602a:	07d9      	lsls	r1, r3, #31
    602c:	d504      	bpl.n	6038 <valid_adv_param+0x1c>
	if (param->id >= bt_dev.id_count ||
    602e:	4d16      	ldr	r5, [pc, #88]	; (6088 <valid_adv_param+0x6c>)
    6030:	7820      	ldrb	r0, [r4, #0]
    6032:	79eb      	ldrb	r3, [r5, #7]
    6034:	4283      	cmp	r3, r0
    6036:	d802      	bhi.n	603e <valid_adv_param+0x22>
			return false;
    6038:	2000      	movs	r0, #0
		return false;
	}

	return valid_adv_ext_param(param);
}
    603a:	b003      	add	sp, #12
    603c:	bd30      	pop	{r4, r5, pc}
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    603e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    6042:	2300      	movs	r3, #0
    6044:	4669      	mov	r1, sp
    6046:	4428      	add	r0, r5
    6048:	9300      	str	r3, [sp, #0]
    604a:	f8cd 3003 	str.w	r3, [sp, #3]
    604e:	f015 fe80 	bl	1bd52 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    6052:	2800      	cmp	r0, #0
    6054:	d0f0      	beq.n	6038 <valid_adv_param+0x1c>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6056:	6863      	ldr	r3, [r4, #4]
    6058:	07da      	lsls	r2, r3, #31
    605a:	d406      	bmi.n	606a <valid_adv_param+0x4e>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    605c:	f895 2038 	ldrb.w	r2, [r5, #56]	; 0x38
    6060:	2a08      	cmp	r2, #8
    6062:	d802      	bhi.n	606a <valid_adv_param+0x4e>
    6064:	68a2      	ldr	r2, [r4, #8]
    6066:	2a9f      	cmp	r2, #159	; 0x9f
    6068:	d9e6      	bls.n	6038 <valid_adv_param+0x1c>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    606a:	06db      	lsls	r3, r3, #27
    606c:	d401      	bmi.n	6072 <valid_adv_param+0x56>
    606e:	6923      	ldr	r3, [r4, #16]
    6070:	b943      	cbnz	r3, 6084 <valid_adv_param+0x68>
		if (param->interval_min > param->interval_max ||
    6072:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    6076:	429a      	cmp	r2, r3
    6078:	d8de      	bhi.n	6038 <valid_adv_param+0x1c>
    607a:	2a1f      	cmp	r2, #31
    607c:	d9dc      	bls.n	6038 <valid_adv_param+0x1c>
		    param->interval_min < 0x0020 ||
    607e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    6082:	d8d9      	bhi.n	6038 <valid_adv_param+0x1c>
	return true;
    6084:	2001      	movs	r0, #1
    6086:	e7d8      	b.n	603a <valid_adv_param+0x1e>
    6088:	20000000 	.word	0x20000000

0000608c <le_pkey_complete>:
{
    608c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    608e:	6886      	ldr	r6, [r0, #8]
    6090:	480f      	ldr	r0, [pc, #60]	; (60d0 <le_pkey_complete+0x44>)
    6092:	f06f 0110 	mvn.w	r1, #16
    6096:	f015 fe40 	bl	1bd1a <atomic_and>
	if (!evt->status) {
    609a:	7833      	ldrb	r3, [r6, #0]
    609c:	b943      	cbnz	r3, 60b0 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    609e:	1c71      	adds	r1, r6, #1
    60a0:	480c      	ldr	r0, [pc, #48]	; (60d4 <le_pkey_complete+0x48>)
    60a2:	2240      	movs	r2, #64	; 0x40
    60a4:	f015 fcc1 	bl	1ba2a <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    60a8:	4809      	ldr	r0, [pc, #36]	; (60d0 <le_pkey_complete+0x44>)
    60aa:	2108      	movs	r1, #8
    60ac:	f015 fe9e 	bl	1bdec <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    60b0:	4d09      	ldr	r5, [pc, #36]	; (60d8 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    60b2:	4f08      	ldr	r7, [pc, #32]	; (60d4 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    60b4:	682c      	ldr	r4, [r5, #0]
    60b6:	b90c      	cbnz	r4, 60bc <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    60b8:	602c      	str	r4, [r5, #0]
}
    60ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    60bc:	7832      	ldrb	r2, [r6, #0]
    60be:	6823      	ldr	r3, [r4, #0]
    60c0:	2a00      	cmp	r2, #0
    60c2:	bf0c      	ite	eq
    60c4:	4638      	moveq	r0, r7
    60c6:	2000      	movne	r0, #0
    60c8:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    60ca:	6864      	ldr	r4, [r4, #4]
    60cc:	e7f3      	b.n	60b6 <le_pkey_complete+0x2a>
    60ce:	bf00      	nop
    60d0:	20000098 	.word	0x20000098
    60d4:	20002988 	.word	0x20002988
    60d8:	200014a8 	.word	0x200014a8

000060dc <hci_le_meta_event>:
{
    60dc:	b510      	push	{r4, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    60de:	2101      	movs	r1, #1
{
    60e0:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    60e2:	3008      	adds	r0, #8
    60e4:	f018 fa7d 	bl	1e5e2 <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    60e8:	4621      	mov	r1, r4
    60ea:	4a03      	ldr	r2, [pc, #12]	; (60f8 <hci_le_meta_event+0x1c>)
    60ec:	7800      	ldrb	r0, [r0, #0]
}
    60ee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    60f2:	230a      	movs	r3, #10
    60f4:	f015 bdfc 	b.w	1bcf0 <handle_event>
    60f8:	0001f974 	.word	0x0001f974

000060fc <hci_encrypt_key_refresh_complete>:
{
    60fc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    60fe:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    6100:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    6104:	f001 fe98 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
    6108:	4604      	mov	r4, r0
    610a:	b1c8      	cbz	r0, 6140 <hci_encrypt_key_refresh_complete+0x44>
	if (evt->status) {
    610c:	7829      	ldrb	r1, [r5, #0]
    610e:	b161      	cbz	r1, 612a <hci_encrypt_key_refresh_complete+0x2e>
	switch (hci_err) {
    6110:	2929      	cmp	r1, #41	; 0x29
    6112:	bf9a      	itte	ls
    6114:	4b0b      	ldrls	r3, [pc, #44]	; (6144 <hci_encrypt_key_refresh_complete+0x48>)
    6116:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    6118:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    611a:	4620      	mov	r0, r4
    611c:	f001 fda0 	bl	7c60 <bt_conn_security_changed>
	bt_conn_unref(conn);
    6120:	4620      	mov	r0, r4
}
    6122:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    6126:	f016 bab2 	b.w	1c68e <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    612a:	7883      	ldrb	r3, [r0, #2]
    612c:	2b01      	cmp	r3, #1
    612e:	d104      	bne.n	613a <hci_encrypt_key_refresh_complete+0x3e>
		bt_smp_update_keys(conn);
    6130:	f018 f90b 	bl	1e34a <bt_smp_update_keys>
		update_sec_level(conn);
    6134:	4620      	mov	r0, r4
    6136:	f015 fef5 	bl	1bf24 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    613a:	7829      	ldrb	r1, [r5, #0]
    613c:	2200      	movs	r2, #0
    613e:	e7ec      	b.n	611a <hci_encrypt_key_refresh_complete+0x1e>
}
    6140:	bd38      	pop	{r3, r4, r5, pc}
    6142:	bf00      	nop
    6144:	00020cce 	.word	0x00020cce

00006148 <hci_encrypt_change>:
{
    6148:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    614a:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    614c:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    6150:	f001 fe72 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
    6154:	4604      	mov	r4, r0
    6156:	b1e0      	cbz	r0, 6192 <hci_encrypt_change+0x4a>
	if (evt->status) {
    6158:	7829      	ldrb	r1, [r5, #0]
    615a:	b161      	cbz	r1, 6176 <hci_encrypt_change+0x2e>
	switch (hci_err) {
    615c:	2929      	cmp	r1, #41	; 0x29
    615e:	bf9a      	itte	ls
    6160:	4b0c      	ldrls	r3, [pc, #48]	; (6194 <hci_encrypt_change+0x4c>)
    6162:	5c5a      	ldrbls	r2, [r3, r1]
	if (evt->status) {
    6164:	2208      	movhi	r2, #8
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    6166:	4620      	mov	r0, r4
    6168:	f001 fd7a 	bl	7c60 <bt_conn_security_changed>
	bt_conn_unref(conn);
    616c:	4620      	mov	r0, r4
}
    616e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    6172:	f016 ba8c 	b.w	1c68e <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    6176:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    6178:	78eb      	ldrb	r3, [r5, #3]
    617a:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    617c:	2a01      	cmp	r2, #1
    617e:	d105      	bne.n	618c <hci_encrypt_change+0x44>
		if (conn->encrypt) {
    6180:	b10b      	cbz	r3, 6186 <hci_encrypt_change+0x3e>
			bt_smp_update_keys(conn);
    6182:	f018 f8e2 	bl	1e34a <bt_smp_update_keys>
		update_sec_level(conn);
    6186:	4620      	mov	r0, r4
    6188:	f015 fecc 	bl	1bf24 <update_sec_level>
	bt_conn_security_changed(conn, evt->status, BT_SECURITY_ERR_SUCCESS);
    618c:	7829      	ldrb	r1, [r5, #0]
    618e:	2200      	movs	r2, #0
    6190:	e7e9      	b.n	6166 <hci_encrypt_change+0x1e>
}
    6192:	bd38      	pop	{r3, r4, r5, pc}
    6194:	00020cce 	.word	0x00020cce

00006198 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    6198:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    619a:	4c0c      	ldr	r4, [pc, #48]	; (61cc <find_pending_connect.part.0+0x34>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    619c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    619e:	2205      	movs	r2, #5
    61a0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    61a4:	f001 fe6c 	bl	7e80 <bt_conn_lookup_state_le>
		if (!conn) {
    61a8:	b970      	cbnz	r0, 61c8 <find_pending_connect.part.0+0x30>
						       BT_ADDR_LE_NONE,
    61aa:	4b09      	ldr	r3, [pc, #36]	; (61d0 <find_pending_connect.part.0+0x38>)
    61ac:	6818      	ldr	r0, [r3, #0]
    61ae:	889a      	ldrh	r2, [r3, #4]
    61b0:	9000      	str	r0, [sp, #0]
    61b2:	799b      	ldrb	r3, [r3, #6]
    61b4:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    61b8:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
						       BT_ADDR_LE_NONE,
    61bc:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    61c0:	2204      	movs	r2, #4
    61c2:	4669      	mov	r1, sp
    61c4:	f001 fe5c 	bl	7e80 <bt_conn_lookup_state_le>
}
    61c8:	b002      	add	sp, #8
    61ca:	bd10      	pop	{r4, pc}
    61cc:	20000000 	.word	0x20000000
    61d0:	0001f6a2 	.word	0x0001f6a2

000061d4 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    61d4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    61d6:	4a28      	ldr	r2, [pc, #160]	; (6278 <le_adv_start_add_conn+0xa4>)
	struct adv_id_check_data check_data = {
		.id = adv->id,
    61d8:	7806      	ldrb	r6, [r0, #0]
{
    61da:	b085      	sub	sp, #20
    61dc:	4605      	mov	r5, r0
    61de:	460f      	mov	r7, r1
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    61e0:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    61e4:	2106      	movs	r1, #6
    61e6:	f015 fdad 	bl	1bd44 <atomic_test_bit>
    61ea:	4614      	mov	r4, r2
    61ec:	b140      	cbz	r0, 6200 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    61ee:	2108      	movs	r1, #8
    61f0:	f102 002c 	add.w	r0, r2, #44	; 0x2c
    61f4:	f015 fda6 	bl	1bd44 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    61f8:	b110      	cbz	r0, 6200 <le_adv_start_add_conn+0x2c>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
    61fa:	7e13      	ldrb	r3, [r2, #24]
    61fc:	42b3      	cmp	r3, r6
    61fe:	d131      	bne.n	6264 <le_adv_start_add_conn+0x90>
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
	if (check_data.adv_enabled) {
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    6200:	462e      	mov	r6, r5

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    6202:	4669      	mov	r1, sp
	bt_dev.adv_conn_id = adv->id;
    6204:	f816 3b0b 	ldrb.w	r3, [r6], #11
    6208:	f884 3037 	strb.w	r3, [r4, #55]	; 0x37
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    620c:	4630      	mov	r0, r6
    620e:	2300      	movs	r3, #0
    6210:	9300      	str	r3, [sp, #0]
    6212:	f8cd 3003 	str.w	r3, [sp, #3]
    6216:	f015 fd9c 	bl	1bd52 <bt_addr_le_cmp>
    621a:	4604      	mov	r4, r0
    621c:	7828      	ldrb	r0, [r5, #0]
    621e:	b164      	cbz	r4, 623a <le_adv_start_add_conn+0x66>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
		*out_conn = conn;
		return 0;
	}

	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    6220:	4631      	mov	r1, r6
    6222:	f016 fa49 	bl	1c6b8 <bt_conn_exists_le>
    6226:	4604      	mov	r4, r0
    6228:	b9f8      	cbnz	r0, 626a <le_adv_start_add_conn+0x96>
		return -EINVAL;
	}

	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    622a:	7828      	ldrb	r0, [r5, #0]
    622c:	4631      	mov	r1, r6
    622e:	f001 fdd9 	bl	7de4 <bt_conn_add_le>
	if (!conn) {
    6232:	4605      	mov	r5, r0
    6234:	b1e0      	cbz	r0, 6270 <le_adv_start_add_conn+0x9c>
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    6236:	2105      	movs	r1, #5
    6238:	e00e      	b.n	6258 <le_adv_start_add_conn+0x84>
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    623a:	f06f 03ff 	mvn.w	r3, #255	; 0xff
    623e:	9302      	str	r3, [sp, #8]
    6240:	a902      	add	r1, sp, #8
    6242:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6246:	f8ad 300c 	strh.w	r3, [sp, #12]
    624a:	f88d 300e 	strb.w	r3, [sp, #14]
    624e:	f001 fdc9 	bl	7de4 <bt_conn_add_le>
		if (!conn) {
    6252:	4605      	mov	r5, r0
    6254:	b160      	cbz	r0, 6270 <le_adv_start_add_conn+0x9c>
		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    6256:	2104      	movs	r1, #4
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    6258:	f001 fe38 	bl	7ecc <bt_conn_set_state>
	*out_conn = conn;
    625c:	603d      	str	r5, [r7, #0]
	return 0;
}
    625e:	4620      	mov	r0, r4
    6260:	b005      	add	sp, #20
    6262:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -ENOTSUP;
    6264:	f06f 0422 	mvn.w	r4, #34	; 0x22
    6268:	e7f9      	b.n	625e <le_adv_start_add_conn+0x8a>
		return -EINVAL;
    626a:	f06f 0415 	mvn.w	r4, #21
    626e:	e7f6      	b.n	625e <le_adv_start_add_conn+0x8a>
		return -ENOMEM;
    6270:	f06f 040b 	mvn.w	r4, #11
    6274:	e7f3      	b.n	625e <le_adv_start_add_conn+0x8a>
    6276:	bf00      	nop
    6278:	20000000 	.word	0x20000000

0000627c <hci_num_completed_packets>:
{
    627c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	for (i = 0; i < evt->num_handles; i++) {
    6280:	2500      	movs	r5, #0
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    6282:	6887      	ldr	r7, [r0, #8]
    6284:	f8df 90e8 	ldr.w	r9, [pc, #232]	; 6370 <hci_num_completed_packets+0xf4>
			tx->pending_no_cb = 0U;
    6288:	46a8      	mov	r8, r5
	for (i = 0; i < evt->num_handles; i++) {
    628a:	783b      	ldrb	r3, [r7, #0]
    628c:	429d      	cmp	r5, r3
    628e:	db01      	blt.n	6294 <hci_num_completed_packets+0x18>
}
    6290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    6294:	eb07 0385 	add.w	r3, r7, r5, lsl #2
    6298:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    629c:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	__asm__ volatile(
    62a0:	f04f 0320 	mov.w	r3, #32
    62a4:	f3ef 8a11 	mrs	sl, BASEPRI
    62a8:	f383 8811 	msr	BASEPRI, r3
    62ac:	f3bf 8f6f 	isb	sy
		conn = bt_conn_lookup_handle(handle);
    62b0:	f001 fdc2 	bl	7e38 <bt_conn_lookup_handle>
		if (!conn) {
    62b4:	4604      	mov	r4, r0
    62b6:	b928      	cbnz	r0, 62c4 <hci_num_completed_packets+0x48>
	__asm__ volatile(
    62b8:	f38a 8811 	msr	BASEPRI, sl
    62bc:	f3bf 8f6f 	isb	sy
	for (i = 0; i < evt->num_handles; i++) {
    62c0:	3501      	adds	r5, #1
    62c2:	e7e2      	b.n	628a <hci_num_completed_packets+0xe>
    62c4:	f38a 8811 	msr	BASEPRI, sl
    62c8:	f3bf 8f6f 	isb	sy
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    62cc:	f100 0a28 	add.w	sl, r0, #40	; 0x28
		while (count--) {
    62d0:	b326      	cbz	r6, 631c <hci_num_completed_packets+0xa0>
	__asm__ volatile(
    62d2:	f04f 0320 	mov.w	r3, #32
    62d6:	f3ef 8211 	mrs	r2, BASEPRI
    62da:	f383 8811 	msr	BASEPRI, r3
    62de:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    62e2:	69e3      	ldr	r3, [r4, #28]
    62e4:	b16b      	cbz	r3, 6302 <hci_num_completed_packets+0x86>
				conn->pending_no_cb--;
    62e6:	3b01      	subs	r3, #1
    62e8:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    62ea:	f382 8811 	msr	BASEPRI, r2
    62ee:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    62f2:	4620      	mov	r0, r4
    62f4:	f001 fc42 	bl	7b7c <bt_conn_get_pkts>
	z_impl_k_sem_give(sem);
    62f8:	3e01      	subs	r6, #1
    62fa:	f013 f849 	bl	19390 <z_impl_k_sem_give>
    62fe:	b2b6      	uxth	r6, r6
    6300:	e7e6      	b.n	62d0 <hci_num_completed_packets+0x54>
Z_GENLIST_IS_EMPTY(slist)
    6302:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    6304:	b12b      	cbz	r3, 6312 <hci_num_completed_packets+0x96>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    6306:	69a1      	ldr	r1, [r4, #24]
    6308:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    630a:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    630c:	428b      	cmp	r3, r1
	list->tail = node;
    630e:	bf08      	it	eq
    6310:	61a0      	streq	r0, [r4, #24]
    6312:	f382 8811 	msr	BASEPRI, r2
    6316:	f3bf 8f6f 	isb	sy
			if (!node) {
    631a:	b91b      	cbnz	r3, 6324 <hci_num_completed_packets+0xa8>
		bt_conn_unref(conn);
    631c:	4620      	mov	r0, r4
    631e:	f016 f9b6 	bl	1c68e <bt_conn_unref>
    6322:	e7cd      	b.n	62c0 <hci_num_completed_packets+0x44>
	__asm__ volatile(
    6324:	f04f 0220 	mov.w	r2, #32
    6328:	f3ef 8111 	mrs	r1, BASEPRI
    632c:	f382 8811 	msr	BASEPRI, r2
    6330:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    6334:	68da      	ldr	r2, [r3, #12]
    6336:	61e2      	str	r2, [r4, #28]
	parent->next = child;
    6338:	f8c3 8000 	str.w	r8, [r3]
Z_GENLIST_APPEND(slist, snode)
    633c:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    633e:	f8c3 800c 	str.w	r8, [r3, #12]
    6342:	b98a      	cbnz	r2, 6368 <hci_num_completed_packets+0xec>
	list->head = node;
    6344:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    6348:	f381 8811 	msr	BASEPRI, r1
    634c:	f3bf 8f6f 	isb	sy
    6350:	2100      	movs	r1, #0
    6352:	f104 0030 	add.w	r0, r4, #48	; 0x30
    6356:	f015 fd58 	bl	1be0a <atomic_test_and_set_bit>
    635a:	2800      	cmp	r0, #0
    635c:	d1c9      	bne.n	62f2 <hci_num_completed_packets+0x76>
		k_queue_append(&work_q->queue, work);
    635e:	4651      	mov	r1, sl
    6360:	4648      	mov	r0, r9
    6362:	f018 fc73 	bl	1ec4c <k_queue_append>
    6366:	e7c4      	b.n	62f2 <hci_num_completed_packets+0x76>
	parent->next = child;
    6368:	6013      	str	r3, [r2, #0]
	list->tail = node;
    636a:	6263      	str	r3, [r4, #36]	; 0x24
}
    636c:	e7ec      	b.n	6348 <hci_num_completed_packets+0xcc>
    636e:	bf00      	nop
    6370:	20001348 	.word	0x20001348

00006374 <hci_cmd_done.isra.0>:
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    6374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6376:	4606      	mov	r6, r0
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    6378:	7988      	ldrb	r0, [r1, #6]
static void hci_cmd_done(uint16_t opcode, uint8_t status, struct net_buf *buf)
    637a:	460c      	mov	r4, r1
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    637c:	f010 fc84 	bl	16c88 <net_buf_pool_get>
    6380:	4b19      	ldr	r3, [pc, #100]	; (63e8 <hci_cmd_done.isra.0+0x74>)
    6382:	4283      	cmp	r3, r0
    6384:	d12e      	bne.n	63e4 <hci_cmd_done.isra.0+0x70>
	if (cmd(buf)->opcode != opcode) {
    6386:	4620      	mov	r0, r4
    6388:	f010 fc86 	bl	16c98 <net_buf_id>
	if (cmd(buf)->state && !status) {
    638c:	4620      	mov	r0, r4
    638e:	f010 fc83 	bl	16c98 <net_buf_id>
    6392:	4d16      	ldr	r5, [pc, #88]	; (63ec <hci_cmd_done.isra.0+0x78>)
    6394:	270c      	movs	r7, #12
    6396:	fb07 5300 	mla	r3, r7, r0, r5
    639a:	685b      	ldr	r3, [r3, #4]
    639c:	b15b      	cbz	r3, 63b6 <hci_cmd_done.isra.0+0x42>
    639e:	b956      	cbnz	r6, 63b6 <hci_cmd_done.isra.0+0x42>
		struct cmd_state_set *update = cmd(buf)->state;
    63a0:	4620      	mov	r0, r4
    63a2:	f010 fc79 	bl	16c98 <net_buf_id>
    63a6:	fb07 5000 	mla	r0, r7, r0, r5
    63aa:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    63ac:	e9d3 0100 	ldrd	r0, r1, [r3]
    63b0:	7a1a      	ldrb	r2, [r3, #8]
    63b2:	f015 fd35 	bl	1be20 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    63b6:	4620      	mov	r0, r4
    63b8:	f010 fc6e 	bl	16c98 <net_buf_id>
    63bc:	270c      	movs	r7, #12
    63be:	fb07 5000 	mla	r0, r7, r0, r5
    63c2:	6883      	ldr	r3, [r0, #8]
    63c4:	b173      	cbz	r3, 63e4 <hci_cmd_done.isra.0+0x70>
		cmd(buf)->status = status;
    63c6:	4620      	mov	r0, r4
    63c8:	f010 fc66 	bl	16c98 <net_buf_id>
    63cc:	4378      	muls	r0, r7
    63ce:	542e      	strb	r6, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    63d0:	4620      	mov	r0, r4
    63d2:	f010 fc61 	bl	16c98 <net_buf_id>
    63d6:	fb07 5500 	mla	r5, r7, r0, r5
    63da:	68a8      	ldr	r0, [r5, #8]
}
    63dc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    63e0:	f012 bfd6 	b.w	19390 <z_impl_k_sem_give>
    63e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    63e6:	bf00      	nop
    63e8:	20000bcc 	.word	0x20000bcc
    63ec:	2000148c 	.word	0x2000148c

000063f0 <hci_cmd_complete>:
{
    63f0:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    63f2:	2103      	movs	r1, #3
{
    63f4:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    63f6:	3008      	adds	r0, #8
    63f8:	f018 f8f3 	bl	1e5e2 <net_buf_simple_pull_mem>
	status = buf->data[0];
    63fc:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    63fe:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    6400:	7818      	ldrb	r0, [r3, #0]
    6402:	4621      	mov	r1, r4
    6404:	f7ff ffb6 	bl	6374 <hci_cmd_done.isra.0>
	if (ncmd) {
    6408:	b125      	cbz	r5, 6414 <hci_cmd_complete+0x24>
    640a:	4803      	ldr	r0, [pc, #12]	; (6418 <hci_cmd_complete+0x28>)
}
    640c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6410:	f012 bfbe 	b.w	19390 <z_impl_k_sem_give>
    6414:	bd38      	pop	{r3, r4, r5, pc}
    6416:	bf00      	nop
    6418:	200000f0 	.word	0x200000f0

0000641c <hci_tx_thread>:
{
    641c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    6420:	f8df 8104 	ldr.w	r8, [pc, #260]	; 6528 <hci_tx_thread+0x10c>
		BT_ASSERT(err == 0);
    6424:	f8df a114 	ldr.w	sl, [pc, #276]	; 653c <hci_tx_thread+0x120>
		events[0].state = K_POLL_STATE_NOT_READY;
    6428:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    642c:	483d      	ldr	r0, [pc, #244]	; (6524 <hci_tx_thread+0x108>)
		events[0].state = K_POLL_STATE_NOT_READY;
    642e:	f36f 3310 	bfc	r3, #12, #5
    6432:	f8c8 300c 	str.w	r3, [r8, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    6436:	f001 fc97 	bl	7d68 <bt_conn_prepare_events>
    643a:	1c45      	adds	r5, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    643c:	483a      	ldr	r0, [pc, #232]	; (6528 <hci_tx_thread+0x10c>)
    643e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6442:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    6446:	4629      	mov	r1, r5
    6448:	f013 fb1a 	bl	19a80 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    644c:	b160      	cbz	r0, 6468 <hci_tx_thread+0x4c>
    644e:	4937      	ldr	r1, [pc, #220]	; (652c <hci_tx_thread+0x110>)
    6450:	4837      	ldr	r0, [pc, #220]	; (6530 <hci_tx_thread+0x114>)
    6452:	f241 4386 	movw	r3, #5254	; 0x1486
    6456:	4652      	mov	r2, sl
    6458:	f013 fccd 	bl	19df6 <printk>
    645c:	4040      	eors	r0, r0
    645e:	f380 8811 	msr	BASEPRI, r0
    6462:	f04f 0003 	mov.w	r0, #3
    6466:	df02      	svc	2
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    6468:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 6540 <hci_tx_thread+0x124>
{
    646c:	4e2e      	ldr	r6, [pc, #184]	; (6528 <hci_tx_thread+0x10c>)
	return z_impl_k_sem_take(sem, timeout);
    646e:	f5a9 7786 	sub.w	r7, r9, #268	; 0x10c
    6472:	f1a9 0b1c 	sub.w	fp, r9, #28
	for (; count; ev++, count--) {
    6476:	b915      	cbnz	r5, 647e <hci_tx_thread+0x62>
	z_impl_k_yield();
    6478:	f012 ff18 	bl	192ac <z_impl_k_yield>
	while (1) {
    647c:	e7d4      	b.n	6428 <hci_tx_thread+0xc>
		switch (ev->state) {
    647e:	68f3      	ldr	r3, [r6, #12]
    6480:	f3c3 3304 	ubfx	r3, r3, #12, #5
    6484:	2b04      	cmp	r3, #4
    6486:	d142      	bne.n	650e <hci_tx_thread+0xf2>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6488:	7b33      	ldrb	r3, [r6, #12]
    648a:	2b00      	cmp	r3, #0
    648c:	d142      	bne.n	6514 <hci_tx_thread+0xf8>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    648e:	2200      	movs	r2, #0
    6490:	2300      	movs	r3, #0
    6492:	4648      	mov	r0, r9
    6494:	f018 f82d 	bl	1e4f2 <net_buf_get>
	BT_ASSERT(buf);
    6498:	4604      	mov	r4, r0
    649a:	b960      	cbnz	r0, 64b6 <hci_tx_thread+0x9a>
    649c:	4925      	ldr	r1, [pc, #148]	; (6534 <hci_tx_thread+0x118>)
    649e:	4824      	ldr	r0, [pc, #144]	; (6530 <hci_tx_thread+0x114>)
    64a0:	f241 4323 	movw	r3, #5155	; 0x1423
    64a4:	4652      	mov	r2, sl
    64a6:	f013 fca6 	bl	19df6 <printk>
    64aa:	4040      	eors	r0, r0
    64ac:	f380 8811 	msr	BASEPRI, r0
    64b0:	f04f 0003 	mov.w	r0, #3
    64b4:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    64b6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    64ba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    64be:	4658      	mov	r0, fp
    64c0:	f012 ff8c 	bl	193dc <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    64c4:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    64c8:	b120      	cbz	r0, 64d4 <hci_tx_thread+0xb8>
		net_buf_unref(bt_dev.sent_cmd);
    64ca:	f010 fc99 	bl	16e00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    64ce:	2300      	movs	r3, #0
    64d0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
	bt_dev.sent_cmd = net_buf_ref(buf);
    64d4:	4620      	mov	r0, r4
    64d6:	f018 f837 	bl	1e548 <net_buf_ref>
    64da:	f8c7 0108 	str.w	r0, [r7, #264]	; 0x108
		return bt_hci_ecc_send(buf);
    64de:	4620      	mov	r0, r4
    64e0:	f7ff fb8e 	bl	5c00 <bt_hci_ecc_send>
	if (err) {
    64e4:	b198      	cbz	r0, 650e <hci_tx_thread+0xf2>
	z_impl_k_sem_give(sem);
    64e6:	4814      	ldr	r0, [pc, #80]	; (6538 <hci_tx_thread+0x11c>)
    64e8:	f012 ff52 	bl	19390 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    64ec:	4620      	mov	r0, r4
    64ee:	f010 fbd3 	bl	16c98 <net_buf_id>
    64f2:	4621      	mov	r1, r4
    64f4:	201f      	movs	r0, #31
    64f6:	f7ff ff3d 	bl	6374 <hci_cmd_done.isra.0>
		net_buf_unref(bt_dev.sent_cmd);
    64fa:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
    64fe:	f010 fc7f 	bl	16e00 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6502:	2300      	movs	r3, #0
		net_buf_unref(buf);
    6504:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    6506:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
		net_buf_unref(buf);
    650a:	f010 fc79 	bl	16e00 <net_buf_unref>
	for (; count; ev++, count--) {
    650e:	3614      	adds	r6, #20
    6510:	3d01      	subs	r5, #1
    6512:	e7b0      	b.n	6476 <hci_tx_thread+0x5a>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    6514:	2b01      	cmp	r3, #1
    6516:	d1fa      	bne.n	650e <hci_tx_thread+0xf2>
					conn = CONTAINER_OF(ev->fifo,
    6518:	6930      	ldr	r0, [r6, #16]
					bt_conn_process_tx(conn);
    651a:	3834      	subs	r0, #52	; 0x34
    651c:	f001 fe42 	bl	81a4 <bt_conn_process_tx>
    6520:	e7f5      	b.n	650e <hci_tx_thread+0xf2>
    6522:	bf00      	nop
    6524:	20000524 	.word	0x20000524
    6528:	20000510 	.word	0x20000510
    652c:	00020bfb 	.word	0x00020bfb
    6530:	00020c04 	.word	0x00020c04
    6534:	00020c21 	.word	0x00020c21
    6538:	200000f0 	.word	0x200000f0
    653c:	00020bc7 	.word	0x00020bc7
    6540:	2000010c 	.word	0x2000010c

00006544 <hci_cmd_status>:
{
    6544:	b538      	push	{r3, r4, r5, lr}
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    6546:	2104      	movs	r1, #4
{
    6548:	4604      	mov	r4, r0
	evt = net_buf_pull_mem(buf, sizeof(*evt));
    654a:	3008      	adds	r0, #8
    654c:	f018 f849 	bl	1e5e2 <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    6550:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    6552:	7800      	ldrb	r0, [r0, #0]
    6554:	4621      	mov	r1, r4
    6556:	f7ff ff0d 	bl	6374 <hci_cmd_done.isra.0>
	if (ncmd) {
    655a:	b125      	cbz	r5, 6566 <hci_cmd_status+0x22>
    655c:	4802      	ldr	r0, [pc, #8]	; (6568 <hci_cmd_status+0x24>)
}
    655e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6562:	f012 bf15 	b.w	19390 <z_impl_k_sem_give>
    6566:	bd38      	pop	{r3, r4, r5, pc}
    6568:	200000f0 	.word	0x200000f0

0000656c <bt_hci_cmd_create>:
{
    656c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6570:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6574:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
{
    6578:	4605      	mov	r5, r0
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    657a:	4816      	ldr	r0, [pc, #88]	; (65d4 <bt_hci_cmd_create+0x68>)
	cmd(buf)->opcode = opcode;
    657c:	f8df 8058 	ldr.w	r8, [pc, #88]	; 65d8 <bt_hci_cmd_create+0x6c>
{
    6580:	460e      	mov	r6, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    6582:	f017 ffb1 	bl	1e4e8 <net_buf_alloc_fixed>
    6586:	4604      	mov	r4, r0
	net_buf_reserve(buf, BT_BUF_RESERVE);
    6588:	f100 0b08 	add.w	fp, r0, #8
    658c:	2100      	movs	r1, #0
	*(uint8_t *)net_buf_user_data(buf) = type;
    658e:	2700      	movs	r7, #0
    6590:	4658      	mov	r0, fp
    6592:	f017 ffc8 	bl	1e526 <net_buf_simple_reserve>
    6596:	7527      	strb	r7, [r4, #20]
	cmd(buf)->opcode = opcode;
    6598:	4620      	mov	r0, r4
    659a:	f010 fb7d 	bl	16c98 <net_buf_id>
    659e:	f04f 0a0c 	mov.w	sl, #12
    65a2:	fb0a 8000 	mla	r0, sl, r0, r8
    65a6:	8045      	strh	r5, [r0, #2]
	cmd(buf)->sync = NULL;
    65a8:	4620      	mov	r0, r4
    65aa:	f010 fb75 	bl	16c98 <net_buf_id>
    65ae:	fb0a 8000 	mla	r0, sl, r0, r8
    65b2:	6087      	str	r7, [r0, #8]
	cmd(buf)->state = NULL;
    65b4:	4620      	mov	r0, r4
    65b6:	f010 fb6f 	bl	16c98 <net_buf_id>
    65ba:	fb0a 8000 	mla	r0, sl, r0, r8
	hdr = net_buf_add(buf, sizeof(*hdr));
    65be:	2103      	movs	r1, #3
	cmd(buf)->state = NULL;
    65c0:	6047      	str	r7, [r0, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    65c2:	4658      	mov	r0, fp
    65c4:	f017 ffe6 	bl	1e594 <net_buf_simple_add>
	hdr->param_len = param_len;
    65c8:	7086      	strb	r6, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    65ca:	8005      	strh	r5, [r0, #0]
}
    65cc:	4620      	mov	r0, r4
    65ce:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    65d2:	bf00      	nop
    65d4:	20000bcc 	.word	0x20000bcc
    65d8:	2000148c 	.word	0x2000148c

000065dc <bt_hci_cmd_send>:
{
    65dc:	b538      	push	{r3, r4, r5, lr}
    65de:	4605      	mov	r5, r0
	if (!buf) {
    65e0:	460c      	mov	r4, r1
    65e2:	b919      	cbnz	r1, 65ec <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    65e4:	f7ff ffc2 	bl	656c <bt_hci_cmd_create>
		if (!buf) {
    65e8:	4604      	mov	r4, r0
    65ea:	b198      	cbz	r0, 6614 <bt_hci_cmd_send+0x38>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    65ec:	f640 4335 	movw	r3, #3125	; 0xc35
    65f0:	429d      	cmp	r5, r3
    65f2:	d109      	bne.n	6608 <bt_hci_cmd_send+0x2c>
		return bt_hci_ecc_send(buf);
    65f4:	4620      	mov	r0, r4
    65f6:	f7ff fb03 	bl	5c00 <bt_hci_ecc_send>
		if (err) {
    65fa:	4605      	mov	r5, r0
    65fc:	b110      	cbz	r0, 6604 <bt_hci_cmd_send+0x28>
			net_buf_unref(buf);
    65fe:	4620      	mov	r0, r4
    6600:	f010 fbfe 	bl	16e00 <net_buf_unref>
}
    6604:	4628      	mov	r0, r5
    6606:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6608:	4804      	ldr	r0, [pc, #16]	; (661c <bt_hci_cmd_send+0x40>)
    660a:	4621      	mov	r1, r4
    660c:	f017 ff8f 	bl	1e52e <net_buf_put>
	return 0;
    6610:	2500      	movs	r5, #0
    6612:	e7f7      	b.n	6604 <bt_hci_cmd_send+0x28>
			return -ENOBUFS;
    6614:	f06f 0536 	mvn.w	r5, #54	; 0x36
    6618:	e7f4      	b.n	6604 <bt_hci_cmd_send+0x28>
    661a:	bf00      	nop
    661c:	2000010c 	.word	0x2000010c

00006620 <bt_hci_cmd_send_sync>:
{
    6620:	b5f0      	push	{r4, r5, r6, r7, lr}
    6622:	4615      	mov	r5, r2
    6624:	b087      	sub	sp, #28
	if (!buf) {
    6626:	460c      	mov	r4, r1
    6628:	b921      	cbnz	r1, 6634 <bt_hci_cmd_send_sync+0x14>
		buf = bt_hci_cmd_create(opcode, 0);
    662a:	f7ff ff9f 	bl	656c <bt_hci_cmd_create>
		if (!buf) {
    662e:	4604      	mov	r4, r0
    6630:	2800      	cmp	r0, #0
    6632:	d048      	beq.n	66c6 <bt_hci_cmd_send_sync+0xa6>
	return z_impl_k_sem_init(sem, initial_count, limit);
    6634:	2201      	movs	r2, #1
    6636:	2100      	movs	r1, #0
    6638:	4668      	mov	r0, sp
    663a:	f018 fc41 	bl	1eec0 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    663e:	4620      	mov	r0, r4
    6640:	f010 fb2a 	bl	16c98 <net_buf_id>
    6644:	4e21      	ldr	r6, [pc, #132]	; (66cc <bt_hci_cmd_send_sync+0xac>)
    6646:	230c      	movs	r3, #12
    6648:	fb03 6000 	mla	r0, r3, r0, r6
    664c:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    6650:	4620      	mov	r0, r4
    6652:	f017 ff79 	bl	1e548 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    6656:	481e      	ldr	r0, [pc, #120]	; (66d0 <bt_hci_cmd_send_sync+0xb0>)
    6658:	4621      	mov	r1, r4
    665a:	f017 ff68 	bl	1e52e <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    665e:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    6662:	2300      	movs	r3, #0
    6664:	4668      	mov	r0, sp
    6666:	f012 feb9 	bl	193dc <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    666a:	4607      	mov	r7, r0
    666c:	b180      	cbz	r0, 6690 <bt_hci_cmd_send_sync+0x70>
    666e:	4a19      	ldr	r2, [pc, #100]	; (66d4 <bt_hci_cmd_send_sync+0xb4>)
    6670:	4919      	ldr	r1, [pc, #100]	; (66d8 <bt_hci_cmd_send_sync+0xb8>)
    6672:	481a      	ldr	r0, [pc, #104]	; (66dc <bt_hci_cmd_send_sync+0xbc>)
    6674:	f44f 73bc 	mov.w	r3, #376	; 0x178
    6678:	f013 fbbd 	bl	19df6 <printk>
    667c:	4818      	ldr	r0, [pc, #96]	; (66e0 <bt_hci_cmd_send_sync+0xc0>)
    667e:	4639      	mov	r1, r7
    6680:	f013 fbb9 	bl	19df6 <printk>
    6684:	4040      	eors	r0, r0
    6686:	f380 8811 	msr	BASEPRI, r0
    668a:	f04f 0003 	mov.w	r0, #3
    668e:	df02      	svc	2
	status = cmd(buf)->status;
    6690:	4620      	mov	r0, r4
    6692:	f010 fb01 	bl	16c98 <net_buf_id>
    6696:	230c      	movs	r3, #12
    6698:	4343      	muls	r3, r0
    669a:	5cf6      	ldrb	r6, [r6, r3]
	if (status) {
    669c:	b156      	cbz	r6, 66b4 <bt_hci_cmd_send_sync+0x94>
		net_buf_unref(buf);
    669e:	4620      	mov	r0, r4
    66a0:	f010 fbae 	bl	16e00 <net_buf_unref>
			return -EIO;
    66a4:	2e09      	cmp	r6, #9
    66a6:	bf0c      	ite	eq
    66a8:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    66ac:	f06f 0004 	mvnne.w	r0, #4
}
    66b0:	b007      	add	sp, #28
    66b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (rsp) {
    66b4:	b115      	cbz	r5, 66bc <bt_hci_cmd_send_sync+0x9c>
		*rsp = buf;
    66b6:	602c      	str	r4, [r5, #0]
	return 0;
    66b8:	4630      	mov	r0, r6
    66ba:	e7f9      	b.n	66b0 <bt_hci_cmd_send_sync+0x90>
		net_buf_unref(buf);
    66bc:	4620      	mov	r0, r4
    66be:	f010 fb9f 	bl	16e00 <net_buf_unref>
	return 0;
    66c2:	4628      	mov	r0, r5
    66c4:	e7f4      	b.n	66b0 <bt_hci_cmd_send_sync+0x90>
			return -ENOBUFS;
    66c6:	f06f 0036 	mvn.w	r0, #54	; 0x36
    66ca:	e7f1      	b.n	66b0 <bt_hci_cmd_send_sync+0x90>
    66cc:	2000148c 	.word	0x2000148c
    66d0:	2000010c 	.word	0x2000010c
    66d4:	00020bc7 	.word	0x00020bc7
    66d8:	00020bfb 	.word	0x00020bfb
    66dc:	00020c04 	.word	0x00020c04
    66e0:	00020c25 	.word	0x00020c25

000066e4 <set_random_address>:
{
    66e4:	b570      	push	{r4, r5, r6, lr}
#define BT_ADDR_LE_NONE ((bt_addr_le_t[]) { { 0, \
			 { { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff } } } })

static inline int bt_addr_cmp(const bt_addr_t *a, const bt_addr_t *b)
{
	return memcmp(a, b, sizeof(*a));
    66e6:	4e15      	ldr	r6, [pc, #84]	; (673c <set_random_address+0x58>)
    66e8:	2206      	movs	r2, #6
    66ea:	f106 0131 	add.w	r1, r6, #49	; 0x31
    66ee:	4605      	mov	r5, r0
    66f0:	f015 f98b 	bl	1ba0a <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    66f4:	4604      	mov	r4, r0
    66f6:	b1d8      	cbz	r0, 6730 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    66f8:	2106      	movs	r1, #6
    66fa:	f242 0005 	movw	r0, #8197	; 0x2005
    66fe:	f7ff ff35 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
    6702:	4604      	mov	r4, r0
    6704:	b1b0      	cbz	r0, 6734 <set_random_address+0x50>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    6706:	2206      	movs	r2, #6
    6708:	4629      	mov	r1, r5
    670a:	3008      	adds	r0, #8
    670c:	f017 ff48 	bl	1e5a0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    6710:	4621      	mov	r1, r4
    6712:	2200      	movs	r2, #0
    6714:	f242 0005 	movw	r0, #8197	; 0x2005
    6718:	f7ff ff82 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    671c:	4604      	mov	r4, r0
    671e:	b938      	cbnz	r0, 6730 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    6720:	4629      	mov	r1, r5
    6722:	f106 0031 	add.w	r0, r6, #49	; 0x31
    6726:	f015 fb17 	bl	1bd58 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    672a:	2301      	movs	r3, #1
    672c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
}
    6730:	4620      	mov	r0, r4
    6732:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    6734:	f06f 0436 	mvn.w	r4, #54	; 0x36
    6738:	e7fa      	b.n	6730 <set_random_address+0x4c>
    673a:	bf00      	nop
    673c:	20000000 	.word	0x20000000

00006740 <le_set_private_addr>:
{
    6740:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6742:	4d16      	ldr	r5, [pc, #88]	; (679c <le_set_private_addr+0x5c>)
    6744:	4603      	mov	r3, r0
    6746:	f105 0098 	add.w	r0, r5, #152	; 0x98
    674a:	f015 faf5 	bl	1bd38 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    674e:	04c2      	lsls	r2, r0, #19
    6750:	d422      	bmi.n	6798 <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    6752:	eb05 1003 	add.w	r0, r5, r3, lsl #4
    6756:	4669      	mov	r1, sp
    6758:	f500 7094 	add.w	r0, r0, #296	; 0x128
    675c:	f015 f9f2 	bl	1bb44 <bt_rpa_create>
	if (!err) {
    6760:	4604      	mov	r4, r0
    6762:	b950      	cbnz	r0, 677a <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    6764:	4668      	mov	r0, sp
    6766:	f7ff ffbd 	bl	66e4 <set_random_address>
		if (!err) {
    676a:	4604      	mov	r4, r0
    676c:	b928      	cbnz	r0, 677a <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    676e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    6772:	f105 0098 	add.w	r0, r5, #152	; 0x98
    6776:	f015 fb39 	bl	1bdec <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    677a:	4809      	ldr	r0, [pc, #36]	; (67a0 <le_set_private_addr+0x60>)
    677c:	210d      	movs	r1, #13
    677e:	f015 fb44 	bl	1be0a <atomic_test_and_set_bit>
    6782:	b930      	cbnz	r0, 6792 <le_set_private_addr+0x52>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6784:	4907      	ldr	r1, [pc, #28]	; (67a4 <le_set_private_addr+0x64>)
    6786:	4808      	ldr	r0, [pc, #32]	; (67a8 <le_set_private_addr+0x68>)
    6788:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    678c:	2300      	movs	r3, #0
    678e:	f012 ff5b 	bl	19648 <k_delayed_work_submit_to_queue>
}
    6792:	4620      	mov	r0, r4
    6794:	b003      	add	sp, #12
    6796:	bd30      	pop	{r4, r5, pc}
		return 0;
    6798:	2400      	movs	r4, #0
    679a:	e7fa      	b.n	6792 <le_set_private_addr+0x52>
    679c:	20000000 	.word	0x20000000
    67a0:	20000098 	.word	0x20000098
    67a4:	20000138 	.word	0x20000138
    67a8:	20001348 	.word	0x20001348

000067ac <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    67ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    67ae:	f001 0304 	and.w	r3, r1, #4
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    67b2:	f011 0101 	ands.w	r1, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    67b6:	4605      	mov	r5, r0
    67b8:	4614      	mov	r4, r2
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    67ba:	d020      	beq.n	67fe <le_adv_set_random_addr.isra.0+0x52>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    67bc:	b953      	cbnz	r3, 67d4 <le_adv_set_random_addr.isra.0+0x28>
		return le_set_private_addr(adv->id);
    67be:	f7ff ffbf 	bl	6740 <le_set_private_addr>
			if (err) {
    67c2:	b990      	cbnz	r0, 67ea <le_adv_set_random_addr.isra.0+0x3e>
			if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    67c4:	4b19      	ldr	r3, [pc, #100]	; (682c <le_adv_set_random_addr.isra.0+0x80>)
    67c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    67ca:	065b      	lsls	r3, r3, #25
    67cc:	d52c      	bpl.n	6828 <le_adv_set_random_addr.isra.0+0x7c>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    67ce:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    67d0:	7023      	strb	r3, [r4, #0]
		if (err) {
    67d2:	e00a      	b.n	67ea <le_adv_set_random_addr.isra.0+0x3e>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    67d4:	4e15      	ldr	r6, [pc, #84]	; (682c <le_adv_set_random_addr.isra.0+0x80>)
    67d6:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    67da:	00c7      	lsls	r7, r0, #3
    67dc:	5cf3      	ldrb	r3, [r6, r3]
    67de:	2b01      	cmp	r3, #1
    67e0:	d004      	beq.n	67ec <le_adv_set_random_addr.isra.0+0x40>
			*own_addr_type = id_addr->type;
    67e2:	1b7d      	subs	r5, r7, r5
	return 0;
    67e4:	2000      	movs	r0, #0
			*own_addr_type = id_addr->type;
    67e6:	5d73      	ldrb	r3, [r6, r5]
    67e8:	7023      	strb	r3, [r4, #0]
}
    67ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				err = set_adv_random_address(adv, &id_addr->a);
    67ec:	2007      	movs	r0, #7
    67ee:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    67f2:	4430      	add	r0, r6
    67f4:	f7ff ff76 	bl	66e4 <set_random_address>
				if (err) {
    67f8:	2800      	cmp	r0, #0
    67fa:	d0f2      	beq.n	67e2 <le_adv_set_random_addr.isra.0+0x36>
    67fc:	e7f5      	b.n	67ea <le_adv_set_random_addr.isra.0+0x3e>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    67fe:	b18b      	cbz	r3, 6824 <le_adv_set_random_addr.isra.0+0x78>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    6800:	4e0a      	ldr	r6, [pc, #40]	; (682c <le_adv_set_random_addr.isra.0+0x80>)
    6802:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    6806:	00c7      	lsls	r7, r0, #3
    6808:	5cf3      	ldrb	r3, [r6, r3]
    680a:	2b01      	cmp	r3, #1
    680c:	d108      	bne.n	6820 <le_adv_set_random_addr.isra.0+0x74>
				err = set_adv_random_address(adv, &id_addr->a);
    680e:	2007      	movs	r0, #7
    6810:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    6814:	4430      	add	r0, r6
    6816:	f7ff ff65 	bl	66e4 <set_random_address>
			*own_addr_type = id_addr->type;
    681a:	1b7d      	subs	r5, r7, r5
    681c:	5d73      	ldrb	r3, [r6, r5]
    681e:	e7d7      	b.n	67d0 <le_adv_set_random_addr.isra.0+0x24>
	int err = 0;
    6820:	4608      	mov	r0, r1
    6822:	e7fa      	b.n	681a <le_adv_set_random_addr.isra.0+0x6e>
		return le_set_private_addr(adv->id);
    6824:	f7ff ff8c 	bl	6740 <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    6828:	2301      	movs	r3, #1
    682a:	e7d1      	b.n	67d0 <le_adv_set_random_addr.isra.0+0x24>
    682c:	20000000 	.word	0x20000000

00006830 <set_le_adv_enable_legacy>:
{
    6830:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    6832:	4606      	mov	r6, r0
    6834:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    6836:	f242 000a 	movw	r0, #8202	; 0x200a
    683a:	2101      	movs	r1, #1
    683c:	f7ff fe96 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
    6840:	4604      	mov	r4, r0
    6842:	b1e8      	cbz	r0, 6880 <set_le_adv_enable_legacy+0x50>
	if (enable) {
    6844:	3008      	adds	r0, #8
    6846:	b1cd      	cbz	r5, 687c <set_le_adv_enable_legacy+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    6848:	2101      	movs	r1, #1
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    684a:	f017 feb2 	bl	1e5b2 <net_buf_simple_add_u8>
	cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    684e:	3614      	adds	r6, #20
	state->bit = bit;
    6850:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    6852:	4620      	mov	r0, r4
	state->bit = bit;
    6854:	9302      	str	r3, [sp, #8]
	state->target = target;
    6856:	9601      	str	r6, [sp, #4]
	state->val = val;
    6858:	f88d 500c 	strb.w	r5, [sp, #12]
	cmd(buf)->state = &state;
    685c:	f010 fa1c 	bl	16c98 <net_buf_id>
    6860:	4b09      	ldr	r3, [pc, #36]	; (6888 <set_le_adv_enable_legacy+0x58>)
    6862:	220c      	movs	r2, #12
    6864:	fb02 3000 	mla	r0, r2, r0, r3
    6868:	ab01      	add	r3, sp, #4
    686a:	6043      	str	r3, [r0, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    686c:	2200      	movs	r2, #0
    686e:	4621      	mov	r1, r4
    6870:	f242 000a 	movw	r0, #8202	; 0x200a
    6874:	f7ff fed4 	bl	6620 <bt_hci_cmd_send_sync>
}
    6878:	b004      	add	sp, #16
    687a:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    687c:	4629      	mov	r1, r5
    687e:	e7e4      	b.n	684a <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    6880:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6884:	e7f8      	b.n	6878 <set_le_adv_enable_legacy+0x48>
    6886:	bf00      	nop
    6888:	2000148c 	.word	0x2000148c

0000688c <le_update_private_addr>:
{
    688c:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    688e:	4b12      	ldr	r3, [pc, #72]	; (68d8 <le_update_private_addr+0x4c>)
    6890:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    6894:	f015 fa50 	bl	1bd38 <atomic_get>
		if (adv &&
    6898:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    689a:	f3c0 1580 	ubfx	r5, r0, #6, #1
    689e:	d40c      	bmi.n	68ba <le_update_private_addr+0x2e>
	uint8_t id = BT_ID_DEFAULT;
    68a0:	2400      	movs	r4, #0
	bool adv_enabled = false;
    68a2:	4625      	mov	r5, r4
	err = le_set_private_addr(id);
    68a4:	4620      	mov	r0, r4
    68a6:	f7ff ff4b 	bl	6740 <le_set_private_addr>
	if (err) {
    68aa:	b9a0      	cbnz	r0, 68d6 <le_update_private_addr+0x4a>
	if (adv && adv_enabled) {
    68ac:	b19d      	cbz	r5, 68d6 <le_update_private_addr+0x4a>
}
    68ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_le_adv_enable_legacy(adv, true);
    68b2:	480a      	ldr	r0, [pc, #40]	; (68dc <le_update_private_addr+0x50>)
    68b4:	2101      	movs	r1, #1
    68b6:	f7ff bfbb 	b.w	6830 <set_le_adv_enable_legacy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    68ba:	f103 002c 	add.w	r0, r3, #44	; 0x2c
    68be:	f015 fa3b 	bl	1bd38 <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    68c2:	0502      	lsls	r2, r0, #20
    68c4:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    68c8:	d4ea      	bmi.n	68a0 <le_update_private_addr+0x14>
			id = adv->id;
    68ca:	4618      	mov	r0, r3
    68cc:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    68d0:	f7ff ffae 	bl	6830 <set_le_adv_enable_legacy>
    68d4:	e7e6      	b.n	68a4 <le_update_private_addr+0x18>
}
    68d6:	bd38      	pop	{r3, r4, r5, pc}
    68d8:	20000000 	.word	0x20000000
    68dc:	20000018 	.word	0x20000018

000068e0 <rpa_timeout>:
{
    68e0:	b508      	push	{r3, lr}
	le_rpa_invalidate();
    68e2:	f7ff fb67 	bl	5fb4 <le_rpa_invalidate>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    68e6:	480f      	ldr	r0, [pc, #60]	; (6924 <rpa_timeout+0x44>)
    68e8:	2106      	movs	r1, #6
    68ea:	f015 fa2b 	bl	1bd44 <atomic_test_bit>
    68ee:	b978      	cbnz	r0, 6910 <rpa_timeout+0x30>
    68f0:	480d      	ldr	r0, [pc, #52]	; (6928 <rpa_timeout+0x48>)
    68f2:	f015 fa21 	bl	1bd38 <atomic_get>
	if (!(adv_enabled ||
    68f6:	0501      	lsls	r1, r0, #20
    68f8:	d410      	bmi.n	691c <rpa_timeout+0x3c>
    68fa:	480b      	ldr	r0, [pc, #44]	; (6928 <rpa_timeout+0x48>)
    68fc:	f015 fa1c 	bl	1bd38 <atomic_get>
    6900:	0682      	lsls	r2, r0, #26
    6902:	d504      	bpl.n	690e <rpa_timeout+0x2e>
    6904:	4808      	ldr	r0, [pc, #32]	; (6928 <rpa_timeout+0x48>)
    6906:	f015 fa17 	bl	1bd38 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    690a:	0603      	lsls	r3, r0, #24
    690c:	d406      	bmi.n	691c <rpa_timeout+0x3c>
}
    690e:	bd08      	pop	{r3, pc}
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
    6910:	4804      	ldr	r0, [pc, #16]	; (6924 <rpa_timeout+0x44>)
    6912:	210b      	movs	r1, #11
    6914:	f015 fa16 	bl	1bd44 <atomic_test_bit>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    6918:	2800      	cmp	r0, #0
    691a:	d1e9      	bne.n	68f0 <rpa_timeout+0x10>
}
    691c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	le_update_private_addr();
    6920:	f7ff bfb4 	b.w	688c <le_update_private_addr>
    6924:	2000002c 	.word	0x2000002c
    6928:	20000098 	.word	0x20000098

0000692c <hci_id_add>:
{
    692c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6930:	4605      	mov	r5, r0
    6932:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    6934:	f242 0027 	movw	r0, #8231	; 0x2027
    6938:	2127      	movs	r1, #39	; 0x27
{
    693a:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    693c:	f7ff fe16 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
    6940:	4604      	mov	r4, r0
    6942:	b1f0      	cbz	r0, 6982 <hci_id_add+0x56>
	cp = net_buf_add(buf, sizeof(*cp));
    6944:	2127      	movs	r1, #39	; 0x27
    6946:	3008      	adds	r0, #8
    6948:	f017 fe24 	bl	1e594 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    694c:	4641      	mov	r1, r8
	cp = net_buf_add(buf, sizeof(*cp));
    694e:	4606      	mov	r6, r0
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    6950:	f015 fa05 	bl	1bd5e <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    6954:	4639      	mov	r1, r7
    6956:	2210      	movs	r2, #16
    6958:	1df0      	adds	r0, r6, #7
    695a:	f015 f866 	bl	1ba2a <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    695e:	490b      	ldr	r1, [pc, #44]	; (698c <hci_id_add+0x60>)
    6960:	2210      	movs	r2, #16
    6962:	fb02 1105 	mla	r1, r2, r5, r1
    6966:	f501 7194 	add.w	r1, r1, #296	; 0x128
    696a:	f106 0017 	add.w	r0, r6, #23
    696e:	f015 f85c 	bl	1ba2a <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    6972:	4621      	mov	r1, r4
    6974:	2200      	movs	r2, #0
}
    6976:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    697a:	f242 0027 	movw	r0, #8231	; 0x2027
    697e:	f7ff be4f 	b.w	6620 <bt_hci_cmd_send_sync>
}
    6982:	f06f 0036 	mvn.w	r0, #54	; 0x36
    6986:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    698a:	bf00      	nop
    698c:	20000000 	.word	0x20000000

00006990 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    6990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6994:	b087      	sub	sp, #28
    6996:	4606      	mov	r6, r0
    6998:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    699c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    69a0:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    69a4:	460c      	mov	r4, r1
    69a6:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    69a8:	2100      	movs	r1, #0
    69aa:	2210      	movs	r2, #16
    69ac:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    69ae:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    69b0:	f015 f866 	bl	1ba80 <memset>
	if (use_name) {
    69b4:	f1b8 0f00 	cmp.w	r8, #0
    69b8:	d00e      	beq.n	69d8 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    69ba:	bbb4      	cbnz	r4, 6a2a <le_adv_update.constprop.0+0x9a>
    69bc:	2d00      	cmp	r5, #0
    69be:	d13f      	bne.n	6a40 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    69c0:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 6a74 <le_adv_update.constprop.0+0xe4>
    69c4:	4658      	mov	r0, fp
    69c6:	f014 fffe 	bl	1b9c6 <strlen>
    69ca:	2309      	movs	r3, #9
    69cc:	f88d 3000 	strb.w	r3, [sp]
    69d0:	f88d 0001 	strb.w	r0, [sp, #1]
    69d4:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    69d8:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    69dc:	f1b8 0f00 	cmp.w	r8, #0
    69e0:	d030      	beq.n	6a44 <le_adv_update.constprop.0+0xb4>
    69e2:	f1ba 0f00 	cmp.w	sl, #0
    69e6:	d12d      	bne.n	6a44 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    69e8:	2301      	movs	r3, #1
			d[1].data = &data;
    69ea:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    69ee:	9305      	str	r3, [sp, #20]
			d_len = 2;
    69f0:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    69f2:	a902      	add	r1, sp, #8
    69f4:	f242 0008 	movw	r0, #8200	; 0x2008
    69f8:	f015 fbd2 	bl	1c1a0 <hci_set_ad>
		if (err) {
    69fc:	4604      	mov	r4, r0
    69fe:	b938      	cbnz	r0, 6a10 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    6a00:	f1ba 0f00 	cmp.w	sl, #0
    6a04:	d120      	bne.n	6a48 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    6a06:	2104      	movs	r1, #4
    6a08:	f106 0014 	add.w	r0, r6, #20
    6a0c:	f015 f9ee 	bl	1bdec <atomic_or>
}
    6a10:	4620      	mov	r0, r4
    6a12:	b007      	add	sp, #28
    6a14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    6a18:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    6a1c:	3a08      	subs	r2, #8
    6a1e:	2a01      	cmp	r2, #1
    6a20:	d925      	bls.n	6a6e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    6a22:	3301      	adds	r3, #1
    6a24:	429f      	cmp	r7, r3
    6a26:	d1f7      	bne.n	6a18 <le_adv_update.constprop.0+0x88>
    6a28:	e7c8      	b.n	69bc <le_adv_update.constprop.0+0x2c>
    6a2a:	2300      	movs	r3, #0
    6a2c:	e7fa      	b.n	6a24 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    6a2e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    6a32:	3a08      	subs	r2, #8
    6a34:	2a01      	cmp	r2, #1
    6a36:	d91a      	bls.n	6a6e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    6a38:	3301      	adds	r3, #1
    6a3a:	4599      	cmp	r9, r3
    6a3c:	d1f7      	bne.n	6a2e <le_adv_update.constprop.0+0x9e>
    6a3e:	e7bf      	b.n	69c0 <le_adv_update.constprop.0+0x30>
    6a40:	2300      	movs	r3, #0
    6a42:	e7fa      	b.n	6a3a <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    6a44:	2201      	movs	r2, #1
    6a46:	e7d4      	b.n	69f2 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    6a48:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    6a4c:	2201      	movs	r2, #1
    6a4e:	f1b8 0f00 	cmp.w	r8, #0
    6a52:	d003      	beq.n	6a5c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    6a54:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    6a56:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    6a5a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    6a5c:	a902      	add	r1, sp, #8
    6a5e:	f242 0009 	movw	r0, #8201	; 0x2009
    6a62:	f015 fb9d 	bl	1c1a0 <hci_set_ad>
		if (err) {
    6a66:	2800      	cmp	r0, #0
    6a68:	d0cd      	beq.n	6a06 <le_adv_update.constprop.0+0x76>
    6a6a:	4604      	mov	r4, r0
    6a6c:	e7d0      	b.n	6a10 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    6a6e:	f06f 0415 	mvn.w	r4, #21
    6a72:	e7cd      	b.n	6a10 <le_adv_update.constprop.0+0x80>
    6a74:	0002095f 	.word	0x0002095f

00006a78 <conn_auto_initiate>:
{
    6a78:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    6a7a:	7b43      	ldrb	r3, [r0, #13]
    6a7c:	2b07      	cmp	r3, #7
{
    6a7e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6a80:	d11e      	bne.n	6ac0 <conn_auto_initiate+0x48>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    6a82:	1d06      	adds	r6, r0, #4
    6a84:	210d      	movs	r1, #13
    6a86:	4630      	mov	r0, r6
    6a88:	f015 f95c 	bl	1bd44 <atomic_test_bit>
    6a8c:	b9d0      	cbnz	r0, 6ac4 <conn_auto_initiate+0x4c>
    6a8e:	78e3      	ldrb	r3, [r4, #3]
    6a90:	b123      	cbz	r3, 6a9c <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    6a92:	4b2c      	ldr	r3, [pc, #176]	; (6b44 <conn_auto_initiate+0xcc>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    6a94:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    6a98:	071d      	lsls	r5, r3, #28
    6a9a:	d513      	bpl.n	6ac4 <conn_auto_initiate+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    6a9c:	2102      	movs	r1, #2
    6a9e:	f242 0016 	movw	r0, #8214	; 0x2016
    6aa2:	f7ff fd63 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
    6aa6:	4605      	mov	r5, r0
    6aa8:	b160      	cbz	r0, 6ac4 <conn_auto_initiate+0x4c>
	cp = net_buf_add(buf, sizeof(*cp));
    6aaa:	2102      	movs	r1, #2
    6aac:	3008      	adds	r0, #8
    6aae:	f017 fd71 	bl	1e594 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6ab2:	8823      	ldrh	r3, [r4, #0]
    6ab4:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    6ab6:	4629      	mov	r1, r5
    6ab8:	f242 0016 	movw	r0, #8214	; 0x2016
    6abc:	f7ff fd8e 	bl	65dc <bt_hci_cmd_send>
}
    6ac0:	b004      	add	sp, #16
    6ac2:	bd70      	pop	{r4, r5, r6, pc}
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    6ac4:	210c      	movs	r1, #12
    6ac6:	4630      	mov	r0, r6
    6ac8:	f015 f93c 	bl	1bd44 <atomic_test_bit>
    6acc:	4d1d      	ldr	r5, [pc, #116]	; (6b44 <conn_auto_initiate+0xcc>)
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    6ace:	4601      	mov	r1, r0
    6ad0:	b978      	cbnz	r0, 6af2 <conn_auto_initiate+0x7a>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    6ad2:	f895 30a1 	ldrb.w	r3, [r5, #161]	; 0xa1
    6ad6:	07d8      	lsls	r0, r3, #31
    6ad8:	d50b      	bpl.n	6af2 <conn_auto_initiate+0x7a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    6ada:	2302      	movs	r3, #2
    6adc:	9100      	str	r1, [sp, #0]
    6ade:	461a      	mov	r2, r3
    6ae0:	4620      	mov	r0, r4
    6ae2:	f015 fbca 	bl	1c27a <bt_le_set_phy>
		if (!err) {
    6ae6:	b920      	cbnz	r0, 6af2 <conn_auto_initiate+0x7a>
    6ae8:	2180      	movs	r1, #128	; 0x80
    6aea:	4630      	mov	r0, r6
    6aec:	f015 f97e 	bl	1bdec <atomic_or>
			return;
    6af0:	e7e6      	b.n	6ac0 <conn_auto_initiate+0x48>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    6af2:	f895 30a0 	ldrb.w	r3, [r5, #160]	; 0xa0
    6af6:	069a      	lsls	r2, r3, #26
    6af8:	d511      	bpl.n	6b1e <conn_auto_initiate+0xa6>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    6afa:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    6afe:	689b      	ldr	r3, [r3, #8]
    6b00:	079b      	lsls	r3, r3, #30
    6b02:	d50c      	bpl.n	6b1e <conn_auto_initiate+0xa6>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    6b04:	f10d 010e 	add.w	r1, sp, #14
    6b08:	a803      	add	r0, sp, #12
    6b0a:	f015 fb0e 	bl	1c12a <hci_le_read_max_data_len>
			if (!err) {
    6b0e:	b930      	cbnz	r0, 6b1e <conn_auto_initiate+0xa6>
				err = bt_le_set_data_len(conn,
    6b10:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    6b14:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    6b18:	4620      	mov	r0, r4
    6b1a:	f015 fb91 	bl	1c240 <bt_le_set_data_len>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    6b1e:	78e3      	ldrb	r3, [r4, #3]
    6b20:	2b01      	cmp	r3, #1
    6b22:	d1cd      	bne.n	6ac0 <conn_auto_initiate+0x48>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_UPDATE)) {
    6b24:	2108      	movs	r1, #8
    6b26:	4630      	mov	r0, r6
    6b28:	f015 f90c 	bl	1bd44 <atomic_test_bit>
    6b2c:	2800      	cmp	r0, #0
    6b2e:	d1c7      	bne.n	6ac0 <conn_auto_initiate+0x48>
    6b30:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    6b34:	2300      	movs	r3, #0
    6b36:	f104 0158 	add.w	r1, r4, #88	; 0x58
    6b3a:	4803      	ldr	r0, [pc, #12]	; (6b48 <conn_auto_initiate+0xd0>)
    6b3c:	f012 fd84 	bl	19648 <k_delayed_work_submit_to_queue>
    6b40:	e7be      	b.n	6ac0 <conn_auto_initiate+0x48>
    6b42:	bf00      	nop
    6b44:	20000000 	.word	0x20000000
    6b48:	20001348 	.word	0x20001348

00006b4c <bt_id_add>:
{
    6b4c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    6b4e:	4f43      	ldr	r7, [pc, #268]	; (6c5c <bt_id_add+0x110>)
    6b50:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
    6b54:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
    6b58:	4604      	mov	r4, r0
    6b5a:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    6b5c:	b10a      	cbz	r2, 6b62 <bt_id_add+0x16>
    6b5e:	429a      	cmp	r2, r3
    6b60:	d208      	bcs.n	6b74 <bt_id_add+0x28>
		bt_dev.le.rl_entries++;
    6b62:	3301      	adds	r3, #1
    6b64:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    6b68:	7a23      	ldrb	r3, [r4, #8]
    6b6a:	f043 0304 	orr.w	r3, r3, #4
    6b6e:	7223      	strb	r3, [r4, #8]
}
    6b70:	b003      	add	sp, #12
    6b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    6b74:	2100      	movs	r1, #0
    6b76:	2206      	movs	r2, #6
    6b78:	4608      	mov	r0, r1
    6b7a:	f001 f981 	bl	7e80 <bt_conn_lookup_state_le>
	if (conn) {
    6b7e:	4606      	mov	r6, r0
    6b80:	b168      	cbz	r0, 6b9e <bt_id_add+0x52>
    6b82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    6b86:	f107 0098 	add.w	r0, r7, #152	; 0x98
    6b8a:	f015 f92f 	bl	1bdec <atomic_or>
	keys->state |= flag;
    6b8e:	7a23      	ldrb	r3, [r4, #8]
    6b90:	f043 0301 	orr.w	r3, r3, #1
    6b94:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    6b96:	4630      	mov	r0, r6
    6b98:	f015 fd79 	bl	1c68e <bt_conn_unref>
		return;
    6b9c:	e7e8      	b.n	6b70 <bt_id_add+0x24>
	func(&bt_dev.adv, data);
    6b9e:	4601      	mov	r1, r0
    6ba0:	f107 0018 	add.w	r0, r7, #24
    6ba4:	f015 fa9c 	bl	1c0e0 <adv_pause_enabled>
	if (bt_dev.le.rl_entries) {
    6ba8:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
    6bac:	b9b3      	cbnz	r3, 6bdc <bt_id_add+0x90>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    6bae:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
    6bb2:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
    6bb6:	429a      	cmp	r2, r3
    6bb8:	d11d      	bne.n	6bf6 <bt_id_add+0xaa>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    6bba:	2200      	movs	r2, #0
    6bbc:	4611      	mov	r1, r2
    6bbe:	f242 0029 	movw	r0, #8233	; 0x2029
    6bc2:	f7ff fd2d 	bl	6620 <bt_hci_cmd_send_sync>
		if (err) {
    6bc6:	b970      	cbnz	r0, 6be6 <bt_id_add+0x9a>
		bt_dev.le.rl_entries++;
    6bc8:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    6bcc:	3301      	adds	r3, #1
    6bce:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state |= BT_KEYS_ID_ADDED;
    6bd2:	7a23      	ldrb	r3, [r4, #8]
    6bd4:	f043 0304 	orr.w	r3, r3, #4
    6bd8:	7223      	strb	r3, [r4, #8]
		goto done;
    6bda:	e004      	b.n	6be6 <bt_id_add+0x9a>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    6bdc:	4630      	mov	r0, r6
    6bde:	f015 fac7 	bl	1c170 <addr_res_enable>
		if (err) {
    6be2:	2800      	cmp	r0, #0
    6be4:	d0e3      	beq.n	6bae <bt_id_add+0x62>
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    6be6:	2001      	movs	r0, #1
    6be8:	f015 fac2 	bl	1c170 <addr_res_enable>
	func(&bt_dev.adv, data);
    6bec:	481c      	ldr	r0, [pc, #112]	; (6c60 <bt_id_add+0x114>)
    6bee:	2100      	movs	r1, #0
    6bf0:	f015 fa8b 	bl	1c10a <adv_unpause_enabled>
}
    6bf4:	e7bc      	b.n	6b70 <bt_id_add+0x24>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    6bf6:	4622      	mov	r2, r4
    6bf8:	1c67      	adds	r7, r4, #1
    6bfa:	f812 0b2a 	ldrb.w	r0, [r2], #42
    6bfe:	4639      	mov	r1, r7
    6c00:	f7ff fe94 	bl	692c <hci_id_add>
	if (err) {
    6c04:	4606      	mov	r6, r0
    6c06:	2800      	cmp	r0, #0
    6c08:	d1ed      	bne.n	6be6 <bt_id_add+0x9a>
	bt_dev.le.rl_entries++;
    6c0a:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    6c0e:	3301      	adds	r3, #1
    6c10:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state |= BT_KEYS_ID_ADDED;
    6c14:	7a23      	ldrb	r3, [r4, #8]
    6c16:	f043 0304 	orr.w	r3, r3, #4
    6c1a:	7223      	strb	r3, [r4, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    6c1c:	f895 306f 	ldrb.w	r3, [r5, #111]	; 0x6f
    6c20:	075b      	lsls	r3, r3, #29
    6c22:	d5e0      	bpl.n	6be6 <bt_id_add+0x9a>
	bt_addr_le_copy(&cp.id_addr, addr);
    6c24:	4639      	mov	r1, r7
    6c26:	4668      	mov	r0, sp
    6c28:	f015 f899 	bl	1bd5e <bt_addr_le_copy>
	cp.mode = mode;
    6c2c:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    6c2e:	2108      	movs	r1, #8
    6c30:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    6c34:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    6c38:	f7ff fc98 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
    6c3c:	4604      	mov	r4, r0
    6c3e:	2800      	cmp	r0, #0
    6c40:	d0d1      	beq.n	6be6 <bt_id_add+0x9a>
	net_buf_add_mem(buf, &cp, sizeof(cp));
    6c42:	2208      	movs	r2, #8
    6c44:	4669      	mov	r1, sp
    6c46:	4410      	add	r0, r2
    6c48:	f017 fcaa 	bl	1e5a0 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    6c4c:	4632      	mov	r2, r6
    6c4e:	4621      	mov	r1, r4
    6c50:	f242 004e 	movw	r0, #8270	; 0x204e
    6c54:	f7ff fce4 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    6c58:	e7c5      	b.n	6be6 <bt_id_add+0x9a>
    6c5a:	bf00      	nop
    6c5c:	20000000 	.word	0x20000000
    6c60:	20000018 	.word	0x20000018

00006c64 <bt_id_del>:
{
    6c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    6c68:	4f3a      	ldr	r7, [pc, #232]	; (6d54 <bt_id_del+0xf0>)
    6c6a:	f897 20e8 	ldrb.w	r2, [r7, #232]	; 0xe8
    6c6e:	f897 30e9 	ldrb.w	r3, [r7, #233]	; 0xe9
{
    6c72:	4604      	mov	r4, r0
    6c74:	463d      	mov	r5, r7
	if (!bt_dev.le.rl_size ||
    6c76:	b112      	cbz	r2, 6c7e <bt_id_del+0x1a>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    6c78:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    6c7a:	4293      	cmp	r3, r2
    6c7c:	dd08      	ble.n	6c90 <bt_id_del+0x2c>
		bt_dev.le.rl_entries--;
    6c7e:	3b01      	subs	r3, #1
    6c80:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    6c84:	7a23      	ldrb	r3, [r4, #8]
    6c86:	f023 0304 	bic.w	r3, r3, #4
    6c8a:	7223      	strb	r3, [r4, #8]
}
    6c8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    6c90:	2100      	movs	r1, #0
    6c92:	2206      	movs	r2, #6
    6c94:	4608      	mov	r0, r1
    6c96:	f001 f8f3 	bl	7e80 <bt_conn_lookup_state_le>
	if (conn) {
    6c9a:	4606      	mov	r6, r0
    6c9c:	b170      	cbz	r0, 6cbc <bt_id_del+0x58>
    6c9e:	f107 0098 	add.w	r0, r7, #152	; 0x98
    6ca2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    6ca6:	f015 f8a1 	bl	1bdec <atomic_or>
	keys->state |= flag;
    6caa:	7a23      	ldrb	r3, [r4, #8]
    6cac:	f043 0302 	orr.w	r3, r3, #2
    6cb0:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    6cb2:	4630      	mov	r0, r6
}
    6cb4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    6cb8:	f015 bce9 	b.w	1c68e <bt_conn_unref>
	func(&bt_dev.adv, data);
    6cbc:	4601      	mov	r1, r0
    6cbe:	f107 0018 	add.w	r0, r7, #24
    6cc2:	f015 fa0d 	bl	1c0e0 <adv_pause_enabled>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    6cc6:	4630      	mov	r0, r6
    6cc8:	f015 fa52 	bl	1c170 <addr_res_enable>
	if (err) {
    6ccc:	4607      	mov	r7, r0
    6cce:	b988      	cbnz	r0, 6cf4 <bt_id_del+0x90>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    6cd0:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    6cd4:	f895 20e8 	ldrb.w	r2, [r5, #232]	; 0xe8
    6cd8:	429a      	cmp	r2, r3
    6cda:	d217      	bcs.n	6d0c <bt_id_del+0xa8>
		bt_dev.le.rl_entries--;
    6cdc:	3b01      	subs	r3, #1
    6cde:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
		keys->state &= ~BT_KEYS_ID_ADDED;
    6ce2:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    6ce4:	491c      	ldr	r1, [pc, #112]	; (6d58 <bt_id_del+0xf4>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    6ce6:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    6cea:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    6cec:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    6cee:	2002      	movs	r0, #2
    6cf0:	f004 f99a 	bl	b028 <bt_keys_foreach>
	if (bt_dev.le.rl_entries) {
    6cf4:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    6cf8:	b113      	cbz	r3, 6d00 <bt_id_del+0x9c>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    6cfa:	2001      	movs	r0, #1
    6cfc:	f015 fa38 	bl	1c170 <addr_res_enable>
}
    6d00:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	func(&bt_dev.adv, data);
    6d04:	4815      	ldr	r0, [pc, #84]	; (6d5c <bt_id_del+0xf8>)
    6d06:	2100      	movs	r1, #0
    6d08:	f015 b9ff 	b.w	1c10a <adv_unpause_enabled>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    6d0c:	2107      	movs	r1, #7
    6d0e:	f242 0028 	movw	r0, #8232	; 0x2028
    6d12:	f7ff fc2b 	bl	656c <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    6d16:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    6d1a:	4606      	mov	r6, r0
    6d1c:	2800      	cmp	r0, #0
    6d1e:	d0e9      	beq.n	6cf4 <bt_id_del+0x90>
	cp = net_buf_add(buf, sizeof(*cp));
    6d20:	2107      	movs	r1, #7
    6d22:	3008      	adds	r0, #8
    6d24:	f017 fc36 	bl	1e594 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    6d28:	4641      	mov	r1, r8
    6d2a:	f015 f818 	bl	1bd5e <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    6d2e:	463a      	mov	r2, r7
    6d30:	4631      	mov	r1, r6
    6d32:	f242 0028 	movw	r0, #8232	; 0x2028
    6d36:	f7ff fc73 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    6d3a:	2800      	cmp	r0, #0
    6d3c:	d1da      	bne.n	6cf4 <bt_id_del+0x90>
	bt_dev.le.rl_entries--;
    6d3e:	f895 30e9 	ldrb.w	r3, [r5, #233]	; 0xe9
    6d42:	3b01      	subs	r3, #1
    6d44:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
	keys->state &= ~BT_KEYS_ID_ADDED;
    6d48:	7a23      	ldrb	r3, [r4, #8]
    6d4a:	f023 0304 	bic.w	r3, r3, #4
    6d4e:	7223      	strb	r3, [r4, #8]
    6d50:	e7d0      	b.n	6cf4 <bt_id_del+0x90>
    6d52:	bf00      	nop
    6d54:	20000000 	.word	0x20000000
    6d58:	0001c15b 	.word	0x0001c15b
    6d5c:	20000018 	.word	0x20000018

00006d60 <id_create>:
{
    6d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d64:	4604      	mov	r4, r0
    6d66:	4828      	ldr	r0, [pc, #160]	; (6e08 <id_create+0xa8>)
    6d68:	ebc4 07c4 	rsb	r7, r4, r4, lsl #3
    6d6c:	b086      	sub	sp, #24
    6d6e:	4615      	mov	r5, r2
    6d70:	4407      	add	r7, r0
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    6d72:	460e      	mov	r6, r1
    6d74:	4680      	mov	r8, r0
    6d76:	b361      	cbz	r1, 6dd2 <id_create+0x72>
    6d78:	2300      	movs	r3, #0
    6d7a:	4669      	mov	r1, sp
    6d7c:	4630      	mov	r0, r6
    6d7e:	9300      	str	r3, [sp, #0]
    6d80:	f8cd 3003 	str.w	r3, [sp, #3]
    6d84:	f014 ffe5 	bl	1bd52 <bt_addr_le_cmp>
    6d88:	b318      	cbz	r0, 6dd2 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    6d8a:	4631      	mov	r1, r6
    6d8c:	4638      	mov	r0, r7
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    6d8e:	f014 ffe6 	bl	1bd5e <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    6d92:	2610      	movs	r6, #16
    6d94:	2300      	movs	r3, #0
    6d96:	fb06 8404 	mla	r4, r6, r4, r8
    6d9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6d9e:	e9cd 3304 	strd	r3, r3, [sp, #16]
		if (irk && memcmp(irk, zero_irk, 16)) {
    6da2:	f504 7494 	add.w	r4, r4, #296	; 0x128
    6da6:	b32d      	cbz	r5, 6df4 <id_create+0x94>
    6da8:	4632      	mov	r2, r6
    6daa:	a902      	add	r1, sp, #8
    6dac:	4628      	mov	r0, r5
    6dae:	f014 fe2c 	bl	1ba0a <memcmp>
    6db2:	b1f8      	cbz	r0, 6df4 <id_create+0x94>
			memcpy(&bt_dev.irk[id], irk, 16);
    6db4:	4632      	mov	r2, r6
    6db6:	4629      	mov	r1, r5
    6db8:	4620      	mov	r0, r4
				memcpy(irk, &bt_dev.irk[id], 16);
    6dba:	f014 fe36 	bl	1ba2a <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    6dbe:	4813      	ldr	r0, [pc, #76]	; (6e0c <id_create+0xac>)
    6dc0:	f014 ffba 	bl	1bd38 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    6dc4:	0783      	lsls	r3, r0, #30
    6dc6:	d501      	bpl.n	6dcc <id_create+0x6c>
		bt_settings_save_id();
    6dc8:	f7ff f85e 	bl	5e88 <bt_settings_save_id>
}
    6dcc:	b006      	add	sp, #24
    6dce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			bt_addr_le_create_static(&new_addr);
    6dd2:	a802      	add	r0, sp, #8
    6dd4:	f015 fae2 	bl	1c39c <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    6dd8:	a802      	add	r0, sp, #8
    6dda:	f7ff f907 	bl	5fec <id_find>
    6dde:	2800      	cmp	r0, #0
    6de0:	daf7      	bge.n	6dd2 <id_create+0x72>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    6de2:	a902      	add	r1, sp, #8
    6de4:	4638      	mov	r0, r7
    6de6:	f014 ffba 	bl	1bd5e <bt_addr_le_copy>
		if (addr) {
    6dea:	2e00      	cmp	r6, #0
    6dec:	d0d1      	beq.n	6d92 <id_create+0x32>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    6dee:	4639      	mov	r1, r7
    6df0:	4630      	mov	r0, r6
    6df2:	e7cc      	b.n	6d8e <id_create+0x2e>
			bt_rand(&bt_dev.irk[id], 16);
    6df4:	2110      	movs	r1, #16
    6df6:	4620      	mov	r0, r4
    6df8:	f007 f856 	bl	dea8 <bt_rand>
			if (irk) {
    6dfc:	2d00      	cmp	r5, #0
    6dfe:	d0de      	beq.n	6dbe <id_create+0x5e>
				memcpy(irk, &bt_dev.irk[id], 16);
    6e00:	2210      	movs	r2, #16
    6e02:	4621      	mov	r1, r4
    6e04:	4628      	mov	r0, r5
    6e06:	e7d8      	b.n	6dba <id_create+0x5a>
    6e08:	20000000 	.word	0x20000000
    6e0c:	20000098 	.word	0x20000098

00006e10 <hci_event_prio>:
{
    6e10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e14:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    6e16:	f100 0608 	add.w	r6, r0, #8
 * @param state Storage for the state.
 */
static inline void net_buf_simple_save(struct net_buf_simple *buf,
				       struct net_buf_simple_state *state)
{
	state->offset = net_buf_simple_headroom(buf);
    6e1a:	4630      	mov	r0, r6
    6e1c:	f017 fbf1 	bl	1e602 <net_buf_simple_headroom>
	state->len = buf->len;
    6e20:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6e24:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    6e28:	4605      	mov	r5, r0
    6e2a:	d80c      	bhi.n	6e46 <hci_event_prio+0x36>
    6e2c:	4a1c      	ldr	r2, [pc, #112]	; (6ea0 <hci_event_prio+0x90>)
    6e2e:	491d      	ldr	r1, [pc, #116]	; (6ea4 <hci_event_prio+0x94>)
    6e30:	481d      	ldr	r0, [pc, #116]	; (6ea8 <hci_event_prio+0x98>)
    6e32:	f641 03dc 	movw	r3, #6364	; 0x18dc
    6e36:	f012 ffde 	bl	19df6 <printk>
    6e3a:	4040      	eors	r0, r0
    6e3c:	f380 8811 	msr	BASEPRI, r0
    6e40:	f04f 0003 	mov.w	r0, #3
    6e44:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6e46:	2102      	movs	r1, #2
    6e48:	4630      	mov	r0, r6
    6e4a:	f017 fbca 	bl	1e5e2 <net_buf_simple_pull_mem>
    6e4e:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6e50:	7800      	ldrb	r0, [r0, #0]
    6e52:	f014 ff3b 	bl	1bccc <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6e56:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    6e58:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    6e5a:	d40c      	bmi.n	6e76 <hci_event_prio+0x66>
    6e5c:	4a10      	ldr	r2, [pc, #64]	; (6ea0 <hci_event_prio+0x90>)
    6e5e:	4913      	ldr	r1, [pc, #76]	; (6eac <hci_event_prio+0x9c>)
    6e60:	4811      	ldr	r0, [pc, #68]	; (6ea8 <hci_event_prio+0x98>)
    6e62:	f44f 53c7 	mov.w	r3, #6368	; 0x18e0
    6e66:	f012 ffc6 	bl	19df6 <printk>
    6e6a:	4040      	eors	r0, r0
    6e6c:	f380 8811 	msr	BASEPRI, r0
    6e70:	f04f 0003 	mov.w	r0, #3
    6e74:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    6e76:	2305      	movs	r3, #5
    6e78:	4a0d      	ldr	r2, [pc, #52]	; (6eb0 <hci_event_prio+0xa0>)
    6e7a:	7838      	ldrb	r0, [r7, #0]
    6e7c:	4621      	mov	r1, r4
    6e7e:	f014 ff37 	bl	1bcf0 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    6e82:	07b3      	lsls	r3, r6, #30
    6e84:	d507      	bpl.n	6e96 <hci_event_prio+0x86>
 * @param state Stored state.
 */
static inline void net_buf_simple_restore(struct net_buf_simple *buf,
					  struct net_buf_simple_state *state)
{
	buf->data = buf->__buf + state->offset;
    6e86:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    6e88:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    6e8c:	fa10 f585 	uxtah	r5, r0, r5
    6e90:	60a5      	str	r5, [r4, #8]
}
    6e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    6e96:	4620      	mov	r0, r4
}
    6e98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    6e9c:	f00f bfb0 	b.w	16e00 <net_buf_unref>
    6ea0:	00020bc7 	.word	0x00020bc7
    6ea4:	00020c45 	.word	0x00020c45
    6ea8:	00020c04 	.word	0x00020c04
    6eac:	00020c5e 	.word	0x00020c5e
    6eb0:	0001fa34 	.word	0x0001fa34

00006eb4 <bt_recv>:
{
    6eb4:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    6eb6:	7d03      	ldrb	r3, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    6eb8:	2b01      	cmp	r3, #1
{
    6eba:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    6ebc:	d036      	beq.n	6f2c <bt_recv+0x78>
    6ebe:	2b03      	cmp	r3, #3
    6ec0:	d163      	bne.n	6f8a <bt_recv+0xd6>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6ec2:	8983      	ldrh	r3, [r0, #12]
    6ec4:	2b03      	cmp	r3, #3
    6ec6:	d80c      	bhi.n	6ee2 <bt_recv+0x2e>
    6ec8:	4a32      	ldr	r2, [pc, #200]	; (6f94 <bt_recv+0xe0>)
    6eca:	4933      	ldr	r1, [pc, #204]	; (6f98 <bt_recv+0xe4>)
    6ecc:	4833      	ldr	r0, [pc, #204]	; (6f9c <bt_recv+0xe8>)
    6ece:	f240 530c 	movw	r3, #1292	; 0x50c
    6ed2:	f012 ff90 	bl	19df6 <printk>
    6ed6:	4040      	eors	r0, r0
    6ed8:	f380 8811 	msr	BASEPRI, r0
    6edc:	f04f 0003 	mov.w	r0, #3
    6ee0:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6ee2:	2104      	movs	r1, #4
    6ee4:	f104 0008 	add.w	r0, r4, #8
    6ee8:	f017 fb7b 	bl	1e5e2 <net_buf_simple_pull_mem>
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    6eec:	22ff      	movs	r2, #255	; 0xff
	len = sys_le16_to_cpu(hdr->len);
    6eee:	8843      	ldrh	r3, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    6ef0:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    6ef2:	7562      	strb	r2, [r4, #21]
	if (buf->len != len) {
    6ef4:	89a2      	ldrh	r2, [r4, #12]
	acl(buf)->handle = bt_acl_handle(handle);
    6ef6:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    6efa:	429a      	cmp	r2, r3
	acl(buf)->handle = bt_acl_handle(handle);
    6efc:	82e0      	strh	r0, [r4, #22]
	if (buf->len != len) {
    6efe:	d003      	beq.n	6f08 <bt_recv+0x54>
	net_buf_unref(buf);
    6f00:	4620      	mov	r0, r4
    6f02:	f00f ff7d 	bl	16e00 <net_buf_unref>
    6f06:	e00f      	b.n	6f28 <bt_recv+0x74>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    6f08:	f000 ff96 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
    6f0c:	4605      	mov	r5, r0
    6f0e:	2800      	cmp	r0, #0
    6f10:	d0f6      	beq.n	6f00 <bt_recv+0x4c>
	acl(buf)->index = bt_conn_index(conn);
    6f12:	f001 f9af 	bl	8274 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    6f16:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    6f18:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    6f1a:	4621      	mov	r1, r4
    6f1c:	4628      	mov	r0, r5
    6f1e:	f015 fb2e 	bl	1c57e <bt_conn_recv>
	bt_conn_unref(conn);
    6f22:	4628      	mov	r0, r5
    6f24:	f015 fbb3 	bl	1c68e <bt_conn_unref>
		return 0;
    6f28:	2000      	movs	r0, #0
}
    6f2a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6f2c:	8983      	ldrh	r3, [r0, #12]
    6f2e:	2b01      	cmp	r3, #1
    6f30:	d80c      	bhi.n	6f4c <bt_recv+0x98>
    6f32:	4a18      	ldr	r2, [pc, #96]	; (6f94 <bt_recv+0xe0>)
    6f34:	4918      	ldr	r1, [pc, #96]	; (6f98 <bt_recv+0xe4>)
    6f36:	4819      	ldr	r0, [pc, #100]	; (6f9c <bt_recv+0xe8>)
    6f38:	f241 4310 	movw	r3, #5136	; 0x1410
    6f3c:	f012 ff5b 	bl	19df6 <printk>
    6f40:	4040      	eors	r0, r0
    6f42:	f380 8811 	msr	BASEPRI, r0
    6f46:	f04f 0003 	mov.w	r0, #3
    6f4a:	df02      	svc	2
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    6f4c:	2102      	movs	r1, #2
    6f4e:	f104 0008 	add.w	r0, r4, #8
    6f52:	f017 fb46 	bl	1e5e2 <net_buf_simple_pull_mem>
    6f56:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    6f58:	7800      	ldrb	r0, [r0, #0]
    6f5a:	f014 feb7 	bl	1bccc <bt_hci_evt_get_flags>
    6f5e:	0783      	lsls	r3, r0, #30
    6f60:	d40c      	bmi.n	6f7c <bt_recv+0xc8>
    6f62:	4a0c      	ldr	r2, [pc, #48]	; (6f94 <bt_recv+0xe0>)
    6f64:	490e      	ldr	r1, [pc, #56]	; (6fa0 <bt_recv+0xec>)
    6f66:	480d      	ldr	r0, [pc, #52]	; (6f9c <bt_recv+0xe8>)
    6f68:	f241 4314 	movw	r3, #5140	; 0x1414
    6f6c:	f012 ff43 	bl	19df6 <printk>
    6f70:	4040      	eors	r0, r0
    6f72:	f380 8811 	msr	BASEPRI, r0
    6f76:	f04f 0003 	mov.w	r0, #3
    6f7a:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    6f7c:	4a09      	ldr	r2, [pc, #36]	; (6fa4 <bt_recv+0xf0>)
    6f7e:	7828      	ldrb	r0, [r5, #0]
    6f80:	2306      	movs	r3, #6
    6f82:	4621      	mov	r1, r4
    6f84:	f014 feb4 	bl	1bcf0 <handle_event>
    6f88:	e7ba      	b.n	6f00 <bt_recv+0x4c>
		net_buf_unref(buf);
    6f8a:	f00f ff39 	bl	16e00 <net_buf_unref>
		return -EINVAL;
    6f8e:	f06f 0015 	mvn.w	r0, #21
    6f92:	e7ca      	b.n	6f2a <bt_recv+0x76>
    6f94:	00020bc7 	.word	0x00020bc7
    6f98:	00020c45 	.word	0x00020c45
    6f9c:	00020c04 	.word	0x00020c04
    6fa0:	00020c77 	.word	0x00020c77
    6fa4:	0001fa04 	.word	0x0001fa04

00006fa8 <bt_recv_prio>:
{
    6fa8:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6faa:	7d03      	ldrb	r3, [r0, #20]
    6fac:	2b01      	cmp	r3, #1
{
    6fae:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6fb0:	d00c      	beq.n	6fcc <bt_recv_prio+0x24>
    6fb2:	4a09      	ldr	r2, [pc, #36]	; (6fd8 <bt_recv_prio+0x30>)
    6fb4:	4909      	ldr	r1, [pc, #36]	; (6fdc <bt_recv_prio+0x34>)
    6fb6:	480a      	ldr	r0, [pc, #40]	; (6fe0 <bt_recv_prio+0x38>)
    6fb8:	f641 1323 	movw	r3, #6435	; 0x1923
    6fbc:	f012 ff1b 	bl	19df6 <printk>
    6fc0:	4040      	eors	r0, r0
    6fc2:	f380 8811 	msr	BASEPRI, r0
    6fc6:	f04f 0003 	mov.w	r0, #3
    6fca:	df02      	svc	2
	hci_event_prio(buf);
    6fcc:	4620      	mov	r0, r4
    6fce:	f7ff ff1f 	bl	6e10 <hci_event_prio>
}
    6fd2:	2000      	movs	r0, #0
    6fd4:	bd10      	pop	{r4, pc}
    6fd6:	bf00      	nop
    6fd8:	00020bc7 	.word	0x00020bc7
    6fdc:	00020ca5 	.word	0x00020ca5
    6fe0:	00020c04 	.word	0x00020c04

00006fe4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    6fe4:	4a08      	ldr	r2, [pc, #32]	; (7008 <bt_hci_driver_register+0x24>)
{
    6fe6:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    6fe8:	f8d2 0124 	ldr.w	r0, [r2, #292]	; 0x124
    6fec:	b930      	cbnz	r0, 6ffc <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    6fee:	68d9      	ldr	r1, [r3, #12]
    6ff0:	b139      	cbz	r1, 7002 <bt_hci_driver_register+0x1e>
    6ff2:	6919      	ldr	r1, [r3, #16]
    6ff4:	b129      	cbz	r1, 7002 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    6ff6:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
	return 0;
    6ffa:	4770      	bx	lr
		return -EALREADY;
    6ffc:	f06f 0044 	mvn.w	r0, #68	; 0x44
    7000:	4770      	bx	lr
		return -EINVAL;
    7002:	f06f 0015 	mvn.w	r0, #21
}
    7006:	4770      	bx	lr
    7008:	20000000 	.word	0x20000000

0000700c <bt_finalize_init>:
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    700c:	4801      	ldr	r0, [pc, #4]	; (7014 <bt_finalize_init+0x8>)
    700e:	2102      	movs	r1, #2
    7010:	f014 beec 	b.w	1bdec <atomic_or>
    7014:	20000098 	.word	0x20000098

00007018 <init_work>:
{
    7018:	b510      	push	{r4, lr}
	err = bt_init();
    701a:	f7f9 fe09 	bl	c30 <bt_init>
	if (ready_cb) {
    701e:	4b03      	ldr	r3, [pc, #12]	; (702c <init_work+0x14>)
    7020:	681b      	ldr	r3, [r3, #0]
    7022:	b113      	cbz	r3, 702a <init_work+0x12>
}
    7024:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    7028:	4718      	bx	r3
}
    702a:	bd10      	pop	{r4, pc}
    702c:	200014ac 	.word	0x200014ac

00007030 <bt_enable>:
{
    7030:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    7032:	4d26      	ldr	r5, [pc, #152]	; (70cc <bt_enable+0x9c>)
    7034:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
{
    7038:	b088      	sub	sp, #32
    703a:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    703c:	2b00      	cmp	r3, #0
    703e:	d03e      	beq.n	70be <bt_enable+0x8e>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    7040:	2100      	movs	r1, #0
    7042:	f105 0098 	add.w	r0, r5, #152	; 0x98
    7046:	f014 fee0 	bl	1be0a <atomic_test_and_set_bit>
    704a:	2800      	cmp	r0, #0
    704c:	d13a      	bne.n	70c4 <bt_enable+0x94>
		err = bt_settings_init();
    704e:	f014 fde9 	bl	1bc24 <bt_settings_init>
		if (err) {
    7052:	4604      	mov	r4, r0
    7054:	bb80      	cbnz	r0, 70b8 <bt_enable+0x88>
	ready_cb = cb;
    7056:	4b1e      	ldr	r3, [pc, #120]	; (70d0 <bt_enable+0xa0>)
    7058:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    705a:	2200      	movs	r2, #0
    705c:	2300      	movs	r3, #0
    705e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    7062:	f06f 0308 	mvn.w	r3, #8
    7066:	e9cd 0302 	strd	r0, r3, [sp, #8]
    706a:	e9cd 0000 	strd	r0, r0, [sp]
    706e:	9004      	str	r0, [sp, #16]
    7070:	4b18      	ldr	r3, [pc, #96]	; (70d4 <bt_enable+0xa4>)
    7072:	4919      	ldr	r1, [pc, #100]	; (70d8 <bt_enable+0xa8>)
    7074:	4819      	ldr	r0, [pc, #100]	; (70dc <bt_enable+0xac>)
    7076:	f44f 7220 	mov.w	r2, #640	; 0x280
    707a:	f012 fa21 	bl	194c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    707e:	4918      	ldr	r1, [pc, #96]	; (70e0 <bt_enable+0xb0>)
    7080:	4816      	ldr	r0, [pc, #88]	; (70dc <bt_enable+0xac>)
    7082:	f017 ff35 	bl	1eef0 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    7086:	f7fe fe43 	bl	5d10 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    708a:	f8d5 3124 	ldr.w	r3, [r5, #292]	; 0x124
    708e:	68db      	ldr	r3, [r3, #12]
    7090:	4798      	blx	r3
	if (err) {
    7092:	4604      	mov	r4, r0
    7094:	b980      	cbnz	r0, 70b8 <bt_enable+0x88>
	if (!cb) {
    7096:	b926      	cbnz	r6, 70a2 <bt_enable+0x72>
}
    7098:	b008      	add	sp, #32
    709a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    709e:	f7f9 bdc7 	b.w	c30 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    70a2:	4601      	mov	r1, r0
    70a4:	f105 0094 	add.w	r0, r5, #148	; 0x94
    70a8:	f014 feaf 	bl	1be0a <atomic_test_and_set_bit>
    70ac:	b920      	cbnz	r0, 70b8 <bt_enable+0x88>
		k_queue_append(&work_q->queue, work);
    70ae:	480d      	ldr	r0, [pc, #52]	; (70e4 <bt_enable+0xb4>)
    70b0:	f105 018c 	add.w	r1, r5, #140	; 0x8c
    70b4:	f017 fdca 	bl	1ec4c <k_queue_append>
}
    70b8:	4620      	mov	r0, r4
    70ba:	b008      	add	sp, #32
    70bc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
    70be:	f06f 0412 	mvn.w	r4, #18
    70c2:	e7f9      	b.n	70b8 <bt_enable+0x88>
		return -EALREADY;
    70c4:	f06f 0444 	mvn.w	r4, #68	; 0x44
    70c8:	e7f6      	b.n	70b8 <bt_enable+0x88>
    70ca:	bf00      	nop
    70cc:	20000000 	.word	0x20000000
    70d0:	200014ac 	.word	0x200014ac
    70d4:	0000641d 	.word	0x0000641d
    70d8:	20003010 	.word	0x20003010
    70dc:	20000cf0 	.word	0x20000cf0
    70e0:	00020cc8 	.word	0x00020cc8
    70e4:	20001348 	.word	0x20001348

000070e8 <bt_get_name>:
}
    70e8:	4800      	ldr	r0, [pc, #0]	; (70ec <bt_get_name+0x4>)
    70ea:	4770      	bx	lr
    70ec:	0002095f 	.word	0x0002095f

000070f0 <bt_id_create>:
{
    70f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    70f2:	460e      	mov	r6, r1
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    70f4:	4605      	mov	r5, r0
    70f6:	b930      	cbnz	r0, 7106 <bt_id_create+0x16>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    70f8:	4b16      	ldr	r3, [pc, #88]	; (7154 <bt_id_create+0x64>)
    70fa:	79dc      	ldrb	r4, [r3, #7]
    70fc:	2c01      	cmp	r4, #1
    70fe:	d120      	bne.n	7142 <bt_id_create+0x52>
		return -ENOMEM;
    7100:	f06f 040b 	mvn.w	r4, #11
    7104:	e017      	b.n	7136 <bt_id_create+0x46>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    7106:	2300      	movs	r3, #0
    7108:	4669      	mov	r1, sp
    710a:	9300      	str	r3, [sp, #0]
    710c:	f8cd 3003 	str.w	r3, [sp, #3]
    7110:	f014 fe1f 	bl	1bd52 <bt_addr_le_cmp>
    7114:	2800      	cmp	r0, #0
    7116:	d0ef      	beq.n	70f8 <bt_id_create+0x8>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    7118:	782b      	ldrb	r3, [r5, #0]
    711a:	2b01      	cmp	r3, #1
    711c:	d10e      	bne.n	713c <bt_id_create+0x4c>
    711e:	79ab      	ldrb	r3, [r5, #6]
    7120:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    7124:	2bc0      	cmp	r3, #192	; 0xc0
    7126:	d109      	bne.n	713c <bt_id_create+0x4c>
		if (id_find(addr) >= 0) {
    7128:	4628      	mov	r0, r5
    712a:	f7fe ff5f 	bl	5fec <id_find>
    712e:	2800      	cmp	r0, #0
    7130:	dbe2      	blt.n	70f8 <bt_id_create+0x8>
			return -EALREADY;
    7132:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    7136:	4620      	mov	r0, r4
    7138:	b002      	add	sp, #8
    713a:	bd70      	pop	{r4, r5, r6, pc}
			return -EINVAL;
    713c:	f06f 0415 	mvn.w	r4, #21
    7140:	e7f9      	b.n	7136 <bt_id_create+0x46>
	new_id = bt_dev.id_count++;
    7142:	1c62      	adds	r2, r4, #1
    7144:	71da      	strb	r2, [r3, #7]
	id_create(new_id, addr, irk);
    7146:	4629      	mov	r1, r5
    7148:	4632      	mov	r2, r6
    714a:	4620      	mov	r0, r4
    714c:	f7ff fe08 	bl	6d60 <id_create>
	return new_id;
    7150:	e7f1      	b.n	7136 <bt_id_create+0x46>
    7152:	bf00      	nop
    7154:	20000000 	.word	0x20000000

00007158 <bt_setup_public_id_addr>:
{
    7158:	b570      	push	{r4, r5, r6, lr}
    715a:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    715c:	aa01      	add	r2, sp, #4
    715e:	2100      	movs	r1, #0
    7160:	f241 0009 	movw	r0, #4105	; 0x1009
    7164:	f7ff fa5c 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    7168:	4e2d      	ldr	r6, [pc, #180]	; (7220 <bt_setup_public_id_addr+0xc8>)
    716a:	4604      	mov	r4, r0
    716c:	b118      	cbz	r0, 7176 <bt_setup_public_id_addr+0x1e>
	bt_dev.id_count = bt_read_public_addr(&addr);
    716e:	2300      	movs	r3, #0
    7170:	71f3      	strb	r3, [r6, #7]
}
    7172:	b00c      	add	sp, #48	; 0x30
    7174:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    7176:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    7178:	689d      	ldr	r5, [r3, #8]
    717a:	9008      	str	r0, [sp, #32]
    717c:	3501      	adds	r5, #1
    717e:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    7182:	2206      	movs	r2, #6
    7184:	a908      	add	r1, sp, #32
    7186:	4628      	mov	r0, r5
    7188:	f014 fc3f 	bl	1ba0a <memcmp>
    718c:	b918      	cbnz	r0, 7196 <bt_setup_public_id_addr+0x3e>
		net_buf_unref(rsp);
    718e:	9801      	ldr	r0, [sp, #4]
    7190:	f00f fe36 	bl	16e00 <net_buf_unref>
    7194:	e7eb      	b.n	716e <bt_setup_public_id_addr+0x16>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    7196:	4b23      	ldr	r3, [pc, #140]	; (7224 <bt_setup_public_id_addr+0xcc>)
    7198:	6818      	ldr	r0, [r3, #0]
    719a:	9004      	str	r0, [sp, #16]
    719c:	889b      	ldrh	r3, [r3, #4]
    719e:	f8ad 3014 	strh.w	r3, [sp, #20]
    71a2:	2206      	movs	r2, #6
    71a4:	a904      	add	r1, sp, #16
    71a6:	4628      	mov	r0, r5
    71a8:	f014 fc2f 	bl	1ba0a <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    71ac:	2800      	cmp	r0, #0
    71ae:	d0ee      	beq.n	718e <bt_setup_public_id_addr+0x36>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    71b0:	4629      	mov	r1, r5
    71b2:	f10d 0009 	add.w	r0, sp, #9
    71b6:	f014 fdcf 	bl	1bd58 <bt_addr_copy>
	net_buf_unref(rsp);
    71ba:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    71bc:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    71c0:	f00f fe1e 	bl	16e00 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    71c4:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    71c6:	2210      	movs	r2, #16
    71c8:	4621      	mov	r1, r4
    71ca:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    71cc:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    71ce:	f014 fc57 	bl	1ba80 <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    71d2:	f896 308a 	ldrb.w	r3, [r6, #138]	; 0x8a
    71d6:	079b      	lsls	r3, r3, #30
    71d8:	d510      	bpl.n	71fc <bt_setup_public_id_addr+0xa4>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    71da:	aa04      	add	r2, sp, #16
    71dc:	4621      	mov	r1, r4
    71de:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    71e2:	f7ff fa1d 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    71e6:	b948      	cbnz	r0, 71fc <bt_setup_public_id_addr+0xa4>
	rp = (void *)rsp->data;
    71e8:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    71ea:	6899      	ldr	r1, [r3, #8]
    71ec:	2210      	movs	r2, #16
    71ee:	3101      	adds	r1, #1
    71f0:	a808      	add	r0, sp, #32
    71f2:	f014 fc1a 	bl	1ba2a <memcpy>
	net_buf_unref(rsp);
    71f6:	9804      	ldr	r0, [sp, #16]
    71f8:	f00f fe02 	bl	16e00 <net_buf_unref>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    71fc:	a904      	add	r1, sp, #16
    71fe:	a808      	add	r0, sp, #32
    7200:	f017 f882 	bl	1e308 <bt_smp_irk_get>
    7204:	b150      	cbz	r0, 721c <bt_setup_public_id_addr+0xc4>
    7206:	4808      	ldr	r0, [pc, #32]	; (7228 <bt_setup_public_id_addr+0xd0>)
    7208:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    720c:	f014 fdee 	bl	1bdec <atomic_or>
	uint8_t *irk = NULL;
    7210:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    7212:	a902      	add	r1, sp, #8
    7214:	2000      	movs	r0, #0
    7216:	f7ff fda3 	bl	6d60 <id_create>
    721a:	e7aa      	b.n	7172 <bt_setup_public_id_addr+0x1a>
		irk = ir_irk;
    721c:	aa04      	add	r2, sp, #16
    721e:	e7f8      	b.n	7212 <bt_setup_public_id_addr+0xba>
    7220:	20000000 	.word	0x20000000
    7224:	0001f6a9 	.word	0x0001f6a9
    7228:	20000098 	.word	0x20000098

0000722c <bt_read_static_addr>:
{
    722c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    7230:	4b15      	ldr	r3, [pc, #84]	; (7288 <bt_read_static_addr+0x5c>)
    7232:	f893 408a 	ldrb.w	r4, [r3, #138]	; 0x8a
    7236:	f014 0401 	ands.w	r4, r4, #1
{
    723a:	4607      	mov	r7, r0
    723c:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    723e:	d015      	beq.n	726c <bt_read_static_addr+0x40>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    7240:	aa01      	add	r2, sp, #4
    7242:	2100      	movs	r1, #0
    7244:	f64f 4009 	movw	r0, #64521	; 0xfc09
    7248:	f7ff f9ea 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    724c:	4605      	mov	r5, r0
    724e:	b9c8      	cbnz	r0, 7284 <bt_read_static_addr+0x58>
	rp = (void *)rsp->data;
    7250:	9b01      	ldr	r3, [sp, #4]
    7252:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    7254:	785c      	ldrb	r4, [r3, #1]
    7256:	42b4      	cmp	r4, r6
    7258:	bf28      	it	cs
    725a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    725c:	f04f 0816 	mov.w	r8, #22
    7260:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    7262:	42a5      	cmp	r5, r4
    7264:	db06      	blt.n	7274 <bt_read_static_addr+0x48>
	net_buf_unref(rsp);
    7266:	9801      	ldr	r0, [sp, #4]
    7268:	f00f fdca 	bl	16e00 <net_buf_unref>
}
    726c:	4620      	mov	r0, r4
    726e:	b002      	add	sp, #8
    7270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    7274:	fb08 7005 	mla	r0, r8, r5, r7
    7278:	2216      	movs	r2, #22
    727a:	4631      	mov	r1, r6
    727c:	f014 fbd5 	bl	1ba2a <memcpy>
	for (i = 0; i < cnt; i++) {
    7280:	3501      	adds	r5, #1
    7282:	e7ee      	b.n	7262 <bt_read_static_addr+0x36>
		return 0;
    7284:	2400      	movs	r4, #0
    7286:	e7f1      	b.n	726c <bt_read_static_addr+0x40>
    7288:	20000000 	.word	0x20000000

0000728c <bt_setup_random_id_addr>:
{
    728c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    7290:	4c21      	ldr	r4, [pc, #132]	; (7318 <bt_setup_random_id_addr+0x8c>)
    7292:	79e5      	ldrb	r5, [r4, #7]
{
    7294:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    7296:	bba5      	cbnz	r5, 7302 <bt_setup_random_id_addr+0x76>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    7298:	2101      	movs	r1, #1
    729a:	a806      	add	r0, sp, #24
    729c:	f7ff ffc6 	bl	722c <bt_read_static_addr>
    72a0:	71e0      	strb	r0, [r4, #7]
		if (bt_dev.id_count) {
    72a2:	b370      	cbz	r0, 7302 <bt_setup_random_id_addr+0x76>
    72a4:	f04f 0916 	mov.w	r9, #22
    72a8:	f104 0a98 	add.w	sl, r4, #152	; 0x98
    72ac:	e01f      	b.n	72ee <bt_setup_random_id_addr+0x62>
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    72ae:	fb09 f806 	mul.w	r8, r9, r6
    72b2:	f108 0006 	add.w	r0, r8, #6
    72b6:	ab06      	add	r3, sp, #24
    72b8:	a902      	add	r1, sp, #8
    72ba:	4418      	add	r0, r3
    72bc:	f017 f824 	bl	1e308 <bt_smp_irk_get>
    72c0:	b1e8      	cbz	r0, 72fe <bt_setup_random_id_addr+0x72>
    72c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    72c6:	4650      	mov	r0, sl
    72c8:	f014 fd90 	bl	1bdec <atomic_or>
				uint8_t *irk = NULL;
    72cc:	2700      	movs	r7, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    72ce:	ab06      	add	r3, sp, #24
    72d0:	eb03 0108 	add.w	r1, r3, r8
    72d4:	f10d 0001 	add.w	r0, sp, #1
    72d8:	f014 fd3e 	bl	1bd58 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    72dc:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    72de:	463a      	mov	r2, r7
    72e0:	4669      	mov	r1, sp
    72e2:	4630      	mov	r0, r6
				addr.type = BT_ADDR_LE_RANDOM;
    72e4:	f88d 3000 	strb.w	r3, [sp]
				id_create(i, &addr, irk);
    72e8:	f7ff fd3a 	bl	6d60 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    72ec:	3501      	adds	r5, #1
    72ee:	79e3      	ldrb	r3, [r4, #7]
    72f0:	b2ee      	uxtb	r6, r5
    72f2:	42b3      	cmp	r3, r6
    72f4:	d8db      	bhi.n	72ae <bt_setup_random_id_addr+0x22>
			return 0;
    72f6:	2000      	movs	r0, #0
}
    72f8:	b00c      	add	sp, #48	; 0x30
    72fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    72fe:	af02      	add	r7, sp, #8
    7300:	e7e5      	b.n	72ce <bt_setup_random_id_addr+0x42>
    7302:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    7306:	4805      	ldr	r0, [pc, #20]	; (731c <bt_setup_random_id_addr+0x90>)
    7308:	f014 fd70 	bl	1bdec <atomic_or>
	return bt_id_create(NULL, NULL);
    730c:	2100      	movs	r1, #0
    730e:	4608      	mov	r0, r1
    7310:	f7ff feee 	bl	70f0 <bt_id_create>
    7314:	e7f0      	b.n	72f8 <bt_setup_random_id_addr+0x6c>
    7316:	bf00      	nop
    7318:	20000000 	.word	0x20000000
    731c:	20000098 	.word	0x20000098

00007320 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    7320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7324:	b08d      	sub	sp, #52	; 0x34
    7326:	4605      	mov	r5, r0
    7328:	469a      	mov	sl, r3
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    732a:	487c      	ldr	r0, [pc, #496]	; (751c <bt_le_adv_start_legacy+0x1fc>)
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    732c:	690e      	ldr	r6, [r1, #16]
	struct bt_conn *conn = NULL;
    732e:	2300      	movs	r3, #0
{
    7330:	460c      	mov	r4, r1
    7332:	4691      	mov	r9, r2
	struct bt_conn *conn = NULL;
    7334:	9305      	str	r3, [sp, #20]
    7336:	f014 fcff 	bl	1bd38 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    733a:	0780      	lsls	r0, r0, #30
    733c:	f140 80df 	bpl.w	74fe <bt_le_adv_start_legacy+0x1de>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    7340:	4608      	mov	r0, r1
    7342:	f7fe fe6b 	bl	601c <valid_adv_param>
    7346:	4607      	mov	r7, r0
    7348:	2800      	cmp	r0, #0
    734a:	f000 80db 	beq.w	7504 <bt_le_adv_start_legacy+0x1e4>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    734e:	f105 0814 	add.w	r8, r5, #20
    7352:	2106      	movs	r1, #6
    7354:	4640      	mov	r0, r8
    7356:	f014 fcf5 	bl	1bd44 <atomic_test_bit>
    735a:	4683      	mov	fp, r0
    735c:	2800      	cmp	r0, #0
    735e:	f040 80d4 	bne.w	750a <bt_le_adv_start_legacy+0x1ea>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    7362:	220f      	movs	r2, #15
    7364:	4601      	mov	r1, r0
    7366:	a808      	add	r0, sp, #32
    7368:	f014 fb8a 	bl	1ba80 <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    736c:	68a3      	ldr	r3, [r4, #8]
    736e:	f8ad 3020 	strh.w	r3, [sp, #32]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    7372:	68e3      	ldr	r3, [r4, #12]
    7374:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
	set_param.channel_map  = 0x07;
    7378:	2307      	movs	r3, #7
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    737a:	782a      	ldrb	r2, [r5, #0]
	set_param.channel_map  = 0x07;
    737c:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
	if (adv->id != param->id) {
    7380:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    7382:	f88d b02e 	strb.w	fp, [sp, #46]	; 0x2e
	if (adv->id != param->id) {
    7386:	429a      	cmp	r2, r3
    7388:	d004      	beq.n	7394 <bt_le_adv_start_legacy+0x74>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    738a:	4864      	ldr	r0, [pc, #400]	; (751c <bt_le_adv_start_legacy+0x1fc>)
    738c:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    7390:	f014 fcc3 	bl	1bd1a <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    7394:	4b62      	ldr	r3, [pc, #392]	; (7520 <bt_le_adv_start_legacy+0x200>)
	adv->id = param->id;
    7396:	7820      	ldrb	r0, [r4, #0]
    7398:	7028      	strb	r0, [r5, #0]
	bt_dev.adv_conn_id = adv->id;
    739a:	f883 0037 	strb.w	r0, [r3, #55]	; 0x37

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    739e:	6861      	ldr	r1, [r4, #4]
    73a0:	f10d 0225 	add.w	r2, sp, #37	; 0x25
    73a4:	f7ff fa02 	bl	67ac <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    73a8:	4683      	mov	fp, r0
    73aa:	2800      	cmp	r0, #0
    73ac:	d166      	bne.n	747c <bt_le_adv_start_legacy+0x15c>
		return err;
	}

	if (dir_adv) {
    73ae:	f105 000b 	add.w	r0, r5, #11
    73b2:	2e00      	cmp	r6, #0
    73b4:	d03f      	beq.n	7436 <bt_le_adv_start_legacy+0x116>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    73b6:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    73b8:	f014 fcd1 	bl	1bd5e <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    73bc:	6860      	ldr	r0, [r4, #4]
    73be:	07c1      	lsls	r1, r0, #31
    73c0:	d541      	bpl.n	7446 <bt_le_adv_start_legacy+0x126>
		scannable = true;

		if (dir_adv) {
    73c2:	2e00      	cmp	r6, #0
    73c4:	d03c      	beq.n	7440 <bt_le_adv_start_legacy+0x120>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    73c6:	f010 0f10 	tst.w	r0, #16
    73ca:	bf14      	ite	ne
    73cc:	2304      	movne	r3, #4
    73ce:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    73d0:	6921      	ldr	r1, [r4, #16]
    73d2:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    73d6:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    73da:	f014 fcc0 	bl	1bd5e <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    73de:	210f      	movs	r1, #15
    73e0:	f242 0006 	movw	r0, #8198	; 0x2006
    73e4:	f7ff f8c2 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
    73e8:	4683      	mov	fp, r0
    73ea:	2800      	cmp	r0, #0
    73ec:	f000 8090 	beq.w	7510 <bt_le_adv_start_legacy+0x1f0>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));
    73f0:	220f      	movs	r2, #15
    73f2:	a908      	add	r1, sp, #32
    73f4:	3008      	adds	r0, #8
    73f6:	f017 f8d3 	bl	1e5a0 <net_buf_simple_add_mem>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    73fa:	2200      	movs	r2, #0
    73fc:	4659      	mov	r1, fp
    73fe:	f242 0006 	movw	r0, #8198	; 0x2006
    7402:	f7ff f90d 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    7406:	2800      	cmp	r0, #0
    7408:	f040 8085 	bne.w	7516 <bt_le_adv_start_legacy+0x1f6>
		return err;
	}

	if (!dir_adv) {
    740c:	b336      	cbz	r6, 745c <bt_le_adv_start_legacy+0x13c>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    740e:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7410:	07da      	lsls	r2, r3, #31
    7412:	d437      	bmi.n	7484 <bt_le_adv_start_legacy+0x164>
	return set_le_adv_enable_legacy(adv, enable);
    7414:	2101      	movs	r1, #1
    7416:	4628      	mov	r0, r5
    7418:	f7ff fa0a 	bl	6830 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    741c:	4683      	mov	fp, r0
    741e:	9805      	ldr	r0, [sp, #20]
    7420:	f1bb 0f00 	cmp.w	fp, #0
    7424:	d065      	beq.n	74f2 <bt_le_adv_start_legacy+0x1d2>
		BT_ERR("Failed to start advertiser");
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    7426:	b348      	cbz	r0, 747c <bt_le_adv_start_legacy+0x15c>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7428:	2100      	movs	r1, #0
    742a:	f000 fd4f 	bl	7ecc <bt_conn_set_state>
			bt_conn_unref(conn);
    742e:	9805      	ldr	r0, [sp, #20]
    7430:	f015 f92d 	bl	1c68e <bt_conn_unref>
    7434:	e022      	b.n	747c <bt_le_adv_start_legacy+0x15c>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    7436:	9606      	str	r6, [sp, #24]
    7438:	a906      	add	r1, sp, #24
    743a:	f8cd 601b 	str.w	r6, [sp, #27]
    743e:	e7bb      	b.n	73b8 <bt_le_adv_start_legacy+0x98>
			set_param.type = BT_HCI_ADV_IND;
    7440:	f88d 6024 	strb.w	r6, [sp, #36]	; 0x24
    7444:	e7cb      	b.n	73de <bt_le_adv_start_legacy+0xbe>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    7446:	9b16      	ldr	r3, [sp, #88]	; 0x58
    7448:	b933      	cbnz	r3, 7458 <bt_le_adv_start_legacy+0x138>
    744a:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    744e:	f1c7 0303 	rsb	r3, r7, #3
    7452:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
    7456:	e7c2      	b.n	73de <bt_le_adv_start_legacy+0xbe>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    7458:	2701      	movs	r7, #1
    745a:	e7f8      	b.n	744e <bt_le_adv_start_legacy+0x12e>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    745c:	6863      	ldr	r3, [r4, #4]
    745e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    7462:	e9cd 7301 	strd	r7, r3, [sp, #4]
    7466:	9b17      	ldr	r3, [sp, #92]	; 0x5c
    7468:	9300      	str	r3, [sp, #0]
    746a:	4652      	mov	r2, sl
    746c:	9b16      	ldr	r3, [sp, #88]	; 0x58
    746e:	4649      	mov	r1, r9
    7470:	4628      	mov	r0, r5
    7472:	f7ff fa8d 	bl	6990 <le_adv_update.constprop.0>
		if (err) {
    7476:	4683      	mov	fp, r0
    7478:	2800      	cmp	r0, #0
    747a:	d0c8      	beq.n	740e <bt_le_adv_start_legacy+0xee>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    747c:	4658      	mov	r0, fp
    747e:	b00d      	add	sp, #52	; 0x34
    7480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    7484:	a905      	add	r1, sp, #20
    7486:	4628      	mov	r0, r5
    7488:	f7fe fea4 	bl	61d4 <le_adv_start_add_conn>
		if (err) {
    748c:	4683      	mov	fp, r0
    748e:	2800      	cmp	r0, #0
    7490:	d0c0      	beq.n	7414 <bt_le_adv_start_legacy+0xf4>
			if (err == -ENOMEM && !dir_adv &&
    7492:	f110 0f0c 	cmn.w	r0, #12
    7496:	d1f1      	bne.n	747c <bt_le_adv_start_legacy+0x15c>
    7498:	2e00      	cmp	r6, #0
    749a:	d1ef      	bne.n	747c <bt_le_adv_start_legacy+0x15c>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    749c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    749e:	079b      	lsls	r3, r3, #30
    74a0:	d4ec      	bmi.n	747c <bt_le_adv_start_legacy+0x15c>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    74a2:	6862      	ldr	r2, [r4, #4]
    74a4:	f082 0202 	eor.w	r2, r2, #2
    74a8:	f3c2 0b40 	ubfx	fp, r2, #1, #1
    74ac:	f00b 0201 	and.w	r2, fp, #1
    74b0:	210c      	movs	r1, #12
    74b2:	4640      	mov	r0, r8
    74b4:	f014 fcb4 	bl	1be20 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    74b8:	6862      	ldr	r2, [r4, #4]
    74ba:	2107      	movs	r1, #7
    74bc:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    74c0:	4640      	mov	r0, r8
    74c2:	f014 fcad 	bl	1be20 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    74c6:	6862      	ldr	r2, [r4, #4]
    74c8:	2108      	movs	r1, #8
    74ca:	f002 0201 	and.w	r2, r2, #1
    74ce:	4640      	mov	r0, r8
    74d0:	f014 fca6 	bl	1be20 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    74d4:	463a      	mov	r2, r7
    74d6:	2109      	movs	r1, #9
    74d8:	4640      	mov	r0, r8
    74da:	f014 fca1 	bl	1be20 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    74de:	6862      	ldr	r2, [r4, #4]
    74e0:	210b      	movs	r1, #11
    74e2:	f3c2 0280 	ubfx	r2, r2, #2, #1
    74e6:	4640      	mov	r0, r8
    74e8:	f014 fc9a 	bl	1be20 <atomic_set_bit_to>
	return 0;
    74ec:	f04f 0b00 	mov.w	fp, #0
    74f0:	e7c4      	b.n	747c <bt_le_adv_start_legacy+0x15c>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    74f2:	b108      	cbz	r0, 74f8 <bt_le_adv_start_legacy+0x1d8>
		bt_conn_unref(conn);
    74f4:	f015 f8cb 	bl	1c68e <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    74f8:	2e00      	cmp	r6, #0
    74fa:	d1d7      	bne.n	74ac <bt_le_adv_start_legacy+0x18c>
    74fc:	e7d1      	b.n	74a2 <bt_le_adv_start_legacy+0x182>
		return -EAGAIN;
    74fe:	f06f 0b0a 	mvn.w	fp, #10
    7502:	e7bb      	b.n	747c <bt_le_adv_start_legacy+0x15c>
		return -EINVAL;
    7504:	f06f 0b15 	mvn.w	fp, #21
    7508:	e7b8      	b.n	747c <bt_le_adv_start_legacy+0x15c>
		return -EALREADY;
    750a:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    750e:	e7b5      	b.n	747c <bt_le_adv_start_legacy+0x15c>
		return -ENOBUFS;
    7510:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    7514:	e7b2      	b.n	747c <bt_le_adv_start_legacy+0x15c>
    7516:	4683      	mov	fp, r0
    7518:	e7b0      	b.n	747c <bt_le_adv_start_legacy+0x15c>
    751a:	bf00      	nop
    751c:	20000098 	.word	0x20000098
    7520:	20000000 	.word	0x20000000

00007524 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    7524:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    7526:	9c04      	ldr	r4, [sp, #16]
    7528:	e9cd 3400 	strd	r3, r4, [sp]
    752c:	4613      	mov	r3, r2
    752e:	460a      	mov	r2, r1
    7530:	4601      	mov	r1, r0
    7532:	4802      	ldr	r0, [pc, #8]	; (753c <bt_le_adv_start+0x18>)
    7534:	f7ff fef4 	bl	7320 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    7538:	b002      	add	sp, #8
    753a:	bd10      	pop	{r4, pc}
    753c:	20000018 	.word	0x20000018

00007540 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    7540:	b530      	push	{r4, r5, lr}
    7542:	4c22      	ldr	r4, [pc, #136]	; (75cc <bt_le_adv_stop+0x8c>)
    7544:	b085      	sub	sp, #20
    7546:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    754a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    754e:	f014 fbe4 	bl	1bd1a <atomic_and>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7552:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7556:	f014 fbef 	bl	1bd38 <atomic_get>
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(adv->flags, BT_ADV_PERSIST);

	if (!atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    755a:	0642      	lsls	r2, r0, #25
    755c:	f3c0 1380 	ubfx	r3, r0, #6, #1
    7560:	d531      	bpl.n	75c6 <bt_le_adv_stop+0x86>
    7562:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7566:	f014 fbe7 	bl	1bd38 <atomic_get>
		 */
		adv_delete_legacy();
		return 0;
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    756a:	05c3      	lsls	r3, r0, #23
    756c:	d521      	bpl.n	75b2 <bt_le_adv_stop+0x72>
	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    756e:	2300      	movs	r3, #0
    7570:	4669      	mov	r1, sp
    7572:	f104 0023 	add.w	r0, r4, #35	; 0x23
    7576:	9300      	str	r3, [sp, #0]
    7578:	f8cd 3003 	str.w	r3, [sp, #3]
    757c:	f014 fbe9 	bl	1bd52 <bt_addr_le_cmp>
    7580:	7e25      	ldrb	r5, [r4, #24]
    7582:	b9e0      	cbnz	r0, 75be <bt_le_adv_stop+0x7e>
		conn = bt_conn_lookup_state_le(adv->id, BT_ADDR_LE_NONE,
    7584:	4b12      	ldr	r3, [pc, #72]	; (75d0 <bt_le_adv_stop+0x90>)
    7586:	889a      	ldrh	r2, [r3, #4]
    7588:	6818      	ldr	r0, [r3, #0]
    758a:	799b      	ldrb	r3, [r3, #6]
    758c:	f8ad 200c 	strh.w	r2, [sp, #12]
    7590:	9002      	str	r0, [sp, #8]
    7592:	f88d 300e 	strb.w	r3, [sp, #14]
    7596:	2204      	movs	r2, #4
    7598:	a902      	add	r1, sp, #8
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    759a:	4628      	mov	r0, r5
    759c:	f000 fc70 	bl	7e80 <bt_conn_lookup_state_le>
    75a0:	4604      	mov	r4, r0
	if (conn) {
    75a2:	b130      	cbz	r0, 75b2 <bt_le_adv_stop+0x72>
		conn->err = status;
    75a4:	2100      	movs	r1, #0
    75a6:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    75a8:	f000 fc90 	bl	7ecc <bt_conn_set_state>
		bt_conn_unref(conn);
    75ac:	4620      	mov	r0, r4
    75ae:	f015 f86e 	bl	1c68e <bt_conn_unref>
		err = set_le_adv_enable_ext(adv, false, NULL);
		if (err) {
			return err;
		}
	} else {
		err = set_le_adv_enable_legacy(adv, false);
    75b2:	4808      	ldr	r0, [pc, #32]	; (75d4 <bt_le_adv_stop+0x94>)
    75b4:	2100      	movs	r1, #0
    75b6:	f7ff f93b 	bl	6830 <set_le_adv_enable_legacy>
		}
	}
#endif /* defined(CONFIG_BT_OBSERVER) */

	return 0;
}
    75ba:	b005      	add	sp, #20
    75bc:	bd30      	pop	{r4, r5, pc}
		conn = bt_conn_lookup_state_le(adv->id, &adv->target_addr,
    75be:	2205      	movs	r2, #5
    75c0:	f104 0123 	add.w	r1, r4, #35	; 0x23
    75c4:	e7e9      	b.n	759a <bt_le_adv_stop+0x5a>
		return 0;
    75c6:	4618      	mov	r0, r3
    75c8:	e7f7      	b.n	75ba <bt_le_adv_stop+0x7a>
    75ca:	bf00      	nop
    75cc:	20000000 	.word	0x20000000
    75d0:	0001f6a2 	.word	0x0001f6a2
    75d4:	20000018 	.word	0x20000018

000075d8 <bt_le_adv_resume>:

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    75d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    75da:	4c1f      	ldr	r4, [pc, #124]	; (7658 <bt_le_adv_resume+0x80>)
    75dc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    75e0:	f014 fbaa 	bl	1bd38 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    75e4:	04c0      	lsls	r0, r0, #19
    75e6:	d535      	bpl.n	7654 <bt_le_adv_resume+0x7c>
    75e8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    75ec:	f014 fba4 	bl	1bd38 <atomic_get>
    75f0:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    75f2:	f3c0 1580 	ubfx	r5, r0, #6, #1
    75f6:	d42d      	bmi.n	7654 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    75f8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    75fc:	f014 fb9c 	bl	1bd38 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    7600:	05c2      	lsls	r2, r0, #23
    7602:	d527      	bpl.n	7654 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    7604:	a901      	add	r1, sp, #4
    7606:	f104 0018 	add.w	r0, r4, #24
    760a:	f7fe fde3 	bl	61d4 <le_adv_start_add_conn>
	if (err) {
    760e:	bb08      	cbnz	r0, 7654 <bt_le_adv_resume+0x7c>
    7610:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7614:	f014 fb90 	bl	1bd38 <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    7618:	0503      	lsls	r3, r0, #20
    761a:	d402      	bmi.n	7622 <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    761c:	7e20      	ldrb	r0, [r4, #24]
    761e:	f7ff f88f 	bl	6740 <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    7622:	480e      	ldr	r0, [pc, #56]	; (765c <bt_le_adv_resume+0x84>)
    7624:	2101      	movs	r1, #1
    7626:	f7ff f903 	bl	6830 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    762a:	b150      	cbz	r0, 7642 <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    762c:	9801      	ldr	r0, [sp, #4]
    762e:	2100      	movs	r1, #0
    7630:	f000 fc4c 	bl	7ecc <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7634:	480a      	ldr	r0, [pc, #40]	; (7660 <bt_le_adv_resume+0x88>)
    7636:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    763a:	f014 fb6e 	bl	1bd1a <atomic_and>
	return (old & mask) != 0;
    763e:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    7642:	9801      	ldr	r0, [sp, #4]
    7644:	f015 f823 	bl	1c68e <bt_conn_unref>
	if (persist_paused) {
    7648:	b125      	cbz	r5, 7654 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    764a:	4805      	ldr	r0, [pc, #20]	; (7660 <bt_le_adv_resume+0x88>)
    764c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    7650:	f014 fbcc 	bl	1bdec <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    7654:	b003      	add	sp, #12
    7656:	bd30      	pop	{r4, r5, pc}
    7658:	20000000 	.word	0x20000000
    765c:	20000018 	.word	0x20000018
    7660:	2000002c 	.word	0x2000002c

00007664 <enh_conn_complete>:
{
    7664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7668:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    766c:	f8b0 7001 	ldrh.w	r7, [r0, #1]
{
    7670:	b086      	sub	sp, #24
    7672:	4604      	mov	r4, r0
    7674:	485f      	ldr	r0, [pc, #380]	; (77f4 <enh_conn_complete+0x190>)
    7676:	f014 fb50 	bl	1bd1a <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    767a:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    767c:	fa1f f887 	uxth.w	r8, r7
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    7680:	d504      	bpl.n	768c <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    7682:	495d      	ldr	r1, [pc, #372]	; (77f8 <enh_conn_complete+0x194>)
    7684:	2200      	movs	r2, #0
    7686:	2002      	movs	r0, #2
    7688:	f003 fcce 	bl	b028 <bt_keys_foreach>
	if (evt->status) {
    768c:	7825      	ldrb	r5, [r4, #0]
    768e:	b19d      	cbz	r5, 76b8 <enh_conn_complete+0x54>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7690:	2d3c      	cmp	r5, #60	; 0x3c
    7692:	d13d      	bne.n	7710 <enh_conn_complete+0xac>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7694:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7698:	4858      	ldr	r0, [pc, #352]	; (77fc <enh_conn_complete+0x198>)
    769a:	f014 fb3e 	bl	1bd1a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    769e:	2000      	movs	r0, #0
    76a0:	f7fe fd7a 	bl	6198 <find_pending_connect.part.0>
		if (!conn) {
    76a4:	4604      	mov	r4, r0
    76a6:	b398      	cbz	r0, 7710 <enh_conn_complete+0xac>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    76a8:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    76aa:	2100      	movs	r1, #0
    76ac:	f000 fc0e 	bl	7ecc <bt_conn_set_state>
		bt_conn_unref(conn);
    76b0:	4620      	mov	r0, r4
	bt_conn_unref(conn);
    76b2:	f014 ffec 	bl	1c68e <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    76b6:	e02b      	b.n	7710 <enh_conn_complete+0xac>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    76b8:	7923      	ldrb	r3, [r4, #4]
    76ba:	3b02      	subs	r3, #2
    76bc:	2b01      	cmp	r3, #1
    76be:	f104 0604 	add.w	r6, r4, #4
    76c2:	d828      	bhi.n	7716 <enh_conn_complete+0xb2>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    76c4:	4631      	mov	r1, r6
    76c6:	a804      	add	r0, sp, #16
    76c8:	f014 fb49 	bl	1bd5e <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    76cc:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    76d0:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    76d4:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    76d6:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    76da:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    76de:	f014 fb3b 	bl	1bd58 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    76e2:	2301      	movs	r3, #1
    76e4:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    76e8:	78e3      	ldrb	r3, [r4, #3]
    76ea:	2b01      	cmp	r3, #1
    76ec:	d10c      	bne.n	7708 <enh_conn_complete+0xa4>
    76ee:	a804      	add	r0, sp, #16
    76f0:	f7fe fd52 	bl	6198 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    76f4:	78e3      	ldrb	r3, [r4, #3]
    76f6:	2b01      	cmp	r3, #1
    76f8:	4605      	mov	r5, r0
    76fa:	d104      	bne.n	7706 <enh_conn_complete+0xa2>
    76fc:	483f      	ldr	r0, [pc, #252]	; (77fc <enh_conn_complete+0x198>)
    76fe:	f06f 0140 	mvn.w	r1, #64	; 0x40
    7702:	f014 fb0a 	bl	1bd1a <atomic_and>
	if (!conn) {
    7706:	b9cd      	cbnz	r5, 773c <enh_conn_complete+0xd8>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    7708:	211f      	movs	r1, #31
    770a:	4640      	mov	r0, r8
    770c:	f014 fd7e 	bl	1c20c <bt_hci_disconnect>
}
    7710:	b006      	add	sp, #24
    7712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    7716:	78e3      	ldrb	r3, [r4, #3]
    7718:	2b01      	cmp	r3, #1
    771a:	bf04      	itt	eq
    771c:	4b38      	ldreq	r3, [pc, #224]	; (7800 <enh_conn_complete+0x19c>)
    771e:	f893 5037 	ldrbeq.w	r5, [r3, #55]	; 0x37
		bt_addr_le_copy(&id_addr,
    7722:	4631      	mov	r1, r6
    7724:	4628      	mov	r0, r5
    7726:	f014 fd69 	bl	1c1fc <bt_lookup_id_addr>
    772a:	4601      	mov	r1, r0
    772c:	a804      	add	r0, sp, #16
    772e:	f014 fb16 	bl	1bd5e <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    7732:	4631      	mov	r1, r6
    7734:	a802      	add	r0, sp, #8
    7736:	f014 fb12 	bl	1bd5e <bt_addr_le_copy>
    773a:	e7d5      	b.n	76e8 <enh_conn_complete+0x84>
	conn->handle = handle;
    773c:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    773e:	a904      	add	r1, sp, #16
	conn->handle = handle;
    7740:	f820 7b88 	strh.w	r7, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    7744:	f014 fb0b 	bl	1bd5e <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    7748:	7e22      	ldrb	r2, [r4, #24]
    774a:	7de3      	ldrb	r3, [r4, #23]
    774c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7750:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    7754:	7ea2      	ldrb	r2, [r4, #26]
    7756:	7e63      	ldrb	r3, [r4, #25]
    7758:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    775c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    7760:	7ee3      	ldrb	r3, [r4, #27]
    7762:	7f22      	ldrb	r2, [r4, #28]
    7764:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    7768:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    776c:	78e7      	ldrb	r7, [r4, #3]
    776e:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    7770:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7772:	2f01      	cmp	r7, #1
	conn->err = 0U;
    7774:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    7776:	d128      	bne.n	77ca <enh_conn_complete+0x166>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    7778:	4e21      	ldr	r6, [pc, #132]	; (7800 <enh_conn_complete+0x19c>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    777a:	a902      	add	r1, sp, #8
    777c:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    7780:	f014 faed 	bl	1bd5e <bt_addr_le_copy>
    7784:	f106 002c 	add.w	r0, r6, #44	; 0x2c
    7788:	f014 fad6 	bl	1bd38 <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    778c:	0502      	lsls	r2, r0, #20
    778e:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    7792:	d426      	bmi.n	77e2 <enh_conn_complete+0x17e>
				if (bt_addr_cmp(&evt->local_rpa,
    7794:	340b      	adds	r4, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    7796:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
    779a:	2206      	movs	r2, #6
    779c:	4669      	mov	r1, sp
    779e:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
    77a0:	9300      	str	r3, [sp, #0]
    77a2:	f8ad 3004 	strh.w	r3, [sp, #4]
    77a6:	f014 f930 	bl	1ba0a <memcmp>
    77aa:	4603      	mov	r3, r0
    77ac:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    77b0:	b1a3      	cbz	r3, 77dc <enh_conn_complete+0x178>
					bt_addr_copy(&conn->le.resp_addr.a,
    77b2:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    77b4:	f014 fad0 	bl	1bd58 <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    77b8:	f8d6 10ac 	ldr.w	r1, [r6, #172]	; 0xac
    77bc:	2200      	movs	r2, #0
    77be:	f001 0340 	and.w	r3, r1, #64	; 0x40
    77c2:	4313      	orrs	r3, r2
    77c4:	d001      	beq.n	77ca <enh_conn_complete+0x166>
			bt_le_adv_resume();
    77c6:	f7ff ff07 	bl	75d8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    77ca:	2107      	movs	r1, #7
    77cc:	4628      	mov	r0, r5
    77ce:	f000 fb7d 	bl	7ecc <bt_conn_set_state>
	conn_auto_initiate(conn);
    77d2:	4628      	mov	r0, r5
    77d4:	f7ff f950 	bl	6a78 <conn_auto_initiate>
	bt_conn_unref(conn);
    77d8:	4628      	mov	r0, r5
    77da:	e76a      	b.n	76b2 <enh_conn_complete+0x4e>
					bt_addr_copy(&conn->le.resp_addr.a,
    77dc:	f106 0131 	add.w	r1, r6, #49	; 0x31
    77e0:	e7e8      	b.n	77b4 <enh_conn_complete+0x150>
						&bt_dev.id_addr[conn->id]);
    77e2:	7a29      	ldrb	r1, [r5, #8]
    77e4:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    77e8:	4431      	add	r1, r6
    77ea:	f105 0096 	add.w	r0, r5, #150	; 0x96
    77ee:	f014 fab6 	bl	1bd5e <bt_addr_le_copy>
    77f2:	e7e1      	b.n	77b8 <enh_conn_complete+0x154>
    77f4:	20000098 	.word	0x20000098
    77f8:	0001c37d 	.word	0x0001c37d
    77fc:	2000002c 	.word	0x2000002c
    7800:	20000000 	.word	0x20000000

00007804 <le_legacy_conn_complete>:
{
    7804:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    7806:	6881      	ldr	r1, [r0, #8]
{
    7808:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    780a:	780b      	ldrb	r3, [r1, #0]
    780c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    7810:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    7814:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    7818:	78cb      	ldrb	r3, [r1, #3]
    781a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    781e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    7822:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    7826:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    782a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    782e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    7832:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    7836:	7c4b      	ldrb	r3, [r1, #17]
    7838:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    783c:	a803      	add	r0, sp, #12
    783e:	3104      	adds	r1, #4
    7840:	f014 fa8d 	bl	1bd5e <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    7844:	f10d 0013 	add.w	r0, sp, #19
    7848:	4908      	ldr	r1, [pc, #32]	; (786c <le_legacy_conn_complete+0x68>)
    784a:	f014 fa85 	bl	1bd58 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    784e:	2300      	movs	r3, #0
    7850:	4669      	mov	r1, sp
    7852:	f10d 0019 	add.w	r0, sp, #25
    7856:	9300      	str	r3, [sp, #0]
    7858:	f8ad 3004 	strh.w	r3, [sp, #4]
    785c:	f014 fa7c 	bl	1bd58 <bt_addr_copy>
	enh_conn_complete(&enh);
    7860:	a802      	add	r0, sp, #8
    7862:	f7ff feff 	bl	7664 <enh_conn_complete>
}
    7866:	b00b      	add	sp, #44	; 0x2c
    7868:	f85d fb04 	ldr.w	pc, [sp], #4
    786c:	20000031 	.word	0x20000031

00007870 <bt_buf_get_rx>:
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_HOST_CHAN_CLASSIF,
				    buf, NULL);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    7870:	b538      	push	{r3, r4, r5, lr}
    7872:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    7874:	4805      	ldr	r0, [pc, #20]	; (788c <bt_buf_get_rx+0x1c>)
    7876:	f016 fe37 	bl	1e4e8 <net_buf_alloc_fixed>
#endif

	if (buf) {
    787a:	4604      	mov	r4, r0
    787c:	b120      	cbz	r0, 7888 <bt_buf_get_rx+0x18>
		net_buf_reserve(buf, BT_BUF_RESERVE);
    787e:	2100      	movs	r1, #0
    7880:	3008      	adds	r0, #8
    7882:	f016 fe50 	bl	1e526 <net_buf_simple_reserve>
	*(uint8_t *)net_buf_user_data(buf) = type;
    7886:	7525      	strb	r5, [r4, #20]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    7888:	4620      	mov	r0, r4
    788a:	bd38      	pop	{r3, r4, r5, pc}
    788c:	20000bf4 	.word	0x20000bf4

00007890 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    7890:	b570      	push	{r4, r5, r6, lr}
    7892:	4602      	mov	r2, r0
    7894:	460b      	mov	r3, r1
	__asm__ volatile(
    7896:	f04f 0120 	mov.w	r1, #32
    789a:	f3ef 8511 	mrs	r5, BASEPRI
    789e:	f381 8811 	msr	BASEPRI, r1
    78a2:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    78a6:	480c      	ldr	r0, [pc, #48]	; (78d8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    78a8:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    78aa:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
	bt_dev.sent_cmd = NULL;
    78ae:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
	__asm__ volatile(
    78b2:	f385 8811 	msr	BASEPRI, r5
    78b6:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    78ba:	b924      	cbnz	r4, 78c6 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    78bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    78c0:	2001      	movs	r0, #1
    78c2:	f7ff bfd5 	b.w	7870 <bt_buf_get_rx>
    78c6:	2301      	movs	r3, #1
		net_buf_reserve(buf, BT_BUF_RESERVE);
    78c8:	f104 0008 	add.w	r0, r4, #8
    78cc:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    78ce:	81a1      	strh	r1, [r4, #12]
		net_buf_reserve(buf, BT_BUF_RESERVE);
    78d0:	f016 fe29 	bl	1e526 <net_buf_simple_reserve>
}
    78d4:	4620      	mov	r0, r4
    78d6:	bd70      	pop	{r4, r5, r6, pc}
    78d8:	20000000 	.word	0x20000000

000078dc <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable, k_timeout_t timeout)
{
    78dc:	b570      	push	{r4, r5, r6, lr}
    78de:	4604      	mov	r4, r0
	switch (evt) {
    78e0:	2c0f      	cmp	r4, #15
{
    78e2:	460d      	mov	r5, r1
    78e4:	4610      	mov	r0, r2
    78e6:	4619      	mov	r1, r3
	switch (evt) {
    78e8:	d805      	bhi.n	78f6 <bt_buf_get_evt+0x1a>
    78ea:	2c0d      	cmp	r4, #13
    78ec:	d912      	bls.n	7914 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    78ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    78f2:	f7ff bfcd 	b.w	7890 <bt_buf_get_cmd_complete>
	switch (evt) {
    78f6:	2c13      	cmp	r4, #19
    78f8:	d10c      	bne.n	7914 <bt_buf_get_evt+0x38>
			buf = net_buf_alloc(&num_complete_pool, timeout);
    78fa:	480b      	ldr	r0, [pc, #44]	; (7928 <bt_buf_get_evt+0x4c>)
			buf = net_buf_alloc(&discardable_pool, timeout);
    78fc:	f016 fdf4 	bl	1e4e8 <net_buf_alloc_fixed>
			if (buf) {
    7900:	4604      	mov	r4, r0
    7902:	b128      	cbz	r0, 7910 <bt_buf_get_evt+0x34>
				net_buf_reserve(buf, BT_BUF_RESERVE);
    7904:	2100      	movs	r1, #0
    7906:	3008      	adds	r0, #8
    7908:	f016 fe0d 	bl	1e526 <net_buf_simple_reserve>
    790c:	2301      	movs	r3, #1
    790e:	7523      	strb	r3, [r4, #20]
}
    7910:	4620      	mov	r0, r4
    7912:	bd70      	pop	{r4, r5, r6, pc}
			buf = net_buf_alloc(&discardable_pool, timeout);
    7914:	4602      	mov	r2, r0
    7916:	460b      	mov	r3, r1
		if (discardable) {
    7918:	b10d      	cbz	r5, 791e <bt_buf_get_evt+0x42>
			buf = net_buf_alloc(&discardable_pool, timeout);
    791a:	4804      	ldr	r0, [pc, #16]	; (792c <bt_buf_get_evt+0x50>)
    791c:	e7ee      	b.n	78fc <bt_buf_get_evt+0x20>
}
    791e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    7922:	2001      	movs	r0, #1
    7924:	f7ff bfa4 	b.w	7870 <bt_buf_get_rx>
    7928:	20000c1c 	.word	0x20000c1c
    792c:	20000b7c 	.word	0x20000b7c

00007930 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    7930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    7932:	4e17      	ldr	r6, [pc, #92]	; (7990 <bt_pub_key_gen+0x60>)
    7934:	f896 306a 	ldrb.w	r3, [r6, #106]	; 0x6a
    7938:	f003 0306 	and.w	r3, r3, #6
    793c:	2b06      	cmp	r3, #6
    793e:	d121      	bne.n	7984 <bt_pub_key_gen+0x54>
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    7940:	4f14      	ldr	r7, [pc, #80]	; (7994 <bt_pub_key_gen+0x64>)
    7942:	683b      	ldr	r3, [r7, #0]
    7944:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    7946:	6038      	str	r0, [r7, #0]

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    7948:	2104      	movs	r1, #4
    794a:	f106 0098 	add.w	r0, r6, #152	; 0x98
    794e:	f014 fa5c 	bl	1be0a <atomic_test_and_set_bit>
    7952:	4605      	mov	r5, r0
    7954:	b9c8      	cbnz	r0, 798a <bt_pub_key_gen+0x5a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    7956:	f06f 0108 	mvn.w	r1, #8
    795a:	f106 0098 	add.w	r0, r6, #152	; 0x98
    795e:	f014 f9dc 	bl	1bd1a <atomic_and>
		return 0;
	}

	atomic_clear_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY);

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    7962:	462a      	mov	r2, r5
    7964:	4629      	mov	r1, r5
    7966:	f242 0025 	movw	r0, #8229	; 0x2025
    796a:	f7fe fe59 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    796e:	4604      	mov	r4, r0
    7970:	b130      	cbz	r0, 7980 <bt_pub_key_gen+0x50>
    7972:	f06f 0110 	mvn.w	r1, #16
    7976:	f106 0098 	add.w	r0, r6, #152	; 0x98
    797a:	f014 f9ce 	bl	1bd1a <atomic_and>
		BT_ERR("Sending LE P256 Public Key command failed");
		atomic_clear_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY);
		pub_key_cb = NULL;
    797e:	603d      	str	r5, [r7, #0]
		return err;
	}

	return 0;
}
    7980:	4620      	mov	r0, r4
    7982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    7984:	f06f 0422 	mvn.w	r4, #34	; 0x22
    7988:	e7fa      	b.n	7980 <bt_pub_key_gen+0x50>
		return 0;
    798a:	2400      	movs	r4, #0
    798c:	e7f8      	b.n	7980 <bt_pub_key_gen+0x50>
    798e:	bf00      	nop
    7990:	20000000 	.word	0x20000000
    7994:	200014a8 	.word	0x200014a8

00007998 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    7998:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    799a:	4804      	ldr	r0, [pc, #16]	; (79ac <bt_pub_key_get+0x14>)
    799c:	f014 f9cc 	bl	1bd38 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    79a0:	f010 0f08 	tst.w	r0, #8
		return pub_key;
	}

	return NULL;
}
    79a4:	4802      	ldr	r0, [pc, #8]	; (79b0 <bt_pub_key_get+0x18>)
    79a6:	bf08      	it	eq
    79a8:	2000      	moveq	r0, #0
    79aa:	bd08      	pop	{r3, pc}
    79ac:	20000098 	.word	0x20000098
    79b0:	20002988 	.word	0x20002988

000079b4 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    79b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    79b6:	4d1a      	ldr	r5, [pc, #104]	; (7a20 <bt_dh_key_gen+0x6c>)
    79b8:	682b      	ldr	r3, [r5, #0]
{
    79ba:	4606      	mov	r6, r0
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    79bc:	b113      	cbz	r3, 79c4 <bt_dh_key_gen+0x10>
		return -EBUSY;
    79be:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    79c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    79c4:	4817      	ldr	r0, [pc, #92]	; (7a24 <bt_dh_key_gen+0x70>)
    79c6:	f014 f9b7 	bl	1bd38 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    79ca:	06c2      	lsls	r2, r0, #27
    79cc:	f3c0 1700 	ubfx	r7, r0, #4, #1
    79d0:	d4f5      	bmi.n	79be <bt_dh_key_gen+0xa>
    79d2:	4814      	ldr	r0, [pc, #80]	; (7a24 <bt_dh_key_gen+0x70>)
    79d4:	f014 f9b0 	bl	1bd38 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    79d8:	0703      	lsls	r3, r0, #28
    79da:	d51d      	bpl.n	7a18 <bt_dh_key_gen+0x64>
	dh_key_cb = cb;
    79dc:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    79de:	f242 0026 	movw	r0, #8230	; 0x2026
    79e2:	2140      	movs	r1, #64	; 0x40
    79e4:	f7fe fdc2 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
    79e8:	4604      	mov	r4, r0
    79ea:	b918      	cbnz	r0, 79f4 <bt_dh_key_gen+0x40>
		dh_key_cb = NULL;
    79ec:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    79ee:	f06f 0036 	mvn.w	r0, #54	; 0x36
    79f2:	e7e6      	b.n	79c2 <bt_dh_key_gen+0xe>
	cp = net_buf_add(buf, sizeof(*cp));
    79f4:	2140      	movs	r1, #64	; 0x40
    79f6:	3008      	adds	r0, #8
    79f8:	f016 fdcc 	bl	1e594 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    79fc:	2240      	movs	r2, #64	; 0x40
    79fe:	4631      	mov	r1, r6
    7a00:	f014 f813 	bl	1ba2a <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    7a04:	463a      	mov	r2, r7
    7a06:	4621      	mov	r1, r4
    7a08:	f242 0026 	movw	r0, #8230	; 0x2026
    7a0c:	f7fe fe08 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
    7a10:	2800      	cmp	r0, #0
    7a12:	d0d6      	beq.n	79c2 <bt_dh_key_gen+0xe>
		dh_key_cb = NULL;
    7a14:	602f      	str	r7, [r5, #0]
		return err;
    7a16:	e7d4      	b.n	79c2 <bt_dh_key_gen+0xe>
		return -EADDRNOTAVAIL;
    7a18:	f06f 0030 	mvn.w	r0, #48	; 0x30
    7a1c:	e7d1      	b.n	79c2 <bt_dh_key_gen+0xe>
    7a1e:	bf00      	nop
    7a20:	200014a4 	.word	0x200014a4
    7a24:	20000098 	.word	0x20000098

00007a28 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    7a28:	2300      	movs	r3, #0
	tx->user_data = NULL;
    7a2a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    7a2e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    7a30:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    7a32:	4801      	ldr	r0, [pc, #4]	; (7a38 <tx_free+0x10>)
    7a34:	f017 b90a 	b.w	1ec4c <k_queue_append>
    7a38:	20000b24 	.word	0x20000b24

00007a3c <notify_connected>:
{
    7a3c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    7a3e:	4b09      	ldr	r3, [pc, #36]	; (7a64 <notify_connected+0x28>)
    7a40:	681d      	ldr	r5, [r3, #0]
{
    7a42:	4604      	mov	r4, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    7a44:	7b21      	ldrb	r1, [r4, #12]
    7a46:	b92d      	cbnz	r5, 7a54 <notify_connected+0x18>
	if (!conn->err) {
    7a48:	b951      	cbnz	r1, 7a60 <notify_connected+0x24>
		bt_gatt_connected(conn);
    7a4a:	4620      	mov	r0, r4
}
    7a4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    7a50:	f002 b986 	b.w	9d60 <bt_gatt_connected>
		if (cb->connected) {
    7a54:	682b      	ldr	r3, [r5, #0]
    7a56:	b10b      	cbz	r3, 7a5c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    7a58:	4620      	mov	r0, r4
    7a5a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7a5c:	69ad      	ldr	r5, [r5, #24]
    7a5e:	e7f1      	b.n	7a44 <notify_connected+0x8>
}
    7a60:	bd38      	pop	{r3, r4, r5, pc}
    7a62:	bf00      	nop
    7a64:	200014b4 	.word	0x200014b4

00007a68 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    7a68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    7a6c:	694d      	ldr	r5, [r1, #20]
{
    7a6e:	4604      	mov	r4, r0
    7a70:	460e      	mov	r6, r1
    7a72:	4690      	mov	r8, r2
    7a74:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    7a76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    7a7a:	483f      	ldr	r0, [pc, #252]	; (7b78 <send_frag+0x110>)
    7a7c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7a80:	f011 fcac 	bl	193dc <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    7a84:	7b63      	ldrb	r3, [r4, #13]
    7a86:	2b07      	cmp	r3, #7
    7a88:	d146      	bne.n	7b18 <send_frag+0xb0>
	__asm__ volatile(
    7a8a:	f04f 0320 	mov.w	r3, #32
    7a8e:	f3ef 8211 	mrs	r2, BASEPRI
    7a92:	f383 8811 	msr	BASEPRI, r3
    7a96:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    7a9a:	2d00      	cmp	r5, #0
    7a9c:	d04e      	beq.n	7b3c <send_frag+0xd4>
	parent->next = child;
    7a9e:	2300      	movs	r3, #0
    7aa0:	602b      	str	r3, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    7aa2:	69a3      	ldr	r3, [r4, #24]
    7aa4:	2b00      	cmp	r3, #0
    7aa6:	d146      	bne.n	7b36 <send_frag+0xce>
	list->head = node;
    7aa8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    7aac:	f382 8811 	msr	BASEPRI, r2
    7ab0:	f3bf 8f6f 	isb	sy
	hdr = net_buf_push(buf, sizeof(*hdr));
    7ab4:	2104      	movs	r1, #4
    7ab6:	f106 0008 	add.w	r0, r6, #8
    7aba:	f016 fd82 	bl	1e5c2 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7abe:	8823      	ldrh	r3, [r4, #0]
    7ac0:	f008 08fd 	and.w	r8, r8, #253	; 0xfd
    7ac4:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7ac8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    7aca:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7ace:	3b04      	subs	r3, #4
    7ad0:	8043      	strh	r3, [r0, #2]
    7ad2:	2302      	movs	r3, #2
    7ad4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    7ad6:	4630      	mov	r0, r6
    7ad8:	f014 fc6e 	bl	1c3b8 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    7adc:	2800      	cmp	r0, #0
    7ade:	d049      	beq.n	7b74 <send_frag+0x10c>
	__asm__ volatile(
    7ae0:	f04f 0320 	mov.w	r3, #32
    7ae4:	f3ef 8111 	mrs	r1, BASEPRI
    7ae8:	f383 8811 	msr	BASEPRI, r3
    7aec:	f3bf 8f6f 	isb	sy
		BT_ERR("Unable to send to driver (err %d)", err);
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    7af0:	2d00      	cmp	r5, #0
    7af2:	d039      	beq.n	7b68 <send_frag+0x100>
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7af4:	6963      	ldr	r3, [r4, #20]
    7af6:	2200      	movs	r2, #0
    7af8:	b153      	cbz	r3, 7b10 <send_frag+0xa8>
    7afa:	429d      	cmp	r5, r3
    7afc:	d131      	bne.n	7b62 <send_frag+0xfa>
Z_GENLIST_REMOVE(slist, snode)
    7afe:	682b      	ldr	r3, [r5, #0]
    7b00:	bb4a      	cbnz	r2, 7b56 <send_frag+0xee>
    7b02:	69a2      	ldr	r2, [r4, #24]
	list->head = node;
    7b04:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    7b06:	4295      	cmp	r5, r2
    7b08:	d100      	bne.n	7b0c <send_frag+0xa4>
	list->tail = node;
    7b0a:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    7b0c:	2300      	movs	r3, #0
    7b0e:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    7b10:	f381 8811 	msr	BASEPRI, r1
    7b14:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    7b18:	4817      	ldr	r0, [pc, #92]	; (7b78 <send_frag+0x110>)
    7b1a:	f011 fc39 	bl	19390 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    7b1e:	b115      	cbz	r5, 7b26 <send_frag+0xbe>
		tx_free(tx);
    7b20:	4628      	mov	r0, r5
    7b22:	f7ff ff81 	bl	7a28 <tx_free>
	}

	if (always_consume) {
    7b26:	b11f      	cbz	r7, 7b30 <send_frag+0xc8>
		net_buf_unref(buf);
    7b28:	4630      	mov	r0, r6
    7b2a:	f00f f969 	bl	16e00 <net_buf_unref>
	}
	return false;
    7b2e:	2700      	movs	r7, #0
}
    7b30:	4638      	mov	r0, r7
    7b32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    7b36:	601d      	str	r5, [r3, #0]
	list->tail = node;
    7b38:	61a5      	str	r5, [r4, #24]
}
    7b3a:	e7b7      	b.n	7aac <send_frag+0x44>
		tail_tx = (void *)sys_slist_peek_tail(&conn->tx_pending);
    7b3c:	69a3      	ldr	r3, [r4, #24]
		if (tail_tx) {
    7b3e:	b133      	cbz	r3, 7b4e <send_frag+0xe6>
			pending_no_cb = &tail_tx->pending_no_cb;
    7b40:	f103 090c 	add.w	r9, r3, #12
    7b44:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    7b46:	3301      	adds	r3, #1
    7b48:	f8c9 3000 	str.w	r3, [r9]
    7b4c:	e7ae      	b.n	7aac <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    7b4e:	69e3      	ldr	r3, [r4, #28]
    7b50:	f104 091c 	add.w	r9, r4, #28
    7b54:	e7f7      	b.n	7b46 <send_frag+0xde>
	parent->next = child;
    7b56:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    7b58:	69a3      	ldr	r3, [r4, #24]
    7b5a:	429d      	cmp	r5, r3
	list->tail = node;
    7b5c:	bf08      	it	eq
    7b5e:	61a2      	streq	r2, [r4, #24]
}
    7b60:	e7d4      	b.n	7b0c <send_frag+0xa4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    7b62:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    7b64:	681b      	ldr	r3, [r3, #0]
    7b66:	e7c7      	b.n	7af8 <send_frag+0x90>
			(*pending_no_cb)--;
    7b68:	f8d9 3000 	ldr.w	r3, [r9]
    7b6c:	3b01      	subs	r3, #1
    7b6e:	f8c9 3000 	str.w	r3, [r9]
    7b72:	e7cd      	b.n	7b10 <send_frag+0xa8>
	return true;
    7b74:	2701      	movs	r7, #1
    7b76:	e7db      	b.n	7b30 <send_frag+0xc8>
    7b78:	200000d0 	.word	0x200000d0

00007b7c <bt_conn_get_pkts>:
}
    7b7c:	4800      	ldr	r0, [pc, #0]	; (7b80 <bt_conn_get_pkts+0x4>)
    7b7e:	4770      	bx	lr
    7b80:	200000d0 	.word	0x200000d0

00007b84 <notify_le_param_updated>:
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7b84:	1d03      	adds	r3, r0, #4
{
    7b86:	b570      	push	{r4, r5, r6, lr}
    7b88:	4604      	mov	r4, r0
    7b8a:	4618      	mov	r0, r3
    7b8c:	f014 fc59 	bl	1c442 <atomic_get>
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7b90:	0582      	lsls	r2, r0, #22
    7b92:	d519      	bpl.n	7bc8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    7b94:	f8b4 209e 	ldrh.w	r2, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    7b98:	f8b4 10a0 	ldrh.w	r1, [r4, #160]	; 0xa0
    7b9c:	4291      	cmp	r1, r2
    7b9e:	d813      	bhi.n	7bc8 <notify_le_param_updated+0x44>
	    conn->le.interval >= conn->le.interval_min &&
    7ba0:	f8b4 10a2 	ldrh.w	r1, [r4, #162]	; 0xa2
    7ba4:	4291      	cmp	r1, r2
    7ba6:	d30f      	bcc.n	7bc8 <notify_le_param_updated+0x44>
	    conn->le.latency == conn->le.pending_latency &&
    7ba8:	e9d4 1229 	ldrd	r1, r2, [r4, #164]	; 0xa4
    7bac:	4291      	cmp	r1, r2
    7bae:	d10b      	bne.n	7bc8 <notify_le_param_updated+0x44>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7bb0:	f3bf 8f5b 	dmb	ish
    7bb4:	e853 2f00 	ldrex	r2, [r3]
    7bb8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    7bbc:	e843 2100 	strex	r1, r2, [r3]
    7bc0:	2900      	cmp	r1, #0
    7bc2:	d1f7      	bne.n	7bb4 <notify_le_param_updated+0x30>
    7bc4:	f3bf 8f5b 	dmb	ish
	for (cb = callback_list; cb; cb = cb->_next) {
    7bc8:	4b07      	ldr	r3, [pc, #28]	; (7be8 <notify_le_param_updated+0x64>)
    7bca:	681d      	ldr	r5, [r3, #0]
    7bcc:	b905      	cbnz	r5, 7bd0 <notify_le_param_updated+0x4c>
}
    7bce:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    7bd0:	68ee      	ldr	r6, [r5, #12]
    7bd2:	b13e      	cbz	r6, 7be4 <notify_le_param_updated+0x60>
			cb->le_param_updated(conn, conn->le.interval,
    7bd4:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    7bd8:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    7bdc:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    7be0:	4620      	mov	r0, r4
    7be2:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    7be4:	69ad      	ldr	r5, [r5, #24]
    7be6:	e7f1      	b.n	7bcc <notify_le_param_updated+0x48>
    7be8:	200014b4 	.word	0x200014b4

00007bec <le_param_req>:
{
    7bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bee:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    7bf0:	4608      	mov	r0, r1
{
    7bf2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    7bf4:	f014 fba2 	bl	1c33c <bt_le_conn_params_valid>
    7bf8:	4604      	mov	r4, r0
    7bfa:	b910      	cbnz	r0, 7c02 <le_param_req+0x16>
		return false;
    7bfc:	2400      	movs	r4, #0
}
    7bfe:	4620      	mov	r0, r4
    7c00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    7c02:	4b09      	ldr	r3, [pc, #36]	; (7c28 <le_param_req+0x3c>)
    7c04:	681e      	ldr	r6, [r3, #0]
    7c06:	2e00      	cmp	r6, #0
    7c08:	d0f9      	beq.n	7bfe <le_param_req+0x12>
		if (!cb->le_param_req) {
    7c0a:	68b3      	ldr	r3, [r6, #8]
    7c0c:	b90b      	cbnz	r3, 7c12 <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    7c0e:	69b6      	ldr	r6, [r6, #24]
    7c10:	e7f9      	b.n	7c06 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    7c12:	4629      	mov	r1, r5
    7c14:	4638      	mov	r0, r7
    7c16:	4798      	blx	r3
    7c18:	2800      	cmp	r0, #0
    7c1a:	d0ef      	beq.n	7bfc <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    7c1c:	4628      	mov	r0, r5
    7c1e:	f014 fb8d 	bl	1c33c <bt_le_conn_params_valid>
    7c22:	2800      	cmp	r0, #0
    7c24:	d1f3      	bne.n	7c0e <le_param_req+0x22>
    7c26:	e7e9      	b.n	7bfc <le_param_req+0x10>
    7c28:	200014b4 	.word	0x200014b4

00007c2c <bt_conn_identity_resolved>:
{
    7c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    7c2e:	78c3      	ldrb	r3, [r0, #3]
{
    7c30:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    7c32:	b93b      	cbnz	r3, 7c44 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    7c34:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    7c38:	4b08      	ldr	r3, [pc, #32]	; (7c5c <bt_conn_identity_resolved+0x30>)
    7c3a:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    7c3c:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    7c40:	b91d      	cbnz	r5, 7c4a <bt_conn_identity_resolved+0x1e>
}
    7c42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    7c44:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    7c48:	e7f6      	b.n	7c38 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    7c4a:	692b      	ldr	r3, [r5, #16]
    7c4c:	b11b      	cbz	r3, 7c56 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    7c4e:	463a      	mov	r2, r7
    7c50:	4631      	mov	r1, r6
    7c52:	4620      	mov	r0, r4
    7c54:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7c56:	69ad      	ldr	r5, [r5, #24]
    7c58:	e7f2      	b.n	7c40 <bt_conn_identity_resolved+0x14>
    7c5a:	bf00      	nop
    7c5c:	200014b4 	.word	0x200014b4

00007c60 <bt_conn_security_changed>:
{
    7c60:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    7c62:	7a43      	ldrb	r3, [r0, #9]
    7c64:	7283      	strb	r3, [r0, #10]
{
    7c66:	4604      	mov	r4, r0
    7c68:	4616      	mov	r6, r2
	bt_l2cap_security_changed(conn, hci_err);
    7c6a:	f014 fdef 	bl	1c84c <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    7c6e:	4b06      	ldr	r3, [pc, #24]	; (7c88 <bt_conn_security_changed+0x28>)
    7c70:	681d      	ldr	r5, [r3, #0]
    7c72:	b905      	cbnz	r5, 7c76 <bt_conn_security_changed+0x16>
}
    7c74:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->security_changed) {
    7c76:	696b      	ldr	r3, [r5, #20]
    7c78:	b11b      	cbz	r3, 7c82 <bt_conn_security_changed+0x22>
			cb->security_changed(conn, conn->sec_level, err);
    7c7a:	7a61      	ldrb	r1, [r4, #9]
    7c7c:	4632      	mov	r2, r6
    7c7e:	4620      	mov	r0, r4
    7c80:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    7c82:	69ad      	ldr	r5, [r5, #24]
    7c84:	e7f5      	b.n	7c72 <bt_conn_security_changed+0x12>
    7c86:	bf00      	nop
    7c88:	200014b4 	.word	0x200014b4

00007c8c <bt_conn_cb_register>:
	cb->_next = callback_list;
    7c8c:	4b02      	ldr	r3, [pc, #8]	; (7c98 <bt_conn_cb_register+0xc>)
    7c8e:	681a      	ldr	r2, [r3, #0]
    7c90:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    7c92:	6018      	str	r0, [r3, #0]
}
    7c94:	4770      	bx	lr
    7c96:	bf00      	nop
    7c98:	200014b4 	.word	0x200014b4

00007c9c <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    7c9c:	b570      	push	{r4, r5, r6, lr}
    7c9e:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    7ca0:	f100 0634 	add.w	r6, r0, #52	; 0x34
    7ca4:	2200      	movs	r2, #0
    7ca6:	2300      	movs	r3, #0
    7ca8:	4630      	mov	r0, r6
    7caa:	f016 fc22 	bl	1e4f2 <net_buf_get>
    7cae:	4605      	mov	r5, r0
    7cb0:	b958      	cbnz	r0, 7cca <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    7cb2:	4620      	mov	r0, r4
    7cb4:	f014 fc5a 	bl	1c56c <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    7cb8:	f104 0158 	add.w	r1, r4, #88	; 0x58
    7cbc:	4807      	ldr	r0, [pc, #28]	; (7cdc <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->update_work, K_NO_WAIT);
}
    7cbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7cc2:	2200      	movs	r2, #0
    7cc4:	2300      	movs	r3, #0
    7cc6:	f011 bcbf 	b.w	19648 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    7cca:	6968      	ldr	r0, [r5, #20]
    7ccc:	b108      	cbz	r0, 7cd2 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    7cce:	f7ff feab 	bl	7a28 <tx_free>
		net_buf_unref(buf);
    7cd2:	4628      	mov	r0, r5
    7cd4:	f00f f894 	bl	16e00 <net_buf_unref>
    7cd8:	e7e4      	b.n	7ca4 <conn_cleanup+0x8>
    7cda:	bf00      	nop
    7cdc:	20001348 	.word	0x20001348

00007ce0 <bt_conn_send_cb>:
{
    7ce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ce4:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    7ce6:	7b43      	ldrb	r3, [r0, #13]
    7ce8:	2b07      	cmp	r3, #7
{
    7cea:	4606      	mov	r6, r0
    7cec:	460d      	mov	r5, r1
    7cee:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    7cf0:	d005      	beq.n	7cfe <bt_conn_send_cb+0x1e>
		net_buf_unref(buf);
    7cf2:	4608      	mov	r0, r1
    7cf4:	f00f f884 	bl	16e00 <net_buf_unref>
			return -ENOTCONN;
    7cf8:	f06f 0038 	mvn.w	r0, #56	; 0x38
    7cfc:	e015      	b.n	7d2a <bt_conn_send_cb+0x4a>
	if (cb) {
    7cfe:	b362      	cbz	r2, 7d5a <bt_conn_send_cb+0x7a>
	return z_impl_k_current_get();
    7d00:	f011 fb40 	bl	19384 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    7d04:	4b16      	ldr	r3, [pc, #88]	; (7d60 <bt_conn_send_cb+0x80>)
    7d06:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    7d08:	4816      	ldr	r0, [pc, #88]	; (7d64 <bt_conn_send_cb+0x84>)
    7d0a:	bf07      	ittee	eq
    7d0c:	2200      	moveq	r2, #0
    7d0e:	2300      	moveq	r3, #0
    7d10:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
    7d14:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
    7d18:	f010 ff88 	bl	18c2c <z_impl_k_queue_get>
    7d1c:	4604      	mov	r4, r0
		if (!tx) {
    7d1e:	b930      	cbnz	r0, 7d2e <bt_conn_send_cb+0x4e>
			net_buf_unref(buf);
    7d20:	4628      	mov	r0, r5
    7d22:	f00f f86d 	bl	16e00 <net_buf_unref>
			return -ENOBUFS;
    7d26:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    7d2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    7d2e:	7b73      	ldrb	r3, [r6, #13]
    7d30:	2b07      	cmp	r3, #7
    7d32:	d006      	beq.n	7d42 <bt_conn_send_cb+0x62>
			net_buf_unref(buf);
    7d34:	4628      	mov	r0, r5
    7d36:	f00f f863 	bl	16e00 <net_buf_unref>
			tx_free(tx);
    7d3a:	4620      	mov	r0, r4
    7d3c:	f7ff fe74 	bl	7a28 <tx_free>
    7d40:	e7da      	b.n	7cf8 <bt_conn_send_cb+0x18>
		tx->pending_no_cb = 0U;
    7d42:	2300      	movs	r3, #0
		tx->user_data = user_data;
    7d44:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    7d48:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    7d4a:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    7d4c:	f106 0034 	add.w	r0, r6, #52	; 0x34
    7d50:	4629      	mov	r1, r5
    7d52:	f016 fbec 	bl	1e52e <net_buf_put>
	return 0;
    7d56:	2000      	movs	r0, #0
    7d58:	e7e7      	b.n	7d2a <bt_conn_send_cb+0x4a>
		tx_data(buf)->tx = NULL;
    7d5a:	614a      	str	r2, [r1, #20]
    7d5c:	e7f6      	b.n	7d4c <bt_conn_send_cb+0x6c>
    7d5e:	bf00      	nop
    7d60:	20001360 	.word	0x20001360
    7d64:	20000b24 	.word	0x20000b24

00007d68 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    7d68:	b538      	push	{r3, r4, r5, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    7d6a:	4b1b      	ldr	r3, [pc, #108]	; (7dd8 <bt_conn_prepare_events+0x70>)
    7d6c:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7d6e:	2101      	movs	r1, #1
{
    7d70:	4604      	mov	r4, r0
	conn_change.signaled = 0U;
    7d72:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    7d74:	f017 face 	bl	1f314 <k_poll_event_init>
	if (!atomic_get(&conn->ref)) {
    7d78:	4b18      	ldr	r3, [pc, #96]	; (7ddc <bt_conn_prepare_events+0x74>)
    7d7a:	f103 0054 	add.w	r0, r3, #84	; 0x54
    7d7e:	f014 fb60 	bl	1c442 <atomic_get>
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    7d82:	f104 0514 	add.w	r5, r4, #20
	if (!atomic_get(&conn->ref)) {
    7d86:	4619      	mov	r1, r3
    7d88:	b908      	cbnz	r0, 7d8e <bt_conn_prepare_events+0x26>
		conn_cleanup(conn);
    7d8a:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    7d8c:	bd38      	pop	{r3, r4, r5, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    7d8e:	7b5a      	ldrb	r2, [r3, #13]
    7d90:	b99a      	cbnz	r2, 7dba <bt_conn_prepare_events+0x52>
    7d92:	f3bf 8f5b 	dmb	ish
    7d96:	1d1a      	adds	r2, r3, #4
    7d98:	e852 0f00 	ldrex	r0, [r2]
    7d9c:	f020 0c40 	bic.w	ip, r0, #64	; 0x40
    7da0:	e842 ce00 	strex	lr, ip, [r2]
    7da4:	f1be 0f00 	cmp.w	lr, #0
    7da8:	d1f6      	bne.n	7d98 <bt_conn_prepare_events+0x30>
    7daa:	f3bf 8f5b 	dmb	ish
    7dae:	0642      	lsls	r2, r0, #25
    7db0:	d503      	bpl.n	7dba <bt_conn_prepare_events+0x52>
		conn_cleanup(conn);
    7db2:	4618      	mov	r0, r3
    7db4:	f7ff ff72 	bl	7c9c <conn_cleanup>
    7db8:	e7e7      	b.n	7d8a <bt_conn_prepare_events+0x22>
	if (conn->state != BT_CONN_CONNECTED) {
    7dba:	7b4b      	ldrb	r3, [r1, #13]
    7dbc:	2b07      	cmp	r3, #7
    7dbe:	d1e4      	bne.n	7d8a <bt_conn_prepare_events+0x22>
	k_poll_event_init(&events[0],
    7dc0:	4b07      	ldr	r3, [pc, #28]	; (7de0 <bt_conn_prepare_events+0x78>)
    7dc2:	4628      	mov	r0, r5
    7dc4:	2200      	movs	r2, #0
    7dc6:	2104      	movs	r1, #4
    7dc8:	f017 faa4 	bl	1f314 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    7dcc:	2301      	movs	r3, #1
    7dce:	f884 3020 	strb.w	r3, [r4, #32]
			ev_count++;
    7dd2:	2002      	movs	r0, #2
	return ev_count;
    7dd4:	e7da      	b.n	7d8c <bt_conn_prepare_events+0x24>
    7dd6:	bf00      	nop
    7dd8:	2000054c 	.word	0x2000054c
    7ddc:	20000d70 	.word	0x20000d70
    7de0:	20000da4 	.word	0x20000da4

00007de4 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    7de4:	b570      	push	{r4, r5, r6, lr}
    7de6:	4606      	mov	r6, r0
    7de8:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    7dea:	480f      	ldr	r0, [pc, #60]	; (7e28 <bt_conn_add_le+0x44>)
    7dec:	2101      	movs	r1, #1
    7dee:	f014 fb61 	bl	1c4b4 <bt_conn_new>
	if (!conn) {
    7df2:	4604      	mov	r4, r0
    7df4:	b1b0      	cbz	r0, 7e24 <bt_conn_add_le+0x40>
	k_delayed_work_init(&conn->update_work, conn_update_timeout);
    7df6:	490d      	ldr	r1, [pc, #52]	; (7e2c <bt_conn_add_le+0x48>)
    7df8:	3058      	adds	r0, #88	; 0x58
    7dfa:	f017 f8df 	bl	1efbc <k_delayed_work_init>
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    7dfe:	4a0c      	ldr	r2, [pc, #48]	; (7e30 <bt_conn_add_le+0x4c>)

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    7e00:	7226      	strb	r6, [r4, #8]
    7e02:	2300      	movs	r3, #0
    7e04:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    7e08:	62a3      	str	r3, [r4, #40]	; 0x28
	memcpy(dst, src, sizeof(*dst));
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    7e0a:	2207      	movs	r2, #7
    7e0c:	4629      	mov	r1, r5
    7e0e:	f104 0088 	add.w	r0, r4, #136	; 0x88
    7e12:	f013 fe0a 	bl	1ba2a <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    7e16:	2301      	movs	r3, #1
    7e18:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    7e1a:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    7e1c:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7e1e:	4b05      	ldr	r3, [pc, #20]	; (7e34 <bt_conn_add_le+0x50>)
    7e20:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    7e24:	4620      	mov	r0, r4
    7e26:	bd70      	pop	{r4, r5, r6, pc}
    7e28:	20000d70 	.word	0x20000d70
    7e2c:	0000806d 	.word	0x0000806d
    7e30:	0001c4af 	.word	0x0001c4af
    7e34:	00280018 	.word	0x00280018

00007e38 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    7e38:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    7e3a:	2101      	movs	r1, #1
    7e3c:	4801      	ldr	r0, [pc, #4]	; (7e44 <bt_conn_lookup_handle+0xc>)
    7e3e:	f014 bbe5 	b.w	1c60c <conn_lookup_handle>
    7e42:	bf00      	nop
    7e44:	20000d70 	.word	0x20000d70

00007e48 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    7e48:	b510      	push	{r4, lr}
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		if (!atomic_get(&acl_conns[i].ref)) {
    7e4a:	4c0c      	ldr	r4, [pc, #48]	; (7e7c <bt_conn_lookup_addr_le+0x34>)
{
    7e4c:	4603      	mov	r3, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    7e4e:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    7e52:	460a      	mov	r2, r1
		if (!atomic_get(&acl_conns[i].ref)) {
    7e54:	f014 faf5 	bl	1c442 <atomic_get>
    7e58:	b908      	cbnz	r0, 7e5e <bt_conn_lookup_addr_le+0x16>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
			return bt_conn_ref(&acl_conns[i]);
		}
	}

	return NULL;
    7e5a:	2000      	movs	r0, #0
}
    7e5c:	bd10      	pop	{r4, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    7e5e:	78a1      	ldrb	r1, [r4, #2]
    7e60:	2901      	cmp	r1, #1
    7e62:	d1fa      	bne.n	7e5a <bt_conn_lookup_addr_le+0x12>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    7e64:	4619      	mov	r1, r3
    7e66:	4620      	mov	r0, r4
    7e68:	f014 fbf1 	bl	1c64e <bt_conn_is_peer_addr_le>
    7e6c:	2800      	cmp	r0, #0
    7e6e:	d0f4      	beq.n	7e5a <bt_conn_lookup_addr_le+0x12>
#endif /* defined(CONFIG_BT_ISO) */
}

struct bt_conn *bt_conn_ref(struct bt_conn *conn)
{
	atomic_val_t old = atomic_inc(&conn->ref);
    7e70:	f104 0054 	add.w	r0, r4, #84	; 0x54
    7e74:	f014 faeb 	bl	1c44e <atomic_inc>
		if (bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    7e78:	4620      	mov	r0, r4
			return bt_conn_ref(&acl_conns[i]);
    7e7a:	e7ef      	b.n	7e5c <bt_conn_lookup_addr_le+0x14>
    7e7c:	20000d70 	.word	0x20000d70

00007e80 <bt_conn_lookup_state_le>:
{
    7e80:	b570      	push	{r4, r5, r6, lr}
		if (!atomic_get(&acl_conns[i].ref)) {
    7e82:	4c10      	ldr	r4, [pc, #64]	; (7ec4 <bt_conn_lookup_state_le+0x44>)
{
    7e84:	4605      	mov	r5, r0
		if (!atomic_get(&acl_conns[i].ref)) {
    7e86:	f104 0054 	add.w	r0, r4, #84	; 0x54
{
    7e8a:	4616      	mov	r6, r2
		if (!atomic_get(&acl_conns[i].ref)) {
    7e8c:	f014 fad9 	bl	1c442 <atomic_get>
    7e90:	b908      	cbnz	r0, 7e96 <bt_conn_lookup_state_le+0x16>
	return NULL;
    7e92:	2000      	movs	r0, #0
}
    7e94:	bd70      	pop	{r4, r5, r6, pc}
		if (acl_conns[i].type != BT_CONN_TYPE_LE) {
    7e96:	78a3      	ldrb	r3, [r4, #2]
    7e98:	2b01      	cmp	r3, #1
    7e9a:	d1fa      	bne.n	7e92 <bt_conn_lookup_state_le+0x12>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    7e9c:	b951      	cbnz	r1, 7eb4 <bt_conn_lookup_state_le+0x34>
		if (acl_conns[i].state == state && acl_conns[i].id == id) {
    7e9e:	7b63      	ldrb	r3, [r4, #13]
    7ea0:	42b3      	cmp	r3, r6
    7ea2:	d1f6      	bne.n	7e92 <bt_conn_lookup_state_le+0x12>
    7ea4:	7a23      	ldrb	r3, [r4, #8]
    7ea6:	42ab      	cmp	r3, r5
    7ea8:	d1f3      	bne.n	7e92 <bt_conn_lookup_state_le+0x12>
	atomic_val_t old = atomic_inc(&conn->ref);
    7eaa:	4807      	ldr	r0, [pc, #28]	; (7ec8 <bt_conn_lookup_state_le+0x48>)
    7eac:	f014 facf 	bl	1c44e <atomic_inc>
			return bt_conn_ref(&acl_conns[i]);
    7eb0:	4804      	ldr	r0, [pc, #16]	; (7ec4 <bt_conn_lookup_state_le+0x44>)
    7eb2:	e7ef      	b.n	7e94 <bt_conn_lookup_state_le+0x14>
		if (peer && !bt_conn_is_peer_addr_le(&acl_conns[i], id, peer)) {
    7eb4:	460a      	mov	r2, r1
    7eb6:	4620      	mov	r0, r4
    7eb8:	4629      	mov	r1, r5
    7eba:	f014 fbc8 	bl	1c64e <bt_conn_is_peer_addr_le>
    7ebe:	2800      	cmp	r0, #0
    7ec0:	d1ed      	bne.n	7e9e <bt_conn_lookup_state_le+0x1e>
    7ec2:	e7e6      	b.n	7e92 <bt_conn_lookup_state_le+0x12>
    7ec4:	20000d70 	.word	0x20000d70
    7ec8:	20000dc4 	.word	0x20000dc4

00007ecc <bt_conn_set_state>:
{
    7ecc:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    7ece:	7b45      	ldrb	r5, [r0, #13]
    7ed0:	428d      	cmp	r5, r1
{
    7ed2:	4604      	mov	r4, r0
	if (conn->state == state) {
    7ed4:	f000 8097 	beq.w	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
	conn->state = state;
    7ed8:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    7eda:	b915      	cbnz	r5, 7ee2 <bt_conn_set_state+0x16>
	atomic_val_t old = atomic_inc(&conn->ref);
    7edc:	3054      	adds	r0, #84	; 0x54
    7ede:	f014 fab6 	bl	1c44e <atomic_inc>
	switch (conn->state) {
    7ee2:	7b63      	ldrb	r3, [r4, #13]
    7ee4:	2b01      	cmp	r3, #1
    7ee6:	d116      	bne.n	7f16 <bt_conn_set_state+0x4a>
	z_impl_k_sem_give(sem);
    7ee8:	4d47      	ldr	r5, [pc, #284]	; (8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>)
		tx->pending_no_cb = 0U;
    7eea:	2600      	movs	r6, #0
	__asm__ volatile(
    7eec:	f04f 0320 	mov.w	r3, #32
    7ef0:	f3ef 8211 	mrs	r2, BASEPRI
    7ef4:	f383 8811 	msr	BASEPRI, r3
    7ef8:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    7efc:	69e3      	ldr	r3, [r4, #28]
    7efe:	2b00      	cmp	r3, #0
    7f00:	d062      	beq.n	7fc8 <bt_conn_set_state+0xfc>
			conn->pending_no_cb--;
    7f02:	3b01      	subs	r3, #1
    7f04:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    7f06:	f382 8811 	msr	BASEPRI, r2
    7f0a:	f3bf 8f6f 	isb	sy
    7f0e:	4628      	mov	r0, r5
    7f10:	f011 fa3e 	bl	19390 <z_impl_k_sem_give>
}
    7f14:	e7ea      	b.n	7eec <bt_conn_set_state+0x20>
	switch (conn->state) {
    7f16:	2b07      	cmp	r3, #7
    7f18:	d009      	beq.n	7f2e <bt_conn_set_state+0x62>
    7f1a:	2b00      	cmp	r3, #0
    7f1c:	d173      	bne.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7f1e:	78a3      	ldrb	r3, [r4, #2]
    7f20:	2b04      	cmp	r3, #4
    7f22:	d11a      	bne.n	7f5a <bt_conn_set_state+0x8e>
			bt_conn_unref(conn);
    7f24:	4620      	mov	r0, r4
}
    7f26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    7f2a:	f014 bbb0 	b.w	1c68e <bt_conn_unref>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7f2e:	78a3      	ldrb	r3, [r4, #2]
    7f30:	2b04      	cmp	r3, #4
    7f32:	d068      	beq.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
	z_impl_k_queue_init(queue);
    7f34:	f104 0034 	add.w	r0, r4, #52	; 0x34
    7f38:	f016 fe7c 	bl	1ec34 <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    7f3c:	2100      	movs	r1, #0
    7f3e:	4833      	ldr	r0, [pc, #204]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
    7f40:	f011 fdfe 	bl	19b40 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    7f44:	2300      	movs	r3, #0
		bt_l2cap_connected(conn);
    7f46:	4620      	mov	r0, r4
	list->tail = NULL;
    7f48:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
    7f4c:	f000 f9cc 	bl	82e8 <bt_l2cap_connected>
		notify_connected(conn);
    7f50:	4620      	mov	r0, r4
}
    7f52:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify_connected(conn);
    7f56:	f7ff bd71 	b.w	7a3c <notify_connected>
		switch (old_state) {
    7f5a:	3d01      	subs	r5, #1
    7f5c:	2d05      	cmp	r5, #5
    7f5e:	d852      	bhi.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
    7f60:	a301      	add	r3, pc, #4	; (adr r3, 7f68 <bt_conn_set_state+0x9c>)
    7f62:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
    7f66:	bf00      	nop
    7f68:	00007f81 	.word	0x00007f81
    7f6c:	00007fbb 	.word	0x00007fbb
    7f70:	00007f25 	.word	0x00007f25
    7f74:	00007f25 	.word	0x00007f25
    7f78:	00007fbb 	.word	0x00007fbb
    7f7c:	00007fbb 	.word	0x00007fbb
			tx_notify(conn);
    7f80:	4620      	mov	r0, r4
    7f82:	f014 fa71 	bl	1c468 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    7f86:	78a3      	ldrb	r3, [r4, #2]
    7f88:	2b01      	cmp	r3, #1
    7f8a:	d103      	bne.n	7f94 <bt_conn_set_state+0xc8>
				k_delayed_work_cancel(&conn->update_work);
    7f8c:	f104 0058 	add.w	r0, r4, #88	; 0x58
    7f90:	f017 f81c 	bl	1efcc <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7f94:	f3bf 8f5b 	dmb	ish
    7f98:	3404      	adds	r4, #4
    7f9a:	e854 3f00 	ldrex	r3, [r4]
    7f9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7fa2:	e844 3200 	strex	r2, r3, [r4]
    7fa6:	2a00      	cmp	r2, #0
    7fa8:	d1f7      	bne.n	7f9a <bt_conn_set_state+0xce>
    7faa:	f3bf 8f5b 	dmb	ish
    7fae:	4817      	ldr	r0, [pc, #92]	; (800c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xc>)
}
    7fb0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    7fb4:	2100      	movs	r1, #0
    7fb6:	f011 bdc3 	b.w	19b40 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    7fba:	7b23      	ldrb	r3, [r4, #12]
    7fbc:	2b00      	cmp	r3, #0
    7fbe:	d0b1      	beq.n	7f24 <bt_conn_set_state+0x58>
				notify_connected(conn);
    7fc0:	4620      	mov	r0, r4
    7fc2:	f7ff fd3b 	bl	7a3c <notify_connected>
    7fc6:	e7ad      	b.n	7f24 <bt_conn_set_state+0x58>
Z_GENLIST_IS_EMPTY(slist)
    7fc8:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    7fca:	b128      	cbz	r0, 7fd8 <bt_conn_set_state+0x10c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7fcc:	69a1      	ldr	r1, [r4, #24]
    7fce:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    7fd0:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    7fd2:	4288      	cmp	r0, r1
	list->tail = node;
    7fd4:	bf08      	it	eq
    7fd6:	61a3      	streq	r3, [r4, #24]
    7fd8:	f382 8811 	msr	BASEPRI, r2
    7fdc:	f3bf 8f6f 	isb	sy
		if (!node) {
    7fe0:	b188      	cbz	r0, 8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
	__asm__ volatile(
    7fe2:	f04f 0220 	mov.w	r2, #32
    7fe6:	f3ef 8311 	mrs	r3, BASEPRI
    7fea:	f382 8811 	msr	BASEPRI, r2
    7fee:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    7ff2:	68c2      	ldr	r2, [r0, #12]
    7ff4:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    7ff6:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    7ff8:	f383 8811 	msr	BASEPRI, r3
    7ffc:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    8000:	f7ff fd12 	bl	7a28 <tx_free>
    8004:	e783      	b.n	7f0e <bt_conn_set_state+0x42>
}
    8006:	bd70      	pop	{r4, r5, r6, pc}
    8008:	200000d0 	.word	0x200000d0
    800c:	2000054c 	.word	0x2000054c

00008010 <send_conn_le_param_update>:
{
    8010:	b538      	push	{r3, r4, r5, lr}
    8012:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    8014:	4608      	mov	r0, r1
{
    8016:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    8018:	f014 f990 	bl	1c33c <bt_le_conn_params_valid>
    801c:	b308      	cbz	r0, 8062 <send_conn_le_param_update+0x52>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    801e:	4b12      	ldr	r3, [pc, #72]	; (8068 <send_conn_le_param_update+0x58>)
    8020:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
    8024:	0799      	lsls	r1, r3, #30
    8026:	d407      	bmi.n	8038 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    8028:	78e3      	ldrb	r3, [r4, #3]
    802a:	b173      	cbz	r3, 804a <send_conn_le_param_update+0x3a>
	return bt_l2cap_update_conn_param(conn, param);
    802c:	4629      	mov	r1, r5
    802e:	4620      	mov	r0, r4
}
    8030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    8034:	f000 b9b4 	b.w	83a0 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    8038:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    803c:	079a      	lsls	r2, r3, #30
    803e:	d5f3      	bpl.n	8028 <send_conn_le_param_update+0x18>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8040:	1d20      	adds	r0, r4, #4
    8042:	f014 f9fe 	bl	1c442 <atomic_get>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    8046:	0543      	lsls	r3, r0, #21
    8048:	d4ee      	bmi.n	8028 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    804a:	4629      	mov	r1, r5
    804c:	4620      	mov	r0, r4
    804e:	f014 fb64 	bl	1c71a <bt_conn_le_conn_update>
		if (rc == 0) {
    8052:	b928      	cbnz	r0, 8060 <send_conn_le_param_update+0x50>
			conn->le.pending_latency = param->latency;
    8054:	88ab      	ldrh	r3, [r5, #4]
    8056:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    805a:	88eb      	ldrh	r3, [r5, #6]
    805c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    8060:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8062:	f06f 0015 	mvn.w	r0, #21
    8066:	e7fb      	b.n	8060 <send_conn_le_param_update+0x50>
    8068:	20000000 	.word	0x20000000

0000806c <conn_update_timeout>:
{
    806c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    806e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    8072:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, update_work);
    8074:	f1a0 0658 	sub.w	r6, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    8078:	b993      	cbnz	r3, 80a0 <conn_update_timeout+0x34>
		bt_l2cap_disconnected(conn);
    807a:	4630      	mov	r0, r6
    807c:	f014 fbd0 	bl	1c820 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    8080:	4b1f      	ldr	r3, [pc, #124]	; (8100 <conn_update_timeout+0x94>)
    8082:	681d      	ldr	r5, [r3, #0]
    8084:	b925      	cbnz	r5, 8090 <conn_update_timeout+0x24>
		bt_conn_unref(conn);
    8086:	4630      	mov	r0, r6
    8088:	f014 fb01 	bl	1c68e <bt_conn_unref>
}
    808c:	b002      	add	sp, #8
    808e:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->disconnected) {
    8090:	686b      	ldr	r3, [r5, #4]
    8092:	b11b      	cbz	r3, 809c <conn_update_timeout+0x30>
			cb->disconnected(conn, conn->err);
    8094:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    8098:	4630      	mov	r0, r6
    809a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    809c:	69ad      	ldr	r5, [r5, #24]
    809e:	e7f1      	b.n	8084 <conn_update_timeout+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    80a0:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    80a4:	2b01      	cmp	r3, #1
    80a6:	d1f1      	bne.n	808c <conn_update_timeout+0x20>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    80a8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(conn->flags,
    80ac:	f1a0 0554 	sub.w	r5, r0, #84	; 0x54
    80b0:	e855 3f00 	ldrex	r3, [r5]
    80b4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
    80b8:	e845 2100 	strex	r1, r2, [r5]
    80bc:	2900      	cmp	r1, #0
    80be:	d1f7      	bne.n	80b0 <conn_update_timeout+0x44>
    80c0:	f3bf 8f5b 	dmb	ish
    80c4:	059b      	lsls	r3, r3, #22
    80c6:	d514      	bpl.n	80f2 <conn_update_timeout+0x86>
			param = BT_LE_CONN_PARAM(conn->le.interval_min,
    80c8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    80ca:	9300      	str	r3, [sp, #0]
    80cc:	6d23      	ldr	r3, [r4, #80]	; 0x50
    80ce:	9301      	str	r3, [sp, #4]
			send_conn_le_param_update(conn, param);
    80d0:	4669      	mov	r1, sp
    80d2:	4630      	mov	r0, r6
    80d4:	f7ff ff9c 	bl	8010 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    80d8:	f3bf 8f5b 	dmb	ish
    80dc:	e855 3f00 	ldrex	r3, [r5]
    80e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    80e4:	e845 3200 	strex	r2, r3, [r5]
    80e8:	2a00      	cmp	r2, #0
    80ea:	d1f7      	bne.n	80dc <conn_update_timeout+0x70>
    80ec:	f3bf 8f5b 	dmb	ish
    80f0:	e7cc      	b.n	808c <conn_update_timeout+0x20>
			param = BT_LE_CONN_PARAM(
    80f2:	4a04      	ldr	r2, [pc, #16]	; (8104 <conn_update_timeout+0x98>)
    80f4:	6810      	ldr	r0, [r2, #0]
    80f6:	6851      	ldr	r1, [r2, #4]
    80f8:	466b      	mov	r3, sp
    80fa:	c303      	stmia	r3!, {r0, r1}
    80fc:	e7e8      	b.n	80d0 <conn_update_timeout+0x64>
    80fe:	bf00      	nop
    8100:	200014b4 	.word	0x200014b4
    8104:	0001f69a 	.word	0x0001f69a

00008108 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    8108:	b538      	push	{r3, r4, r5, lr}
    810a:	460d      	mov	r5, r1
	} else {
#if defined(CONFIG_NET_BUF_LOG)
		buf = net_buf_alloc_fixed_debug(pool, timeout, func,
							line);
#else
		buf = net_buf_alloc(pool, timeout);
    810c:	4906      	ldr	r1, [pc, #24]	; (8128 <bt_conn_create_pdu_timeout+0x20>)
    810e:	2800      	cmp	r0, #0
    8110:	bf08      	it	eq
    8112:	4608      	moveq	r0, r1
    8114:	f016 f9e8 	bl	1e4e8 <net_buf_alloc_fixed>
#endif
	}

	if (!buf) {
    8118:	4604      	mov	r4, r0
    811a:	b118      	cbz	r0, 8124 <bt_conn_create_pdu_timeout+0x1c>
		BT_WARN("Unable to allocate buffer within timeout");
		return NULL;
	}

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);
    811c:	1d29      	adds	r1, r5, #4
    811e:	3008      	adds	r0, #8
    8120:	f016 fa01 	bl	1e526 <net_buf_simple_reserve>

	return buf;
}
    8124:	4620      	mov	r0, r4
    8126:	bd38      	pop	{r3, r4, r5, pc}
    8128:	20000b54 	.word	0x20000b54

0000812c <bt_conn_create_frag_timeout>:
{
    812c:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    812e:	4801      	ldr	r0, [pc, #4]	; (8134 <bt_conn_create_frag_timeout+0x8>)
    8130:	f7ff bfea 	b.w	8108 <bt_conn_create_pdu_timeout>
    8134:	20000ba4 	.word	0x20000ba4

00008138 <create_frag.isra.0>:
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    8138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    813c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    813e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    8142:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    8146:	2000      	movs	r0, #0
static struct net_buf *create_frag(struct bt_conn *conn, struct net_buf *buf)
    8148:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    814a:	f7ff ffef 	bl	812c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    814e:	7833      	ldrb	r3, [r6, #0]
    8150:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    8152:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    8154:	f04f 0600 	mov.w	r6, #0
    8158:	d005      	beq.n	8166 <create_frag.isra.0+0x2e>
		net_buf_unref(frag);
    815a:	f00e fe51 	bl	16e00 <net_buf_unref>
		return NULL;
    815e:	4635      	mov	r5, r6
}
    8160:	4628      	mov	r0, r5
    8162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    8166:	6146      	str	r6, [r0, #20]
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8168:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    816c:	4e0c      	ldr	r6, [pc, #48]	; (81a0 <create_frag.isra.0+0x68>)
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    816e:	4638      	mov	r0, r7
    8170:	f8b6 80cc 	ldrh.w	r8, [r6, #204]	; 0xcc
    8174:	f016 fa49 	bl	1e60a <net_buf_simple_tailroom>
    8178:	4580      	cmp	r8, r0
    817a:	d20c      	bcs.n	8196 <create_frag.isra.0+0x5e>
	return bt_dev.le.acl_mtu;
    817c:	f8b6 60cc 	ldrh.w	r6, [r6, #204]	; 0xcc
	net_buf_add_mem(frag, buf->data, frag_len);
    8180:	f854 1f08 	ldr.w	r1, [r4, #8]!
    8184:	4632      	mov	r2, r6
    8186:	4638      	mov	r0, r7
    8188:	f016 fa0a 	bl	1e5a0 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    818c:	4631      	mov	r1, r6
    818e:	4620      	mov	r0, r4
    8190:	f016 fa1f 	bl	1e5d2 <net_buf_simple_pull>
	return frag;
    8194:	e7e4      	b.n	8160 <create_frag.isra.0+0x28>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    8196:	4638      	mov	r0, r7
    8198:	f016 fa37 	bl	1e60a <net_buf_simple_tailroom>
    819c:	b286      	uxth	r6, r0
    819e:	e7ef      	b.n	8180 <create_frag.isra.0+0x48>
    81a0:	20000000 	.word	0x20000000

000081a4 <bt_conn_process_tx>:
{
    81a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    81a6:	7b43      	ldrb	r3, [r0, #13]
{
    81a8:	4605      	mov	r5, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    81aa:	b993      	cbnz	r3, 81d2 <bt_conn_process_tx+0x2e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    81ac:	f3bf 8f5b 	dmb	ish
    81b0:	1d03      	adds	r3, r0, #4
    81b2:	e853 2f00 	ldrex	r2, [r3]
    81b6:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    81ba:	e843 1400 	strex	r4, r1, [r3]
    81be:	2c00      	cmp	r4, #0
    81c0:	d1f7      	bne.n	81b2 <bt_conn_process_tx+0xe>
    81c2:	f3bf 8f5b 	dmb	ish
    81c6:	0653      	lsls	r3, r2, #25
    81c8:	d503      	bpl.n	81d2 <bt_conn_process_tx+0x2e>
}
    81ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		conn_cleanup(conn);
    81ce:	f7ff bd65 	b.w	7c9c <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    81d2:	2200      	movs	r2, #0
    81d4:	2300      	movs	r3, #0
    81d6:	f105 0034 	add.w	r0, r5, #52	; 0x34
    81da:	f016 f98a 	bl	1e4f2 <net_buf_get>
	BT_ASSERT(buf);
    81de:	4604      	mov	r4, r0
    81e0:	b960      	cbnz	r0, 81fc <bt_conn_process_tx+0x58>
    81e2:	4a20      	ldr	r2, [pc, #128]	; (8264 <bt_conn_process_tx+0xc0>)
    81e4:	4920      	ldr	r1, [pc, #128]	; (8268 <bt_conn_process_tx+0xc4>)
    81e6:	4821      	ldr	r0, [pc, #132]	; (826c <bt_conn_process_tx+0xc8>)
    81e8:	f240 5356 	movw	r3, #1366	; 0x556
    81ec:	f011 fe03 	bl	19df6 <printk>
    81f0:	4040      	eors	r0, r0
    81f2:	f380 8811 	msr	BASEPRI, r0
    81f6:	f04f 0003 	mov.w	r0, #3
    81fa:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    81fc:	4f1c      	ldr	r7, [pc, #112]	; (8270 <bt_conn_process_tx+0xcc>)
	if (buf->len <= conn_mtu(conn)) {
    81fe:	89a1      	ldrh	r1, [r4, #12]
    8200:	f8b7 20cc 	ldrh.w	r2, [r7, #204]	; 0xcc
    8204:	4291      	cmp	r1, r2
    8206:	d807      	bhi.n	8218 <bt_conn_process_tx+0x74>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    8208:	2300      	movs	r3, #0
    820a:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    820c:	4621      	mov	r1, r4
    820e:	4628      	mov	r0, r5
    8210:	f7ff fc2a 	bl	7a68 <send_frag>
	if (!send_buf(conn, buf)) {
    8214:	b140      	cbz	r0, 8228 <bt_conn_process_tx+0x84>
}
    8216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	frag = create_frag(conn, buf);
    8218:	f105 060d 	add.w	r6, r5, #13
    821c:	4621      	mov	r1, r4
    821e:	4630      	mov	r0, r6
    8220:	f7ff ff8a 	bl	8138 <create_frag.isra.0>
	if (!frag) {
    8224:	4601      	mov	r1, r0
    8226:	b920      	cbnz	r0, 8232 <bt_conn_process_tx+0x8e>
		net_buf_unref(buf);
    8228:	4620      	mov	r0, r4
}
    822a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		net_buf_unref(buf);
    822e:	f00e bde7 	b.w	16e00 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    8232:	2301      	movs	r3, #1
    8234:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    8236:	4628      	mov	r0, r5
    8238:	f7ff fc16 	bl	7a68 <send_frag>
    823c:	2800      	cmp	r0, #0
    823e:	d0f3      	beq.n	8228 <bt_conn_process_tx+0x84>
	while (buf->len > conn_mtu(conn)) {
    8240:	89a2      	ldrh	r2, [r4, #12]
    8242:	f8b7 30cc 	ldrh.w	r3, [r7, #204]	; 0xcc
    8246:	429a      	cmp	r2, r3
    8248:	d802      	bhi.n	8250 <bt_conn_process_tx+0xac>
	return send_frag(conn, buf, FRAG_END, false);
    824a:	2300      	movs	r3, #0
    824c:	2203      	movs	r2, #3
    824e:	e7dd      	b.n	820c <bt_conn_process_tx+0x68>
		frag = create_frag(conn, buf);
    8250:	4621      	mov	r1, r4
    8252:	4630      	mov	r0, r6
    8254:	f7ff ff70 	bl	8138 <create_frag.isra.0>
		if (!frag) {
    8258:	4601      	mov	r1, r0
    825a:	2800      	cmp	r0, #0
    825c:	d0e4      	beq.n	8228 <bt_conn_process_tx+0x84>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    825e:	2301      	movs	r3, #1
    8260:	461a      	mov	r2, r3
    8262:	e7e8      	b.n	8236 <bt_conn_process_tx+0x92>
    8264:	00020cf8 	.word	0x00020cf8
    8268:	00020c21 	.word	0x00020c21
    826c:	00020c04 	.word	0x00020c04
    8270:	20000000 	.word	0x20000000

00008274 <bt_conn_index>:
		__ASSERT(index < CONFIG_BT_MAX_SCO_CONN,
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    8274:	4b03      	ldr	r3, [pc, #12]	; (8284 <bt_conn_index+0x10>)
    8276:	1ac0      	subs	r0, r0, r3
    8278:	4b03      	ldr	r3, [pc, #12]	; (8288 <bt_conn_index+0x14>)
    827a:	10c0      	asrs	r0, r0, #3
    827c:	4358      	muls	r0, r3
		__ASSERT(index < CONFIG_BT_MAX_CONN, "Invalid bt_conn pointer");
		break;
	}

	return index;
}
    827e:	b2c0      	uxtb	r0, r0
    8280:	4770      	bx	lr
    8282:	bf00      	nop
    8284:	20000d70 	.word	0x20000d70
    8288:	e9bd37a7 	.word	0xe9bd37a7

0000828c <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    828c:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    828e:	490b      	ldr	r1, [pc, #44]	; (82bc <bt_conn_init+0x30>)
    8290:	480b      	ldr	r0, [pc, #44]	; (82c0 <bt_conn_init+0x34>)
    8292:	f016 fcdb 	bl	1ec4c <k_queue_append>
    8296:	490b      	ldr	r1, [pc, #44]	; (82c4 <bt_conn_init+0x38>)
    8298:	4809      	ldr	r0, [pc, #36]	; (82c0 <bt_conn_init+0x34>)
    829a:	f016 fcd7 	bl	1ec4c <k_queue_append>
    829e:	490a      	ldr	r1, [pc, #40]	; (82c8 <bt_conn_init+0x3c>)
    82a0:	4807      	ldr	r0, [pc, #28]	; (82c0 <bt_conn_init+0x34>)
    82a2:	f016 fcd3 	bl	1ec4c <k_queue_append>
	}

	bt_att_init();
    82a6:	f014 ff90 	bl	1d1ca <bt_att_init>

	err = bt_smp_init();
    82aa:	f002 fe7f 	bl	afac <bt_smp_init>
	if (err) {
    82ae:	4604      	mov	r4, r0
    82b0:	b908      	cbnz	r0, 82b6 <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    82b2:	f014 fb69 	bl	1c988 <bt_l2cap_init>
#endif /* !defined(CONFIG_BT_WHITELIST) */
		}
	}

	return 0;
}
    82b6:	4620      	mov	r0, r4
    82b8:	bd10      	pop	{r4, pc}
    82ba:	bf00      	nop
    82bc:	200014b8 	.word	0x200014b8
    82c0:	20000b24 	.word	0x20000b24
    82c4:	200014c8 	.word	0x200014c8
    82c8:	200014d8 	.word	0x200014d8

000082cc <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    82cc:	4b04      	ldr	r3, [pc, #16]	; (82e0 <l2cap_accept+0x14>)
    82ce:	6818      	ldr	r0, [r3, #0]
    82d0:	b918      	cbnz	r0, 82da <l2cap_accept+0xe>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    82d2:	4a04      	ldr	r2, [pc, #16]	; (82e4 <l2cap_accept+0x18>)
    82d4:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    82d6:	600b      	str	r3, [r1, #0]

		return 0;
    82d8:	4770      	bx	lr
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    82da:	f06f 000b 	mvn.w	r0, #11
}
    82de:	4770      	bx	lr
    82e0:	20000e28 	.word	0x20000e28
    82e4:	0001fa7c 	.word	0x0001fa7c

000082e8 <bt_l2cap_connected>:
{
    82e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    82ec:	4e29      	ldr	r6, [pc, #164]	; (8394 <bt_l2cap_connected+0xac>)
    82ee:	4f2a      	ldr	r7, [pc, #168]	; (8398 <bt_l2cap_connected+0xb0>)
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    82f0:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 839c <bt_l2cap_connected+0xb4>
{
    82f4:	4604      	mov	r4, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    82f6:	42be      	cmp	r6, r7
    82f8:	d302      	bcc.n	8300 <bt_l2cap_connected+0x18>
}
    82fa:	b003      	add	sp, #12
    82fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    8300:	6873      	ldr	r3, [r6, #4]
    8302:	a901      	add	r1, sp, #4
    8304:	4620      	mov	r0, r4
    8306:	4798      	blx	r3
    8308:	2800      	cmp	r0, #0
    830a:	db3d      	blt.n	8388 <bt_l2cap_connected+0xa0>
		ch = BT_L2CAP_LE_CHAN(chan);
    830c:	9d01      	ldr	r5, [sp, #4]
		ch->rx.cid = fchan->cid;
    830e:	8833      	ldrh	r3, [r6, #0]
    8310:	f8a5 3048 	strh.w	r3, [r5, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    8314:	f8a5 3054 	strh.w	r3, [r5, #84]	; 0x54
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    8318:	4641      	mov	r1, r8
    831a:	f105 0010 	add.w	r0, r5, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    831e:	f8d6 9008 	ldr.w	r9, [r6, #8]
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    8322:	f016 fe4b 	bl	1efbc <k_delayed_work_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8326:	f3bf 8f5b 	dmb	ish
    832a:	f105 0340 	add.w	r3, r5, #64	; 0x40
    832e:	2200      	movs	r2, #0
    8330:	e853 1f00 	ldrex	r1, [r3]
    8334:	e843 2000 	strex	r0, r2, [r3]
    8338:	2800      	cmp	r0, #0
    833a:	d1f9      	bne.n	8330 <bt_l2cap_connected+0x48>
    833c:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    8340:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    8342:	6d22      	ldr	r2, [r4, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    8344:	f105 0308 	add.w	r3, r5, #8
    8348:	bb02      	cbnz	r2, 838c <bt_l2cap_connected+0xa4>
	list->head = node;
    834a:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		if (chan->ops->connected) {
    834e:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    8350:	602c      	str	r4, [r5, #0]
		if (chan->ops->connected) {
    8352:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    8354:	f8c5 900c 	str.w	r9, [r5, #12]
		if (chan->ops->connected) {
    8358:	681b      	ldr	r3, [r3, #0]
    835a:	b103      	cbz	r3, 835e <bt_l2cap_connected+0x76>
			chan->ops->connected(chan);
    835c:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    835e:	9b01      	ldr	r3, [sp, #4]
    8360:	f3bf 8f5b 	dmb	ish
    8364:	3340      	adds	r3, #64	; 0x40
    8366:	e853 2f00 	ldrex	r2, [r3]
    836a:	f042 0201 	orr.w	r2, r2, #1
    836e:	e843 2100 	strex	r1, r2, [r3]
    8372:	2900      	cmp	r1, #0
    8374:	d1f7      	bne.n	8366 <bt_l2cap_connected+0x7e>
    8376:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    837a:	9801      	ldr	r0, [sp, #4]
    837c:	6843      	ldr	r3, [r0, #4]
    837e:	699b      	ldr	r3, [r3, #24]
    8380:	b113      	cbz	r3, 8388 <bt_l2cap_connected+0xa0>
			chan->ops->status(chan, chan->status);
    8382:	f100 0140 	add.w	r1, r0, #64	; 0x40
    8386:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    8388:	360c      	adds	r6, #12
    838a:	e7b4      	b.n	82f6 <bt_l2cap_connected+0xe>
	parent->next = child;
    838c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    838e:	6523      	str	r3, [r4, #80]	; 0x50
}
    8390:	e7dd      	b.n	834e <bt_l2cap_connected+0x66>
    8392:	bf00      	nop
    8394:	0001f58c 	.word	0x0001f58c
    8398:	0001f5b0 	.word	0x0001f5b0
    839c:	0001c809 	.word	0x0001c809

000083a0 <bt_l2cap_update_conn_param>:
{
    83a0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	ident++;
    83a2:	4b15      	ldr	r3, [pc, #84]	; (83f8 <bt_l2cap_update_conn_param+0x58>)
    83a4:	781a      	ldrb	r2, [r3, #0]
    83a6:	3201      	adds	r2, #1
	if (!ident) {
    83a8:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
		ident++;
    83ac:	bf08      	it	eq
    83ae:	2201      	moveq	r2, #1
    83b0:	701a      	strb	r2, [r3, #0]
{
    83b2:	4605      	mov	r5, r0
    83b4:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    83b6:	2208      	movs	r2, #8
    83b8:	7819      	ldrb	r1, [r3, #0]
    83ba:	2012      	movs	r0, #18
    83bc:	f014 f9d6 	bl	1c76c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
    83c0:	4606      	mov	r6, r0
    83c2:	b1b0      	cbz	r0, 83f2 <bt_l2cap_update_conn_param+0x52>
	req = net_buf_add(buf, sizeof(*req));
    83c4:	2108      	movs	r1, #8
    83c6:	4408      	add	r0, r1
    83c8:	f016 f8e4 	bl	1e594 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    83cc:	8822      	ldrh	r2, [r4, #0]
    83ce:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    83d0:	8862      	ldrh	r2, [r4, #2]
    83d2:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    83d4:	88a2      	ldrh	r2, [r4, #4]
    83d6:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    83d8:	88e2      	ldrh	r2, [r4, #6]
    83da:	80c2      	strh	r2, [r0, #6]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    83dc:	2400      	movs	r4, #0
    83de:	9400      	str	r4, [sp, #0]
    83e0:	4623      	mov	r3, r4
    83e2:	4632      	mov	r2, r6
    83e4:	2105      	movs	r1, #5
    83e6:	4628      	mov	r0, r5
    83e8:	f014 fa4d 	bl	1c886 <bt_l2cap_send_cb>
	return 0;
    83ec:	4620      	mov	r0, r4
}
    83ee:	b002      	add	sp, #8
    83f0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    83f2:	f06f 000b 	mvn.w	r0, #11
    83f6:	e7fa      	b.n	83ee <bt_l2cap_update_conn_param+0x4e>
    83f8:	200029c8 	.word	0x200029c8

000083fc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    83fc:	4b02      	ldr	r3, [pc, #8]	; (8408 <att_cfm_sent+0xc>)
    83fe:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    8402:	f014 baef 	b.w	1c9e4 <att_sent>
    8406:	bf00      	nop
    8408:	0001cd93 	.word	0x0001cd93

0000840c <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    840c:	4b02      	ldr	r3, [pc, #8]	; (8418 <att_rsp_sent+0xc>)
    840e:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    8412:	f014 bae7 	b.w	1c9e4 <att_sent>
    8416:	bf00      	nop
    8418:	0001cd77 	.word	0x0001cd77

0000841c <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    841c:	4b02      	ldr	r3, [pc, #8]	; (8428 <att_req_sent+0xc>)
    841e:	f8c1 3120 	str.w	r3, [r1, #288]	; 0x120

	att_sent(conn, user_data);
    8422:	f014 badf 	b.w	1c9e4 <att_sent>
    8426:	bf00      	nop
    8428:	00008599 	.word	0x00008599

0000842c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    842c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    842e:	3808      	subs	r0, #8
    8430:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    8432:	a901      	add	r1, sp, #4
    8434:	4802      	ldr	r0, [pc, #8]	; (8440 <bt_att_released+0x14>)
    8436:	f010 fb11 	bl	18a5c <k_mem_slab_free>
}
    843a:	b003      	add	sp, #12
    843c:	f85d fb04 	ldr.w	pc, [sp], #4
    8440:	20000a90 	.word	0x20000a90

00008444 <read_group_cb>:
{
    8444:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    8448:	4606      	mov	r6, r0
    844a:	460d      	mov	r5, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    844c:	f04f 0800 	mov.w	r8, #0
    8450:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8454:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    8456:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8458:	f88d 8008 	strb.w	r8, [sp, #8]
    845c:	a902      	add	r1, sp, #8
{
    845e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8460:	f8ad 300a 	strh.w	r3, [sp, #10]
    8464:	f013 fbe0 	bl	1bc28 <bt_uuid_cmp>
    8468:	b1a0      	cbz	r0, 8494 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    846a:	f642 0301 	movw	r3, #10241	; 0x2801
    846e:	6830      	ldr	r0, [r6, #0]
    8470:	f88d 800c 	strb.w	r8, [sp, #12]
    8474:	a903      	add	r1, sp, #12
    8476:	f8ad 300e 	strh.w	r3, [sp, #14]
    847a:	f013 fbd5 	bl	1bc28 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    847e:	b148      	cbz	r0, 8494 <read_group_cb+0x50>
		if (data->group &&
    8480:	6923      	ldr	r3, [r4, #16]
    8482:	b11b      	cbz	r3, 848c <read_group_cb+0x48>
    8484:	885a      	ldrh	r2, [r3, #2]
    8486:	42aa      	cmp	r2, r5
    8488:	d200      	bcs.n	848c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    848a:	805d      	strh	r5, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    848c:	2001      	movs	r0, #1
}
    848e:	b004      	add	sp, #16
    8490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8494:	6861      	ldr	r1, [r4, #4]
    8496:	6830      	ldr	r0, [r6, #0]
    8498:	f013 fbc6 	bl	1bc28 <bt_uuid_cmp>
    849c:	b110      	cbz	r0, 84a4 <read_group_cb+0x60>
		data->group = NULL;
    849e:	2300      	movs	r3, #0
    84a0:	6123      	str	r3, [r4, #16]
    84a2:	e7f3      	b.n	848c <read_group_cb+0x48>
	if (data->rsp->len &&
    84a4:	68e3      	ldr	r3, [r4, #12]
    84a6:	68a0      	ldr	r0, [r4, #8]
    84a8:	781a      	ldrb	r2, [r3, #0]
    84aa:	b13a      	cbz	r2, 84bc <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    84ac:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    84b0:	8981      	ldrh	r1, [r0, #12]
    84b2:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    84b4:	4293      	cmp	r3, r2
    84b6:	da01      	bge.n	84bc <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    84b8:	2000      	movs	r0, #0
    84ba:	e7e8      	b.n	848e <read_group_cb+0x4a>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    84bc:	2104      	movs	r1, #4
    84be:	3008      	adds	r0, #8
    84c0:	f016 f868 	bl	1e594 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    84c4:	4b09      	ldr	r3, [pc, #36]	; (84ec <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    84c6:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    84c8:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    84ca:	8005      	strh	r5, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    84cc:	8045      	strh	r5, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    84ce:	4631      	mov	r1, r6
    84d0:	9300      	str	r3, [sp, #0]
    84d2:	9401      	str	r4, [sp, #4]
    84d4:	2300      	movs	r3, #0
    84d6:	4638      	mov	r0, r7
    84d8:	f014 fb1e 	bl	1cb18 <att_chan_read>
	if (read < 0) {
    84dc:	2800      	cmp	r0, #0
    84de:	dbeb      	blt.n	84b8 <read_group_cb+0x74>
	if (!data->group) {
    84e0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    84e2:	3800      	subs	r0, #0
    84e4:	bf18      	it	ne
    84e6:	2001      	movne	r0, #1
    84e8:	e7d1      	b.n	848e <read_group_cb+0x4a>
    84ea:	bf00      	nop
    84ec:	0001cd57 	.word	0x0001cd57

000084f0 <read_type_cb>:
{
    84f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    84f4:	f8d2 8000 	ldr.w	r8, [r2]
{
    84f8:	4606      	mov	r6, r0
    84fa:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    84fc:	6800      	ldr	r0, [r0, #0]
    84fe:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    8500:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    8504:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    8506:	f013 fb8f 	bl	1bc28 <bt_uuid_cmp>
    850a:	4607      	mov	r7, r0
    850c:	2800      	cmp	r0, #0
    850e:	d13e      	bne.n	858e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8510:	4628      	mov	r0, r5
    8512:	2215      	movs	r2, #21
    8514:	4631      	mov	r1, r6
    8516:	f015 f9ac 	bl	1d872 <bt_gatt_check_perm>
    851a:	4605      	mov	r5, r0
    851c:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    851e:	b148      	cbz	r0, 8534 <read_type_cb+0x44>
		if (data->rsp->len) {
    8520:	68e3      	ldr	r3, [r4, #12]
    8522:	781b      	ldrb	r3, [r3, #0]
    8524:	b923      	cbnz	r3, 8530 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    8526:	2500      	movs	r5, #0
}
    8528:	4628      	mov	r0, r5
    852a:	b003      	add	sp, #12
    852c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    8530:	7527      	strb	r7, [r4, #20]
    8532:	e7f8      	b.n	8526 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8534:	68a0      	ldr	r0, [r4, #8]
    8536:	f016 f80b 	bl	1e550 <net_buf_frag_last>
    853a:	2102      	movs	r1, #2
    853c:	3008      	adds	r0, #8
    853e:	f016 f829 	bl	1e594 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8542:	4b14      	ldr	r3, [pc, #80]	; (8594 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    8544:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    8546:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    8548:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    854c:	4631      	mov	r1, r6
    854e:	9300      	str	r3, [sp, #0]
    8550:	9401      	str	r4, [sp, #4]
    8552:	462b      	mov	r3, r5
    8554:	4640      	mov	r0, r8
    8556:	f014 fadf 	bl	1cb18 <att_chan_read>
	if (read < 0) {
    855a:	2800      	cmp	r0, #0
    855c:	da07      	bge.n	856e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    855e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    8562:	bf26      	itte	cs
    8564:	4240      	negcs	r0, r0
    8566:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    8568:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    856a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    856c:	e7dc      	b.n	8528 <read_type_cb+0x38>
	if (!data->item) {
    856e:	6923      	ldr	r3, [r4, #16]
    8570:	2b00      	cmp	r3, #0
    8572:	d0d8      	beq.n	8526 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8574:	68a0      	ldr	r0, [r4, #8]
    8576:	f014 fa2d 	bl	1c9d4 <net_buf_frags_len>
    857a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    857e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    8580:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    8582:	7818      	ldrb	r0, [r3, #0]
    8584:	4285      	cmp	r5, r0
    8586:	bf94      	ite	ls
    8588:	2500      	movls	r5, #0
    858a:	2501      	movhi	r5, #1
    858c:	e7cc      	b.n	8528 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    858e:	2501      	movs	r5, #1
    8590:	e7ca      	b.n	8528 <read_type_cb+0x38>
    8592:	bf00      	nop
    8594:	0001c9f1 	.word	0x0001c9f1

00008598 <chan_req_sent>:
	if (chan->req) {
    8598:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    859c:	b13b      	cbz	r3, 85ae <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    859e:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    85a2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    85a6:	4802      	ldr	r0, [pc, #8]	; (85b0 <chan_req_sent+0x18>)
    85a8:	2300      	movs	r3, #0
    85aa:	f011 b84d 	b.w	19648 <k_delayed_work_submit_to_queue>
}
    85ae:	4770      	bx	lr
    85b0:	20001348 	.word	0x20001348

000085b4 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    85b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    85b6:	2300      	movs	r3, #0
{
    85b8:	4607      	mov	r7, r0
    85ba:	460e      	mov	r6, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    85bc:	4822      	ldr	r0, [pc, #136]	; (8648 <bt_att_accept+0x94>)
    85be:	2200      	movs	r2, #0
    85c0:	4669      	mov	r1, sp
    85c2:	f010 fa19 	bl	189f8 <k_mem_slab_alloc>
    85c6:	4604      	mov	r4, r0
    85c8:	b120      	cbz	r0, 85d4 <bt_att_accept+0x20>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    85ca:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    85ce:	4620      	mov	r0, r4
    85d0:	b003      	add	sp, #12
    85d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    85d4:	4601      	mov	r1, r0
    85d6:	2244      	movs	r2, #68	; 0x44
    85d8:	9800      	ldr	r0, [sp, #0]
    85da:	f013 fa51 	bl	1ba80 <memset>
	att->conn = conn;
    85de:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    85e0:	481a      	ldr	r0, [pc, #104]	; (864c <bt_att_accept+0x98>)
	list->tail = NULL;
    85e2:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    85e4:	e9c5 7400 	strd	r7, r4, [r5]
	list->tail = NULL;
    85e8:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    85ec:	2200      	movs	r2, #0
    85ee:	2300      	movs	r3, #0
    85f0:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    85f2:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    85f4:	f010 fa00 	bl	189f8 <k_mem_slab_alloc>
    85f8:	4604      	mov	r4, r0
    85fa:	2800      	cmp	r0, #0
    85fc:	d1e5      	bne.n	85ca <bt_att_accept+0x16>
	(void)memset(chan, 0, sizeof(*chan));
    85fe:	4601      	mov	r1, r0
    8600:	f44f 7298 	mov.w	r2, #304	; 0x130
    8604:	9801      	ldr	r0, [sp, #4]
    8606:	f013 fa3b 	bl	1ba80 <memset>
	chan->chan.chan.ops = &ops;
    860a:	9801      	ldr	r0, [sp, #4]
    860c:	4b10      	ldr	r3, [pc, #64]	; (8650 <bt_att_accept+0x9c>)
    860e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    8610:	30c8      	adds	r0, #200	; 0xc8
    8612:	f016 fb0f 	bl	1ec34 <z_impl_k_queue_init>
	k_sem_init(&chan->tx_sem, CONFIG_BT_ATT_TX_MAX, CONFIG_BT_ATT_TX_MAX);
    8616:	9801      	ldr	r0, [sp, #4]
    8618:	f500 7088 	add.w	r0, r0, #272	; 0x110
	return z_impl_k_sem_init(sem, initial_count, limit);
    861c:	2203      	movs	r2, #3
    861e:	4611      	mov	r1, r2
    8620:	f016 fc4e 	bl	1eec0 <z_impl_k_sem_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8624:	9b01      	ldr	r3, [sp, #4]
    8626:	f3bf 8f5b 	dmb	ish
    862a:	33c0      	adds	r3, #192	; 0xc0
    862c:	e853 2f00 	ldrex	r2, [r3]
    8630:	e843 4100 	strex	r1, r4, [r3]
    8634:	2900      	cmp	r1, #0
    8636:	d1f9      	bne.n	862c <bt_att_accept+0x78>
    8638:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    863c:	9b01      	ldr	r3, [sp, #4]
    863e:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    8642:	6033      	str	r3, [r6, #0]
	return 0;
    8644:	e7c3      	b.n	85ce <bt_att_accept+0x1a>
    8646:	bf00      	nop
    8648:	20000a74 	.word	0x20000a74
    864c:	20000a90 	.word	0x20000a90
    8650:	2000055c 	.word	0x2000055c

00008654 <bt_att_connected>:
{
    8654:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8656:	2104      	movs	r1, #4
{
    8658:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    865a:	6800      	ldr	r0, [r0, #0]
    865c:	f014 f959 	bl	1c912 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    8660:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    8664:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    8666:	b93b      	cbnz	r3, 8678 <bt_att_connected+0x24>
	z_impl_k_queue_init(queue);
    8668:	f105 000c 	add.w	r0, r5, #12
    866c:	f016 fae2 	bl	1ec34 <z_impl_k_queue_init>
    8670:	f105 0024 	add.w	r0, r5, #36	; 0x24
    8674:	f016 fade 	bl	1ec34 <z_impl_k_queue_init>
Z_GENLIST_PREPEND(slist, snode)
    8678:	6bea      	ldr	r2, [r5, #60]	; 0x3c
	parent->next = child;
    867a:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
Z_GENLIST_PREPEND(slist, snode)
    867e:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    8680:	f504 7392 	add.w	r3, r4, #292	; 0x124
	list->head = node;
    8684:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    8686:	b902      	cbnz	r2, 868a <bt_att_connected+0x36>
	list->tail = node;
    8688:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    868a:	f3bf 8f5b 	dmb	ish
    868e:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    8692:	4908      	ldr	r1, [pc, #32]	; (86b4 <bt_att_connected+0x60>)
    8694:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    8698:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    869a:	bf5e      	ittt	pl
    869c:	2317      	movpl	r3, #23
    869e:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    86a2:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    86a6:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
}
    86aa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	k_delayed_work_init(&att_chan->timeout_work, att_timeout);
    86ae:	f016 bc85 	b.w	1efbc <k_delayed_work_init>
    86b2:	bf00      	nop
    86b4:	0001d26d 	.word	0x0001d26d

000086b8 <prep_write_cb>:
{
    86b8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    86bc:	4614      	mov	r4, r2
    86be:	4606      	mov	r6, r0
    86c0:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    86c2:	222a      	movs	r2, #42	; 0x2a
    86c4:	4601      	mov	r1, r0
    86c6:	6820      	ldr	r0, [r4, #0]
    86c8:	f015 f8d3 	bl	1d872 <bt_gatt_check_perm>
    86cc:	4605      	mov	r5, r0
    86ce:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    86d0:	2800      	cmp	r0, #0
    86d2:	d12e      	bne.n	8732 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    86d4:	7cb3      	ldrb	r3, [r6, #18]
    86d6:	065b      	lsls	r3, r3, #25
    86d8:	d516      	bpl.n	8708 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    86da:	2301      	movs	r3, #1
    86dc:	9301      	str	r3, [sp, #4]
    86de:	89e3      	ldrh	r3, [r4, #14]
    86e0:	9300      	str	r3, [sp, #0]
    86e2:	f8d6 8008 	ldr.w	r8, [r6, #8]
    86e6:	89a3      	ldrh	r3, [r4, #12]
    86e8:	68a2      	ldr	r2, [r4, #8]
    86ea:	6820      	ldr	r0, [r4, #0]
    86ec:	4631      	mov	r1, r6
    86ee:	47c0      	blx	r8
	if (write != 0) {
    86f0:	b150      	cbz	r0, 8708 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    86f2:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    86f6:	bf26      	itte	cs
    86f8:	4243      	negcs	r3, r0
    86fa:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    86fc:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    86fe:	7423      	strb	r3, [r4, #16]
}
    8700:	4628      	mov	r0, r5
    8702:	b002      	add	sp, #8
    8704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    8708:	480b      	ldr	r0, [pc, #44]	; (8738 <prep_write_cb+0x80>)
    870a:	2200      	movs	r2, #0
    870c:	2300      	movs	r3, #0
    870e:	f015 feeb 	bl	1e4e8 <net_buf_alloc_fixed>
    8712:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    8714:	b908      	cbnz	r0, 871a <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    8716:	2309      	movs	r3, #9
    8718:	e7f1      	b.n	86fe <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    871a:	89e3      	ldrh	r3, [r4, #14]
    871c:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    871e:	8287      	strh	r7, [r0, #20]
	net_buf_add_mem(data->buf, data->value, data->len);
    8720:	89a2      	ldrh	r2, [r4, #12]
    8722:	68a1      	ldr	r1, [r4, #8]
    8724:	3008      	adds	r0, #8
    8726:	f015 ff3b 	bl	1e5a0 <net_buf_simple_add_mem>
	data->err = 0U;
    872a:	2300      	movs	r3, #0
    872c:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    872e:	2501      	movs	r5, #1
    8730:	e7e6      	b.n	8700 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    8732:	2500      	movs	r5, #0
    8734:	e7e4      	b.n	8700 <prep_write_cb+0x48>
    8736:	bf00      	nop
    8738:	20000c44 	.word	0x20000c44

0000873c <chan_send>:
{
    873c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    8740:	688b      	ldr	r3, [r1, #8]
    8742:	781b      	ldrb	r3, [r3, #0]
    8744:	2bd2      	cmp	r3, #210	; 0xd2
{
    8746:	4605      	mov	r5, r0
    8748:	460c      	mov	r4, r1
    874a:	4691      	mov	r9, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    874c:	d10c      	bne.n	8768 <chan_send+0x2c>
		err = bt_smp_sign(chan->att->conn, buf);
    874e:	6803      	ldr	r3, [r0, #0]
    8750:	6818      	ldr	r0, [r3, #0]
    8752:	f015 fdab 	bl	1e2ac <bt_smp_sign>
		if (err) {
    8756:	4606      	mov	r6, r0
    8758:	b130      	cbz	r0, 8768 <chan_send+0x2c>
		net_buf_unref(buf);
    875a:	4620      	mov	r0, r4
    875c:	f00e fb50 	bl	16e00 <net_buf_unref>
}
    8760:	4630      	mov	r0, r6
    8762:	b003      	add	sp, #12
    8764:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    8768:	f104 0008 	add.w	r0, r4, #8
    876c:	f015 ff49 	bl	1e602 <net_buf_simple_headroom>
	state->len = buf->len;
    8770:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    8774:	4607      	mov	r7, r0
	chan->sent = cb ? cb : chan_cb(buf);
    8776:	f1b9 0f00 	cmp.w	r9, #0
    877a:	d10a      	bne.n	8792 <chan_send+0x56>
	switch (att_op_get_type(buf->data[0])) {
    877c:	68a3      	ldr	r3, [r4, #8]
    877e:	7818      	ldrb	r0, [r3, #0]
    8780:	f014 f946 	bl	1ca10 <att_op_get_type>
    8784:	1e43      	subs	r3, r0, #1
    8786:	b2db      	uxtb	r3, r3
    8788:	2b04      	cmp	r3, #4
    878a:	bf9c      	itt	ls
    878c:	4a16      	ldrls	r2, [pc, #88]	; (87e8 <chan_send+0xac>)
    878e:	f852 9023 	ldrls.w	r9, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8792:	682b      	ldr	r3, [r5, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    8794:	f8c5 9128 	str.w	r9, [r5, #296]	; 0x128
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    8798:	4620      	mov	r0, r4
    879a:	681e      	ldr	r6, [r3, #0]
    879c:	f015 fed4 	bl	1e548 <net_buf_ref>
    87a0:	f8d5 1128 	ldr.w	r1, [r5, #296]	; 0x128
	if (cb == chan_rsp_sent) {
    87a4:	4b11      	ldr	r3, [pc, #68]	; (87ec <chan_send+0xb0>)
    87a6:	4299      	cmp	r1, r3
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    87a8:	4602      	mov	r2, r0
	if (cb == chan_rsp_sent) {
    87aa:	d019      	beq.n	87e0 <chan_send+0xa4>
	} else if (cb == chan_cfm_sent) {
    87ac:	4b10      	ldr	r3, [pc, #64]	; (87f0 <chan_send+0xb4>)
    87ae:	4299      	cmp	r1, r3
    87b0:	d018      	beq.n	87e4 <chan_send+0xa8>
		return att_sent;
    87b2:	f8df c050 	ldr.w	ip, [pc, #80]	; 8804 <chan_send+0xc8>
    87b6:	4b0f      	ldr	r3, [pc, #60]	; (87f4 <chan_send+0xb8>)
    87b8:	480f      	ldr	r0, [pc, #60]	; (87f8 <chan_send+0xbc>)
    87ba:	4561      	cmp	r1, ip
    87bc:	bf18      	it	ne
    87be:	4603      	movne	r3, r0
				&chan->chan.chan);
    87c0:	3508      	adds	r5, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    87c2:	4630      	mov	r0, r6
    87c4:	9500      	str	r5, [sp, #0]
    87c6:	2104      	movs	r1, #4
    87c8:	f014 f85d 	bl	1c886 <bt_l2cap_send_cb>
	if (!err) {
    87cc:	4606      	mov	r6, r0
    87ce:	2800      	cmp	r0, #0
    87d0:	d0c3      	beq.n	875a <chan_send+0x1e>
	buf->data = buf->__buf + state->offset;
    87d2:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    87d4:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    87d8:	fa10 f787 	uxtah	r7, r0, r7
    87dc:	60a7      	str	r7, [r4, #8]
}
    87de:	e7bf      	b.n	8760 <chan_send+0x24>
		return att_rsp_sent;
    87e0:	4b06      	ldr	r3, [pc, #24]	; (87fc <chan_send+0xc0>)
    87e2:	e7ed      	b.n	87c0 <chan_send+0x84>
		return att_cfm_sent;
    87e4:	4b06      	ldr	r3, [pc, #24]	; (8800 <chan_send+0xc4>)
    87e6:	e7eb      	b.n	87c0 <chan_send+0x84>
    87e8:	0001fa9c 	.word	0x0001fa9c
    87ec:	0001cd77 	.word	0x0001cd77
    87f0:	0001cd93 	.word	0x0001cd93
    87f4:	0000841d 	.word	0x0000841d
    87f8:	0001c9e5 	.word	0x0001c9e5
    87fc:	0000840d 	.word	0x0000840d
    8800:	000083fd 	.word	0x000083fd
    8804:	00008599 	.word	0x00008599

00008808 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8808:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    880c:	4688      	mov	r8, r1
    880e:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8810:	2101      	movs	r1, #1
    8812:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
    8814:	4605      	mov	r5, r0
    8816:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8818:	f014 fc1a 	bl	1d050 <bt_att_chan_create_pdu>
	if (!buf) {
    881c:	4604      	mov	r4, r0
    881e:	b178      	cbz	r0, 8840 <send_err_rsp.part.0+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8820:	2104      	movs	r1, #4
    8822:	3008      	adds	r0, #8
    8824:	f015 feb6 	bl	1e594 <net_buf_simple_add>
	rsp->request = req;
    8828:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
    882c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
    882e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8832:	4621      	mov	r1, r4
    8834:	4628      	mov	r0, r5
    8836:	4a03      	ldr	r2, [pc, #12]	; (8844 <send_err_rsp.part.0+0x3c>)
}
    8838:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    883c:	f014 bb9f 	b.w	1cf7e <bt_att_chan_send_rsp>
}
    8840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8844:	0001cd77 	.word	0x0001cd77

00008848 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    8848:	898b      	ldrh	r3, [r1, #12]
{
    884a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    884e:	4604      	mov	r4, r0
    8850:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    8852:	2b00      	cmp	r3, #0
    8854:	d05a      	beq.n	890c <bt_att_recv+0xc4>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8856:	2101      	movs	r1, #1
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    8858:	f1a0 0608 	sub.w	r6, r0, #8
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    885c:	f105 0008 	add.w	r0, r5, #8
    8860:	f015 febf 	bl	1e5e2 <net_buf_simple_pull_mem>
		if (hdr->code == handlers[i].op) {
    8864:	4a2d      	ldr	r2, [pc, #180]	; (891c <bt_att_recv+0xd4>)
    8866:	7801      	ldrb	r1, [r0, #0]
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    8868:	4607      	mov	r7, r0
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    886a:	2300      	movs	r3, #0
    886c:	4694      	mov	ip, r2
		if (hdr->code == handlers[i].op) {
    886e:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    8872:	4288      	cmp	r0, r1
    8874:	d11a      	bne.n	88ac <bt_att_recv+0x64>
		if (handler->type == ATT_REQUEST &&
    8876:	00d9      	lsls	r1, r3, #3
    8878:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    887c:	f893 8002 	ldrb.w	r8, [r3, #2]
    8880:	f1b8 0f01 	cmp.w	r8, #1
    8884:	d020      	beq.n	88c8 <bt_att_recv+0x80>
		} else if (handler->type == ATT_INDICATION &&
    8886:	f1b8 0f05 	cmp.w	r8, #5
    888a:	d12d      	bne.n	88e8 <bt_att_recv+0xa0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    888c:	f3bf 8f5b 	dmb	ish
    8890:	34b8      	adds	r4, #184	; 0xb8
    8892:	e854 2f00 	ldrex	r2, [r4]
    8896:	f042 0302 	orr.w	r3, r2, #2
    889a:	e844 3000 	strex	r0, r3, [r4]
    889e:	2800      	cmp	r0, #0
    88a0:	d1f7      	bne.n	8892 <bt_att_recv+0x4a>
    88a2:	f3bf 8f5b 	dmb	ish
    88a6:	f012 0f02 	tst.w	r2, #2
    88aa:	e01c      	b.n	88e6 <bt_att_recv+0x9e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    88ac:	3301      	adds	r3, #1
    88ae:	2b0e      	cmp	r3, #14
    88b0:	d1dd      	bne.n	886e <bt_att_recv+0x26>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    88b2:	4608      	mov	r0, r1
    88b4:	f014 f8ac 	bl	1ca10 <att_op_get_type>
    88b8:	b340      	cbz	r0, 890c <bt_att_recv+0xc4>
	if (!req) {
    88ba:	b339      	cbz	r1, 890c <bt_att_recv+0xc4>
    88bc:	2306      	movs	r3, #6
    88be:	2200      	movs	r2, #0
    88c0:	4630      	mov	r0, r6
    88c2:	f7ff ffa1 	bl	8808 <send_err_rsp.part.0>
    88c6:	e021      	b.n	890c <bt_att_recv+0xc4>
    88c8:	34b8      	adds	r4, #184	; 0xb8
    88ca:	f3bf 8f5b 	dmb	ish
    88ce:	e854 3f00 	ldrex	r3, [r4]
    88d2:	f043 0201 	orr.w	r2, r3, #1
    88d6:	e844 2000 	strex	r0, r2, [r4]
    88da:	2800      	cmp	r0, #0
    88dc:	d1f7      	bne.n	88ce <bt_att_recv+0x86>
    88de:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    88e2:	f013 0f01 	tst.w	r3, #1
    88e6:	d111      	bne.n	890c <bt_att_recv+0xc4>
	if (buf->len < handler->expect_len) {
    88e8:	eb0c 0301 	add.w	r3, ip, r1
    88ec:	89a9      	ldrh	r1, [r5, #12]
    88ee:	785a      	ldrb	r2, [r3, #1]
    88f0:	4291      	cmp	r1, r2
    88f2:	d30e      	bcc.n	8912 <bt_att_recv+0xca>
		err = handler->func(att_chan, buf);
    88f4:	685b      	ldr	r3, [r3, #4]
    88f6:	4629      	mov	r1, r5
    88f8:	4630      	mov	r0, r6
    88fa:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    88fc:	f1b8 0f01 	cmp.w	r8, #1
		err = handler->func(att_chan, buf);
    8900:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    8902:	d103      	bne.n	890c <bt_att_recv+0xc4>
    8904:	b110      	cbz	r0, 890c <bt_att_recv+0xc4>
		send_err_rsp(att_chan, hdr->code, 0, err);
    8906:	7839      	ldrb	r1, [r7, #0]
	if (!req) {
    8908:	2900      	cmp	r1, #0
    890a:	d1d8      	bne.n	88be <bt_att_recv+0x76>
}
    890c:	2000      	movs	r0, #0
    890e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (handler->type == ATT_REQUEST && err) {
    8912:	f1b8 0f01 	cmp.w	r8, #1
    8916:	d1f9      	bne.n	890c <bt_att_recv+0xc4>
		err = BT_ATT_ERR_INVALID_PDU;
    8918:	2304      	movs	r3, #4
    891a:	e7f4      	b.n	8906 <bt_att_recv+0xbe>
    891c:	0001fab0 	.word	0x0001fab0

00008920 <att_write_rsp>:
{
    8920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8924:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8926:	6803      	ldr	r3, [r0, #0]
    8928:	460e      	mov	r6, r1
    892a:	3900      	subs	r1, #0
{
    892c:	b086      	sub	sp, #24
    892e:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8930:	bf18      	it	ne
    8932:	2101      	movne	r1, #1
    8934:	6818      	ldr	r0, [r3, #0]
{
    8936:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    8938:	f014 ffc6 	bl	1d8c8 <bt_gatt_change_aware>
    893c:	2800      	cmp	r0, #0
    893e:	d04e      	beq.n	89de <att_write_rsp+0xbe>
	if (!handle) {
    8940:	2f00      	cmp	r7, #0
    8942:	d04e      	beq.n	89e2 <att_write_rsp+0xc2>
	(void)memset(&data, 0, sizeof(data));
    8944:	2218      	movs	r2, #24
    8946:	2100      	movs	r1, #0
    8948:	4668      	mov	r0, sp
    894a:	f013 f899 	bl	1ba80 <memset>
	if (rsp) {
    894e:	f1b8 0f00 	cmp.w	r8, #0
    8952:	d126      	bne.n	89a2 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    8954:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8956:	4a24      	ldr	r2, [pc, #144]	; (89e8 <att_write_rsp+0xc8>)
	data.conn = chan->att->conn;
    8958:	681b      	ldr	r3, [r3, #0]
    895a:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    895c:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8960:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8964:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8966:	9303      	str	r3, [sp, #12]
	data.len = len;
    8968:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    896c:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8970:	2301      	movs	r3, #1
    8972:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8976:	4639      	mov	r1, r7
    8978:	466b      	mov	r3, sp
    897a:	4638      	mov	r0, r7
	data.req = req;
    897c:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8980:	f014 f873 	bl	1ca6a <bt_gatt_foreach_attr>
	if (data.err) {
    8984:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8988:	b30c      	cbz	r4, 89ce <att_write_rsp+0xae>
		if (rsp) {
    898a:	f1b8 0f00 	cmp.w	r8, #0
    898e:	d019      	beq.n	89c4 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    8990:	9801      	ldr	r0, [sp, #4]
    8992:	f00e fa35 	bl	16e00 <net_buf_unref>
	if (!req) {
    8996:	b976      	cbnz	r6, 89b6 <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8998:	2400      	movs	r4, #0
}
    899a:	4620      	mov	r0, r4
    899c:	b006      	add	sp, #24
    899e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    89a2:	2200      	movs	r2, #0
    89a4:	4641      	mov	r1, r8
    89a6:	4628      	mov	r0, r5
    89a8:	f014 fb52 	bl	1d050 <bt_att_chan_create_pdu>
    89ac:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    89ae:	2800      	cmp	r0, #0
    89b0:	d1d0      	bne.n	8954 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    89b2:	240e      	movs	r4, #14
    89b4:	e7f1      	b.n	899a <att_write_rsp+0x7a>
    89b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
    89ba:	463a      	mov	r2, r7
    89bc:	4631      	mov	r1, r6
    89be:	4628      	mov	r0, r5
    89c0:	f7ff ff22 	bl	8808 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    89c4:	2e18      	cmp	r6, #24
    89c6:	d1e7      	bne.n	8998 <att_write_rsp+0x78>
    89c8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    89cc:	e7e5      	b.n	899a <att_write_rsp+0x7a>
	if (data.buf) {
    89ce:	9901      	ldr	r1, [sp, #4]
    89d0:	2900      	cmp	r1, #0
    89d2:	d0e1      	beq.n	8998 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    89d4:	4a05      	ldr	r2, [pc, #20]	; (89ec <att_write_rsp+0xcc>)
    89d6:	4628      	mov	r0, r5
    89d8:	f014 fad1 	bl	1cf7e <bt_att_chan_send_rsp>
    89dc:	e7dd      	b.n	899a <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    89de:	2412      	movs	r4, #18
    89e0:	e7db      	b.n	899a <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    89e2:	2401      	movs	r4, #1
    89e4:	e7d9      	b.n	899a <att_write_rsp+0x7a>
    89e6:	bf00      	nop
    89e8:	0001cddb 	.word	0x0001cddb
    89ec:	0001cd77 	.word	0x0001cd77

000089f0 <att_exec_write_req>:
{
    89f0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
    89f4:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
    89f6:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
    89f8:	f893 8000 	ldrb.w	r8, [r3]
{
    89fc:	4606      	mov	r6, r0
	uint8_t err = 0U;
    89fe:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
    8a00:	6830      	ldr	r0, [r6, #0]
    8a02:	2200      	movs	r2, #0
    8a04:	2300      	movs	r3, #0
    8a06:	3024      	adds	r0, #36	; 0x24
    8a08:	f015 fd73 	bl	1e4f2 <net_buf_get>
    8a0c:	4605      	mov	r5, r0
    8a0e:	b978      	cbnz	r0, 8a30 <att_exec_write_req+0x40>
	if (err) {
    8a10:	bb54      	cbnz	r4, 8a68 <att_exec_write_req+0x78>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
    8a12:	2119      	movs	r1, #25
    8a14:	4622      	mov	r2, r4
    8a16:	4638      	mov	r0, r7
    8a18:	f014 fb97 	bl	1d14a <bt_att_create_pdu>
	if (!buf) {
    8a1c:	4601      	mov	r1, r0
    8a1e:	b328      	cbz	r0, 8a6c <att_exec_write_req+0x7c>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
    8a20:	4a13      	ldr	r2, [pc, #76]	; (8a70 <att_exec_write_req+0x80>)
    8a22:	4630      	mov	r0, r6
    8a24:	f014 faab 	bl	1cf7e <bt_att_chan_send_rsp>
}
    8a28:	4620      	mov	r0, r4
    8a2a:	b004      	add	sp, #16
    8a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
    8a30:	b9b4      	cbnz	r4, 8a60 <att_exec_write_req+0x70>
    8a32:	f1b8 0f01 	cmp.w	r8, #1
    8a36:	d113      	bne.n	8a60 <att_exec_write_req+0x70>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
    8a38:	89aa      	ldrh	r2, [r5, #12]
    8a3a:	8aab      	ldrh	r3, [r5, #20]
    8a3c:	9202      	str	r2, [sp, #8]
    8a3e:	68aa      	ldr	r2, [r5, #8]
    8a40:	9201      	str	r2, [sp, #4]
    8a42:	8aea      	ldrh	r2, [r5, #22]
    8a44:	9200      	str	r2, [sp, #0]
    8a46:	2118      	movs	r1, #24
    8a48:	4622      	mov	r2, r4
    8a4a:	4630      	mov	r0, r6
    8a4c:	f7ff ff68 	bl	8920 <att_write_rsp>
			if (err) {
    8a50:	4604      	mov	r4, r0
    8a52:	b128      	cbz	r0, 8a60 <att_exec_write_req+0x70>
	if (!req) {
    8a54:	4603      	mov	r3, r0
    8a56:	8aaa      	ldrh	r2, [r5, #20]
    8a58:	2118      	movs	r1, #24
    8a5a:	4630      	mov	r0, r6
    8a5c:	f7ff fed4 	bl	8808 <send_err_rsp.part.0>
		net_buf_unref(buf);
    8a60:	4628      	mov	r0, r5
    8a62:	f00e f9cd 	bl	16e00 <net_buf_unref>
    8a66:	e7cb      	b.n	8a00 <att_exec_write_req+0x10>
		return 0;
    8a68:	4604      	mov	r4, r0
    8a6a:	e7dd      	b.n	8a28 <att_exec_write_req+0x38>
		return BT_ATT_ERR_UNLIKELY;
    8a6c:	240e      	movs	r4, #14
    8a6e:	e7db      	b.n	8a28 <att_exec_write_req+0x38>
    8a70:	0001cd77 	.word	0x0001cd77

00008a74 <att_prepare_write_req>:
{
    8a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8a78:	460c      	mov	r4, r1
    8a7a:	b087      	sub	sp, #28
    8a7c:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    8a7e:	2104      	movs	r1, #4
    8a80:	f104 0008 	add.w	r0, r4, #8
    8a84:	f015 fdad 	bl	1e5e2 <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    8a88:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    8a8c:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    8a90:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    8a94:	f8d4 8008 	ldr.w	r8, [r4, #8]
    8a98:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    8a9a:	2101      	movs	r1, #1
    8a9c:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    8a9e:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    8aa2:	f014 ff11 	bl	1d8c8 <bt_gatt_change_aware>
    8aa6:	2800      	cmp	r0, #0
    8aa8:	d04b      	beq.n	8b42 <att_prepare_write_req+0xce>
	if (!handle) {
    8aaa:	2e00      	cmp	r6, #0
    8aac:	d04b      	beq.n	8b46 <att_prepare_write_req+0xd2>
	(void)memset(&data, 0, sizeof(data));
    8aae:	2214      	movs	r2, #20
    8ab0:	2100      	movs	r1, #0
    8ab2:	a801      	add	r0, sp, #4
    8ab4:	f012 ffe4 	bl	1ba80 <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8ab8:	2301      	movs	r3, #1
    8aba:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8abe:	4a24      	ldr	r2, [pc, #144]	; (8b50 <att_prepare_write_req+0xdc>)
	data.conn = conn;
    8ac0:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    8ac4:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8ac6:	ab01      	add	r3, sp, #4
    8ac8:	4631      	mov	r1, r6
    8aca:	4630      	mov	r0, r6
	data.offset = offset;
    8acc:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    8ad0:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    8ad4:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    8ad8:	f013 ffc7 	bl	1ca6a <bt_gatt_foreach_attr>
	if (data.err) {
    8adc:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8ae0:	b154      	cbz	r4, 8af8 <att_prepare_write_req+0x84>
	if (!req) {
    8ae2:	4623      	mov	r3, r4
    8ae4:	4632      	mov	r2, r6
    8ae6:	2116      	movs	r1, #22
    8ae8:	4628      	mov	r0, r5
    8aea:	f7ff fe8d 	bl	8808 <send_err_rsp.part.0>
		return 0;
    8aee:	2400      	movs	r4, #0
}
    8af0:	4620      	mov	r0, r4
    8af2:	b007      	add	sp, #28
    8af4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    8af8:	6828      	ldr	r0, [r5, #0]
    8afa:	9902      	ldr	r1, [sp, #8]
    8afc:	3024      	adds	r0, #36	; 0x24
    8afe:	f015 fd16 	bl	1e52e <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    8b02:	4622      	mov	r2, r4
    8b04:	2117      	movs	r1, #23
    8b06:	4658      	mov	r0, fp
    8b08:	f014 fb1f 	bl	1d14a <bt_att_create_pdu>
    8b0c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8b0e:	b1e0      	cbz	r0, 8b4a <att_prepare_write_req+0xd6>
	rsp = net_buf_add(data.buf, sizeof(*rsp));
    8b10:	2104      	movs	r1, #4
    8b12:	3008      	adds	r0, #8
    8b14:	f015 fd3e 	bl	1e594 <net_buf_simple_add>
    8b18:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    8b1a:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    8b1e:	f8a0 9002 	strh.w	r9, [r0, #2]
	net_buf_add(data.buf, len);
    8b22:	9802      	ldr	r0, [sp, #8]
    8b24:	4639      	mov	r1, r7
    8b26:	3008      	adds	r0, #8
    8b28:	f015 fd34 	bl	1e594 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    8b2c:	463a      	mov	r2, r7
    8b2e:	4641      	mov	r1, r8
    8b30:	1d30      	adds	r0, r6, #4
    8b32:	f012 ff7a 	bl	1ba2a <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8b36:	4a07      	ldr	r2, [pc, #28]	; (8b54 <att_prepare_write_req+0xe0>)
    8b38:	9902      	ldr	r1, [sp, #8]
    8b3a:	4628      	mov	r0, r5
    8b3c:	f014 fa1f 	bl	1cf7e <bt_att_chan_send_rsp>
	return 0;
    8b40:	e7d6      	b.n	8af0 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8b42:	2412      	movs	r4, #18
    8b44:	e7d4      	b.n	8af0 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    8b46:	2401      	movs	r4, #1
    8b48:	e7d2      	b.n	8af0 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    8b4a:	240e      	movs	r4, #14
    8b4c:	e7d0      	b.n	8af0 <att_prepare_write_req+0x7c>
    8b4e:	bf00      	nop
    8b50:	000086b9 	.word	0x000086b9
    8b54:	0001cd77 	.word	0x0001cd77

00008b58 <att_read_group_req>:
{
    8b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    8b5c:	7b0c      	ldrb	r4, [r1, #12]
    8b5e:	3c04      	subs	r4, #4
    8b60:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8b62:	2c02      	cmp	r4, #2
{
    8b64:	4605      	mov	r5, r0
    8b66:	b08c      	sub	sp, #48	; 0x30
    8b68:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8b6a:	d001      	beq.n	8b70 <att_read_group_req+0x18>
    8b6c:	2c10      	cmp	r4, #16
    8b6e:	d16f      	bne.n	8c50 <att_read_group_req+0xf8>
	req = net_buf_pull_mem(buf, sizeof(*req));
    8b70:	2104      	movs	r1, #4
    8b72:	3008      	adds	r0, #8
    8b74:	f015 fd35 	bl	1e5e2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8b78:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    8b7c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8b7e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8b80:	1d01      	adds	r1, r0, #4
    8b82:	4622      	mov	r2, r4
    8b84:	4640      	mov	r0, r8
    8b86:	f013 f879 	bl	1bc7c <bt_uuid_create>
    8b8a:	2800      	cmp	r0, #0
    8b8c:	d062      	beq.n	8c54 <att_read_group_req+0xfc>
	if (!start || !end) {
    8b8e:	2e00      	cmp	r6, #0
    8b90:	d03a      	beq.n	8c08 <att_read_group_req+0xb0>
    8b92:	2400      	movs	r4, #0
    8b94:	2f00      	cmp	r7, #0
    8b96:	d036      	beq.n	8c06 <att_read_group_req+0xae>
	if (start > end) {
    8b98:	42be      	cmp	r6, r7
    8b9a:	d835      	bhi.n	8c08 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8b9c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8ba0:	a901      	add	r1, sp, #4
    8ba2:	4640      	mov	r0, r8
    8ba4:	f88d 4004 	strb.w	r4, [sp, #4]
    8ba8:	f8ad 3006 	strh.w	r3, [sp, #6]
    8bac:	f013 f83c 	bl	1bc28 <bt_uuid_cmp>
    8bb0:	2800      	cmp	r0, #0
    8bb2:	d134      	bne.n	8c1e <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    8bb4:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8bb6:	2214      	movs	r2, #20
    8bb8:	2100      	movs	r1, #0
    8bba:	a807      	add	r0, sp, #28
    8bbc:	f012 ff60 	bl	1ba80 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    8bc0:	2201      	movs	r2, #1
    8bc2:	2111      	movs	r1, #17
    8bc4:	4620      	mov	r0, r4
    8bc6:	f014 fac0 	bl	1d14a <bt_att_create_pdu>
    8bca:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    8bcc:	2800      	cmp	r0, #0
    8bce:	d041      	beq.n	8c54 <att_read_group_req+0xfc>
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8bd0:	2101      	movs	r1, #1
    8bd2:	3008      	adds	r0, #8
	data.uuid = uuid;
    8bd4:	e9cd 5807 	strd	r5, r8, [sp, #28]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8bd8:	f015 fcdc 	bl	1e594 <net_buf_simple_add>
	data.rsp->len = 0U;
    8bdc:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8be0:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8be2:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    8be4:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8be8:	4a1b      	ldr	r2, [pc, #108]	; (8c58 <att_read_group_req+0x100>)
	data.group = NULL;
    8bea:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    8bee:	4639      	mov	r1, r7
    8bf0:	4630      	mov	r0, r6
    8bf2:	f013 ff3a 	bl	1ca6a <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    8bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    8bf8:	781c      	ldrb	r4, [r3, #0]
    8bfa:	bb1c      	cbnz	r4, 8c44 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    8bfc:	9809      	ldr	r0, [sp, #36]	; 0x24
    8bfe:	f00e f8ff 	bl	16e00 <net_buf_unref>
	if (!req) {
    8c02:	230a      	movs	r3, #10
    8c04:	e018      	b.n	8c38 <att_read_group_req+0xe0>
			*err = 0U;
    8c06:	463e      	mov	r6, r7
	if (!req) {
    8c08:	2301      	movs	r3, #1
    8c0a:	4632      	mov	r2, r6
    8c0c:	2110      	movs	r1, #16
    8c0e:	4628      	mov	r0, r5
    8c10:	f7ff fdfa 	bl	8808 <send_err_rsp.part.0>
		return 0;
    8c14:	2400      	movs	r4, #0
}
    8c16:	4620      	mov	r0, r4
    8c18:	b00c      	add	sp, #48	; 0x30
    8c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    8c1e:	f642 0301 	movw	r3, #10241	; 0x2801
    8c22:	a907      	add	r1, sp, #28
    8c24:	4640      	mov	r0, r8
    8c26:	f88d 401c 	strb.w	r4, [sp, #28]
    8c2a:	f8ad 301e 	strh.w	r3, [sp, #30]
    8c2e:	f012 fffb 	bl	1bc28 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    8c32:	2800      	cmp	r0, #0
    8c34:	d0be      	beq.n	8bb4 <att_read_group_req+0x5c>
	if (!req) {
    8c36:	2310      	movs	r3, #16
    8c38:	4632      	mov	r2, r6
    8c3a:	2110      	movs	r1, #16
    8c3c:	4628      	mov	r0, r5
    8c3e:	f7ff fde3 	bl	8808 <send_err_rsp.part.0>
		return 0;
    8c42:	e7e8      	b.n	8c16 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8c44:	4a05      	ldr	r2, [pc, #20]	; (8c5c <att_read_group_req+0x104>)
    8c46:	9909      	ldr	r1, [sp, #36]	; 0x24
    8c48:	4628      	mov	r0, r5
    8c4a:	f014 f998 	bl	1cf7e <bt_att_chan_send_rsp>
	return 0;
    8c4e:	e7e1      	b.n	8c14 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    8c50:	2404      	movs	r4, #4
    8c52:	e7e0      	b.n	8c16 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    8c54:	240e      	movs	r4, #14
    8c56:	e7de      	b.n	8c16 <att_read_group_req+0xbe>
    8c58:	00008445 	.word	0x00008445
    8c5c:	0001cd77 	.word	0x0001cd77

00008c60 <att_read_mult_req>:
{
    8c60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8c64:	6886      	ldr	r6, [r0, #8]
{
    8c66:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    8c68:	2210      	movs	r2, #16
{
    8c6a:	4604      	mov	r4, r0
    8c6c:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    8c6e:	4668      	mov	r0, sp
    8c70:	2100      	movs	r1, #0
    8c72:	f012 ff05 	bl	1ba80 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    8c76:	2200      	movs	r2, #0
    8c78:	210f      	movs	r1, #15
    8c7a:	4630      	mov	r0, r6
    8c7c:	f014 fa65 	bl	1d14a <bt_att_create_pdu>
    8c80:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8c82:	b360      	cbz	r0, 8cde <att_read_mult_req+0x7e>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8c84:	f8df 9060 	ldr.w	r9, [pc, #96]	; 8ce8 <att_read_mult_req+0x88>
	data.chan = chan;
    8c88:	9400      	str	r4, [sp, #0]
		handle = net_buf_pull_le16(buf);
    8c8a:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8c8e:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    8c92:	89ab      	ldrh	r3, [r5, #12]
    8c94:	2b01      	cmp	r3, #1
    8c96:	d805      	bhi.n	8ca4 <att_read_mult_req+0x44>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8c98:	4a12      	ldr	r2, [pc, #72]	; (8ce4 <att_read_mult_req+0x84>)
    8c9a:	9902      	ldr	r1, [sp, #8]
    8c9c:	4620      	mov	r0, r4
    8c9e:	f014 f96e 	bl	1cf7e <bt_att_chan_send_rsp>
    8ca2:	e018      	b.n	8cd6 <att_read_mult_req+0x76>
		handle = net_buf_pull_le16(buf);
    8ca4:	4638      	mov	r0, r7
    8ca6:	f015 fca4 	bl	1e5f2 <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8caa:	466b      	mov	r3, sp
    8cac:	464a      	mov	r2, r9
    8cae:	4601      	mov	r1, r0
		handle = net_buf_pull_le16(buf);
    8cb0:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    8cb2:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8cb6:	f013 fed8 	bl	1ca6a <bt_gatt_foreach_attr>
		if (data.err) {
    8cba:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8cbe:	2b00      	cmp	r3, #0
    8cc0:	d0e7      	beq.n	8c92 <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    8cc2:	9802      	ldr	r0, [sp, #8]
    8cc4:	f00e f89c 	bl	16e00 <net_buf_unref>
	if (!req) {
    8cc8:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8ccc:	4632      	mov	r2, r6
    8cce:	210e      	movs	r1, #14
    8cd0:	4620      	mov	r0, r4
    8cd2:	f7ff fd99 	bl	8808 <send_err_rsp.part.0>
	return 0;
    8cd6:	2000      	movs	r0, #0
}
    8cd8:	b005      	add	sp, #20
    8cda:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    8cde:	200e      	movs	r0, #14
    8ce0:	e7fa      	b.n	8cd8 <att_read_mult_req+0x78>
    8ce2:	bf00      	nop
    8ce4:	0001cd77 	.word	0x0001cd77
    8ce8:	0001ce37 	.word	0x0001ce37

00008cec <att_read_rsp>:
{
    8cec:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    8cf0:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    8cf4:	4605      	mov	r5, r0
    8cf6:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    8cf8:	4640      	mov	r0, r8
    8cfa:	2101      	movs	r1, #1
{
    8cfc:	4614      	mov	r4, r2
    8cfe:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    8d00:	f014 fde2 	bl	1d8c8 <bt_gatt_change_aware>
    8d04:	b390      	cbz	r0, 8d6c <att_read_rsp+0x80>
	if (!handle) {
    8d06:	b39e      	cbz	r6, 8d70 <att_read_rsp+0x84>
	(void)memset(&data, 0, sizeof(data));
    8d08:	2210      	movs	r2, #16
    8d0a:	2100      	movs	r1, #0
    8d0c:	4668      	mov	r0, sp
    8d0e:	f012 feb7 	bl	1ba80 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    8d12:	2200      	movs	r2, #0
    8d14:	4621      	mov	r1, r4
    8d16:	4640      	mov	r0, r8
    8d18:	f014 fa17 	bl	1d14a <bt_att_create_pdu>
    8d1c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8d1e:	b348      	cbz	r0, 8d74 <att_read_rsp+0x88>
	data.offset = offset;
    8d20:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    8d24:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8d28:	2301      	movs	r3, #1
    8d2a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8d2e:	4a12      	ldr	r2, [pc, #72]	; (8d78 <att_read_rsp+0x8c>)
	data.chan = chan;
    8d30:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    8d32:	466b      	mov	r3, sp
    8d34:	4631      	mov	r1, r6
    8d36:	4630      	mov	r0, r6
    8d38:	f013 fe97 	bl	1ca6a <bt_gatt_foreach_attr>
	if (data.err) {
    8d3c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    8d40:	b174      	cbz	r4, 8d60 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    8d42:	9802      	ldr	r0, [sp, #8]
    8d44:	f00e f85c 	bl	16e00 <net_buf_unref>
	if (!req) {
    8d48:	f89d 300c 	ldrb.w	r3, [sp, #12]
    8d4c:	4632      	mov	r2, r6
    8d4e:	4639      	mov	r1, r7
    8d50:	4628      	mov	r0, r5
    8d52:	f7ff fd59 	bl	8808 <send_err_rsp.part.0>
		return 0;
    8d56:	2400      	movs	r4, #0
}
    8d58:	4620      	mov	r0, r4
    8d5a:	b004      	add	sp, #16
    8d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8d60:	4a06      	ldr	r2, [pc, #24]	; (8d7c <att_read_rsp+0x90>)
    8d62:	9902      	ldr	r1, [sp, #8]
    8d64:	4628      	mov	r0, r5
    8d66:	f014 f90a 	bl	1cf7e <bt_att_chan_send_rsp>
	return 0;
    8d6a:	e7f5      	b.n	8d58 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    8d6c:	2412      	movs	r4, #18
    8d6e:	e7f3      	b.n	8d58 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    8d70:	2401      	movs	r4, #1
    8d72:	e7f1      	b.n	8d58 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    8d74:	240e      	movs	r4, #14
    8d76:	e7ef      	b.n	8d58 <att_read_rsp+0x6c>
    8d78:	0001ce37 	.word	0x0001ce37
    8d7c:	0001cd77 	.word	0x0001cd77

00008d80 <att_read_type_req>:
{
    8d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    8d84:	7b0c      	ldrb	r4, [r1, #12]
    8d86:	3c04      	subs	r4, #4
    8d88:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    8d8a:	2c02      	cmp	r4, #2
{
    8d8c:	4605      	mov	r5, r0
    8d8e:	b08c      	sub	sp, #48	; 0x30
    8d90:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    8d92:	d001      	beq.n	8d98 <att_read_type_req+0x18>
    8d94:	2c10      	cmp	r4, #16
    8d96:	d150      	bne.n	8e3a <att_read_type_req+0xba>
	req = net_buf_pull_mem(buf, sizeof(*req));
    8d98:	2104      	movs	r1, #4
    8d9a:	3008      	adds	r0, #8
    8d9c:	f015 fc21 	bl	1e5e2 <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8da0:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    8da4:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    8da6:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    8da8:	1d01      	adds	r1, r0, #4
    8daa:	4622      	mov	r2, r4
    8dac:	4640      	mov	r0, r8
    8dae:	f012 ff65 	bl	1bc7c <bt_uuid_create>
    8db2:	b188      	cbz	r0, 8dd8 <att_read_type_req+0x58>
	if (!start || !end) {
    8db4:	b19e      	cbz	r6, 8dde <att_read_type_req+0x5e>
    8db6:	b18f      	cbz	r7, 8ddc <att_read_type_req+0x5c>
	if (start > end) {
    8db8:	42b7      	cmp	r7, r6
    8dba:	d310      	bcc.n	8dde <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    8dbc:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    8dbe:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8dc0:	2100      	movs	r1, #0
    8dc2:	eb0d 0002 	add.w	r0, sp, r2
    8dc6:	f012 fe5b 	bl	1ba80 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    8dca:	2201      	movs	r2, #1
    8dcc:	2109      	movs	r1, #9
    8dce:	4620      	mov	r0, r4
    8dd0:	f014 f9bb 	bl	1d14a <bt_att_create_pdu>
    8dd4:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    8dd6:	b968      	cbnz	r0, 8df4 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    8dd8:	240e      	movs	r4, #14
    8dda:	e007      	b.n	8dec <att_read_type_req+0x6c>
			*err = 0U;
    8ddc:	463e      	mov	r6, r7
	if (!req) {
    8dde:	2301      	movs	r3, #1
    8de0:	4632      	mov	r2, r6
    8de2:	2108      	movs	r1, #8
    8de4:	4628      	mov	r0, r5
    8de6:	f7ff fd0f 	bl	8808 <send_err_rsp.part.0>
		return 0;
    8dea:	2400      	movs	r4, #0
}
    8dec:	4620      	mov	r0, r4
    8dee:	b00c      	add	sp, #48	; 0x30
    8df0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8df4:	2101      	movs	r1, #1
    8df6:	3008      	adds	r0, #8
	data.uuid = uuid;
    8df8:	e9cd 5806 	strd	r5, r8, [sp, #24]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8dfc:	f015 fbca 	bl	1e594 <net_buf_simple_add>
	data.rsp->len = 0U;
    8e00:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8e04:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    8e06:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8e08:	4a0d      	ldr	r2, [pc, #52]	; (8e40 <att_read_type_req+0xc0>)
	data.rsp->len = 0U;
    8e0a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8e0e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8e10:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    8e14:	4630      	mov	r0, r6
    8e16:	ab06      	add	r3, sp, #24
    8e18:	f013 fe27 	bl	1ca6a <bt_gatt_foreach_attr>
	if (data.err) {
    8e1c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    8e20:	b12c      	cbz	r4, 8e2e <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    8e22:	9808      	ldr	r0, [sp, #32]
    8e24:	f00d ffec 	bl	16e00 <net_buf_unref>
	if (!req) {
    8e28:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    8e2c:	e7d8      	b.n	8de0 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8e2e:	4a05      	ldr	r2, [pc, #20]	; (8e44 <att_read_type_req+0xc4>)
    8e30:	9908      	ldr	r1, [sp, #32]
    8e32:	4628      	mov	r0, r5
    8e34:	f014 f8a3 	bl	1cf7e <bt_att_chan_send_rsp>
	return 0;
    8e38:	e7d8      	b.n	8dec <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    8e3a:	2404      	movs	r4, #4
    8e3c:	e7d6      	b.n	8dec <att_read_type_req+0x6c>
    8e3e:	bf00      	nop
    8e40:	000084f1 	.word	0x000084f1
    8e44:	0001cd77 	.word	0x0001cd77

00008e48 <att_find_type_req>:
{
    8e48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    8e4c:	4688      	mov	r8, r1
    8e4e:	b086      	sub	sp, #24
    8e50:	4605      	mov	r5, r0
	req = net_buf_pull_mem(buf, sizeof(*req));
    8e52:	2106      	movs	r1, #6
    8e54:	f108 0008 	add.w	r0, r8, #8
    8e58:	f015 fbc3 	bl	1e5e2 <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    8e5c:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    8e5e:	b317      	cbz	r7, 8ea6 <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8e60:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    8e64:	f1b9 0f00 	cmp.w	r9, #0
    8e68:	d01c      	beq.n	8ea4 <att_find_type_req+0x5c>
	if (start > end) {
    8e6a:	454f      	cmp	r7, r9
    8e6c:	d81b      	bhi.n	8ea6 <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    8e6e:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    8e70:	f8ad 3002 	strh.w	r3, [sp, #2]
    8e74:	2400      	movs	r4, #0
    8e76:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8e7a:	a901      	add	r1, sp, #4
    8e7c:	4668      	mov	r0, sp
	value = buf->data;
    8e7e:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    8e82:	f88d 4000 	strb.w	r4, [sp]
    8e86:	f88d 4004 	strb.w	r4, [sp, #4]
    8e8a:	f8ad 3006 	strh.w	r3, [sp, #6]
    8e8e:	f012 fecb 	bl	1bc28 <bt_uuid_cmp>
    8e92:	4606      	mov	r6, r0
    8e94:	b190      	cbz	r0, 8ebc <att_find_type_req+0x74>
	if (!req) {
    8e96:	230a      	movs	r3, #10
    8e98:	463a      	mov	r2, r7
    8e9a:	2106      	movs	r1, #6
    8e9c:	4628      	mov	r0, r5
    8e9e:	f7ff fcb3 	bl	8808 <send_err_rsp.part.0>
		return 0;
    8ea2:	e007      	b.n	8eb4 <att_find_type_req+0x6c>
			*err = 0U;
    8ea4:	464f      	mov	r7, r9
	if (!req) {
    8ea6:	2301      	movs	r3, #1
    8ea8:	463a      	mov	r2, r7
    8eaa:	2106      	movs	r1, #6
    8eac:	4628      	mov	r0, r5
    8eae:	f7ff fcab 	bl	8808 <send_err_rsp.part.0>
		return 0;
    8eb2:	2400      	movs	r4, #0
}
    8eb4:	4620      	mov	r0, r4
    8eb6:	b006      	add	sp, #24
    8eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    8ebc:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    8ec0:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    8ec4:	4601      	mov	r1, r0
    8ec6:	2214      	movs	r2, #20
    8ec8:	a801      	add	r0, sp, #4
    8eca:	f012 fdd9 	bl	1ba80 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    8ece:	4632      	mov	r2, r6
    8ed0:	2107      	movs	r1, #7
    8ed2:	4640      	mov	r0, r8
    8ed4:	f014 f939 	bl	1d14a <bt_att_create_pdu>
    8ed8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    8eda:	b1e0      	cbz	r0, 8f16 <att_find_type_req+0xce>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    8edc:	230a      	movs	r3, #10
    8ede:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8ee2:	4a0e      	ldr	r2, [pc, #56]	; (8f1c <att_find_type_req+0xd4>)
	data.value_len = value_len;
    8ee4:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8ee8:	ab01      	add	r3, sp, #4
    8eea:	4649      	mov	r1, r9
    8eec:	4638      	mov	r0, r7
	data.value = value;
    8eee:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    8ef2:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    8ef4:	f013 fdb9 	bl	1ca6a <bt_gatt_foreach_attr>
	if (data.err) {
    8ef8:	f89d 4015 	ldrb.w	r4, [sp, #21]
    8efc:	b12c      	cbz	r4, 8f0a <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    8efe:	9802      	ldr	r0, [sp, #8]
    8f00:	f00d ff7e 	bl	16e00 <net_buf_unref>
	if (!req) {
    8f04:	f89d 3015 	ldrb.w	r3, [sp, #21]
    8f08:	e7ce      	b.n	8ea8 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8f0a:	4a05      	ldr	r2, [pc, #20]	; (8f20 <att_find_type_req+0xd8>)
    8f0c:	9902      	ldr	r1, [sp, #8]
    8f0e:	4628      	mov	r0, r5
    8f10:	f014 f835 	bl	1cf7e <bt_att_chan_send_rsp>
	return 0;
    8f14:	e7ce      	b.n	8eb4 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    8f16:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    8f18:	e7cc      	b.n	8eb4 <att_find_type_req+0x6c>
    8f1a:	bf00      	nop
    8f1c:	0001cc2f 	.word	0x0001cc2f
    8f20:	0001cd77 	.word	0x0001cd77

00008f24 <att_find_info_req>:
{
    8f24:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    8f26:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    8f28:	881e      	ldrh	r6, [r3, #0]
{
    8f2a:	b085      	sub	sp, #20
    8f2c:	4605      	mov	r5, r0
	if (!start || !end) {
    8f2e:	b19e      	cbz	r6, 8f58 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    8f30:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    8f32:	b184      	cbz	r4, 8f56 <att_find_info_req+0x32>
	if (start > end) {
    8f34:	42b4      	cmp	r4, r6
    8f36:	d30f      	bcc.n	8f58 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    8f38:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    8f3a:	2210      	movs	r2, #16
    8f3c:	2100      	movs	r1, #0
    8f3e:	4668      	mov	r0, sp
    8f40:	f012 fd9e 	bl	1ba80 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    8f44:	2200      	movs	r2, #0
    8f46:	2105      	movs	r1, #5
    8f48:	4638      	mov	r0, r7
    8f4a:	f014 f8fe 	bl	1d14a <bt_att_create_pdu>
    8f4e:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    8f50:	b958      	cbnz	r0, 8f6a <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    8f52:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    8f54:	e007      	b.n	8f66 <att_find_info_req+0x42>
			*err = 0U;
    8f56:	4626      	mov	r6, r4
	if (!req) {
    8f58:	2301      	movs	r3, #1
    8f5a:	4632      	mov	r2, r6
    8f5c:	2104      	movs	r1, #4
    8f5e:	4628      	mov	r0, r5
    8f60:	f7ff fc52 	bl	8808 <send_err_rsp.part.0>
	return 0;
    8f64:	2000      	movs	r0, #0
}
    8f66:	b005      	add	sp, #20
    8f68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8f6a:	4621      	mov	r1, r4
    8f6c:	4a09      	ldr	r2, [pc, #36]	; (8f94 <att_find_info_req+0x70>)
	data.chan = chan;
    8f6e:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    8f70:	466b      	mov	r3, sp
    8f72:	4630      	mov	r0, r6
    8f74:	f013 fd79 	bl	1ca6a <bt_gatt_foreach_attr>
	if (!data.rsp) {
    8f78:	9c02      	ldr	r4, [sp, #8]
    8f7a:	b924      	cbnz	r4, 8f86 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    8f7c:	9801      	ldr	r0, [sp, #4]
    8f7e:	f00d ff3f 	bl	16e00 <net_buf_unref>
	if (!req) {
    8f82:	230a      	movs	r3, #10
    8f84:	e7e9      	b.n	8f5a <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    8f86:	4a04      	ldr	r2, [pc, #16]	; (8f98 <att_find_info_req+0x74>)
    8f88:	9901      	ldr	r1, [sp, #4]
    8f8a:	4628      	mov	r0, r5
    8f8c:	f013 fff7 	bl	1cf7e <bt_att_chan_send_rsp>
    8f90:	e7e8      	b.n	8f64 <att_find_info_req+0x40>
    8f92:	bf00      	nop
    8f94:	0001ca81 	.word	0x0001ca81
    8f98:	0001cd77 	.word	0x0001cd77

00008f9c <att_mtu_req>:
{
    8f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
    8f9e:	6803      	ldr	r3, [r0, #0]
{
    8fa0:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
    8fa2:	6818      	ldr	r0, [r3, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8fa4:	f3bf 8f5b 	dmb	ish
    8fa8:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
    8fac:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
    8fb0:	f3c3 04c0 	ubfx	r4, r3, #3, #1
    8fb4:	071b      	lsls	r3, r3, #28
    8fb6:	d41e      	bmi.n	8ff6 <att_mtu_req+0x5a>
	mtu_client = sys_le16_to_cpu(req->mtu);
    8fb8:	688b      	ldr	r3, [r1, #8]
    8fba:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8fbc:	2e16      	cmp	r6, #22
    8fbe:	d91c      	bls.n	8ffa <att_mtu_req+0x5e>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8fc0:	2202      	movs	r2, #2
    8fc2:	2103      	movs	r1, #3
    8fc4:	f014 f8c1 	bl	1d14a <bt_att_create_pdu>
	if (!pdu) {
    8fc8:	4607      	mov	r7, r0
    8fca:	b1c0      	cbz	r0, 8ffe <att_mtu_req+0x62>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8fcc:	2102      	movs	r1, #2
    8fce:	3008      	adds	r0, #8
    8fd0:	f015 fae0 	bl	1e594 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8fd4:	2341      	movs	r3, #65	; 0x41
    8fd6:	7003      	strb	r3, [r0, #0]
    8fd8:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
    8fda:	4a0a      	ldr	r2, [pc, #40]	; (9004 <att_mtu_req+0x68>)
    8fdc:	4628      	mov	r0, r5
    8fde:	4639      	mov	r1, r7
    8fe0:	f013 ffcd 	bl	1cf7e <bt_att_chan_send_rsp>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
    8fe4:	2e41      	cmp	r6, #65	; 0x41
    8fe6:	bf28      	it	cs
    8fe8:	2641      	movcs	r6, #65	; 0x41
    8fea:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
    8fee:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
    8ff2:	4620      	mov	r0, r4
}
    8ff4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
    8ff6:	2006      	movs	r0, #6
    8ff8:	e7fc      	b.n	8ff4 <att_mtu_req+0x58>
		return BT_ATT_ERR_INVALID_PDU;
    8ffa:	2004      	movs	r0, #4
    8ffc:	e7fa      	b.n	8ff4 <att_mtu_req+0x58>
		return BT_ATT_ERR_UNLIKELY;
    8ffe:	200e      	movs	r0, #14
    9000:	e7f8      	b.n	8ff4 <att_mtu_req+0x58>
    9002:	bf00      	nop
    9004:	0001cd77 	.word	0x0001cd77

00009008 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    9008:	b513      	push	{r0, r1, r4, lr}
    900a:	4602      	mov	r2, r0
    900c:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    900e:	4808      	ldr	r0, [pc, #32]	; (9030 <bt_att_req_alloc+0x28>)
    9010:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    9012:	2400      	movs	r4, #0
    9014:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    9016:	f00f fcef 	bl	189f8 <k_mem_slab_alloc>
    901a:	4601      	mov	r1, r0
    901c:	b930      	cbnz	r0, 902c <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    901e:	9801      	ldr	r0, [sp, #4]
    9020:	221c      	movs	r2, #28
    9022:	f012 fd2d 	bl	1ba80 <memset>

	return req;
    9026:	9801      	ldr	r0, [sp, #4]
}
    9028:	b002      	add	sp, #8
    902a:	bd10      	pop	{r4, pc}
		return NULL;
    902c:	4620      	mov	r0, r4
    902e:	e7fb      	b.n	9028 <bt_att_req_alloc+0x20>
    9030:	20000aac 	.word	0x20000aac

00009034 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    9034:	b507      	push	{r0, r1, r2, lr}
    9036:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	k_mem_slab_free(&req_slab, (void **)&req);
    9038:	a901      	add	r1, sp, #4
    903a:	4803      	ldr	r0, [pc, #12]	; (9048 <bt_att_req_free+0x14>)
    903c:	f00f fd0e 	bl	18a5c <k_mem_slab_free>
}
    9040:	b003      	add	sp, #12
    9042:	f85d fb04 	ldr.w	pc, [sp], #4
    9046:	bf00      	nop
    9048:	20000aac 	.word	0x20000aac

0000904c <att_handle_rsp>:
{
    904c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9050:	4604      	mov	r4, r0
    9052:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    9054:	30e0      	adds	r0, #224	; 0xe0
{
    9056:	4689      	mov	r9, r1
    9058:	4692      	mov	sl, r2
    905a:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    905c:	f015 ffb6 	bl	1efcc <k_delayed_work_cancel>
	if (!chan->req) {
    9060:	f8d4 50c4 	ldr.w	r5, [r4, #196]	; 0xc4
    9064:	2600      	movs	r6, #0
    9066:	b12d      	cbz	r5, 9074 <att_handle_rsp+0x28>
	if (chan->req == &cancel) {
    9068:	4b2b      	ldr	r3, [pc, #172]	; (9118 <att_handle_rsp+0xcc>)
    906a:	429d      	cmp	r5, r3
    906c:	d123      	bne.n	90b6 <att_handle_rsp+0x6a>
		chan->req = NULL;
    906e:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
	bt_att_func_t func = NULL;
    9072:	4635      	mov	r5, r6
	att_process(chan->att);
    9074:	f8d4 b000 	ldr.w	fp, [r4]
	node = sys_slist_get(&att->reqs);
    9078:	f10b 0004 	add.w	r0, fp, #4
    907c:	f013 fc85 	bl	1c98a <sys_slist_get>
	if (!node) {
    9080:	4607      	mov	r7, r0
    9082:	b380      	cbz	r0, 90e6 <att_handle_rsp+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    9084:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
    9088:	b152      	cbz	r2, 90a0 <att_handle_rsp+0x54>
    908a:	f5b2 7096 	subs.w	r0, r2, #300	; 0x12c
    908e:	d007      	beq.n	90a0 <att_handle_rsp+0x54>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9090:	6816      	ldr	r6, [r2, #0]
    9092:	b10e      	cbz	r6, 9098 <att_handle_rsp+0x4c>
    9094:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
    9098:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    909c:	b1f2      	cbz	r2, 90dc <att_handle_rsp+0x90>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    909e:	bb7e      	cbnz	r6, 9100 <att_handle_rsp+0xb4>
Z_GENLIST_PREPEND(slist, snode)
    90a0:	f8db 2004 	ldr.w	r2, [fp, #4]
	parent->next = child;
    90a4:	603a      	str	r2, [r7, #0]
Z_GENLIST_PREPEND(slist, snode)
    90a6:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    90aa:	f8cb 7004 	str.w	r7, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    90ae:	b9d2      	cbnz	r2, 90e6 <att_handle_rsp+0x9a>
	list->tail = node;
    90b0:	f8cb 7008 	str.w	r7, [fp, #8]
}
    90b4:	e017      	b.n	90e6 <att_handle_rsp+0x9a>
	if (chan->req->buf) {
    90b6:	6928      	ldr	r0, [r5, #16]
    90b8:	b120      	cbz	r0, 90c4 <att_handle_rsp+0x78>
		net_buf_unref(chan->req->buf);
    90ba:	f00d fea1 	bl	16e00 <net_buf_unref>
		chan->req->buf = NULL;
    90be:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
    90c2:	611e      	str	r6, [r3, #16]
	func = chan->req->func;
    90c4:	f8d4 00c4 	ldr.w	r0, [r4, #196]	; 0xc4
	chan->req->func = NULL;
    90c8:	2600      	movs	r6, #0
	func = chan->req->func;
    90ca:	6845      	ldr	r5, [r0, #4]
	params = chan->req->user_data;
    90cc:	6983      	ldr	r3, [r0, #24]
	chan->req->func = NULL;
    90ce:	6046      	str	r6, [r0, #4]
	params = chan->req->user_data;
    90d0:	9303      	str	r3, [sp, #12]
	att_req_destroy(chan->req);
    90d2:	f014 f87c 	bl	1d1ce <att_req_destroy>
	chan->req = NULL;
    90d6:	f8c4 60c4 	str.w	r6, [r4, #196]	; 0xc4
    90da:	e7cb      	b.n	9074 <att_handle_rsp+0x28>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    90dc:	4639      	mov	r1, r7
    90de:	f013 fefa 	bl	1ced6 <bt_att_chan_req_send>
    90e2:	2800      	cmp	r0, #0
    90e4:	dbdb      	blt.n	909e <att_handle_rsp+0x52>
	if (func) {
    90e6:	b13d      	cbz	r5, 90f8 <att_handle_rsp+0xac>
		func(chan->att->conn, err, pdu, len, params);
    90e8:	9b03      	ldr	r3, [sp, #12]
    90ea:	6820      	ldr	r0, [r4, #0]
    90ec:	9300      	str	r3, [sp, #0]
    90ee:	6800      	ldr	r0, [r0, #0]
    90f0:	4653      	mov	r3, sl
    90f2:	464a      	mov	r2, r9
    90f4:	4641      	mov	r1, r8
    90f6:	47a8      	blx	r5
}
    90f8:	2000      	movs	r0, #0
    90fa:	b005      	add	sp, #20
    90fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    9100:	f516 7296 	adds.w	r2, r6, #300	; 0x12c
    9104:	d004      	beq.n	9110 <att_handle_rsp+0xc4>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9106:	f8d6 212c 	ldr.w	r2, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    910a:	b10a      	cbz	r2, 9110 <att_handle_rsp+0xc4>
    910c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
	bt_att_func_t func = NULL;
    9110:	4630      	mov	r0, r6
    9112:	4616      	mov	r6, r2
    9114:	e7c0      	b.n	9098 <att_handle_rsp+0x4c>
    9116:	bf00      	nop
    9118:	200014e8 	.word	0x200014e8

0000911c <bt_att_encrypt_change>:
{
    911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9120:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    9122:	f1a0 0608 	sub.w	r6, r0, #8
	if (hci_status) {
    9126:	460d      	mov	r5, r1
    9128:	b151      	cbz	r1, 9140 <bt_att_encrypt_change+0x24>
		if (att_chan->req) {
    912a:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
    912e:	b33b      	cbz	r3, 9180 <bt_att_encrypt_change+0x64>
			att_handle_rsp(att_chan, NULL, 0,
    9130:	2200      	movs	r2, #0
    9132:	4630      	mov	r0, r6
    9134:	2305      	movs	r3, #5
}
    9136:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			att_handle_rsp(att_chan, NULL, 0,
    913a:	4611      	mov	r1, r2
    913c:	f7ff bf86 	b.w	904c <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
    9140:	6807      	ldr	r7, [r0, #0]
	bt_gatt_encrypt_change(conn);
    9142:	4638      	mov	r0, r7
    9144:	f000 fe48 	bl	9dd8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
    9148:	7a7b      	ldrb	r3, [r7, #9]
    914a:	2b01      	cmp	r3, #1
    914c:	d018      	beq.n	9180 <bt_att_encrypt_change+0x64>
	if (!att_chan->req || !att_chan->req->retrying) {
    914e:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    9152:	b1ab      	cbz	r3, 9180 <bt_att_encrypt_change+0x64>
    9154:	7d1a      	ldrb	r2, [r3, #20]
    9156:	b19a      	cbz	r2, 9180 <bt_att_encrypt_change+0x64>
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    9158:	6919      	ldr	r1, [r3, #16]
	switch (att_op_get_type(buf->data[0])) {
    915a:	688b      	ldr	r3, [r1, #8]
    915c:	7818      	ldrb	r0, [r3, #0]
    915e:	f013 fc57 	bl	1ca10 <att_op_get_type>
    9162:	3801      	subs	r0, #1
    9164:	b2c0      	uxtb	r0, r0
    9166:	2804      	cmp	r0, #4
    9168:	bf96      	itet	ls
    916a:	4b06      	ldrls	r3, [pc, #24]	; (9184 <bt_att_encrypt_change+0x68>)
    916c:	462a      	movhi	r2, r5
    916e:	f853 2020 	ldrls.w	r2, [r3, r0, lsl #2]
	bt_att_chan_send_rsp(att_chan, att_chan->req->buf,
    9172:	4630      	mov	r0, r6
    9174:	f013 ff03 	bl	1cf7e <bt_att_chan_send_rsp>
	att_chan->req->buf = NULL;
    9178:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    917c:	2200      	movs	r2, #0
    917e:	611a      	str	r2, [r3, #16]
}
    9180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9184:	0001fa9c 	.word	0x0001fa9c

00009188 <att_reset>:
{
    9188:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    918a:	9003      	str	r0, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    918c:	9803      	ldr	r0, [sp, #12]
    918e:	2200      	movs	r2, #0
    9190:	2300      	movs	r3, #0
    9192:	3024      	adds	r0, #36	; 0x24
    9194:	f015 f9ad 	bl	1e4f2 <net_buf_get>
    9198:	b980      	cbnz	r0, 91bc <att_reset+0x34>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    919a:	9803      	ldr	r0, [sp, #12]
    919c:	2200      	movs	r2, #0
    919e:	2300      	movs	r3, #0
    91a0:	300c      	adds	r0, #12
    91a2:	f015 f9a6 	bl	1e4f2 <net_buf_get>
    91a6:	b960      	cbnz	r0, 91c2 <att_reset+0x3a>
	att->conn = NULL;
    91a8:	9a03      	ldr	r2, [sp, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    91aa:	6854      	ldr	r4, [r2, #4]
	att->conn = NULL;
    91ac:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    91ae:	b95c      	cbnz	r4, 91c8 <att_reset+0x40>
	k_mem_slab_free(&att_slab, (void **)&att);
    91b0:	480e      	ldr	r0, [pc, #56]	; (91ec <att_reset+0x64>)
    91b2:	a903      	add	r1, sp, #12
    91b4:	f00f fc52 	bl	18a5c <k_mem_slab_free>
}
    91b8:	b004      	add	sp, #16
    91ba:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    91bc:	f00d fe20 	bl	16e00 <net_buf_unref>
    91c0:	e7e4      	b.n	918c <att_reset+0x4>
		net_buf_unref(buf);
    91c2:	f00d fe1d 	bl	16e00 <net_buf_unref>
    91c6:	e7e8      	b.n	919a <att_reset+0x12>
    91c8:	6825      	ldr	r5, [r4, #0]
		if (req->func) {
    91ca:	6866      	ldr	r6, [r4, #4]
    91cc:	b136      	cbz	r6, 91dc <att_reset+0x54>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    91ce:	69a3      	ldr	r3, [r4, #24]
    91d0:	9300      	str	r3, [sp, #0]
    91d2:	2300      	movs	r3, #0
    91d4:	461a      	mov	r2, r3
    91d6:	210e      	movs	r1, #14
    91d8:	4618      	mov	r0, r3
    91da:	47b0      	blx	r6
		att_req_destroy(req);
    91dc:	4620      	mov	r0, r4
    91de:	f013 fff6 	bl	1d1ce <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    91e2:	2d00      	cmp	r5, #0
    91e4:	d0e4      	beq.n	91b0 <att_reset+0x28>
    91e6:	462c      	mov	r4, r5
    91e8:	682d      	ldr	r5, [r5, #0]
    91ea:	e7ee      	b.n	91ca <att_reset+0x42>
    91ec:	20000a74 	.word	0x20000a74

000091f0 <sc_store>:

	return NULL;
}

static void sc_store(struct gatt_sc_cfg *cfg)
{
    91f0:	b570      	push	{r4, r5, r6, lr}
	char key[BT_SETTINGS_KEY_MAX];
	int err;

	if (cfg->id) {
    91f2:	4605      	mov	r5, r0
{
    91f4:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    91f6:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    91fa:	4604      	mov	r4, r0
	if (cfg->id) {
    91fc:	b19a      	cbz	r2, 9226 <sc_store+0x36>
		char id_str[4];

		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    91fe:	ae02      	add	r6, sp, #8
    9200:	2104      	movs	r1, #4
    9202:	4630      	mov	r0, r6
    9204:	f010 fd42 	bl	19c8c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    9208:	9600      	str	r6, [sp, #0]
				       &cfg->peer, id_str);
	} else {
		bt_settings_encode_key(key, sizeof(key), "sc",
    920a:	462b      	mov	r3, r5
    920c:	a803      	add	r0, sp, #12
    920e:	4a07      	ldr	r2, [pc, #28]	; (922c <sc_store+0x3c>)
    9210:	2124      	movs	r1, #36	; 0x24
    9212:	f7fc fe09 	bl	5e28 <bt_settings_encode_key>
				       &cfg->peer, NULL);
	}

	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    9216:	2204      	movs	r2, #4
    9218:	f104 0108 	add.w	r1, r4, #8
    921c:	a803      	add	r0, sp, #12
    921e:	f7fb fbbb 	bl	4998 <settings_save_one>
	}

	BT_DBG("stored SC for %s (%s, 0x%04x-0x%04x)",
	       bt_addr_le_str(&cfg->peer), log_strdup(key), cfg->data.start,
	       cfg->data.end);
}
    9222:	b00c      	add	sp, #48	; 0x30
    9224:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    9226:	9200      	str	r2, [sp, #0]
    9228:	e7ef      	b.n	920a <sc_store+0x1a>
    922a:	bf00      	nop
    922c:	00020d32 	.word	0x00020d32

00009230 <ccc_set_direct>:

SETTINGS_STATIC_HANDLER_DEFINE(bt_ccc, "bt/ccc", NULL, ccc_set, NULL, NULL);

static int ccc_set_direct(const char *key, size_t len, settings_read_cb read_cb,
			  void *cb_arg, void *param)
{
    9230:	b507      	push	{r0, r1, r2, lr}
		const char *name;

		BT_DBG("key: %s", log_strdup((const char *)param));

		/* Only "bt/ccc" settings should ever come here */
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    9232:	9804      	ldr	r0, [sp, #16]
    9234:	4905      	ldr	r1, [pc, #20]	; (924c <ccc_set_direct+0x1c>)
    9236:	aa01      	add	r2, sp, #4
    9238:	f011 f994 	bl	1a564 <settings_name_steq>
    923c:	2800      	cmp	r0, #0
		}

		return ccc_set(name, len, read_cb, cb_arg);
	}
	return 0;
}
    923e:	bf0c      	ite	eq
    9240:	f06f 0015 	mvneq.w	r0, #21
    9244:	2000      	movne	r0, #0
    9246:	b003      	add	sp, #12
    9248:	f85d fb04 	ldr.w	pc, [sp], #4
    924c:	00020d28 	.word	0x00020d28

00009250 <sc_commit.part.0>:
    9250:	4903      	ldr	r1, [pc, #12]	; (9260 <sc_commit.part.0+0x10>)
    9252:	4804      	ldr	r0, [pc, #16]	; (9264 <sc_commit.part.0+0x14>)
    9254:	f44f 72a4 	mov.w	r2, #328	; 0x148
    9258:	2300      	movs	r3, #0
    925a:	f010 b9f5 	b.w	19648 <k_delayed_work_submit_to_queue>
    925e:	bf00      	nop
    9260:	20000ef8 	.word	0x20000ef8
    9264:	20001348 	.word	0x20001348

00009268 <ccc_save>:
	size_t count;
};

static uint8_t ccc_save(const struct bt_gatt_attr *attr, uint16_t handle,
			void *user_data)
{
    9268:	b570      	push	{r4, r5, r6, lr}
	struct ccc_save *save = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    926a:	4b0e      	ldr	r3, [pc, #56]	; (92a4 <ccc_save+0x3c>)
{
    926c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    926e:	6882      	ldr	r2, [r0, #8]
    9270:	429a      	cmp	r2, r3
{
    9272:	460e      	mov	r6, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    9274:	d114      	bne.n	92a0 <ccc_save+0x38>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9276:	68c5      	ldr	r5, [r0, #12]
		if (id == ccc->cfg[i].id &&
    9278:	7922      	ldrb	r2, [r4, #4]
    927a:	782b      	ldrb	r3, [r5, #0]

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    927c:	6821      	ldr	r1, [r4, #0]
		if (id == ccc->cfg[i].id &&
    927e:	429a      	cmp	r2, r3
    9280:	d10e      	bne.n	92a0 <ccc_save+0x38>
	return memcmp(a, b, sizeof(*a));
    9282:	2207      	movs	r2, #7
    9284:	1c68      	adds	r0, r5, #1
    9286:	f012 fbc0 	bl	1ba0a <memcmp>
    928a:	b948      	cbnz	r0, 92a0 <ccc_save+0x38>
		return BT_GATT_ITER_CONTINUE;
	}

	BT_DBG("Storing CCCs handle 0x%04x value 0x%04x", handle, cfg->value);

	save->store[save->count].handle = handle;
    928c:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    9290:	8929      	ldrh	r1, [r5, #8]
    9292:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    9296:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    9298:	8116      	strh	r6, [r2, #8]
	save->store[save->count].value = cfg->value;
    929a:	8151      	strh	r1, [r2, #10]
	save->count++;
    929c:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8

	return BT_GATT_ITER_CONTINUE;
}
    92a0:	2001      	movs	r0, #1
    92a2:	bd70      	pop	{r4, r5, r6, pc}
    92a4:	0001d66d 	.word	0x0001d66d

000092a8 <sc_commit>:

	return 0;
}

static int sc_commit(void)
{
    92a8:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    92aa:	4b0d      	ldr	r3, [pc, #52]	; (92e0 <sc_commit+0x38>)
    92ac:	f3bf 8f5b 	dmb	ish
    92b0:	f103 0248 	add.w	r2, r3, #72	; 0x48
    92b4:	e852 1f00 	ldrex	r1, [r2]
    92b8:	f021 0102 	bic.w	r1, r1, #2
    92bc:	e842 1000 	strex	r0, r1, [r2]
    92c0:	2800      	cmp	r0, #0
    92c2:	d1f7      	bne.n	92b4 <sc_commit+0xc>
    92c4:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    92c8:	f3bf 8f5b 	dmb	ish
    92cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    92ce:	f3bf 8f5b 	dmb	ish
	atomic_clear_bit(gatt_sc.flags, SC_INDICATE_PENDING);

	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    92d2:	07db      	lsls	r3, r3, #31
    92d4:	d501      	bpl.n	92da <sc_commit+0x32>
    92d6:	f7ff ffbb 	bl	9250 <sc_commit.part.0>
		/* Schedule SC indication since the range has changed */
		k_delayed_work_submit(&gatt_sc.work, SC_TIMEOUT);
	}

	return 0;
}
    92da:	2000      	movs	r0, #0
    92dc:	bd08      	pop	{r3, pc}
    92de:	bf00      	nop
    92e0:	20000ee0 	.word	0x20000ee0

000092e4 <sc_indicate_rsp>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    92e4:	490e      	ldr	r1, [pc, #56]	; (9320 <sc_indicate_rsp+0x3c>)
    92e6:	f3bf 8f5b 	dmb	ish
    92ea:	f101 0348 	add.w	r3, r1, #72	; 0x48
    92ee:	e853 2f00 	ldrex	r2, [r3]
    92f2:	f022 0202 	bic.w	r2, r2, #2
    92f6:	e843 2000 	strex	r0, r2, [r3]
    92fa:	2800      	cmp	r0, #0
    92fc:	d1f7      	bne.n	92ee <sc_indicate_rsp+0xa>
    92fe:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9302:	f3bf 8f5b 	dmb	ish
    9306:	6c8b      	ldr	r3, [r1, #72]	; 0x48
    9308:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    930c:	07db      	lsls	r3, r3, #31
    930e:	d505      	bpl.n	931c <sc_indicate_rsp+0x38>
    9310:	4804      	ldr	r0, [pc, #16]	; (9324 <sc_indicate_rsp+0x40>)
    9312:	2200      	movs	r2, #0
    9314:	2300      	movs	r3, #0
    9316:	3118      	adds	r1, #24
    9318:	f010 b996 	b.w	19648 <k_delayed_work_submit_to_queue>
}
    931c:	4770      	bx	lr
    931e:	bf00      	nop
    9320:	20000ee0 	.word	0x20000ee0
    9324:	20001348 	.word	0x20001348

00009328 <find_sc_cfg>:
{
    9328:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    932a:	4c0e      	ldr	r4, [pc, #56]	; (9364 <find_sc_cfg+0x3c>)
    932c:	7823      	ldrb	r3, [r4, #0]
    932e:	4283      	cmp	r3, r0
{
    9330:	4605      	mov	r5, r0
    9332:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    9334:	d00a      	beq.n	934c <find_sc_cfg+0x24>
    9336:	7b23      	ldrb	r3, [r4, #12]
    9338:	42ab      	cmp	r3, r5
    933a:	d111      	bne.n	9360 <find_sc_cfg+0x38>
    933c:	480a      	ldr	r0, [pc, #40]	; (9368 <find_sc_cfg+0x40>)
    933e:	2207      	movs	r2, #7
    9340:	4631      	mov	r1, r6
    9342:	f012 fb62 	bl	1ba0a <memcmp>
    9346:	b958      	cbnz	r0, 9360 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    9348:	2001      	movs	r0, #1
    934a:	e005      	b.n	9358 <find_sc_cfg+0x30>
    934c:	2207      	movs	r2, #7
    934e:	1c60      	adds	r0, r4, #1
    9350:	f012 fb5b 	bl	1ba0a <memcmp>
		if (id == sc_cfg[i].id &&
    9354:	2800      	cmp	r0, #0
    9356:	d1ee      	bne.n	9336 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    9358:	230c      	movs	r3, #12
    935a:	fb03 4000 	mla	r0, r3, r0, r4
    935e:	e000      	b.n	9362 <find_sc_cfg+0x3a>
	return NULL;
    9360:	2000      	movs	r0, #0
}
    9362:	bd70      	pop	{r4, r5, r6, pc}
    9364:	20002906 	.word	0x20002906
    9368:	20002913 	.word	0x20002913

0000936c <read_ppcp>:
{
    936c:	b513      	push	{r0, r1, r4, lr}
    936e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    9372:	4c0b      	ldr	r4, [pc, #44]	; (93a0 <read_ppcp+0x34>)
{
    9374:	4610      	mov	r0, r2
	if (offset > value_len) {
    9376:	2908      	cmp	r1, #8
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
    9378:	f44f 1228 	mov.w	r2, #2752512	; 0x2a0000
    937c:	e9cd 4200 	strd	r4, r2, [sp]
	if (offset > value_len) {
    9380:	d80b      	bhi.n	939a <read_ppcp+0x2e>
	len = MIN(buf_len, value_len - offset);
    9382:	f1c1 0408 	rsb	r4, r1, #8
    9386:	429c      	cmp	r4, r3
    9388:	bfa8      	it	ge
    938a:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
    938c:	4622      	mov	r2, r4
    938e:	4469      	add	r1, sp
    9390:	f012 fb4b 	bl	1ba2a <memcpy>
}
    9394:	4620      	mov	r0, r4
    9396:	b002      	add	sp, #8
    9398:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    939a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
    939e:	e7f9      	b.n	9394 <read_ppcp+0x28>
    93a0:	00280018 	.word	0x00280018

000093a4 <bt_gatt_clear_sc>:
{
    93a4:	b570      	push	{r4, r5, r6, lr}
    93a6:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    93a8:	f7ff ffbe 	bl	9328 <find_sc_cfg>
	if (!cfg) {
    93ac:	4604      	mov	r4, r0
    93ae:	b1b8      	cbz	r0, 93e0 <bt_gatt_clear_sc+0x3c>
		if (cfg->id) {
    93b0:	4605      	mov	r5, r0
    93b2:	f815 2b01 	ldrb.w	r2, [r5], #1
    93b6:	b1b2      	cbz	r2, 93e6 <bt_gatt_clear_sc+0x42>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    93b8:	ae02      	add	r6, sp, #8
    93ba:	2104      	movs	r1, #4
    93bc:	4630      	mov	r0, r6
    93be:	f010 fc65 	bl	19c8c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    93c2:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    93c4:	4a09      	ldr	r2, [pc, #36]	; (93ec <bt_gatt_clear_sc+0x48>)
    93c6:	2124      	movs	r1, #36	; 0x24
    93c8:	462b      	mov	r3, r5
    93ca:	a803      	add	r0, sp, #12
    93cc:	f7fc fd2c 	bl	5e28 <bt_settings_encode_key>
		err = settings_delete(key);
    93d0:	a803      	add	r0, sp, #12
    93d2:	f011 f8c3 	bl	1a55c <settings_delete>
	memset(cfg, 0, sizeof(*cfg));
    93d6:	220c      	movs	r2, #12
    93d8:	2100      	movs	r1, #0
    93da:	4620      	mov	r0, r4
    93dc:	f012 fb50 	bl	1ba80 <memset>
}
    93e0:	2000      	movs	r0, #0
    93e2:	b00c      	add	sp, #48	; 0x30
    93e4:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    93e6:	9200      	str	r2, [sp, #0]
    93e8:	e7ec      	b.n	93c4 <bt_gatt_clear_sc+0x20>
    93ea:	bf00      	nop
    93ec:	00020d32 	.word	0x00020d32

000093f0 <disconnected_cb>:
{
    93f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    93f4:	4b1f      	ldr	r3, [pc, #124]	; (9474 <disconnected_cb+0x84>)
{
    93f6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    93f8:	6882      	ldr	r2, [r0, #8]
    93fa:	429a      	cmp	r2, r3
{
    93fc:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    93fe:	d102      	bne.n	9406 <disconnected_cb+0x16>
	ccc = attr->user_data;
    9400:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    9402:	8963      	ldrh	r3, [r4, #10]
    9404:	b9cb      	cbnz	r3, 943a <disconnected_cb+0x4a>
}
    9406:	2001      	movs	r0, #1
    9408:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    940c:	f105 0888 	add.w	r8, r5, #136	; 0x88
    9410:	7a28      	ldrb	r0, [r5, #8]
    9412:	4641      	mov	r1, r8
    9414:	f012 ffd2 	bl	1c3bc <bt_addr_le_is_bonded>
    9418:	b948      	cbnz	r0, 942e <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    941a:	4b17      	ldr	r3, [pc, #92]	; (9478 <disconnected_cb+0x88>)
    941c:	429c      	cmp	r4, r3
    941e:	d102      	bne.n	9426 <disconnected_cb+0x36>
					sc_clear(conn);
    9420:	4628      	mov	r0, r5
    9422:	f014 f976 	bl	1d712 <sc_clear>
				clear_ccc_cfg(cfg);
    9426:	4620      	mov	r0, r4
    9428:	f014 f812 	bl	1d450 <clear_ccc_cfg>
	if (!value_used) {
    942c:	e01a      	b.n	9464 <disconnected_cb+0x74>
	memcpy(dst, src, sizeof(*dst));
    942e:	2207      	movs	r2, #7
    9430:	4641      	mov	r1, r8
    9432:	4638      	mov	r0, r7
    9434:	f012 faf9 	bl	1ba2a <memcpy>
    9438:	e014      	b.n	9464 <disconnected_cb+0x74>
		if (!cfg->value) {
    943a:	8923      	ldrh	r3, [r4, #8]
    943c:	b193      	cbz	r3, 9464 <disconnected_cb+0x74>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    943e:	4627      	mov	r7, r4
    9440:	4628      	mov	r0, r5
    9442:	f817 1b01 	ldrb.w	r1, [r7], #1
    9446:	463a      	mov	r2, r7
    9448:	f013 f901 	bl	1c64e <bt_conn_is_peer_addr_le>
    944c:	2800      	cmp	r0, #0
    944e:	d1dd      	bne.n	940c <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    9450:	7820      	ldrb	r0, [r4, #0]
    9452:	4639      	mov	r1, r7
    9454:	f7fe fcf8 	bl	7e48 <bt_conn_lookup_addr_le>
			if (tmp) {
    9458:	b120      	cbz	r0, 9464 <disconnected_cb+0x74>
				if (tmp->state == BT_CONN_CONNECTED) {
    945a:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    945c:	f013 f917 	bl	1c68e <bt_conn_unref>
	if (!value_used) {
    9460:	2d07      	cmp	r5, #7
    9462:	d0d0      	beq.n	9406 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    9464:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    9466:	2100      	movs	r1, #0
    9468:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    946a:	2b00      	cmp	r3, #0
    946c:	d0cb      	beq.n	9406 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    946e:	4630      	mov	r0, r6
    9470:	4798      	blx	r3
    9472:	e7c8      	b.n	9406 <disconnected_cb+0x16>
    9474:	0001d66d 	.word	0x0001d66d
    9478:	2000059c 	.word	0x2000059c

0000947c <remove_peer_from_attr>:
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    947c:	6881      	ldr	r1, [r0, #8]
    947e:	4b0b      	ldr	r3, [pc, #44]	; (94ac <remove_peer_from_attr+0x30>)
    9480:	4299      	cmp	r1, r3
{
    9482:	b510      	push	{r4, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9484:	d10f      	bne.n	94a6 <remove_peer_from_attr+0x2a>
		return BT_GATT_ITER_CONTINUE;
	}

	ccc = attr->user_data;
    9486:	68c4      	ldr	r4, [r0, #12]

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    9488:	6811      	ldr	r1, [r2, #0]
		if (id == ccc->cfg[i].id &&
    948a:	7823      	ldrb	r3, [r4, #0]
    948c:	7912      	ldrb	r2, [r2, #4]
    948e:	429a      	cmp	r2, r3
    9490:	d109      	bne.n	94a6 <remove_peer_from_attr+0x2a>
	return memcmp(a, b, sizeof(*a));
    9492:	2207      	movs	r2, #7
    9494:	1c60      	adds	r0, r4, #1
    9496:	f012 fab8 	bl	1ba0a <memcmp>
    949a:	4601      	mov	r1, r0
    949c:	b918      	cbnz	r0, 94a6 <remove_peer_from_attr+0x2a>
	if (cfg) {
		memset(cfg, 0, sizeof(*cfg));
    949e:	220a      	movs	r2, #10
    94a0:	4620      	mov	r0, r4
    94a2:	f012 faed 	bl	1ba80 <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    94a6:	2001      	movs	r0, #1
    94a8:	bd10      	pop	{r4, pc}
    94aa:	bf00      	nop
    94ac:	0001d66d 	.word	0x0001d66d

000094b0 <gatt_indicate>:
{
    94b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    94b4:	4615      	mov	r5, r2
				sizeof(*ind) + params->len);
    94b6:	8a12      	ldrh	r2, [r2, #16]
{
    94b8:	4689      	mov	r9, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    94ba:	3202      	adds	r2, #2
    94bc:	211d      	movs	r1, #29
{
    94be:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    94c0:	f013 fe43 	bl	1d14a <bt_att_create_pdu>
	if (!buf) {
    94c4:	4606      	mov	r6, r0
    94c6:	b308      	cbz	r0, 950c <gatt_indicate+0x5c>
	ind = net_buf_add(buf, sizeof(*ind));
    94c8:	f100 0808 	add.w	r8, r0, #8
    94cc:	2102      	movs	r1, #2
    94ce:	4640      	mov	r0, r8
    94d0:	f015 f860 	bl	1e594 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    94d4:	4604      	mov	r4, r0
	net_buf_add(buf, params->len);
    94d6:	8a29      	ldrh	r1, [r5, #16]
	ind->handle = sys_cpu_to_le16(handle);
    94d8:	f824 9b02 	strh.w	r9, [r4], #2
	net_buf_add(buf, params->len);
    94dc:	4640      	mov	r0, r8
    94de:	f015 f859 	bl	1e594 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    94e2:	8a2a      	ldrh	r2, [r5, #16]
    94e4:	68e9      	ldr	r1, [r5, #12]
    94e6:	4620      	mov	r0, r4
    94e8:	f012 fa9f 	bl	1ba2a <memcpy>
	if (!params->func) {
    94ec:	68ab      	ldr	r3, [r5, #8]
    94ee:	b933      	cbnz	r3, 94fe <gatt_indicate+0x4e>
		err = bt_att_send(conn, buf, NULL, NULL);
    94f0:	4631      	mov	r1, r6
    94f2:	4638      	mov	r0, r7
    94f4:	461a      	mov	r2, r3
}
    94f6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		err = bt_att_send(conn, buf, NULL, NULL);
    94fa:	f013 bec9 	b.w	1d290 <bt_att_send>
		req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    94fe:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    9502:	2100      	movs	r1, #0
    9504:	f7ff fd80 	bl	9008 <bt_att_req_alloc>
		if (!req) {
    9508:	4604      	mov	r4, r0
    950a:	b910      	cbnz	r0, 9512 <gatt_indicate+0x62>
		return -ENOMEM;
    950c:	f06f 050b 	mvn.w	r5, #11
    9510:	e00e      	b.n	9530 <gatt_indicate+0x80>
		req->func = func;
    9512:	4b09      	ldr	r3, [pc, #36]	; (9538 <gatt_indicate+0x88>)
    9514:	6043      	str	r3, [r0, #4]
		req->destroy = destroy;
    9516:	2300      	movs	r3, #0
		req->user_data = params;
    9518:	6185      	str	r5, [r0, #24]
		req->buf = buf;
    951a:	6106      	str	r6, [r0, #16]
		req->destroy = destroy;
    951c:	6083      	str	r3, [r0, #8]
		err = bt_att_req_send(conn, req);
    951e:	4601      	mov	r1, r0
    9520:	4638      	mov	r0, r7
    9522:	f013 feff 	bl	1d324 <bt_att_req_send>
		if (err) {
    9526:	4605      	mov	r5, r0
    9528:	b110      	cbz	r0, 9530 <gatt_indicate+0x80>
			bt_att_req_free(req);
    952a:	4620      	mov	r0, r4
    952c:	f7ff fd82 	bl	9034 <bt_att_req_free>
}
    9530:	4628      	mov	r0, r5
    9532:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9536:	bf00      	nop
    9538:	0001d3ab 	.word	0x0001d3ab

0000953c <notify_cb>:
{
    953c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9540:	4b30      	ldr	r3, [pc, #192]	; (9604 <notify_cb+0xc8>)
{
    9542:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9544:	6882      	ldr	r2, [r0, #8]
    9546:	429a      	cmp	r2, r3
{
    9548:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    954a:	d113      	bne.n	9574 <notify_cb+0x38>
	ccc = attr->user_data;
    954c:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    954e:	4b2e      	ldr	r3, [pc, #184]	; (9608 <notify_cb+0xcc>)
    9550:	429f      	cmp	r7, r3
    9552:	d013      	beq.n	957c <notify_cb+0x40>
		if (cfg->value != data->type) {
    9554:	893a      	ldrh	r2, [r7, #8]
    9556:	89a3      	ldrh	r3, [r4, #12]
    9558:	429a      	cmp	r2, r3
    955a:	d10b      	bne.n	9574 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    955c:	4639      	mov	r1, r7
    955e:	f811 0b01 	ldrb.w	r0, [r1], #1
    9562:	f7fe fc71 	bl	7e48 <bt_conn_lookup_addr_le>
		if (!conn) {
    9566:	4605      	mov	r5, r0
    9568:	b120      	cbz	r0, 9574 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    956a:	7b43      	ldrb	r3, [r0, #13]
    956c:	2b07      	cmp	r3, #7
    956e:	d02d      	beq.n	95cc <notify_cb+0x90>
			bt_conn_unref(conn);
    9570:	f013 f88d 	bl	1c68e <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    9574:	2001      	movs	r0, #1
}
    9576:	b003      	add	sp, #12
    9578:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    957c:	f04f 0800 	mov.w	r8, #0
    9580:	4d22      	ldr	r5, [pc, #136]	; (960c <notify_cb+0xd0>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    9582:	46c1      	mov	r9, r8
    9584:	2207      	movs	r2, #7
    9586:	4669      	mov	r1, sp
    9588:	4628      	mov	r0, r5
    958a:	f8cd 9000 	str.w	r9, [sp]
    958e:	f8cd 9003 	str.w	r9, [sp, #3]
    9592:	f012 fa3a 	bl	1ba0a <memcmp>
    9596:	b178      	cbz	r0, 95b8 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    9598:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    959c:	2207      	movs	r2, #7
    959e:	4629      	mov	r1, r5
    95a0:	f7fe fc6e 	bl	7e80 <bt_conn_lookup_state_le>
			if (!conn) {
    95a4:	b978      	cbnz	r0, 95c6 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    95a6:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    95a8:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    95ac:	68da      	ldr	r2, [r3, #12]
				sc_save(cfg->id, &cfg->peer,
    95ae:	4629      	mov	r1, r5
    95b0:	8853      	ldrh	r3, [r2, #2]
    95b2:	8812      	ldrh	r2, [r2, #0]
    95b4:	f014 f827 	bl	1d606 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    95b8:	350c      	adds	r5, #12
    95ba:	f1b8 0f00 	cmp.w	r8, #0
    95be:	d1c9      	bne.n	9554 <notify_cb+0x18>
    95c0:	f04f 0801 	mov.w	r8, #1
    95c4:	e7de      	b.n	9584 <notify_cb+0x48>
			bt_conn_unref(conn);
    95c6:	f013 f862 	bl	1c68e <bt_conn_unref>
    95ca:	e7f5      	b.n	95b8 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    95cc:	697b      	ldr	r3, [r7, #20]
    95ce:	b123      	cbz	r3, 95da <notify_cb+0x9e>
    95d0:	4631      	mov	r1, r6
    95d2:	4798      	blx	r3
    95d4:	b908      	cbnz	r0, 95da <notify_cb+0x9e>
			bt_conn_unref(conn);
    95d6:	4628      	mov	r0, r5
    95d8:	e7ca      	b.n	9570 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    95da:	89a3      	ldrh	r3, [r4, #12]
    95dc:	88a1      	ldrh	r1, [r4, #4]
    95de:	6922      	ldr	r2, [r4, #16]
    95e0:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    95e2:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    95e4:	d10b      	bne.n	95fe <notify_cb+0xc2>
			err = gatt_indicate(conn, data->handle,
    95e6:	f7ff ff63 	bl	94b0 <gatt_indicate>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    95ea:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    95ec:	4628      	mov	r0, r5
    95ee:	f013 f84e 	bl	1c68e <bt_conn_unref>
		if (err < 0) {
    95f2:	2e00      	cmp	r6, #0
    95f4:	f04f 0000 	mov.w	r0, #0
    95f8:	dbbd      	blt.n	9576 <notify_cb+0x3a>
		data->err = 0;
    95fa:	60a0      	str	r0, [r4, #8]
    95fc:	e7ba      	b.n	9574 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    95fe:	f013 fee3 	bl	1d3c8 <gatt_notify>
    9602:	e7f2      	b.n	95ea <notify_cb+0xae>
    9604:	0001d66d 	.word	0x0001d66d
    9608:	2000059c 	.word	0x2000059c
    960c:	20002907 	.word	0x20002907

00009610 <sc_indicate>:
{
    9610:	b510      	push	{r4, lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9612:	4b15      	ldr	r3, [pc, #84]	; (9668 <sc_indicate+0x58>)
    9614:	f3bf 8f5b 	dmb	ish
    9618:	f103 0248 	add.w	r2, r3, #72	; 0x48
    961c:	e852 4f00 	ldrex	r4, [r2]
    9620:	f044 0c01 	orr.w	ip, r4, #1
    9624:	e842 ce00 	strex	lr, ip, [r2]
    9628:	f1be 0f00 	cmp.w	lr, #0
    962c:	d1f6      	bne.n	961c <sc_indicate+0xc>
    962e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    9632:	07e2      	lsls	r2, r4, #31
    9634:	d40c      	bmi.n	9650 <sc_indicate+0x40>
		gatt_sc.start = start;
    9636:	8298      	strh	r0, [r3, #20]
		*end = new_end;
    9638:	82d9      	strh	r1, [r3, #22]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    963a:	f3bf 8f5b 	dmb	ish
    963e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    9640:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    9644:	079b      	lsls	r3, r3, #30
    9646:	d409      	bmi.n	965c <sc_indicate+0x4c>
}
    9648:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    964c:	f7ff be00 	b.w	9250 <sc_commit.part.0>
	if (new_start >= *start && new_end <= *end) {
    9650:	8a9c      	ldrh	r4, [r3, #20]
    9652:	8ada      	ldrh	r2, [r3, #22]
    9654:	4284      	cmp	r4, r0
    9656:	d802      	bhi.n	965e <sc_indicate+0x4e>
    9658:	4291      	cmp	r1, r2
    965a:	d8ed      	bhi.n	9638 <sc_indicate+0x28>
}
    965c:	bd10      	pop	{r4, pc}
	if (*end < new_end) {
    965e:	4291      	cmp	r1, r2
		*start = new_start;
    9660:	8298      	strh	r0, [r3, #20]
	if (*end < new_end) {
    9662:	d9ea      	bls.n	963a <sc_indicate+0x2a>
    9664:	e7e8      	b.n	9638 <sc_indicate+0x28>
    9666:	bf00      	nop
    9668:	20000ee0 	.word	0x20000ee0

0000966c <bt_gatt_init>:
{
    966c:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    966e:	4b18      	ldr	r3, [pc, #96]	; (96d0 <bt_gatt_init+0x64>)
    9670:	f3bf 8f5b 	dmb	ish
    9674:	2201      	movs	r2, #1
    9676:	e853 1f00 	ldrex	r1, [r3]
    967a:	2900      	cmp	r1, #0
    967c:	d103      	bne.n	9686 <bt_gatt_init+0x1a>
    967e:	e843 2000 	strex	r0, r2, [r3]
    9682:	2800      	cmp	r0, #0
    9684:	d1f7      	bne.n	9676 <bt_gatt_init+0xa>
    9686:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    968a:	d119      	bne.n	96c0 <bt_gatt_init+0x54>
    968c:	4a11      	ldr	r2, [pc, #68]	; (96d4 <bt_gatt_init+0x68>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    968e:	4912      	ldr	r1, [pc, #72]	; (96d8 <bt_gatt_init+0x6c>)
    9690:	8813      	ldrh	r3, [r2, #0]
    9692:	4c12      	ldr	r4, [pc, #72]	; (96dc <bt_gatt_init+0x70>)
	if (!atomic_cas(&init, 0, 1)) {
    9694:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    9696:	42a1      	cmp	r1, r4
    9698:	d313      	bcc.n	96c2 <bt_gatt_init+0x56>
    969a:	b100      	cbz	r0, 969e <bt_gatt_init+0x32>
    969c:	8013      	strh	r3, [r2, #0]
		k_delayed_work_init(&gatt_sc.work, sc_process);
    969e:	4910      	ldr	r1, [pc, #64]	; (96e0 <bt_gatt_init+0x74>)
    96a0:	4810      	ldr	r0, [pc, #64]	; (96e4 <bt_gatt_init+0x78>)
    96a2:	f015 fc8b 	bl	1efbc <k_delayed_work_init>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    96a6:	f3bf 8f5b 	dmb	ish
    96aa:	4b0f      	ldr	r3, [pc, #60]	; (96e8 <bt_gatt_init+0x7c>)
    96ac:	e853 2f00 	ldrex	r2, [r3]
    96b0:	f042 0202 	orr.w	r2, r2, #2
    96b4:	e843 2100 	strex	r1, r2, [r3]
    96b8:	2900      	cmp	r1, #0
    96ba:	d1f7      	bne.n	96ac <bt_gatt_init+0x40>
    96bc:	f3bf 8f5b 	dmb	ish
}
    96c0:	bd10      	pop	{r4, pc}
		last_static_handle += svc->attr_count;
    96c2:	6848      	ldr	r0, [r1, #4]
    96c4:	4403      	add	r3, r0
    96c6:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    96c8:	3108      	adds	r1, #8
    96ca:	2001      	movs	r0, #1
    96cc:	e7e3      	b.n	9696 <bt_gatt_init+0x2a>
    96ce:	bf00      	nop
    96d0:	2000150c 	.word	0x2000150c
    96d4:	20002904 	.word	0x20002904
    96d8:	0001f5b0 	.word	0x0001f5b0
    96dc:	0001f5c8 	.word	0x0001f5c8
    96e0:	00009c05 	.word	0x00009c05
    96e4:	20000ef8 	.word	0x20000ef8
    96e8:	20000f28 	.word	0x20000f28

000096ec <bt_gatt_attr_get_handle>:
{
    96ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    96f0:	4603      	mov	r3, r0
    96f2:	b148      	cbz	r0, 9708 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    96f4:	8a00      	ldrh	r0, [r0, #16]
    96f6:	b938      	cbnz	r0, 9708 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    96f8:	4912      	ldr	r1, [pc, #72]	; (9744 <bt_gatt_attr_get_handle+0x58>)
    96fa:	f8df e04c 	ldr.w	lr, [pc, #76]	; 9748 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    96fe:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9700:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9704:	4571      	cmp	r1, lr
    9706:	d301      	bcc.n	970c <bt_gatt_attr_get_handle+0x20>
}
    9708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if ((attr < &static_svc->attrs[0]) ||
    970c:	e9d1 7600 	ldrd	r7, r6, [r1]
    9710:	42bb      	cmp	r3, r7
    9712:	d304      	bcc.n	971e <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    9714:	fb0c 7206 	mla	r2, ip, r6, r7
    9718:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    971a:	4293      	cmp	r3, r2
    971c:	d90e      	bls.n	973c <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    971e:	19a2      	adds	r2, r4, r6
    9720:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9722:	3108      	adds	r1, #8
    9724:	4614      	mov	r4, r2
    9726:	e7ed      	b.n	9704 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    9728:	fb0c 7805 	mla	r8, ip, r5, r7
    972c:	4543      	cmp	r3, r8
    972e:	d007      	beq.n	9740 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    9730:	3501      	adds	r5, #1
    9732:	1962      	adds	r2, r4, r5
    9734:	42b5      	cmp	r5, r6
    9736:	b292      	uxth	r2, r2
    9738:	d1f6      	bne.n	9728 <bt_gatt_attr_get_handle+0x3c>
    973a:	e7f2      	b.n	9722 <bt_gatt_attr_get_handle+0x36>
    973c:	2500      	movs	r5, #0
    973e:	e7f8      	b.n	9732 <bt_gatt_attr_get_handle+0x46>
    9740:	4610      	mov	r0, r2
    9742:	e7e1      	b.n	9708 <bt_gatt_attr_get_handle+0x1c>
    9744:	0001f5b0 	.word	0x0001f5b0
    9748:	0001f5c8 	.word	0x0001f5c8

0000974c <bt_gatt_attr_value_handle>:
{
    974c:	b508      	push	{r3, lr}
    974e:	4603      	mov	r3, r0
	if ((attr != NULL)
    9750:	b150      	cbz	r0, 9768 <bt_gatt_attr_value_handle+0x1c>
	    && (attr->read == bt_gatt_attr_read_chrc)) {
    9752:	6841      	ldr	r1, [r0, #4]
    9754:	4a06      	ldr	r2, [pc, #24]	; (9770 <bt_gatt_attr_value_handle+0x24>)
    9756:	4291      	cmp	r1, r2
    9758:	d108      	bne.n	976c <bt_gatt_attr_value_handle+0x20>
		handle = chrc->value_handle;
    975a:	68c3      	ldr	r3, [r0, #12]
    975c:	889b      	ldrh	r3, [r3, #4]
		if (handle == 0) {
    975e:	b91b      	cbnz	r3, 9768 <bt_gatt_attr_value_handle+0x1c>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
    9760:	f7ff ffc4 	bl	96ec <bt_gatt_attr_get_handle>
    9764:	1c43      	adds	r3, r0, #1
    9766:	b29b      	uxth	r3, r3
}
    9768:	4618      	mov	r0, r3
    976a:	bd08      	pop	{r3, pc}
	uint16_t handle = 0;
    976c:	2300      	movs	r3, #0
    976e:	e7fb      	b.n	9768 <bt_gatt_attr_value_handle+0x1c>
    9770:	0001d793 	.word	0x0001d793

00009774 <bt_gatt_foreach_attr_type>:
{
    9774:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9778:	f8bd 4030 	ldrh.w	r4, [sp, #48]	; 0x30
    977c:	9100      	str	r1, [sp, #0]
    977e:	4698      	mov	r8, r3
		num_matches = UINT16_MAX;
    9780:	f64f 73ff 	movw	r3, #65535	; 0xffff
    9784:	2c00      	cmp	r4, #0
    9786:	bf08      	it	eq
    9788:	461c      	moveq	r4, r3
	if (start_handle <= last_static_handle) {
    978a:	4b4c      	ldr	r3, [pc, #304]	; (98bc <bt_gatt_foreach_attr_type+0x148>)
    978c:	881b      	ldrh	r3, [r3, #0]
    978e:	4283      	cmp	r3, r0
{
    9790:	4606      	mov	r6, r0
    9792:	4617      	mov	r7, r2
	if (start_handle <= last_static_handle) {
    9794:	d25d      	bcs.n	9852 <bt_gatt_foreach_attr_type+0xde>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9796:	4b4a      	ldr	r3, [pc, #296]	; (98c0 <bt_gatt_foreach_attr_type+0x14c>)
    9798:	681d      	ldr	r5, [r3, #0]
    979a:	2d00      	cmp	r5, #0
    979c:	d04f      	beq.n	983e <bt_gatt_foreach_attr_type+0xca>
    979e:	3d08      	subs	r5, #8
    97a0:	2d00      	cmp	r5, #0
    97a2:	d04c      	beq.n	983e <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT(slist, snode)
    97a4:	f115 0b08 	adds.w	fp, r5, #8
    97a8:	d00b      	beq.n	97c2 <bt_gatt_foreach_attr_type+0x4e>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    97aa:	68ab      	ldr	r3, [r5, #8]
		next = SYS_SLIST_PEEK_NEXT_CONTAINER(svc, node);
    97ac:	2b00      	cmp	r3, #0
    97ae:	f000 8082 	beq.w	98b6 <bt_gatt_foreach_attr_type+0x142>
		if (next) {
    97b2:	f1b3 0908 	subs.w	r9, r3, #8
    97b6:	d006      	beq.n	97c6 <bt_gatt_foreach_attr_type+0x52>
			if (next->attrs[0].handle <= start_handle) {
    97b8:	f853 3c08 	ldr.w	r3, [r3, #-8]
    97bc:	8a1b      	ldrh	r3, [r3, #16]
    97be:	42b3      	cmp	r3, r6
    97c0:	d907      	bls.n	97d2 <bt_gatt_foreach_attr_type+0x5e>
    97c2:	f04f 0900 	mov.w	r9, #0
		for (i = 0; i < svc->attr_count; i++) {
    97c6:	686b      	ldr	r3, [r5, #4]
    97c8:	4599      	cmp	r9, r3
    97ca:	d348      	bcc.n	985e <bt_gatt_foreach_attr_type+0xea>
Z_GENLIST_PEEK_NEXT(slist, snode)
    97cc:	f1bb 0f00 	cmp.w	fp, #0
    97d0:	d035      	beq.n	983e <bt_gatt_foreach_attr_type+0xca>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    97d2:	68ad      	ldr	r5, [r5, #8]
    97d4:	e7e1      	b.n	979a <bt_gatt_foreach_attr_type+0x26>
			if (handle + static_svc->attr_count < start_handle) {
    97d6:	f8d9 3004 	ldr.w	r3, [r9, #4]
    97da:	442b      	add	r3, r5
    97dc:	42b3      	cmp	r3, r6
    97de:	d235      	bcs.n	984c <bt_gatt_foreach_attr_type+0xd8>
				handle += static_svc->attr_count;
    97e0:	b29d      	uxth	r5, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    97e2:	f109 0908 	add.w	r9, r9, #8
    97e6:	4b37      	ldr	r3, [pc, #220]	; (98c4 <bt_gatt_foreach_attr_type+0x150>)
    97e8:	4599      	cmp	r9, r3
    97ea:	d3f4      	bcc.n	97d6 <bt_gatt_foreach_attr_type+0x62>
    97ec:	e7d3      	b.n	9796 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    97ee:	5889      	ldr	r1, [r1, r2]
    97f0:	9301      	str	r3, [sp, #4]
    97f2:	4638      	mov	r0, r7
    97f4:	f012 fa18 	bl	1bc28 <bt_uuid_cmp>
    97f8:	9b01      	ldr	r3, [sp, #4]
    97fa:	b198      	cbz	r0, 9824 <bt_gatt_foreach_attr_type+0xb0>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    97fc:	3501      	adds	r5, #1
    97fe:	f10a 0a01 	add.w	sl, sl, #1
    9802:	b2ad      	uxth	r5, r5
    9804:	f8d9 3004 	ldr.w	r3, [r9, #4]
    9808:	4553      	cmp	r3, sl
    980a:	d9ea      	bls.n	97e2 <bt_gatt_foreach_attr_type+0x6e>
	if (handle > end_handle) {
    980c:	9b00      	ldr	r3, [sp, #0]
    980e:	429d      	cmp	r5, r3
    9810:	d815      	bhi.n	983e <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
    9812:	42b5      	cmp	r5, r6
    9814:	d3f2      	bcc.n	97fc <bt_gatt_foreach_attr_type+0x88>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9816:	f8d9 1000 	ldr.w	r1, [r9]
    981a:	fb0b f20a 	mul.w	r2, fp, sl
    981e:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9820:	2f00      	cmp	r7, #0
    9822:	d1e4      	bne.n	97ee <bt_gatt_foreach_attr_type+0x7a>
	if (attr_data && attr_data != attr->user_data) {
    9824:	f1b8 0f00 	cmp.w	r8, #0
    9828:	d10c      	bne.n	9844 <bt_gatt_foreach_attr_type+0xd0>
	*num_matches -= 1;
    982a:	3c01      	subs	r4, #1
    982c:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    982e:	4618      	mov	r0, r3
    9830:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9832:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9834:	4629      	mov	r1, r5
    9836:	4798      	blx	r3
	if (!*num_matches) {
    9838:	b10c      	cbz	r4, 983e <bt_gatt_foreach_attr_type+0xca>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    983a:	2800      	cmp	r0, #0
    983c:	d1de      	bne.n	97fc <bt_gatt_foreach_attr_type+0x88>
}
    983e:	b003      	add	sp, #12
    9840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (attr_data && attr_data != attr->user_data) {
    9844:	68da      	ldr	r2, [r3, #12]
    9846:	4590      	cmp	r8, r2
    9848:	d1d8      	bne.n	97fc <bt_gatt_foreach_attr_type+0x88>
    984a:	e7ee      	b.n	982a <bt_gatt_foreach_attr_type+0xb6>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    984c:	f04f 0a00 	mov.w	sl, #0
    9850:	e7d8      	b.n	9804 <bt_gatt_foreach_attr_type+0x90>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    9852:	f8df 9074 	ldr.w	r9, [pc, #116]	; 98c8 <bt_gatt_foreach_attr_type+0x154>
		uint16_t handle = 1;
    9856:	2501      	movs	r5, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    9858:	f04f 0b14 	mov.w	fp, #20
    985c:	e7c3      	b.n	97e6 <bt_gatt_foreach_attr_type+0x72>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    985e:	2314      	movs	r3, #20
    9860:	6829      	ldr	r1, [r5, #0]
	if (handle > end_handle) {
    9862:	9800      	ldr	r0, [sp, #0]
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9864:	fb03 f209 	mul.w	r2, r3, r9
    9868:	eb01 0a02 	add.w	sl, r1, r2
			if (gatt_foreach_iter(attr, attr->handle,
    986c:	f8ba 3010 	ldrh.w	r3, [sl, #16]
	if (handle > end_handle) {
    9870:	4298      	cmp	r0, r3
    9872:	d3e4      	bcc.n	983e <bt_gatt_foreach_attr_type+0xca>
	if (handle < start_handle) {
    9874:	429e      	cmp	r6, r3
    9876:	d816      	bhi.n	98a6 <bt_gatt_foreach_attr_type+0x132>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9878:	b96f      	cbnz	r7, 9896 <bt_gatt_foreach_attr_type+0x122>
	if (attr_data && attr_data != attr->user_data) {
    987a:	f1b8 0f00 	cmp.w	r8, #0
    987e:	d115      	bne.n	98ac <bt_gatt_foreach_attr_type+0x138>
	*num_matches -= 1;
    9880:	3c01      	subs	r4, #1
    9882:	b2a4      	uxth	r4, r4
	result = func(attr, handle, user_data);
    9884:	4619      	mov	r1, r3
    9886:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    9888:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    988a:	4650      	mov	r0, sl
    988c:	4798      	blx	r3
	if (!*num_matches) {
    988e:	2c00      	cmp	r4, #0
    9890:	d0d5      	beq.n	983e <bt_gatt_foreach_attr_type+0xca>
			if (gatt_foreach_iter(attr, attr->handle,
    9892:	b940      	cbnz	r0, 98a6 <bt_gatt_foreach_attr_type+0x132>
    9894:	e7d3      	b.n	983e <bt_gatt_foreach_attr_type+0xca>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    9896:	5889      	ldr	r1, [r1, r2]
    9898:	9301      	str	r3, [sp, #4]
    989a:	4638      	mov	r0, r7
    989c:	f012 f9c4 	bl	1bc28 <bt_uuid_cmp>
    98a0:	9b01      	ldr	r3, [sp, #4]
    98a2:	2800      	cmp	r0, #0
    98a4:	d0e9      	beq.n	987a <bt_gatt_foreach_attr_type+0x106>
		for (i = 0; i < svc->attr_count; i++) {
    98a6:	f109 0901 	add.w	r9, r9, #1
    98aa:	e78c      	b.n	97c6 <bt_gatt_foreach_attr_type+0x52>
	if (attr_data && attr_data != attr->user_data) {
    98ac:	f8da 200c 	ldr.w	r2, [sl, #12]
    98b0:	4590      	cmp	r8, r2
    98b2:	d1f8      	bne.n	98a6 <bt_gatt_foreach_attr_type+0x132>
    98b4:	e7e4      	b.n	9880 <bt_gatt_foreach_attr_type+0x10c>
    98b6:	4699      	mov	r9, r3
    98b8:	e785      	b.n	97c6 <bt_gatt_foreach_attr_type+0x52>
    98ba:	bf00      	nop
    98bc:	20002904 	.word	0x20002904
    98c0:	20001504 	.word	0x20001504
    98c4:	0001f5c8 	.word	0x0001f5c8
    98c8:	0001f5b0 	.word	0x0001f5b0

000098cc <bt_gatt_service_register>:
{
    98cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    98d0:	4605      	mov	r5, r0
	bt_gatt_init();
    98d2:	f7ff fecb 	bl	966c <bt_gatt_init>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    98d6:	682b      	ldr	r3, [r5, #0]
    98d8:	2400      	movs	r4, #0
    98da:	6818      	ldr	r0, [r3, #0]
    98dc:	f88d 4000 	strb.w	r4, [sp]
    98e0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    98e4:	4669      	mov	r1, sp
    98e6:	f8ad 3002 	strh.w	r3, [sp, #2]
    98ea:	f012 f99d 	bl	1bc28 <bt_uuid_cmp>
    98ee:	b920      	cbnz	r0, 98fa <bt_gatt_service_register+0x2e>
		return -EALREADY;
    98f0:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
    98f4:	b003      	add	sp, #12
    98f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    98fa:	682b      	ldr	r3, [r5, #0]
    98fc:	a901      	add	r1, sp, #4
    98fe:	6818      	ldr	r0, [r3, #0]
    9900:	f88d 4004 	strb.w	r4, [sp, #4]
    9904:	f641 0301 	movw	r3, #6145	; 0x1801
    9908:	f8ad 3006 	strh.w	r3, [sp, #6]
    990c:	f012 f98c 	bl	1bc28 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    9910:	2800      	cmp	r0, #0
    9912:	d0ed      	beq.n	98f0 <bt_gatt_service_register+0x24>
Z_GENLIST_IS_EMPTY(slist)
    9914:	4c41      	ldr	r4, [pc, #260]	; (9a1c <bt_gatt_service_register+0x150>)
	struct bt_gatt_attr *attrs = svc->attrs;
    9916:	f8d5 9000 	ldr.w	r9, [r5]
	if (sys_slist_is_empty(&db)) {
    991a:	6826      	ldr	r6, [r4, #0]
	uint16_t count = svc->attr_count;
    991c:	f8b5 8004 	ldrh.w	r8, [r5, #4]
	if (sys_slist_is_empty(&db)) {
    9920:	b936      	cbnz	r6, 9930 <bt_gatt_service_register+0x64>
		handle = last_static_handle;
    9922:	4b3f      	ldr	r3, [pc, #252]	; (9a20 <bt_gatt_service_register+0x154>)
    9924:	881f      	ldrh	r7, [r3, #0]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    9926:	f8df b0fc 	ldr.w	fp, [pc, #252]	; 9a24 <bt_gatt_service_register+0x158>
	const struct bt_gatt_attr *attr = NULL;
    992a:	f04f 0a00 	mov.w	sl, #0
    992e:	e019      	b.n	9964 <bt_gatt_service_register+0x98>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9930:	6863      	ldr	r3, [r4, #4]
    9932:	2b00      	cmp	r3, #0
    9934:	d070      	beq.n	9a18 <bt_gatt_service_register+0x14c>
	handle = last->attrs[last->attr_count - 1].handle;
    9936:	e953 3202 	ldrd	r3, r2, [r3, #-8]
    993a:	2114      	movs	r1, #20
    993c:	fb01 3302 	mla	r3, r1, r2, r3
    9940:	f833 7c04 	ldrh.w	r7, [r3, #-4]
    9944:	463e      	mov	r6, r7
    9946:	e7ee      	b.n	9926 <bt_gatt_service_register+0x5a>
		if (!attrs->handle) {
    9948:	f8b9 1010 	ldrh.w	r1, [r9, #16]
    994c:	bb41      	cbnz	r1, 99a0 <bt_gatt_service_register+0xd4>
			attrs->handle = ++handle;
    994e:	1c79      	adds	r1, r7, #1
    9950:	b289      	uxth	r1, r1
    9952:	f8a9 1010 	strh.w	r1, [r9, #16]
	for (; attrs && count; attrs++, count--) {
    9956:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
    995a:	f109 0914 	add.w	r9, r9, #20
    995e:	fa1f f888 	uxth.w	r8, r8
    9962:	460f      	mov	r7, r1
    9964:	f1b9 0f00 	cmp.w	r9, #0
    9968:	d002      	beq.n	9970 <bt_gatt_service_register+0xa4>
    996a:	f1b8 0f00 	cmp.w	r8, #0
    996e:	d1eb      	bne.n	9948 <bt_gatt_service_register+0x7c>
	if (last_handle == 0 || svc->attrs[0].handle > last_handle) {
    9970:	682f      	ldr	r7, [r5, #0]
    9972:	8a38      	ldrh	r0, [r7, #16]
    9974:	b10e      	cbz	r6, 997a <bt_gatt_service_register+0xae>
    9976:	4286      	cmp	r6, r0
    9978:	d220      	bcs.n	99bc <bt_gatt_service_register+0xf0>
	parent->next = child;
    997a:	2200      	movs	r2, #0
		sys_slist_append(&db, &svc->node);
    997c:	f105 0308 	add.w	r3, r5, #8
    9980:	60aa      	str	r2, [r5, #8]
Z_GENLIST_APPEND(slist, snode)
    9982:	6862      	ldr	r2, [r4, #4]
    9984:	2a00      	cmp	r2, #0
    9986:	d137      	bne.n	99f8 <bt_gatt_service_register+0x12c>
	list->head = node;
    9988:	e9c4 3300 	strd	r3, r3, [r4]
		    svc->attrs[svc->attr_count - 1].handle);
    998c:	686b      	ldr	r3, [r5, #4]
	sc_indicate(svc->attrs[0].handle,
    998e:	2214      	movs	r2, #20
    9990:	fb02 7303 	mla	r3, r2, r3, r7
    9994:	f833 1c04 	ldrh.w	r1, [r3, #-4]
    9998:	f7ff fe3a 	bl	9610 <sc_indicate>
	return 0;
    999c:	2000      	movs	r0, #0
    999e:	e7a9      	b.n	98f4 <bt_gatt_service_register+0x28>
		} else if (attrs->handle > handle) {
    99a0:	42b9      	cmp	r1, r7
    99a2:	d8d8      	bhi.n	9956 <bt_gatt_service_register+0x8a>
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    99a4:	ab01      	add	r3, sp, #4
    99a6:	465a      	mov	r2, fp
    99a8:	4608      	mov	r0, r1
	const struct bt_gatt_attr *attr = NULL;
    99aa:	f8cd a004 	str.w	sl, [sp, #4]
	bt_gatt_foreach_attr(handle, handle, found_attr, &attr);
    99ae:	f013 ff21 	bl	1d7f4 <bt_gatt_foreach_attr>
	return attr;
    99b2:	9b01      	ldr	r3, [sp, #4]
		} else if (find_attr(attrs->handle)) {
    99b4:	2b00      	cmp	r3, #0
    99b6:	d12c      	bne.n	9a12 <bt_gatt_service_register+0x146>
    99b8:	4639      	mov	r1, r7
    99ba:	e7cc      	b.n	9956 <bt_gatt_service_register+0x8a>
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    99bc:	6821      	ldr	r1, [r4, #0]
    99be:	2900      	cmp	r1, #0
    99c0:	d0e4      	beq.n	998c <bt_gatt_service_register+0xc0>
    99c2:	f1a1 0308 	sub.w	r3, r1, #8
    99c6:	2200      	movs	r2, #0
    99c8:	2b00      	cmp	r3, #0
    99ca:	d0df      	beq.n	998c <bt_gatt_service_register+0xc0>
		if (tmp->attrs[0].handle > svc->attrs[0].handle) {
    99cc:	681e      	ldr	r6, [r3, #0]
    99ce:	8a36      	ldrh	r6, [r6, #16]
    99d0:	4286      	cmp	r6, r0
    99d2:	d914      	bls.n	99fe <bt_gatt_service_register+0x132>
			if (prev) {
    99d4:	f105 0308 	add.w	r3, r5, #8
    99d8:	b112      	cbz	r2, 99e0 <bt_gatt_service_register+0x114>
Z_GENLIST_INSERT(slist, snode)
    99da:	f112 0f08 	cmn.w	r2, #8
    99de:	d105      	bne.n	99ec <bt_gatt_service_register+0x120>
Z_GENLIST_PREPEND(slist, snode)
    99e0:	6862      	ldr	r2, [r4, #4]
	parent->next = child;
    99e2:	60a9      	str	r1, [r5, #8]
	list->head = node;
    99e4:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    99e6:	2a00      	cmp	r2, #0
    99e8:	d1d0      	bne.n	998c <bt_gatt_service_register+0xc0>
    99ea:	e006      	b.n	99fa <bt_gatt_service_register+0x12e>
Z_GENLIST_INSERT(slist, snode)
    99ec:	6891      	ldr	r1, [r2, #8]
	parent->next = child;
    99ee:	60a9      	str	r1, [r5, #8]
Z_GENLIST_INSERT(slist, snode)
    99f0:	2900      	cmp	r1, #0
    99f2:	d0c6      	beq.n	9982 <bt_gatt_service_register+0xb6>
	parent->next = child;
    99f4:	6093      	str	r3, [r2, #8]
	if (err < 0) {
    99f6:	e7c9      	b.n	998c <bt_gatt_service_register+0xc0>
    99f8:	6013      	str	r3, [r2, #0]
	list->tail = node;
    99fa:	6063      	str	r3, [r4, #4]
    99fc:	e7c6      	b.n	998c <bt_gatt_service_register+0xc0>
Z_GENLIST_PEEK_NEXT(slist, snode)
    99fe:	f113 0f08 	cmn.w	r3, #8
    9a02:	d0c3      	beq.n	998c <bt_gatt_service_register+0xc0>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    9a04:	689e      	ldr	r6, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, tmp, node) {
    9a06:	2e00      	cmp	r6, #0
    9a08:	d0c0      	beq.n	998c <bt_gatt_service_register+0xc0>
    9a0a:	461a      	mov	r2, r3
    9a0c:	f1a6 0308 	sub.w	r3, r6, #8
    9a10:	e7da      	b.n	99c8 <bt_gatt_service_register+0xfc>
			return -EINVAL;
    9a12:	f06f 0015 	mvn.w	r0, #21
    9a16:	e76d      	b.n	98f4 <bt_gatt_service_register+0x28>
	handle = last->attrs[last->attr_count - 1].handle;
    9a18:	681b      	ldr	r3, [r3, #0]
    9a1a:	deff      	udf	#255	; 0xff
    9a1c:	20001504 	.word	0x20001504
    9a20:	20002904 	.word	0x20002904
    9a24:	0001d391 	.word	0x0001d391

00009a28 <bt_gatt_notify_cb>:
{
    9a28:	b530      	push	{r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9a2a:	4b37      	ldr	r3, [pc, #220]	; (9b08 <bt_gatt_notify_cb+0xe0>)
    9a2c:	f3bf 8f5b 	dmb	ish
    9a30:	681b      	ldr	r3, [r3, #0]
    9a32:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9a36:	079a      	lsls	r2, r3, #30
{
    9a38:	b08b      	sub	sp, #44	; 0x2c
    9a3a:	4604      	mov	r4, r0
    9a3c:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9a3e:	d55d      	bpl.n	9afc <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    9a40:	6848      	ldr	r0, [r1, #4]
    9a42:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9a44:	b114      	cbz	r4, 9a4c <bt_gatt_notify_cb+0x24>
    9a46:	7b63      	ldrb	r3, [r4, #13]
    9a48:	2b07      	cmp	r3, #7
    9a4a:	d15a      	bne.n	9b02 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9a4c:	f7ff fe4e 	bl	96ec <bt_gatt_attr_get_handle>
    9a50:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    9a54:	b918      	cbnz	r0, 9a5e <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    9a56:	f06f 0001 	mvn.w	r0, #1
}
    9a5a:	b00b      	add	sp, #44	; 0x2c
    9a5c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    9a5e:	682a      	ldr	r2, [r5, #0]
    9a60:	b9aa      	cbnz	r2, 9a8e <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    9a62:	9b05      	ldr	r3, [sp, #20]
    9a64:	6818      	ldr	r0, [r3, #0]
    9a66:	2300      	movs	r3, #0
    9a68:	f88d 3010 	strb.w	r3, [sp, #16]
    9a6c:	a904      	add	r1, sp, #16
    9a6e:	f642 0303 	movw	r3, #10243	; 0x2803
    9a72:	f8ad 3012 	strh.w	r3, [sp, #18]
    9a76:	f012 f8d7 	bl	1bc28 <bt_uuid_cmp>
    9a7a:	b1c0      	cbz	r0, 9aae <bt_gatt_notify_cb+0x86>
	if (conn) {
    9a7c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    9a80:	b314      	cbz	r4, 9ac8 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    9a82:	4601      	mov	r1, r0
    9a84:	462a      	mov	r2, r5
    9a86:	4620      	mov	r0, r4
    9a88:	f013 fc9e 	bl	1d3c8 <gatt_notify>
    9a8c:	e7e5      	b.n	9a5a <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9a8e:	a905      	add	r1, sp, #20
    9a90:	9102      	str	r1, [sp, #8]
    9a92:	491e      	ldr	r1, [pc, #120]	; (9b0c <bt_gatt_notify_cb+0xe4>)
    9a94:	9101      	str	r1, [sp, #4]
    9a96:	2101      	movs	r1, #1
	found->attr = NULL;
    9a98:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9a9a:	9100      	str	r1, [sp, #0]
    9a9c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9aa0:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9aa2:	f7ff fe67 	bl	9774 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9aa6:	9b05      	ldr	r3, [sp, #20]
    9aa8:	2b00      	cmp	r3, #0
    9aaa:	d1da      	bne.n	9a62 <bt_gatt_notify_cb+0x3a>
    9aac:	e7d3      	b.n	9a56 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9aae:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    9ab0:	68c3      	ldr	r3, [r0, #12]
    9ab2:	799b      	ldrb	r3, [r3, #6]
    9ab4:	06db      	lsls	r3, r3, #27
    9ab6:	d402      	bmi.n	9abe <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    9ab8:	f06f 0015 	mvn.w	r0, #21
    9abc:	e7cd      	b.n	9a5a <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9abe:	f7ff fe45 	bl	974c <bt_gatt_attr_value_handle>
    9ac2:	f8ad 0018 	strh.w	r0, [sp, #24]
    9ac6:	e7d9      	b.n	9a7c <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9ac8:	f642 1202 	movw	r2, #10498	; 0x2902
    9acc:	f8ad 2012 	strh.w	r2, [sp, #18]
    9ad0:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    9ad2:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9ad6:	9202      	str	r2, [sp, #8]
    9ad8:	4a0d      	ldr	r2, [pc, #52]	; (9b10 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    9ada:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    9adc:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9ade:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    9ae2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9ae6:	aa04      	add	r2, sp, #16
    9ae8:	4623      	mov	r3, r4
    9aea:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    9aee:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9af0:	f88d 4010 	strb.w	r4, [sp, #16]
    9af4:	f7ff fe3e 	bl	9774 <bt_gatt_foreach_attr_type>
	return data.err;
    9af8:	9807      	ldr	r0, [sp, #28]
    9afa:	e7ae      	b.n	9a5a <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    9afc:	f06f 000a 	mvn.w	r0, #10
    9b00:	e7ab      	b.n	9a5a <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    9b02:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9b06:	e7a8      	b.n	9a5a <bt_gatt_notify_cb+0x32>
    9b08:	20000098 	.word	0x20000098
    9b0c:	0001d3bb 	.word	0x0001d3bb
    9b10:	0000953d 	.word	0x0000953d

00009b14 <bt_gatt_indicate>:
{
    9b14:	b530      	push	{r4, r5, lr}
    9b16:	4b38      	ldr	r3, [pc, #224]	; (9bf8 <bt_gatt_indicate+0xe4>)
    9b18:	f3bf 8f5b 	dmb	ish
    9b1c:	681b      	ldr	r3, [r3, #0]
    9b1e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9b22:	079a      	lsls	r2, r3, #30
{
    9b24:	b08b      	sub	sp, #44	; 0x2c
    9b26:	4604      	mov	r4, r0
    9b28:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    9b2a:	d55e      	bpl.n	9bea <bt_gatt_indicate+0xd6>
	data.attr = params->attr;
    9b2c:	6848      	ldr	r0, [r1, #4]
    9b2e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    9b30:	b114      	cbz	r4, 9b38 <bt_gatt_indicate+0x24>
    9b32:	7b63      	ldrb	r3, [r4, #13]
    9b34:	2b07      	cmp	r3, #7
    9b36:	d15b      	bne.n	9bf0 <bt_gatt_indicate+0xdc>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    9b38:	f7ff fdd8 	bl	96ec <bt_gatt_attr_get_handle>
    9b3c:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    9b40:	b918      	cbnz	r0, 9b4a <bt_gatt_indicate+0x36>
		return -ENOENT;
    9b42:	f06f 0001 	mvn.w	r0, #1
}
    9b46:	b00b      	add	sp, #44	; 0x2c
    9b48:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    9b4a:	682a      	ldr	r2, [r5, #0]
    9b4c:	b9aa      	cbnz	r2, 9b7a <bt_gatt_indicate+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    9b4e:	9b05      	ldr	r3, [sp, #20]
    9b50:	6818      	ldr	r0, [r3, #0]
    9b52:	2300      	movs	r3, #0
    9b54:	f88d 3010 	strb.w	r3, [sp, #16]
    9b58:	a904      	add	r1, sp, #16
    9b5a:	f642 0303 	movw	r3, #10243	; 0x2803
    9b5e:	f8ad 3012 	strh.w	r3, [sp, #18]
    9b62:	f012 f861 	bl	1bc28 <bt_uuid_cmp>
    9b66:	b1c0      	cbz	r0, 9b9a <bt_gatt_indicate+0x86>
	if (conn) {
    9b68:	f8bd 0018 	ldrh.w	r0, [sp, #24]
    9b6c:	b314      	cbz	r4, 9bb4 <bt_gatt_indicate+0xa0>
		return gatt_indicate(conn, data.handle, params);
    9b6e:	4601      	mov	r1, r0
    9b70:	462a      	mov	r2, r5
    9b72:	4620      	mov	r0, r4
    9b74:	f7ff fc9c 	bl	94b0 <gatt_indicate>
    9b78:	e7e5      	b.n	9b46 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9b7a:	a905      	add	r1, sp, #20
    9b7c:	9102      	str	r1, [sp, #8]
    9b7e:	491f      	ldr	r1, [pc, #124]	; (9bfc <bt_gatt_indicate+0xe8>)
    9b80:	9101      	str	r1, [sp, #4]
    9b82:	2101      	movs	r1, #1
	found->attr = NULL;
    9b84:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9b86:	9100      	str	r1, [sp, #0]
    9b88:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    9b8c:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    9b8e:	f7ff fdf1 	bl	9774 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    9b92:	9b05      	ldr	r3, [sp, #20]
    9b94:	2b00      	cmp	r3, #0
    9b96:	d1da      	bne.n	9b4e <bt_gatt_indicate+0x3a>
    9b98:	e7d3      	b.n	9b42 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    9b9a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    9b9c:	68c3      	ldr	r3, [r0, #12]
    9b9e:	799b      	ldrb	r3, [r3, #6]
    9ba0:	069b      	lsls	r3, r3, #26
    9ba2:	d402      	bmi.n	9baa <bt_gatt_indicate+0x96>
			return -EINVAL;
    9ba4:	f06f 0015 	mvn.w	r0, #21
    9ba8:	e7cd      	b.n	9b46 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    9baa:	f7ff fdcf 	bl	974c <bt_gatt_attr_value_handle>
    9bae:	f8ad 0018 	strh.w	r0, [sp, #24]
    9bb2:	e7d9      	b.n	9b68 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    9bb4:	f06f 0338 	mvn.w	r3, #56	; 0x38
    9bb8:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    9bba:	2302      	movs	r3, #2
    9bbc:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9bc0:	f642 1302 	movw	r3, #10498	; 0x2902
    9bc4:	f8ad 3012 	strh.w	r3, [sp, #18]
    9bc8:	ab05      	add	r3, sp, #20
    9bca:	9302      	str	r3, [sp, #8]
    9bcc:	4b0c      	ldr	r3, [pc, #48]	; (9c00 <bt_gatt_indicate+0xec>)
    9bce:	9301      	str	r3, [sp, #4]
    9bd0:	2301      	movs	r3, #1
    9bd2:	9300      	str	r3, [sp, #0]
    9bd4:	aa04      	add	r2, sp, #16
    9bd6:	4623      	mov	r3, r4
    9bd8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    9bdc:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    9bde:	f88d 4010 	strb.w	r4, [sp, #16]
    9be2:	f7ff fdc7 	bl	9774 <bt_gatt_foreach_attr_type>
	return data.err;
    9be6:	9807      	ldr	r0, [sp, #28]
    9be8:	e7ad      	b.n	9b46 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    9bea:	f06f 000a 	mvn.w	r0, #10
    9bee:	e7aa      	b.n	9b46 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    9bf0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    9bf4:	e7a7      	b.n	9b46 <bt_gatt_indicate+0x32>
    9bf6:	bf00      	nop
    9bf8:	20000098 	.word	0x20000098
    9bfc:	0001d3bb 	.word	0x0001d3bb
    9c00:	0000953d 	.word	0x0000953d

00009c04 <sc_process>:
{
    9c04:	b513      	push	{r0, r1, r4, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9c06:	f850 2c04 	ldr.w	r2, [r0, #-4]
    9c0a:	9201      	str	r2, [sp, #4]
{
    9c0c:	4603      	mov	r3, r0
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9c0e:	f1a0 0118 	sub.w	r1, r0, #24
    9c12:	f100 0430 	add.w	r4, r0, #48	; 0x30
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9c16:	f3bf 8f5b 	dmb	ish
    9c1a:	e854 2f00 	ldrex	r2, [r4]
    9c1e:	f022 0201 	bic.w	r2, r2, #1
    9c22:	e844 2000 	strex	r0, r2, [r4]
    9c26:	2800      	cmp	r0, #0
    9c28:	d1f7      	bne.n	9c1a <sc_process+0x16>
    9c2a:	f3bf 8f5b 	dmb	ish
	sc->params.attr = &_1_gatt_svc.attrs[2];
    9c2e:	4a11      	ldr	r2, [pc, #68]	; (9c74 <sc_process+0x70>)
    9c30:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    9c34:	4a10      	ldr	r2, [pc, #64]	; (9c78 <sc_process+0x74>)
    9c36:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    9c3a:	aa01      	add	r2, sp, #4
	sc->start = 0U;
    9c3c:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    9c3e:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    9c42:	2204      	movs	r2, #4
	sc->start = 0U;
    9c44:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0U;
    9c48:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.len = sizeof(sc_range);
    9c4c:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9c50:	f7ff ff60 	bl	9b14 <bt_gatt_indicate>
    9c54:	b958      	cbnz	r0, 9c6e <sc_process+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9c56:	f3bf 8f5b 	dmb	ish
    9c5a:	e854 3f00 	ldrex	r3, [r4]
    9c5e:	f043 0302 	orr.w	r3, r3, #2
    9c62:	e844 3200 	strex	r2, r3, [r4]
    9c66:	2a00      	cmp	r2, #0
    9c68:	d1f7      	bne.n	9c5a <sc_process+0x56>
    9c6a:	f3bf 8f5b 	dmb	ish
}
    9c6e:	b002      	add	sp, #8
    9c70:	bd10      	pop	{r4, pc}
    9c72:	bf00      	nop
    9c74:	0001fb58 	.word	0x0001fb58
    9c78:	000092e5 	.word	0x000092e5

00009c7c <update_ccc>:
{
    9c7c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    9c80:	4b32      	ldr	r3, [pc, #200]	; (9d4c <update_ccc+0xd0>)
{
    9c82:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    9c84:	6882      	ldr	r2, [r0, #8]
    9c86:	429a      	cmp	r2, r3
{
    9c88:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    9c8a:	d122      	bne.n	9cd2 <update_ccc+0x56>
	ccc = attr->user_data;
    9c8c:	68c7      	ldr	r7, [r0, #12]
	struct bt_conn *conn = data->conn;
    9c8e:	6835      	ldr	r5, [r6, #0]
		if (!cfg->value ||
    9c90:	893b      	ldrh	r3, [r7, #8]
    9c92:	b1f3      	cbz	r3, 9cd2 <update_ccc+0x56>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    9c94:	463a      	mov	r2, r7
    9c96:	4628      	mov	r0, r5
    9c98:	f812 1b01 	ldrb.w	r1, [r2], #1
    9c9c:	f012 fcd7 	bl	1c64e <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    9ca0:	b1b8      	cbz	r0, 9cd2 <update_ccc+0x56>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    9ca2:	222a      	movs	r2, #42	; 0x2a
    9ca4:	4621      	mov	r1, r4
    9ca6:	4628      	mov	r0, r5
    9ca8:	f013 fde3 	bl	1d872 <bt_gatt_check_perm>
		if (err) {
    9cac:	b1a8      	cbz	r0, 9cda <update_ccc+0x5e>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    9cae:	2803      	cmp	r0, #3
    9cb0:	d00f      	beq.n	9cd2 <update_ccc+0x56>
				sec = BT_SECURITY_L3;
    9cb2:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    9cb4:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    9cb6:	bf14      	ite	ne
    9cb8:	f04f 0802 	movne.w	r8, #2
    9cbc:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    9cc0:	f012 fc52 	bl	1c568 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    9cc4:	4580      	cmp	r8, r0
    9cc6:	d908      	bls.n	9cda <update_ccc+0x5e>
				if (data->sec < sec) {
    9cc8:	7933      	ldrb	r3, [r6, #4]
    9cca:	4543      	cmp	r3, r8
    9ccc:	d201      	bcs.n	9cd2 <update_ccc+0x56>
					data->sec = sec;
    9cce:	f886 8004 	strb.w	r8, [r6, #4]
}
    9cd2:	2001      	movs	r0, #1
    9cd4:	b002      	add	sp, #8
    9cd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		gatt_ccc_changed(attr, ccc);
    9cda:	4639      	mov	r1, r7
    9cdc:	4620      	mov	r0, r4
    9cde:	f013 fb5a 	bl	1d396 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    9ce2:	4b1b      	ldr	r3, [pc, #108]	; (9d50 <update_ccc+0xd4>)
    9ce4:	429f      	cmp	r7, r3
    9ce6:	d1f4      	bne.n	9cd2 <update_ccc+0x56>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    9ce8:	7a28      	ldrb	r0, [r5, #8]
    9cea:	f105 0188 	add.w	r1, r5, #136	; 0x88
    9cee:	f7ff fb1b 	bl	9328 <find_sc_cfg>
	if (!cfg) {
    9cf2:	4604      	mov	r4, r0
    9cf4:	2800      	cmp	r0, #0
    9cf6:	d0ec      	beq.n	9cd2 <update_ccc+0x56>
	if (!(cfg->data.start || cfg->data.end)) {
    9cf8:	8902      	ldrh	r2, [r0, #8]
    9cfa:	8943      	ldrh	r3, [r0, #10]
    9cfc:	ea53 0102 	orrs.w	r1, r3, r2
    9d00:	d0e7      	beq.n	9cd2 <update_ccc+0x56>
	index = bt_conn_index(conn);
    9d02:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    9d04:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    9d08:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    9d0c:	f7fe fab2 	bl	8274 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9d10:	4910      	ldr	r1, [pc, #64]	; (9d54 <update_ccc+0xd8>)
    9d12:	4a11      	ldr	r2, [pc, #68]	; (9d58 <update_ccc+0xdc>)
    9d14:	2314      	movs	r3, #20
    9d16:	fb03 1300 	mla	r3, r3, r0, r1
	sc_restore_params[index].len = sizeof(sc_range);
    9d1a:	2604      	movs	r6, #4
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    9d1c:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    9d1e:	4a0f      	ldr	r2, [pc, #60]	; (9d5c <update_ccc+0xe0>)
    9d20:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    9d22:	aa01      	add	r2, sp, #4
    9d24:	60da      	str	r2, [r3, #12]
	sc_restore_params[index].len = sizeof(sc_range);
    9d26:	821e      	strh	r6, [r3, #16]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    9d28:	b203      	sxth	r3, r0
    9d2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    9d2e:	eb01 0183 	add.w	r1, r1, r3, lsl #2
    9d32:	4628      	mov	r0, r5
    9d34:	f7ff feee 	bl	9b14 <bt_gatt_indicate>
	memset(&cfg->data, 0, sizeof(cfg->data));
    9d38:	4632      	mov	r2, r6
    9d3a:	2100      	movs	r1, #0
    9d3c:	f104 0008 	add.w	r0, r4, #8
    9d40:	f011 fe9e 	bl	1ba80 <memset>
		sc_store(cfg);
    9d44:	4620      	mov	r0, r4
    9d46:	f7ff fa53 	bl	91f0 <sc_store>
    9d4a:	e7c2      	b.n	9cd2 <update_ccc+0x56>
    9d4c:	0001d66d 	.word	0x0001d66d
    9d50:	2000059c 	.word	0x2000059c
    9d54:	20001510 	.word	0x20001510
    9d58:	0001fb58 	.word	0x0001fb58
    9d5c:	0001d3c3 	.word	0x0001d3c3

00009d60 <bt_gatt_connected>:
{
    9d60:	b570      	push	{r4, r5, r6, lr}
    9d62:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9d64:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    9d68:	4604      	mov	r4, r0
	data.conn = conn;
    9d6a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    9d6c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9d6e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    9d70:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9d74:	4629      	mov	r1, r5
    9d76:	f012 fb21 	bl	1c3bc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    9d7a:	b190      	cbz	r0, 9da2 <bt_gatt_connected+0x42>
		if (conn->id) {
    9d7c:	7a22      	ldrb	r2, [r4, #8]
    9d7e:	b31a      	cbz	r2, 9dc8 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    9d80:	ae02      	add	r6, sp, #8
    9d82:	2104      	movs	r1, #4
    9d84:	4630      	mov	r0, r6
    9d86:	f00f ff81 	bl	19c8c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    9d8a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    9d8c:	4a0f      	ldr	r2, [pc, #60]	; (9dcc <bt_gatt_connected+0x6c>)
    9d8e:	2124      	movs	r1, #36	; 0x24
    9d90:	a805      	add	r0, sp, #20
    9d92:	462b      	mov	r3, r5
    9d94:	f7fc f848 	bl	5e28 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    9d98:	aa05      	add	r2, sp, #20
    9d9a:	490d      	ldr	r1, [pc, #52]	; (9dd0 <bt_gatt_connected+0x70>)
    9d9c:	4610      	mov	r0, r2
    9d9e:	f7fa fe47 	bl	4a30 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9da2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9da6:	4a0b      	ldr	r2, [pc, #44]	; (9dd4 <bt_gatt_connected+0x74>)
    9da8:	ab03      	add	r3, sp, #12
    9daa:	2001      	movs	r0, #1
    9dac:	f013 fd22 	bl	1d7f4 <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    9db0:	4620      	mov	r0, r4
    9db2:	f012 fbd9 	bl	1c568 <bt_conn_get_security>
    9db6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9dba:	4288      	cmp	r0, r1
    9dbc:	d202      	bcs.n	9dc4 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    9dbe:	4620      	mov	r0, r4
    9dc0:	f012 fb9f 	bl	1c502 <bt_conn_set_security>
}
    9dc4:	b00e      	add	sp, #56	; 0x38
    9dc6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    9dc8:	9200      	str	r2, [sp, #0]
    9dca:	e7df      	b.n	9d8c <bt_gatt_connected+0x2c>
    9dcc:	00020d2b 	.word	0x00020d2b
    9dd0:	00009231 	.word	0x00009231
    9dd4:	00009c7d 	.word	0x00009c7d

00009dd8 <bt_gatt_encrypt_change>:
{
    9dd8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9dda:	4a06      	ldr	r2, [pc, #24]	; (9df4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    9ddc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9dde:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    9de0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9de2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    9de6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    9dea:	f013 fd03 	bl	1d7f4 <bt_gatt_foreach_attr>
}
    9dee:	b003      	add	sp, #12
    9df0:	f85d fb04 	ldr.w	pc, [sp], #4
    9df4:	00009c7d 	.word	0x00009c7d

00009df8 <bt_gatt_store_ccc>:
{
    9df8:	b570      	push	{r4, r5, r6, lr}
    9dfa:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    9dfc:	2300      	movs	r3, #0
{
    9dfe:	4604      	mov	r4, r0
    9e00:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    9e02:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    9e04:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    9e08:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    9e0a:	4a11      	ldr	r2, [pc, #68]	; (9e50 <bt_gatt_store_ccc+0x58>)
    9e0c:	ab0d      	add	r3, sp, #52	; 0x34
    9e0e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9e12:	2001      	movs	r0, #1
    9e14:	f013 fcee 	bl	1d7f4 <bt_gatt_foreach_attr>
	if (id) {
    9e18:	b1ac      	cbz	r4, 9e46 <bt_gatt_store_ccc+0x4e>
		u8_to_dec(id_str, sizeof(id_str), id);
    9e1a:	ae03      	add	r6, sp, #12
    9e1c:	4622      	mov	r2, r4
    9e1e:	2104      	movs	r1, #4
    9e20:	4630      	mov	r0, r6
    9e22:	f00f ff33 	bl	19c8c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    9e26:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    9e28:	4a0a      	ldr	r2, [pc, #40]	; (9e54 <bt_gatt_store_ccc+0x5c>)
    9e2a:	462b      	mov	r3, r5
    9e2c:	2124      	movs	r1, #36	; 0x24
    9e2e:	a804      	add	r0, sp, #16
    9e30:	f7fb fffa 	bl	5e28 <bt_settings_encode_key>
	if (save.count) {
    9e34:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    9e36:	b142      	cbz	r2, 9e4a <bt_gatt_store_ccc+0x52>
		len = save.count * sizeof(*save.store);
    9e38:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    9e3a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    9e3c:	a804      	add	r0, sp, #16
    9e3e:	f7fa fdab 	bl	4998 <settings_save_one>
}
    9e42:	b040      	add	sp, #256	; 0x100
    9e44:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    9e46:	9400      	str	r4, [sp, #0]
    9e48:	e7ee      	b.n	9e28 <bt_gatt_store_ccc+0x30>
		str = NULL;
    9e4a:	4611      	mov	r1, r2
    9e4c:	e7f6      	b.n	9e3c <bt_gatt_store_ccc+0x44>
    9e4e:	bf00      	nop
    9e50:	00009269 	.word	0x00009269
    9e54:	00020d2b 	.word	0x00020d2b

00009e58 <bt_gatt_disconnected>:

	return 0;
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9e58:	b537      	push	{r0, r1, r2, r4, r5, lr}
    9e5a:	4604      	mov	r4, r0
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9e5c:	4603      	mov	r3, r0
    9e5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9e62:	2001      	movs	r0, #1
    9e64:	4a0f      	ldr	r2, [pc, #60]	; (9ea4 <bt_gatt_disconnected+0x4c>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9e66:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9e6a:	f013 fcc3 	bl	1d7f4 <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9e6e:	7a20      	ldrb	r0, [r4, #8]
    9e70:	4629      	mov	r1, r5
    9e72:	f012 faa3 	bl	1c3bc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    9e76:	b118      	cbz	r0, 9e80 <bt_gatt_disconnected+0x28>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    9e78:	7a20      	ldrb	r0, [r4, #8]
    9e7a:	4629      	mov	r1, r5
    9e7c:	f7ff ffbc 	bl	9df8 <bt_gatt_store_ccc>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    9e80:	7a20      	ldrb	r0, [r4, #8]
    9e82:	4629      	mov	r1, r5
    9e84:	f012 fa9a 	bl	1c3bc <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    9e88:	b150      	cbz	r0, 9ea0 <bt_gatt_disconnected+0x48>
		struct addr_with_id addr_with_id = {
    9e8a:	7a23      	ldrb	r3, [r4, #8]
    9e8c:	f88d 3004 	strb.w	r3, [sp, #4]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    9e90:	4a05      	ldr	r2, [pc, #20]	; (9ea8 <bt_gatt_disconnected+0x50>)
		struct addr_with_id addr_with_id = {
    9e92:	9500      	str	r5, [sp, #0]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    9e94:	466b      	mov	r3, sp
    9e96:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9e9a:	2001      	movs	r0, #1
    9e9c:	f013 fcaa 	bl	1d7f4 <bt_gatt_foreach_attr>
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    9ea0:	b003      	add	sp, #12
    9ea2:	bd30      	pop	{r4, r5, pc}
    9ea4:	000093f1 	.word	0x000093f1
    9ea8:	0000947d 	.word	0x0000947d

00009eac <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    9eac:	4b10      	ldr	r3, [pc, #64]	; (9ef0 <get_io_capa+0x44>)
    9eae:	681b      	ldr	r3, [r3, #0]
    9eb0:	b1bb      	cbz	r3, 9ee2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9eb2:	681a      	ldr	r2, [r3, #0]
    9eb4:	b142      	cbz	r2, 9ec8 <get_io_capa+0x1c>
    9eb6:	6859      	ldr	r1, [r3, #4]
    9eb8:	b131      	cbz	r1, 9ec8 <get_io_capa+0x1c>
    9eba:	6899      	ldr	r1, [r3, #8]
    9ebc:	b911      	cbnz	r1, 9ec4 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9ebe:	490d      	ldr	r1, [pc, #52]	; (9ef4 <get_io_capa+0x48>)
    9ec0:	7809      	ldrb	r1, [r1, #0]
    9ec2:	b939      	cbnz	r1, 9ed4 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9ec4:	2004      	movs	r0, #4
    9ec6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9ec8:	490a      	ldr	r1, [pc, #40]	; (9ef4 <get_io_capa+0x48>)
    9eca:	7809      	ldrb	r1, [r1, #0]
    9ecc:	b111      	cbz	r1, 9ed4 <get_io_capa+0x28>
    9ece:	b10a      	cbz	r2, 9ed4 <get_io_capa+0x28>
    9ed0:	6899      	ldr	r1, [r3, #8]
    9ed2:	b941      	cbnz	r1, 9ee6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    9ed4:	685b      	ldr	r3, [r3, #4]
    9ed6:	b943      	cbnz	r3, 9eea <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    9ed8:	2a00      	cmp	r2, #0
    9eda:	bf0c      	ite	eq
    9edc:	2003      	moveq	r0, #3
    9ede:	2000      	movne	r0, #0
    9ee0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    9ee2:	2003      	movs	r0, #3
    9ee4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    9ee6:	2001      	movs	r0, #1
    9ee8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    9eea:	2002      	movs	r0, #2
	}
}
    9eec:	4770      	bx	lr
    9eee:	bf00      	nop
    9ef0:	200014b0 	.word	0x200014b0
    9ef4:	200029ca 	.word	0x200029ca

00009ef8 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    9ef8:	4b04      	ldr	r3, [pc, #16]	; (9f0c <bt_smp_accept+0x14>)
    9efa:	6818      	ldr	r0, [r3, #0]
    9efc:	b918      	cbnz	r0, 9f06 <bt_smp_accept+0xe>
			continue;
		}

		smp->chan.chan.ops = &ops;
    9efe:	4a04      	ldr	r2, [pc, #16]	; (9f10 <bt_smp_accept+0x18>)
    9f00:	605a      	str	r2, [r3, #4]

		*chan = &smp->chan.chan;
    9f02:	600b      	str	r3, [r1, #0]

		return 0;
    9f04:	4770      	bx	lr
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    9f06:	f06f 000b 	mvn.w	r0, #11
}
    9f0a:	4770      	bx	lr
    9f0c:	20000f30 	.word	0x20000f30
    9f10:	0001fc7c 	.word	0x0001fc7c

00009f14 <get_auth.isra.0>:
	if (sc_supported) {
    9f14:	4b0c      	ldr	r3, [pc, #48]	; (9f48 <get_auth.isra.0+0x34>)
    9f16:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    9f18:	b510      	push	{r4, lr}
	if (sc_supported) {
    9f1a:	b17b      	cbz	r3, 9f3c <get_auth.isra.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    9f1c:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    9f20:	f7ff ffc4 	bl	9eac <get_io_capa>
	if (bondable) {
    9f24:	4b09      	ldr	r3, [pc, #36]	; (9f4c <get_auth.isra.0+0x38>)
    9f26:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    9f28:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    9f2a:	bf0c      	ite	eq
    9f2c:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    9f30:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    9f34:	b12b      	cbz	r3, 9f42 <get_auth.isra.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    9f36:	f044 0001 	orr.w	r0, r4, #1
}
    9f3a:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    9f3c:	f000 0407 	and.w	r4, r0, #7
    9f40:	e7ee      	b.n	9f20 <get_auth.isra.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    9f42:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    9f46:	e7f8      	b.n	9f3a <get_auth.isra.0+0x26>
    9f48:	200029ca 	.word	0x200029ca
    9f4c:	200009ee 	.word	0x200009ee

00009f50 <smp_init>:
{
    9f50:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    9f52:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    9f56:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    9f58:	22f0      	movs	r2, #240	; 0xf0
    9f5a:	2100      	movs	r1, #0
    9f5c:	4628      	mov	r0, r5
    9f5e:	f011 fd8f 	bl	1ba80 <memset>
	if (bt_rand(smp->prnd, 16)) {
    9f62:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    9f66:	2110      	movs	r1, #16
    9f68:	f003 ff9e 	bl	dea8 <bt_rand>
    9f6c:	4604      	mov	r4, r0
    9f6e:	b948      	cbnz	r0, 9f84 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    9f70:	2105      	movs	r1, #5
    9f72:	4628      	mov	r0, r5
    9f74:	f013 fcc6 	bl	1d904 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    9f78:	f7fd fd0e 	bl	7998 <bt_pub_key_get>
    9f7c:	4b02      	ldr	r3, [pc, #8]	; (9f88 <smp_init+0x38>)
    9f7e:	6018      	str	r0, [r3, #0]
}
    9f80:	4620      	mov	r0, r4
    9f82:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    9f84:	2408      	movs	r4, #8
    9f86:	e7fb      	b.n	9f80 <smp_init+0x30>
    9f88:	20001524 	.word	0x20001524

00009f8c <smp_send.isra.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    9f8c:	b513      	push	{r0, r1, r4, lr}
    9f8e:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    9f90:	2200      	movs	r2, #0
    9f92:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    9f94:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    9f96:	460a      	mov	r2, r1
    9f98:	6800      	ldr	r0, [r0, #0]
    9f9a:	2106      	movs	r1, #6
    9f9c:	f012 fc73 	bl	1c886 <bt_l2cap_send_cb>
    9fa0:	4805      	ldr	r0, [pc, #20]	; (9fb8 <smp_send.isra.0+0x2c>)
    9fa2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    9fa6:	2300      	movs	r3, #0
    9fa8:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    9fac:	b002      	add	sp, #8
    9fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9fb2:	f00f bb49 	b.w	19648 <k_delayed_work_submit_to_queue>
    9fb6:	bf00      	nop
    9fb8:	20001348 	.word	0x20001348

00009fbc <smp_send_pairing_confirm>:
{
    9fbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    9fbe:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    9fc2:	2c02      	cmp	r4, #2
{
    9fc4:	4605      	mov	r5, r0
	switch (smp->method) {
    9fc6:	d824      	bhi.n	a012 <smp_send_pairing_confirm+0x56>
    9fc8:	b14c      	cbz	r4, 9fde <smp_send_pairing_confirm+0x22>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    9fca:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    9fce:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    9fd2:	40dc      	lsrs	r4, r3
    9fd4:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    9fd8:	f064 047f 	orn	r4, r4, #127	; 0x7f
    9fdc:	b2e4      	uxtb	r4, r4
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    9fde:	2103      	movs	r1, #3
    9fe0:	4628      	mov	r0, r5
    9fe2:	f013 fd8f 	bl	1db04 <smp_create_pdu.isra.0>
	if (!buf) {
    9fe6:	4606      	mov	r6, r0
    9fe8:	b1a8      	cbz	r0, a016 <smp_send_pairing_confirm+0x5a>
	req = net_buf_add(buf, sizeof(*req));
    9fea:	2110      	movs	r1, #16
    9fec:	3008      	adds	r0, #8
    9fee:	f014 fad1 	bl	1e594 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    9ff2:	9000      	str	r0, [sp, #0]
    9ff4:	4810      	ldr	r0, [pc, #64]	; (a038 <smp_send_pairing_confirm+0x7c>)
    9ff6:	4623      	mov	r3, r4
    9ff8:	6800      	ldr	r0, [r0, #0]
    9ffa:	f105 02df 	add.w	r2, r5, #223	; 0xdf
    9ffe:	f205 110f 	addw	r1, r5, #271	; 0x10f
    a002:	f013 fcd8 	bl	1d9b6 <smp_f4>
    a006:	4604      	mov	r4, r0
    a008:	b148      	cbz	r0, a01e <smp_send_pairing_confirm+0x62>
		net_buf_unref(buf);
    a00a:	4630      	mov	r0, r6
    a00c:	f00c fef8 	bl	16e00 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a010:	e001      	b.n	a016 <smp_send_pairing_confirm+0x5a>
	switch (smp->method) {
    a012:	2c03      	cmp	r4, #3
    a014:	d001      	beq.n	a01a <smp_send_pairing_confirm+0x5e>
		return BT_SMP_ERR_UNSPECIFIED;
    a016:	2008      	movs	r0, #8
    a018:	e00c      	b.n	a034 <smp_send_pairing_confirm+0x78>
	switch (smp->method) {
    a01a:	2400      	movs	r4, #0
    a01c:	e7df      	b.n	9fde <smp_send_pairing_confirm+0x22>
	smp_send(smp, buf, NULL, NULL);
    a01e:	4602      	mov	r2, r0
    a020:	4631      	mov	r1, r6
    a022:	4628      	mov	r0, r5
    a024:	f7ff ffb2 	bl	9f8c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a028:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    a02c:	4621      	mov	r1, r4
    a02e:	f013 fd35 	bl	1da9c <atomic_clear_bit>
	return 0;
    a032:	4620      	mov	r0, r4
}
    a034:	b002      	add	sp, #8
    a036:	bd70      	pop	{r4, r5, r6, pc}
    a038:	20001524 	.word	0x20001524

0000a03c <smp_public_key_slave.part.0>:
static uint8_t smp_public_key_slave(struct bt_smp *smp)
    a03c:	b538      	push	{r3, r4, r5, lr}
    a03e:	f890 30c0 	ldrb.w	r3, [r0, #192]	; 0xc0
    a042:	4604      	mov	r4, r0
    a044:	2b05      	cmp	r3, #5
    a046:	d814      	bhi.n	a072 <smp_public_key_slave.part.0+0x36>
    a048:	e8df f003 	tbb	[pc, r3]
    a04c:	030d3603 	.word	0x030d3603
    a050:	5313      	.short	0x5313
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a052:	30b8      	adds	r0, #184	; 0xb8
    a054:	2104      	movs	r1, #4
    a056:	f013 fc55 	bl	1d904 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    a05a:	4620      	mov	r0, r4
    a05c:	f7ff ffae 	bl	9fbc <smp_send_pairing_confirm>
		if (err) {
    a060:	2800      	cmp	r0, #0
    a062:	d037      	beq.n	a0d4 <smp_public_key_slave.part.0+0x98>
}
    a064:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    a066:	2104      	movs	r1, #4
    a068:	f500 70c8 	add.w	r0, r0, #400	; 0x190
    a06c:	f003 ff1c 	bl	dea8 <bt_rand>
    a070:	b108      	cbz	r0, a076 <smp_public_key_slave.part.0+0x3a>
	switch (smp->method) {
    a072:	2008      	movs	r0, #8
    a074:	e7f6      	b.n	a064 <smp_public_key_slave.part.0+0x28>
		smp->passkey %= 1000000;
    a076:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    a07a:	4a1f      	ldr	r2, [pc, #124]	; (a0f8 <smp_public_key_slave.part.0+0xbc>)
	if (bt_auth && bt_auth->passkey_display) {
    a07c:	4d1f      	ldr	r5, [pc, #124]	; (a0fc <smp_public_key_slave.part.0+0xc0>)
		smp->passkey %= 1000000;
    a07e:	fbb1 f3f2 	udiv	r3, r1, r2
    a082:	fb02 1313 	mls	r3, r2, r3, r1
    a086:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    a08a:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    a08c:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    a090:	b163      	cbz	r3, a0ac <smp_public_key_slave.part.0+0x70>
    a092:	681b      	ldr	r3, [r3, #0]
    a094:	b153      	cbz	r3, a0ac <smp_public_key_slave.part.0+0x70>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    a096:	210a      	movs	r1, #10
    a098:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a09c:	f013 fc32 	bl	1d904 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    a0a0:	682b      	ldr	r3, [r5, #0]
    a0a2:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    a0a6:	681b      	ldr	r3, [r3, #0]
    a0a8:	6820      	ldr	r0, [r4, #0]
    a0aa:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a0ac:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a0ae:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    a0b2:	f013 fc27 	bl	1d904 <atomic_set_bit>
		break;
    a0b6:	e00d      	b.n	a0d4 <smp_public_key_slave.part.0+0x98>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a0b8:	2103      	movs	r1, #3
    a0ba:	30b8      	adds	r0, #184	; 0xb8
    a0bc:	f013 fc22 	bl	1d904 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a0c0:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a0c4:	2109      	movs	r1, #9
    a0c6:	f013 fc1d 	bl	1d904 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    a0ca:	4b0c      	ldr	r3, [pc, #48]	; (a0fc <smp_public_key_slave.part.0+0xc0>)
    a0cc:	6820      	ldr	r0, [r4, #0]
    a0ce:	681b      	ldr	r3, [r3, #0]
    a0d0:	685b      	ldr	r3, [r3, #4]
    a0d2:	4798      	blx	r3
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    a0d4:	490a      	ldr	r1, [pc, #40]	; (a100 <smp_public_key_slave.part.0+0xc4>)
    a0d6:	f204 100f 	addw	r0, r4, #271	; 0x10f
    a0da:	f7fd fc6b 	bl	79b4 <bt_dh_key_gen>
    a0de:	4605      	mov	r5, r0
    a0e0:	2800      	cmp	r0, #0
    a0e2:	d1c6      	bne.n	a072 <smp_public_key_slave.part.0+0x36>
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    a0e4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a0e8:	2107      	movs	r1, #7
    a0ea:	f013 fc0b 	bl	1d904 <atomic_set_bit>
	return 0;
    a0ee:	4628      	mov	r0, r5
    a0f0:	e7b8      	b.n	a064 <smp_public_key_slave.part.0+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    a0f2:	2104      	movs	r1, #4
    a0f4:	e7db      	b.n	a0ae <smp_public_key_slave.part.0+0x72>
    a0f6:	bf00      	nop
    a0f8:	000f4240 	.word	0x000f4240
    a0fc:	200014b0 	.word	0x200014b0
    a100:	0000a80d 	.word	0x0000a80d

0000a104 <compute_and_check_and_send_slave_dhcheck>:
{
    a104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    a108:	2210      	movs	r2, #16
{
    a10a:	b0a3      	sub	sp, #140	; 0x8c
    a10c:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    a10e:	2100      	movs	r1, #0
    a110:	eb0d 0002 	add.w	r0, sp, r2
    a114:	f011 fcb4 	bl	1ba80 <memset>
	switch (smp->method) {
    a118:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a11c:	2b05      	cmp	r3, #5
    a11e:	f200 8081 	bhi.w	a224 <compute_and_check_and_send_slave_dhcheck+0x120>
    a122:	e8df f003 	tbb	[pc, r3]
    a126:	0309      	.short	0x0309
    a128:	817f0903 	.word	0x817f0903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a12c:	2204      	movs	r2, #4
    a12e:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    a132:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    a134:	f011 fc79 	bl	1ba2a <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    a138:	4b64      	ldr	r3, [pc, #400]	; (a2cc <compute_and_check_and_send_slave_dhcheck+0x1c8>)
		   &smp->chan.chan.conn->le.init_addr,
    a13a:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    a13e:	aa14      	add	r2, sp, #80	; 0x50
    a140:	f103 0630 	add.w	r6, r3, #48	; 0x30
    a144:	6818      	ldr	r0, [r3, #0]
    a146:	6859      	ldr	r1, [r3, #4]
    a148:	4615      	mov	r5, r2
    a14a:	c503      	stmia	r5!, {r0, r1}
    a14c:	3308      	adds	r3, #8
    a14e:	42b3      	cmp	r3, r6
    a150:	462a      	mov	r2, r5
    a152:	d1f7      	bne.n	a144 <compute_and_check_and_send_slave_dhcheck+0x40>
    a154:	6818      	ldr	r0, [r3, #0]
    a156:	791b      	ldrb	r3, [r3, #4]
    a158:	6028      	str	r0, [r5, #0]
    a15a:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    a15c:	ad0c      	add	r5, sp, #48	; 0x30
    a15e:	2220      	movs	r2, #32
    a160:	f204 114f 	addw	r1, r4, #335	; 0x14f
    a164:	4628      	mov	r0, r5
    a166:	f013 fbb1 	bl	1d8cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    a16a:	4859      	ldr	r0, [pc, #356]	; (a2d0 <compute_and_check_and_send_slave_dhcheck+0x1cc>)
    a16c:	ab08      	add	r3, sp, #32
    a16e:	2220      	movs	r2, #32
    a170:	4629      	mov	r1, r5
    a172:	f013 fbd5 	bl	1d920 <bt_smp_aes_cmac>
	if (err) {
    a176:	2800      	cmp	r0, #0
    a178:	d154      	bne.n	a224 <compute_and_check_and_send_slave_dhcheck+0x120>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a17a:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    a17e:	2210      	movs	r2, #16
    a180:	4639      	mov	r1, r7
    a182:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a186:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    a18a:	f013 fb9f 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    a18e:	2210      	movs	r2, #16
    a190:	4641      	mov	r1, r8
    a192:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    a196:	f013 fb99 	bl	1d8cc <sys_memcpy_swap>
	m[37] = a1->type;
    a19a:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    a19e:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    a1a2:	2206      	movs	r2, #6
    a1a4:	f109 0190 	add.w	r1, r9, #144	; 0x90
    a1a8:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    a1ac:	f013 fb8e 	bl	1d8cc <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a1b0:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    a1b4:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    a1b8:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    a1bc:	2206      	movs	r2, #6
    a1be:	f109 0197 	add.w	r1, r9, #151	; 0x97
    a1c2:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    a1c6:	f013 fb81 	bl	1d8cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    a1ca:	4633      	mov	r3, r6
    a1cc:	2235      	movs	r2, #53	; 0x35
    a1ce:	a914      	add	r1, sp, #80	; 0x50
    a1d0:	a808      	add	r0, sp, #32
    a1d2:	f013 fba5 	bl	1d920 <bt_smp_aes_cmac>
	if (err) {
    a1d6:	bb28      	cbnz	r0, a224 <compute_and_check_and_send_slave_dhcheck+0x120>
	sys_mem_swap(mackey, 16);
    a1d8:	2110      	movs	r1, #16
    a1da:	4630      	mov	r0, r6
    a1dc:	f013 fb80 	bl	1d8e0 <sys_mem_swap>
		   smp->tk)) {
    a1e0:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    a1e4:	2301      	movs	r3, #1
    a1e6:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    a1ea:	2235      	movs	r2, #53	; 0x35
    a1ec:	464b      	mov	r3, r9
    a1ee:	a914      	add	r1, sp, #80	; 0x50
    a1f0:	a808      	add	r0, sp, #32
    a1f2:	f013 fb95 	bl	1d920 <bt_smp_aes_cmac>
	if (err) {
    a1f6:	b9a8      	cbnz	r0, a224 <compute_and_check_and_send_slave_dhcheck+0x120>
	sys_mem_swap(ltk, 16);
    a1f8:	2110      	movs	r1, #16
    a1fa:	4648      	mov	r0, r9
    a1fc:	f013 fb70 	bl	1d8e0 <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    a200:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a202:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    a204:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a208:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    a20a:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    a20e:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a210:	e9cd 2300 	strd	r2, r3, [sp]
    a214:	9102      	str	r1, [sp, #8]
    a216:	ab04      	add	r3, sp, #16
    a218:	463a      	mov	r2, r7
    a21a:	4641      	mov	r1, r8
    a21c:	4630      	mov	r0, r6
    a21e:	f013 fbf0 	bl	1da02 <smp_f6>
    a222:	b148      	cbz	r0, a238 <compute_and_check_and_send_slave_dhcheck+0x134>
		return BT_SMP_ERR_UNSPECIFIED;
    a224:	2008      	movs	r0, #8
    a226:	e048      	b.n	a2ba <compute_and_check_and_send_slave_dhcheck+0x1b6>
		if (smp->oobd_remote) {
    a228:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    a22c:	2900      	cmp	r1, #0
    a22e:	d083      	beq.n	a138 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    a230:	2210      	movs	r2, #16
    a232:	eb0d 0002 	add.w	r0, sp, r2
    a236:	e77d      	b.n	a134 <compute_and_check_and_send_slave_dhcheck+0x30>
	if (smp->method == LE_SC_OOB) {
    a238:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a23c:	2b05      	cmp	r3, #5
    a23e:	d108      	bne.n	a252 <compute_and_check_and_send_slave_dhcheck+0x14e>
		if (smp->oobd_local) {
    a240:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    a244:	2210      	movs	r2, #16
    a246:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    a24a:	2900      	cmp	r1, #0
    a24c:	d038      	beq.n	a2c0 <compute_and_check_and_send_slave_dhcheck+0x1bc>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    a24e:	f011 fbec 	bl	1ba2a <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    a252:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a254:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    a256:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a25a:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    a25c:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    a260:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a262:	e9cd 2300 	strd	r2, r3, [sp]
    a266:	9102      	str	r1, [sp, #8]
    a268:	ab04      	add	r3, sp, #16
    a26a:	4642      	mov	r2, r8
    a26c:	4639      	mov	r1, r7
    a26e:	f013 fbc8 	bl	1da02 <smp_f6>
    a272:	2800      	cmp	r0, #0
    a274:	d1d6      	bne.n	a224 <compute_and_check_and_send_slave_dhcheck+0x120>
	if (memcmp(smp->e, re, 16)) {
    a276:	4629      	mov	r1, r5
    a278:	2210      	movs	r2, #16
    a27a:	f204 106f 	addw	r0, r4, #367	; 0x16f
    a27e:	f011 fbc4 	bl	1ba0a <memcmp>
    a282:	4605      	mov	r5, r0
    a284:	b9f8      	cbnz	r0, a2c6 <compute_and_check_and_send_slave_dhcheck+0x1c2>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    a286:	210d      	movs	r1, #13
    a288:	4620      	mov	r0, r4
    a28a:	f013 fc3b 	bl	1db04 <smp_create_pdu.isra.0>
	if (!buf) {
    a28e:	4606      	mov	r6, r0
    a290:	2800      	cmp	r0, #0
    a292:	d0c7      	beq.n	a224 <compute_and_check_and_send_slave_dhcheck+0x120>
	req = net_buf_add(buf, sizeof(*req));
    a294:	2110      	movs	r1, #16
    a296:	3008      	adds	r0, #8
    a298:	f014 f97c 	bl	1e594 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    a29c:	2210      	movs	r2, #16
    a29e:	a914      	add	r1, sp, #80	; 0x50
    a2a0:	f011 fbc3 	bl	1ba2a <memcpy>
	smp_send(smp, buf, NULL, NULL);
    a2a4:	462a      	mov	r2, r5
    a2a6:	4631      	mov	r1, r6
    a2a8:	4620      	mov	r0, r4
    a2aa:	f7ff fe6f 	bl	9f8c <smp_send.isra.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a2ae:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a2b2:	2101      	movs	r1, #1
    a2b4:	f013 fb26 	bl	1d904 <atomic_set_bit>
	return 0;
    a2b8:	4628      	mov	r0, r5
}
    a2ba:	b023      	add	sp, #140	; 0x8c
    a2bc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			memset(r, 0, sizeof(r));
    a2c0:	f011 fbde 	bl	1ba80 <memset>
    a2c4:	e7c5      	b.n	a252 <compute_and_check_and_send_slave_dhcheck+0x14e>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    a2c6:	200b      	movs	r0, #11
    a2c8:	e7f7      	b.n	a2ba <compute_and_check_and_send_slave_dhcheck+0x1b6>
    a2ca:	bf00      	nop
    a2cc:	0001f6af 	.word	0x0001f6af
    a2d0:	00020d75 	.word	0x00020d75

0000a2d4 <sc_send_public_key>:
{
    a2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    a2d6:	210c      	movs	r1, #12
{
    a2d8:	4605      	mov	r5, r0
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    a2da:	f013 fc13 	bl	1db04 <smp_create_pdu.isra.0>
	if (!req_buf) {
    a2de:	4604      	mov	r4, r0
    a2e0:	b1b0      	cbz	r0, a310 <sc_send_public_key+0x3c>
	req = net_buf_add(req_buf, sizeof(*req));
    a2e2:	2140      	movs	r1, #64	; 0x40
    a2e4:	3008      	adds	r0, #8
    a2e6:	f014 f955 	bl	1e594 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a2ea:	4f0a      	ldr	r7, [pc, #40]	; (a314 <sc_send_public_key+0x40>)
    a2ec:	2220      	movs	r2, #32
    a2ee:	6839      	ldr	r1, [r7, #0]
	req = net_buf_add(req_buf, sizeof(*req));
    a2f0:	4606      	mov	r6, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a2f2:	f011 fb9a 	bl	1ba2a <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a2f6:	6839      	ldr	r1, [r7, #0]
    a2f8:	2220      	movs	r2, #32
    a2fa:	4411      	add	r1, r2
    a2fc:	18b0      	adds	r0, r6, r2
    a2fe:	f011 fb94 	bl	1ba2a <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    a302:	4628      	mov	r0, r5
    a304:	2200      	movs	r2, #0
    a306:	4621      	mov	r1, r4
    a308:	f7ff fe40 	bl	9f8c <smp_send.isra.0>
	return 0;
    a30c:	2000      	movs	r0, #0
}
    a30e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a310:	2008      	movs	r0, #8
    a312:	e7fc      	b.n	a30e <sc_send_public_key+0x3a>
    a314:	20001524 	.word	0x20001524

0000a318 <smp_public_key>:
{
    a318:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    a31a:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    a31c:	f200 140f 	addw	r4, r0, #271	; 0x10f
{
    a320:	4605      	mov	r5, r0
	memcpy(smp->pkey, req->x, 32);
    a322:	2220      	movs	r2, #32
    a324:	4631      	mov	r1, r6
    a326:	4620      	mov	r0, r4
    a328:	f011 fb7f 	bl	1ba2a <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    a32c:	2220      	movs	r2, #32
    a32e:	18b1      	adds	r1, r6, r2
    a330:	f205 102f 	addw	r0, r5, #303	; 0x12f
    a334:	f011 fb79 	bl	1ba2a <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    a338:	491b      	ldr	r1, [pc, #108]	; (a3a8 <smp_public_key+0x90>)
    a33a:	2240      	movs	r2, #64	; 0x40
    a33c:	4620      	mov	r0, r4
    a33e:	f011 fb64 	bl	1ba0a <memcmp>
    a342:	b148      	cbz	r0, a358 <smp_public_key+0x40>
	if (!sc_public_key) {
    a344:	4b19      	ldr	r3, [pc, #100]	; (a3ac <smp_public_key+0x94>)
    a346:	681c      	ldr	r4, [r3, #0]
    a348:	bb24      	cbnz	r4, a394 <smp_public_key+0x7c>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    a34a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    a34e:	2106      	movs	r1, #6
    a350:	f013 fad8 	bl	1d904 <atomic_set_bit>
		return 0;
    a354:	4620      	mov	r0, r4
}
    a356:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    a358:	210d      	movs	r1, #13
    a35a:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
    a35e:	f013 fad1 	bl	1d904 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    a362:	682c      	ldr	r4, [r5, #0]
	if (!conn->le.keys) {
    a364:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    a368:	b933      	cbnz	r3, a378 <smp_public_key+0x60>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    a36a:	7a20      	ldrb	r0, [r4, #8]
    a36c:	f104 0188 	add.w	r1, r4, #136	; 0x88
    a370:	f000 fe32 	bl	afd8 <bt_keys_get_addr>
    a374:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys ||
    a378:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
    a37c:	2b00      	cmp	r3, #0
    a37e:	d0e1      	beq.n	a344 <smp_public_key+0x2c>
    a380:	89da      	ldrh	r2, [r3, #14]
    a382:	f002 0224 	and.w	r2, r2, #36	; 0x24
    a386:	2a00      	cmp	r2, #0
    a388:	d0dc      	beq.n	a344 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    a38a:	7b5b      	ldrb	r3, [r3, #13]
    a38c:	079b      	lsls	r3, r3, #30
    a38e:	d5d9      	bpl.n	a344 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    a390:	2003      	movs	r0, #3
    a392:	e7e0      	b.n	a356 <smp_public_key+0x3e>
	err = sc_send_public_key(smp);
    a394:	4628      	mov	r0, r5
    a396:	f7ff ff9d 	bl	a2d4 <sc_send_public_key>
	if (err) {
    a39a:	2800      	cmp	r0, #0
    a39c:	d1db      	bne.n	a356 <smp_public_key+0x3e>
    a39e:	4628      	mov	r0, r5
}
    a3a0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    a3a4:	f7ff be4a 	b.w	a03c <smp_public_key_slave.part.0>
    a3a8:	00020d85 	.word	0x00020d85
    a3ac:	20001524 	.word	0x20001524

0000a3b0 <smp_pairing_req>:
{
    a3b0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    a3b4:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a3b6:	78fb      	ldrb	r3, [r7, #3]
    a3b8:	3b07      	subs	r3, #7
    a3ba:	2b09      	cmp	r3, #9
{
    a3bc:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    a3be:	d904      	bls.n	a3ca <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    a3c0:	2706      	movs	r7, #6
}
    a3c2:	4638      	mov	r0, r7
    a3c4:	b002      	add	sp, #8
    a3c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    a3ca:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
    a3cc:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    a3d0:	b163      	cbz	r3, a3ec <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    a3d2:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    a3d6:	210e      	movs	r1, #14
    a3d8:	4628      	mov	r0, r5
    a3da:	f013 fb8a 	bl	1daf2 <atomic_test_bit>
    a3de:	b980      	cbnz	r0, a402 <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    a3e0:	4620      	mov	r0, r4
    a3e2:	f7ff fdb5 	bl	9f50 <smp_init>
		if (ret) {
    a3e6:	b160      	cbz	r0, a402 <smp_pairing_req+0x52>
			return ret;
    a3e8:	b2c7      	uxtb	r7, r0
    a3ea:	e7ea      	b.n	a3c2 <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    a3ec:	7a30      	ldrb	r0, [r6, #8]
    a3ee:	f106 0188 	add.w	r1, r6, #136	; 0x88
    a3f2:	f000 fdf1 	bl	afd8 <bt_keys_get_addr>
    a3f6:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d1e9      	bne.n	a3d2 <smp_pairing_req+0x22>
			return BT_SMP_ERR_UNSPECIFIED;
    a3fe:	2708      	movs	r7, #8
    a400:	e7df      	b.n	a3c2 <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a402:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    a404:	2206      	movs	r2, #6
    a406:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    a408:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    a40c:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    a410:	f011 fb0b 	bl	1ba2a <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    a414:	2302      	movs	r3, #2
    a416:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    a41a:	78b8      	ldrb	r0, [r7, #2]
    a41c:	f7ff fd7a 	bl	9f14 <get_auth.isra.0>
    a420:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    a424:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    a426:	f7ff fd41 	bl	9eac <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    a42a:	4bb2      	ldr	r3, [pc, #712]	; (a6f4 <smp_pairing_req+0x344>)
	rsp->io_capability = get_io_capa();
    a42c:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    a430:	781b      	ldrb	r3, [r3, #0]
    a432:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    a436:	2310      	movs	r3, #16
    a438:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    a43c:	793b      	ldrb	r3, [r7, #4]
    a43e:	f003 0307 	and.w	r3, r3, #7
    a442:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    a446:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a448:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    a44c:	f003 0307 	and.w	r3, r3, #7
    a450:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    a454:	d012      	beq.n	a47c <smp_pairing_req+0xcc>
    a456:	78bb      	ldrb	r3, [r7, #2]
    a458:	071b      	lsls	r3, r3, #28
    a45a:	d50f      	bpl.n	a47c <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    a45c:	2105      	movs	r1, #5
    a45e:	4628      	mov	r0, r5
    a460:	f013 fa50 	bl	1d904 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    a464:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    a468:	f003 0306 	and.w	r3, r3, #6
    a46c:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    a470:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    a474:	f003 0306 	and.w	r3, r3, #6
    a478:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    a47c:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    a480:	0698      	lsls	r0, r3, #26
    a482:	d506      	bpl.n	a492 <smp_pairing_req+0xe2>
    a484:	78bb      	ldrb	r3, [r7, #2]
    a486:	0699      	lsls	r1, r3, #26
    a488:	d503      	bpl.n	a492 <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    a48a:	2113      	movs	r1, #19
    a48c:	4628      	mov	r0, r5
    a48e:	f013 fa39 	bl	1d904 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    a492:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    a496:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    a49a:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    a49e:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    a4a2:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    a4a6:	07da      	lsls	r2, r3, #31
    a4a8:	d506      	bpl.n	a4b8 <smp_pairing_req+0x108>
    a4aa:	78bb      	ldrb	r3, [r7, #2]
    a4ac:	07db      	lsls	r3, r3, #31
    a4ae:	d503      	bpl.n	a4b8 <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    a4b0:	210c      	movs	r1, #12
    a4b2:	4628      	mov	r0, r5
    a4b4:	f013 fa26 	bl	1d904 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    a4b8:	2103      	movs	r1, #3
    a4ba:	4628      	mov	r0, r5
    a4bc:	f013 fa22 	bl	1d904 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a4c0:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    a4c2:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a4c4:	f013 fb15 	bl	1daf2 <atomic_test_bit>
    a4c8:	f8d4 8000 	ldr.w	r8, [r4]
    a4cc:	2800      	cmp	r0, #0
    a4ce:	d151      	bne.n	a574 <smp_pairing_req+0x1c4>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    a4d0:	2f04      	cmp	r7, #4
    a4d2:	d81d      	bhi.n	a510 <smp_pairing_req+0x160>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    a4d4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    a4d8:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    a4dc:	4013      	ands	r3, r2
    a4de:	07d8      	lsls	r0, r3, #31
    a4e0:	d465      	bmi.n	a5ae <smp_pairing_req+0x1fe>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a4e2:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    a4e6:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    a4ea:	4318      	orrs	r0, r3
    a4ec:	f010 0004 	ands.w	r0, r0, #4
    a4f0:	d00e      	beq.n	a510 <smp_pairing_req+0x160>
	method = gen_method_legacy[remote_io][get_io_capa()];
    a4f2:	f7ff fcdb 	bl	9eac <get_io_capa>
    a4f6:	4b80      	ldr	r3, [pc, #512]	; (a6f8 <smp_pairing_req+0x348>)
    a4f8:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a4fc:	441f      	add	r7, r3
    a4fe:	5c38      	ldrb	r0, [r7, r0]
	if (method == PASSKEY_ROLE) {
    a500:	2804      	cmp	r0, #4
    a502:	d105      	bne.n	a510 <smp_pairing_req+0x160>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a504:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    a508:	2b00      	cmp	r3, #0
    a50a:	bf0c      	ite	eq
    a50c:	2002      	moveq	r0, #2
    a50e:	2001      	movne	r0, #1
	smp->method = get_pair_method(smp, req->io_capability);
    a510:	f884 00c0 	strb.w	r0, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    a514:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    a518:	b93b      	cbnz	r3, a52a <smp_pairing_req+0x17a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    a51a:	f898 0008 	ldrb.w	r0, [r8, #8]
    a51e:	f108 0188 	add.w	r1, r8, #136	; 0x88
    a522:	f000 fd59 	bl	afd8 <bt_keys_get_addr>
    a526:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    a52a:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    a52e:	2a00      	cmp	r2, #0
    a530:	d143      	bne.n	a5ba <smp_pairing_req+0x20a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a532:	2105      	movs	r1, #5
    a534:	4628      	mov	r0, r5
    a536:	f013 fadc 	bl	1daf2 <atomic_test_bit>
    a53a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a53e:	2800      	cmp	r0, #0
    a540:	f040 80e2 	bne.w	a708 <smp_pairing_req+0x358>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a544:	461f      	mov	r7, r3
    a546:	2b00      	cmp	r3, #0
    a548:	d155      	bne.n	a5f6 <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a54a:	210e      	movs	r1, #14
    a54c:	4628      	mov	r0, r5
    a54e:	f013 fad0 	bl	1daf2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a552:	2800      	cmp	r0, #0
    a554:	d14f      	bne.n	a5f6 <smp_pairing_req+0x246>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a556:	4e69      	ldr	r6, [pc, #420]	; (a6fc <smp_pairing_req+0x34c>)
    a558:	6833      	ldr	r3, [r6, #0]
    a55a:	2b00      	cmp	r3, #0
    a55c:	d04b      	beq.n	a5f6 <smp_pairing_req+0x246>
	    bt_auth && bt_auth->pairing_confirm) {
    a55e:	695b      	ldr	r3, [r3, #20]
    a560:	2b00      	cmp	r3, #0
    a562:	d048      	beq.n	a5f6 <smp_pairing_req+0x246>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a564:	4628      	mov	r0, r5
    a566:	2109      	movs	r1, #9
    a568:	f013 f9cc 	bl	1d904 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    a56c:	6833      	ldr	r3, [r6, #0]
    a56e:	6820      	ldr	r0, [r4, #0]
    a570:	695b      	ldr	r3, [r3, #20]
    a572:	e0bb      	b.n	a6ec <smp_pairing_req+0x33c>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    a574:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    a578:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    a57c:	ea00 0302 	and.w	r3, r0, r2
    a580:	0719      	lsls	r1, r3, #28
    a582:	d506      	bpl.n	a592 <smp_pairing_req+0x1e2>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    a584:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    a588:	f894 10ca 	ldrb.w	r1, [r4, #202]	; 0xca
    a58c:	430b      	orrs	r3, r1
    a58e:	07db      	lsls	r3, r3, #31
    a590:	d40f      	bmi.n	a5b2 <smp_pairing_req+0x202>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    a592:	2f04      	cmp	r7, #4
    a594:	d80f      	bhi.n	a5b6 <smp_pairing_req+0x206>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a596:	4310      	orrs	r0, r2
    a598:	f010 0004 	ands.w	r0, r0, #4
    a59c:	d0b8      	beq.n	a510 <smp_pairing_req+0x160>
	return gen_method_sc[remote_io][get_io_capa()];
    a59e:	f7ff fc85 	bl	9eac <get_io_capa>
    a5a2:	4b57      	ldr	r3, [pc, #348]	; (a700 <smp_pairing_req+0x350>)
    a5a4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    a5a8:	441f      	add	r7, r3
    a5aa:	5c38      	ldrb	r0, [r7, r0]
    a5ac:	e7b0      	b.n	a510 <smp_pairing_req+0x160>
		return LEGACY_OOB;
    a5ae:	2006      	movs	r0, #6
    a5b0:	e7ae      	b.n	a510 <smp_pairing_req+0x160>
			return LE_SC_OOB;
    a5b2:	2005      	movs	r0, #5
    a5b4:	e7ac      	b.n	a510 <smp_pairing_req+0x160>
		return JUST_WORKS;
    a5b6:	2000      	movs	r0, #0
    a5b8:	e7aa      	b.n	a510 <smp_pairing_req+0x160>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    a5ba:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    a5bc:	f011 0f24 	tst.w	r1, #36	; 0x24
    a5c0:	d0b7      	beq.n	a532 <smp_pairing_req+0x182>
	return MIN(req->max_key_size, rsp->max_key_size);
    a5c2:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    a5c6:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    a5ca:	7b12      	ldrb	r2, [r2, #12]
    a5cc:	4283      	cmp	r3, r0
    a5ce:	bf28      	it	cs
    a5d0:	4603      	movcs	r3, r0
    a5d2:	429a      	cmp	r2, r3
    a5d4:	d901      	bls.n	a5da <smp_pairing_req+0x22a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    a5d6:	2703      	movs	r7, #3
    a5d8:	e6f3      	b.n	a3c2 <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    a5da:	0689      	lsls	r1, r1, #26
    a5dc:	d404      	bmi.n	a5e8 <smp_pairing_req+0x238>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    a5de:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a5e2:	2b00      	cmp	r3, #0
    a5e4:	d1a5      	bne.n	a532 <smp_pairing_req+0x182>
    a5e6:	e7f6      	b.n	a5d6 <smp_pairing_req+0x226>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a5e8:	2105      	movs	r1, #5
    a5ea:	4628      	mov	r0, r5
    a5ec:	f013 fa81 	bl	1daf2 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    a5f0:	2800      	cmp	r0, #0
    a5f2:	d1f4      	bne.n	a5de <smp_pairing_req+0x22e>
    a5f4:	e7ef      	b.n	a5d6 <smp_pairing_req+0x226>
	ret = send_pairing_rsp(smp);
    a5f6:	4620      	mov	r0, r4
    a5f8:	f013 fabd 	bl	1db76 <send_pairing_rsp>
	if (ret) {
    a5fc:	4607      	mov	r7, r0
    a5fe:	2800      	cmp	r0, #0
    a600:	f47f aedf 	bne.w	a3c2 <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    a604:	2103      	movs	r1, #3
    a606:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    a60a:	f013 f97b 	bl	1d904 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    a60e:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    a610:	7a30      	ldrb	r0, [r6, #8]
    a612:	f106 0188 	add.w	r1, r6, #136	; 0x88
    a616:	f000 fd6f 	bl	b0f8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    a61a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    a61e:	b128      	cbz	r0, a62c <smp_pairing_req+0x27c>
    a620:	7b42      	ldrb	r2, [r0, #13]
    a622:	07d2      	lsls	r2, r2, #31
    a624:	d502      	bpl.n	a62c <smp_pairing_req+0x27c>
    a626:	2b00      	cmp	r3, #0
    a628:	f43f aee9 	beq.w	a3fe <smp_pairing_req+0x4e>
	switch (smp->method) {
    a62c:	2b06      	cmp	r3, #6
    a62e:	f63f aee6 	bhi.w	a3fe <smp_pairing_req+0x4e>
    a632:	a201      	add	r2, pc, #4	; (adr r2, a638 <smp_pairing_req+0x288>)
    a634:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    a638:	0000a655 	.word	0x0000a655
    a63c:	0000a6dd 	.word	0x0000a6dd
    a640:	0000a681 	.word	0x0000a681
    a644:	0000a3ff 	.word	0x0000a3ff
    a648:	0000a3ff 	.word	0x0000a3ff
    a64c:	0000a3ff 	.word	0x0000a3ff
    a650:	0000a659 	.word	0x0000a659
    a654:	461f      	mov	r7, r3
    a656:	e6b4      	b.n	a3c2 <smp_pairing_req+0x12>
		if (bt_auth && bt_auth->oob_data_request) {
    a658:	4e28      	ldr	r6, [pc, #160]	; (a6fc <smp_pairing_req+0x34c>)
    a65a:	6833      	ldr	r3, [r6, #0]
    a65c:	2b00      	cmp	r3, #0
    a65e:	d047      	beq.n	a6f0 <smp_pairing_req+0x340>
    a660:	68db      	ldr	r3, [r3, #12]
    a662:	2b00      	cmp	r3, #0
    a664:	d044      	beq.n	a6f0 <smp_pairing_req+0x340>
			struct bt_conn_oob_info info = {
    a666:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a668:	4628      	mov	r0, r5
    a66a:	2109      	movs	r1, #9
			struct bt_conn_oob_info info = {
    a66c:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a670:	f013 f948 	bl	1d904 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    a674:	6833      	ldr	r3, [r6, #0]
    a676:	6820      	ldr	r0, [r4, #0]
    a678:	68db      	ldr	r3, [r3, #12]
    a67a:	a901      	add	r1, sp, #4
    a67c:	4798      	blx	r3
		break;
    a67e:	e6a0      	b.n	a3c2 <smp_pairing_req+0x12>
			if (bt_rand(&passkey, sizeof(passkey))) {
    a680:	2104      	movs	r1, #4
    a682:	eb0d 0001 	add.w	r0, sp, r1
    a686:	f003 fc0f 	bl	dea8 <bt_rand>
    a68a:	2800      	cmp	r0, #0
    a68c:	f47f aeb7 	bne.w	a3fe <smp_pairing_req+0x4e>
			passkey %= 1000000;
    a690:	9901      	ldr	r1, [sp, #4]
    a692:	4a1c      	ldr	r2, [pc, #112]	; (a704 <smp_pairing_req+0x354>)
		if (bt_auth && bt_auth->passkey_display) {
    a694:	f8df 8064 	ldr.w	r8, [pc, #100]	; a6fc <smp_pairing_req+0x34c>
			passkey %= 1000000;
    a698:	fbb1 f3f2 	udiv	r3, r1, r2
    a69c:	fb02 1313 	mls	r3, r2, r3, r1
    a6a0:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    a6a2:	f8d8 3000 	ldr.w	r3, [r8]
    a6a6:	b15b      	cbz	r3, a6c0 <smp_pairing_req+0x310>
    a6a8:	681b      	ldr	r3, [r3, #0]
    a6aa:	b14b      	cbz	r3, a6c0 <smp_pairing_req+0x310>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    a6ac:	210a      	movs	r1, #10
    a6ae:	4628      	mov	r0, r5
    a6b0:	f013 f928 	bl	1d904 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    a6b4:	f8d8 3000 	ldr.w	r3, [r8]
    a6b8:	9901      	ldr	r1, [sp, #4]
    a6ba:	681b      	ldr	r3, [r3, #0]
    a6bc:	4630      	mov	r0, r6
    a6be:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    a6c0:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    a6c2:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    a6c6:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    a6ca:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    a6cc:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    a6d0:	0a1b      	lsrs	r3, r3, #8
    a6d2:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    a6d6:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
}
    a6da:	e672      	b.n	a3c2 <smp_pairing_req+0x12>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    a6dc:	4628      	mov	r0, r5
    a6de:	2109      	movs	r1, #9
    a6e0:	f013 f910 	bl	1d904 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    a6e4:	4b05      	ldr	r3, [pc, #20]	; (a6fc <smp_pairing_req+0x34c>)
    a6e6:	681b      	ldr	r3, [r3, #0]
    a6e8:	685b      	ldr	r3, [r3, #4]
    a6ea:	4630      	mov	r0, r6
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    a6ec:	4798      	blx	r3
		return 0;
    a6ee:	e668      	b.n	a3c2 <smp_pairing_req+0x12>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    a6f0:	2702      	movs	r7, #2
	return legacy_request_tk(smp);
    a6f2:	e666      	b.n	a3c2 <smp_pairing_req+0x12>
    a6f4:	200029c9 	.word	0x200029c9
    a6f8:	00020d43 	.word	0x00020d43
    a6fc:	200014b0 	.word	0x200014b0
    a700:	00020d5c 	.word	0x00020d5c
    a704:	000f4240 	.word	0x000f4240
	if ((IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) ||
    a708:	7ab2      	ldrb	r2, [r6, #10]
    a70a:	2a04      	cmp	r2, #4
    a70c:	461f      	mov	r7, r3
    a70e:	d116      	bne.n	a73e <smp_pairing_req+0x38e>
	     conn->required_sec_level == BT_SECURITY_L4) &&
    a710:	2b00      	cmp	r3, #0
    a712:	f43f af60 	beq.w	a5d6 <smp_pairing_req+0x226>
	return MIN(req->max_key_size, rsp->max_key_size);
    a716:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
    a71a:	f894 20cc 	ldrb.w	r2, [r4, #204]	; 0xcc
	     conn->required_sec_level == BT_SECURITY_L4) &&
    a71e:	4293      	cmp	r3, r2
    a720:	bf28      	it	cs
    a722:	4613      	movcs	r3, r2
    a724:	2b10      	cmp	r3, #16
    a726:	f47f ae4b 	bne.w	a3c0 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    a72a:	210c      	movs	r1, #12
    a72c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    a730:	f013 f8e8 	bl	1d904 <atomic_set_bit>
	return send_pairing_rsp(smp);
    a734:	4620      	mov	r0, r4
    a736:	f013 fa1e 	bl	1db76 <send_pairing_rsp>
    a73a:	4607      	mov	r7, r0
    a73c:	e641      	b.n	a3c2 <smp_pairing_req+0x12>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a73e:	2b00      	cmp	r3, #0
    a740:	d1f3      	bne.n	a72a <smp_pairing_req+0x37a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a742:	210e      	movs	r1, #14
    a744:	4628      	mov	r0, r5
    a746:	f013 f9d4 	bl	1daf2 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    a74a:	2800      	cmp	r0, #0
    a74c:	d1ed      	bne.n	a72a <smp_pairing_req+0x37a>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    a74e:	4e04      	ldr	r6, [pc, #16]	; (a760 <smp_pairing_req+0x3b0>)
    a750:	6833      	ldr	r3, [r6, #0]
    a752:	2b00      	cmp	r3, #0
    a754:	d0e9      	beq.n	a72a <smp_pairing_req+0x37a>
	    bt_auth && bt_auth->pairing_confirm) {
    a756:	695b      	ldr	r3, [r3, #20]
    a758:	2b00      	cmp	r3, #0
    a75a:	d0e6      	beq.n	a72a <smp_pairing_req+0x37a>
    a75c:	e702      	b.n	a564 <smp_pairing_req+0x1b4>
    a75e:	bf00      	nop
    a760:	200014b0 	.word	0x200014b0

0000a764 <smp_pairing_complete>:
{
    a764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a768:	4f26      	ldr	r7, [pc, #152]	; (a804 <smp_pairing_complete+0xa0>)
    a76a:	4604      	mov	r4, r0
    a76c:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
	if (!status) {
    a770:	460d      	mov	r5, r1
    a772:	b9b1      	cbnz	r1, a7a2 <smp_pairing_complete+0x3e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    a774:	210c      	movs	r1, #12
    a776:	4640      	mov	r0, r8
    a778:	f013 f9bb 	bl	1daf2 <atomic_test_bit>
		if (bond_flag) {
    a77c:	4605      	mov	r5, r0
    a77e:	b120      	cbz	r0, a78a <smp_pairing_complete+0x26>
			bt_keys_store(smp->chan.chan.conn->le.keys);
    a780:	6823      	ldr	r3, [r4, #0]
    a782:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    a786:	f000 fced 	bl	b164 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    a78a:	683b      	ldr	r3, [r7, #0]
    a78c:	b123      	cbz	r3, a798 <smp_pairing_complete+0x34>
    a78e:	699b      	ldr	r3, [r3, #24]
    a790:	b113      	cbz	r3, a798 <smp_pairing_complete+0x34>
			bt_auth->pairing_complete(smp->chan.chan.conn,
    a792:	4629      	mov	r1, r5
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    a794:	6820      	ldr	r0, [r4, #0]
    a796:	4798      	blx	r3
	smp_reset(smp);
    a798:	4620      	mov	r0, r4
}
    a79a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	smp_reset(smp);
    a79e:	f013 ba82 	b.w	1dca6 <smp_reset>
	switch (smp_err) {
    a7a2:	1e4b      	subs	r3, r1, #1
    a7a4:	b2db      	uxtb	r3, r3
    a7a6:	2b0d      	cmp	r3, #13
    a7a8:	bf9c      	itt	ls
    a7aa:	4a17      	ldrls	r2, [pc, #92]	; (a808 <smp_pairing_complete+0xa4>)
    a7ac:	5cd6      	ldrbls	r6, [r2, r3]
		if (smp->chan.chan.conn->le.keys &&
    a7ae:	6803      	ldr	r3, [r0, #0]
    a7b0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
	if (!status) {
    a7b4:	bf88      	it	hi
    a7b6:	2608      	movhi	r6, #8
		if (smp->chan.chan.conn->le.keys &&
    a7b8:	b153      	cbz	r3, a7d0 <smp_pairing_complete+0x6c>
    a7ba:	7b1b      	ldrb	r3, [r3, #12]
    a7bc:	b9d3      	cbnz	r3, a7f4 <smp_pairing_complete+0x90>
			bt_keys_clear(smp->chan.chan.conn->le.keys);
    a7be:	6823      	ldr	r3, [r4, #0]
    a7c0:	f8d3 00b4 	ldr.w	r0, [r3, #180]	; 0xb4
    a7c4:	f000 fca8 	bl	b118 <bt_keys_clear>
			smp->chan.chan.conn->le.keys = NULL;
    a7c8:	6823      	ldr	r3, [r4, #0]
    a7ca:	2200      	movs	r2, #0
    a7cc:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    a7d0:	2102      	movs	r1, #2
    a7d2:	4640      	mov	r0, r8
    a7d4:	f013 f98d 	bl	1daf2 <atomic_test_bit>
    a7d8:	b920      	cbnz	r0, a7e4 <smp_pairing_complete+0x80>
			bt_conn_security_changed(smp->chan.chan.conn, status,
    a7da:	6820      	ldr	r0, [r4, #0]
    a7dc:	4632      	mov	r2, r6
    a7de:	4629      	mov	r1, r5
    a7e0:	f7fd fa3e 	bl	7c60 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    a7e4:	683b      	ldr	r3, [r7, #0]
    a7e6:	2b00      	cmp	r3, #0
    a7e8:	d0d6      	beq.n	a798 <smp_pairing_complete+0x34>
    a7ea:	69db      	ldr	r3, [r3, #28]
    a7ec:	2b00      	cmp	r3, #0
    a7ee:	d0d3      	beq.n	a798 <smp_pairing_complete+0x34>
			bt_auth->pairing_failed(smp->chan.chan.conn, auth_err);
    a7f0:	4631      	mov	r1, r6
    a7f2:	e7cf      	b.n	a794 <smp_pairing_complete+0x30>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    a7f4:	2102      	movs	r1, #2
    a7f6:	4640      	mov	r0, r8
    a7f8:	f013 f97b 	bl	1daf2 <atomic_test_bit>
		    (!smp->chan.chan.conn->le.keys->enc_size ||
    a7fc:	2800      	cmp	r0, #0
    a7fe:	d1de      	bne.n	a7be <smp_pairing_complete+0x5a>
    a800:	e7e6      	b.n	a7d0 <smp_pairing_complete+0x6c>
    a802:	bf00      	nop
    a804:	200014b0 	.word	0x200014b0
    a808:	00020d35 	.word	0x00020d35

0000a80c <bt_smp_dhkey_ready>:
{
    a80c:	b510      	push	{r4, lr}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a80e:	2107      	movs	r1, #7
{
    a810:	4604      	mov	r4, r0
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    a812:	4816      	ldr	r0, [pc, #88]	; (a86c <bt_smp_dhkey_ready+0x60>)
    a814:	f013 fa2f 	bl	1dc76 <atomic_test_and_clear_bit>
    a818:	b338      	cbz	r0, a86a <bt_smp_dhkey_ready+0x5e>
	if (!dhkey) {
    a81a:	b92c      	cbnz	r4, a828 <bt_smp_dhkey_ready+0x1c>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    a81c:	210b      	movs	r1, #11
}
    a81e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    a822:	4813      	ldr	r0, [pc, #76]	; (a870 <bt_smp_dhkey_ready+0x64>)
    a824:	f013 ba6a 	b.w	1dcfc <smp_error>
	memcpy(smp->dhkey, dhkey, 32);
    a828:	4621      	mov	r1, r4
    a82a:	4812      	ldr	r0, [pc, #72]	; (a874 <bt_smp_dhkey_ready+0x68>)
    a82c:	2220      	movs	r2, #32
    a82e:	f011 f8fc 	bl	1ba2a <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    a832:	480e      	ldr	r0, [pc, #56]	; (a86c <bt_smp_dhkey_ready+0x60>)
    a834:	2109      	movs	r1, #9
    a836:	f013 f95c 	bl	1daf2 <atomic_test_bit>
    a83a:	b128      	cbz	r0, a848 <bt_smp_dhkey_ready+0x3c>
}
    a83c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
    a840:	480a      	ldr	r0, [pc, #40]	; (a86c <bt_smp_dhkey_ready+0x60>)
    a842:	2108      	movs	r1, #8
    a844:	f013 b85e 	b.w	1d904 <atomic_set_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    a848:	4808      	ldr	r0, [pc, #32]	; (a86c <bt_smp_dhkey_ready+0x60>)
    a84a:	210f      	movs	r1, #15
    a84c:	f013 f951 	bl	1daf2 <atomic_test_bit>
    a850:	2800      	cmp	r0, #0
    a852:	d1f3      	bne.n	a83c <bt_smp_dhkey_ready+0x30>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    a854:	4805      	ldr	r0, [pc, #20]	; (a86c <bt_smp_dhkey_ready+0x60>)
    a856:	2108      	movs	r1, #8
    a858:	f013 f94b 	bl	1daf2 <atomic_test_bit>
    a85c:	b128      	cbz	r0, a86a <bt_smp_dhkey_ready+0x5e>
		err = compute_and_check_and_send_slave_dhcheck(smp);
    a85e:	4804      	ldr	r0, [pc, #16]	; (a870 <bt_smp_dhkey_ready+0x64>)
    a860:	f7ff fc50 	bl	a104 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    a864:	4601      	mov	r1, r0
    a866:	2800      	cmp	r0, #0
    a868:	d1d9      	bne.n	a81e <bt_smp_dhkey_ready+0x12>
}
    a86a:	bd10      	pop	{r4, pc}
    a86c:	20000fec 	.word	0x20000fec
    a870:	20000f30 	.word	0x20000f30
    a874:	2000107f 	.word	0x2000107f

0000a878 <bt_smp_recv>:
{
    a878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    a87a:	898b      	ldrh	r3, [r1, #12]
{
    a87c:	4604      	mov	r4, r0
    a87e:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    a880:	b38b      	cbz	r3, a8e6 <bt_smp_recv+0x6e>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a882:	2101      	movs	r1, #1
    a884:	f105 0008 	add.w	r0, r5, #8
    a888:	f013 feab 	bl	1e5e2 <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a88c:	2104      	movs	r1, #4
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
    a88e:	4606      	mov	r6, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    a890:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    a894:	f013 f92d 	bl	1daf2 <atomic_test_bit>
    a898:	bb28      	cbnz	r0, a8e6 <bt_smp_recv+0x6e>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    a89a:	7831      	ldrb	r1, [r6, #0]
    a89c:	290d      	cmp	r1, #13
    a89e:	d803      	bhi.n	a8a8 <bt_smp_recv+0x30>
    a8a0:	4f12      	ldr	r7, [pc, #72]	; (a8ec <bt_smp_recv+0x74>)
    a8a2:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    a8a6:	b923      	cbnz	r3, a8b2 <bt_smp_recv+0x3a>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    a8a8:	2107      	movs	r1, #7
		smp_error(smp, err);
    a8aa:	4620      	mov	r0, r4
    a8ac:	f013 fa26 	bl	1dcfc <smp_error>
    a8b0:	e019      	b.n	a8e6 <bt_smp_recv+0x6e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    a8b2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    a8b6:	f013 f9de 	bl	1dc76 <atomic_test_and_clear_bit>
    a8ba:	7833      	ldrb	r3, [r6, #0]
    a8bc:	b918      	cbnz	r0, a8c6 <bt_smp_recv+0x4e>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    a8be:	2b05      	cmp	r3, #5
    a8c0:	d011      	beq.n	a8e6 <bt_smp_recv+0x6e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    a8c2:	2108      	movs	r1, #8
    a8c4:	e7f1      	b.n	a8aa <bt_smp_recv+0x32>
	if (buf->len != handlers[hdr->code].expect_len) {
    a8c6:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    a8ca:	89a9      	ldrh	r1, [r5, #12]
    a8cc:	7912      	ldrb	r2, [r2, #4]
    a8ce:	4291      	cmp	r1, r2
    a8d0:	d001      	beq.n	a8d6 <bt_smp_recv+0x5e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    a8d2:	210a      	movs	r1, #10
    a8d4:	e7e9      	b.n	a8aa <bt_smp_recv+0x32>
	err = handlers[hdr->code].func(smp, buf);
    a8d6:	4629      	mov	r1, r5
    a8d8:	f857 3033 	ldr.w	r3, [r7, r3, lsl #3]
    a8dc:	4620      	mov	r0, r4
    a8de:	4798      	blx	r3
	if (err) {
    a8e0:	4601      	mov	r1, r0
    a8e2:	2800      	cmp	r0, #0
    a8e4:	d1e1      	bne.n	a8aa <bt_smp_recv+0x32>
}
    a8e6:	2000      	movs	r0, #0
    a8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a8ea:	bf00      	nop
    a8ec:	0001fc0c 	.word	0x0001fc0c

0000a8f0 <smp_pairing_failed>:
{
    a8f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    a8f2:	4605      	mov	r5, r0
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    a8f4:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    a8f6:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    a8fa:	4604      	mov	r4, r0
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    a8fc:	2109      	movs	r1, #9
    a8fe:	4628      	mov	r0, r5
    a900:	f013 f9b9 	bl	1dc76 <atomic_test_and_clear_bit>
    a904:	b140      	cbz	r0, a918 <smp_pairing_failed+0x28>
		if (bt_auth && bt_auth->cancel) {
    a906:	4b0b      	ldr	r3, [pc, #44]	; (a934 <smp_pairing_failed+0x44>)
    a908:	681b      	ldr	r3, [r3, #0]
    a90a:	b963      	cbnz	r3, a926 <smp_pairing_failed+0x36>
	smp_pairing_complete(smp, req->reason);
    a90c:	4620      	mov	r0, r4
    a90e:	7831      	ldrb	r1, [r6, #0]
    a910:	f7ff ff28 	bl	a764 <smp_pairing_complete>
}
    a914:	2000      	movs	r0, #0
    a916:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    a918:	210a      	movs	r1, #10
    a91a:	4628      	mov	r0, r5
    a91c:	f013 f9ab 	bl	1dc76 <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    a920:	2800      	cmp	r0, #0
    a922:	d1f0      	bne.n	a906 <smp_pairing_failed+0x16>
    a924:	e7f2      	b.n	a90c <smp_pairing_failed+0x1c>
		if (bt_auth && bt_auth->cancel) {
    a926:	691b      	ldr	r3, [r3, #16]
    a928:	2b00      	cmp	r3, #0
    a92a:	d0ef      	beq.n	a90c <smp_pairing_failed+0x1c>
			bt_auth->cancel(conn);
    a92c:	4638      	mov	r0, r7
    a92e:	4798      	blx	r3
    a930:	e7ec      	b.n	a90c <smp_pairing_failed+0x1c>
    a932:	bf00      	nop
    a934:	200014b0 	.word	0x200014b0

0000a938 <bt_smp_connected>:
{
    a938:	b510      	push	{r4, lr}
	k_delayed_work_init(&smp->work, smp_timeout);
    a93a:	4905      	ldr	r1, [pc, #20]	; (a950 <bt_smp_connected+0x18>)
{
    a93c:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    a93e:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    a942:	f014 fb3b 	bl	1efbc <k_delayed_work_init>
	smp_reset(smp);
    a946:	4620      	mov	r0, r4
}
    a948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    a94c:	f013 b9ab 	b.w	1dca6 <smp_reset>
    a950:	0001dd39 	.word	0x0001dd39

0000a954 <bt_smp_encrypt_change>:
{
    a954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    a958:	4605      	mov	r5, r0
{
    a95a:	460e      	mov	r6, r1
	struct bt_conn *conn = chan->conn;
    a95c:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    a960:	b089      	sub	sp, #36	; 0x24
    a962:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a964:	2101      	movs	r1, #1
    a966:	4628      	mov	r0, r5
    a968:	f013 f898 	bl	1da9c <atomic_clear_bit>
	if (hci_status) {
    a96c:	b946      	cbnz	r6, a980 <bt_smp_encrypt_change+0x2c>
	if (!conn->encrypt) {
    a96e:	7afb      	ldrb	r3, [r7, #11]
    a970:	b133      	cbz	r3, a980 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    a972:	2103      	movs	r1, #3
    a974:	f013 f8bd 	bl	1daf2 <atomic_test_bit>
    a978:	b928      	cbnz	r0, a986 <bt_smp_encrypt_change+0x32>
		smp_reset(smp);
    a97a:	4620      	mov	r0, r4
    a97c:	f013 f993 	bl	1dca6 <smp_reset>
}
    a980:	b009      	add	sp, #36	; 0x24
    a982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a986:	2105      	movs	r1, #5
    a988:	4628      	mov	r0, r5
    a98a:	f013 f8b2 	bl	1daf2 <atomic_test_bit>
    a98e:	b198      	cbz	r0, a9b8 <bt_smp_encrypt_change+0x64>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    a990:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    a994:	071a      	lsls	r2, r3, #28
    a996:	d507      	bpl.n	a9a8 <bt_smp_encrypt_change+0x54>
    a998:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    a99c:	071b      	lsls	r3, r3, #28
    a99e:	d503      	bpl.n	a9a8 <bt_smp_encrypt_change+0x54>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    a9a0:	2110      	movs	r1, #16
    a9a2:	4628      	mov	r0, r5
    a9a4:	f012 ffae 	bl	1d904 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    a9a8:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    a9ac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    a9b0:	f023 0308 	bic.w	r3, r3, #8
    a9b4:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    a9b8:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    a9bc:	07df      	lsls	r7, r3, #31
    a9be:	f140 80e0 	bpl.w	ab82 <bt_smp_encrypt_change+0x22e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    a9c2:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    a9c4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    a9c8:	f012 ff9c 	bl	1d904 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    a9cc:	2102      	movs	r1, #2
    a9ce:	4628      	mov	r0, r5
    a9d0:	f012 ff98 	bl	1d904 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    a9d4:	f8d4 8000 	ldr.w	r8, [r4]
	struct bt_keys *keys = conn->le.keys;
    a9d8:	f8d8 70b4 	ldr.w	r7, [r8, #180]	; 0xb4
	if (!keys) {
    a9dc:	2f00      	cmp	r7, #0
    a9de:	d0cf      	beq.n	a980 <bt_smp_encrypt_change+0x2c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    a9e0:	2105      	movs	r1, #5
    a9e2:	f013 f886 	bl	1daf2 <atomic_test_bit>
    a9e6:	4682      	mov	sl, r0
    a9e8:	2800      	cmp	r0, #0
    a9ea:	d15d      	bne.n	aaa8 <bt_smp_encrypt_change+0x154>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    a9ec:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    a9f0:	07d9      	lsls	r1, r3, #31
    a9f2:	d559      	bpl.n	aaa8 <bt_smp_encrypt_change+0x154>
	struct bt_keys *keys = conn->le.keys;
    a9f4:	6823      	ldr	r3, [r4, #0]
		bt_rand((void *)&rand, sizeof(rand));
    a9f6:	211a      	movs	r1, #26
    a9f8:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    a9fa:	f8d3 60b4 	ldr.w	r6, [r3, #180]	; 0xb4
		bt_rand((void *)&rand, sizeof(rand));
    a9fe:	f003 fa53 	bl	dea8 <bt_rand>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    aa02:	2106      	movs	r1, #6
    aa04:	4620      	mov	r0, r4
    aa06:	f013 f87d 	bl	1db04 <smp_create_pdu.isra.0>
		if (!buf) {
    aa0a:	4681      	mov	r9, r0
    aa0c:	2800      	cmp	r0, #0
    aa0e:	d04b      	beq.n	aaa8 <bt_smp_encrypt_change+0x154>
		info = net_buf_add(buf, sizeof(*info));
    aa10:	2110      	movs	r1, #16
    aa12:	3008      	adds	r0, #8
    aa14:	f013 fdbe 	bl	1e594 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    aa18:	7b32      	ldrb	r2, [r6, #12]
    aa1a:	a901      	add	r1, sp, #4
		info = net_buf_add(buf, sizeof(*info));
    aa1c:	4683      	mov	fp, r0
		memcpy(info->ltk, rand.key, keys->enc_size);
    aa1e:	f011 f804 	bl	1ba2a <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    aa22:	7b30      	ldrb	r0, [r6, #12]
    aa24:	280f      	cmp	r0, #15
    aa26:	d805      	bhi.n	aa34 <bt_smp_encrypt_change+0xe0>
			(void)memset(info->ltk + keys->enc_size, 0,
    aa28:	f1c0 0210 	rsb	r2, r0, #16
    aa2c:	4651      	mov	r1, sl
    aa2e:	4458      	add	r0, fp
    aa30:	f011 f826 	bl	1ba80 <memset>
		smp_send(smp, buf, NULL, NULL);
    aa34:	4649      	mov	r1, r9
    aa36:	2200      	movs	r2, #0
    aa38:	4620      	mov	r0, r4
    aa3a:	f7ff faa7 	bl	9f8c <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    aa3e:	2107      	movs	r1, #7
    aa40:	4620      	mov	r0, r4
    aa42:	f013 f85f 	bl	1db04 <smp_create_pdu.isra.0>
		if (!buf) {
    aa46:	4681      	mov	r9, r0
    aa48:	b370      	cbz	r0, aaa8 <bt_smp_encrypt_change+0x154>
		ident = net_buf_add(buf, sizeof(*ident));
    aa4a:	210a      	movs	r1, #10
    aa4c:	3008      	adds	r0, #8
    aa4e:	f013 fda1 	bl	1e594 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    aa52:	2208      	movs	r2, #8
		ident = net_buf_add(buf, sizeof(*ident));
    aa54:	4682      	mov	sl, r0
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    aa56:	a905      	add	r1, sp, #20
    aa58:	3002      	adds	r0, #2
    aa5a:	f010 ffe6 	bl	1ba2a <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    aa5e:	2202      	movs	r2, #2
    aa60:	a907      	add	r1, sp, #28
    aa62:	4650      	mov	r0, sl
    aa64:	f010 ffe1 	bl	1ba2a <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    aa68:	4649      	mov	r1, r9
    aa6a:	4620      	mov	r0, r4
    aa6c:	4a49      	ldr	r2, [pc, #292]	; (ab94 <bt_smp_encrypt_change+0x240>)
    aa6e:	f7ff fa8d 	bl	9f8c <smp_send.isra.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    aa72:	210c      	movs	r1, #12
    aa74:	4628      	mov	r0, r5
    aa76:	f013 f83c 	bl	1daf2 <atomic_test_bit>
    aa7a:	b1a8      	cbz	r0, aaa8 <bt_smp_encrypt_change+0x154>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    aa7c:	2101      	movs	r1, #1
    aa7e:	4630      	mov	r0, r6
    aa80:	f013 fcec 	bl	1e45c <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    aa84:	2210      	movs	r2, #16
    aa86:	a901      	add	r1, sp, #4
    aa88:	f106 0072 	add.w	r0, r6, #114	; 0x72
    aa8c:	f010 ffcd 	bl	1ba2a <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    aa90:	2208      	movs	r2, #8
    aa92:	a905      	add	r1, sp, #20
    aa94:	f106 0068 	add.w	r0, r6, #104	; 0x68
    aa98:	f010 ffc7 	bl	1ba2a <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    aa9c:	2202      	movs	r2, #2
    aa9e:	a907      	add	r1, sp, #28
    aaa0:	f106 0070 	add.w	r0, r6, #112	; 0x70
    aaa4:	f010 ffc1 	bl	1ba2a <memcpy>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    aaa8:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    aaac:	079a      	lsls	r2, r3, #30
    aaae:	d535      	bpl.n	ab1c <bt_smp_encrypt_change+0x1c8>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    aab0:	2108      	movs	r1, #8
    aab2:	4620      	mov	r0, r4
    aab4:	f013 f826 	bl	1db04 <smp_create_pdu.isra.0>
		if (!buf) {
    aab8:	4606      	mov	r6, r0
    aaba:	2800      	cmp	r0, #0
    aabc:	f43f af60 	beq.w	a980 <bt_smp_encrypt_change+0x2c>
		id_info = net_buf_add(buf, sizeof(*id_info));
    aac0:	2110      	movs	r1, #16
    aac2:	3008      	adds	r0, #8
    aac4:	f013 fd66 	bl	1e594 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    aac8:	f898 1008 	ldrb.w	r1, [r8, #8]
    aacc:	f8df 90d0 	ldr.w	r9, [pc, #208]	; aba0 <bt_smp_encrypt_change+0x24c>
    aad0:	f44f 7394 	mov.w	r3, #296	; 0x128
    aad4:	2210      	movs	r2, #16
    aad6:	fb12 3101 	smlabb	r1, r2, r1, r3
    aada:	4449      	add	r1, r9
    aadc:	f010 ffa5 	bl	1ba2a <memcpy>
		smp_send(smp, buf, NULL, NULL);
    aae0:	4631      	mov	r1, r6
    aae2:	2200      	movs	r2, #0
    aae4:	4620      	mov	r0, r4
    aae6:	f7ff fa51 	bl	9f8c <smp_send.isra.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    aaea:	2109      	movs	r1, #9
    aaec:	4620      	mov	r0, r4
    aaee:	f013 f809 	bl	1db04 <smp_create_pdu.isra.0>
		if (!buf) {
    aaf2:	4606      	mov	r6, r0
    aaf4:	2800      	cmp	r0, #0
    aaf6:	f43f af43 	beq.w	a980 <bt_smp_encrypt_change+0x2c>
		id_addr_info = net_buf_add(buf, sizeof(*id_addr_info));
    aafa:	2107      	movs	r1, #7
    aafc:	3008      	adds	r0, #8
    aafe:	f013 fd49 	bl	1e594 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    ab02:	f898 1008 	ldrb.w	r1, [r8, #8]
    ab06:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
	memcpy(dst, src, sizeof(*dst));
    ab0a:	2207      	movs	r2, #7
    ab0c:	4449      	add	r1, r9
    ab0e:	f010 ff8c 	bl	1ba2a <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    ab12:	4a21      	ldr	r2, [pc, #132]	; (ab98 <bt_smp_encrypt_change+0x244>)
    ab14:	4631      	mov	r1, r6
    ab16:	4620      	mov	r0, r4
    ab18:	f7ff fa38 	bl	9f8c <smp_send.isra.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    ab1c:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    ab20:	075b      	lsls	r3, r3, #29
    ab22:	d525      	bpl.n	ab70 <bt_smp_encrypt_change+0x21c>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    ab24:	210a      	movs	r1, #10
    ab26:	4620      	mov	r0, r4
    ab28:	f012 ffec 	bl	1db04 <smp_create_pdu.isra.0>
		if (!buf) {
    ab2c:	4606      	mov	r6, r0
    ab2e:	2800      	cmp	r0, #0
    ab30:	f43f af26 	beq.w	a980 <bt_smp_encrypt_change+0x2c>
		info = net_buf_add(buf, sizeof(*info));
    ab34:	2110      	movs	r1, #16
    ab36:	3008      	adds	r0, #8
    ab38:	f013 fd2c 	bl	1e594 <net_buf_simple_add>
		bt_rand(info->csrk, sizeof(info->csrk));
    ab3c:	2110      	movs	r1, #16
		info = net_buf_add(buf, sizeof(*info));
    ab3e:	4680      	mov	r8, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    ab40:	f003 f9b2 	bl	dea8 <bt_rand>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ab44:	210c      	movs	r1, #12
    ab46:	4628      	mov	r0, r5
    ab48:	f012 ffd3 	bl	1daf2 <atomic_test_bit>
    ab4c:	b158      	cbz	r0, ab66 <bt_smp_encrypt_change+0x212>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    ab4e:	2108      	movs	r1, #8
    ab50:	4638      	mov	r0, r7
    ab52:	f013 fc83 	bl	1e45c <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ab56:	2210      	movs	r2, #16
    ab58:	4641      	mov	r1, r8
    ab5a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    ab5e:	f010 ff64 	bl	1ba2a <memcpy>
			keys->local_csrk.cnt = 0U;
    ab62:	2300      	movs	r3, #0
    ab64:	653b      	str	r3, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    ab66:	4a0d      	ldr	r2, [pc, #52]	; (ab9c <bt_smp_encrypt_change+0x248>)
    ab68:	4631      	mov	r1, r6
    ab6a:	4620      	mov	r0, r4
    ab6c:	f7ff fa0e 	bl	9f8c <smp_send.isra.0>
	if (!smp->local_dist && !smp->remote_dist) {
    ab70:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    ab74:	2900      	cmp	r1, #0
    ab76:	f47f af03 	bne.w	a980 <bt_smp_encrypt_change+0x2c>
		smp_pairing_complete(smp, 0);
    ab7a:	4620      	mov	r0, r4
    ab7c:	f7ff fdf2 	bl	a764 <smp_pairing_complete>
    ab80:	e6fe      	b.n	a980 <bt_smp_encrypt_change+0x2c>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    ab82:	079e      	lsls	r6, r3, #30
    ab84:	d501      	bpl.n	ab8a <bt_smp_encrypt_change+0x236>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    ab86:	2108      	movs	r1, #8
    ab88:	e71c      	b.n	a9c4 <bt_smp_encrypt_change+0x70>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    ab8a:	0758      	lsls	r0, r3, #29
    ab8c:	f57f af1e 	bpl.w	a9cc <bt_smp_encrypt_change+0x78>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    ab90:	210a      	movs	r1, #10
    ab92:	e717      	b.n	a9c4 <bt_smp_encrypt_change+0x70>
    ab94:	0001de5b 	.word	0x0001de5b
    ab98:	0001de3f 	.word	0x0001de3f
    ab9c:	0001de4d 	.word	0x0001de4d
    aba0:	20000000 	.word	0x20000000

0000aba4 <smp_pairing_random>:
{
    aba4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    aba8:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    abaa:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    abae:	6889      	ldr	r1, [r1, #8]
{
    abb0:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    abb2:	2210      	movs	r2, #16
    abb4:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    abb6:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    abba:	f010 ff36 	bl	1ba2a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    abbe:	2105      	movs	r1, #5
    abc0:	4630      	mov	r0, r6
    abc2:	f012 ff96 	bl	1daf2 <atomic_test_bit>
    abc6:	2800      	cmp	r0, #0
    abc8:	d13d      	bne.n	ac46 <smp_pairing_random+0xa2>
	struct bt_conn *conn = smp->chan.chan.conn;
    abca:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    abcc:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    abce:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    abd2:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    abd4:	f103 0296 	add.w	r2, r3, #150	; 0x96
    abd8:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    abda:	9201      	str	r2, [sp, #4]
    abdc:	9300      	str	r3, [sp, #0]
    abde:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    abe2:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    abe6:	4639      	mov	r1, r7
    abe8:	4640      	mov	r0, r8
    abea:	f013 f93c 	bl	1de66 <smp_c1>
	if (err) {
    abee:	b108      	cbz	r0, abf4 <smp_pairing_random+0x50>
	switch (smp->method) {
    abf0:	2508      	movs	r5, #8
    abf2:	e096      	b.n	ad22 <smp_pairing_random+0x17e>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    abf4:	2210      	movs	r2, #16
    abf6:	4629      	mov	r1, r5
    abf8:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    abfc:	f010 ff05 	bl	1ba0a <memcmp>
    ac00:	2800      	cmp	r0, #0
    ac02:	f040 808d 	bne.w	ad20 <smp_pairing_random+0x17c>
	memcpy(out, r2, 8);
    ac06:	2208      	movs	r2, #8
    ac08:	4639      	mov	r1, r7
    ac0a:	4628      	mov	r0, r5
    ac0c:	f010 ff0d 	bl	1ba2a <memcpy>
	memcpy(out + 8, r1, 8);
    ac10:	2208      	movs	r2, #8
    ac12:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    ac16:	a80c      	add	r0, sp, #48	; 0x30
    ac18:	f010 ff07 	bl	1ba2a <memcpy>
	return bt_encrypt_le(k, out, out);
    ac1c:	462a      	mov	r2, r5
    ac1e:	4629      	mov	r1, r5
    ac20:	4640      	mov	r0, r8
    ac22:	f003 f943 	bl	deac <bt_encrypt_le>
		if (err) {
    ac26:	2800      	cmp	r0, #0
    ac28:	d1e2      	bne.n	abf0 <smp_pairing_random+0x4c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    ac2a:	4629      	mov	r1, r5
    ac2c:	2210      	movs	r2, #16
    ac2e:	4640      	mov	r0, r8
    ac30:	f010 fefb 	bl	1ba2a <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ac34:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ac36:	4630      	mov	r0, r6
    ac38:	f012 fe64 	bl	1d904 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    ac3c:	4620      	mov	r0, r4
    ac3e:	f012 ff81 	bl	1db44 <smp_send_pairing_random>
    ac42:	4605      	mov	r5, r0
    ac44:	e06d      	b.n	ad22 <smp_pairing_random+0x17e>
	switch (smp->method) {
    ac46:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ac4a:	2b05      	cmp	r3, #5
    ac4c:	d8d0      	bhi.n	abf0 <smp_pairing_random+0x4c>
    ac4e:	a201      	add	r2, pc, #4	; (adr r2, ac54 <smp_pairing_random+0xb0>)
    ac50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    ac54:	0000acdb 	.word	0x0000acdb
    ac58:	0000ace9 	.word	0x0000ace9
    ac5c:	0000ace9 	.word	0x0000ace9
    ac60:	0000ac6d 	.word	0x0000ac6d
    ac64:	0000abf1 	.word	0x0000abf1
    ac68:	0000ad75 	.word	0x0000ad75
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    ac6c:	4b5a      	ldr	r3, [pc, #360]	; (add8 <smp_pairing_random+0x234>)
    ac6e:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    ac70:	2220      	movs	r2, #32
    ac72:	f204 110f 	addw	r1, r4, #271	; 0x10f
    ac76:	a80a      	add	r0, sp, #40	; 0x28
    ac78:	f012 fe28 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    ac7c:	2220      	movs	r2, #32
    ac7e:	4629      	mov	r1, r5
    ac80:	a812      	add	r0, sp, #72	; 0x48
    ac82:	f012 fe23 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    ac86:	2210      	movs	r2, #16
    ac88:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    ac8c:	a81a      	add	r0, sp, #104	; 0x68
    ac8e:	f012 fe1d 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    ac92:	2210      	movs	r2, #16
    ac94:	4639      	mov	r1, r7
    ac96:	a806      	add	r0, sp, #24
    ac98:	f012 fe18 	bl	1d8cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    ac9c:	ab06      	add	r3, sp, #24
    ac9e:	2250      	movs	r2, #80	; 0x50
    aca0:	a90a      	add	r1, sp, #40	; 0x28
    aca2:	4618      	mov	r0, r3
    aca4:	f012 fe3c 	bl	1d920 <bt_smp_aes_cmac>
	if (err) {
    aca8:	2800      	cmp	r0, #0
    acaa:	d1a1      	bne.n	abf0 <smp_pairing_random+0x4c>
	memcpy(passkey, xs + 12, 4);
    acac:	2204      	movs	r2, #4
    acae:	a909      	add	r1, sp, #36	; 0x24
    acb0:	a805      	add	r0, sp, #20
    acb2:	f010 feba 	bl	1ba2a <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    acb6:	9b05      	ldr	r3, [sp, #20]
    acb8:	4948      	ldr	r1, [pc, #288]	; (addc <smp_pairing_random+0x238>)
    acba:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    acbc:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    acbe:	fbb3 f2f1 	udiv	r2, r3, r1
    acc2:	fb01 3312 	mls	r3, r1, r2, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    acc6:	2109      	movs	r1, #9
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    acc8:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    acca:	f012 fe1b 	bl	1d904 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    acce:	4b44      	ldr	r3, [pc, #272]	; (ade0 <smp_pairing_random+0x23c>)
    acd0:	9905      	ldr	r1, [sp, #20]
    acd2:	681b      	ldr	r3, [r3, #0]
    acd4:	6820      	ldr	r0, [r4, #0]
    acd6:	689b      	ldr	r3, [r3, #8]
    acd8:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    acda:	210d      	movs	r1, #13
    acdc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ace0:	f012 fe10 	bl	1d904 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ace4:	210f      	movs	r1, #15
    ace6:	e7a6      	b.n	ac36 <smp_pairing_random+0x92>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ace8:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    acec:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    acf0:	4939      	ldr	r1, [pc, #228]	; (add8 <smp_pairing_random+0x234>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    acf2:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    acf4:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    acf6:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    acfa:	9500      	str	r5, [sp, #0]
    acfc:	6809      	ldr	r1, [r1, #0]
    acfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    ad02:	463a      	mov	r2, r7
    ad04:	f204 100f 	addw	r0, r4, #271	; 0x10f
    ad08:	f012 fe55 	bl	1d9b6 <smp_f4>
    ad0c:	2800      	cmp	r0, #0
    ad0e:	f47f af6f 	bne.w	abf0 <smp_pairing_random+0x4c>
	if (memcmp(smp->pcnf, cfm, 16)) {
    ad12:	2210      	movs	r2, #16
    ad14:	4629      	mov	r1, r5
    ad16:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    ad1a:	f010 fe76 	bl	1ba0a <memcmp>
    ad1e:	b120      	cbz	r0, ad2a <smp_pairing_random+0x186>
		return BT_SMP_ERR_CONFIRM_FAILED;
    ad20:	2504      	movs	r5, #4
}
    ad22:	4628      	mov	r0, r5
    ad24:	b01e      	add	sp, #120	; 0x78
    ad26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    ad2a:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    ad2e:	2103      	movs	r1, #3
    ad30:	4638      	mov	r0, r7
    ad32:	f012 fde7 	bl	1d904 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    ad36:	4620      	mov	r0, r4
    ad38:	f012 ff04 	bl	1db44 <smp_send_pairing_random>
		if (err) {
    ad3c:	4605      	mov	r5, r0
    ad3e:	2800      	cmp	r0, #0
    ad40:	d1ef      	bne.n	ad22 <smp_pairing_random+0x17e>
		smp->passkey_round++;
    ad42:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    ad46:	3301      	adds	r3, #1
    ad48:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    ad4a:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    ad4c:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    ad50:	d108      	bne.n	ad64 <smp_pairing_random+0x1c0>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    ad52:	4638      	mov	r0, r7
    ad54:	210d      	movs	r1, #13
    ad56:	f012 fdd5 	bl	1d904 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    ad5a:	210f      	movs	r1, #15
    ad5c:	4630      	mov	r0, r6
    ad5e:	f012 fdd1 	bl	1d904 <atomic_set_bit>
			return 0;
    ad62:	e7de      	b.n	ad22 <smp_pairing_random+0x17e>
		if (bt_rand(smp->prnd, 16)) {
    ad64:	2110      	movs	r1, #16
    ad66:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    ad6a:	f003 f89d 	bl	dea8 <bt_rand>
    ad6e:	2800      	cmp	r0, #0
    ad70:	d0d7      	beq.n	ad22 <smp_pairing_random+0x17e>
    ad72:	e73d      	b.n	abf0 <smp_pairing_random+0x4c>
		if (bt_rand(smp->prnd, 16)) {
    ad74:	2110      	movs	r1, #16
    ad76:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    ad7a:	f003 f895 	bl	dea8 <bt_rand>
    ad7e:	2800      	cmp	r0, #0
    ad80:	f47f af36 	bne.w	abf0 <smp_pairing_random+0x4c>
		if (bt_auth && bt_auth->oob_data_request) {
    ad84:	4f16      	ldr	r7, [pc, #88]	; (ade0 <smp_pairing_random+0x23c>)
    ad86:	683b      	ldr	r3, [r7, #0]
    ad88:	b193      	cbz	r3, adb0 <smp_pairing_random+0x20c>
    ad8a:	68db      	ldr	r3, [r3, #12]
    ad8c:	b183      	cbz	r3, adb0 <smp_pairing_random+0x20c>
			struct bt_conn_oob_info info = {
    ad8e:	4b15      	ldr	r3, [pc, #84]	; (ade4 <smp_pairing_random+0x240>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ad90:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    ad94:	881b      	ldrh	r3, [r3, #0]
    ad96:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ad9a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    ad9e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    ada0:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    ada4:	d406      	bmi.n	adb4 <smp_pairing_random+0x210>
				     BT_CONN_OOB_BOTH_PEERS :
    ada6:	2b00      	cmp	r3, #0
    ada8:	bf0c      	ite	eq
    adaa:	2003      	moveq	r0, #3
    adac:	2001      	movne	r0, #1
    adae:	e004      	b.n	adba <smp_pairing_random+0x216>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    adb0:	2502      	movs	r5, #2
    adb2:	e7b6      	b.n	ad22 <smp_pairing_random+0x17e>
				     BT_CONN_OOB_BOTH_PEERS :
    adb4:	2b00      	cmp	r3, #0
    adb6:	bf18      	it	ne
    adb8:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    adba:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    adbc:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    adc0:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    adc4:	4630      	mov	r0, r6
    adc6:	210b      	movs	r1, #11
    adc8:	f012 fd9c 	bl	1d904 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    adcc:	683b      	ldr	r3, [r7, #0]
    adce:	6820      	ldr	r0, [r4, #0]
    add0:	68db      	ldr	r3, [r3, #12]
    add2:	a90a      	add	r1, sp, #40	; 0x28
    add4:	4798      	blx	r3
			return 0;
    add6:	e7a4      	b.n	ad22 <smp_pairing_random+0x17e>
    add8:	20001524 	.word	0x20001524
    addc:	000f4240 	.word	0x000f4240
    ade0:	200014b0 	.word	0x200014b0
    ade4:	0001f6e4 	.word	0x0001f6e4

0000ade8 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    ade8:	4b0f      	ldr	r3, [pc, #60]	; (ae28 <bt_smp_pkey_ready+0x40>)
{
    adea:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    adec:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    adee:	b1d0      	cbz	r0, ae26 <bt_smp_pkey_ready+0x3e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    adf0:	4c0e      	ldr	r4, [pc, #56]	; (ae2c <bt_smp_pkey_ready+0x44>)
	z_impl_k_sem_give(sem);
    adf2:	480f      	ldr	r0, [pc, #60]	; (ae30 <bt_smp_pkey_ready+0x48>)
    adf4:	f00e facc 	bl	19390 <z_impl_k_sem_give>
    adf8:	f3bf 8f5b 	dmb	ish
    adfc:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    ae00:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    ae04:	065b      	lsls	r3, r3, #25
    ae06:	d50e      	bpl.n	ae26 <bt_smp_pkey_ready+0x3e>
	err = sc_send_public_key(smp);
    ae08:	4620      	mov	r0, r4
    ae0a:	f7ff fa63 	bl	a2d4 <sc_send_public_key>
	if (err) {
    ae0e:	4601      	mov	r1, r0
    ae10:	b920      	cbnz	r0, ae1c <bt_smp_pkey_ready+0x34>
    ae12:	4620      	mov	r0, r4
    ae14:	f7ff f912 	bl	a03c <smp_public_key_slave.part.0>
		if (err) {
    ae18:	4601      	mov	r1, r0
    ae1a:	b120      	cbz	r0, ae26 <bt_smp_pkey_ready+0x3e>
}
    ae1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    ae20:	4802      	ldr	r0, [pc, #8]	; (ae2c <bt_smp_pkey_ready+0x44>)
    ae22:	f012 bf6b 	b.w	1dcfc <smp_error>
}
    ae26:	bd10      	pop	{r4, pc}
    ae28:	20001524 	.word	0x20001524
    ae2c:	20000f30 	.word	0x20000f30
    ae30:	20000af4 	.word	0x20000af4

0000ae34 <bt_smp_start_security>:
{
    ae34:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    ae38:	78c4      	ldrb	r4, [r0, #3]
    ae3a:	2c01      	cmp	r4, #1
{
    ae3c:	4605      	mov	r5, r0
	switch (conn->role) {
    ae3e:	d005      	beq.n	ae4c <bt_smp_start_security+0x18>
		return -EINVAL;
    ae40:	f06f 0415 	mvn.w	r4, #21
}
    ae44:	4620      	mov	r0, r4
    ae46:	b003      	add	sp, #12
    ae48:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    ae4c:	f012 fd57 	bl	1d8fe <smp_chan_get>
	if (!smp) {
    ae50:	4606      	mov	r6, r0
    ae52:	2800      	cmp	r0, #0
    ae54:	f000 80a0 	beq.w	af98 <bt_smp_start_security+0x164>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    ae58:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    ae5c:	2104      	movs	r1, #4
    ae5e:	4638      	mov	r0, r7
    ae60:	f012 fe47 	bl	1daf2 <atomic_test_bit>
    ae64:	2800      	cmp	r0, #0
    ae66:	f040 809a 	bne.w	af9e <bt_smp_start_security+0x16a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    ae6a:	2103      	movs	r1, #3
    ae6c:	4638      	mov	r0, r7
    ae6e:	f012 fe40 	bl	1daf2 <atomic_test_bit>
    ae72:	b110      	cbz	r0, ae7a <bt_smp_start_security+0x46>
		return -EBUSY;
    ae74:	f06f 040f 	mvn.w	r4, #15
    ae78:	e7e4      	b.n	ae44 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ae7a:	4621      	mov	r1, r4
    ae7c:	4638      	mov	r0, r7
    ae7e:	f012 fe38 	bl	1daf2 <atomic_test_bit>
    ae82:	2800      	cmp	r0, #0
    ae84:	d1f6      	bne.n	ae74 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    ae86:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    ae88:	2b03      	cmp	r3, #3
    ae8a:	d03d      	beq.n	af08 <bt_smp_start_security+0xd4>
    ae8c:	d82c      	bhi.n	aee8 <bt_smp_start_security+0xb4>
    ae8e:	3b01      	subs	r3, #1
    ae90:	2b01      	cmp	r3, #1
    ae92:	d946      	bls.n	af22 <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    ae94:	210b      	movs	r1, #11
    ae96:	1d28      	adds	r0, r5, #4
    ae98:	f012 fe2b 	bl	1daf2 <atomic_test_bit>
    ae9c:	2800      	cmp	r0, #0
    ae9e:	d1cf      	bne.n	ae40 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    aea0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    aea4:	b983      	cbnz	r3, aec8 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    aea6:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    aeaa:	7a29      	ldrb	r1, [r5, #8]
    aeac:	4622      	mov	r2, r4
    aeae:	2020      	movs	r0, #32
    aeb0:	f000 f8d2 	bl	b058 <bt_keys_find>
    aeb4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    aeb8:	b930      	cbnz	r0, aec8 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    aeba:	7a29      	ldrb	r1, [r5, #8]
    aebc:	4622      	mov	r2, r4
    aebe:	2004      	movs	r0, #4
    aec0:	f000 f8ca 	bl	b058 <bt_keys_find>
    aec4:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    aec8:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    aecc:	2b00      	cmp	r3, #0
    aece:	d0b7      	beq.n	ae40 <bt_smp_start_security+0xc>
    aed0:	89da      	ldrh	r2, [r3, #14]
    aed2:	f002 0224 	and.w	r2, r2, #36	; 0x24
    aed6:	2a00      	cmp	r2, #0
    aed8:	d0b2      	beq.n	ae40 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    aeda:	7aaa      	ldrb	r2, [r5, #10]
    aedc:	2a02      	cmp	r2, #2
    aede:	d920      	bls.n	af22 <bt_smp_start_security+0xee>
    aee0:	7b5b      	ldrb	r3, [r3, #13]
    aee2:	07db      	lsls	r3, r3, #31
    aee4:	d5ac      	bpl.n	ae40 <bt_smp_start_security+0xc>
    aee6:	e01c      	b.n	af22 <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
    aee8:	2b04      	cmp	r3, #4
    aeea:	d1d3      	bne.n	ae94 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    aeec:	f7fe ffde 	bl	9eac <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    aef0:	2803      	cmp	r0, #3
    aef2:	d104      	bne.n	aefe <bt_smp_start_security+0xca>
    aef4:	4b2b      	ldr	r3, [pc, #172]	; (afa4 <bt_smp_start_security+0x170>)
    aef6:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    aef8:	b1f3      	cbz	r3, af38 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    aefa:	68dc      	ldr	r4, [r3, #12]
    aefc:	b10c      	cbz	r4, af02 <bt_smp_start_security+0xce>
    aefe:	4b2a      	ldr	r3, [pc, #168]	; (afa8 <bt_smp_start_security+0x174>)
    af00:	781c      	ldrb	r4, [r3, #0]
    af02:	f004 0401 	and.w	r4, r4, #1
    af06:	e00a      	b.n	af1e <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    af08:	f7fe ffd0 	bl	9eac <get_io_capa>
    af0c:	2803      	cmp	r0, #3
    af0e:	d106      	bne.n	af1e <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    af10:	4b24      	ldr	r3, [pc, #144]	; (afa4 <bt_smp_start_security+0x170>)
    af12:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    af14:	b11c      	cbz	r4, af1e <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    af16:	68e4      	ldr	r4, [r4, #12]
    af18:	3c00      	subs	r4, #0
    af1a:	bf18      	it	ne
    af1c:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    af1e:	2c00      	cmp	r4, #0
    af20:	d0b8      	beq.n	ae94 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    af22:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    af26:	b14b      	cbz	r3, af3c <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
    af28:	4630      	mov	r0, r6
    af2a:	f7ff f811 	bl	9f50 <smp_init>
    af2e:	4604      	mov	r4, r0
    af30:	b180      	cbz	r0, af54 <bt_smp_start_security+0x120>
		return -ENOBUFS;
    af32:	f06f 0436 	mvn.w	r4, #54	; 0x36
    af36:	e785      	b.n	ae44 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    af38:	2400      	movs	r4, #0
    af3a:	e7e2      	b.n	af02 <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    af3c:	7a28      	ldrb	r0, [r5, #8]
    af3e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    af42:	f000 f849 	bl	afd8 <bt_keys_get_addr>
    af46:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    af4a:	2800      	cmp	r0, #0
    af4c:	d1ec      	bne.n	af28 <bt_smp_start_security+0xf4>
			return -ENOMEM;
    af4e:	f06f 040b 	mvn.w	r4, #11
    af52:	e777      	b.n	ae44 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    af54:	210b      	movs	r1, #11
    af56:	4630      	mov	r0, r6
    af58:	f012 fdd4 	bl	1db04 <smp_create_pdu.isra.0>
	if (!req_buf) {
    af5c:	4680      	mov	r8, r0
    af5e:	2800      	cmp	r0, #0
    af60:	d0e7      	beq.n	af32 <bt_smp_start_security+0xfe>
	req = net_buf_add(req_buf, sizeof(*req));
    af62:	2101      	movs	r1, #1
    af64:	3008      	adds	r0, #8
    af66:	f013 fb15 	bl	1e594 <net_buf_simple_add>
    af6a:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    af6c:	2009      	movs	r0, #9
    af6e:	f7fe ffd1 	bl	9f14 <get_auth.isra.0>
    af72:	4623      	mov	r3, r4
    af74:	f889 0000 	strb.w	r0, [r9]
    af78:	4642      	mov	r2, r8
    af7a:	9400      	str	r4, [sp, #0]
    af7c:	2106      	movs	r1, #6
    af7e:	4628      	mov	r0, r5
    af80:	f011 fc81 	bl	1c886 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    af84:	4638      	mov	r0, r7
    af86:	210e      	movs	r1, #14
    af88:	f012 fcbc 	bl	1d904 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    af8c:	2101      	movs	r1, #1
    af8e:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    af92:	f012 fcb7 	bl	1d904 <atomic_set_bit>
	return 0;
    af96:	e755      	b.n	ae44 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    af98:	f06f 0438 	mvn.w	r4, #56	; 0x38
    af9c:	e752      	b.n	ae44 <bt_smp_start_security+0x10>
		return -EIO;
    af9e:	f06f 0404 	mvn.w	r4, #4
    afa2:	e74f      	b.n	ae44 <bt_smp_start_security+0x10>
    afa4:	200014b0 	.word	0x200014b0
    afa8:	200029ca 	.word	0x200029ca

0000afac <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
    afac:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    afae:	4b07      	ldr	r3, [pc, #28]	; (afcc <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
    afb0:	4807      	ldr	r0, [pc, #28]	; (afd0 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
    afb2:	f893 306a 	ldrb.w	r3, [r3, #106]	; 0x6a
    afb6:	f003 0306 	and.w	r3, r3, #6
    afba:	1f9a      	subs	r2, r3, #6
    afbc:	4253      	negs	r3, r2
    afbe:	4153      	adcs	r3, r2
    afc0:	4a04      	ldr	r2, [pc, #16]	; (afd4 <bt_smp_init+0x28>)
    afc2:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
    afc4:	f7fc fcb4 	bl	7930 <bt_pub_key_gen>
	}

	return smp_self_test();
}
    afc8:	2000      	movs	r0, #0
    afca:	bd08      	pop	{r3, pc}
    afcc:	20000000 	.word	0x20000000
    afd0:	200005b4 	.word	0x200005b4
    afd4:	200029ca 	.word	0x200029ca

0000afd8 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
    afd8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    afda:	4c11      	ldr	r4, [pc, #68]	; (b020 <bt_keys_get_addr+0x48>)
    afdc:	7823      	ldrb	r3, [r4, #0]
    afde:	4283      	cmp	r3, r0
{
    afe0:	4605      	mov	r5, r0
    afe2:	460e      	mov	r6, r1
    afe4:	4627      	mov	r7, r4
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    afe6:	d00b      	beq.n	b000 <bt_keys_get_addr+0x28>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    afe8:	2400      	movs	r4, #0
	return memcmp(a, b, sizeof(*a));
    afea:	480e      	ldr	r0, [pc, #56]	; (b024 <bt_keys_get_addr+0x4c>)
    afec:	9400      	str	r4, [sp, #0]
    afee:	2207      	movs	r2, #7
    aff0:	4669      	mov	r1, sp
    aff2:	f8cd 4003 	str.w	r4, [sp, #3]
    aff6:	f010 fd08 	bl	1ba0a <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
    affa:	b140      	cbz	r0, b00e <bt_keys_get_addr+0x36>
		return keys;
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    affc:	4620      	mov	r0, r4
    affe:	e00d      	b.n	b01c <bt_keys_get_addr+0x44>
    b000:	2207      	movs	r2, #7
    b002:	1c60      	adds	r0, r4, #1
    b004:	f010 fd01 	bl	1ba0a <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
    b008:	2800      	cmp	r0, #0
    b00a:	d1ed      	bne.n	afe8 <bt_keys_get_addr+0x10>
    b00c:	e7f6      	b.n	affc <bt_keys_get_addr+0x24>
	memcpy(dst, src, sizeof(*dst));
    b00e:	4805      	ldr	r0, [pc, #20]	; (b024 <bt_keys_get_addr+0x4c>)
		keys->id = id;
    b010:	703d      	strb	r5, [r7, #0]
    b012:	2207      	movs	r2, #7
    b014:	4631      	mov	r1, r6
    b016:	f010 fd08 	bl	1ba2a <memcpy>
		return keys;
    b01a:	4801      	ldr	r0, [pc, #4]	; (b020 <bt_keys_get_addr+0x48>)
}
    b01c:	b003      	add	sp, #12
    b01e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b020:	20001528 	.word	0x20001528
    b024:	20001529 	.word	0x20001529

0000b028 <bt_keys_foreach>:
	}
}

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
    b028:	460b      	mov	r3, r1
    b02a:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
    b02c:	4a04      	ldr	r2, [pc, #16]	; (b040 <bt_keys_foreach+0x18>)
{
    b02e:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
    b030:	89d4      	ldrh	r4, [r2, #14]
    b032:	4204      	tst	r4, r0
    b034:	d002      	beq.n	b03c <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
    b036:	bc10      	pop	{r4}
			func(&key_pool[i], data);
    b038:	4610      	mov	r0, r2
    b03a:	4718      	bx	r3
}
    b03c:	bc10      	pop	{r4}
    b03e:	4770      	bx	lr
    b040:	20001528 	.word	0x20001528

0000b044 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
    b044:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
    b046:	4903      	ldr	r1, [pc, #12]	; (b054 <keys_commit+0x10>)
    b048:	2200      	movs	r2, #0
    b04a:	2002      	movs	r0, #2
    b04c:	f7ff ffec 	bl	b028 <bt_keys_foreach>
	}

	return 0;
}
    b050:	2000      	movs	r0, #0
    b052:	bd08      	pop	{r3, pc}
    b054:	0001e439 	.word	0x0001e439

0000b058 <bt_keys_find>:
{
    b058:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    b05a:	4c09      	ldr	r4, [pc, #36]	; (b080 <bt_keys_find+0x28>)
{
    b05c:	460b      	mov	r3, r1
    b05e:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
    b060:	89e2      	ldrh	r2, [r4, #14]
    b062:	4202      	tst	r2, r0
    b064:	d007      	beq.n	b076 <bt_keys_find+0x1e>
    b066:	7822      	ldrb	r2, [r4, #0]
    b068:	429a      	cmp	r2, r3
    b06a:	d104      	bne.n	b076 <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
    b06c:	2207      	movs	r2, #7
    b06e:	1c60      	adds	r0, r4, #1
    b070:	f010 fccb 	bl	1ba0a <memcmp>
    b074:	b108      	cbz	r0, b07a <bt_keys_find+0x22>
	return NULL;
    b076:	2000      	movs	r0, #0
}
    b078:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b07a:	4620      	mov	r0, r4
    b07c:	e7fc      	b.n	b078 <bt_keys_find+0x20>
    b07e:	bf00      	nop
    b080:	20001528 	.word	0x20001528

0000b084 <bt_keys_find_irk>:
{
    b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
int bt_addr_le_create_nrpa(bt_addr_le_t *addr);
int bt_addr_le_create_static(bt_addr_le_t *addr);

static inline bool bt_addr_le_is_rpa(const bt_addr_le_t *addr)
{
	if (addr->type != BT_ADDR_LE_RANDOM) {
    b086:	780b      	ldrb	r3, [r1, #0]
    b088:	2b01      	cmp	r3, #1
    b08a:	4607      	mov	r7, r0
    b08c:	460c      	mov	r4, r1
    b08e:	d001      	beq.n	b094 <bt_keys_find_irk+0x10>
		return NULL;
    b090:	2000      	movs	r0, #0
}
    b092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if (!bt_addr_le_is_rpa(addr)) {
    b094:	798b      	ldrb	r3, [r1, #6]
    b096:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    b09a:	2b40      	cmp	r3, #64	; 0x40
    b09c:	d1f8      	bne.n	b090 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b09e:	4d13      	ldr	r5, [pc, #76]	; (b0ec <bt_keys_find_irk+0x68>)
    b0a0:	89eb      	ldrh	r3, [r5, #14]
    b0a2:	f013 0f02 	tst.w	r3, #2
    b0a6:	462e      	mov	r6, r5
    b0a8:	d0f2      	beq.n	b090 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
    b0aa:	7833      	ldrb	r3, [r6, #0]
    b0ac:	42bb      	cmp	r3, r7
    b0ae:	d10b      	bne.n	b0c8 <bt_keys_find_irk+0x44>
	return memcmp(a, b, sizeof(*a));
    b0b0:	2206      	movs	r2, #6
    b0b2:	f106 013a 	add.w	r1, r6, #58	; 0x3a
    b0b6:	1c60      	adds	r0, r4, #1
    b0b8:	f010 fca7 	bl	1ba0a <memcmp>
    b0bc:	b908      	cbnz	r0, b0c2 <bt_keys_find_irk+0x3e>
			return &key_pool[i];
    b0be:	4628      	mov	r0, r5
    b0c0:	e7e7      	b.n	b092 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    b0c2:	89f3      	ldrh	r3, [r6, #14]
    b0c4:	079b      	lsls	r3, r3, #30
    b0c6:	d5e3      	bpl.n	b090 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
    b0c8:	7833      	ldrb	r3, [r6, #0]
    b0ca:	42bb      	cmp	r3, r7
    b0cc:	d1e0      	bne.n	b090 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    b0ce:	3401      	adds	r4, #1
    b0d0:	4807      	ldr	r0, [pc, #28]	; (b0f0 <bt_keys_find_irk+0x6c>)
    b0d2:	4621      	mov	r1, r4
    b0d4:	f010 fd23 	bl	1bb1e <bt_rpa_irk_matches>
    b0d8:	2800      	cmp	r0, #0
    b0da:	d0d9      	beq.n	b090 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
    b0dc:	4805      	ldr	r0, [pc, #20]	; (b0f4 <bt_keys_find_irk+0x70>)
    b0de:	2206      	movs	r2, #6
    b0e0:	4621      	mov	r1, r4
    b0e2:	f010 fca2 	bl	1ba2a <memcpy>
			return &key_pool[i];
    b0e6:	4801      	ldr	r0, [pc, #4]	; (b0ec <bt_keys_find_irk+0x68>)
}
    b0e8:	e7d3      	b.n	b092 <bt_keys_find_irk+0xe>
    b0ea:	bf00      	nop
    b0ec:	20001528 	.word	0x20001528
    b0f0:	20001552 	.word	0x20001552
    b0f4:	20001562 	.word	0x20001562

0000b0f8 <bt_keys_find_addr>:
{
    b0f8:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
    b0fa:	4c06      	ldr	r4, [pc, #24]	; (b114 <bt_keys_find_addr+0x1c>)
    b0fc:	7823      	ldrb	r3, [r4, #0]
    b0fe:	4283      	cmp	r3, r0
    b100:	d104      	bne.n	b10c <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
    b102:	2207      	movs	r2, #7
    b104:	1c60      	adds	r0, r4, #1
    b106:	f010 fc80 	bl	1ba0a <memcmp>
    b10a:	b108      	cbz	r0, b110 <bt_keys_find_addr+0x18>
	return NULL;
    b10c:	2000      	movs	r0, #0
}
    b10e:	bd10      	pop	{r4, pc}
			return &key_pool[i];
    b110:	4620      	mov	r0, r4
    b112:	e7fc      	b.n	b10e <bt_keys_find_addr+0x16>
    b114:	20001528 	.word	0x20001528

0000b118 <bt_keys_clear>:
{
    b118:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
    b11a:	7a03      	ldrb	r3, [r0, #8]
    b11c:	075b      	lsls	r3, r3, #29
{
    b11e:	b08c      	sub	sp, #48	; 0x30
    b120:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
    b122:	d501      	bpl.n	b128 <bt_keys_clear+0x10>
		bt_id_del(keys);
    b124:	f7fb fd9e 	bl	6c64 <bt_id_del>
		if (keys->id) {
    b128:	4625      	mov	r5, r4
    b12a:	f815 2b01 	ldrb.w	r2, [r5], #1
    b12e:	b1aa      	cbz	r2, b15c <bt_keys_clear+0x44>
			u8_to_dec(id, sizeof(id), keys->id);
    b130:	ae02      	add	r6, sp, #8
    b132:	2104      	movs	r1, #4
    b134:	4630      	mov	r0, r6
    b136:	f00e fda9 	bl	19c8c <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
    b13a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
    b13c:	462b      	mov	r3, r5
    b13e:	4a08      	ldr	r2, [pc, #32]	; (b160 <bt_keys_clear+0x48>)
    b140:	2124      	movs	r1, #36	; 0x24
    b142:	a803      	add	r0, sp, #12
    b144:	f7fa fe70 	bl	5e28 <bt_settings_encode_key>
		settings_delete(key);
    b148:	a803      	add	r0, sp, #12
    b14a:	f00f fa07 	bl	1a55c <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
    b14e:	2284      	movs	r2, #132	; 0x84
    b150:	2100      	movs	r1, #0
    b152:	4620      	mov	r0, r4
    b154:	f010 fc94 	bl	1ba80 <memset>
}
    b158:	b00c      	add	sp, #48	; 0x30
    b15a:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "keys",
    b15c:	9200      	str	r2, [sp, #0]
    b15e:	e7ed      	b.n	b13c <bt_keys_clear+0x24>
    b160:	00020dc8 	.word	0x00020dc8

0000b164 <bt_keys_store>:
{
    b164:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
    b166:	4605      	mov	r5, r0
{
    b168:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
    b16a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    b16e:	4604      	mov	r4, r0
	if (keys->id) {
    b170:	b19a      	cbz	r2, b19a <bt_keys_store+0x36>
		u8_to_dec(id, sizeof(id), keys->id);
    b172:	ae02      	add	r6, sp, #8
    b174:	2104      	movs	r1, #4
    b176:	4630      	mov	r0, r6
    b178:	f00e fd88 	bl	19c8c <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    b17c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    b17e:	462b      	mov	r3, r5
    b180:	a803      	add	r0, sp, #12
    b182:	4a07      	ldr	r2, [pc, #28]	; (b1a0 <bt_keys_store+0x3c>)
    b184:	2124      	movs	r1, #36	; 0x24
    b186:	f7fa fe4f 	bl	5e28 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
    b18a:	2278      	movs	r2, #120	; 0x78
    b18c:	f104 010c 	add.w	r1, r4, #12
    b190:	a803      	add	r0, sp, #12
    b192:	f7f9 fc01 	bl	4998 <settings_save_one>
}
    b196:	b00c      	add	sp, #48	; 0x30
    b198:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
    b19a:	9200      	str	r2, [sp, #0]
    b19c:	e7ef      	b.n	b17e <bt_keys_store+0x1a>
    b19e:	bf00      	nop
    b1a0:	00020dc8 	.word	0x00020dc8

0000b1a4 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
    b1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b1a8:	4614      	mov	r4, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b1aa:	1dc2      	adds	r2, r0, #7
    b1ac:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b1b0:	1e67      	subs	r7, r4, #1
    b1b2:	b2bf      	uxth	r7, r7
	*mem_head = mem_pool;
    b1b4:	6018      	str	r0, [r3, #0]
{
    b1b6:	b082      	sub	sp, #8
    b1b8:	4605      	mov	r5, r0
    b1ba:	460e      	mov	r6, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b1bc:	fb01 0007 	mla	r0, r1, r7, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    b1c0:	8014      	strh	r4, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    b1c2:	2100      	movs	r1, #0
    b1c4:	2204      	movs	r2, #4
    b1c6:	f010 fc5b 	bl	1ba80 <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
    b1ca:	b1b7      	cbz	r7, b1fa <mem_init+0x56>
    b1cc:	3c02      	subs	r4, #2
    b1ce:	b2a4      	uxth	r4, r4
    b1d0:	fb04 6306 	mla	r3, r4, r6, r6
    b1d4:	fb04 f706 	mul.w	r7, r4, r6
    b1d8:	441d      	add	r5, r3
    b1da:	1aff      	subs	r7, r7, r3
    b1dc:	f64f 78ff 	movw	r8, #65535	; 0xffff
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    b1e0:	2204      	movs	r2, #4
	while (mem_count--) {
    b1e2:	3c01      	subs	r4, #1
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    b1e4:	19e8      	adds	r0, r5, r7
    b1e6:	eb0d 0102 	add.w	r1, sp, r2
	while (mem_count--) {
    b1ea:	b2a4      	uxth	r4, r4
		next = (uint32_t)((uint8_t *) mem_pool +
    b1ec:	9501      	str	r5, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
    b1ee:	f010 fc1c 	bl	1ba2a <memcpy>
	while (mem_count--) {
    b1f2:	4544      	cmp	r4, r8
    b1f4:	eba5 0506 	sub.w	r5, r5, r6
    b1f8:	d1f2      	bne.n	b1e0 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
    b1fa:	b002      	add	sp, #8
    b1fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0000b200 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    b200:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
    b202:	6805      	ldr	r5, [r0, #0]
{
    b204:	b082      	sub	sp, #8
	if (*mem_head) {
    b206:	b195      	cbz	r5, b22e <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b208:	1deb      	adds	r3, r5, #7
    b20a:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    b20e:	2204      	movs	r2, #4
    b210:	4604      	mov	r4, r0
    b212:	4629      	mov	r1, r5
    b214:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b218:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
    b21a:	f010 fc06 	bl	1ba2a <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    b21e:	9b01      	ldr	r3, [sp, #4]
    b220:	b123      	cbz	r3, b22c <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b222:	1dda      	adds	r2, r3, #7
    b224:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
    b228:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
    b22a:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
    b22c:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
    b22e:	4628      	mov	r0, r5
    b230:	b002      	add	sp, #8
    b232:	bd70      	pop	{r4, r5, r6, pc}

0000b234 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    b234:	680b      	ldr	r3, [r1, #0]
{
    b236:	b570      	push	{r4, r5, r6, lr}
    b238:	460c      	mov	r4, r1
    b23a:	4605      	mov	r5, r0
	if (*mem_head) {
    b23c:	b183      	cbz	r3, b260 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
    b23e:	3307      	adds	r3, #7
    b240:	f023 0303 	bic.w	r3, r3, #3
    b244:	881e      	ldrh	r6, [r3, #0]
    b246:	3601      	adds	r6, #1
    b248:	b2b6      	uxth	r6, r6
					       sizeof(mem_head)));
	}
	free_count++;

	memcpy(mem, mem_head, sizeof(mem));
    b24a:	2204      	movs	r2, #4
    b24c:	4621      	mov	r1, r4
    b24e:	4628      	mov	r0, r5
    b250:	f010 fbeb 	bl	1ba2a <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
    b254:	1deb      	adds	r3, r5, #7
    b256:	f023 0303 	bic.w	r3, r3, #3
    b25a:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
    b25c:	6025      	str	r5, [r4, #0]
}
    b25e:	bd70      	pop	{r4, r5, r6, pc}
    b260:	2601      	movs	r6, #1
    b262:	e7f2      	b.n	b24a <mem_release+0x16>

0000b264 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
    b264:	fb02 0001 	mla	r0, r2, r1, r0
    b268:	4770      	bx	lr
    b26a:	bf00      	nop

0000b26c <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
    b26c:	1a40      	subs	r0, r0, r1
    b26e:	b280      	uxth	r0, r0
}
    b270:	fbb0 f0f2 	udiv	r0, r0, r2
    b274:	4770      	bx	lr
    b276:	bf00      	nop

0000b278 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
    b278:	1e53      	subs	r3, r2, #1
	src += len;
    b27a:	4411      	add	r1, r2
	while (len--) {
    b27c:	b29b      	uxth	r3, r3
    b27e:	b142      	cbz	r2, b292 <mem_rcopy+0x1a>
    b280:	43db      	mvns	r3, r3
    b282:	18ca      	adds	r2, r1, r3
    b284:	3801      	subs	r0, #1
		*dst++ = *--src;
    b286:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
    b28a:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
    b28e:	4291      	cmp	r1, r2
    b290:	d1f9      	bne.n	b286 <mem_rcopy+0xe>
	}
}
    b292:	4770      	bx	lr

0000b294 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
    b294:	4401      	add	r1, r0
    b296:	e002      	b.n	b29e <mem_nz+0xa>
		if (*src++) {
    b298:	f810 3b01 	ldrb.w	r3, [r0], #1
    b29c:	b91b      	cbnz	r3, b2a6 <mem_nz+0x12>
	while (len--) {
    b29e:	4288      	cmp	r0, r1
    b2a0:	d1fa      	bne.n	b298 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
    b2a2:	2000      	movs	r0, #0
    b2a4:	4770      	bx	lr
			return 1;
    b2a6:	2001      	movs	r0, #1
}
    b2a8:	4770      	bx	lr
    b2aa:	bf00      	nop

0000b2ac <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
    b2ac:	6010      	str	r0, [r2, #0]
    b2ae:	6008      	str	r0, [r1, #0]

	return link;
}
    b2b0:	4770      	bx	lr
    b2b2:	bf00      	nop

0000b2b4 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
    b2b4:	680a      	ldr	r2, [r1, #0]
{
    b2b6:	4603      	mov	r3, r0
	if (*head != *tail) {
    b2b8:	6800      	ldr	r0, [r0, #0]
    b2ba:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
    b2bc:	bf05      	ittet	eq
    b2be:	2200      	moveq	r2, #0
    b2c0:	600a      	streq	r2, [r1, #0]
		return NULL;
    b2c2:	2000      	movne	r0, #0
	*head = *tail = NULL;
    b2c4:	601a      	streq	r2, [r3, #0]

	return old_head;
}
    b2c6:	4770      	bx	lr

0000b2c8 <memq_enqueue>:
 * @param mem[in]      The memory payload to be enqueued. Pointed to by old tail
 * @param tail[in,out] Tail of queue. Will be updated to point to link
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
    b2c8:	b410      	push	{r4}
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
    b2ca:	6814      	ldr	r4, [r2, #0]
    b2cc:	6020      	str	r0, [r4, #0]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
    b2ce:	6814      	ldr	r4, [r2, #0]
    b2d0:	6061      	str	r1, [r4, #4]
	 * The new tail-element is not expected to point to anything sensible
	 */
	*tail = link;

	return link;
}
    b2d2:	bc10      	pop	{r4}
	*tail = link;
    b2d4:	6010      	str	r0, [r2, #0]
}
    b2d6:	4770      	bx	lr

0000b2d8 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
    b2d8:	4288      	cmp	r0, r1
    b2da:	d003      	beq.n	b2e4 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
    b2dc:	b11a      	cbz	r2, b2e6 <memq_peek+0xe>
		*mem = head->mem;
    b2de:	6843      	ldr	r3, [r0, #4]
    b2e0:	6013      	str	r3, [r2, #0]
    b2e2:	4770      	bx	lr
		return NULL;
    b2e4:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
    b2e6:	4770      	bx	lr

0000b2e8 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
    b2e8:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    b2ea:	4283      	cmp	r3, r0
    b2ec:	d009      	beq.n	b302 <memq_dequeue+0x1a>
	if (mem) {
    b2ee:	b12a      	cbz	r2, b2fc <memq_dequeue+0x14>
		*mem = head->mem;
    b2f0:	6858      	ldr	r0, [r3, #4]
    b2f2:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
    b2f4:	681a      	ldr	r2, [r3, #0]
    b2f6:	600a      	str	r2, [r1, #0]

	return old_head;
}
    b2f8:	4618      	mov	r0, r3
    b2fa:	4770      	bx	lr
	if (old_head == NULL) {
    b2fc:	2b00      	cmp	r3, #0
    b2fe:	d1f9      	bne.n	b2f4 <memq_dequeue+0xc>
    b300:	e7fa      	b.n	b2f8 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
    b302:	2300      	movs	r3, #0
    b304:	e7f8      	b.n	b2f8 <memq_dequeue+0x10>
    b306:	bf00      	nop

0000b308 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
    b308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b30c:	f8df 8034 	ldr.w	r8, [pc, #52]	; b344 <mayfly_init+0x3c>
    b310:	4e0b      	ldr	r6, [pc, #44]	; (b340 <mayfly_init+0x38>)
    b312:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
    b314:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
    b318:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
    b31a:	1d22      	adds	r2, r4, #4
    b31c:	4621      	mov	r1, r4
    b31e:	4628      	mov	r0, r5
    b320:	3c0c      	subs	r4, #12
    b322:	f7ff ffc3 	bl	b2ac <memq_init>
		while (caller_id--) {
    b326:	42b4      	cmp	r4, r6
    b328:	f1a5 0508 	sub.w	r5, r5, #8
    b32c:	d1f5      	bne.n	b31a <mayfly_init+0x12>
	while (callee_id--) {
    b32e:	3f04      	subs	r7, #4
    b330:	1d3b      	adds	r3, r7, #4
    b332:	f1a8 0820 	sub.w	r8, r8, #32
    b336:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
    b33a:	d1eb      	bne.n	b314 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    b33c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b340:	200016b4 	.word	0x200016b4
    b344:	20001624 	.word	0x20001624

0000b348 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
    b348:	b430      	push	{r4, r5}
    b34a:	4603      	mov	r3, r0
    b34c:	460c      	mov	r4, r1
	if (enable) {
    b34e:	b19a      	cbz	r2, b378 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
    b350:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    b354:	0108      	lsls	r0, r1, #4
    b356:	4d14      	ldr	r5, [pc, #80]	; (b3a8 <mayfly_enable+0x60>)
    b358:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    b35c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
    b360:	4429      	add	r1, r5
    b362:	7a48      	ldrb	r0, [r1, #9]
    b364:	7a0d      	ldrb	r5, [r1, #8]
    b366:	42a8      	cmp	r0, r5
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
    b368:	bf04      	itt	eq
    b36a:	3001      	addeq	r0, #1
    b36c:	7208      	strbeq	r0, [r1, #8]
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    b36e:	4621      	mov	r1, r4
    b370:	4618      	mov	r0, r3

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
    b372:	bc30      	pop	{r4, r5}
		mayfly_enable_cb(caller_id, callee_id, enable);
    b374:	f00b baa2 	b.w	168bc <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
    b378:	eb01 0241 	add.w	r2, r1, r1, lsl #1
    b37c:	4d0a      	ldr	r5, [pc, #40]	; (b3a8 <mayfly_enable+0x60>)
    b37e:	0112      	lsls	r2, r2, #4
    b380:	eb00 0340 	add.w	r3, r0, r0, lsl #1
    b384:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b388:	442b      	add	r3, r5
    b38a:	7a9d      	ldrb	r5, [r3, #10]
    b38c:	7ada      	ldrb	r2, [r3, #11]
    b38e:	42aa      	cmp	r2, r5
    b390:	d001      	beq.n	b396 <mayfly_enable+0x4e>
}
    b392:	bc30      	pop	{r4, r5}
    b394:	4770      	bx	lr
			mfp[callee_id] = 1U;
    b396:	4d05      	ldr	r5, [pc, #20]	; (b3ac <mayfly_enable+0x64>)
			mft[callee_id][caller_id].disable_req++;
    b398:	3201      	adds	r2, #1
    b39a:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
    b39c:	2301      	movs	r3, #1
    b39e:	546b      	strb	r3, [r5, r1]
}
    b3a0:	bc30      	pop	{r4, r5}
			mayfly_pend(caller_id, callee_id);
    b3a2:	f00b bae9 	b.w	16978 <mayfly_pend>
    b3a6:	bf00      	nop
    b3a8:	20001630 	.word	0x20001630
    b3ac:	2000162c 	.word	0x2000162c

0000b3b0 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
    b3b0:	b570      	push	{r4, r5, r6, lr}
    b3b2:	461c      	mov	r4, r3
    b3b4:	4606      	mov	r6, r0
    b3b6:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    b3b8:	b322      	cbz	r2, b404 <mayfly_enqueue+0x54>
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    b3ba:	7863      	ldrb	r3, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    b3bc:	7822      	ldrb	r2, [r4, #0]
    b3be:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b3c0:	f012 0203 	ands.w	r2, r2, #3
    b3c4:	d005      	beq.n	b3d2 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
    b3c6:	2a01      	cmp	r2, #1
    b3c8:	d040      	beq.n	b44c <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
    b3ca:	3301      	adds	r3, #1
    b3cc:	b2db      	uxtb	r3, r3
    b3ce:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
    b3d0:	e00f      	b.n	b3f2 <mayfly_enqueue+0x42>
		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b3d2:	2230      	movs	r2, #48	; 0x30
    b3d4:	2104      	movs	r1, #4
    b3d6:	fb12 1105 	smlabb	r1, r2, r5, r1
    b3da:	220c      	movs	r2, #12
    b3dc:	fb12 1206 	smlabb	r2, r2, r6, r1
	m->_req = ack + 1;
    b3e0:	3301      	adds	r3, #1
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b3e2:	491b      	ldr	r1, [pc, #108]	; (b450 <mayfly_enqueue+0xa0>)
    b3e4:	6860      	ldr	r0, [r4, #4]
	m->_req = ack + 1;
    b3e6:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b3e8:	440a      	add	r2, r1
	m->_req = ack + 1;
    b3ea:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
    b3ec:	4621      	mov	r1, r4
    b3ee:	f7ff ff6b 	bl	b2c8 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
    b3f2:	4b18      	ldr	r3, [pc, #96]	; (b454 <mayfly_enqueue+0xa4>)

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    b3f4:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
    b3f6:	2201      	movs	r2, #1
	mayfly_pend(caller_id, callee_id);
    b3f8:	4629      	mov	r1, r5
	mfp[callee_id] = 1U;
    b3fa:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
    b3fc:	f00b fabc 	bl	16978 <mayfly_pend>

	return 0;
    b400:	2000      	movs	r0, #0
}
    b402:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b404:	f00b fa9a 	bl	1693c <mayfly_prio_is_equal>
    b408:	2800      	cmp	r0, #0
    b40a:	d0d6      	beq.n	b3ba <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
    b40c:	4629      	mov	r1, r5
    b40e:	4630      	mov	r0, r6
    b410:	f00b fa74 	bl	168fc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    b414:	2800      	cmp	r0, #0
    b416:	d0d0      	beq.n	b3ba <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
    b418:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    b41c:	011a      	lsls	r2, r3, #4
    b41e:	490c      	ldr	r1, [pc, #48]	; (b450 <mayfly_enqueue+0xa0>)
    b420:	eb06 0346 	add.w	r3, r6, r6, lsl #1
    b424:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b428:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
    b42a:	7a9a      	ldrb	r2, [r3, #10]
    b42c:	7adb      	ldrb	r3, [r3, #11]
    b42e:	429a      	cmp	r2, r3
    b430:	d1c3      	bne.n	b3ba <mayfly_enqueue+0xa>
	ack = m->_ack;
    b432:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
    b434:	7822      	ldrb	r2, [r4, #0]
    b436:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
    b438:	0792      	lsls	r2, r2, #30
    b43a:	d002      	beq.n	b442 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
    b43c:	3302      	adds	r3, #2
    b43e:	b2db      	uxtb	r3, r3
    b440:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
    b442:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    b446:	4798      	blx	r3
		return 0;
    b448:	2000      	movs	r0, #0
}
    b44a:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
    b44c:	4610      	mov	r0, r2
}
    b44e:	bd70      	pop	{r4, r5, r6, pc}
    b450:	20001630 	.word	0x20001630
    b454:	2000162c 	.word	0x2000162c

0000b458 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
    b458:	494c      	ldr	r1, [pc, #304]	; (b58c <mayfly_run+0x134>)
    b45a:	5c0b      	ldrb	r3, [r1, r0]
    b45c:	2b00      	cmp	r3, #0
    b45e:	f000 8094 	beq.w	b58a <mayfly_run+0x132>
{
    b462:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b466:	4b4a      	ldr	r3, [pc, #296]	; (b590 <mayfly_run+0x138>)
    b468:	f04f 0b3c 	mov.w	fp, #60	; 0x3c
{
    b46c:	b087      	sub	sp, #28
		return;
	}
	mfp[callee_id] = 0U;
    b46e:	2200      	movs	r2, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b470:	fb0b 3b00 	mla	fp, fp, r0, r3
	mfp[callee_id] = 0U;
    b474:	540a      	strb	r2, [r1, r0]

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
    b476:	eb00 0740 	add.w	r7, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b47a:	f10b 0104 	add.w	r1, fp, #4
	uint8_t enable = 0U;
    b47e:	9203      	str	r2, [sp, #12]
    b480:	eb03 1707 	add.w	r7, r3, r7, lsl #4
	uint8_t disable = 0U;
    b484:	9201      	str	r2, [sp, #4]
	while (caller_id--) {
    b486:	f04f 0903 	mov.w	r9, #3
    b48a:	4688      	mov	r8, r1
    b48c:	9002      	str	r0, [sp, #8]
		memq_link_t *link;
		struct mayfly *m = 0;
    b48e:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
    b490:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    b494:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
    b496:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
    b498:	f7ff ff1e 	bl	b2d8 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
    b49c:	f107 0624 	add.w	r6, r7, #36	; 0x24
    b4a0:	4683      	mov	fp, r0
    b4a2:	b388      	cbz	r0, b508 <mayfly_run+0xb0>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
    b4a4:	9c05      	ldr	r4, [sp, #20]
    b4a6:	7825      	ldrb	r5, [r4, #0]
    b4a8:	7863      	ldrb	r3, [r4, #1]
    b4aa:	1aed      	subs	r5, r5, r3
    b4ac:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
    b4b0:	2d01      	cmp	r5, #1
    b4b2:	d106      	bne.n	b4c2 <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
    b4b4:	3b01      	subs	r3, #1
    b4b6:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
    b4b8:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
    b4bc:	4798      	blx	r3
    b4be:	9c05      	ldr	r4, [sp, #20]
    b4c0:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
    b4c2:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
    b4c4:	1ac3      	subs	r3, r0, r3
    b4c6:	f003 0303 	and.w	r3, r3, #3
    b4ca:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
    b4cc:	f04f 0200 	mov.w	r2, #0
    b4d0:	4631      	mov	r1, r6
	req = m->_req;
    b4d2:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
    b4d6:	d00d      	beq.n	b4f4 <mayfly_run+0x9c>
		memq_dequeue(mft[callee_id][caller_id].tail,
    b4d8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
    b4da:	f7ff ff05 	bl	b2e8 <memq_dequeue>
		ack = m->_ack;
    b4de:	7862      	ldrb	r2, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    b4e0:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
    b4e2:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
    b4e6:	1a9b      	subs	r3, r3, r2
    b4e8:	f003 0303 	and.w	r3, r3, #3
    b4ec:	2b01      	cmp	r3, #1
		m->_ack = req;
    b4ee:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
    b4f2:	d043      	beq.n	b57c <mayfly_run+0x124>

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
    b4f4:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
    b4f8:	aa05      	add	r2, sp, #20
    b4fa:	f7ff feed 	bl	b2d8 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
    b4fe:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
    b500:	4683      	mov	fp, r0
			if (state == 1U) {
    b502:	d029      	beq.n	b558 <mayfly_run+0x100>
		while (link) {
    b504:	2800      	cmp	r0, #0
    b506:	d1cd      	bne.n	b4a4 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
    b508:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
    b50c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
    b510:	429a      	cmp	r2, r3
    b512:	d003      	beq.n	b51c <mayfly_run+0xc4>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
    b514:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
    b518:	2301      	movs	r3, #1
    b51a:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
    b51c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
    b520:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
    b524:	429a      	cmp	r2, r3
    b526:	d003      	beq.n	b530 <mayfly_run+0xd8>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
    b528:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
    b52c:	2301      	movs	r3, #1
    b52e:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
    b530:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
    b534:	fa5f f989 	uxtb.w	r9, r9
    b538:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    b53c:	f1a7 070c 	sub.w	r7, r7, #12
    b540:	d1a5      	bne.n	b48e <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
    b542:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
    b546:	b1b3      	cbz	r3, b576 <mayfly_run+0x11e>
    b548:	9b03      	ldr	r3, [sp, #12]
    b54a:	b9a3      	cbnz	r3, b576 <mayfly_run+0x11e>
		mayfly_enable_cb(callee_id, callee_id, 0);
    b54c:	461a      	mov	r2, r3
    b54e:	4651      	mov	r1, sl
    b550:	4650      	mov	r0, sl
    b552:	f00b f9b3 	bl	168bc <mayfly_enable_cb>
    b556:	e00e      	b.n	b576 <mayfly_run+0x11e>
				if (caller_id || link) {
    b558:	f1b9 0f00 	cmp.w	r9, #0
    b55c:	d101      	bne.n	b562 <mayfly_run+0x10a>
    b55e:	2800      	cmp	r0, #0
    b560:	d0d2      	beq.n	b508 <mayfly_run+0xb0>
    b562:	f8dd a008 	ldr.w	sl, [sp, #8]
					mfp[callee_id] = 1U;
    b566:	4a09      	ldr	r2, [pc, #36]	; (b58c <mayfly_run+0x134>)
    b568:	2301      	movs	r3, #1
					mayfly_pend(callee_id, callee_id);
    b56a:	4651      	mov	r1, sl
    b56c:	4650      	mov	r0, sl
					mfp[callee_id] = 1U;
    b56e:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
    b572:	f00b fa01 	bl	16978 <mayfly_pend>
	}
}
    b576:	b007      	add	sp, #28
    b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			m->_ack = ack;
    b57c:	7062      	strb	r2, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
    b57e:	4621      	mov	r1, r4
    b580:	4658      	mov	r0, fp
    b582:	4642      	mov	r2, r8
    b584:	f7ff fea0 	bl	b2c8 <memq_enqueue>
    b588:	e7b4      	b.n	b4f4 <mayfly_run+0x9c>
    b58a:	4770      	bx	lr
    b58c:	2000162c 	.word	0x2000162c
    b590:	20001630 	.word	0x20001630

0000b594 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
    b594:	b1a1      	cbz	r1, b5c0 <util_ones_count_get+0x2c>
    b596:	1e4b      	subs	r3, r1, #1
    b598:	b2db      	uxtb	r3, r3
{
    b59a:	b410      	push	{r4}
    b59c:	1e41      	subs	r1, r0, #1
    b59e:	18c4      	adds	r4, r0, r3
	uint8_t one_count = 0U;
    b5a0:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
    b5a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
    b5a6:	b13b      	cbz	r3, b5b8 <util_ones_count_get+0x24>
			bite &= (bite - 1);
    b5a8:	b25b      	sxtb	r3, r3
    b5aa:	1e5a      	subs	r2, r3, #1
    b5ac:	4013      	ands	r3, r2
			one_count++;
    b5ae:	3001      	adds	r0, #1
		while (bite) {
    b5b0:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
    b5b4:	b2c0      	uxtb	r0, r0
		while (bite) {
    b5b6:	d1f7      	bne.n	b5a8 <util_ones_count_get+0x14>
	while (octets_len--) {
    b5b8:	42a1      	cmp	r1, r4
    b5ba:	d1f2      	bne.n	b5a2 <util_ones_count_get+0xe>
		}
		octets++;
	}

	return one_count;
}
    b5bc:	bc10      	pop	{r4}
    b5be:	4770      	bx	lr
	uint8_t one_count = 0U;
    b5c0:	4608      	mov	r0, r1
}
    b5c2:	4770      	bx	lr

0000b5c4 <ticker_worker>:
 *
 * @param param Pointer to ticker instance
 *
 */
void ticker_worker(void *param)
{
    b5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t ticks_expired;
	uint8_t ticker_id_head;

	/* Defer worker if job running */
	instance->worker_trigger = 1U;
	if (instance->job_guard) {
    b5c8:	7f82      	ldrb	r2, [r0, #30]
{
    b5ca:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
    b5cc:	2301      	movs	r3, #1
	if (instance->job_guard) {
    b5ce:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
    b5d0:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
    b5d2:	2a00      	cmp	r2, #0
    b5d4:	d15d      	bne.n	b692 <ticker_worker+0xce>
		return;
	}

	/* If no tickers queued (active), do nothing */
	if (instance->ticker_id_head == TICKER_NULL) {
    b5d6:	7f43      	ldrb	r3, [r0, #29]
    b5d8:	2bff      	cmp	r3, #255	; 0xff
    b5da:	4681      	mov	r9, r0
    b5dc:	d058      	beq.n	b690 <ticker_worker+0xcc>
		instance->worker_trigger = 0U;
		return;
	}

	/* Get ticks elapsed since last job execution */
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
    b5de:	f00a fbb5 	bl	15d4c <cntr_cnt_get>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b5e2:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b5e6:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
    b5ea:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b5ee:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b5f0:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    b5f2:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
    b5f6:	f000 8140 	beq.w	b87a <ticker_worker+0x2b6>
		if (instance->ticks_slot_previous > ticks_elapsed) {
    b5fa:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
    b5fe:	42b3      	cmp	r3, r6
    b600:	bf94      	ite	ls
    b602:	2300      	movls	r3, #0
    b604:	2301      	movhi	r3, #1
    b606:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
    b608:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
    b60c:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
    b610:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
    b614:	d067      	beq.n	b6e6 <ticker_worker+0x122>
			must_expire_skip = 1U;
    b616:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
    b61a:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
    b61e:	eb07 140b 	add.w	r4, r7, fp, lsl #4
    b622:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    b626:	68a2      	ldr	r2, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    b628:	42b2      	cmp	r2, r6
    b62a:	d85a      	bhi.n	b6e2 <ticker_worker+0x11e>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b62c:	f894 a002 	ldrb.w	sl, [r4, #2]
    b630:	7863      	ldrb	r3, [r4, #1]
		ticker_id_head = ticker->next;
    b632:	f817 b00b 	ldrb.w	fp, [r7, fp]
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b636:	eba3 030a 	sub.w	r3, r3, sl
    b63a:	b2db      	uxtb	r3, r3
    b63c:	2b01      	cmp	r3, #1
		ticks_elapsed -= ticks_to_expire;
    b63e:	eba6 0602 	sub.w	r6, r6, r2
		ticks_expired += ticks_to_expire;
    b642:	4490      	add	r8, r2
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
    b644:	d14a      	bne.n	b6dc <ticker_worker+0x118>
		if (ticker->ticks_slot != 0U &&
    b646:	69a0      	ldr	r0, [r4, #24]
    b648:	b368      	cbz	r0, b6a6 <ticker_worker+0xe2>
    b64a:	9b01      	ldr	r3, [sp, #4]
    b64c:	2b00      	cmp	r3, #0
    b64e:	f000 808d 	beq.w	b76c <ticker_worker+0x1a8>
    b652:	8be3      	ldrh	r3, [r4, #30]
    b654:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
    b656:	6aa3      	ldr	r3, [r4, #40]	; 0x28
			if (ext_data &&
    b658:	b13b      	cbz	r3, b66a <ticker_worker+0xa6>
    b65a:	681a      	ldr	r2, [r3, #0]
    b65c:	b11a      	cbz	r2, b666 <ticker_worker+0xa2>
			    ext_data->ticks_slot_window != 0U &&
    b65e:	7a1a      	ldrb	r2, [r3, #8]
    b660:	2a00      	cmp	r2, #0
    b662:	f000 80f6 	beq.w	b852 <ticker_worker+0x28e>
				ext_data->reschedule_state =
    b666:	2200      	movs	r2, #0
    b668:	721a      	strb	r2, [r3, #8]
			ticker->lazy_current++;
    b66a:	9a03      	ldr	r2, [sp, #12]
			if ((ticker->must_expire == 0U) ||
    b66c:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
    b670:	3201      	adds	r2, #1
    b672:	b292      	uxth	r2, r2
    b674:	83e2      	strh	r2, [r4, #30]
			if ((ticker->must_expire == 0U) ||
    b676:	2900      	cmp	r1, #0
    b678:	d030      	beq.n	b6dc <ticker_worker+0x118>
    b67a:	8ba1      	ldrh	r1, [r4, #28]
    b67c:	4291      	cmp	r1, r2
    b67e:	d22d      	bcs.n	b6dc <ticker_worker+0x118>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
    b680:	2b00      	cmp	r3, #0
    b682:	f000 80fd 	beq.w	b880 <ticker_worker+0x2bc>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
    b686:	7a1a      	ldrb	r2, [r3, #8]
    b688:	2a01      	cmp	r2, #1
    b68a:	d027      	beq.n	b6dc <ticker_worker+0x118>
			must_expire_skip = 1U;
    b68c:	2201      	movs	r2, #1
    b68e:	e00e      	b.n	b6ae <ticker_worker+0xea>
		instance->worker_trigger = 0U;
    b690:	77c2      	strb	r2, [r0, #31]
}
    b692:	b00d      	add	sp, #52	; 0x34
    b694:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b698:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
    b69c:	f8dd a020 	ldr.w	sl, [sp, #32]
    b6a0:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    b6a4:	464c      	mov	r4, r9
		if (ticker->ext_data) {
    b6a6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    b6a8:	2b00      	cmp	r3, #0
    b6aa:	d03f      	beq.n	b72c <ticker_worker+0x168>
    b6ac:	2200      	movs	r2, #0
			ticker->ext_data->ticks_drift = 0U;
    b6ae:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
    b6b0:	7219      	strb	r1, [r3, #8]
		if (ticker->timeout_func) {
    b6b2:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
    b6b4:	6059      	str	r1, [r3, #4]
		ticker->ack--;
    b6b6:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    b6ba:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    b6bc:	b175      	cbz	r5, b6dc <ticker_worker+0x118>
					   ticks_expired -
    b6be:	9902      	ldr	r1, [sp, #8]
    b6c0:	6963      	ldr	r3, [r4, #20]
    b6c2:	6948      	ldr	r0, [r1, #20]
			ticker->timeout_func(ticks_at_expire,
    b6c4:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    b6c6:	eba8 0303 	sub.w	r3, r8, r3
    b6ca:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
    b6cc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    b6d0:	2a00      	cmp	r2, #0
    b6d2:	d03a      	beq.n	b74a <ticker_worker+0x186>
    b6d4:	6923      	ldr	r3, [r4, #16]
    b6d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
    b6da:	47a8      	blx	r5
	while (ticker_id_head != TICKER_NULL) {
    b6dc:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    b6e0:	d19b      	bne.n	b61a <ticker_worker+0x56>
    b6e2:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
    b6e6:	f899 300b 	ldrb.w	r3, [r9, #11]
    b6ea:	f899 200a 	ldrb.w	r2, [r9, #10]
    b6ee:	429a      	cmp	r2, r3
    b6f0:	d10a      	bne.n	b708 <ticker_worker+0x144>
	uint8_t idx = *ticks_elapsed_index + 1;
    b6f2:	3201      	adds	r2, #1
    b6f4:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
    b6f6:	2a02      	cmp	r2, #2
    b6f8:	bf1c      	itt	ne
    b6fa:	4613      	movne	r3, r2
    b6fc:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
    b6fe:	9a04      	ldr	r2, [sp, #16]
    b700:	f889 200b 	strb.w	r2, [r9, #11]
    b704:	bf08      	it	eq
    b706:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b708:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b70c:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
    b710:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
    b714:	2200      	movs	r2, #0
    b716:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b71a:	464b      	mov	r3, r9
    b71c:	2201      	movs	r2, #1
    b71e:	2104      	movs	r1, #4
    b720:	2003      	movs	r0, #3
    b722:	46a4      	mov	ip, r4
}
    b724:	b00d      	add	sp, #52	; 0x34
    b726:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
    b72a:	4760      	bx	ip
		if (ticker->timeout_func) {
    b72c:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    b72e:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    b732:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    b734:	2d00      	cmp	r5, #0
    b736:	d0d1      	beq.n	b6dc <ticker_worker+0x118>
					   ticks_expired -
    b738:	9a02      	ldr	r2, [sp, #8]
    b73a:	6963      	ldr	r3, [r4, #20]
    b73c:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
    b73e:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    b740:	eba8 0003 	sub.w	r0, r8, r3
    b744:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    b746:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    b74a:	6923      	ldr	r3, [r4, #16]
    b74c:	8be2      	ldrh	r2, [r4, #30]
    b74e:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
    b750:	69a2      	ldr	r2, [r4, #24]
				ticker->lazy_current = 0U;
    b752:	2300      	movs	r3, #0
					slot_reserved = 1U;
    b754:	429a      	cmp	r2, r3
    b756:	9a01      	ldr	r2, [sp, #4]
				ticker->lazy_current = 0U;
    b758:	83e3      	strh	r3, [r4, #30]
					slot_reserved = 1U;
    b75a:	bf18      	it	ne
    b75c:	2201      	movne	r2, #1
	while (ticker_id_head != TICKER_NULL) {
    b75e:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
					slot_reserved = 1U;
    b762:	9201      	str	r2, [sp, #4]
				ticker->force = 0U;
    b764:	70e3      	strb	r3, [r4, #3]
	while (ticker_id_head != TICKER_NULL) {
    b766:	f47f af58 	bne.w	b61a <ticker_worker+0x56>
    b76a:	e7ba      	b.n	b6e2 <ticker_worker+0x11e>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
    b76c:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
    b770:	9305      	str	r3, [sp, #20]
    b772:	3380      	adds	r3, #128	; 0x80
    b774:	d097      	beq.n	b6a6 <ticker_worker+0xe2>
    b776:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    b77a:	d094      	beq.n	b6a6 <ticker_worker+0xe2>
		int32_t lazy_current = ticker->lazy_current;
    b77c:	8be3      	ldrh	r3, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
    b77e:	8ba2      	ldrh	r2, [r4, #28]
		int32_t lazy_current = ticker->lazy_current;
    b780:	9303      	str	r3, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
    b782:	4293      	cmp	r3, r2
			lazy_current -= ticker->lazy_periodic;
    b784:	bf28      	it	cs
    b786:	1a9b      	subcs	r3, r3, r2
				(lazy_current - ticker->priority);
    b788:	9905      	ldr	r1, [sp, #20]
		uint32_t current_age = ticker->ticks_periodic +
    b78a:	6862      	ldr	r2, [r4, #4]
		uint32_t acc_ticks_to_expire = 0U;
    b78c:	f8cd a020 	str.w	sl, [sp, #32]
				(lazy_current - ticker->priority);
    b790:	1a59      	subs	r1, r3, r1
		uint32_t current_age = ticker->ticks_periodic +
    b792:	fb03 2302 	mla	r3, r3, r2, r2
    b796:	9306      	str	r3, [sp, #24]
		uint32_t acc_ticks_to_expire = 0U;
    b798:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
    b79c:	9107      	str	r1, [sp, #28]
		uint32_t current_age = ticker->ticks_periodic +
    b79e:	465b      	mov	r3, fp
		uint32_t acc_ticks_to_expire = 0U;
    b7a0:	2500      	movs	r5, #0
    b7a2:	46a1      	mov	r9, r4
    b7a4:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
    b7a8:	9200      	str	r2, [sp, #0]
    b7aa:	e02c      	b.n	b806 <ticker_worker+0x242>
				(ticker->ticks_periodic == 0U) ||
    b7ac:	9c00      	ldr	r4, [sp, #0]
					  0U :
    b7ae:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
    b7b2:	2c00      	cmp	r4, #0
    b7b4:	d048      	beq.n	b848 <ticker_worker+0x284>
    b7b6:	9c06      	ldr	r4, [sp, #24]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    b7b8:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
    b7bc:	4544      	cmp	r4, r8
    b7be:	bf8c      	ite	hi
    b7c0:	f04f 0801 	movhi.w	r8, #1
    b7c4:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
    b7c8:	bf34      	ite	cc
    b7ca:	f04f 0a01 	movcc.w	sl, #1
    b7ce:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
    b7d2:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
    b7d4:	f892 b003 	ldrb.w	fp, [r2, #3]
    b7d8:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
    b7dc:	d30f      	bcc.n	b7fe <ticker_worker+0x23a>
    b7de:	4593      	cmp	fp, r2
    b7e0:	d843      	bhi.n	b86a <ticker_worker+0x2a6>
			    (next_force ||
    b7e2:	f11e 0f80 	cmn.w	lr, #128	; 0x80
    b7e6:	d040      	beq.n	b86a <ticker_worker+0x2a6>
			     next_is_critical ||
    b7e8:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
    b7ea:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
    b7ee:	4594      	cmp	ip, r2
    b7f0:	dd02      	ble.n	b7f8 <ticker_worker+0x234>
			     (next_has_priority && !current_is_older) ||
    b7f2:	f1b8 0f00 	cmp.w	r8, #0
    b7f6:	d038      	beq.n	b86a <ticker_worker+0x2a6>
    b7f8:	9a05      	ldr	r2, [sp, #20]
    b7fa:	4572      	cmp	r2, lr
    b7fc:	d032      	beq.n	b864 <ticker_worker+0x2a0>
			id_head = ticker_next->next;
    b7fe:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
    b800:	2bff      	cmp	r3, #255	; 0xff
    b802:	f43f af49 	beq.w	b698 <ticker_worker+0xd4>
			struct ticker_node *ticker_next = &nodes[id_head];
    b806:	b21b      	sxth	r3, r3
    b808:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    b80c:	eb07 1203 	add.w	r2, r7, r3, lsl #4
    b810:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
    b812:	f8d2 8008 	ldr.w	r8, [r2, #8]
    b816:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
    b818:	42a8      	cmp	r0, r5
    b81a:	f4ff af3d 	bcc.w	b698 <ticker_worker+0xd4>
			if (ticker_next->ticks_slot == 0U) {
    b81e:	6991      	ldr	r1, [r2, #24]
    b820:	2900      	cmp	r1, #0
    b822:	d0ec      	beq.n	b7fe <ticker_worker+0x23a>
			int32_t lazy_next = ticker_next->lazy_current;
    b824:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
    b826:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
    b828:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
    b82c:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
    b830:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
    b832:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
    b834:	bf28      	it	cs
    b836:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
    b83a:	f1ba 0f00 	cmp.w	sl, #0
    b83e:	d1b5      	bne.n	b7ac <ticker_worker+0x1e8>
				(ticker->ticks_periodic == 0U) ||
    b840:	9c00      	ldr	r4, [sp, #0]
					  0U :
    b842:	46d0      	mov	r8, sl
				(ticker->ticks_periodic == 0U) ||
    b844:	2c00      	cmp	r4, #0
    b846:	d1b6      	bne.n	b7b6 <ticker_worker+0x1f2>
					(ticker->ticks_periodic != 0U) &&
    b848:	f8dd a000 	ldr.w	sl, [sp]
				(ticker->ticks_periodic == 0U) ||
    b84c:	f04f 0801 	mov.w	r8, #1
    b850:	e7bf      	b.n	b7d2 <ticker_worker+0x20e>
			    TICKER_RESCHEDULE_STATE_NONE &&
    b852:	8ba2      	ldrh	r2, [r4, #28]
    b854:	9903      	ldr	r1, [sp, #12]
    b856:	428a      	cmp	r2, r1
    b858:	f63f af05 	bhi.w	b666 <ticker_worker+0xa2>
				ext_data->reschedule_state =
    b85c:	f04f 0201 	mov.w	r2, #1
    b860:	721a      	strb	r2, [r3, #8]
    b862:	e702      	b.n	b66a <ticker_worker+0xa6>
			     (equal_priority && next_is_older))) {
    b864:	f1ba 0f00 	cmp.w	sl, #0
    b868:	d0c9      	beq.n	b7fe <ticker_worker+0x23a>
    b86a:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
    b86e:	f8dd a020 	ldr.w	sl, [sp, #32]
    b872:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
    b876:	464c      	mov	r4, r9
    b878:	e6ed      	b.n	b656 <ticker_worker+0x92>
	uint8_t slot_reserved = 0;
    b87a:	9b04      	ldr	r3, [sp, #16]
    b87c:	9301      	str	r3, [sp, #4]
    b87e:	e6c3      	b.n	b608 <ticker_worker+0x44>
		if (ticker->timeout_func) {
    b880:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
    b882:	f10a 33ff 	add.w	r3, sl, #4294967295	; 0xffffffff
    b886:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
    b888:	2d00      	cmp	r5, #0
    b88a:	f43f af27 	beq.w	b6dc <ticker_worker+0x118>
					   ticks_expired -
    b88e:	9a02      	ldr	r2, [sp, #8]
    b890:	6963      	ldr	r3, [r4, #20]
    b892:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
    b894:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
    b896:	eba8 0003 	sub.w	r0, r8, r3
    b89a:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
    b89c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
    b8a0:	e718      	b.n	b6d4 <ticker_worker+0x110>
    b8a2:	bf00      	nop

0000b8a4 <ticker_job>:
	if (instance->worker_trigger) {
    b8a4:	7fc2      	ldrb	r2, [r0, #31]
    b8a6:	2a00      	cmp	r2, #0
    b8a8:	f040 863b 	bne.w	c522 <ticker_job+0xc7e>
{
    b8ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b8b0:	7a83      	ldrb	r3, [r0, #10]
    b8b2:	7ac1      	ldrb	r1, [r0, #11]
{
    b8b4:	b08f      	sub	sp, #60	; 0x3c
    b8b6:	4683      	mov	fp, r0
	ticks_previous = instance->ticks_current;
    b8b8:	6940      	ldr	r0, [r0, #20]
    b8ba:	9005      	str	r0, [sp, #20]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b8bc:	4299      	cmp	r1, r3
	instance->job_guard = 1U;
    b8be:	f04f 0001 	mov.w	r0, #1
    b8c2:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
    b8c6:	f000 8097 	beq.w	b9f8 <ticker_job+0x154>
	uint8_t idx = *ticks_elapsed_index + 1;
    b8ca:	4403      	add	r3, r0
    b8cc:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
    b8ce:	2b02      	cmp	r3, #2
		idx = 0U;
    b8d0:	bf08      	it	eq
    b8d2:	4613      	moveq	r3, r2
		ticks_elapsed =
    b8d4:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
    b8d8:	f88b 300a 	strb.w	r3, [fp, #10]
		ticks_elapsed =
    b8dc:	68d3      	ldr	r3, [r2, #12]
		instance->ticks_current += ticks_elapsed;
    b8de:	9a05      	ldr	r2, [sp, #20]
		ticks_elapsed =
    b8e0:	9302      	str	r3, [sp, #8]
		instance->ticks_current += ticks_elapsed;
    b8e2:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
    b8e4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b8e8:	f8cb 3014 	str.w	r3, [fp, #20]
		flag_elapsed = 1U;
    b8ec:	2301      	movs	r3, #1
    b8ee:	930d      	str	r3, [sp, #52]	; 0x34
	count_user = instance->count_user;
    b8f0:	f89b 3009 	ldrb.w	r3, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
    b8f4:	f89b 201d 	ldrb.w	r2, [fp, #29]
    b8f8:	9206      	str	r2, [sp, #24]
	node = &instance->nodes[0];
    b8fa:	f8db 2000 	ldr.w	r2, [fp]
	users = &instance->users[0];
    b8fe:	f8db 1004 	ldr.w	r1, [fp, #4]
	count_user = instance->count_user;
    b902:	9307      	str	r3, [sp, #28]
	node = &instance->nodes[0];
    b904:	9204      	str	r2, [sp, #16]
	while (count_user--) {
    b906:	461a      	mov	r2, r3
    b908:	3b01      	subs	r3, #1
	users = &instance->users[0];
    b90a:	910c      	str	r1, [sp, #48]	; 0x30
	while (count_user--) {
    b90c:	b2db      	uxtb	r3, r3
    b90e:	2a00      	cmp	r2, #0
    b910:	f000 8328 	beq.w	bf64 <ticker_job+0x6c0>
    b914:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	pending = 0U;
    b918:	2300      	movs	r3, #0
    b91a:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    b91c:	23ff      	movs	r3, #255	; 0xff
    b91e:	9301      	str	r3, [sp, #4]
    b920:	4647      	mov	r7, r8
		user_ops = &user->user_op[0];
    b922:	687b      	ldr	r3, [r7, #4]
    b924:	9307      	str	r3, [sp, #28]
		while (user->middle != user->last) {
    b926:	f897 8003 	ldrb.w	r8, [r7, #3]
    b92a:	78bb      	ldrb	r3, [r7, #2]
    b92c:	46ba      	mov	sl, r7
    b92e:	9807      	ldr	r0, [sp, #28]
					ticks_used = 0;
    b930:	4699      	mov	r9, r3
			user_op = &user_ops[user->middle];
    b932:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    b936:	eb03 0282 	add.w	r2, r3, r2, lsl #2
			middle = user->middle + 1;
    b93a:	1c59      	adds	r1, r3, #1
		while (user->middle != user->last) {
    b93c:	4543      	cmp	r3, r8
			user_op = &user_ops[user->middle];
    b93e:	eb00 0582 	add.w	r5, r0, r2, lsl #2
			middle = user->middle + 1;
    b942:	b2cb      	uxtb	r3, r1
		while (user->middle != user->last) {
    b944:	f000 8188 	beq.w	bc58 <ticker_job+0x3b4>
			if (middle == user->count_user_op) {
    b948:	f89a 1000 	ldrb.w	r1, [sl]
				middle = 0U;
    b94c:	4299      	cmp	r1, r3
    b94e:	bf08      	it	eq
    b950:	2300      	moveq	r3, #0
			user->middle = middle;
    b952:	f88a 3002 	strb.w	r3, [sl, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
    b956:	f810 1022 	ldrb.w	r1, [r0, r2, lsl #2]
    b95a:	2904      	cmp	r1, #4
    b95c:	f240 817a 	bls.w	bc54 <ticker_job+0x3b0>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    b960:	2907      	cmp	r1, #7
    b962:	f200 8088 	bhi.w	ba76 <ticker_job+0x1d2>
			ticker = &node[user_op->id];
    b966:	786a      	ldrb	r2, [r5, #1]
    b968:	9c04      	ldr	r4, [sp, #16]
    b96a:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    b96e:	eb04 1400 	add.w	r4, r4, r0, lsl #4
    b972:	0100      	lsls	r0, r0, #4
			state = (ticker->req - ticker->ack) & 0xff;
    b974:	78a7      	ldrb	r7, [r4, #2]
			ticker = &node[user_op->id];
    b976:	900a      	str	r0, [sp, #40]	; 0x28
			state = (ticker->req - ticker->ack) & 0xff;
    b978:	7860      	ldrb	r0, [r4, #1]
    b97a:	1bc0      	subs	r0, r0, r7
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    b97c:	f010 00ff 	ands.w	r0, r0, #255	; 0xff
			ticker = &node[user_op->id];
    b980:	fa0f fc82 	sxth.w	ip, r2
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
    b984:	d077      	beq.n	ba76 <ticker_job+0x1d2>
			    (state == 0U) ||
    b986:	2905      	cmp	r1, #5
    b988:	d065      	beq.n	ba56 <ticker_job+0x1b2>
			if (state == 1U) {
    b98a:	2801      	cmp	r0, #1
    b98c:	d137      	bne.n	b9fe <ticker_job+0x15a>
	previous = instance->ticker_id_head;
    b98e:	f89b e01d 	ldrb.w	lr, [fp, #29]
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b992:	f8db 3000 	ldr.w	r3, [fp]
	while (current != TICKER_NULL) {
    b996:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    b99a:	d017      	beq.n	b9cc <ticker_job+0x128>
		ticker_current = &node[current];
    b99c:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
		if (current == id) {
    b9a0:	4572      	cmp	r2, lr
		ticker_current = &node[current];
    b9a2:	eb03 1000 	add.w	r0, r3, r0, lsl #4
		if (current == id) {
    b9a6:	f000 8152 	beq.w	bc4e <ticker_job+0x3aa>
	total = 0U;
    b9aa:	2600      	movs	r6, #0
    b9ac:	e001      	b.n	b9b2 <ticker_job+0x10e>
		if (current == id) {
    b9ae:	4572      	cmp	r2, lr
    b9b0:	d070      	beq.n	ba94 <ticker_job+0x1f0>
		total += ticker_current->ticks_to_expire;
    b9b2:	46f0      	mov	r8, lr
		current = ticker_current->next;
    b9b4:	f890 e000 	ldrb.w	lr, [r0]
		total += ticker_current->ticks_to_expire;
    b9b8:	f8d0 9008 	ldr.w	r9, [r0, #8]
	while (current != TICKER_NULL) {
    b9bc:	f1be 0fff 	cmp.w	lr, #255	; 0xff
		ticker_current = &node[current];
    b9c0:	eb0e 004e 	add.w	r0, lr, lr, lsl #1
		total += ticker_current->ticks_to_expire;
    b9c4:	444e      	add	r6, r9
		ticker_current = &node[current];
    b9c6:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	while (current != TICKER_NULL) {
    b9ca:	d1f0      	bne.n	b9ae <ticker_job+0x10a>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b9cc:	2600      	movs	r6, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b9ce:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    b9d0:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    b9d2:	f000 8127 	beq.w	bc24 <ticker_job+0x380>
		ticker->req = ticker->ack;
    b9d6:	7067      	strb	r7, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
    b9d8:	f89b 301c 	ldrb.w	r3, [fp, #28]
    b9dc:	4293      	cmp	r3, r2
    b9de:	d022      	beq.n	ba26 <ticker_job+0x182>
	if (user_op->fp_op_func) {
    b9e0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    b9e2:	2000      	movs	r0, #0
    b9e4:	7028      	strb	r0, [r5, #0]
	user_op->status = status;
    b9e6:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    b9e8:	b10b      	cbz	r3, b9ee <ticker_job+0x14a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    b9ea:	6b29      	ldr	r1, [r5, #48]	; 0x30
    b9ec:	4798      	blx	r3
    b9ee:	f89a 8003 	ldrb.w	r8, [sl, #3]
    b9f2:	f89a 3002 	ldrb.w	r3, [sl, #2]
    b9f6:	e79a      	b.n	b92e <ticker_job+0x8a>
		flag_elapsed = 0U;
    b9f8:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
    b9fa:	9202      	str	r2, [sp, #8]
    b9fc:	e778      	b.n	b8f0 <ticker_job+0x4c>
				instance->sched_cb(TICKER_CALL_ID_JOB,
    b9fe:	2104      	movs	r1, #4
    ba00:	465b      	mov	r3, fp
    ba02:	2201      	movs	r2, #1
    ba04:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    ba08:	4608      	mov	r0, r1
    ba0a:	47a0      	blx	r4
	while (count_user--) {
    ba0c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
				user->middle = prev;
    ba0e:	f88a 9002 	strb.w	r9, [sl, #2]
    ba12:	4657      	mov	r7, sl
				pending = 1U;
    ba14:	2301      	movs	r3, #1
	while (count_user--) {
    ba16:	42ba      	cmp	r2, r7
				pending = 1U;
    ba18:	9308      	str	r3, [sp, #32]
    ba1a:	f1a7 0308 	sub.w	r3, r7, #8
	while (count_user--) {
    ba1e:	f000 8122 	beq.w	bc66 <ticker_job+0x3c2>
    ba22:	461f      	mov	r7, r3
    ba24:	e77d      	b.n	b922 <ticker_job+0x7e>
			instance->ticker_id_slot_previous = TICKER_NULL;
    ba26:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    ba28:	2907      	cmp	r1, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
    ba2a:	f88b 301c 	strb.w	r3, [fp, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
    ba2e:	f040 81e0 	bne.w	bdf2 <ticker_job+0x54e>
				ticks_at_stop =
    ba32:	6868      	ldr	r0, [r5, #4]
			ticks_current = instance->ticks_current;
    ba34:	f8db 3014 	ldr.w	r3, [fp, #20]
			if (!((ticks_at_stop - ticks_current) &
    ba38:	1ac2      	subs	r2, r0, r3
    ba3a:	0214      	lsls	r4, r2, #8
    ba3c:	f100 81d0 	bmi.w	bde0 <ticker_job+0x53c>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    ba40:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
    ba44:	9a02      	ldr	r2, [sp, #8]
    ba46:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
    ba48:	f8db 2018 	ldr.w	r2, [fp, #24]
    ba4c:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
    ba4e:	bf88      	it	hi
    ba50:	f8cb 3018 	strhi.w	r3, [fp, #24]
    ba54:	e7c4      	b.n	b9e0 <ticker_job+0x13c>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
    ba56:	686e      	ldr	r6, [r5, #4]
    ba58:	2e00      	cmp	r6, #0
    ba5a:	d196      	bne.n	b98a <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
    ba5c:	68ae      	ldr	r6, [r5, #8]
    ba5e:	2e00      	cmp	r6, #0
    ba60:	d193      	bne.n	b98a <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
    ba62:	68ee      	ldr	r6, [r5, #12]
    ba64:	2e00      	cmp	r6, #0
    ba66:	d190      	bne.n	b98a <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
    ba68:	692e      	ldr	r6, [r5, #16]
    ba6a:	2e00      	cmp	r6, #0
    ba6c:	d18d      	bne.n	b98a <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
    ba6e:	696e      	ldr	r6, [r5, #20]
    ba70:	f036 467f 	bics.w	r6, r6, #4278190080	; 0xff000000
    ba74:	d189      	bne.n	b98a <ticker_job+0xe6>
	if (user_op->fp_op_func) {
    ba76:	6aea      	ldr	r2, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ba78:	2100      	movs	r1, #0
	user_op->status = status;
    ba7a:	2001      	movs	r0, #1
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    ba7c:	7029      	strb	r1, [r5, #0]
	user_op->status = status;
    ba7e:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    ba80:	2a00      	cmp	r2, #0
    ba82:	f43f af54 	beq.w	b92e <ticker_job+0x8a>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    ba86:	6b29      	ldr	r1, [r5, #48]	; 0x30
    ba88:	4790      	blx	r2
    ba8a:	f89a 8003 	ldrb.w	r8, [sl, #3]
    ba8e:	f89a 3002 	ldrb.w	r3, [sl, #2]
    ba92:	e74c      	b.n	b92e <ticker_job+0x8a>
	if (previous == current) {
    ba94:	4542      	cmp	r2, r8
    ba96:	d017      	beq.n	bac8 <ticker_job+0x224>
    ba98:	eb08 0848 	add.w	r8, r8, r8, lsl #1
    ba9c:	eb03 1c08 	add.w	ip, r3, r8, lsl #4
	node[previous].next = ticker_current->next;
    baa0:	7807      	ldrb	r7, [r0, #0]
	timeout = ticker_current->ticks_to_expire;
    baa2:	6882      	ldr	r2, [r0, #8]
	node[previous].next = ticker_current->next;
    baa4:	f88c 7000 	strb.w	r7, [ip]
	if (ticker_current->next != TICKER_NULL) {
    baa8:	2fff      	cmp	r7, #255	; 0xff
    baaa:	d006      	beq.n	baba <ticker_job+0x216>
		node[ticker_current->next].ticks_to_expire += timeout;
    baac:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    bab0:	eb03 1707 	add.w	r7, r3, r7, lsl #4
    bab4:	68b8      	ldr	r0, [r7, #8]
    bab6:	4410      	add	r0, r2
    bab8:	60b8      	str	r0, [r7, #8]
	return (total + timeout);
    baba:	4416      	add	r6, r2
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    babc:	2905      	cmp	r1, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
    babe:	60a6      	str	r6, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
    bac0:	d00b      	beq.n	bada <ticker_job+0x236>
    bac2:	78a7      	ldrb	r7, [r4, #2]
    bac4:	786a      	ldrb	r2, [r5, #1]
    bac6:	e786      	b.n	b9d6 <ticker_job+0x132>
    bac8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
    bacc:	eb03 1c0c 	add.w	ip, r3, ip, lsl #4
		instance->ticker_id_head = ticker_current->next;
    bad0:	7802      	ldrb	r2, [r0, #0]
    bad2:	f88b 201d 	strb.w	r2, [fp, #29]
    bad6:	7829      	ldrb	r1, [r5, #0]
    bad8:	e7e2      	b.n	baa0 <ticker_job+0x1fc>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    bada:	f8db 7014 	ldr.w	r7, [fp, #20]
    bade:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    bae0:	f00a f934 	bl	15d4c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bae4:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bae6:	eba0 0c07 	sub.w	ip, r0, r7
    baea:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    baee:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_elapsed) {
    baf0:	429e      	cmp	r6, r3
	ticks_now = cntr_cnt_get();
    baf2:	4680      	mov	r8, r0
	if (ticks_to_expire > ticks_elapsed) {
    baf4:	f240 80a2 	bls.w	bc3c <ticker_job+0x398>
		ticks_to_expire -= ticks_elapsed;
    baf8:	6962      	ldr	r2, [r4, #20]
    bafa:	1af3      	subs	r3, r6, r3
	if ((ticker->ticks_periodic != 0U) &&
    bafc:	6866      	ldr	r6, [r4, #4]
    bafe:	2e00      	cmp	r6, #0
    bb00:	d053      	beq.n	bbaa <ticker_job+0x306>
	    (user_op->params.update.lazy != 0U)) {
    bb02:	8aa8      	ldrh	r0, [r5, #20]
	if ((ticker->ticks_periodic != 0U) &&
    bb04:	2800      	cmp	r0, #0
    bb06:	d050      	beq.n	bbaa <ticker_job+0x306>
		user_op->params.update.lazy--;
    bb08:	3801      	subs	r0, #1
    bb0a:	b280      	uxth	r0, r0
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bb0c:	429e      	cmp	r6, r3
    bb0e:	8be1      	ldrh	r1, [r4, #30]
		user_op->params.update.lazy--;
    bb10:	82a8      	strh	r0, [r5, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bb12:	d225      	bcs.n	bb60 <ticker_job+0x2bc>
    bb14:	f106 0901 	add.w	r9, r6, #1
    bb18:	920b      	str	r2, [sp, #44]	; 0x2c
    bb1a:	e011      	b.n	bb40 <ticker_job+0x29c>
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
    bb1c:	f100 70e8 	add.w	r0, r0, #30408704	; 0x1d00000
    bb20:	f500 30d4 	add.w	r0, r0, #108544	; 0x1a800
    bb24:	f500 70a5 	add.w	r0, r0, #330	; 0x14a
    bb28:	46ce      	mov	lr, r9
	ticker->remainder_current -= ticker->remainder_periodic;
    bb2a:	9a09      	ldr	r2, [sp, #36]	; 0x24
			ticker->lazy_current--;
    bb2c:	3901      	subs	r1, #1
			ticks_to_expire -= ticker->ticks_periodic +
    bb2e:	eba3 030e 	sub.w	r3, r3, lr
			ticker->lazy_current--;
    bb32:	b289      	uxth	r1, r1
	ticker->remainder_current -= ticker->remainder_periodic;
    bb34:	1a80      	subs	r0, r0, r2
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bb36:	429e      	cmp	r6, r3
			ticker->lazy_current--;
    bb38:	83e1      	strh	r1, [r4, #30]
	ticker->remainder_current -= ticker->remainder_periodic;
    bb3a:	6260      	str	r0, [r4, #36]	; 0x24
		while ((ticks_to_expire > ticker->ticks_periodic) &&
    bb3c:	d20e      	bcs.n	bb5c <ticker_job+0x2b8>
    bb3e:	8aa8      	ldrh	r0, [r5, #20]
    bb40:	4288      	cmp	r0, r1
    bb42:	f080 81b7 	bcs.w	beb4 <ticker_job+0x610>
					   ticker_remainder_dec(ticker);
    bb46:	e9d4 2008 	ldrd	r2, r0, [r4, #32]
	if ((ticker->remainder_current >= BIT(31)) ||
    bb4a:	f8df e2d4 	ldr.w	lr, [pc, #724]	; be20 <ticker_job+0x57c>
					   ticker_remainder_dec(ticker);
    bb4e:	9209      	str	r2, [sp, #36]	; 0x24
	if ((ticker->remainder_current >= BIT(31)) ||
    bb50:	4ab2      	ldr	r2, [pc, #712]	; (be1c <ticker_job+0x578>)
    bb52:	4486      	add	lr, r0
    bb54:	4596      	cmp	lr, r2
    bb56:	d8e1      	bhi.n	bb1c <ticker_job+0x278>
    bb58:	46b6      	mov	lr, r6
    bb5a:	e7e6      	b.n	bb2a <ticker_job+0x286>
    bb5c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bb5e:	8aa8      	ldrh	r0, [r5, #20]
		while (ticker->lazy_current < user_op->params.update.lazy) {
    bb60:	4288      	cmp	r0, r1
    bb62:	d921      	bls.n	bba8 <ticker_job+0x304>
					   ticker_remainder_inc(ticker);
    bb64:	6a20      	ldr	r0, [r4, #32]
    bb66:	9009      	str	r0, [sp, #36]	; 0x24
    bb68:	f106 0e01 	add.w	lr, r6, #1
    bb6c:	920b      	str	r2, [sp, #44]	; 0x2c
    bb6e:	e007      	b.n	bb80 <ticker_job+0x2dc>
	ticker->remainder_current += ticker->remainder_periodic;
    bb70:	6260      	str	r0, [r4, #36]	; 0x24
    bb72:	46b1      	mov	r9, r6
		while (ticker->lazy_current < user_op->params.update.lazy) {
    bb74:	8aa8      	ldrh	r0, [r5, #20]
			ticker->lazy_current++;
    bb76:	3101      	adds	r1, #1
    bb78:	b289      	uxth	r1, r1
		while (ticker->lazy_current < user_op->params.update.lazy) {
    bb7a:	4281      	cmp	r1, r0
			ticks_to_expire += ticker->ticks_periodic +
    bb7c:	444b      	add	r3, r9
		while (ticker->lazy_current < user_op->params.update.lazy) {
    bb7e:	d211      	bcs.n	bba4 <ticker_job+0x300>
	ticker->remainder_current += ticker->remainder_periodic;
    bb80:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bb82:	6a60      	ldr	r0, [r4, #36]	; 0x24
	if ((ticker->remainder_current < BIT(31)) &&
    bb84:	f8df 9298 	ldr.w	r9, [pc, #664]	; be20 <ticker_job+0x57c>
	ticker->remainder_current += ticker->remainder_periodic;
    bb88:	4410      	add	r0, r2
	if ((ticker->remainder_current < BIT(31)) &&
    bb8a:	4aa4      	ldr	r2, [pc, #656]	; (be1c <ticker_job+0x578>)
    bb8c:	4481      	add	r9, r0
    bb8e:	4591      	cmp	r9, r2
    bb90:	d8ee      	bhi.n	bb70 <ticker_job+0x2cc>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    bb92:	f1a0 70e8 	sub.w	r0, r0, #30408704	; 0x1d00000
    bb96:	f5a0 30d4 	sub.w	r0, r0, #108544	; 0x1a800
    bb9a:	f5a0 70a5 	sub.w	r0, r0, #330	; 0x14a
    bb9e:	6260      	str	r0, [r4, #36]	; 0x24
		return 1;
    bba0:	46f1      	mov	r9, lr
    bba2:	e7e7      	b.n	bb74 <ticker_job+0x2d0>
    bba4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bba6:	83e1      	strh	r1, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
    bba8:	83a0      	strh	r0, [r4, #28]
				user_op->params.update.ticks_drift_minus;
    bbaa:	e9d5 0e01 	ldrd	r0, lr, [r5, #4]
	struct ticker_ext *ext_data = ticker->ext_data;
    bbae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
	ticker->ticks_to_expire = ticks_to_expire +
    bbb0:	4403      	add	r3, r0
	ticker->ticks_to_expire_minus +=
    bbb2:	4472      	add	r2, lr
	ticker->ticks_to_expire = ticks_to_expire +
    bbb4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus +=
    bbb6:	6162      	str	r2, [r4, #20]
	if (ext_data && ext_data->ticks_slot_window != 0U) {
    bbb8:	b136      	cbz	r6, bbc8 <ticker_job+0x324>
    bbba:	6831      	ldr	r1, [r6, #0]
    bbbc:	b121      	cbz	r1, bbc8 <ticker_job+0x324>
			user_op->params.update.ticks_drift_plus -
    bbbe:	eba0 000e 	sub.w	r0, r0, lr
		ext_data->ticks_drift =
    bbc2:	6070      	str	r0, [r6, #4]
    bbc4:	68a3      	ldr	r3, [r4, #8]
    bbc6:	6962      	ldr	r2, [r4, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    bbc8:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
    bbcc:	d121      	bne.n	bc12 <ticker_job+0x36e>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    bbce:	443b      	add	r3, r7
	if (ticks_to_expire > ticks_to_expire_minus) {
    bbd0:	4293      	cmp	r3, r2
    bbd2:	d91b      	bls.n	bc0c <ticker_job+0x368>
		ticks_to_expire -= ticks_to_expire_minus;
    bbd4:	1a9b      	subs	r3, r3, r2
		ticks_to_expire_minus = 0U;
    bbd6:	2200      	movs	r2, #0
	ticker->ticks_to_expire = ticks_to_expire;
    bbd8:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    bbda:	6162      	str	r2, [r4, #20]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    bbdc:	68e9      	ldr	r1, [r5, #12]
    bbde:	69a3      	ldr	r3, [r4, #24]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    bbe0:	692a      	ldr	r2, [r5, #16]
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
    bbe2:	440b      	add	r3, r1
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
    bbe4:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
    bbe6:	bf88      	it	hi
    bbe8:	1a9b      	subhi	r3, r3, r2
	if (user_op->params.update.force != 0U) {
    bbea:	7daa      	ldrb	r2, [r5, #22]
		ticker->ticks_slot = 0U;
    bbec:	bf98      	it	ls
    bbee:	2300      	movls	r3, #0
    bbf0:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
    bbf2:	b102      	cbz	r2, bbf6 <ticker_job+0x352>
		ticker->force = user_op->params.update.force;
    bbf4:	70e2      	strb	r2, [r4, #3]
	ticker->next = *insert_head;
    bbf6:	9b04      	ldr	r3, [sp, #16]
    bbf8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bbfa:	4619      	mov	r1, r3
    bbfc:	9b01      	ldr	r3, [sp, #4]
    bbfe:	548b      	strb	r3, [r1, r2]
		ticker->req++;
    bc00:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
    bc02:	786a      	ldrb	r2, [r5, #1]
    bc04:	9201      	str	r2, [sp, #4]
		ticker->req++;
    bc06:	3301      	adds	r3, #1
    bc08:	7063      	strb	r3, [r4, #1]
    bc0a:	e6e9      	b.n	b9e0 <ticker_job+0x13c>
    bc0c:	1ad2      	subs	r2, r2, r3
		ticks_to_expire = 0U;
    bc0e:	2300      	movs	r3, #0
    bc10:	e7e2      	b.n	bbd8 <ticker_job+0x334>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bc12:	9903      	ldr	r1, [sp, #12]
    bc14:	eba1 0708 	sub.w	r7, r1, r8
    bc18:	f027 477f 	bic.w	r7, r7, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    bc1c:	429f      	cmp	r7, r3
    bc1e:	d213      	bcs.n	bc48 <ticker_job+0x3a4>
			ticks_to_expire -= delta_current_start;
    bc20:	1bdb      	subs	r3, r3, r7
    bc22:	e7d5      	b.n	bbd0 <ticker_job+0x32c>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
    bc24:	f8db 7014 	ldr.w	r7, [fp, #20]
    bc28:	9703      	str	r7, [sp, #12]
	ticks_now = cntr_cnt_get();
    bc2a:	f00a f88f 	bl	15d4c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bc2e:	9b02      	ldr	r3, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bc30:	eba0 0c07 	sub.w	ip, r0, r7
    bc34:	f02c 477f 	bic.w	r7, ip, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
    bc38:	4680      	mov	r8, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
    bc3a:	443b      	add	r3, r7
		ticker->ticks_to_expire_minus += ticks_elapsed -
    bc3c:	6961      	ldr	r1, [r4, #20]
    bc3e:	440b      	add	r3, r1
    bc40:	1b9a      	subs	r2, r3, r6
    bc42:	6162      	str	r2, [r4, #20]
		ticks_to_expire = 0U;
    bc44:	2300      	movs	r3, #0
    bc46:	e759      	b.n	bafc <ticker_job+0x258>
			ticks_to_expire_minus +=
    bc48:	443a      	add	r2, r7
    bc4a:	1ad2      	subs	r2, r2, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    bc4c:	e7df      	b.n	bc0e <ticker_job+0x36a>
		if (current == id) {
    bc4e:	4684      	mov	ip, r0
	total = 0U;
    bc50:	2600      	movs	r6, #0
    bc52:	e73d      	b.n	bad0 <ticker_job+0x22c>
    bc54:	4699      	mov	r9, r3
    bc56:	e66c      	b.n	b932 <ticker_job+0x8e>
	while (count_user--) {
    bc58:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    bc5a:	4657      	mov	r7, sl
    bc5c:	42ba      	cmp	r2, r7
    bc5e:	f1a7 0308 	sub.w	r3, r7, #8
    bc62:	f47f aede 	bne.w	ba22 <ticker_job+0x17e>
    bc66:	f89b 701d 	ldrb.w	r7, [fp, #29]
    bc6a:	9b06      	ldr	r3, [sp, #24]
    bc6c:	1bdb      	subs	r3, r3, r7
    bc6e:	bf18      	it	ne
    bc70:	2301      	movne	r3, #1
    bc72:	9307      	str	r3, [sp, #28]
	if (flag_elapsed) {
    bc74:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bc76:	2b00      	cmp	r3, #0
    bc78:	f040 817c 	bne.w	bf74 <ticker_job+0x6d0>
	count_user = instance->count_user;
    bc7c:	f89b 2009 	ldrb.w	r2, [fp, #9]
	node = &instance->nodes[0];
    bc80:	f8db 3000 	ldr.w	r3, [fp]
	users = &instance->users[0];
    bc84:	f8db 1004 	ldr.w	r1, [fp, #4]
	node = &instance->nodes[0];
    bc88:	9304      	str	r3, [sp, #16]
	while (count_user--) {
    bc8a:	1e53      	subs	r3, r2, #1
	users = &instance->users[0];
    bc8c:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    bc8e:	b2db      	uxtb	r3, r3
    bc90:	2a00      	cmp	r2, #0
    bc92:	f000 8113 	beq.w	bebc <ticker_job+0x618>
    bc96:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bc9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bc9c:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
    bc9e:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    bca2:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    bca6:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    bca8:	9b01      	ldr	r3, [sp, #4]
    bcaa:	2bff      	cmp	r3, #255	; 0xff
    bcac:	d05e      	beq.n	bd6c <ticker_job+0x4c8>
				ticker = &node[id_insert];
    bcae:	f8dd a004 	ldr.w	sl, [sp, #4]
    bcb2:	9b04      	ldr	r3, [sp, #16]
    bcb4:	fa0f f48a 	sxth.w	r4, sl
    bcb8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    bcbc:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    bcc0:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    bcc4:	f813 300c 	ldrb.w	r3, [r3, ip]
    bcc8:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    bcca:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    bccc:	22ff      	movs	r2, #255	; 0xff
    bcce:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    bcd0:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    bcd4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    bcd8:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bcdc:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    bcde:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    bce0:	bf18      	it	ne
    bce2:	9202      	strne	r2, [sp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bce4:	d111      	bne.n	bd0a <ticker_job+0x466>
    bce6:	e093      	b.n	be10 <ticker_job+0x56c>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    bce8:	ebb1 010c 	subs.w	r1, r1, ip
    bcec:	d106      	bne.n	bcfc <ticker_job+0x458>
    bcee:	f8be e01e 	ldrh.w	lr, [lr, #30]
    bcf2:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    bcf6:	45f1      	cmp	r9, lr
    bcf8:	f200 80d9 	bhi.w	beae <ticker_job+0x60a>
		current = ticker_current->next;
    bcfc:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bd00:	9302      	str	r3, [sp, #8]
    bd02:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    bd06:	d077      	beq.n	bdf8 <ticker_job+0x554>
    bd08:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    bd0a:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    bd0e:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    bd12:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    bd16:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    bd1a:	458c      	cmp	ip, r1
    bd1c:	d9e4      	bls.n	bce8 <ticker_job+0x444>
    bd1e:	9a02      	ldr	r2, [sp, #8]
	ticker_new->ticks_to_expire = ticks_to_expire;
    bd20:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    bd22:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    bd24:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    bd26:	d16c      	bne.n	be02 <ticker_job+0x55e>
		instance->ticker_id_head = id;
    bd28:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    bd2c:	2bff      	cmp	r3, #255	; 0xff
    bd2e:	d006      	beq.n	bd3e <ticker_job+0x49a>
		node[current].ticks_to_expire -= ticks_to_expire;
    bd30:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    bd34:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    bd38:	68bb      	ldr	r3, [r7, #8]
    bd3a:	1a59      	subs	r1, r3, r1
    bd3c:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    bd3e:	78a3      	ldrb	r3, [r4, #2]
    bd40:	3301      	adds	r3, #1
    bd42:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    bd44:	2d00      	cmp	r5, #0
    bd46:	d0af      	beq.n	bca8 <ticker_job+0x404>
	if (user_op->fp_op_func) {
    bd48:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bd4a:	9a03      	ldr	r2, [sp, #12]
    bd4c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    bd4e:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    bd50:	b113      	cbz	r3, bd58 <ticker_job+0x4b4>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bd52:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bd54:	2000      	movs	r0, #0
    bd56:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    bd58:	6863      	ldr	r3, [r4, #4]
    bd5a:	2b00      	cmp	r3, #0
    bd5c:	d1a4      	bne.n	bca8 <ticker_job+0x404>
					ticker->op_context =
    bd5e:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    bd62:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    bd66:	9b01      	ldr	r3, [sp, #4]
    bd68:	2bff      	cmp	r3, #255	; 0xff
    bd6a:	d1a0      	bne.n	bcae <ticker_job+0x40a>
    bd6c:	f898 3002 	ldrb.w	r3, [r8, #2]
    bd70:	42b3      	cmp	r3, r6
    bd72:	d02e      	beq.n	bdd2 <ticker_job+0x52e>
    bd74:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    bd76:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    bd7a:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    bd7e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    bd82:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    bd84:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    bd88:	b2f6      	uxtb	r6, r6
					first = 0U;
    bd8a:	42b0      	cmp	r0, r6
    bd8c:	bf08      	it	eq
    bd8e:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    bd90:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    bd92:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    bd96:	d11a      	bne.n	bdce <ticker_job+0x52a>
				id_insert = user_op->id;
    bd98:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    bd9c:	9b04      	ldr	r3, [sp, #16]
    bd9e:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    bda2:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    bda6:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    bdaa:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    bdac:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    bdae:	1ac9      	subs	r1, r1, r3
    bdb0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    bdb4:	d036      	beq.n	be24 <ticker_job+0x580>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    bdb6:	9b03      	ldr	r3, [sp, #12]
    bdb8:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    bdbc:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    bdbe:	2201      	movs	r2, #1
    bdc0:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bdc2:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    bdc4:	b10b      	cbz	r3, bdca <ticker_job+0x526>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    bdc6:	6b29      	ldr	r1, [r5, #48]	; 0x30
    bdc8:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    bdca:	f898 3002 	ldrb.w	r3, [r8, #2]
    bdce:	42b3      	cmp	r3, r6
    bdd0:	d1d1      	bne.n	bd76 <ticker_job+0x4d2>
	while (count_user--) {
    bdd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
    bdd4:	4542      	cmp	r2, r8
    bdd6:	f1a8 0308 	sub.w	r3, r8, #8
    bdda:	d06d      	beq.n	beb8 <ticker_job+0x614>
    bddc:	4698      	mov	r8, r3
    bdde:	e75e      	b.n	bc9e <ticker_job+0x3fa>
				if (ticks_elapsed > ticks_used) {
    bde0:	9a02      	ldr	r2, [sp, #8]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bde2:	1a1b      	subs	r3, r3, r0
    bde4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
    bde8:	429a      	cmp	r2, r3
					ticks_used = ticks_elapsed -
    bdea:	bf8c      	ite	hi
    bdec:	1ad3      	subhi	r3, r2, r3
					ticks_used = 0;
    bdee:	2300      	movls	r3, #0
    bdf0:	e62a      	b.n	ba48 <ticker_job+0x1a4>
				ticks_at_stop = cntr_cnt_get();
    bdf2:	f009 ffab 	bl	15d4c <cntr_cnt_get>
    bdf6:	e61d      	b.n	ba34 <ticker_job+0x190>
	ticker_new->next = current;
    bdf8:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    bdfa:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    bdfc:	f880 c000 	strb.w	ip, [r0]
    be00:	4663      	mov	r3, ip
		node[previous].next = id;
    be02:	b212      	sxth	r2, r2
    be04:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    be08:	0112      	lsls	r2, r2, #4
    be0a:	f807 a002 	strb.w	sl, [r7, r2]
    be0e:	e78d      	b.n	bd2c <ticker_job+0x488>
	ticker_new->next = current;
    be10:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    be14:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    be18:	e791      	b.n	bd3e <ticker_job+0x49a>
    be1a:	bf00      	nop
    be1c:	7f172b59 	.word	0x7f172b59
    be20:	ff172b5a 	.word	0xff172b5a
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    be24:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    be26:	f8db 0014 	ldr.w	r0, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    be2a:	f64f 72ff 	movw	r2, #65535	; 0xffff
    be2e:	4293      	cmp	r3, r2
    be30:	d031      	beq.n	be96 <ticker_job+0x5f2>
    be32:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    be36:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    be38:	68ef      	ldr	r7, [r5, #12]
	ticker->ext_data = start->ext_data;
    be3a:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    be3c:	692a      	ldr	r2, [r5, #16]
    be3e:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    be40:	6067      	str	r7, [r4, #4]
	ticker->timeout_func = start->fp_timeout_func;
    be42:	e9d5 2906 	ldrd	r2, r9, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    be46:	686f      	ldr	r7, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    be48:	61a2      	str	r2, [r4, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    be4a:	eba7 0e00 	sub.w	lr, r7, r0
	ticker->context = start->context;
    be4e:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    be50:	83a3      	strh	r3, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    be52:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
	ticker->context = start->context;
    be56:	e9c4 9203 	strd	r9, r2, [r4, #12]
	ticker->ticks_to_expire = start->ticks_first;
    be5a:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    be5c:	d10c      	bne.n	be78 <ticker_job+0x5d4>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    be5e:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    be62:	4473      	add	r3, lr
	if (ticks_to_expire > ticks_to_expire_minus) {
    be64:	b183      	cbz	r3, be88 <ticker_job+0x5e4>
	ticker->ticks_to_expire = ticks_to_expire;
    be66:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    be68:	9b03      	ldr	r3, [sp, #12]
    be6a:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    be6c:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    be6e:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    be72:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    be74:	70e3      	strb	r3, [r4, #3]
}
    be76:	e729      	b.n	bccc <ticker_job+0x428>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    be78:	1bc0      	subs	r0, r0, r7
    be7a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    be7e:	4283      	cmp	r3, r0
    be80:	d905      	bls.n	be8e <ticker_job+0x5ea>
			ticks_to_expire -= delta_current_start;
    be82:	1a1b      	subs	r3, r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    be84:	2b00      	cmp	r3, #0
    be86:	d1ee      	bne.n	be66 <ticker_job+0x5c2>
		ticks_to_expire_minus -= ticks_to_expire;
    be88:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    be8a:	2300      	movs	r3, #0
    be8c:	e7eb      	b.n	be66 <ticker_job+0x5c2>
			    (delta_current_start - ticks_to_expire);
    be8e:	1ac3      	subs	r3, r0, r3
		ticks_to_expire_minus -= ticks_to_expire;
    be90:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    be92:	2300      	movs	r3, #0
    be94:	e7e7      	b.n	be66 <ticker_job+0x5c2>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    be96:	f04f 0301 	mov.w	r3, #1
    be9a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    be9e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    bea0:	68eb      	ldr	r3, [r5, #12]
	ticker->ext_data = start->ext_data;
    bea2:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    bea4:	692a      	ldr	r2, [r5, #16]
    bea6:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    bea8:	6063      	str	r3, [r4, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    beaa:	460b      	mov	r3, r1
    beac:	e7c9      	b.n	be42 <ticker_job+0x59e>
    beae:	9a02      	ldr	r2, [sp, #8]
    beb0:	4661      	mov	r1, ip
    beb2:	e735      	b.n	bd20 <ticker_job+0x47c>
    beb4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    beb6:	e653      	b.n	bb60 <ticker_job+0x2bc>
    beb8:	f89b 701d 	ldrb.w	r7, [fp, #29]
	if (instance->ticker_id_head != ticker_id_old_head) {
    bebc:	9b06      	ldr	r3, [sp, #24]
    bebe:	42bb      	cmp	r3, r7
    bec0:	f000 8339 	beq.w	c536 <ticker_job+0xc92>
	if (!pending) {
    bec4:	9b08      	ldr	r3, [sp, #32]
    bec6:	2b00      	cmp	r3, #0
    bec8:	f000 835b 	beq.w	c582 <ticker_job+0xcde>
	instance->job_guard = 0U;
    becc:	2300      	movs	r3, #0
    bece:	f89b 701d 	ldrb.w	r7, [fp, #29]
    bed2:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
    bed6:	2fff      	cmp	r7, #255	; 0xff
    bed8:	f000 83e5 	beq.w	c6a6 <ticker_job+0xe02>
	if (ticker_id_old_head == TICKER_NULL) {
    bedc:	9b06      	ldr	r3, [sp, #24]
    bede:	2bff      	cmp	r3, #255	; 0xff
    bee0:	f000 8401 	beq.w	c6e6 <ticker_job+0xe42>
	ticks_to_expire = ticker->ticks_to_expire;
    bee4:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
    bee8:	f8df 92fc 	ldr.w	r9, [pc, #764]	; c1e8 <ticker_job+0x944>
    beec:	f8df 82fc 	ldr.w	r8, [pc, #764]	; c1ec <ticker_job+0x948>
    bef0:	4ebc      	ldr	r6, [pc, #752]	; (c1e4 <ticker_job+0x940>)
	ticker = &instance->nodes[instance->ticker_id_head];
    bef2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
    bef6:	eb03 1307 	add.w	r3, r3, r7, lsl #4
	i = 10U;
    befa:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
    befc:	689f      	ldr	r7, [r3, #8]
		ctr = cntr_cnt_get();
    befe:	f009 ff25 	bl	15d4c <cntr_cnt_get>
		cc = instance->ticks_current;
    bf02:	f8db 3014 	ldr.w	r3, [fp, #20]
		instance->trigger_set_cb(cc);
    bf06:	f8db 2028 	ldr.w	r2, [fp, #40]	; 0x28
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bf0a:	1ac4      	subs	r4, r0, r3
    bf0c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
    bf10:	3403      	adds	r4, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
    bf12:	42bc      	cmp	r4, r7
    bf14:	bf2c      	ite	cs
    bf16:	191b      	addcs	r3, r3, r4
    bf18:	19db      	addcc	r3, r3, r7
		cc &= HAL_TICKER_CNTR_MASK;
    bf1a:	f023 447f 	bic.w	r4, r3, #4278190080	; 0xff000000
		ctr = cntr_cnt_get();
    bf1e:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
    bf20:	4620      	mov	r0, r4
    bf22:	4790      	blx	r2
		ctr_post = cntr_cnt_get();
    bf24:	f009 ff12 	bl	15d4c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bf28:	eba0 000a 	sub.w	r0, r0, sl
    bf2c:	eba4 040a 	sub.w	r4, r4, sl
    bf30:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    bf34:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
    bf38:	3003      	adds	r0, #3
		  ticker_ticks_diff_get(cc, ctr));
    bf3a:	42a0      	cmp	r0, r4
		i--;
    bf3c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
		  ticker_ticks_diff_get(cc, ctr));
    bf40:	f240 8304 	bls.w	c54c <ticker_job+0xca8>
		LL_ASSERT(i);
    bf44:	2d00      	cmp	r5, #0
    bf46:	d1da      	bne.n	befe <ticker_job+0x65a>
    bf48:	f640 039a 	movw	r3, #2202	; 0x89a
    bf4c:	464a      	mov	r2, r9
    bf4e:	4641      	mov	r1, r8
    bf50:	4630      	mov	r0, r6
    bf52:	f00d ff50 	bl	19df6 <printk>
    bf56:	4040      	eors	r0, r0
    bf58:	f380 8811 	msr	BASEPRI, r0
    bf5c:	f04f 0003 	mov.w	r0, #3
    bf60:	df02      	svc	2
    bf62:	e7cc      	b.n	befe <ticker_job+0x65a>
	if (flag_elapsed) {
    bf64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    bf66:	2b00      	cmp	r3, #0
    bf68:	f000 82fe 	beq.w	c568 <ticker_job+0xcc4>
	pending = 0U;
    bf6c:	9b07      	ldr	r3, [sp, #28]
    bf6e:	9308      	str	r3, [sp, #32]
	insert_head = TICKER_NULL;
    bf70:	23ff      	movs	r3, #255	; 0xff
    bf72:	9301      	str	r3, [sp, #4]
	ticks_now = cntr_cnt_get();
    bf74:	f009 feea 	bl	15d4c <cntr_cnt_get>
	node = &instance->nodes[0];
    bf78:	f8db 3000 	ldr.w	r3, [fp]
	while (instance->ticker_id_head != TICKER_NULL) {
    bf7c:	f89b 501d 	ldrb.w	r5, [fp, #29]
	node = &instance->nodes[0];
    bf80:	9303      	str	r3, [sp, #12]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bf82:	9b05      	ldr	r3, [sp, #20]
	while (instance->ticker_id_head != TICKER_NULL) {
    bf84:	2dff      	cmp	r5, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    bf86:	eba0 0003 	sub.w	r0, r0, r3
    bf8a:	f020 487f 	bic.w	r8, r0, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
    bf8e:	d052      	beq.n	c036 <ticker_job+0x792>
    bf90:	f8dd a008 	ldr.w	sl, [sp, #8]
	ticks_expired = 0U;
    bf94:	f04f 0900 	mov.w	r9, #0
			instance->ticker_id_slot_previous = TICKER_NULL;
    bf98:	464b      	mov	r3, r9
    bf9a:	46d1      	mov	r9, sl
    bf9c:	46c2      	mov	sl, r8
    bf9e:	4698      	mov	r8, r3
		ticker = &node[id_expired];
    bfa0:	9b03      	ldr	r3, [sp, #12]
    bfa2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
    bfa6:	eb03 1404 	add.w	r4, r3, r4, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
    bfaa:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
    bfac:	454b      	cmp	r3, r9
    bfae:	f200 82e1 	bhi.w	c574 <ticker_job+0xcd0>
		is_must_expire_skip = (ticker->must_expire &&
    bfb2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
		ticks_elapsed -= ticks_to_expire;
    bfb6:	eba9 0903 	sub.w	r9, r9, r3
		ticks_expired += ticks_to_expire;
    bfba:	4498      	add	r8, r3
		ticks_latency -= ticks_to_expire;
    bfbc:	ebaa 0a03 	sub.w	sl, sl, r3
		is_must_expire_skip = (ticker->must_expire &&
    bfc0:	2900      	cmp	r1, #0
    bfc2:	f000 8137 	beq.w	c234 <ticker_job+0x990>
    bfc6:	8be0      	ldrh	r0, [r4, #30]
    bfc8:	3800      	subs	r0, #0
    bfca:	bf18      	it	ne
    bfcc:	2001      	movne	r0, #1
		if (instance->ticks_slot_previous > ticks_to_expire) {
    bfce:	f8db 2018 	ldr.w	r2, [fp, #24]
    bfd2:	4293      	cmp	r3, r2
			instance->ticker_id_slot_previous = TICKER_NULL;
    bfd4:	bf24      	itt	cs
    bfd6:	f04f 33ff 	movcs.w	r3, #4294967295	; 0xffffffff
    bfda:	f88b 301c 	strbcs.w	r3, [fp, #28]
		if ((ticker->ticks_slot != 0U) &&
    bfde:	69a6      	ldr	r6, [r4, #24]
			instance->ticks_slot_previous -= ticks_to_expire;
    bfe0:	bf34      	ite	cc
    bfe2:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
    bfe4:	2300      	movcs	r3, #0
    bfe6:	f8cb 3018 	str.w	r3, [fp, #24]
		if ((ticker->ticks_slot != 0U) &&
    bfea:	b136      	cbz	r6, bffa <ticker_job+0x756>
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    bfec:	7863      	ldrb	r3, [r4, #1]
    bfee:	78a2      	ldrb	r2, [r4, #2]
    bff0:	1a9b      	subs	r3, r3, r2
    bff2:	b2db      	uxtb	r3, r3
		if ((ticker->ticks_slot != 0U) &&
    bff4:	2b02      	cmp	r3, #2
    bff6:	f000 814d 	beq.w	c294 <ticker_job+0x9f0>
    bffa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		instance->ticker_id_head = ticker->next;
    bffc:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0U;
    bffe:	2000      	movs	r0, #0
    c000:	60a0      	str	r0, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c002:	f88b 301d 	strb.w	r3, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c006:	6860      	ldr	r0, [r4, #4]
    c008:	2800      	cmp	r0, #0
    c00a:	f040 80d6 	bne.w	c1ba <ticker_job+0x916>
    c00e:	b11a      	cbz	r2, c018 <ticker_job+0x774>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
    c010:	7a13      	ldrb	r3, [r2, #8]
    c012:	2b01      	cmp	r3, #1
    c014:	f000 8118 	beq.w	c248 <ticker_job+0x9a4>
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
    c018:	78a2      	ldrb	r2, [r4, #2]
    c01a:	7860      	ldrb	r0, [r4, #1]
    c01c:	1a80      	subs	r0, r0, r2
    c01e:	b2c0      	uxtb	r0, r0
    c020:	2801      	cmp	r0, #1
    c022:	f000 80c2 	beq.w	c1aa <ticker_job+0x906>
			ticker->req = ticker->ack;
    c026:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
    c028:	f89b 501d 	ldrb.w	r5, [fp, #29]
    c02c:	2dff      	cmp	r5, #255	; 0xff
    c02e:	d1b7      	bne.n	bfa0 <ticker_job+0x6fc>
    c030:	f8db 3000 	ldr.w	r3, [fp]
    c034:	9303      	str	r3, [sp, #12]
			flag_compare_update = 1U;
    c036:	e9dd 4006 	ldrd	r4, r0, [sp, #24]
	count_user = instance->count_user;
    c03a:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    c03e:	f8db 1004 	ldr.w	r1, [fp, #4]
    c042:	9109      	str	r1, [sp, #36]	; 0x24
	while (count_user--) {
    c044:	1e53      	subs	r3, r2, #1
			flag_compare_update = 1U;
    c046:	42ac      	cmp	r4, r5
    c048:	bf18      	it	ne
    c04a:	2001      	movne	r0, #1
    c04c:	9007      	str	r0, [sp, #28]
	while (count_user--) {
    c04e:	b2db      	uxtb	r3, r3
    c050:	2a00      	cmp	r2, #0
    c052:	f000 8191 	beq.w	c378 <ticker_job+0xad4>
    c056:	eb01 08c3 	add.w	r8, r1, r3, lsl #3
		user_ops = (void *)&user->user_op[0];
    c05a:	f8d8 3004 	ldr.w	r3, [r8, #4]
		user_ops_first = user->first;
    c05e:	f898 6001 	ldrb.w	r6, [r8, #1]
		user_ops = (void *)&user->user_op[0];
    c062:	9305      	str	r3, [sp, #20]
		while ((insert_head != TICKER_NULL) ||
    c064:	9b01      	ldr	r3, [sp, #4]
    c066:	2bff      	cmp	r3, #255	; 0xff
    c068:	d062      	beq.n	c130 <ticker_job+0x88c>
				ticker = &node[id_insert];
    c06a:	f8dd a004 	ldr.w	sl, [sp, #4]
    c06e:	9b03      	ldr	r3, [sp, #12]
    c070:	fa0f f48a 	sxth.w	r4, sl
    c074:	eb04 0444 	add.w	r4, r4, r4, lsl #1
    c078:	ea4f 1c04 	mov.w	ip, r4, lsl #4
    c07c:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				insert_head = ticker->next;
    c080:	f813 300c 	ldrb.w	r3, [r3, ip]
    c084:	9301      	str	r3, [sp, #4]
				user_op = NULL;
    c086:	2500      	movs	r5, #0
	ticker->next = TICKER_NULL;
    c088:	22ff      	movs	r2, #255	; 0xff
    c08a:	7022      	strb	r2, [r4, #0]
	(void)ticker_enqueue(instance, id_insert);
    c08c:	f8db 7000 	ldr.w	r7, [fp]
	current = instance->ticker_id_head;
    c090:	f89b 301d 	ldrb.w	r3, [fp, #29]
	ticker_new = &node[id];
    c094:	eb07 000c 	add.w	r0, r7, ip
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c098:	4293      	cmp	r3, r2
	ticks_to_expire = ticker_new->ticks_to_expire;
    c09a:	6881      	ldr	r1, [r0, #8]
	previous = TICKER_NULL;
    c09c:	bf18      	it	ne
    c09e:	9204      	strne	r2, [sp, #16]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c0a0:	d112      	bne.n	c0c8 <ticker_job+0x824>
    c0a2:	e161      	b.n	c368 <ticker_job+0xac4>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
    c0a4:	ebb1 010c 	subs.w	r1, r1, ip
    c0a8:	d106      	bne.n	c0b8 <ticker_job+0x814>
    c0aa:	f8be e01e 	ldrh.w	lr, [lr, #30]
    c0ae:	f8b0 901e 	ldrh.w	r9, [r0, #30]
    c0b2:	45f1      	cmp	r9, lr
    c0b4:	f200 8110 	bhi.w	c2d8 <ticker_job+0xa34>
		current = ticker_current->next;
    c0b8:	f817 c002 	ldrb.w	ip, [r7, r2]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c0bc:	9304      	str	r3, [sp, #16]
    c0be:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
    c0c2:	f000 80fd 	beq.w	c2c0 <ticker_job+0xa1c>
    c0c6:	4663      	mov	r3, ip
		(ticker_current = &node[current])->ticks_to_expire))) {
    c0c8:	eb03 0c43 	add.w	ip, r3, r3, lsl #1
    c0cc:	eb07 1e0c 	add.w	lr, r7, ip, lsl #4
    c0d0:	ea4f 120c 	mov.w	r2, ip, lsl #4
		(ticks_to_expire_current =
    c0d4:	f8de c008 	ldr.w	ip, [lr, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
    c0d8:	458c      	cmp	ip, r1
    c0da:	d9e3      	bls.n	c0a4 <ticker_job+0x800>
    c0dc:	9a04      	ldr	r2, [sp, #16]
	ticker_new->ticks_to_expire = ticks_to_expire;
    c0de:	6081      	str	r1, [r0, #8]
	if (previous == TICKER_NULL) {
    c0e0:	2aff      	cmp	r2, #255	; 0xff
	ticker_new->next = current;
    c0e2:	7003      	strb	r3, [r0, #0]
	if (previous == TICKER_NULL) {
    c0e4:	f040 80f1 	bne.w	c2ca <ticker_job+0xa26>
		instance->ticker_id_head = id;
    c0e8:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c0ec:	2bff      	cmp	r3, #255	; 0xff
    c0ee:	d006      	beq.n	c0fe <ticker_job+0x85a>
		node[current].ticks_to_expire -= ticks_to_expire;
    c0f0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c0f4:	eb07 1703 	add.w	r7, r7, r3, lsl #4
    c0f8:	68bb      	ldr	r3, [r7, #8]
    c0fa:	1a59      	subs	r1, r3, r1
    c0fc:	60b9      	str	r1, [r7, #8]
	ticker->req = ticker->ack + 1;
    c0fe:	78a3      	ldrb	r3, [r4, #2]
    c100:	3301      	adds	r3, #1
    c102:	7063      	strb	r3, [r4, #1]
			if (user_op) {
    c104:	2d00      	cmp	r5, #0
    c106:	d0ad      	beq.n	c064 <ticker_job+0x7c0>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c108:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
    c10c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c10e:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
    c110:	2200      	movs	r2, #0
    c112:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
    c114:	b113      	cbz	r3, c11c <ticker_job+0x878>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c116:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c118:	4610      	mov	r0, r2
    c11a:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
    c11c:	6863      	ldr	r3, [r4, #4]
    c11e:	2b00      	cmp	r3, #0
    c120:	d1a0      	bne.n	c064 <ticker_job+0x7c0>
					ticker->op_context =
    c122:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
    c126:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
    c12a:	9b01      	ldr	r3, [sp, #4]
    c12c:	2bff      	cmp	r3, #255	; 0xff
    c12e:	d19c      	bne.n	c06a <ticker_job+0x7c6>
    c130:	f898 3002 	ldrb.w	r3, [r8, #2]
    c134:	42b3      	cmp	r3, r6
    c136:	d030      	beq.n	c19a <ticker_job+0x8f6>
    c138:	9f05      	ldr	r7, [sp, #20]
				if (first == user->count_user_op) {
    c13a:	f898 0000 	ldrb.w	r0, [r8]
				user_op = &user_ops[user_ops_first];
    c13e:	eb06 0246 	add.w	r2, r6, r6, lsl #1
    c142:	eb06 0282 	add.w	r2, r6, r2, lsl #2
				first = user_ops_first + 1;
    c146:	3601      	adds	r6, #1
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c148:	f817 1022 	ldrb.w	r1, [r7, r2, lsl #2]
				first = user_ops_first + 1;
    c14c:	b2f6      	uxtb	r6, r6
					first = 0U;
    c14e:	42b0      	cmp	r0, r6
    c150:	bf08      	it	eq
    c152:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c154:	2904      	cmp	r1, #4
				user_op = &user_ops[user_ops_first];
    c156:	eb07 0582 	add.w	r5, r7, r2, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
    c15a:	d11c      	bne.n	c196 <ticker_job+0x8f2>
				id_insert = user_op->id;
    c15c:	f895 a001 	ldrb.w	sl, [r5, #1]
				ticker = &node[id_insert];
    c160:	9b03      	ldr	r3, [sp, #12]
    c162:	eb0a 0c4a 	add.w	ip, sl, sl, lsl #1
    c166:	eb03 140c 	add.w	r4, r3, ip, lsl #4
    c16a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
				if (((ticker->req -
    c16e:	7861      	ldrb	r1, [r4, #1]
				      ticker->ack) & 0xff) != 0U) {
    c170:	78a3      	ldrb	r3, [r4, #2]
				if (((ticker->req -
    c172:	1ac9      	subs	r1, r1, r3
    c174:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    c178:	f000 80b1 	beq.w	c2de <ticker_job+0xa3a>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
    c17c:	f04f 0300 	mov.w	r3, #0
    c180:	f807 3022 	strb.w	r3, [r7, r2, lsl #2]
	if (user_op->fp_op_func) {
    c184:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->status = status;
    c186:	2201      	movs	r2, #1
    c188:	62aa      	str	r2, [r5, #40]	; 0x28
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c18a:	4610      	mov	r0, r2
	if (user_op->fp_op_func) {
    c18c:	b10b      	cbz	r3, c192 <ticker_job+0x8ee>
		user_op->fp_op_func(user_op->status, user_op->op_context);
    c18e:	6b29      	ldr	r1, [r5, #48]	; 0x30
    c190:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
    c192:	f898 3002 	ldrb.w	r3, [r8, #2]
    c196:	42b3      	cmp	r3, r6
    c198:	d1cf      	bne.n	c13a <ticker_job+0x896>
	while (count_user--) {
    c19a:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c19c:	4542      	cmp	r2, r8
    c19e:	f1a8 0308 	sub.w	r3, r8, #8
    c1a2:	f000 80e6 	beq.w	c372 <ticker_job+0xace>
    c1a6:	4698      	mov	r8, r3
    c1a8:	e757      	b.n	c05a <ticker_job+0x7b6>
			    ticker->fp_op_func) {
    c1aa:	6a23      	ldr	r3, [r4, #32]
			if ((((ticker->req - ticker->ack) & 0xff) == 1U) &&
    c1ac:	2b00      	cmp	r3, #0
    c1ae:	f43f af3a 	beq.w	c026 <ticker_job+0x782>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
    c1b2:	6a61      	ldr	r1, [r4, #36]	; 0x24
    c1b4:	4798      	blx	r3
    c1b6:	78a2      	ldrb	r2, [r4, #2]
    c1b8:	e735      	b.n	c026 <ticker_job+0x782>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
    c1ba:	b112      	cbz	r2, c1c2 <ticker_job+0x91e>
    c1bc:	7a13      	ldrb	r3, [r2, #8]
    c1be:	2b01      	cmp	r3, #1
    c1c0:	d042      	beq.n	c248 <ticker_job+0x9a4>
				if (!ticker->lazy_current) {
    c1c2:	8be3      	ldrh	r3, [r4, #30]
    c1c4:	930a      	str	r3, [sp, #40]	; 0x28
    c1c6:	2b00      	cmp	r3, #0
    c1c8:	d174      	bne.n	c2b4 <ticker_job+0xa10>
					lazy_periodic = ticker->lazy_periodic;
    c1ca:	8ba3      	ldrh	r3, [r4, #28]
    c1cc:	7866      	ldrb	r6, [r4, #1]
    c1ce:	9304      	str	r3, [sp, #16]
    c1d0:	469e      	mov	lr, r3
				while (count--) {
    c1d2:	1c47      	adds	r7, r0, #1
    c1d4:	9709      	str	r7, [sp, #36]	; 0x24
    c1d6:	e9d4 c208 	ldrd	ip, r2, [r4, #32]
				ticks_to_expire = 0U;
    c1da:	2300      	movs	r3, #0
    c1dc:	910b      	str	r1, [sp, #44]	; 0x2c
    c1de:	4677      	mov	r7, lr
    c1e0:	e00b      	b.n	c1fa <ticker_job+0x956>
    c1e2:	bf00      	nop
    c1e4:	0001fcdc 	.word	0x0001fcdc
    c1e8:	0001fc9c 	.word	0x0001fc9c
    c1ec:	0001fd48 	.word	0x0001fd48
				while (count--) {
    c1f0:	3f01      	subs	r7, #1
    c1f2:	4686      	mov	lr, r0
    c1f4:	1c79      	adds	r1, r7, #1
					ticks_to_expire +=
    c1f6:	4473      	add	r3, lr
				while (count--) {
    c1f8:	d012      	beq.n	c220 <ticker_job+0x97c>
	if ((ticker->remainder_current < BIT(31)) &&
    c1fa:	f8df e2e4 	ldr.w	lr, [pc, #740]	; c4e0 <ticker_job+0xc3c>
    c1fe:	49b7      	ldr	r1, [pc, #732]	; (c4dc <ticker_job+0xc38>)
	ticker->remainder_current += ticker->remainder_periodic;
    c200:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c202:	4496      	add	lr, r2
    c204:	458e      	cmp	lr, r1
    c206:	d8f3      	bhi.n	c1f0 <ticker_job+0x94c>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c208:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
    c20c:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
				while (count--) {
    c210:	3f01      	subs	r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c212:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
				while (count--) {
    c216:	1c79      	adds	r1, r7, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c218:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
					ticks_to_expire +=
    c21c:	4473      	add	r3, lr
				while (count--) {
    c21e:	d1ec      	bne.n	c1fa <ticker_job+0x956>
    c220:	990b      	ldr	r1, [sp, #44]	; 0x2c
    c222:	6262      	str	r2, [r4, #36]	; 0x24
				if (!ticker->must_expire) {
    c224:	2900      	cmp	r1, #0
    c226:	f000 8151 	beq.w	c4cc <ticker_job+0xc28>
				ticker->lazy_current += (lazy_periodic + lazy);
    c22a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    c22c:	9904      	ldr	r1, [sp, #16]
    c22e:	440a      	add	r2, r1
    c230:	83e2      	strh	r2, [r4, #30]
    c232:	e00b      	b.n	c24c <ticker_job+0x9a8>
		is_must_expire_skip = (ticker->must_expire &&
    c234:	4608      	mov	r0, r1
    c236:	e6ca      	b.n	bfce <ticker_job+0x72a>
		instance->ticker_id_head = ticker->next;
    c238:	7823      	ldrb	r3, [r4, #0]
		ticker->ticks_to_expire = 0U;
    c23a:	60a0      	str	r0, [r4, #8]
		instance->ticker_id_head = ticker->next;
    c23c:	f88b 301d 	strb.w	r3, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
    c240:	6863      	ldr	r3, [r4, #4]
    c242:	2b00      	cmp	r3, #0
    c244:	f43f aee4 	beq.w	c010 <ticker_job+0x76c>
				ticker->req = ticker->ack;
    c248:	78a6      	ldrb	r6, [r4, #2]
    c24a:	464b      	mov	r3, r9
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c24c:	9805      	ldr	r0, [sp, #20]
    c24e:	f8db 2014 	ldr.w	r2, [fp, #20]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
    c252:	6961      	ldr	r1, [r4, #20]
			ticks_to_expire_prep(ticker, instance->ticks_current,
    c254:	eb00 0708 	add.w	r7, r0, r8
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c258:	1ab8      	subs	r0, r7, r2
    c25a:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
    c25e:	d10e      	bne.n	c27e <ticker_job+0x9da>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c260:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c264:	4403      	add	r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    c266:	4299      	cmp	r1, r3
    c268:	d211      	bcs.n	c28e <ticker_job+0x9ea>
		ticks_to_expire -= ticks_to_expire_minus;
    c26a:	1a5b      	subs	r3, r3, r1
		ticks_to_expire_minus = 0U;
    c26c:	2100      	movs	r1, #0
			ticker->next = *insert_head;
    c26e:	9a01      	ldr	r2, [sp, #4]
    c270:	7022      	strb	r2, [r4, #0]
			ticker->req++;
    c272:	3601      	adds	r6, #1
    c274:	7066      	strb	r6, [r4, #1]
	ticker->ticks_to_expire = ticks_to_expire;
    c276:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c278:	6161      	str	r1, [r4, #20]
			ticker->req++;
    c27a:	9501      	str	r5, [sp, #4]
    c27c:	e6d4      	b.n	c028 <ticker_job+0x784>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c27e:	1bd2      	subs	r2, r2, r7
    c280:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c284:	4293      	cmp	r3, r2
    c286:	d912      	bls.n	c2ae <ticker_job+0xa0a>
			ticks_to_expire -= delta_current_start;
    c288:	1a9b      	subs	r3, r3, r2
	if (ticks_to_expire > ticks_to_expire_minus) {
    c28a:	4299      	cmp	r1, r3
    c28c:	d3ed      	bcc.n	c26a <ticker_job+0x9c6>
    c28e:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
    c290:	2300      	movs	r3, #0
    c292:	e7ec      	b.n	c26e <ticker_job+0x9ca>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    c294:	6aa2      	ldr	r2, [r4, #40]	; 0x28
		    (((ticker->req - ticker->ack) & 0xff) == 2U) &&
    c296:	2800      	cmp	r0, #0
    c298:	f47f aeb0 	bne.w	bffc <ticker_job+0x758>
		    !is_must_expire_skip &&
    c29c:	b112      	cbz	r2, c2a4 <ticker_job+0xa00>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
    c29e:	7a13      	ldrb	r3, [r2, #8]
    c2a0:	2b01      	cmp	r3, #1
    c2a2:	d0c9      	beq.n	c238 <ticker_job+0x994>
			instance->ticker_id_slot_previous = id_expired;
    c2a4:	f88b 501c 	strb.w	r5, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
    c2a8:	f8cb 6018 	str.w	r6, [fp, #24]
    c2ac:	e6a6      	b.n	bffc <ticker_job+0x758>
			ticks_to_expire_minus +=
    c2ae:	4411      	add	r1, r2
    c2b0:	1ac9      	subs	r1, r1, r3
	if (ticks_to_expire > ticks_to_expire_minus) {
    c2b2:	e7ed      	b.n	c290 <ticker_job+0x9ec>
					ticker->req = ticker->ack;
    c2b4:	f04f 0e00 	mov.w	lr, #0
    c2b8:	78a6      	ldrb	r6, [r4, #2]
					lazy_periodic = 0U;
    c2ba:	f8cd e010 	str.w	lr, [sp, #16]
    c2be:	e788      	b.n	c1d2 <ticker_job+0x92e>
	ticker_new->next = current;
    c2c0:	461a      	mov	r2, r3
	ticker_new->ticks_to_expire = ticks_to_expire;
    c2c2:	6081      	str	r1, [r0, #8]
	ticker_new->next = current;
    c2c4:	f880 c000 	strb.w	ip, [r0]
    c2c8:	4663      	mov	r3, ip
		node[previous].next = id;
    c2ca:	b212      	sxth	r2, r2
    c2cc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c2d0:	0112      	lsls	r2, r2, #4
    c2d2:	f807 a002 	strb.w	sl, [r7, r2]
    c2d6:	e709      	b.n	c0ec <ticker_job+0x848>
    c2d8:	9a04      	ldr	r2, [sp, #16]
    c2da:	4661      	mov	r1, ip
    c2dc:	e6ff      	b.n	c0de <ticker_job+0x83a>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    c2de:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
    c2e0:	f8db 0014 	ldr.w	r0, [fp, #20]
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    c2e4:	f64f 72ff 	movw	r2, #65535	; 0xffff
    c2e8:	4293      	cmp	r3, r2
    c2ea:	d031      	beq.n	c350 <ticker_job+0xaac>
    c2ec:	f884 102c 	strb.w	r1, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    c2f0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    c2f2:	68ef      	ldr	r7, [r5, #12]
	ticker->ext_data = start->ext_data;
    c2f4:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    c2f6:	692a      	ldr	r2, [r5, #16]
    c2f8:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    c2fa:	6067      	str	r7, [r4, #4]
	ticker->timeout_func = start->fp_timeout_func;
    c2fc:	e9d5 2906 	ldrd	r2, r9, [r5, #24]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
    c300:	686f      	ldr	r7, [r5, #4]
	ticker->ticks_slot = start->ticks_slot;
    c302:	61a2      	str	r2, [r4, #24]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c304:	eba7 0e00 	sub.w	lr, r7, r0
	ticker->context = start->context;
    c308:	6a2a      	ldr	r2, [r5, #32]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    c30a:	83a3      	strh	r3, [r4, #28]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c30c:	f41e 0f00 	tst.w	lr, #8388608	; 0x800000
	ticker->context = start->context;
    c310:	e9c4 9203 	strd	r9, r2, [r4, #12]
	ticker->ticks_to_expire = start->ticks_first;
    c314:	68ab      	ldr	r3, [r5, #8]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
    c316:	d10c      	bne.n	c332 <ticker_job+0xa8e>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c318:	f02e 4e7f 	bic.w	lr, lr, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
    c31c:	4473      	add	r3, lr
	if (ticks_to_expire > ticks_to_expire_minus) {
    c31e:	b183      	cbz	r3, c342 <ticker_job+0xa9e>
	ticker->ticks_to_expire = ticks_to_expire;
    c320:	60a3      	str	r3, [r4, #8]
	ticker->remainder_current = 0U;
    c322:	2300      	movs	r3, #0
    c324:	6263      	str	r3, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
    c326:	83e3      	strh	r3, [r4, #30]
	ticker->force = 1U;
    c328:	f04f 0301 	mov.w	r3, #1
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
    c32c:	6161      	str	r1, [r4, #20]
	ticker->force = 1U;
    c32e:	70e3      	strb	r3, [r4, #3]
}
    c330:	e6aa      	b.n	c088 <ticker_job+0x7e4>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c332:	1bc0      	subs	r0, r0, r7
    c334:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
    c338:	4283      	cmp	r3, r0
    c33a:	d905      	bls.n	c348 <ticker_job+0xaa4>
			ticks_to_expire -= delta_current_start;
    c33c:	1a1b      	subs	r3, r3, r0
	if (ticks_to_expire > ticks_to_expire_minus) {
    c33e:	2b00      	cmp	r3, #0
    c340:	d1ee      	bne.n	c320 <ticker_job+0xa7c>
		ticks_to_expire_minus -= ticks_to_expire;
    c342:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c344:	2300      	movs	r3, #0
    c346:	e7eb      	b.n	c320 <ticker_job+0xa7c>
			    (delta_current_start - ticks_to_expire);
    c348:	1ac3      	subs	r3, r0, r3
		ticks_to_expire_minus -= ticks_to_expire;
    c34a:	4619      	mov	r1, r3
		ticks_to_expire = 0U;
    c34c:	2300      	movs	r3, #0
    c34e:	e7e7      	b.n	c320 <ticker_job+0xa7c>
	ticker->must_expire = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 1U :
    c350:	f04f 0301 	mov.w	r3, #1
    c354:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
    c358:	6a6a      	ldr	r2, [r5, #36]	; 0x24
	ticker->ticks_periodic = start->ticks_periodic;
    c35a:	68eb      	ldr	r3, [r5, #12]
	ticker->ext_data = start->ext_data;
    c35c:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->remainder_periodic = start->remainder_periodic;
    c35e:	692a      	ldr	r2, [r5, #16]
    c360:	6222      	str	r2, [r4, #32]
	ticker->ticks_periodic = start->ticks_periodic;
    c362:	6063      	str	r3, [r4, #4]
	ticker->lazy_periodic = (start->lazy == TICKER_LAZY_MUST_EXPIRE) ? 0U :
    c364:	460b      	mov	r3, r1
    c366:	e7c9      	b.n	c2fc <ticker_job+0xa58>
	ticker_new->next = current;
    c368:	f807 300c 	strb.w	r3, [r7, ip]
		instance->ticker_id_head = id;
    c36c:	f88b a01d 	strb.w	sl, [fp, #29]
	if (current != TICKER_NULL) {
    c370:	e6c5      	b.n	c0fe <ticker_job+0x85a>
    c372:	f8db 3000 	ldr.w	r3, [fp]
    c376:	9303      	str	r3, [sp, #12]
	while (rescheduling) {
    c378:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c37c:	9e03      	ldr	r6, [sp, #12]
	uint8_t  rescheduled = 0U;
    c37e:	2300      	movs	r3, #0
    c380:	46ba      	mov	sl, r7
		while (ticker_id_head != TICKER_NULL) {
    c382:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
    c386:	d010      	beq.n	c3aa <ticker_job+0xb06>
    c388:	46d1      	mov	r9, sl
			ticker = &nodes[ticker_id_head];
    c38a:	fa0f f289 	sxth.w	r2, r9
    c38e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
    c392:	eb06 1202 	add.w	r2, r6, r2, lsl #4
			ext_data = ticker->ext_data;
    c396:	6a97      	ldr	r7, [r2, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
    c398:	b117      	cbz	r7, c3a0 <ticker_job+0xafc>
    c39a:	7a39      	ldrb	r1, [r7, #8]
    c39c:	2901      	cmp	r1, #1
    c39e:	d014      	beq.n	c3ca <ticker_job+0xb26>
			ticker_id_head = ticker->next;
    c3a0:	f892 9000 	ldrb.w	r9, [r2]
		while (ticker_id_head != TICKER_NULL) {
    c3a4:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
    c3a8:	d1ef      	bne.n	c38a <ticker_job+0xae6>
	return rescheduled;
    c3aa:	4657      	mov	r7, sl
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
    c3ac:	2b00      	cmp	r3, #0
    c3ae:	f43f ad85 	beq.w	bebc <ticker_job+0x618>
	if (instance->ticker_id_head != ticker_id_old_head) {
    c3b2:	9a06      	ldr	r2, [sp, #24]
    c3b4:	42ba      	cmp	r2, r7
    c3b6:	f47f ad85 	bne.w	bec4 <ticker_job+0x620>
	if (!pending) {
    c3ba:	9a08      	ldr	r2, [sp, #32]
    c3bc:	2a00      	cmp	r2, #0
    c3be:	f000 8180 	beq.w	c6c2 <ticker_job+0xe1e>
	instance->job_guard = 0U;
    c3c2:	2300      	movs	r3, #0
    c3c4:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c3c8:	e585      	b.n	bed6 <ticker_job+0x632>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c3ca:	f89b 301c 	ldrb.w	r3, [fp, #28]
    c3ce:	2bff      	cmp	r3, #255	; 0xff
    c3d0:	d071      	beq.n	c4b6 <ticker_job+0xc12>
			instance->ticks_slot_previous > ticks_elapsed) {
    c3d2:	f8db 0018 	ldr.w	r0, [fp, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
    c3d6:	9b02      	ldr	r3, [sp, #8]
    c3d8:	4283      	cmp	r3, r0
    c3da:	d26c      	bcs.n	c4b6 <ticker_job+0xc12>
			window_start_ticks = instance->ticks_slot_previous -
    c3dc:	1ac0      	subs	r0, r0, r3
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c3de:	e9d7 4300 	ldrd	r4, r3, [r7]
    c3e2:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    c3e4:	f892 c000 	ldrb.w	ip, [r2]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c3e8:	d26d      	bcs.n	c4c6 <ticker_job+0xc22>
		while (ticker_id_iter != TICKER_NULL &&
    c3ea:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
    c3ee:	eba4 0403 	sub.w	r4, r4, r3
		while (ticker_id_iter != TICKER_NULL &&
    c3f2:	d068      	beq.n	c4c6 <ticker_job+0xc22>
		       ticks_start_offset + ticker->ticks_slot <=
    c3f4:	6995      	ldr	r5, [r2, #24]
		while (ticker_id_iter != TICKER_NULL &&
    c3f6:	42ac      	cmp	r4, r5
    c3f8:	f04f 0300 	mov.w	r3, #0
    c3fc:	d333      	bcc.n	c466 <ticker_job+0xbc2>
    c3fe:	469e      	mov	lr, r3
    c400:	9501      	str	r5, [sp, #4]
    c402:	4661      	mov	r1, ip
    c404:	9203      	str	r2, [sp, #12]
    c406:	e01d      	b.n	c444 <ticker_job+0xba0>
			if (node->ticks_to_expire >
    c408:	f8d1 8008 	ldr.w	r8, [r1, #8]
					MIN(ticks_slot_window,
    c40c:	f1a8 0304 	sub.w	r3, r8, #4
			if (node->ticks_to_expire >
    c410:	f1b8 0f04 	cmp.w	r8, #4
					MIN(ticks_slot_window,
    c414:	4473      	add	r3, lr
			if (node->ticks_to_expire >
    c416:	d909      	bls.n	c42c <ticker_job+0xb88>
				window_end_ticks =
    c418:	42a3      	cmp	r3, r4
			if (window_end_ticks > ticks_start_offset +
    c41a:	9a01      	ldr	r2, [sp, #4]
				window_end_ticks =
    c41c:	bf28      	it	cs
    c41e:	4623      	movcs	r3, r4
			if (window_end_ticks > ticks_start_offset +
    c420:	4293      	cmp	r3, r2
    c422:	d903      	bls.n	c42c <ticker_job+0xb88>
			if (ticks_to_expire != 0U &&
    c424:	1b5b      	subs	r3, r3, r5
    c426:	d001      	beq.n	c42c <ticker_job+0xb88>
    c428:	4283      	cmp	r3, r0
    c42a:	d21b      	bcs.n	c464 <ticker_job+0xbc0>
			window_start_ticks  = node->ticks_to_expire +
    c42c:	6988      	ldr	r0, [r1, #24]
			ticker_id_iter = node->next;
    c42e:	7809      	ldrb	r1, [r1, #0]
			ticks_start_offset += node->ticks_to_expire;
    c430:	44c6      	add	lr, r8
			window_start_ticks  = node->ticks_to_expire +
    c432:	4440      	add	r0, r8
			ticks_to_expire     = ticks_slot_window -
    c434:	1b63      	subs	r3, r4, r5
		       ticks_start_offset + ticker->ticks_slot <=
    c436:	eb0e 0205 	add.w	r2, lr, r5
		while (ticker_id_iter != TICKER_NULL &&
    c43a:	29ff      	cmp	r1, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
    c43c:	9201      	str	r2, [sp, #4]
		while (ticker_id_iter != TICKER_NULL &&
    c43e:	d011      	beq.n	c464 <ticker_job+0xbc0>
    c440:	4294      	cmp	r4, r2
    c442:	d30f      	bcc.n	c464 <ticker_job+0xbc0>
			node = &nodes[ticker_id_iter];
    c444:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c448:	eb06 1101 	add.w	r1, r6, r1, lsl #4
			if (node->ext_data &&
    c44c:	f8d1 8028 	ldr.w	r8, [r1, #40]	; 0x28
    c450:	f1b8 0f00 	cmp.w	r8, #0
    c454:	d0d8      	beq.n	c408 <ticker_job+0xb64>
    c456:	f898 8008 	ldrb.w	r8, [r8, #8]
    c45a:	f1b8 0f01 	cmp.w	r8, #1
    c45e:	d1d3      	bne.n	c408 <ticker_job+0xb64>
				ticker_id_iter = node->next;
    c460:	7809      	ldrb	r1, [r1, #0]
				continue;
    c462:	e7e8      	b.n	c436 <ticker_job+0xb92>
    c464:	9a03      	ldr	r2, [sp, #12]
		ticker->ticks_to_expire = ticks_to_expire;
    c466:	6093      	str	r3, [r2, #8]
    c468:	4664      	mov	r4, ip
    c46a:	f04f 0eff 	mov.w	lr, #255	; 0xff
    c46e:	e000      	b.n	c472 <ticker_job+0xbce>
    c470:	4604      	mov	r4, r0
			node = &nodes[ticker_id_iter];
    c472:	b221      	sxth	r1, r4
    c474:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    c478:	eb06 1800 	add.w	r8, r6, r0, lsl #4
    c47c:	0100      	lsls	r0, r0, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
    c47e:	f8d8 5008 	ldr.w	r5, [r8, #8]
    c482:	429d      	cmp	r5, r3
    c484:	d24e      	bcs.n	c524 <ticker_job+0xc80>
				ticker->ticks_to_expire -=
    c486:	1b5b      	subs	r3, r3, r5
    c488:	6093      	str	r3, [r2, #8]
			ticker_id_iter = node->next;
    c48a:	5c30      	ldrb	r0, [r6, r0]
		while (ticker_id_iter != TICKER_NULL) {
    c48c:	28ff      	cmp	r0, #255	; 0xff
    c48e:	46a6      	mov	lr, r4
    c490:	d1ee      	bne.n	c470 <ticker_job+0xbcc>
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c492:	eb01 0141 	add.w	r1, r1, r1, lsl #1
    c496:	0109      	lsls	r1, r1, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
    c498:	f88b c01d 	strb.w	ip, [fp, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
    c49c:	5c73      	ldrb	r3, [r6, r1]
    c49e:	7013      	strb	r3, [r2, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
    c4a0:	f806 9001 	strb.w	r9, [r6, r1]
    c4a4:	46e2      	mov	sl, ip
		ticker->lazy_current--;
    c4a6:	8bd3      	ldrh	r3, [r2, #30]
    c4a8:	3b01      	subs	r3, #1
    c4aa:	83d3      	strh	r3, [r2, #30]
		ext_data->reschedule_state =
    c4ac:	f04f 0202 	mov.w	r2, #2
		rescheduled  = 1U;
    c4b0:	2301      	movs	r3, #1
		ext_data->reschedule_state =
    c4b2:	723a      	strb	r2, [r7, #8]
		rescheduled  = 1U;
    c4b4:	e765      	b.n	c382 <ticker_job+0xade>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c4b6:	e9d7 4300 	ldrd	r4, r3, [r7]
    c4ba:	42a3      	cmp	r3, r4
		ticker_id_iter = nodes[ticker_id_head].next;
    c4bc:	f892 c000 	ldrb.w	ip, [r2]
		window_start_ticks = 0U;
    c4c0:	f04f 0000 	mov.w	r0, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
    c4c4:	d391      	bcc.n	c3ea <ticker_job+0xb46>
		ticker->ticks_to_expire = ticks_to_expire;
    c4c6:	2300      	movs	r3, #0
    c4c8:	6093      	str	r3, [r2, #8]
		while (ticker_id_iter != TICKER_NULL) {
    c4ca:	e7ec      	b.n	c4a6 <ticker_job+0xc02>
					while (ticks_to_expire <
    c4cc:	459a      	cmp	sl, r3
    c4ce:	f67f aeac 	bls.w	c22a <ticker_job+0x986>
    c4d2:	f100 0e01 	add.w	lr, r0, #1
    c4d6:	9409      	str	r4, [sp, #36]	; 0x24
    c4d8:	e00a      	b.n	c4f0 <ticker_job+0xc4c>
    c4da:	bf00      	nop
    c4dc:	7f172b59 	.word	0x7f172b59
    c4e0:	ff172b5a 	.word	0xff172b5a
    c4e4:	4607      	mov	r7, r0
						ticks_to_expire +=
    c4e6:	443b      	add	r3, r7
						lazy++;
    c4e8:	3101      	adds	r1, #1
					while (ticks_to_expire <
    c4ea:	459a      	cmp	sl, r3
						lazy++;
    c4ec:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    c4ee:	d911      	bls.n	c514 <ticker_job+0xc70>
	if ((ticker->remainder_current < BIT(31)) &&
    c4f0:	4f84      	ldr	r7, [pc, #528]	; (c704 <ticker_job+0xe60>)
    c4f2:	4c85      	ldr	r4, [pc, #532]	; (c708 <ticker_job+0xe64>)
	ticker->remainder_current += ticker->remainder_periodic;
    c4f4:	4462      	add	r2, ip
	if ((ticker->remainder_current < BIT(31)) &&
    c4f6:	19d7      	adds	r7, r2, r7
    c4f8:	42a7      	cmp	r7, r4
    c4fa:	d8f3      	bhi.n	c4e4 <ticker_job+0xc40>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c4fc:	4677      	mov	r7, lr
    c4fe:	f1a2 72e8 	sub.w	r2, r2, #30408704	; 0x1d00000
						ticks_to_expire +=
    c502:	443b      	add	r3, r7
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c504:	f5a2 32d4 	sub.w	r2, r2, #108544	; 0x1a800
						lazy++;
    c508:	3101      	adds	r1, #1
					while (ticks_to_expire <
    c50a:	459a      	cmp	sl, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
    c50c:	f5a2 72a5 	sub.w	r2, r2, #330	; 0x14a
						lazy++;
    c510:	b289      	uxth	r1, r1
					while (ticks_to_expire <
    c512:	d8ed      	bhi.n	c4f0 <ticker_job+0xc4c>
    c514:	9804      	ldr	r0, [sp, #16]
    c516:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c518:	4408      	add	r0, r1
    c51a:	b281      	uxth	r1, r0
    c51c:	9104      	str	r1, [sp, #16]
    c51e:	6262      	str	r2, [r4, #36]	; 0x24
    c520:	e683      	b.n	c22a <ticker_job+0x986>
    c522:	4770      	bx	lr
				node->ticks_to_expire -=
    c524:	1aeb      	subs	r3, r5, r3
		if (ticker_id_prev != TICKER_NULL) {
    c526:	f1be 0fff 	cmp.w	lr, #255	; 0xff
				node->ticks_to_expire -=
    c52a:	f8c8 3008 	str.w	r3, [r8, #8]
		if (ticker_id_prev != TICKER_NULL) {
    c52e:	d0ba      	beq.n	c4a6 <ticker_job+0xc02>
    c530:	fa0f f18e 	sxth.w	r1, lr
    c534:	e7ad      	b.n	c492 <ticker_job+0xbee>
	if (!pending) {
    c536:	9b08      	ldr	r3, [sp, #32]
    c538:	2b00      	cmp	r3, #0
    c53a:	f000 80aa 	beq.w	c692 <ticker_job+0xdee>
	instance->job_guard = 0U;
    c53e:	2300      	movs	r3, #0
    c540:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c544:	9b07      	ldr	r3, [sp, #28]
    c546:	2b00      	cmp	r3, #0
    c548:	f040 80c9 	bne.w	c6de <ticker_job+0xe3a>
    c54c:	f89b 201f 	ldrb.w	r2, [fp, #31]
	if (instance->worker_trigger) {
    c550:	b16a      	cbz	r2, c56e <ticker_job+0xcca>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c552:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
    c556:	465b      	mov	r3, fp
    c558:	2201      	movs	r2, #1
    c55a:	2103      	movs	r1, #3
    c55c:	2004      	movs	r0, #4
    c55e:	46a4      	mov	ip, r4
}
    c560:	b00f      	add	sp, #60	; 0x3c
    c562:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
    c566:	4760      	bx	ip
	instance->job_guard = 0U;
    c568:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c56a:	f88b 301e 	strb.w	r3, [fp, #30]
}
    c56e:	b00f      	add	sp, #60	; 0x3c
    c570:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticker->ticks_to_expire -= ticks_elapsed;
    c574:	eba3 0309 	sub.w	r3, r3, r9
    c578:	60a3      	str	r3, [r4, #8]
			break;
    c57a:	f8db 3000 	ldr.w	r3, [fp]
    c57e:	9303      	str	r3, [sp, #12]
    c580:	e559      	b.n	c036 <ticker_job+0x792>
	count_user = instance->count_user;
    c582:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c586:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c58a:	1e5c      	subs	r4, r3, #1
    c58c:	b2e4      	uxtb	r4, r4
    c58e:	2b00      	cmp	r3, #0
    c590:	f43f ac9c 	beq.w	becc <ticker_job+0x628>
		flag_compare_update = 1U;
    c594:	2301      	movs	r3, #1
    c596:	9307      	str	r3, [sp, #28]
    c598:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
    c59c:	f04f 0900 	mov.w	r9, #0
			uop->status = TICKER_STATUS_FAILURE;
    c5a0:	f04f 0a01 	mov.w	sl, #1
    c5a4:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
    c5a6:	7863      	ldrb	r3, [r4, #1]
    c5a8:	78e1      	ldrb	r1, [r4, #3]
		user_op = &user->user_op[0];
    c5aa:	6866      	ldr	r6, [r4, #4]
		while (user->first != user->last) {
    c5ac:	4299      	cmp	r1, r3
    c5ae:	d10c      	bne.n	c5ca <ticker_job+0xd26>
    c5b0:	e05c      	b.n	c66c <ticker_job+0xdc8>
	switch (uop->op) {
    c5b2:	2b01      	cmp	r3, #1
    c5b4:	d056      	beq.n	c664 <ticker_job+0xdc0>
			first = user->first + 1;
    c5b6:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
    c5b8:	7822      	ldrb	r2, [r4, #0]
			first = user->first + 1;
    c5ba:	3301      	adds	r3, #1
    c5bc:	b2db      	uxtb	r3, r3
				first = 0U;
    c5be:	429a      	cmp	r2, r3
    c5c0:	bf08      	it	eq
    c5c2:	2300      	moveq	r3, #0
		while (user->first != user->last) {
    c5c4:	4299      	cmp	r1, r3
			user->first = first;
    c5c6:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
    c5c8:	d050      	beq.n	c66c <ticker_job+0xdc8>
			ticker_job_op_inquire(instance, &user_op[user->first]);
    c5ca:	b21b      	sxth	r3, r3
    c5cc:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    c5d0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    c5d4:	eb06 0283 	add.w	r2, r6, r3, lsl #2
	switch (uop->op) {
    c5d8:	f816 3023 	ldrb.w	r3, [r6, r3, lsl #2]
    c5dc:	2b02      	cmp	r3, #2
    c5de:	d01b      	beq.n	c618 <ticker_job+0xd74>
    c5e0:	2b03      	cmp	r3, #3
    c5e2:	d1e6      	bne.n	c5b2 <ticker_job+0xd0e>
		if (uop->id < instance->count_node) {
    c5e4:	7853      	ldrb	r3, [r2, #1]
    c5e6:	f89b 1008 	ldrb.w	r1, [fp, #8]
    c5ea:	4299      	cmp	r1, r3
    c5ec:	d911      	bls.n	c612 <ticker_job+0xd6e>
			node[uop->id].priority =
    c5ee:	f8db 1000 	ldr.w	r1, [fp]
    c5f2:	7910      	ldrb	r0, [r2, #4]
    c5f4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c5f8:	eb01 1303 	add.w	r3, r1, r3, lsl #4
    c5fc:	f883 002d 	strb.w	r0, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
    c600:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
    c604:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	if (fp_op_func) {
    c606:	b113      	cbz	r3, c60e <ticker_job+0xd6a>
		fp_op_func(uop->status, uop->op_context);
    c608:	6b11      	ldr	r1, [r2, #48]	; 0x30
    c60a:	6a90      	ldr	r0, [r2, #40]	; 0x28
    c60c:	4798      	blx	r3
    c60e:	78e1      	ldrb	r1, [r4, #3]
    c610:	e7d1      	b.n	c5b6 <ticker_job+0xd12>
			uop->status = TICKER_STATUS_FAILURE;
    c612:	f8c2 a028 	str.w	sl, [r2, #40]	; 0x28
    c616:	e7f5      	b.n	c604 <ticker_job+0xd60>
		ticker_by_next_slot_get(instance,
    c618:	e9d2 c101 	ldrd	ip, r1, [r2, #4]
	_ticker_id_head = *ticker_id_head;
    c61c:	f89c 3000 	ldrb.w	r3, [ip]
		ticker_by_next_slot_get(instance,
    c620:	f8d2 e00c 	ldr.w	lr, [r2, #12]
	node = instance->nodes;
    c624:	f8db 5000 	ldr.w	r5, [fp]
	if ((_ticker_id_head == TICKER_NULL) ||
    c628:	f8db 0014 	ldr.w	r0, [fp, #20]
    c62c:	2bff      	cmp	r3, #255	; 0xff
    c62e:	d002      	beq.n	c636 <ticker_job+0xd92>
    c630:	680f      	ldr	r7, [r1, #0]
    c632:	4287      	cmp	r7, r0
    c634:	d026      	beq.n	c684 <ticker_job+0xde0>
		_ticker_id_head = instance->ticker_id_head;
    c636:	f89b 301d 	ldrb.w	r3, [fp, #29]
		*ticks_current = instance->ticks_current;
    c63a:	6008      	str	r0, [r1, #0]
		_ticks_to_expire = 0U;
    c63c:	2100      	movs	r1, #0
    c63e:	e00b      	b.n	c658 <ticker_job+0xdb4>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
    c640:	eb03 0043 	add.w	r0, r3, r3, lsl #1
    c644:	eb05 1800 	add.w	r8, r5, r0, lsl #4
    c648:	0100      	lsls	r0, r0, #4
	while ((_ticker_id_head != TICKER_NULL) &&
    c64a:	f8d8 7018 	ldr.w	r7, [r8, #24]
    c64e:	b9af      	cbnz	r7, c67c <ticker_job+0xdd8>
		_ticks_to_expire += ticker->ticks_to_expire;
    c650:	f8d8 8008 	ldr.w	r8, [r8, #8]
		_ticker_id_head = ticker->next;
    c654:	5c2b      	ldrb	r3, [r5, r0]
		_ticks_to_expire += ticker->ticks_to_expire;
    c656:	4441      	add	r1, r8
	while ((_ticker_id_head != TICKER_NULL) &&
    c658:	2bff      	cmp	r3, #255	; 0xff
    c65a:	d1f1      	bne.n	c640 <ticker_job+0xd9c>
	*ticker_id_head = _ticker_id_head;
    c65c:	f88c 3000 	strb.w	r3, [ip]
	*ticks_to_expire = _ticks_to_expire;
    c660:	f8ce 1000 	str.w	r1, [lr]
		fp_op_func = uop->fp_op_func;
    c664:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
    c666:	f8c2 9028 	str.w	r9, [r2, #40]	; 0x28
		break;
    c66a:	e7cc      	b.n	c606 <ticker_job+0xd62>
	while (count_user--) {
    c66c:	9a01      	ldr	r2, [sp, #4]
    c66e:	42a2      	cmp	r2, r4
    c670:	f1a4 0308 	sub.w	r3, r4, #8
    c674:	f43f af63 	beq.w	c53e <ticker_job+0xc9a>
    c678:	461c      	mov	r4, r3
    c67a:	e794      	b.n	c5a6 <ticker_job+0xd02>
		_ticks_to_expire += ticker->ticks_to_expire;
    c67c:	f8d8 0008 	ldr.w	r0, [r8, #8]
    c680:	4401      	add	r1, r0
    c682:	e7eb      	b.n	c65c <ticker_job+0xdb8>
		ticker = &node[_ticker_id_head];
    c684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    c688:	011b      	lsls	r3, r3, #4
	_ticks_to_expire = *ticks_to_expire;
    c68a:	f8de 1000 	ldr.w	r1, [lr]
		_ticker_id_head = ticker->next;
    c68e:	5ceb      	ldrb	r3, [r5, r3]
	while ((_ticker_id_head != TICKER_NULL) &&
    c690:	e7e2      	b.n	c658 <ticker_job+0xdb4>
	count_user = instance->count_user;
    c692:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
    c696:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c69a:	1e5c      	subs	r4, r3, #1
    c69c:	b2e4      	uxtb	r4, r4
    c69e:	2b00      	cmp	r3, #0
    c6a0:	f47f af7a 	bne.w	c598 <ticker_job+0xcf4>
    c6a4:	e74b      	b.n	c53e <ticker_job+0xc9a>
		if (cntr_stop() == 0) {
    c6a6:	f009 fb2b 	bl	15d00 <cntr_stop>
    c6aa:	2800      	cmp	r0, #0
    c6ac:	f47f af4e 	bne.w	c54c <ticker_job+0xca8>
			instance->ticks_slot_previous = 0U;
    c6b0:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
    c6b4:	f009 fb4a 	bl	15d4c <cntr_cnt_get>
    c6b8:	f89b 201f 	ldrb.w	r2, [fp, #31]
    c6bc:	f8cb 0014 	str.w	r0, [fp, #20]
    c6c0:	e746      	b.n	c550 <ticker_job+0xcac>
	count_user = instance->count_user;
    c6c2:	f89b 2009 	ldrb.w	r2, [fp, #9]
	users = &instance->users[0];
    c6c6:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
    c6ca:	1e54      	subs	r4, r2, #1
    c6cc:	b2e4      	uxtb	r4, r4
    c6ce:	2a00      	cmp	r2, #0
    c6d0:	f47f af61 	bne.w	c596 <ticker_job+0xcf2>
	instance->job_guard = 0U;
    c6d4:	9b08      	ldr	r3, [sp, #32]
    c6d6:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
    c6da:	f7ff bbfc 	b.w	bed6 <ticker_job+0x632>
    c6de:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c6e2:	f7ff bbf8 	b.w	bed6 <ticker_job+0x632>
		ticks_current = cntr_cnt_get();
    c6e6:	f009 fb31 	bl	15d4c <cntr_cnt_get>
    c6ea:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
    c6ec:	f009 faf8 	bl	15ce0 <cntr_start>
    c6f0:	f89b 701d 	ldrb.w	r7, [fp, #29]
    c6f4:	2800      	cmp	r0, #0
    c6f6:	f47f abf5 	bne.w	bee4 <ticker_job+0x640>
			instance->ticks_current = ticks_current;
    c6fa:	f8cb 4014 	str.w	r4, [fp, #20]
    c6fe:	f7ff bbf1 	b.w	bee4 <ticker_job+0x640>
    c702:	bf00      	nop
    c704:	ff172b5a 	.word	0xff172b5a
    c708:	7f172b59 	.word	0x7f172b59

0000c70c <ticker_init>:
{
    c70c:	b4f0      	push	{r4, r5, r6, r7}
    c70e:	9f04      	ldr	r7, [sp, #16]
    c710:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c714:	9e06      	ldr	r6, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
    c716:	2800      	cmp	r0, #0
    c718:	d13e      	bne.n	c798 <ticker_init+0x8c>
	instance->count_node = count_node;
    c71a:	f8df c084 	ldr.w	ip, [pc, #132]	; c7a0 <ticker_init+0x94>
	while (count_node--) {
    c71e:	1e4d      	subs	r5, r1, #1
	instance->count_node = count_node;
    c720:	f88c 1008 	strb.w	r1, [ip, #8]
	instance->nodes = node;
    c724:	f8cc 2000 	str.w	r2, [ip]
	while (count_node--) {
    c728:	b2ed      	uxtb	r5, r5
    c72a:	b149      	cbz	r1, c740 <ticker_init+0x34>
    c72c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
    c730:	eb02 1105 	add.w	r1, r2, r5, lsl #4
    c734:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
    c736:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
    c73a:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
    c73e:	d1f9      	bne.n	c734 <ticker_init+0x28>
	while (count_user--) {
    c740:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
    c742:	f88c 3009 	strb.w	r3, [ip, #9]
	instance->users = user;
    c746:	f8cc 7004 	str.w	r7, [ip, #4]
	while (count_user--) {
    c74a:	b2d2      	uxtb	r2, r2
    c74c:	b17b      	cbz	r3, c76e <ticker_init+0x62>
    c74e:	eb07 02c2 	add.w	r2, r7, r2, lsl #3
		users[count_user].user_op = user_op_;
    c752:	6056      	str	r6, [r2, #4]
		user_op_ += users[count_user].count_user_op;
    c754:	4611      	mov	r1, r2
    c756:	f812 3908 	ldrb.w	r3, [r2], #-8
    c75a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
		count_op -= users[count_user].count_user_op;
    c75e:	1ae4      	subs	r4, r4, r3
	while (count_user--) {
    c760:	428f      	cmp	r7, r1
		user_op_ += users[count_user].count_user_op;
    c762:	eb03 0380 	add.w	r3, r3, r0, lsl #2
		count_op -= users[count_user].count_user_op;
    c766:	b2e4      	uxtb	r4, r4
		user_op_ += users[count_user].count_user_op;
    c768:	eb06 0683 	add.w	r6, r6, r3, lsl #2
	while (count_user--) {
    c76c:	d1f1      	bne.n	c752 <ticker_init+0x46>
	if (count_op) {
    c76e:	b99c      	cbnz	r4, c798 <ticker_init+0x8c>
	instance->caller_id_get_cb = caller_id_get_cb;
    c770:	9a07      	ldr	r2, [sp, #28]
    c772:	f8cc 2020 	str.w	r2, [ip, #32]
	instance->sched_cb = sched_cb;
    c776:	9a08      	ldr	r2, [sp, #32]
    c778:	f8cc 2024 	str.w	r2, [ip, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
    c77c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
    c780:	9a09      	ldr	r2, [sp, #36]	; 0x24
	instance->ticks_elapsed_first = 0U;
    c782:	f8ac 400a 	strh.w	r4, [ip, #10]
	return TICKER_STATUS_SUCCESS;
    c786:	4620      	mov	r0, r4
	instance->ticks_slot_previous = 0U;
    c788:	e9cc 4405 	strd	r4, r4, [ip, #20]
}
    c78c:	bcf0      	pop	{r4, r5, r6, r7}
	instance->trigger_set_cb = trigger_set_cb;
    c78e:	f8cc 2028 	str.w	r2, [ip, #40]	; 0x28
	instance->ticker_id_slot_previous = TICKER_NULL;
    c792:	f8ac 301c 	strh.w	r3, [ip, #28]
}
    c796:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
    c798:	2001      	movs	r0, #1
}
    c79a:	bcf0      	pop	{r4, r5, r6, r7}
    c79c:	4770      	bx	lr
    c79e:	bf00      	nop
    c7a0:	200016f0 	.word	0x200016f0

0000c7a4 <ticker_trigger>:
	if (instance->sched_cb) {
    c7a4:	4b0a      	ldr	r3, [pc, #40]	; (c7d0 <ticker_trigger+0x2c>)
    c7a6:	222c      	movs	r2, #44	; 0x2c
    c7a8:	fb02 3200 	mla	r2, r2, r0, r3
{
    c7ac:	b410      	push	{r4}
	if (instance->sched_cb) {
    c7ae:	6a54      	ldr	r4, [r2, #36]	; 0x24
    c7b0:	b15c      	cbz	r4, c7ca <ticker_trigger+0x26>
	instance = &_instance[instance_index];
    c7b2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
    c7b6:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    c7ba:	eb03 0380 	add.w	r3, r3, r0, lsl #2
    c7be:	46a4      	mov	ip, r4
    c7c0:	2201      	movs	r2, #1
}
    c7c2:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
    c7c4:	2103      	movs	r1, #3
    c7c6:	2002      	movs	r0, #2
    c7c8:	4760      	bx	ip
}
    c7ca:	bc10      	pop	{r4}
    c7cc:	4770      	bx	lr
    c7ce:	bf00      	nop
    c7d0:	200016f0 	.word	0x200016f0

0000c7d4 <ticker_start_ext>:
{
    c7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
    c7d8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; c87c <ticker_start_ext+0xa8>
{
    c7dc:	f8bd e02c 	ldrh.w	lr, [sp, #44]	; 0x2c
	user = &instance->users[user_id];
    c7e0:	272c      	movs	r7, #44	; 0x2c
    c7e2:	fb07 8700 	mla	r7, r7, r0, r8
{
    c7e6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    c7e8:	687d      	ldr	r5, [r7, #4]
    c7ea:	eb05 0cc1 	add.w	ip, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    c7ee:	f815 9031 	ldrb.w	r9, [r5, r1, lsl #3]
	last = user->last + 1;
    c7f2:	f89c 6003 	ldrb.w	r6, [ip, #3]
	struct ticker_instance *instance = &_instance[instance_index];
    c7f6:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    c7fa:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    c7fe:	1c75      	adds	r5, r6, #1
{
    c800:	4608      	mov	r0, r1
	last = user->last + 1;
    c802:	b2ed      	uxtb	r5, r5
	if (last == user->first) {
    c804:	f89c 1001 	ldrb.w	r1, [ip, #1]
		last = 0U;
    c808:	45a9      	cmp	r9, r5
    c80a:	bf98      	it	ls
    c80c:	2500      	movls	r5, #0
	if (last == user->first) {
    c80e:	42a9      	cmp	r1, r5
	struct ticker_instance *instance = &_instance[instance_index];
    c810:	eb08 0884 	add.w	r8, r8, r4, lsl #2
	if (last == user->first) {
    c814:	d02f      	beq.n	c876 <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
    c816:	f8dc 1004 	ldr.w	r1, [ip, #4]
    c81a:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    c81e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    c822:	eb01 0486 	add.w	r4, r1, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
    c826:	f04f 0904 	mov.w	r9, #4
    c82a:	f801 9026 	strb.w	r9, [r1, r6, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
    c82e:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
    c830:	9b08      	ldr	r3, [sp, #32]
    c832:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
    c834:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c836:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
    c838:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c83a:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
    c83c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    c83e:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
    c840:	9b11      	ldr	r3, [sp, #68]	; 0x44
    c842:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
    c844:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c846:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
    c848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    c84a:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
    c84c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    c84e:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    c850:	2102      	movs	r1, #2
	user_op->op_context = op_context;
    c852:	9b10      	ldr	r3, [sp, #64]	; 0x40
	user_op->id = ticker_id;
    c854:	7062      	strb	r2, [r4, #1]
	user_op->params.start.lazy = lazy;
    c856:	f8a4 e014 	strh.w	lr, [r4, #20]
	user_op->op_context = op_context;
    c85a:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    c85c:	62a1      	str	r1, [r4, #40]	; 0x28
	user->last = last;
    c85e:	f88c 5003 	strb.w	r5, [ip, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c862:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    c866:	4798      	blx	r3
    c868:	4643      	mov	r3, r8
    c86a:	4649      	mov	r1, r9
    c86c:	2200      	movs	r2, #0
    c86e:	47a8      	blx	r5
	return user_op->status;
    c870:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    c872:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
    c876:	2001      	movs	r0, #1
}
    c878:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    c87c:	200016f0 	.word	0x200016f0

0000c880 <ticker_start>:
{
    c880:	b530      	push	{r4, r5, lr}
    c882:	b08b      	sub	sp, #44	; 0x2c
    c884:	e9dd 540e 	ldrd	r5, r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
    c888:	9500      	str	r5, [sp, #0]
{
    c88a:	9d10      	ldr	r5, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
    c88c:	9401      	str	r4, [sp, #4]
    c88e:	9502      	str	r5, [sp, #8]
{
    c890:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
    c894:	9d12      	ldr	r5, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
    c896:	9403      	str	r4, [sp, #12]
    c898:	9504      	str	r5, [sp, #16]
{
    c89a:	9c13      	ldr	r4, [sp, #76]	; 0x4c
    c89c:	9d14      	ldr	r5, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
    c89e:	9405      	str	r4, [sp, #20]
    c8a0:	9506      	str	r5, [sp, #24]
{
    c8a2:	9c15      	ldr	r4, [sp, #84]	; 0x54
    c8a4:	9d16      	ldr	r5, [sp, #88]	; 0x58
	return ticker_start_ext(instance_index, user_id, ticker_id,
    c8a6:	9407      	str	r4, [sp, #28]
    c8a8:	2400      	movs	r4, #0
    c8aa:	e9cd 5408 	strd	r5, r4, [sp, #32]
    c8ae:	f7ff ff91 	bl	c7d4 <ticker_start_ext>
}
    c8b2:	b00b      	add	sp, #44	; 0x2c
    c8b4:	bd30      	pop	{r4, r5, pc}
    c8b6:	bf00      	nop

0000c8b8 <ticker_update>:
	struct ticker_instance *instance = &_instance[instance_index];
    c8b8:	f8df c098 	ldr.w	ip, [pc, #152]	; c954 <ticker_update+0x9c>
{
    c8bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	user = &instance->users[user_id];
    c8c0:	272c      	movs	r7, #44	; 0x2c
    c8c2:	fb07 c700 	mla	r7, r7, r0, ip
{
    c8c6:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    c8c8:	687d      	ldr	r5, [r7, #4]
{
    c8ca:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
    c8ce:	f89d e030 	ldrb.w	lr, [sp, #48]	; 0x30
    c8d2:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    c8d4:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    c8d8:	f815 a030 	ldrb.w	sl, [r5, r0, lsl #3]
	last = user->last + 1;
    c8dc:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    c8de:	f891 9001 	ldrb.w	r9, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    c8e2:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    c8e6:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    c8ea:	1c75      	adds	r5, r6, #1
    c8ec:	b2ed      	uxtb	r5, r5
		last = 0U;
    c8ee:	45aa      	cmp	sl, r5
    c8f0:	bf98      	it	ls
    c8f2:	2500      	movls	r5, #0
	if (last == user->first) {
    c8f4:	45a9      	cmp	r9, r5
	struct ticker_instance *instance = &_instance[instance_index];
    c8f6:	eb0c 0a84 	add.w	sl, ip, r4, lsl #2
	if (last == user->first) {
    c8fa:	d028      	beq.n	c94e <ticker_update+0x96>
	user_op = &user->user_op[user->last];
    c8fc:	f8d1 c004 	ldr.w	ip, [r1, #4]
    c900:	eb06 0446 	add.w	r4, r6, r6, lsl #1
    c904:	eb06 0684 	add.w	r6, r6, r4, lsl #2
    c908:	eb0c 0486 	add.w	r4, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
    c90c:	f04f 0905 	mov.w	r9, #5
    c910:	f80c 9026 	strb.w	r9, [ip, r6, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
    c914:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
    c916:	9b08      	ldr	r3, [sp, #32]
    c918:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
    c91a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    c91c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
    c91e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    c920:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
    c922:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c924:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    c926:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    c928:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	user_op->id = ticker_id;
    c92a:	7062      	strb	r2, [r4, #1]
	user_op->params.update.force = force;
    c92c:	f884 e016 	strb.w	lr, [r4, #22]
	user_op->op_context = op_context;
    c930:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->params.update.lazy = lazy;
    c932:	f8a4 8014 	strh.w	r8, [r4, #20]
	user_op->status = TICKER_STATUS_BUSY;
    c936:	62a6      	str	r6, [r4, #40]	; 0x28
	user->last = last;
    c938:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c93a:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    c93e:	4798      	blx	r3
    c940:	4653      	mov	r3, sl
    c942:	2200      	movs	r2, #0
    c944:	2104      	movs	r1, #4
    c946:	47a8      	blx	r5
	return user_op->status;
    c948:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
    c94a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return TICKER_STATUS_FAILURE;
    c94e:	2001      	movs	r0, #1
}
    c950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    c954:	200016f0 	.word	0x200016f0

0000c958 <ticker_stop>:
	struct ticker_instance *instance = &_instance[instance_index];
    c958:	f8df c084 	ldr.w	ip, [pc, #132]	; c9e0 <ticker_stop+0x88>
{
    c95c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	user = &instance->users[user_id];
    c960:	272c      	movs	r7, #44	; 0x2c
    c962:	fb07 c700 	mla	r7, r7, r0, ip
{
    c966:	4604      	mov	r4, r0
	user = &instance->users[user_id];
    c968:	687d      	ldr	r5, [r7, #4]
{
    c96a:	4608      	mov	r0, r1
	user = &instance->users[user_id];
    c96c:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
	if (last >= user->count_user_op) {
    c970:	f815 8030 	ldrb.w	r8, [r5, r0, lsl #3]
	last = user->last + 1;
    c974:	78ce      	ldrb	r6, [r1, #3]
	if (last == user->first) {
    c976:	f891 e001 	ldrb.w	lr, [r1, #1]
	struct ticker_instance *instance = &_instance[instance_index];
    c97a:	eb04 0584 	add.w	r5, r4, r4, lsl #2
    c97e:	eb04 0445 	add.w	r4, r4, r5, lsl #1
	last = user->last + 1;
    c982:	1c75      	adds	r5, r6, #1
    c984:	b2ed      	uxtb	r5, r5
		last = 0U;
    c986:	45a8      	cmp	r8, r5
    c988:	bf98      	it	ls
    c98a:	2500      	movls	r5, #0
	if (last == user->first) {
    c98c:	45ae      	cmp	lr, r5
	struct ticker_instance *instance = &_instance[instance_index];
    c98e:	eb0c 0484 	add.w	r4, ip, r4, lsl #2
	if (last == user->first) {
    c992:	d021      	beq.n	c9d8 <ticker_stop+0x80>
	user_op = &user->user_op[user->last];
    c994:	f8d1 c004 	ldr.w	ip, [r1, #4]
    c998:	eb06 0e46 	add.w	lr, r6, r6, lsl #1
    c99c:	eb06 068e 	add.w	r6, r6, lr, lsl #2
    c9a0:	eb0c 0886 	add.w	r8, ip, r6, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
    c9a4:	f04f 0e06 	mov.w	lr, #6
    c9a8:	f80c e026 	strb.w	lr, [ip, r6, lsl #2]
	user_op->fp_op_func = fp_op_func;
    c9ac:	f8c8 302c 	str.w	r3, [r8, #44]	; 0x2c
	user_op->status = TICKER_STATUS_BUSY;
    c9b0:	2602      	movs	r6, #2
	user_op->op_context = op_context;
    c9b2:	9b06      	ldr	r3, [sp, #24]
	user_op->id = ticker_id;
    c9b4:	f888 2001 	strb.w	r2, [r8, #1]
	user_op->op_context = op_context;
    c9b8:	f8c8 3030 	str.w	r3, [r8, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
    c9bc:	f8c8 6028 	str.w	r6, [r8, #40]	; 0x28
	user->last = last;
    c9c0:	70cd      	strb	r5, [r1, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
    c9c2:	e9d7 3508 	ldrd	r3, r5, [r7, #32]
    c9c6:	4798      	blx	r3
    c9c8:	4623      	mov	r3, r4
    c9ca:	2200      	movs	r2, #0
    c9cc:	2104      	movs	r1, #4
    c9ce:	47a8      	blx	r5
	return user_op->status;
    c9d0:	f8d8 0028 	ldr.w	r0, [r8, #40]	; 0x28
}
    c9d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
    c9d8:	2001      	movs	r0, #1
}
    c9da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    c9de:	bf00      	nop
    c9e0:	200016f0 	.word	0x200016f0

0000c9e4 <ticker_ticks_now_get>:
	return cntr_cnt_get();
    c9e4:	f009 b9b2 	b.w	15d4c <cntr_cnt_get>

0000c9e8 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
    c9e8:	1a40      	subs	r0, r0, r1
}
    c9ea:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    c9ee:	4770      	bx	lr

0000c9f0 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
    c9f0:	2801      	cmp	r0, #1
    c9f2:	d813      	bhi.n	ca1c <ll_addr_get+0x2c>
{
    c9f4:	b508      	push	{r3, lr}
		return NULL;
	}

	if (addr_type) {
    c9f6:	b948      	cbnz	r0, ca0c <ll_addr_get+0x1c>
		}

		return rnd_addr;
	}

	if (bdaddr) {
    c9f8:	b131      	cbz	r1, ca08 <ll_addr_get+0x18>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
    c9fa:	4608      	mov	r0, r1
    c9fc:	2206      	movs	r2, #6
    c9fe:	4909      	ldr	r1, [pc, #36]	; (ca24 <ll_addr_get+0x34>)
    ca00:	f00f f813 	bl	1ba2a <memcpy>
	}

	return pub_addr;
    ca04:	4807      	ldr	r0, [pc, #28]	; (ca24 <ll_addr_get+0x34>)
}
    ca06:	bd08      	pop	{r3, pc}
	return pub_addr;
    ca08:	4806      	ldr	r0, [pc, #24]	; (ca24 <ll_addr_get+0x34>)
}
    ca0a:	bd08      	pop	{r3, pc}
		if (bdaddr) {
    ca0c:	b141      	cbz	r1, ca20 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
    ca0e:	4608      	mov	r0, r1
    ca10:	2206      	movs	r2, #6
    ca12:	4905      	ldr	r1, [pc, #20]	; (ca28 <ll_addr_get+0x38>)
    ca14:	f00f f809 	bl	1ba2a <memcpy>
		return rnd_addr;
    ca18:	4803      	ldr	r0, [pc, #12]	; (ca28 <ll_addr_get+0x38>)
}
    ca1a:	bd08      	pop	{r3, pc}
		return NULL;
    ca1c:	2000      	movs	r0, #0
}
    ca1e:	4770      	bx	lr
		return rnd_addr;
    ca20:	4801      	ldr	r0, [pc, #4]	; (ca28 <ll_addr_get+0x38>)
}
    ca22:	bd08      	pop	{r3, pc}
    ca24:	2000171c 	.word	0x2000171c
    ca28:	20001724 	.word	0x20001724

0000ca2c <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
    ca2c:	b570      	push	{r4, r5, r6, lr}
    ca2e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
    ca30:	2000      	movs	r0, #0
{
    ca32:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
    ca34:	f002 ffce 	bl	f9d4 <ull_adv_is_enabled>
    ca38:	b978      	cbnz	r0, ca5a <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
    ca3a:	b13c      	cbz	r4, ca4c <ll_addr_set+0x20>
    ca3c:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
    ca3e:	4631      	mov	r1, r6
    ca40:	2206      	movs	r2, #6
    ca42:	4807      	ldr	r0, [pc, #28]	; (ca60 <ll_addr_set+0x34>)
    ca44:	f00e fff1 	bl	1ba2a <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
    ca48:	4628      	mov	r0, r5
}
    ca4a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
    ca4c:	4631      	mov	r1, r6
    ca4e:	2206      	movs	r2, #6
    ca50:	4804      	ldr	r0, [pc, #16]	; (ca64 <ll_addr_set+0x38>)
    ca52:	f00e ffea 	bl	1ba2a <memcpy>
	return 0;
    ca56:	4620      	mov	r0, r4
}
    ca58:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
    ca5a:	200c      	movs	r0, #12
}
    ca5c:	bd70      	pop	{r4, r5, r6, pc}
    ca5e:	bf00      	nop
    ca60:	20001724 	.word	0x20001724
    ca64:	2000171c 	.word	0x2000171c

0000ca68 <ll_tx_pwr_lvl_get>:
#include "ull_conn_types.h"
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
    ca68:	b570      	push	{r4, r5, r6, lr}
    ca6a:	461e      	mov	r6, r3
	switch (handle_type) {
    ca6c:	4604      	mov	r4, r0
    ca6e:	b170      	cbz	r0, ca8e <ll_tx_pwr_lvl_get+0x26>
    ca70:	2802      	cmp	r0, #2
    ca72:	d10a      	bne.n	ca8a <ll_tx_pwr_lvl_get+0x22>
#endif /* CONFIG_BT_OBSERVER && CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL*/
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
    ca74:	4608      	mov	r0, r1
    ca76:	4615      	mov	r5, r2
    ca78:	f003 fc64 	bl	10344 <ll_connected_get>
			if (!conn) {
    ca7c:	b1a0      	cbz	r0, caa8 <ll_tx_pwr_lvl_get+0x40>
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
			}

			if (type) {
    ca7e:	b975      	cbnz	r5, ca9e <ll_tx_pwr_lvl_get+0x36>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
			} else {
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
				/* Current level is requested */
				*tx_pwr_lvl = conn->lll.tx_pwr_lvl;
    ca80:	f990 30c1 	ldrsb.w	r3, [r0, #193]	; 0xc1
    ca84:	7033      	strb	r3, [r6, #0]
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
    ca86:	4628      	mov	r0, r5
}
    ca88:	bd70      	pop	{r4, r5, r6, pc}
	switch (handle_type) {
    ca8a:	2001      	movs	r0, #1
}
    ca8c:	bd70      	pop	{r4, r5, r6, pc}
			adv = ull_adv_set_get(handle);
    ca8e:	f002 ff71 	bl	f974 <ull_adv_set_get>
			if (!adv) {
    ca92:	b148      	cbz	r0, caa8 <ll_tx_pwr_lvl_get+0x40>
			*tx_pwr_lvl = adv->lll.tx_pwr_lvl;
    ca94:	f990 30cb 	ldrsb.w	r3, [r0, #203]	; 0xcb
    ca98:	7033      	strb	r3, [r6, #0]
	return BT_HCI_ERR_SUCCESS;
    ca9a:	4620      	mov	r0, r4
}
    ca9c:	bd70      	pop	{r4, r5, r6, pc}
				*tx_pwr_lvl = lll_radio_tx_pwr_max_get();
    ca9e:	f007 ff13 	bl	148c8 <lll_radio_tx_pwr_max_get>
    caa2:	7030      	strb	r0, [r6, #0]
	return BT_HCI_ERR_SUCCESS;
    caa4:	2000      	movs	r0, #0
}
    caa6:	bd70      	pop	{r4, r5, r6, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    caa8:	2002      	movs	r0, #2
}
    caaa:	bd70      	pop	{r4, r5, r6, pc}

0000caac <ll_tx_pwr_lvl_set>:


uint8_t ll_tx_pwr_lvl_set(uint8_t handle_type, uint16_t handle,
			  int8_t *const tx_pwr_lvl)
{
    caac:	b570      	push	{r4, r5, r6, lr}
    caae:	4604      	mov	r4, r0
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	if (*tx_pwr_lvl == BT_HCI_VS_LL_TX_POWER_LEVEL_NO_PREF) {
    cab0:	f992 0000 	ldrsb.w	r0, [r2]
    cab4:	287f      	cmp	r0, #127	; 0x7f
		/* If no preference selected, then use default Tx power */
		*tx_pwr_lvl = RADIO_TXP_DEFAULT;
    cab6:	bf04      	itt	eq
    cab8:	2000      	moveq	r0, #0
    caba:	7010      	strbeq	r0, [r2, #0]
{
    cabc:	4615      	mov	r5, r2
    cabe:	460e      	mov	r6, r1
	/**
	 * Check that desired Tx power matches the achievable transceiver
	 * Tx power capabilities by flooring - if selected power matches than
	 * is used, otherwise next smaller power available is used.
	 */
	*tx_pwr_lvl = lll_radio_tx_pwr_floor(*tx_pwr_lvl);
    cac0:	f007 ff04 	bl	148cc <lll_radio_tx_pwr_floor>
    cac4:	7028      	strb	r0, [r5, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	switch (handle_type) {
    cac6:	b16c      	cbz	r4, cae4 <ll_tx_pwr_lvl_set+0x38>
    cac8:	2c02      	cmp	r4, #2
    caca:	d109      	bne.n	cae0 <ll_tx_pwr_lvl_set+0x34>
#endif /* CONFIG_BT_OBSERVER */
#if defined(CONFIG_BT_CONN)
		case (BT_HCI_VS_LL_HANDLE_TYPE_CONN): {
			struct ll_conn *conn;

			conn = ll_connected_get(handle);
    cacc:	4630      	mov	r0, r6
    cace:	f003 fc39 	bl	10344 <ll_connected_get>
			if (!conn) {
    cad2:	b188      	cbz	r0, caf8 <ll_tx_pwr_lvl_set+0x4c>
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
			}
			conn->lll.tx_pwr_lvl = *tx_pwr_lvl;
    cad4:	f995 3000 	ldrsb.w	r3, [r5]
    cad8:	f880 30c1 	strb.w	r3, [r0, #193]	; 0xc1
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
		}
	}

	return BT_HCI_ERR_SUCCESS;
    cadc:	2000      	movs	r0, #0
}
    cade:	bd70      	pop	{r4, r5, r6, pc}
	switch (handle_type) {
    cae0:	2001      	movs	r0, #1
}
    cae2:	bd70      	pop	{r4, r5, r6, pc}
			adv = ull_adv_set_get(handle);
    cae4:	4620      	mov	r0, r4
    cae6:	f002 ff45 	bl	f974 <ull_adv_set_get>
			if (!adv) {
    caea:	b128      	cbz	r0, caf8 <ll_tx_pwr_lvl_set+0x4c>
			adv->lll.tx_pwr_lvl = *tx_pwr_lvl;
    caec:	f995 3000 	ldrsb.w	r3, [r5]
    caf0:	f880 30cb 	strb.w	r3, [r0, #203]	; 0xcb
	return BT_HCI_ERR_SUCCESS;
    caf4:	4620      	mov	r0, r4
}
    caf6:	bd70      	pop	{r4, r5, r6, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
    caf8:	2002      	movs	r0, #2
}
    cafa:	bd70      	pop	{r4, r5, r6, pc}

0000cafc <ll_tx_pwr_get>:

void ll_tx_pwr_get(int8_t *min, int8_t *max)
{
    cafc:	b538      	push	{r3, r4, r5, lr}
    cafe:	460c      	mov	r4, r1
    cb00:	4605      	mov	r5, r0
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
    cb02:	f007 fedf 	bl	148c4 <lll_radio_tx_pwr_min_get>
    cb06:	7028      	strb	r0, [r5, #0]
	*max = lll_radio_tx_pwr_max_get();
    cb08:	f007 fede 	bl	148c8 <lll_radio_tx_pwr_max_get>
    cb0c:	7020      	strb	r0, [r4, #0]
#else
	*min = RADIO_TXP_DEFAULT;
	*max = RADIO_TXP_DEFAULT;
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
    cb0e:	bd38      	pop	{r3, r4, r5, pc}

0000cb10 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
    cb10:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    cb12:	4802      	ldr	r0, [pc, #8]	; (cb1c <hci_driver_init+0xc>)
    cb14:	f7fa fa66 	bl	6fe4 <bt_hci_driver_register>

	return 0;
}
    cb18:	2000      	movs	r0, #0
    cb1a:	bd08      	pop	{r3, pc}
    cb1c:	0001fd60 	.word	0x0001fd60

0000cb20 <hci_driver_send>:
{
    cb20:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
    cb22:	8983      	ldrh	r3, [r0, #12]
{
    cb24:	b083      	sub	sp, #12
	if (!buf->len) {
    cb26:	b123      	cbz	r3, cb32 <hci_driver_send+0x12>
	return (enum bt_buf_type)(*(uint8_t *)net_buf_user_data(buf));
    cb28:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
    cb2a:	4604      	mov	r4, r0
    cb2c:	b1c3      	cbz	r3, cb60 <hci_driver_send+0x40>
    cb2e:	2b02      	cmp	r3, #2
    cb30:	d004      	beq.n	cb3c <hci_driver_send+0x1c>
    cb32:	f06f 0515 	mvn.w	r5, #21
}
    cb36:	4628      	mov	r0, r5
    cb38:	b003      	add	sp, #12
    cb3a:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
    cb3c:	a901      	add	r1, sp, #4
    cb3e:	f000 fe75 	bl	d82c <hci_acl_handle>
	if (evt) {
    cb42:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
    cb44:	4605      	mov	r5, r0
	if (evt) {
    cb46:	b113      	cbz	r3, cb4e <hci_driver_send+0x2e>
		bt_recv_prio(evt);
    cb48:	4618      	mov	r0, r3
    cb4a:	f7fa fa2d 	bl	6fa8 <bt_recv_prio>
	if (!err) {
    cb4e:	2d00      	cmp	r5, #0
    cb50:	d1f1      	bne.n	cb36 <hci_driver_send+0x16>
		net_buf_unref(buf);
    cb52:	4620      	mov	r0, r4
    cb54:	f00a f954 	bl	16e00 <net_buf_unref>
    cb58:	2500      	movs	r5, #0
}
    cb5a:	4628      	mov	r0, r5
    cb5c:	b003      	add	sp, #12
    cb5e:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cb60:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
    cb62:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
    cb64:	f000 fa90 	bl	d088 <hci_cmd_handle>
	if (evt) {
    cb68:	2800      	cmp	r0, #0
    cb6a:	d0f2      	beq.n	cb52 <hci_driver_send+0x32>
		bt_recv_prio(evt);
    cb6c:	f7fa fa1c 	bl	6fa8 <bt_recv_prio>
		if (node_rx) {
    cb70:	9d01      	ldr	r5, [sp, #4]
    cb72:	2d00      	cmp	r5, #0
    cb74:	d0ed      	beq.n	cb52 <hci_driver_send+0x32>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    cb76:	4628      	mov	r0, r5
    cb78:	f001 f960 	bl	de3c <hci_get_class>
    cb7c:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
    cb7e:	9901      	ldr	r1, [sp, #4]
    cb80:	4801      	ldr	r0, [pc, #4]	; (cb88 <hci_driver_send+0x68>)
    cb82:	f012 f863 	bl	1ec4c <k_queue_append>
	if (!err) {
    cb86:	e7e4      	b.n	cb52 <hci_driver_send+0x32>
    cb88:	20000b3c 	.word	0x20000b3c

0000cb8c <recv_thread>:
{
    cb8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
    cb8e:	4d37      	ldr	r5, [pc, #220]	; (cc6c <recv_thread+0xe0>)
		LL_ASSERT(0);
    cb90:	4f37      	ldr	r7, [pc, #220]	; (cc70 <recv_thread+0xe4>)
    cb92:	4e38      	ldr	r6, [pc, #224]	; (cc74 <recv_thread+0xe8>)
{
    cb94:	b083      	sub	sp, #12
    cb96:	e015      	b.n	cbc4 <recv_thread+0x38>
	switch (class) {
    cb98:	2b00      	cmp	r3, #0
    cb9a:	d13c      	bne.n	cc16 <recv_thread+0x8a>
		LL_ASSERT(0);
    cb9c:	4836      	ldr	r0, [pc, #216]	; (cc78 <recv_thread+0xec>)
    cb9e:	23cf      	movs	r3, #207	; 0xcf
    cba0:	463a      	mov	r2, r7
    cba2:	4631      	mov	r1, r6
    cba4:	f00d f927 	bl	19df6 <printk>
    cba8:	4040      	eors	r0, r0
    cbaa:	f380 8811 	msr	BASEPRI, r0
    cbae:	f04f 0003 	mov.w	r0, #3
    cbb2:	df02      	svc	2
	node_rx->hdr.next = NULL;
    cbb4:	9b01      	ldr	r3, [sp, #4]
    cbb6:	2200      	movs	r2, #0
    cbb8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cbba:	a801      	add	r0, sp, #4
    cbbc:	f002 f85c 	bl	ec78 <ll_rx_mem_release>
	z_impl_k_yield();
    cbc0:	f00c fb74 	bl	192ac <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
    cbc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cbc8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbcc:	4628      	mov	r0, r5
    cbce:	f00c f82d 	bl	18c2c <z_impl_k_queue_get>
		if (node_rx && !buf) {
    cbd2:	2800      	cmp	r0, #0
    cbd4:	d0f4      	beq.n	cbc0 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
    cbd6:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
    cbd8:	9001      	str	r0, [sp, #4]
	switch (class) {
    cbda:	2b04      	cmp	r3, #4
    cbdc:	d9dc      	bls.n	cb98 <recv_thread+0xc>
    cbde:	2b05      	cmp	r3, #5
    cbe0:	d1dc      	bne.n	cb9c <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    cbe2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cbe6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cbea:	2003      	movs	r0, #3
    cbec:	f7fa fe40 	bl	7870 <bt_buf_get_rx>
    cbf0:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    cbf2:	4601      	mov	r1, r0
    cbf4:	9801      	ldr	r0, [sp, #4]
    cbf6:	f000 fe97 	bl	d928 <hci_acl_encode>
	node_rx->hdr.next = NULL;
    cbfa:	9b01      	ldr	r3, [sp, #4]
    cbfc:	2200      	movs	r2, #0
    cbfe:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cc00:	a801      	add	r0, sp, #4
    cc02:	f002 f839 	bl	ec78 <ll_rx_mem_release>
		if (buf) {
    cc06:	2c00      	cmp	r4, #0
    cc08:	d0da      	beq.n	cbc0 <recv_thread+0x34>
			if (buf->len) {
    cc0a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    cc0c:	4620      	mov	r0, r4
			if (buf->len) {
    cc0e:	b1db      	cbz	r3, cc48 <recv_thread+0xbc>
				bt_recv(buf);
    cc10:	f7fa f950 	bl	6eb4 <bt_recv>
    cc14:	e7d4      	b.n	cbc0 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    cc16:	2b02      	cmp	r3, #2
    cc18:	d019      	beq.n	cc4e <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    cc1a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cc1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cc22:	2001      	movs	r0, #1
    cc24:	f7fa fe24 	bl	7870 <bt_buf_get_rx>
    cc28:	4604      	mov	r4, r0
		if (buf) {
    cc2a:	b1cc      	cbz	r4, cc60 <recv_thread+0xd4>
			hci_evt_encode(node_rx, buf);
    cc2c:	9801      	ldr	r0, [sp, #4]
    cc2e:	4621      	mov	r1, r4
    cc30:	f000 feb4 	bl	d99c <hci_evt_encode>
	node_rx->hdr.next = NULL;
    cc34:	9b01      	ldr	r3, [sp, #4]
    cc36:	2200      	movs	r2, #0
    cc38:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cc3a:	a801      	add	r0, sp, #4
    cc3c:	f002 f81c 	bl	ec78 <ll_rx_mem_release>
			if (buf->len) {
    cc40:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
    cc42:	4620      	mov	r0, r4
			if (buf->len) {
    cc44:	2b00      	cmp	r3, #0
    cc46:	d1e3      	bne.n	cc10 <recv_thread+0x84>
				net_buf_unref(buf);
    cc48:	f00a f8da 	bl	16e00 <net_buf_unref>
    cc4c:	e7b8      	b.n	cbc0 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
    cc4e:	2200      	movs	r2, #0
    cc50:	2300      	movs	r3, #0
    cc52:	2101      	movs	r1, #1
    cc54:	2000      	movs	r0, #0
    cc56:	f7fa fe41 	bl	78dc <bt_buf_get_evt>
    cc5a:	4604      	mov	r4, r0
		if (buf) {
    cc5c:	2c00      	cmp	r4, #0
    cc5e:	d1e5      	bne.n	cc2c <recv_thread+0xa0>
	node_rx->hdr.next = NULL;
    cc60:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
    cc62:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
    cc64:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
    cc66:	f002 f807 	bl	ec78 <ll_rx_mem_release>
		if (buf) {
    cc6a:	e7a9      	b.n	cbc0 <recv_thread+0x34>
    cc6c:	20000b3c 	.word	0x20000b3c
    cc70:	0001fcfc 	.word	0x0001fcfc
    cc74:	0001fd3c 	.word	0x0001fd3c
    cc78:	0001fcdc 	.word	0x0001fcdc

0000cc7c <prio_recv_thread>:
{
    cc7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
    cc80:	f8df 80b4 	ldr.w	r8, [pc, #180]	; cd38 <prio_recv_thread+0xbc>
				k_fifo_put(&recv_fifo, node_rx);
    cc84:	4f2b      	ldr	r7, [pc, #172]	; (cd34 <prio_recv_thread+0xb8>)
{
    cc86:	b082      	sub	sp, #8
    cc88:	e00c      	b.n	cca4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    cc8a:	f7fa fe27 	bl	78dc <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    cc8e:	4622      	mov	r2, r4
    cc90:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    cc94:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    cc96:	f001 f8b9 	bl	de0c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    cc9a:	4620      	mov	r0, r4
    cc9c:	f7fa f984 	bl	6fa8 <bt_recv_prio>
	z_impl_k_yield();
    cca0:	f00c fb04 	bl	192ac <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    cca4:	f10d 0102 	add.w	r1, sp, #2
    cca8:	a801      	add	r0, sp, #4
    ccaa:	f001 fe3b 	bl	e924 <ll_rx_get>
    ccae:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
    ccb0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ccb4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ccb8:	2100      	movs	r1, #0
    ccba:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    ccbc:	2c00      	cmp	r4, #0
    ccbe:	d1e4      	bne.n	cc8a <prio_recv_thread+0xe>
		if (node_rx) {
    ccc0:	9b01      	ldr	r3, [sp, #4]
    ccc2:	b193      	cbz	r3, ccea <prio_recv_thread+0x6e>
			ll_rx_dequeue();
    ccc4:	f001 ff08 	bl	ead8 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    ccc8:	9e01      	ldr	r6, [sp, #4]
    ccca:	4630      	mov	r0, r6
    cccc:	f001 f8b6 	bl	de3c <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
    ccd0:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
    ccd2:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
    ccd4:	796b      	ldrb	r3, [r5, #5]
    ccd6:	2b03      	cmp	r3, #3
    ccd8:	d102      	bne.n	cce0 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
    ccda:	792b      	ldrb	r3, [r5, #4]
    ccdc:	2b0d      	cmp	r3, #13
    ccde:	d00c      	beq.n	ccfa <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
    cce0:	4629      	mov	r1, r5
    cce2:	4638      	mov	r0, r7
    cce4:	f011 ffb2 	bl	1ec4c <k_queue_append>
			continue;
    cce8:	e7dc      	b.n	cca4 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
    ccea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ccee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    ccf2:	4640      	mov	r0, r8
    ccf4:	f00c fb72 	bl	193dc <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
    ccf8:	e7d4      	b.n	cca4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    ccfa:	4621      	mov	r1, r4
    ccfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cd00:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd04:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
    cd06:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
    cd08:	f7fa fde8 	bl	78dc <bt_buf_get_evt>
    cd0c:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
    cd0e:	4622      	mov	r2, r4
    cd10:	f105 001c 	add.w	r0, r5, #28
    cd14:	4631      	mov	r1, r6
    cd16:	f000 fdef 	bl	d8f8 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
    cd1a:	4630      	mov	r0, r6
    cd1c:	f000 fdfc 	bl	d918 <hci_disconn_complete_process>
				bt_recv_prio(buf);
    cd20:	4620      	mov	r0, r4
			if (buf) {
    cd22:	b124      	cbz	r4, cd2e <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
    cd24:	f7fa f940 	bl	6fa8 <bt_recv_prio>
					net_buf_unref(buf);
    cd28:	4620      	mov	r0, r4
    cd2a:	f00a f869 	bl	16e00 <net_buf_unref>
    cd2e:	9d01      	ldr	r5, [sp, #4]
    cd30:	e7d6      	b.n	cce0 <prio_recv_thread+0x64>
    cd32:	bf00      	nop
    cd34:	20000b3c 	.word	0x20000b3c
    cd38:	20000b0c 	.word	0x20000b0c

0000cd3c <hci_driver_open>:
{
    cd3c:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
    cd3e:	481a      	ldr	r0, [pc, #104]	; (cda8 <hci_driver_open+0x6c>)
{
    cd40:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
    cd42:	f001 fb2b 	bl	e39c <ll_init>
	if (err) {
    cd46:	4604      	mov	r4, r0
    cd48:	bb58      	cbnz	r0, cda2 <hci_driver_open+0x66>
	hci_init(NULL);
    cd4a:	f001 f88d 	bl	de68 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
    cd4e:	2600      	movs	r6, #0
    cd50:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cd52:	f06f 0309 	mvn.w	r3, #9
    cd56:	9303      	str	r3, [sp, #12]
    cd58:	e9cd 6706 	strd	r6, r7, [sp, #24]
    cd5c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    cd60:	4b12      	ldr	r3, [pc, #72]	; (cdac <hci_driver_open+0x70>)
    cd62:	4913      	ldr	r1, [pc, #76]	; (cdb0 <hci_driver_open+0x74>)
    cd64:	9404      	str	r4, [sp, #16]
    cd66:	9400      	str	r4, [sp, #0]
    cd68:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    cd6c:	4811      	ldr	r0, [pc, #68]	; (cdb4 <hci_driver_open+0x78>)
    cd6e:	f00c fba7 	bl	194c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    cd72:	4911      	ldr	r1, [pc, #68]	; (cdb8 <hci_driver_open+0x7c>)
    cd74:	480f      	ldr	r0, [pc, #60]	; (cdb4 <hci_driver_open+0x78>)
    cd76:	f012 f8bb 	bl	1eef0 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    cd7a:	f06f 0307 	mvn.w	r3, #7
    cd7e:	9303      	str	r3, [sp, #12]
    cd80:	e9cd 6706 	strd	r6, r7, [sp, #24]
    cd84:	e9cd 4401 	strd	r4, r4, [sp, #4]
    cd88:	4b0c      	ldr	r3, [pc, #48]	; (cdbc <hci_driver_open+0x80>)
    cd8a:	490d      	ldr	r1, [pc, #52]	; (cdc0 <hci_driver_open+0x84>)
    cd8c:	9404      	str	r4, [sp, #16]
    cd8e:	9400      	str	r4, [sp, #0]
    cd90:	f640 0298 	movw	r2, #2200	; 0x898
    cd94:	480b      	ldr	r0, [pc, #44]	; (cdc4 <hci_driver_open+0x88>)
    cd96:	f00c fb93 	bl	194c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    cd9a:	490b      	ldr	r1, [pc, #44]	; (cdc8 <hci_driver_open+0x8c>)
    cd9c:	4809      	ldr	r0, [pc, #36]	; (cdc4 <hci_driver_open+0x88>)
    cd9e:	f012 f8a7 	bl	1eef0 <z_impl_k_thread_name_set>
}
    cda2:	4620      	mov	r0, r4
    cda4:	b008      	add	sp, #32
    cda6:	bdd0      	pop	{r4, r6, r7, pc}
    cda8:	20000b0c 	.word	0x20000b0c
    cdac:	0000cc7d 	.word	0x0000cc7d
    cdb0:	20003290 	.word	0x20003290
    cdb4:	20001108 	.word	0x20001108
    cdb8:	0001fd40 	.word	0x0001fd40
    cdbc:	0000cb8d 	.word	0x0000cb8d
    cdc0:	20003450 	.word	0x20003450
    cdc4:	20001188 	.word	0x20001188
    cdc8:	0001fd4c 	.word	0x0001fd4c

0000cdcc <cmd_complete_status>:
{
	return bt_hci_cmd_status_create(_opcode, status);
}

static struct net_buf *cmd_complete_status(uint8_t status)
{
    cdcc:	b538      	push	{r3, r4, r5, lr}
	struct net_buf *buf;
	struct bt_hci_evt_cc_status *ccst;

	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    cdce:	4b07      	ldr	r3, [pc, #28]	; (cdec <cmd_complete_status+0x20>)
{
    cdd0:	4605      	mov	r5, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    cdd2:	2101      	movs	r1, #1
    cdd4:	8818      	ldrh	r0, [r3, #0]
    cdd6:	f00f fb10 	bl	1c3fa <bt_hci_cmd_complete_create>
	ccst = net_buf_add(buf, sizeof(*ccst));
    cdda:	2101      	movs	r1, #1
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
    cddc:	4604      	mov	r4, r0
	ccst = net_buf_add(buf, sizeof(*ccst));
    cdde:	3008      	adds	r0, #8
    cde0:	f011 fbd8 	bl	1e594 <net_buf_simple_add>
    cde4:	4603      	mov	r3, r0
	ccst->status = status;

	return buf;
}
    cde6:	4620      	mov	r0, r4
	ccst->status = status;
    cde8:	701d      	strb	r5, [r3, #0]
}
    cdea:	bd38      	pop	{r3, r4, r5, pc}
    cdec:	2000291e 	.word	0x2000291e

0000cdf0 <meta_evt>:

static void *meta_evt(struct net_buf *buf, uint8_t subevt, uint8_t melen)
{
    cdf0:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    cdf2:	f100 0408 	add.w	r4, r0, #8
{
    cdf6:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    cdf8:	4620      	mov	r0, r4
    cdfa:	2102      	movs	r1, #2
{
    cdfc:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    cdfe:	f011 fbc9 	bl	1e594 <net_buf_simple_add>
	struct bt_hci_evt_le_meta_event *me;

	hci_evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    ce02:	1c6b      	adds	r3, r5, #1
	hdr->evt = evt;
    ce04:	223e      	movs	r2, #62	; 0x3e
    ce06:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    ce08:	7043      	strb	r3, [r0, #1]
	me = net_buf_add(buf, sizeof(*me));
    ce0a:	2101      	movs	r1, #1
    ce0c:	4620      	mov	r0, r4
    ce0e:	f011 fbc1 	bl	1e594 <net_buf_simple_add>
	me->subevent = subevt;
    ce12:	7006      	strb	r6, [r0, #0]

	return net_buf_add(buf, melen);
    ce14:	4629      	mov	r1, r5
    ce16:	4620      	mov	r0, r4
}
    ce18:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return net_buf_add(buf, melen);
    ce1c:	f011 bbba 	b.w	1e594 <net_buf_simple_add>

0000ce20 <encrypt_change.part.0>:
	sep->handle = sys_cpu_to_le16(handle);
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
}

static void encrypt_change(uint8_t err, uint16_t handle,
    ce20:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    ce22:	f102 0508 	add.w	r5, r2, #8
static void encrypt_change(uint8_t err, uint16_t handle,
    ce26:	4604      	mov	r4, r0
    ce28:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    ce2a:	4628      	mov	r0, r5
    ce2c:	2102      	movs	r1, #2
    ce2e:	f011 fbb1 	bl	1e594 <net_buf_simple_add>
    ce32:	4603      	mov	r3, r0
	hdr->evt = evt;
    ce34:	2208      	movs	r2, #8
	hdr->len = len;
    ce36:	2104      	movs	r1, #4
	hdr->evt = evt;
    ce38:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    ce3a:	7059      	strb	r1, [r3, #1]
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
		return;
	}

	hci_evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
	ep = net_buf_add(buf, sizeof(*ep));
    ce3c:	4628      	mov	r0, r5
    ce3e:	f011 fba9 	bl	1e594 <net_buf_simple_add>

	ep->status = err;
	ep->handle = sys_cpu_to_le16(handle);
	ep->encrypt = !err ? 1 : 0;
    ce42:	fab4 f384 	clz	r3, r4
    ce46:	095b      	lsrs	r3, r3, #5
	ep->status = err;
    ce48:	7004      	strb	r4, [r0, #0]
	ep->encrypt = !err ? 1 : 0;
    ce4a:	70c3      	strb	r3, [r0, #3]
	ep->handle = sys_cpu_to_le16(handle);
    ce4c:	f8a0 6001 	strh.w	r6, [r0, #1]
}
    ce50:	bd70      	pop	{r4, r5, r6, pc}
    ce52:	bf00      	nop

0000ce54 <le_remote_feat_complete>:
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
    ce54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ce58:	4c17      	ldr	r4, [pc, #92]	; (ceb8 <le_remote_feat_complete+0x64>)
    ce5a:	6866      	ldr	r6, [r4, #4]
    ce5c:	f04f 0900 	mov.w	r9, #0
    ce60:	464c      	mov	r4, r9
    ce62:	f006 5500 	and.w	r5, r6, #536870912	; 0x20000000
{
    ce66:	4617      	mov	r7, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ce68:	ea54 0205 	orrs.w	r2, r4, r5
    ce6c:	d009      	beq.n	ce82 <le_remote_feat_complete+0x2e>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    ce6e:	4a13      	ldr	r2, [pc, #76]	; (cebc <le_remote_feat_complete+0x68>)
    ce70:	6812      	ldr	r2, [r2, #0]
    ce72:	4606      	mov	r6, r0
    ce74:	4688      	mov	r8, r1
    ce76:	f002 0008 	and.w	r0, r2, #8
    ce7a:	4649      	mov	r1, r9
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ce7c:	ea50 0201 	orrs.w	r2, r0, r1
    ce80:	d101      	bne.n	ce86 <le_remote_feat_complete+0x32>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
    ce82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    ce86:	4618      	mov	r0, r3
    ce88:	220b      	movs	r2, #11
    ce8a:	2104      	movs	r1, #4
    ce8c:	f7ff ffb0 	bl	cdf0 <meta_evt>
	sep->status = status;
    ce90:	7006      	strb	r6, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    ce92:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (!status) {
    ce96:	b93e      	cbnz	r6, cea8 <le_remote_feat_complete+0x54>
		memcpy(&sep->features[0],
    ce98:	f108 0104 	add.w	r1, r8, #4
    ce9c:	3003      	adds	r0, #3
}
    ce9e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		memcpy(&sep->features[0],
    cea2:	2208      	movs	r2, #8
    cea4:	f00e bdc1 	b.w	1ba2a <memcpy>
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    cea8:	4649      	mov	r1, r9
    ceaa:	3003      	adds	r0, #3
}
    ceac:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
    ceb0:	2208      	movs	r2, #8
    ceb2:	f00e bde5 	b.w	1ba80 <memset>
    ceb6:	bf00      	nop
    ceb8:	20000168 	.word	0x20000168
    cebc:	20000170 	.word	0x20000170

0000cec0 <hci_disconn_complete_encode.part.0>:
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    cec0:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    cec2:	f102 0408 	add.w	r4, r2, #8
void hci_disconn_complete_encode(struct pdu_data *pdu_data, uint16_t handle,
    cec6:	4605      	mov	r5, r0
    cec8:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    ceca:	4620      	mov	r0, r4
    cecc:	2102      	movs	r1, #2
    cece:	f011 fb61 	bl	1e594 <net_buf_simple_add>
    ced2:	4603      	mov	r3, r0
	hdr->evt = evt;
    ced4:	2205      	movs	r2, #5
	hdr->len = len;
    ced6:	2104      	movs	r1, #4
	hdr->evt = evt;
    ced8:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    ceda:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    cedc:	4620      	mov	r0, r4
    cede:	f011 fb59 	bl	1e594 <net_buf_simple_add>
	ep->status = 0x00;
    cee2:	2300      	movs	r3, #0
	ep->handle = sys_cpu_to_le16(handle);
    cee4:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->status = 0x00;
    cee8:	7003      	strb	r3, [r0, #0]
	ep->reason = *((uint8_t *)pdu_data);
    ceea:	782b      	ldrb	r3, [r5, #0]
    ceec:	70c3      	strb	r3, [r0, #3]
}
    ceee:	bd70      	pop	{r4, r5, r6, pc}

0000cef0 <hci_cmd_complete>:
{
    cef0:	b538      	push	{r3, r4, r5, lr}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cef2:	4b06      	ldr	r3, [pc, #24]	; (cf0c <hci_cmd_complete+0x1c>)
{
    cef4:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cef6:	8818      	ldrh	r0, [r3, #0]
{
    cef8:	460c      	mov	r4, r1
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cefa:	f00f fa7e 	bl	1c3fa <bt_hci_cmd_complete_create>
	return net_buf_add(*buf, plen);
    cefe:	4621      	mov	r1, r4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
    cf00:	6028      	str	r0, [r5, #0]
}
    cf02:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return net_buf_add(*buf, plen);
    cf06:	3008      	adds	r0, #8
    cf08:	f011 bb44 	b.w	1e594 <net_buf_simple_add>
    cf0c:	2000291e 	.word	0x2000291e

0000cf10 <hci_vendor_cmd_handle_common>:
{
    cf10:	b5f0      	push	{r4, r5, r6, r7, lr}
    cf12:	1e43      	subs	r3, r0, #1
    cf14:	b087      	sub	sp, #28
    cf16:	4614      	mov	r4, r2
    cf18:	2b0e      	cmp	r3, #14
    cf1a:	d809      	bhi.n	cf30 <hci_vendor_cmd_handle_common+0x20>
    cf1c:	e8df f003 	tbb	[pc, r3]
    cf20:	08503921 	.word	0x08503921
    cf24:	69085e08 	.word	0x69085e08
    cf28:	08088c7d 	.word	0x08088c7d
    cf2c:	9a08      	.short	0x9a08
    cf2e:	0c          	.byte	0x0c
    cf2f:	00          	.byte	0x00
	return 0;
    cf30:	f06f 0015 	mvn.w	r0, #21
}
    cf34:	b007      	add	sp, #28
    cf36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vs_read_tx_power_level(cmd, evt);
    cf38:	688b      	ldr	r3, [r1, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    cf3a:	4620      	mov	r0, r4
    cf3c:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
    cf3e:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	handle_type = cmd->handle_type;
    cf42:	781e      	ldrb	r6, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    cf44:	f7ff ffd4 	bl	cef0 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    cf48:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    cf4a:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(handle_type, handle, 0, &rp->tx_power_level);
    cf4c:	1d03      	adds	r3, r0, #4
    cf4e:	2200      	movs	r2, #0
    cf50:	4630      	mov	r0, r6
    cf52:	f7ff fd89 	bl	ca68 <ll_tx_pwr_lvl_get>
	rp->status = status;
    cf56:	7020      	strb	r0, [r4, #0]
	return 0;
    cf58:	2000      	movs	r0, #0
	rp->handle_type = handle_type;
    cf5a:	7066      	strb	r6, [r4, #1]
	rp->handle = sys_cpu_to_le16(handle);
    cf5c:	8065      	strh	r5, [r4, #2]
}
    cf5e:	b007      	add	sp, #28
    cf60:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    cf62:	4620      	mov	r0, r4
    cf64:	210d      	movs	r1, #13
    cf66:	f7ff ffc3 	bl	cef0 <hci_cmd_complete>
    cf6a:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    cf6c:	2202      	movs	r2, #2
	rp->status = 0x00;
    cf6e:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    cf70:	2404      	movs	r4, #4
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    cf72:	2163      	movs	r1, #99	; 0x63
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    cf74:	71dc      	strb	r4, [r3, #7]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    cf76:	7259      	strb	r1, [r3, #9]
	rp->status = 0x00;
    cf78:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    cf7a:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    cf7c:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
    cf7e:	7158      	strb	r0, [r3, #5]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
    cf80:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
    cf82:	7298      	strb	r0, [r3, #10]
    cf84:	72d8      	strb	r0, [r3, #11]
    cf86:	7318      	strb	r0, [r3, #12]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
    cf88:	705a      	strb	r2, [r3, #1]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
    cf8a:	70da      	strb	r2, [r3, #3]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    cf8c:	719a      	strb	r2, [r3, #6]
}
    cf8e:	b007      	add	sp, #28
    cf90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    cf92:	4620      	mov	r0, r4
    cf94:	2141      	movs	r1, #65	; 0x41
    cf96:	f7ff ffab 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    cf9a:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    cf9c:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    cf9e:	4621      	mov	r1, r4
	rp->status = 0x00;
    cfa0:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    cfa4:	2240      	movs	r2, #64	; 0x40
    cfa6:	f00e fd6b 	bl	1ba80 <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
    cfaa:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(5) | BIT(6);
    cfac:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
    cfae:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(5) | BIT(6);
    cfb2:	f043 0363 	orr.w	r3, r3, #99	; 0x63
	return 0;
    cfb6:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
    cfb8:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(5) | BIT(6);
    cfba:	70ab      	strb	r3, [r5, #2]
}
    cfbc:	b007      	add	sp, #28
    cfbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    cfc0:	4620      	mov	r0, r4
    cfc2:	2109      	movs	r1, #9
    cfc4:	f7ff ff94 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    cfc8:	2400      	movs	r4, #0
    cfca:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    cfce:	4621      	mov	r1, r4
    cfd0:	2208      	movs	r2, #8
    cfd2:	f00e fd55 	bl	1ba80 <memset>
	return 0;
    cfd6:	4620      	mov	r0, r4
}
    cfd8:	b007      	add	sp, #28
    cfda:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    cfdc:	6889      	ldr	r1, [r1, #8]
    cfde:	2000      	movs	r0, #0
    cfe0:	f7ff fd24 	bl	ca2c <ll_addr_set>
	*evt = cmd_complete_status(0x00);
    cfe4:	2000      	movs	r0, #0
    cfe6:	f7ff fef1 	bl	cdcc <cmd_complete_status>
    cfea:	6020      	str	r0, [r4, #0]
	return 0;
    cfec:	2000      	movs	r0, #0
}
    cfee:	b007      	add	sp, #28
    cff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
    cff2:	4e24      	ldr	r6, [pc, #144]	; (d084 <hci_vendor_cmd_handle_common+0x174>)
    cff4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    cff6:	ad01      	add	r5, sp, #4
    cff8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    cffa:	6833      	ldr	r3, [r6, #0]
    cffc:	802b      	strh	r3, [r5, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    cffe:	4620      	mov	r0, r4
    d000:	2113      	movs	r1, #19
    d002:	f7ff ff75 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d006:	2400      	movs	r4, #0
    d008:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d00c:	2212      	movs	r2, #18
    d00e:	a901      	add	r1, sp, #4
    d010:	f00e fd0b 	bl	1ba2a <memcpy>
	return 0;
    d014:	4620      	mov	r0, r4
}
    d016:	b007      	add	sp, #28
    d018:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    d01a:	4620      	mov	r0, r4
    d01c:	2118      	movs	r1, #24
    d01e:	f7ff ff67 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d022:	2400      	movs	r4, #0
	rp = hci_cmd_complete(evt, sizeof(*rp) +
    d024:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d026:	2101      	movs	r1, #1
	rp->status = 0x00;
    d028:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
    d02c:	f009 fd72 	bl	16b14 <hci_vendor_read_static_addr>
    d030:	7068      	strb	r0, [r5, #1]
	return 0;
    d032:	4620      	mov	r0, r4
}
    d034:	b007      	add	sp, #28
    d036:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d038:	4620      	mov	r0, r4
    d03a:	2121      	movs	r1, #33	; 0x21
    d03c:	f7ff ff58 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d040:	4601      	mov	r1, r0
    d042:	2400      	movs	r4, #0
    d044:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
    d048:	3001      	adds	r0, #1
    d04a:	f009 fdd5 	bl	16bf8 <hci_vendor_read_key_hierarchy_roots>
	return 0;
    d04e:	4620      	mov	r0, r4
}
    d050:	b007      	add	sp, #28
    d052:	bdf0      	pop	{r4, r5, r6, r7, pc}
		vs_write_tx_power_level(cmd, evt);
    d054:	688d      	ldr	r5, [r1, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d056:	4620      	mov	r0, r4
    d058:	2105      	movs	r1, #5
	handle_type = cmd->handle_type;
    d05a:	782f      	ldrb	r7, [r5, #0]
	handle = sys_le16_to_cpu(cmd->handle);
    d05c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d060:	f7ff ff46 	bl	cef0 <hci_cmd_complete>
	rp->selected_tx_power = cmd->tx_power_level;
    d064:	4602      	mov	r2, r0
    d066:	78eb      	ldrb	r3, [r5, #3]
    d068:	f802 3f04 	strb.w	r3, [r2, #4]!
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d06c:	4604      	mov	r4, r0
	handle = sys_le16_to_cpu(cmd->handle);
    d06e:	b2b1      	uxth	r1, r6
	status = ll_tx_pwr_lvl_set(handle_type, handle, &rp->selected_tx_power);
    d070:	4638      	mov	r0, r7
    d072:	f7ff fd1b 	bl	caac <ll_tx_pwr_lvl_set>
	rp->status = status;
    d076:	7020      	strb	r0, [r4, #0]
	return 0;
    d078:	2000      	movs	r0, #0
	rp->handle_type = handle_type;
    d07a:	7067      	strb	r7, [r4, #1]
	rp->handle = sys_cpu_to_le16(handle);
    d07c:	8066      	strh	r6, [r4, #2]
}
    d07e:	b007      	add	sp, #28
    d080:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d082:	bf00      	nop
    d084:	0001fd74 	.word	0x0001fd74

0000d088 <hci_cmd_handle>:
{
    d088:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
    d08a:	8983      	ldrh	r3, [r0, #12]
{
    d08c:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
    d08e:	2200      	movs	r2, #0
	if (cmd->len < sizeof(*chdr)) {
    d090:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
    d092:	9207      	str	r2, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
    d094:	f240 808b 	bls.w	d1ae <hci_cmd_handle+0x126>
	chdr = net_buf_pull_mem(cmd, sizeof(*chdr));
    d098:	4604      	mov	r4, r0
    d09a:	2103      	movs	r1, #3
    d09c:	3008      	adds	r0, #8
    d09e:	f011 faa0 	bl	1e5e2 <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
    d0a2:	89a2      	ldrh	r2, [r4, #12]
    d0a4:	7883      	ldrb	r3, [r0, #2]
    d0a6:	429a      	cmp	r2, r3
    d0a8:	f0c0 8081 	bcc.w	d1ae <hci_cmd_handle+0x126>
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d0ac:	8803      	ldrh	r3, [r0, #0]
    d0ae:	4d9e      	ldr	r5, [pc, #632]	; (d328 <hci_cmd_handle+0x2a0>)
	switch (BT_OGF(_opcode)) {
    d0b0:	f3c3 2285 	ubfx	r2, r3, #10, #6
    d0b4:	2a08      	cmp	r2, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
    d0b6:	b298      	uxth	r0, r3
    d0b8:	802b      	strh	r3, [r5, #0]
	ocf = BT_OCF(_opcode);
    d0ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    d0be:	d867      	bhi.n	d190 <hci_cmd_handle+0x108>
    d0c0:	2a00      	cmp	r2, #0
    d0c2:	d06f      	beq.n	d1a4 <hci_cmd_handle+0x11c>
    d0c4:	3a01      	subs	r2, #1
    d0c6:	2a07      	cmp	r2, #7
    d0c8:	d86c      	bhi.n	d1a4 <hci_cmd_handle+0x11c>
    d0ca:	e8df f002 	tbb	[pc, r2]
    d0ce:	6b8f      	.short	0x6b8f
    d0d0:	6b6b5773 	.word	0x6b6b5773
    d0d4:	046b      	.short	0x046b
	switch (ocf) {
    d0d6:	3b01      	subs	r3, #1
    d0d8:	2b4d      	cmp	r3, #77	; 0x4d
    d0da:	d863      	bhi.n	d1a4 <hci_cmd_handle+0x11c>
    d0dc:	e8df f013 	tbh	[pc, r3, lsl #1]
    d0e0:	02080215 	.word	0x02080215
    d0e4:	006201f5 	.word	0x006201f5
    d0e8:	01de01ee 	.word	0x01de01ee
    d0ec:	031a0322 	.word	0x031a0322
    d0f0:	030b0312 	.word	0x030b0312
    d0f4:	00620062 	.word	0x00620062
    d0f8:	00620062 	.word	0x00620062
    d0fc:	02fa02ff 	.word	0x02fa02ff
    d100:	02ee02f4 	.word	0x02ee02f4
    d104:	00620338 	.word	0x00620338
    d108:	01a5034a 	.word	0x01a5034a
    d10c:	01850191 	.word	0x01850191
    d110:	017f0062 	.word	0x017f0062
    d114:	01610177 	.word	0x01610177
    d118:	00620062 	.word	0x00620062
    d11c:	01520062 	.word	0x01520062
    d120:	01d60146 	.word	0x01d60146
    d124:	01b701c0 	.word	0x01b701c0
    d128:	00620062 	.word	0x00620062
    d12c:	02e801ae 	.word	0x02e801ae
    d130:	02d702e3 	.word	0x02d702e3
    d134:	02b502c6 	.word	0x02b502c6
    d138:	02a602ae 	.word	0x02a602ae
    d13c:	025d0285 	.word	0x025d0285
    d140:	021f024c 	.word	0x021f024c
    d144:	00620062 	.word	0x00620062
    d148:	00620062 	.word	0x00620062
    d14c:	00620062 	.word	0x00620062
    d150:	00620062 	.word	0x00620062
    d154:	00620062 	.word	0x00620062
    d158:	00620062 	.word	0x00620062
    d15c:	00620062 	.word	0x00620062
    d160:	00620062 	.word	0x00620062
    d164:	00620062 	.word	0x00620062
    d168:	00620062 	.word	0x00620062
    d16c:	00620062 	.word	0x00620062
    d170:	00620062 	.word	0x00620062
    d174:	0062032b 	.word	0x0062032b
    d178:	013f0062 	.word	0x013f0062
	switch (ocf) {
    d17c:	3b01      	subs	r3, #1
    d17e:	2b08      	cmp	r3, #8
    d180:	d810      	bhi.n	d1a4 <hci_cmd_handle+0x11c>
    d182:	e8df f003 	tbb	[pc, r3]
    d186:	76d5      	.short	0x76d5
    d188:	0f0f0f67 	.word	0x0f0f0f67
    d18c:	0f0f      	.short	0x0f0f
    d18e:	5b          	.byte	0x5b
    d18f:	00          	.byte	0x00
	switch (BT_OGF(_opcode)) {
    d190:	2a3f      	cmp	r2, #63	; 0x3f
    d192:	d107      	bne.n	d1a4 <hci_cmd_handle+0x11c>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
    d194:	4621      	mov	r1, r4
    d196:	4618      	mov	r0, r3
    d198:	aa07      	add	r2, sp, #28
    d19a:	f7ff feb9 	bl	cf10 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
    d19e:	3016      	adds	r0, #22
    d1a0:	d14a      	bne.n	d238 <hci_cmd_handle+0x1b0>
    d1a2:	8828      	ldrh	r0, [r5, #0]
	return bt_hci_cmd_status_create(_opcode, status);
    d1a4:	2101      	movs	r1, #1
    d1a6:	f00f f93a 	bl	1c41e <bt_hci_cmd_status_create>
}
    d1aa:	b00d      	add	sp, #52	; 0x34
    d1ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
    d1ae:	2000      	movs	r0, #0
}
    d1b0:	b00d      	add	sp, #52	; 0x34
    d1b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
    d1b4:	2b63      	cmp	r3, #99	; 0x63
    d1b6:	f000 8325 	beq.w	d804 <hci_cmd_handle+0x77c>
    d1ba:	d82a      	bhi.n	d212 <hci_cmd_handle+0x18a>
    d1bc:	2b03      	cmp	r3, #3
    d1be:	f000 8307 	beq.w	d7d0 <hci_cmd_handle+0x748>
    d1c2:	2b2d      	cmp	r3, #45	; 0x2d
    d1c4:	d120      	bne.n	d208 <hci_cmd_handle+0x180>
		read_tx_power_level(cmd, evt);
    d1c6:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d1c8:	2104      	movs	r1, #4
    d1ca:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d1cc:	881d      	ldrh	r5, [r3, #0]
	type = cmd->type;
    d1ce:	789e      	ldrb	r6, [r3, #2]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d1d0:	f7ff fe8e 	bl	cef0 <hci_cmd_complete>
	handle = sys_le16_to_cpu(cmd->handle);
    d1d4:	b2a9      	uxth	r1, r5
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d1d6:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
    d1d8:	1cc3      	adds	r3, r0, #3
    d1da:	4632      	mov	r2, r6
    d1dc:	2002      	movs	r0, #2
    d1de:	f7ff fc43 	bl	ca68 <ll_tx_pwr_lvl_get>
	rp->status = status;
    d1e2:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d1e4:	9807      	ldr	r0, [sp, #28]
    d1e6:	f8a4 5001 	strh.w	r5, [r4, #1]
}
    d1ea:	e7de      	b.n	d1aa <hci_cmd_handle+0x122>
	switch (ocf) {
    d1ec:	2b06      	cmp	r3, #6
    d1ee:	f000 82d1 	beq.w	d794 <hci_cmd_handle+0x70c>
    d1f2:	2b1d      	cmp	r3, #29
    d1f4:	d1d6      	bne.n	d1a4 <hci_cmd_handle+0x11c>
	handle = sys_le16_to_cpu(cmd->handle);
    d1f6:	68a3      	ldr	r3, [r4, #8]
	status = ll_version_ind_send(handle);
    d1f8:	8818      	ldrh	r0, [r3, #0]
    d1fa:	f003 fa07 	bl	1060c <ll_version_ind_send>
    d1fe:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d200:	8828      	ldrh	r0, [r5, #0]
    d202:	f00f f90c 	bl	1c41e <bt_hci_cmd_status_create>
}
    d206:	e7d0      	b.n	d1aa <hci_cmd_handle+0x122>
	switch (ocf) {
    d208:	2b01      	cmp	r3, #1
    d20a:	d1cb      	bne.n	d1a4 <hci_cmd_handle+0x11c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d20c:	68a2      	ldr	r2, [r4, #8]
	event_mask = sys_get_le64(cmd->events);
    d20e:	4b47      	ldr	r3, [pc, #284]	; (d32c <hci_cmd_handle+0x2a4>)
    d210:	e17d      	b.n	d50e <hci_cmd_handle+0x486>
	switch (ocf) {
    d212:	2b7b      	cmp	r3, #123	; 0x7b
    d214:	f000 82c8 	beq.w	d7a8 <hci_cmd_handle+0x720>
    d218:	2b7c      	cmp	r3, #124	; 0x7c
    d21a:	d1c3      	bne.n	d1a4 <hci_cmd_handle+0x11c>
		write_auth_payload_timeout(cmd, evt);
    d21c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d21e:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d220:	8859      	ldrh	r1, [r3, #2]
    d222:	b2a8      	uxth	r0, r5
    d224:	f003 fb2c 	bl	10880 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d228:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d22a:	2103      	movs	r1, #3
    d22c:	a807      	add	r0, sp, #28
    d22e:	f7ff fe5f 	bl	cef0 <hci_cmd_complete>
	rp->status = status;
    d232:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d234:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (err == -EINVAL) {
    d238:	9807      	ldr	r0, [sp, #28]
    d23a:	e7b6      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d23c:	2107      	movs	r1, #7
    d23e:	a807      	add	r0, sp, #28
    d240:	f7ff fe56 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d244:	4601      	mov	r1, r0
    d246:	2000      	movs	r0, #0
    d248:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d24c:	f7ff fbd0 	bl	c9f0 <ll_addr_get>
	if (err == -EINVAL) {
    d250:	9807      	ldr	r0, [sp, #28]
    d252:	e7aa      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d254:	2109      	movs	r1, #9
    d256:	a807      	add	r0, sp, #28
    d258:	f7ff fe4a 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d25c:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d25e:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d260:	2208      	movs	r2, #8
	rp->status = 0x00;
    d262:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d266:	f00e fc0b 	bl	1ba80 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d26a:	2360      	movs	r3, #96	; 0x60
    d26c:	9807      	ldr	r0, [sp, #28]
    d26e:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
    d270:	e79b      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d272:	2141      	movs	r1, #65	; 0x41
    d274:	a807      	add	r0, sp, #28
    d276:	f7ff fe3b 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d27a:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d27c:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d27e:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
    d280:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
    d284:	f00e fbfc 	bl	1ba80 <memset>
	rp->commands[14] |= BIT(3) | BIT(5);
    d288:	7be3      	ldrb	r3, [r4, #15]
	rp->commands[0] |= BIT(5);
    d28a:	7867      	ldrb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
    d28c:	79a6      	ldrb	r6, [r4, #6]
	rp->commands[10] |= BIT(2);
    d28e:	7ae5      	ldrb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
    d290:	7c20      	ldrb	r0, [r4, #16]
	rp->commands[22] |= BIT(2);
    d292:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d294:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[26] |= BIT(6) | BIT(7);
    d296:	f894 c01b 	ldrb.w	ip, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
    d29a:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d29e:	73e3      	strb	r3, [r4, #15]
	rp->commands[27] |= BIT(0) | BIT(1);
    d2a0:	7f23      	ldrb	r3, [r4, #28]
	rp->commands[0] |= BIT(5);
    d2a2:	f047 0720 	orr.w	r7, r7, #32
	rp->commands[5] |= BIT(6) | BIT(7);
    d2a6:	f066 063f 	orn	r6, r6, #63	; 0x3f
	rp->commands[10] |= BIT(2);
    d2aa:	f045 0504 	orr.w	r5, r5, #4
	rp->commands[15] |= BIT(1);
    d2ae:	f040 0002 	orr.w	r0, r0, #2
	rp->commands[22] |= BIT(2);
    d2b2:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d2b6:	f062 0208 	orn	r2, r2, #8
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d2ba:	f063 0308 	orn	r3, r3, #8
	rp->commands[0] |= BIT(5);
    d2be:	7067      	strb	r7, [r4, #1]
	rp->commands[5] |= BIT(6) | BIT(7);
    d2c0:	71a6      	strb	r6, [r4, #6]
	rp->commands[28] |= BIT(3);
    d2c2:	7f67      	ldrb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    d2c4:	f894 6021 	ldrb.w	r6, [r4, #33]	; 0x21
	rp->commands[10] |= BIT(2);
    d2c8:	72e5      	strb	r5, [r4, #11]
	rp->commands[15] |= BIT(1);
    d2ca:	7420      	strb	r0, [r4, #16]
	rp->commands[33] |= BIT(4) | BIT(5);
    d2cc:	f894 5022 	ldrb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d2d0:	f894 0023 	ldrb.w	r0, [r4, #35]	; 0x23
	rp->commands[22] |= BIT(2);
    d2d4:	75e1      	strb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d2d6:	76a2      	strb	r2, [r4, #26]
	rp->commands[35] |= BIT(3);
    d2d8:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d2dc:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d2e0:	7723      	strb	r3, [r4, #28]
	rp->commands[38] |= BIT(7);
    d2e2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d2e6:	f060 0006 	orn	r0, r0, #6
	rp->commands[26] |= BIT(0) | BIT(1);
    d2ea:	f06c 0c3c 	orn	ip, ip, #60	; 0x3c
	rp->commands[28] |= BIT(1) | BIT(2);
    d2ee:	f047 070e 	orr.w	r7, r7, #14
	rp->commands[32] |= BIT(4) | BIT(5);
    d2f2:	f046 0630 	orr.w	r6, r6, #48	; 0x30
	rp->commands[33] |= BIT(6) | BIT(7);
    d2f6:	f065 050f 	orn	r5, r5, #15
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d2fa:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[39] |= BIT(2);
    d2fe:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
    d302:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[26] |= BIT(0) | BIT(1);
    d306:	f884 c01b 	strb.w	ip, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    d30a:	7767      	strb	r7, [r4, #29]
	rp->commands[32] |= BIT(4) | BIT(5);
    d30c:	f884 6021 	strb.w	r6, [r4, #33]	; 0x21
	rp->commands[33] |= BIT(6) | BIT(7);
    d310:	f884 5022 	strb.w	r5, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d314:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d318:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d31c:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
    d320:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	if (err == -EINVAL) {
    d324:	9807      	ldr	r0, [sp, #28]
    d326:	e740      	b.n	d1aa <hci_cmd_handle+0x122>
    d328:	2000291e 	.word	0x2000291e
    d32c:	20000168 	.word	0x20000168
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d330:	2109      	movs	r1, #9
    d332:	a807      	add	r0, sp, #28
    d334:	f7ff fddc 	bl	cef0 <hci_cmd_complete>
    d338:	4603      	mov	r3, r0
	rp->status = 0x00;
    d33a:	2200      	movs	r2, #0
	rp->hci_version = LL_VERSION_NUMBER;
    d33c:	200b      	movs	r0, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d33e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d342:	f06f 050e 	mvn.w	r5, #14
    d346:	2405      	movs	r4, #5
	rp->status = 0x00;
    d348:	701a      	strb	r2, [r3, #0]
	rp->hci_version = LL_VERSION_NUMBER;
    d34a:	7058      	strb	r0, [r3, #1]
	rp->lmp_version = LL_VERSION_NUMBER;
    d34c:	7118      	strb	r0, [r3, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
    d34e:	715d      	strb	r5, [r3, #5]
    d350:	9807      	ldr	r0, [sp, #28]
    d352:	719c      	strb	r4, [r3, #6]
	rp->hci_revision = sys_cpu_to_le16(0);
    d354:	709a      	strb	r2, [r3, #2]
    d356:	70da      	strb	r2, [r3, #3]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
    d358:	71d9      	strb	r1, [r3, #7]
    d35a:	7219      	strb	r1, [r3, #8]
	if (err == -EINVAL) {
    d35c:	e725      	b.n	d1aa <hci_cmd_handle+0x122>
		le_set_privacy_mode(cmd, evt);
    d35e:	68a0      	ldr	r0, [r4, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d360:	79c1      	ldrb	r1, [r0, #7]
    d362:	f006 fda1 	bl	13ea8 <ll_priv_mode_set>
	*evt = cmd_complete_status(status);
    d366:	f7ff fd31 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d36a:	e71e      	b.n	d1aa <hci_cmd_handle+0x122>
		le_conn_param_req_neg_reply(cmd, evt);
    d36c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d36e:	881d      	ldrh	r5, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
    d370:	789a      	ldrb	r2, [r3, #2]
    d372:	2300      	movs	r3, #0
    d374:	e9cd 3301 	strd	r3, r3, [sp, #4]
    d378:	b2a8      	uxth	r0, r5
    d37a:	9300      	str	r3, [sp, #0]
    d37c:	2102      	movs	r1, #2
    d37e:	f003 f849 	bl	10414 <ll_conn_update>
    d382:	e751      	b.n	d228 <hci_cmd_handle+0x1a0>
		le_conn_param_req_reply(cmd, evt);
    d384:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    d386:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d388:	8815      	ldrh	r5, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
    d38a:	8853      	ldrh	r3, [r2, #2]
    d38c:	9102      	str	r1, [sp, #8]
    d38e:	88d1      	ldrh	r1, [r2, #6]
    d390:	9101      	str	r1, [sp, #4]
    d392:	8892      	ldrh	r2, [r2, #4]
    d394:	9200      	str	r2, [sp, #0]
    d396:	b2a8      	uxth	r0, r5
    d398:	2200      	movs	r2, #0
    d39a:	2102      	movs	r1, #2
    d39c:	f003 f83a 	bl	10414 <ll_conn_update>
    d3a0:	e742      	b.n	d228 <hci_cmd_handle+0x1a0>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d3a2:	2109      	movs	r1, #9
    d3a4:	a807      	add	r0, sp, #28
    d3a6:	f7ff fda3 	bl	cef0 <hci_cmd_complete>
	dst[0] = val;
    d3aa:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
    d3ac:	2300      	movs	r3, #0
	dst[1] = val >> 8;
    d3ae:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
    d3b0:	2230      	movs	r2, #48	; 0x30
    d3b2:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
    d3b4:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
    d3b6:	70c2      	strb	r2, [r0, #3]
	dst[1] = val >> 8;
    d3b8:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
    d3ba:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
    d3bc:	2201      	movs	r2, #1
    d3be:	7003      	strb	r3, [r0, #0]
    d3c0:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
    d3c2:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
    d3c4:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
    d3c6:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    d3c8:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
    d3ca:	9807      	ldr	r0, [sp, #28]
    d3cc:	e6ed      	b.n	d1aa <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
    d3ce:	68a3      	ldr	r3, [r4, #8]
    d3d0:	881d      	ldrh	r5, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d3d2:	2200      	movs	r2, #0
    d3d4:	b2a8      	uxth	r0, r5
    d3d6:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d3d8:	f005 fe66 	bl	130a8 <ll_start_enc_req_send>
    d3dc:	e724      	b.n	d228 <hci_cmd_handle+0x1a0>
	handle = sys_le16_to_cpu(cmd->handle);
    d3de:	68a2      	ldr	r2, [r4, #8]
    d3e0:	f832 5b02 	ldrh.w	r5, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d3e4:	2100      	movs	r1, #0
    d3e6:	b2a8      	uxth	r0, r5
    d3e8:	e7f6      	b.n	d3d8 <hci_cmd_handle+0x350>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d3ea:	2109      	movs	r1, #9
    d3ec:	a807      	add	r0, sp, #28
    d3ee:	f7ff fd7f 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d3f2:	2300      	movs	r3, #0
    d3f4:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
    d3f8:	2108      	movs	r1, #8
    d3fa:	f007 f8fb 	bl	145f4 <lll_csrand_get>
	if (err == -EINVAL) {
    d3fe:	9807      	ldr	r0, [sp, #28]
    d400:	e6d3      	b.n	d1aa <hci_cmd_handle+0x122>
		le_encrypt(cmd, evt);
    d402:	68a0      	ldr	r0, [r4, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    d404:	aa08      	add	r2, sp, #32
    d406:	f100 0110 	add.w	r1, r0, #16
    d40a:	2300      	movs	r3, #0
    d40c:	f008 fcd6 	bl	15dbc <ecb_encrypt>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d410:	2111      	movs	r1, #17
    d412:	a807      	add	r0, sp, #28
    d414:	f7ff fd6c 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d418:	2300      	movs	r3, #0
    d41a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    d41e:	a908      	add	r1, sp, #32
    d420:	2210      	movs	r2, #16
    d422:	f00e fb02 	bl	1ba2a <memcpy>
	if (err == -EINVAL) {
    d426:	9807      	ldr	r0, [sp, #28]
    d428:	e6bf      	b.n	d1aa <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
    d42a:	68a3      	ldr	r3, [r4, #8]
	status = ll_feature_req_send(handle);
    d42c:	8818      	ldrh	r0, [r3, #0]
    d42e:	f003 f8c7 	bl	105c0 <ll_feature_req_send>
    d432:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d434:	8828      	ldrh	r0, [r5, #0]
    d436:	f00e fff2 	bl	1c41e <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d43a:	e6b6      	b.n	d1aa <hci_cmd_handle+0x122>
		le_add_dev_to_rl(cmd, evt);
    d43c:	68a0      	ldr	r0, [r4, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d43e:	f100 0217 	add.w	r2, r0, #23
    d442:	1dc1      	adds	r1, r0, #7
    d444:	f006 fb8e 	bl	13b64 <ll_rl_add>
	*evt = cmd_complete_status(status);
    d448:	f7ff fcc0 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d44c:	e6ad      	b.n	d1aa <hci_cmd_handle+0x122>
		le_write_default_data_len(cmd, evt);
    d44e:	68a3      	ldr	r3, [r4, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
    d450:	8859      	ldrh	r1, [r3, #2]
    d452:	8818      	ldrh	r0, [r3, #0]
    d454:	f003 f960 	bl	10718 <ll_length_default_set>
	*evt = cmd_complete_status(status);
    d458:	b2c0      	uxtb	r0, r0
    d45a:	f7ff fcb7 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d45e:	e6a4      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d460:	2105      	movs	r1, #5
    d462:	a807      	add	r0, sp, #28
    d464:	f7ff fd44 	bl	cef0 <hci_cmd_complete>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    d468:	a908      	add	r1, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d46a:	4604      	mov	r4, r0
	ll_length_default_get(&max_tx_octets, &max_tx_time);
    d46c:	f10d 001a 	add.w	r0, sp, #26
    d470:	f003 f946 	bl	10700 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    d474:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    d478:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
    d47c:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d47e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    d482:	7022      	strb	r2, [r4, #0]
    d484:	9807      	ldr	r0, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d486:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
    d48a:	e68e      	b.n	d1aa <hci_cmd_handle+0x122>
		le_set_data_len(cmd, evt);
    d48c:	68a3      	ldr	r3, [r4, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d48e:	881d      	ldrh	r5, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d490:	889a      	ldrh	r2, [r3, #4]
    d492:	8859      	ldrh	r1, [r3, #2]
    d494:	b2a8      	uxth	r0, r5
    d496:	f003 f8df 	bl	10658 <ll_length_req_send>
    d49a:	e6c5      	b.n	d228 <hci_cmd_handle+0x1a0>
		le_set_adv_param(cmd, evt);
    d49c:	68a4      	ldr	r4, [r4, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
    d49e:	7ba5      	ldrb	r5, [r4, #14]
    d4a0:	79a3      	ldrb	r3, [r4, #6]
    d4a2:	7962      	ldrb	r2, [r4, #5]
    d4a4:	7921      	ldrb	r1, [r4, #4]
    d4a6:	8820      	ldrh	r0, [r4, #0]
    d4a8:	9502      	str	r5, [sp, #8]
    d4aa:	7b65      	ldrb	r5, [r4, #13]
    d4ac:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
    d4ae:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
    d4b0:	9400      	str	r4, [sp, #0]
    d4b2:	f002 f911 	bl	f6d8 <ll_adv_params_set>
	*evt = cmd_complete_status(status);
    d4b6:	f7ff fc89 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d4ba:	e676      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
    d4bc:	68a1      	ldr	r1, [r4, #8]
    d4be:	2001      	movs	r0, #1
    d4c0:	f7ff fab4 	bl	ca2c <ll_addr_set>
	*evt = cmd_complete_status(status);
    d4c4:	f7ff fc82 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d4c8:	e66f      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4ca:	2109      	movs	r1, #9
    d4cc:	a807      	add	r0, sp, #28
    d4ce:	f7ff fd0f 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d4d2:	2100      	movs	r1, #0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4d4:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d4d6:	2208      	movs	r2, #8
	rp->status = 0x00;
    d4d8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
    d4dc:	f00e fad0 	bl	1ba80 <memset>
	dst[0] = val;
    d4e0:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
    d4e2:	2249      	movs	r2, #73	; 0x49
	dst[2] = val >> 16;
    d4e4:	2301      	movs	r3, #1
	dst[0] = val;
    d4e6:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
    d4e8:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
    d4ea:	70e3      	strb	r3, [r4, #3]
	if (err == -EINVAL) {
    d4ec:	9807      	ldr	r0, [sp, #28]
    d4ee:	e65c      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d4f0:	2104      	movs	r1, #4
    d4f2:	a807      	add	r0, sp, #28
    d4f4:	f7ff fcfc 	bl	cef0 <hci_cmd_complete>
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    d4f8:	2203      	movs	r2, #3
	rp->status = 0x00;
    d4fa:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
    d4fc:	70c2      	strb	r2, [r0, #3]
	rp->status = 0x00;
    d4fe:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
    d500:	221b      	movs	r2, #27
    d502:	7042      	strb	r2, [r0, #1]
    d504:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
    d506:	9807      	ldr	r0, [sp, #28]
    d508:	e64f      	b.n	d1aa <hci_cmd_handle+0x122>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d50a:	68a2      	ldr	r2, [r4, #8]
	le_event_mask = sys_get_le64(cmd->events);
    d50c:	4bbf      	ldr	r3, [pc, #764]	; (d80c <hci_cmd_handle+0x784>)
    d50e:	6811      	ldr	r1, [r2, #0]
    d510:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d512:	605a      	str	r2, [r3, #4]
    d514:	6019      	str	r1, [r3, #0]
	*evt = cmd_complete_status(0x00);
    d516:	2000      	movs	r0, #0
    d518:	f7ff fc58 	bl	cdcc <cmd_complete_status>
}
    d51c:	e645      	b.n	d1aa <hci_cmd_handle+0x122>
		le_set_phy(cmd, evt);
    d51e:	68a2      	ldr	r2, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d520:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
    d522:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
    d524:	8816      	ldrh	r6, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d526:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d52a:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
    d52c:	bf44      	itt	mi
    d52e:	f041 0107 	orrmi.w	r1, r1, #7
    d532:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d534:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
    d538:	7913      	ldrb	r3, [r2, #4]
    d53a:	bf1c      	itt	ne
    d53c:	f043 0307 	orrne.w	r3, r3, #7
    d540:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
    d542:	ea41 0203 	orr.w	r2, r1, r3
    d546:	f012 0ff8 	tst.w	r2, #248	; 0xf8
    d54a:	f040 816b 	bne.w	d824 <hci_cmd_handle+0x79c>
	if (!(cmd->tx_phys & 0x07) ||
    d54e:	074f      	lsls	r7, r1, #29
    d550:	f000 8164 	beq.w	d81c <hci_cmd_handle+0x794>
    d554:	075a      	lsls	r2, r3, #29
    d556:	f000 8161 	beq.w	d81c <hci_cmd_handle+0x794>
	if (phy_opts & 0x03) {
    d55a:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
    d55e:	bf1c      	itt	ne
    d560:	f104 34ff 	addne.w	r4, r4, #4294967295	; 0xffffffff
		phy_opts &= 1;
    d564:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d568:	4630      	mov	r0, r6
    d56a:	f003 f911 	bl	10790 <ll_phy_req_send>
    d56e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d570:	8828      	ldrh	r0, [r5, #0]
    d572:	f00e ff54 	bl	1c41e <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d576:	e618      	b.n	d1aa <hci_cmd_handle+0x122>
		le_set_default_phy(cmd, evt);
    d578:	68a3      	ldr	r3, [r4, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d57a:	781a      	ldrb	r2, [r3, #0]
    d57c:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
    d57e:	bf4a      	itet	mi
    d580:	2007      	movmi	r0, #7
    d582:	7858      	ldrbpl	r0, [r3, #1]
    d584:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d586:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
    d588:	bf4a      	itet	mi
    d58a:	2107      	movmi	r1, #7
    d58c:	7899      	ldrbpl	r1, [r3, #2]
    d58e:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d590:	f003 f8f4 	bl	1077c <ll_phy_default_set>
	*evt = cmd_complete_status(status);
    d594:	f7ff fc1a 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d598:	e607      	b.n	d1aa <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
    d59a:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d59c:	2105      	movs	r1, #5
    d59e:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d5a0:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5a2:	f7ff fca5 	bl	cef0 <hci_cmd_complete>
    d5a6:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d5a8:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
    d5aa:	b2a8      	uxth	r0, r5
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d5ac:	1ce1      	adds	r1, r4, #3
    d5ae:	f003 f8c7 	bl	10740 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
    d5b2:	78e2      	ldrb	r2, [r4, #3]
    d5b4:	7923      	ldrb	r3, [r4, #4]
	rp->status = status;
    d5b6:	7020      	strb	r0, [r4, #0]
    d5b8:	2a00      	cmp	r2, #0
    d5ba:	fa92 f2a2 	rbit	r2, r2
    d5be:	fab2 f282 	clz	r2, r2
    d5c2:	bf08      	it	eq
    d5c4:	f04f 32ff 	moveq.w	r2, #4294967295	; 0xffffffff
    d5c8:	2b00      	cmp	r3, #0
    d5ca:	fa93 f3a3 	rbit	r3, r3
    d5ce:	fab3 f383 	clz	r3, r3
    d5d2:	f102 0201 	add.w	r2, r2, #1
    d5d6:	bf08      	it	eq
    d5d8:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d5dc:	70e2      	strb	r2, [r4, #3]
    d5de:	3301      	adds	r3, #1
    d5e0:	9807      	ldr	r0, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
    d5e2:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d5e6:	7123      	strb	r3, [r4, #4]
	if (err == -EINVAL) {
    d5e8:	e5df      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5ea:	2109      	movs	r1, #9
    d5ec:	a807      	add	r0, sp, #28
    d5ee:	f7ff fc7f 	bl	cef0 <hci_cmd_complete>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    d5f2:	ab08      	add	r3, sp, #32
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d5f4:	4604      	mov	r4, r0
	ll_length_max_get(&max_tx_octets, &max_tx_time,
    d5f6:	f10d 021a 	add.w	r2, sp, #26
    d5fa:	f10d 0016 	add.w	r0, sp, #22
    d5fe:	a906      	add	r1, sp, #24
    d600:	f003 f894 	bl	1072c <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d604:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
    d608:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    d60c:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
    d610:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
    d614:	f8bd 301a 	ldrh.w	r3, [sp, #26]
    d618:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
    d61c:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d61e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
    d622:	7022      	strb	r2, [r4, #0]
    d624:	9807      	ldr	r0, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
    d626:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
    d62a:	e5be      	b.n	d1aa <hci_cmd_handle+0x122>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
    d62c:	68a3      	ldr	r3, [r4, #8]
	ll_rl_timeout_set(timeout);
    d62e:	8818      	ldrh	r0, [r3, #0]
    d630:	f005 ffec 	bl	1360c <ll_rl_timeout_set>
	*evt = cmd_complete_status(0x00);
    d634:	2000      	movs	r0, #0
    d636:	f7ff fbc9 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d63a:	e5b6      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_rl_enable(cmd->enable);
    d63c:	68a3      	ldr	r3, [r4, #8]
    d63e:	7818      	ldrb	r0, [r3, #0]
    d640:	f005 ffce 	bl	135e0 <ll_rl_enable>
	*evt = cmd_complete_status(status);
    d644:	f7ff fbc2 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d648:	e5af      	b.n	d1aa <hci_cmd_handle+0x122>
	memcpy(dst, src, sizeof(*dst));
    d64a:	68a1      	ldr	r1, [r4, #8]
    d64c:	2207      	movs	r2, #7
    d64e:	a808      	add	r0, sp, #32
    d650:	f00e f9eb 	bl	1ba2a <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d654:	2107      	movs	r1, #7
    d656:	a807      	add	r0, sp, #28
    d658:	f7ff fc4a 	bl	cef0 <hci_cmd_complete>
    d65c:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d65e:	1c61      	adds	r1, r4, #1
    d660:	a808      	add	r0, sp, #32
    d662:	f006 fc05 	bl	13e70 <ll_rl_lrpa_get>
    d666:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    d668:	9807      	ldr	r0, [sp, #28]
    d66a:	e59e      	b.n	d1aa <hci_cmd_handle+0x122>
    d66c:	68a1      	ldr	r1, [r4, #8]
    d66e:	2207      	movs	r2, #7
    d670:	a808      	add	r0, sp, #32
    d672:	f00e f9da 	bl	1ba2a <memcpy>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d676:	2107      	movs	r1, #7
    d678:	a807      	add	r0, sp, #28
    d67a:	f7ff fc39 	bl	cef0 <hci_cmd_complete>
    d67e:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d680:	1c61      	adds	r1, r4, #1
    d682:	a808      	add	r0, sp, #32
    d684:	f006 fbd2 	bl	13e2c <ll_rl_crpa_get>
    d688:	7020      	strb	r0, [r4, #0]
	if (err == -EINVAL) {
    d68a:	9807      	ldr	r0, [sp, #28]
    d68c:	e58d      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d68e:	2102      	movs	r1, #2
    d690:	a807      	add	r0, sp, #28
    d692:	f7ff fc2d 	bl	cef0 <hci_cmd_complete>
    d696:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d698:	f005 ff60 	bl	1355c <ll_rl_size_get>
	rp->status = 0x00;
    d69c:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
    d69e:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d6a0:	7023      	strb	r3, [r4, #0]
	if (err == -EINVAL) {
    d6a2:	9807      	ldr	r0, [sp, #28]
    d6a4:	e581      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_rl_clear();
    d6a6:	f005 ff5b 	bl	13560 <ll_rl_clear>
	*evt = cmd_complete_status(status);
    d6aa:	f7ff fb8f 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d6ae:	e57c      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_rl_remove(&cmd->peer_id_addr);
    d6b0:	68a0      	ldr	r0, [r4, #8]
    d6b2:	f006 fb17 	bl	13ce4 <ll_rl_remove>
	*evt = cmd_complete_status(status);
    d6b6:	f7ff fb89 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d6ba:	e576      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_wl_remove(&cmd->addr);
    d6bc:	68a0      	ldr	r0, [r4, #8]
    d6be:	f005 fed3 	bl	13468 <ll_wl_remove>
	*evt = cmd_complete_status(status);
    d6c2:	f7ff fb83 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d6c6:	e570      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_wl_add(&cmd->addr);
    d6c8:	68a0      	ldr	r0, [r4, #8]
    d6ca:	f006 f9eb 	bl	13aa4 <ll_wl_add>
	*evt = cmd_complete_status(status);
    d6ce:	f7ff fb7d 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d6d2:	e56a      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_wl_clear();
    d6d4:	f005 fe9e 	bl	13414 <ll_wl_clear>
	*evt = cmd_complete_status(status);
    d6d8:	f7ff fb78 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d6dc:	e565      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d6de:	2102      	movs	r1, #2
    d6e0:	a807      	add	r0, sp, #28
    d6e2:	f7ff fc05 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d6e6:	2300      	movs	r3, #0
    d6e8:	7003      	strb	r3, [r0, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d6ea:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
    d6ec:	f005 fe90 	bl	13410 <ll_wl_size_get>
    d6f0:	7060      	strb	r0, [r4, #1]
	if (err == -EINVAL) {
    d6f2:	9807      	ldr	r0, [sp, #28]
    d6f4:	e559      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_adv_enable(cmd->enable);
    d6f6:	68a3      	ldr	r3, [r4, #8]
    d6f8:	7818      	ldrb	r0, [r3, #0]
    d6fa:	f7f3 fd05 	bl	1108 <ll_adv_enable>
	*evt = cmd_complete_status(status);
    d6fe:	f7ff fb65 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d702:	e552      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
    d704:	68a1      	ldr	r1, [r4, #8]
    d706:	f811 0b01 	ldrb.w	r0, [r1], #1
    d70a:	f002 fa31 	bl	fb70 <ll_adv_scan_rsp_set>
	*evt = cmd_complete_status(status);
    d70e:	f7ff fb5d 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d712:	e54a      	b.n	d1aa <hci_cmd_handle+0x122>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
    d714:	68a1      	ldr	r1, [r4, #8]
    d716:	f811 0b01 	ldrb.w	r0, [r1], #1
    d71a:	f002 f9d5 	bl	fac8 <ll_adv_data_set>
	*evt = cmd_complete_status(status);
    d71e:	f7ff fb55 	bl	cdcc <cmd_complete_status>
	if (err == -EINVAL) {
    d722:	e542      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d724:	2102      	movs	r1, #2
    d726:	a807      	add	r0, sp, #28
    d728:	f7ff fbe2 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d72c:	2300      	movs	r3, #0
    d72e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d730:	7043      	strb	r3, [r0, #1]
	if (err == -EINVAL) {
    d732:	9807      	ldr	r0, [sp, #28]
    d734:	e539      	b.n	d1aa <hci_cmd_handle+0x122>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d736:	2103      	movs	r1, #3
    d738:	a807      	add	r0, sp, #28
    d73a:	f7ff fbd9 	bl	cef0 <hci_cmd_complete>
	rp->status = 0x00;
    d73e:	4601      	mov	r1, r0
    d740:	2300      	movs	r3, #0
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d742:	3001      	adds	r0, #1
	rp->status = 0x00;
    d744:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
    d748:	f7ff f9d8 	bl	cafc <ll_tx_pwr_get>
	if (err == -EINVAL) {
    d74c:	9807      	ldr	r0, [sp, #28]
    d74e:	e52c      	b.n	d1aa <hci_cmd_handle+0x122>
		le_conn_update(cmd, evt);
    d750:	68a2      	ldr	r2, [r4, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
    d752:	8911      	ldrh	r1, [r2, #8]
    d754:	8853      	ldrh	r3, [r2, #2]
    d756:	8810      	ldrh	r0, [r2, #0]
    d758:	9102      	str	r1, [sp, #8]
    d75a:	88d1      	ldrh	r1, [r2, #6]
    d75c:	9101      	str	r1, [sp, #4]
    d75e:	8892      	ldrh	r2, [r2, #4]
    d760:	9200      	str	r2, [sp, #0]
    d762:	2200      	movs	r2, #0
    d764:	4611      	mov	r1, r2
    d766:	f002 fe55 	bl	10414 <ll_conn_update>
    d76a:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d76c:	8828      	ldrh	r0, [r5, #0]
    d76e:	f00e fe56 	bl	1c41e <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d772:	e51a      	b.n	d1aa <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
    d774:	68a3      	ldr	r3, [r4, #8]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d776:	2108      	movs	r1, #8
    d778:	a807      	add	r0, sp, #28
	handle = sys_le16_to_cpu(cmd->handle);
    d77a:	881d      	ldrh	r5, [r3, #0]
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d77c:	f7ff fbb8 	bl	cef0 <hci_cmd_complete>
    d780:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d782:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
    d784:	b2a8      	uxth	r0, r5
	status = ll_chm_get(handle, rp->ch_map);
    d786:	f002 fed7 	bl	10538 <ll_chm_get>
	rp->status = status;
    d78a:	7020      	strb	r0, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d78c:	9807      	ldr	r0, [sp, #28]
    d78e:	f8a4 5001 	strh.w	r5, [r4, #1]
	if (err == -EINVAL) {
    d792:	e50a      	b.n	d1aa <hci_cmd_handle+0x122>
		disconnect(cmd, evt);
    d794:	68a3      	ldr	r3, [r4, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d796:	7899      	ldrb	r1, [r3, #2]
    d798:	8818      	ldrh	r0, [r3, #0]
    d79a:	f002 feed 	bl	10578 <ll_terminate_ind_send>
    d79e:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
    d7a0:	8828      	ldrh	r0, [r5, #0]
    d7a2:	f00e fe3c 	bl	1c41e <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d7a6:	e500      	b.n	d1aa <hci_cmd_handle+0x122>
	handle = sys_le16_to_cpu(cmd->handle);
    d7a8:	68a3      	ldr	r3, [r4, #8]
    d7aa:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d7ac:	a908      	add	r1, sp, #32
    d7ae:	b2a8      	uxth	r0, r5
    d7b0:	f003 f842 	bl	10838 <ll_apto_get>
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d7b4:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
    d7b6:	4604      	mov	r4, r0
	rp = hci_cmd_complete(evt, sizeof(*rp));
    d7b8:	a807      	add	r0, sp, #28
    d7ba:	f7ff fb99 	bl	cef0 <hci_cmd_complete>
	rp->status = status;
    d7be:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d7c0:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d7c4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
    d7c8:	f8a0 3003 	strh.w	r3, [r0, #3]
    d7cc:	9807      	ldr	r0, [sp, #28]
}
    d7ce:	e4ec      	b.n	d1aa <hci_cmd_handle+0x122>
	event_mask = DEFAULT_EVENT_MASK;
    d7d0:	490f      	ldr	r1, [pc, #60]	; (d810 <hci_cmd_handle+0x788>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d7d2:	4a10      	ldr	r2, [pc, #64]	; (d814 <hci_cmd_handle+0x78c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d7d4:	4b0d      	ldr	r3, [pc, #52]	; (d80c <hci_cmd_handle+0x784>)
	event_mask = DEFAULT_EVENT_MASK;
    d7d6:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d7da:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d7de:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d7e2:	201f      	movs	r0, #31
    d7e4:	2100      	movs	r1, #0
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d7e6:	2400      	movs	r4, #0
    d7e8:	2500      	movs	r5, #0
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d7ea:	e9c3 0100 	strd	r0, r1, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d7ee:	e9c2 4500 	strd	r4, r5, [r2]
		ll_reset();
    d7f2:	f000 ff37 	bl	e664 <ll_reset>
		*evt = cmd_complete_status(0x00);
    d7f6:	2000      	movs	r0, #0
    d7f8:	f7ff fae8 	bl	cdcc <cmd_complete_status>
	conn_count = 0U;
    d7fc:	4b06      	ldr	r3, [pc, #24]	; (d818 <hci_cmd_handle+0x790>)
    d7fe:	2200      	movs	r2, #0
    d800:	601a      	str	r2, [r3, #0]
}
    d802:	e4d2      	b.n	d1aa <hci_cmd_handle+0x122>
    d804:	68a2      	ldr	r2, [r4, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d806:	4b03      	ldr	r3, [pc, #12]	; (d814 <hci_cmd_handle+0x78c>)
    d808:	e681      	b.n	d50e <hci_cmd_handle+0x486>
    d80a:	bf00      	nop
    d80c:	20000170 	.word	0x20000170
    d810:	20000168 	.word	0x20000168
    d814:	20001208 	.word	0x20001208
    d818:	2000172c 	.word	0x2000172c
	return bt_hci_cmd_status_create(_opcode, status);
    d81c:	2112      	movs	r1, #18
    d81e:	f00e fdfe 	bl	1c41e <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d822:	e4c2      	b.n	d1aa <hci_cmd_handle+0x122>
	return bt_hci_cmd_status_create(_opcode, status);
    d824:	2111      	movs	r1, #17
    d826:	f00e fdfa 	bl	1c41e <bt_hci_cmd_status_create>
	if (err == -EINVAL) {
    d82a:	e4be      	b.n	d1aa <hci_cmd_handle+0x122>

0000d82c <hci_acl_handle>:
	if (buf->len < sizeof(*acl)) {
    d82c:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
    d82e:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
    d830:	2b03      	cmp	r3, #3
	*evt = NULL;
    d832:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    d834:	d941      	bls.n	d8ba <hci_acl_handle+0x8e>
{
    d836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    d83a:	4605      	mov	r5, r0
    d83c:	460e      	mov	r6, r1
	acl = net_buf_pull_mem(buf, sizeof(*acl));
    d83e:	3008      	adds	r0, #8
    d840:	2104      	movs	r1, #4
    d842:	f010 fece 	bl	1e5e2 <net_buf_simple_pull_mem>
	if (buf->len < len) {
    d846:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
    d848:	8847      	ldrh	r7, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
    d84a:	f8b0 8000 	ldrh.w	r8, [r0]
	if (buf->len < len) {
    d84e:	42bb      	cmp	r3, r7
    d850:	d30a      	bcc.n	d868 <hci_acl_handle+0x3c>
	node_tx = ll_tx_mem_acquire();
    d852:	f002 fd89 	bl	10368 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
    d856:	ea4f 3318 	mov.w	r3, r8, lsr #12
	if (!node_tx) {
    d85a:	4604      	mov	r4, r0
    d85c:	b318      	cbz	r0, d8a6 <hci_acl_handle+0x7a>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
    d85e:	089a      	lsrs	r2, r3, #2
    d860:	d102      	bne.n	d868 <hci_acl_handle+0x3c>
	switch (bt_acl_flags_pb(flags)) {
    d862:	b1d3      	cbz	r3, d89a <hci_acl_handle+0x6e>
    d864:	2b01      	cmp	r3, #1
    d866:	d003      	beq.n	d870 <hci_acl_handle+0x44>
		return -EINVAL;
    d868:	f06f 0015 	mvn.w	r0, #21
}
    d86c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    d870:	7902      	ldrb	r2, [r0, #4]
    d872:	f363 0201 	bfi	r2, r3, #0, #2
    d876:	7102      	strb	r2, [r0, #4]
	pdu_data->len = len;
    d878:	7167      	strb	r7, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
    d87a:	68a9      	ldr	r1, [r5, #8]
    d87c:	463a      	mov	r2, r7
    d87e:	1de0      	adds	r0, r4, #7
    d880:	f00e f8d3 	bl	1ba2a <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
    d884:	4621      	mov	r1, r4
    d886:	f3c8 000b 	ubfx	r0, r8, #0, #12
    d88a:	f002 fd79 	bl	10380 <ll_tx_mem_enqueue>
    d88e:	2800      	cmp	r0, #0
    d890:	d0ec      	beq.n	d86c <hci_acl_handle+0x40>
		ll_tx_mem_release(node_tx);
    d892:	4620      	mov	r0, r4
    d894:	f002 fd6e 	bl	10374 <ll_tx_mem_release>
    d898:	e7e6      	b.n	d868 <hci_acl_handle+0x3c>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    d89a:	7903      	ldrb	r3, [r0, #4]
    d89c:	2202      	movs	r2, #2
    d89e:	f362 0301 	bfi	r3, r2, #0, #2
    d8a2:	7103      	strb	r3, [r0, #4]
		break;
    d8a4:	e7e8      	b.n	d878 <hci_acl_handle+0x4c>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    d8a6:	4b13      	ldr	r3, [pc, #76]	; (d8f4 <hci_acl_handle+0xc8>)
    d8a8:	6819      	ldr	r1, [r3, #0]
    d8aa:	4603      	mov	r3, r0
    d8ac:	f001 7200 	and.w	r2, r1, #33554432	; 0x2000000
    d8b0:	4313      	orrs	r3, r2
    d8b2:	d105      	bne.n	d8c0 <hci_acl_handle+0x94>
		return -ENOBUFS;
    d8b4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    d8b8:	e7d8      	b.n	d86c <hci_acl_handle+0x40>
		return -EINVAL;
    d8ba:	f06f 0015 	mvn.w	r0, #21
}
    d8be:	4770      	bx	lr
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d8c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d8c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d8c8:	2001      	movs	r0, #1
    d8ca:	f7f9 ffd1 	bl	7870 <bt_buf_get_rx>
	hdr = net_buf_add(buf, sizeof(*hdr));
    d8ce:	2102      	movs	r1, #2
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    d8d0:	6030      	str	r0, [r6, #0]
	hdr = net_buf_add(buf, sizeof(*hdr));
    d8d2:	3008      	adds	r0, #8
    d8d4:	f010 fe5e 	bl	1e594 <net_buf_simple_add>
	hdr->len = len;
    d8d8:	2401      	movs	r4, #1
	hdr->evt = evt;
    d8da:	221a      	movs	r2, #26
    d8dc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
    d8de:	7044      	strb	r4, [r0, #1]
	ep = net_buf_add(*buf, sizeof(*ep));
    d8e0:	6830      	ldr	r0, [r6, #0]
    d8e2:	4621      	mov	r1, r4
    d8e4:	3008      	adds	r0, #8
    d8e6:	f010 fe55 	bl	1e594 <net_buf_simple_add>
    d8ea:	4603      	mov	r3, r0
		return -ENOBUFS;
    d8ec:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    d8f0:	701c      	strb	r4, [r3, #0]
    d8f2:	e7bb      	b.n	d86c <hci_acl_handle+0x40>
    d8f4:	20000168 	.word	0x20000168

0000d8f8 <hci_disconn_complete_encode>:
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d8f8:	4b06      	ldr	r3, [pc, #24]	; (d914 <hci_disconn_complete_encode+0x1c>)
    d8fa:	681b      	ldr	r3, [r3, #0]
{
    d8fc:	b430      	push	{r4, r5}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d8fe:	f003 0410 	and.w	r4, r3, #16
    d902:	2500      	movs	r5, #0
    d904:	ea54 0305 	orrs.w	r3, r4, r5
    d908:	d101      	bne.n	d90e <hci_disconn_complete_encode+0x16>
}
    d90a:	bc30      	pop	{r4, r5}
    d90c:	4770      	bx	lr
    d90e:	bc30      	pop	{r4, r5}
    d910:	f7ff bad6 	b.w	cec0 <hci_disconn_complete_encode.part.0>
    d914:	20000168 	.word	0x20000168

0000d918 <hci_disconn_complete_process>:
	conn_count--;
    d918:	4a02      	ldr	r2, [pc, #8]	; (d924 <hci_disconn_complete_process+0xc>)
    d91a:	6813      	ldr	r3, [r2, #0]
    d91c:	3b01      	subs	r3, #1
    d91e:	6013      	str	r3, [r2, #0]
}
    d920:	4770      	bx	lr
    d922:	bf00      	nop
    d924:	2000172c 	.word	0x2000172c

0000d928 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
    d928:	7f03      	ldrb	r3, [r0, #28]
    d92a:	f003 0303 	and.w	r3, r3, #3
    d92e:	3b01      	subs	r3, #1
    d930:	2b01      	cmp	r3, #1
{
    d932:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
    d934:	d90d      	bls.n	d952 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
    d936:	4a16      	ldr	r2, [pc, #88]	; (d990 <hci_acl_encode+0x68>)
    d938:	4916      	ldr	r1, [pc, #88]	; (d994 <hci_acl_encode+0x6c>)
    d93a:	4817      	ldr	r0, [pc, #92]	; (d998 <hci_acl_encode+0x70>)
    d93c:	f241 13d7 	movw	r3, #4567	; 0x11d7
    d940:	f00c fa59 	bl	19df6 <printk>
    d944:	4040      	eors	r0, r0
    d946:	f380 8811 	msr	BASEPRI, r0
    d94a:	f04f 0003 	mov.w	r0, #3
    d94e:	df02      	svc	2
		break;
	}
}
    d950:	bd70      	pop	{r4, r5, r6, pc}
    d952:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    d954:	f101 0508 	add.w	r5, r1, #8
    d958:	4628      	mov	r0, r5
    d95a:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
    d95c:	88e6      	ldrh	r6, [r4, #6]
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    d95e:	f010 fe19 	bl	1e594 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    d962:	7f23      	ldrb	r3, [r4, #28]
    d964:	f003 0303 	and.w	r3, r3, #3
    d968:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    d96a:	bf0c      	ite	eq
    d96c:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    d970:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    d974:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    d976:	7f61      	ldrb	r1, [r4, #29]
    d978:	8041      	strh	r1, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    d97a:	4628      	mov	r0, r5
    d97c:	f010 fe0a 	bl	1e594 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
    d980:	7f62      	ldrb	r2, [r4, #29]
    d982:	f104 011f 	add.w	r1, r4, #31
}
    d986:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
    d98a:	f00e b84e 	b.w	1ba2a <memcpy>
    d98e:	bf00      	nop
    d990:	0001fd88 	.word	0x0001fd88
    d994:	0001fd3c 	.word	0x0001fd3c
    d998:	0001fcdc 	.word	0x0001fcdc

0000d99c <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
    d99c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d9a0:	7905      	ldrb	r5, [r0, #4]
    d9a2:	2d02      	cmp	r5, #2
{
    d9a4:	4604      	mov	r4, r0
    d9a6:	b084      	sub	sp, #16
    d9a8:	460e      	mov	r6, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
    d9aa:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    d9ae:	d00d      	beq.n	d9cc <hci_evt_encode+0x30>
		encode_control(node_rx, pdu_data, buf);
    d9b0:	3d0c      	subs	r5, #12
    d9b2:	88e7      	ldrh	r7, [r4, #6]
	switch (node_rx->hdr.type) {
    d9b4:	2d06      	cmp	r5, #6
    d9b6:	f200 8222 	bhi.w	ddfe <hci_evt_encode+0x462>
    d9ba:	e8df f015 	tbh	[pc, r5, lsl #1]
    d9be:	0022      	.short	0x0022
    d9c0:	00850077 	.word	0x00850077
    d9c4:	00c000a7 	.word	0x00c000a7
    d9c8:	00ee00d6 	.word	0x00ee00d6
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
    d9cc:	7fe3      	ldrb	r3, [r4, #31]
    d9ce:	88e5      	ldrh	r5, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
    d9d0:	3b03      	subs	r3, #3
    d9d2:	2b12      	cmp	r3, #18
    d9d4:	f200 8112 	bhi.w	dbfc <hci_evt_encode+0x260>
    d9d8:	e8df f013 	tbh	[pc, r3, lsl #1]
    d9dc:	01100158 	.word	0x01100158
    d9e0:	01800110 	.word	0x01800110
    d9e4:	0110018c 	.word	0x0110018c
    d9e8:	0110013e 	.word	0x0110013e
    d9ec:	01100110 	.word	0x01100110
    d9f0:	01100147 	.word	0x01100147
    d9f4:	011001a4 	.word	0x011001a4
    d9f8:	01100110 	.word	0x01100110
    d9fc:	011e0110 	.word	0x011e0110
    da00:	011e      	.short	0x011e
	uint8_t status = node_rx->status;
    da02:	7f25      	ldrb	r5, [r4, #28]
	if (!status) {
    da04:	2d00      	cmp	r5, #0
    da06:	f000 81ab 	beq.w	dd60 <hci_evt_encode+0x3c4>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    da0a:	4bbf      	ldr	r3, [pc, #764]	; (dd08 <hci_evt_encode+0x36c>)
    da0c:	6859      	ldr	r1, [r3, #4]
    da0e:	f04f 0800 	mov.w	r8, #0
    da12:	4642      	mov	r2, r8
    da14:	f001 5300 	and.w	r3, r1, #536870912	; 0x20000000
    da18:	4313      	orrs	r3, r2
    da1a:	d044      	beq.n	daa6 <hci_evt_encode+0x10a>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    da1c:	4bbb      	ldr	r3, [pc, #748]	; (dd0c <hci_evt_encode+0x370>)
    da1e:	f8d3 c000 	ldr.w	ip, [r3]
    da22:	f240 2101 	movw	r1, #513	; 0x201
    da26:	ea0c 0201 	and.w	r2, ip, r1
    da2a:	4643      	mov	r3, r8
    da2c:	4313      	orrs	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    da2e:	f40c 7000 	and.w	r0, ip, #512	; 0x200
    da32:	4641      	mov	r1, r8
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    da34:	d037      	beq.n	daa6 <hci_evt_encode+0x10a>
	if (!status) {
    da36:	2d00      	cmp	r5, #0
    da38:	f040 81a5 	bne.w	dd86 <hci_evt_encode+0x3ea>
		conn_count++;
    da3c:	4ab4      	ldr	r2, [pc, #720]	; (dd10 <hci_evt_encode+0x374>)
    da3e:	6813      	ldr	r3, [r2, #0]
    da40:	3301      	adds	r3, #1
    da42:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    da44:	ea50 0301 	orrs.w	r3, r0, r1
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    da48:	4630      	mov	r0, r6
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    da4a:	f000 81ab 	beq.w	dda4 <hci_evt_encode+0x408>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    da4e:	221e      	movs	r2, #30
    da50:	210a      	movs	r1, #10
    da52:	f7ff f9cd 	bl	cdf0 <meta_evt>
    da56:	4606      	mov	r6, r0
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
    da58:	2206      	movs	r2, #6
		leecc->status = 0x00;
    da5a:	7035      	strb	r5, [r6, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    da5c:	f8a6 7001 	strh.w	r7, [r6, #1]
		leecc->role = node_rx->role;
    da60:	7f63      	ldrb	r3, [r4, #29]
    da62:	70f3      	strb	r3, [r6, #3]
		leecc->peer_addr.type = node_rx->peer_addr_type;
    da64:	7fa3      	ldrb	r3, [r4, #30]
    da66:	7133      	strb	r3, [r6, #4]
		memcpy(&leecc->peer_addr.a.val[0], &node_rx->peer_addr[0],
    da68:	f104 011f 	add.w	r1, r4, #31
    da6c:	3005      	adds	r0, #5
    da6e:	f00d ffdc 	bl	1ba2a <memcpy>
		memcpy(&leecc->local_rpa.val[0], &node_rx->local_rpa[0],
    da72:	2206      	movs	r2, #6
    da74:	f104 012b 	add.w	r1, r4, #43	; 0x2b
    da78:	f106 000b 	add.w	r0, r6, #11
    da7c:	f00d ffd5 	bl	1ba2a <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &node_rx->peer_rpa[0],
    da80:	2206      	movs	r2, #6
    da82:	f104 0125 	add.w	r1, r4, #37	; 0x25
    da86:	f106 0011 	add.w	r0, r6, #17
    da8a:	f00d ffce 	bl	1ba2a <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    da8e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
    da90:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(node_rx->latency);
    da92:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    da94:	f8a6 2019 	strh.w	r2, [r6, #25]
		leecc->interval = sys_cpu_to_le16(node_rx->interval);
    da98:	f8a6 1017 	strh.w	r1, [r6, #23]
		leecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    da9c:	f8a6 301b 	strh.w	r3, [r6, #27]
		leecc->clock_accuracy = node_rx->sca;
    daa0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    daa4:	7773      	strb	r3, [r6, #29]
	}
}
    daa6:	b004      	add	sp, #16
    daa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    daac:	4b96      	ldr	r3, [pc, #600]	; (dd08 <hci_evt_encode+0x36c>)
    daae:	6819      	ldr	r1, [r3, #0]
    dab0:	2300      	movs	r3, #0
    dab2:	f001 0210 	and.w	r2, r1, #16
    dab6:	4313      	orrs	r3, r2
    dab8:	d0f5      	beq.n	daa6 <hci_evt_encode+0x10a>
    daba:	4632      	mov	r2, r6
    dabc:	4639      	mov	r1, r7
}
    dabe:	b004      	add	sp, #16
    dac0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dac4:	f7ff b9fc 	b.w	cec0 <hci_disconn_complete_encode.part.0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dac8:	4b8f      	ldr	r3, [pc, #572]	; (dd08 <hci_evt_encode+0x36c>)
    daca:	6858      	ldr	r0, [r3, #4]
    dacc:	2100      	movs	r1, #0
    dace:	460a      	mov	r2, r1
    dad0:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dad4:	4313      	orrs	r3, r2
    dad6:	d0e6      	beq.n	daa6 <hci_evt_encode+0x10a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    dad8:	4b8c      	ldr	r3, [pc, #560]	; (dd0c <hci_evt_encode+0x370>)
    dada:	6818      	ldr	r0, [r3, #0]
    dadc:	460b      	mov	r3, r1
    dade:	f000 0204 	and.w	r2, r0, #4
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dae2:	4313      	orrs	r3, r2
    dae4:	d0df      	beq.n	daa6 <hci_evt_encode+0x10a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    dae6:	2209      	movs	r2, #9
    dae8:	2103      	movs	r1, #3
    daea:	4630      	mov	r0, r6
    daec:	f7ff f980 	bl	cdf0 <meta_evt>
	sep->status = cu->status;
    daf0:	7f23      	ldrb	r3, [r4, #28]
    daf2:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
    daf4:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
    daf6:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    daf8:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    dafa:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
    dafe:	f8a0 7001 	strh.w	r7, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
    db02:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
    db06:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
    db0a:	e7cc      	b.n	daa6 <hci_evt_encode+0x10a>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    db0c:	4b7e      	ldr	r3, [pc, #504]	; (dd08 <hci_evt_encode+0x36c>)
    db0e:	6859      	ldr	r1, [r3, #4]
    db10:	2400      	movs	r4, #0
    db12:	4622      	mov	r2, r4
    db14:	f401 4300 	and.w	r3, r1, #32768	; 0x8000
    db18:	4313      	orrs	r3, r2
    db1a:	d0c4      	beq.n	daa6 <hci_evt_encode+0x10a>
	hdr = net_buf_add(buf, sizeof(*hdr));
    db1c:	3608      	adds	r6, #8
    db1e:	2102      	movs	r1, #2
    db20:	4630      	mov	r0, r6
    db22:	f010 fd37 	bl	1e594 <net_buf_simple_add>
    db26:	4603      	mov	r3, r0
	hdr->evt = evt;
    db28:	2230      	movs	r2, #48	; 0x30
	hdr->len = len;
    db2a:	2103      	movs	r1, #3
	ep = net_buf_add(buf, sizeof(*ep));
    db2c:	4630      	mov	r0, r6
	hdr->evt = evt;
    db2e:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    db30:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    db32:	f010 fd2f 	bl	1e594 <net_buf_simple_add>
	ep->status = 0x00;
    db36:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    db38:	f8a0 7001 	strh.w	r7, [r0, #1]
    db3c:	e7b3      	b.n	daa6 <hci_evt_encode+0x10a>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    db3e:	4b75      	ldr	r3, [pc, #468]	; (dd14 <hci_evt_encode+0x378>)
    db40:	6819      	ldr	r1, [r3, #0]
    db42:	2300      	movs	r3, #0
    db44:	f401 0200 	and.w	r2, r1, #8388608	; 0x800000
    db48:	4313      	orrs	r3, r2
    db4a:	d0ac      	beq.n	daa6 <hci_evt_encode+0x10a>
	hdr = net_buf_add(buf, sizeof(*hdr));
    db4c:	3608      	adds	r6, #8
    db4e:	2102      	movs	r1, #2
    db50:	4630      	mov	r0, r6
    db52:	f010 fd1f 	bl	1e594 <net_buf_simple_add>
    db56:	4603      	mov	r3, r0
	hdr->evt = evt;
    db58:	2257      	movs	r2, #87	; 0x57
	hdr->len = len;
    db5a:	2102      	movs	r1, #2
	ep = net_buf_add(buf, sizeof(*ep));
    db5c:	4630      	mov	r0, r6
	hdr->evt = evt;
    db5e:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    db60:	7059      	strb	r1, [r3, #1]
	ep = net_buf_add(buf, sizeof(*ep));
    db62:	f010 fd17 	bl	1e594 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    db66:	8007      	strh	r7, [r0, #0]
    db68:	e79d      	b.n	daa6 <hci_evt_encode+0x10a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    db6a:	4b67      	ldr	r3, [pc, #412]	; (dd08 <hci_evt_encode+0x36c>)
    db6c:	6858      	ldr	r0, [r3, #4]
    db6e:	2100      	movs	r1, #0
    db70:	460a      	mov	r2, r1
    db72:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    db76:	4313      	orrs	r3, r2
    db78:	d095      	beq.n	daa6 <hci_evt_encode+0x10a>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    db7a:	4b64      	ldr	r3, [pc, #400]	; (dd0c <hci_evt_encode+0x370>)
    db7c:	6818      	ldr	r0, [r3, #0]
    db7e:	460b      	mov	r3, r1
    db80:	f400 2200 	and.w	r2, r0, #524288	; 0x80000
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    db84:	4313      	orrs	r3, r2
    db86:	d08e      	beq.n	daa6 <hci_evt_encode+0x10a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    db88:	4630      	mov	r0, r6
    db8a:	2203      	movs	r2, #3
    db8c:	2114      	movs	r1, #20
    db8e:	f7ff f92f 	bl	cdf0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    db92:	8007      	strh	r7, [r0, #0]
	sep->chan_sel_algo = cs->csa;
    db94:	7f23      	ldrb	r3, [r4, #28]
    db96:	7083      	strb	r3, [r0, #2]
    db98:	e785      	b.n	daa6 <hci_evt_encode+0x10a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    db9a:	4b5b      	ldr	r3, [pc, #364]	; (dd08 <hci_evt_encode+0x36c>)
    db9c:	6858      	ldr	r0, [r3, #4]
    db9e:	2100      	movs	r1, #0
    dba0:	460a      	mov	r2, r1
    dba2:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dba6:	4313      	orrs	r3, r2
    dba8:	f43f af7d 	beq.w	daa6 <hci_evt_encode+0x10a>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    dbac:	4b57      	ldr	r3, [pc, #348]	; (dd0c <hci_evt_encode+0x370>)
    dbae:	6818      	ldr	r0, [r3, #0]
    dbb0:	460b      	mov	r3, r1
    dbb2:	f400 6200 	and.w	r2, r0, #2048	; 0x800
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dbb6:	4313      	orrs	r3, r2
    dbb8:	f43f af75 	beq.w	daa6 <hci_evt_encode+0x10a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    dbbc:	2205      	movs	r2, #5
    dbbe:	4630      	mov	r0, r6
    dbc0:	210c      	movs	r1, #12
    dbc2:	f7ff f915 	bl	cdf0 <meta_evt>
	sep->status = pu->status;
    dbc6:	7f23      	ldrb	r3, [r4, #28]
    dbc8:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    dbca:	f8a0 7001 	strh.w	r7, [r0, #1]
    dbce:	7f62      	ldrb	r2, [r4, #29]
    dbd0:	2a00      	cmp	r2, #0
    dbd2:	fa92 f3a2 	rbit	r3, r2
    dbd6:	fab3 f383 	clz	r3, r3
    dbda:	bf08      	it	eq
    dbdc:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    dbe0:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
    dbe2:	70c3      	strb	r3, [r0, #3]
    dbe4:	7fa2      	ldrb	r2, [r4, #30]
    dbe6:	fa92 f3a2 	rbit	r3, r2
    dbea:	2a00      	cmp	r2, #0
    dbec:	fab3 f383 	clz	r3, r3
    dbf0:	bf08      	it	eq
    dbf2:	f04f 33ff 	moveq.w	r3, #4294967295	; 0xffffffff
    dbf6:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
    dbf8:	7103      	strb	r3, [r0, #4]
    dbfa:	e754      	b.n	daa6 <hci_evt_encode+0x10a>
		LL_ASSERT(0);
    dbfc:	f241 13ab 	movw	r3, #4523	; 0x11ab
    dc00:	4a45      	ldr	r2, [pc, #276]	; (dd18 <hci_evt_encode+0x37c>)
    dc02:	4946      	ldr	r1, [pc, #280]	; (dd1c <hci_evt_encode+0x380>)
    dc04:	4846      	ldr	r0, [pc, #280]	; (dd20 <hci_evt_encode+0x384>)
    dc06:	f00c f8f6 	bl	19df6 <printk>
    dc0a:	4040      	eors	r0, r0
    dc0c:	f380 8811 	msr	BASEPRI, r0
    dc10:	f04f 0003 	mov.w	r0, #3
    dc14:	df02      	svc	2
}
    dc16:	e746      	b.n	daa6 <hci_evt_encode+0x10a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dc18:	4b3b      	ldr	r3, [pc, #236]	; (dd08 <hci_evt_encode+0x36c>)
    dc1a:	6858      	ldr	r0, [r3, #4]
    dc1c:	2100      	movs	r1, #0
    dc1e:	460a      	mov	r2, r1
    dc20:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dc24:	4313      	orrs	r3, r2
    dc26:	f43f af3e 	beq.w	daa6 <hci_evt_encode+0x10a>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    dc2a:	4b38      	ldr	r3, [pc, #224]	; (dd0c <hci_evt_encode+0x370>)
    dc2c:	6818      	ldr	r0, [r3, #0]
    dc2e:	460b      	mov	r3, r1
    dc30:	f000 0240 	and.w	r2, r0, #64	; 0x40
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dc34:	4313      	orrs	r3, r2
    dc36:	f43f af36 	beq.w	daa6 <hci_evt_encode+0x10a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    dc3a:	4630      	mov	r0, r6
    dc3c:	220a      	movs	r2, #10
    dc3e:	2107      	movs	r1, #7
    dc40:	f7ff f8d6 	bl	cdf0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    dc44:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
    dc46:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    dc48:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
    dc4a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    dc4c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
    dc4e:	8c23      	ldrh	r3, [r4, #32]
    dc50:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
    dc52:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    dc54:	8103      	strh	r3, [r0, #8]
    dc56:	e726      	b.n	daa6 <hci_evt_encode+0x10a>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    dc58:	460b      	mov	r3, r1
    dc5a:	462a      	mov	r2, r5
    dc5c:	4601      	mov	r1, r0
    dc5e:	2000      	movs	r0, #0
}
    dc60:	b004      	add	sp, #16
    dc62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    dc66:	f7ff b8f5 	b.w	ce54 <le_remote_feat_complete>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    dc6a:	4b27      	ldr	r3, [pc, #156]	; (dd08 <hci_evt_encode+0x36c>)
    dc6c:	6819      	ldr	r1, [r3, #0]
    dc6e:	2300      	movs	r3, #0
    dc70:	f001 0280 	and.w	r2, r1, #128	; 0x80
    dc74:	4313      	orrs	r3, r2
    dc76:	f43f af16 	beq.w	daa6 <hci_evt_encode+0x10a>
    dc7a:	f894 0020 	ldrb.w	r0, [r4, #32]
    dc7e:	4632      	mov	r2, r6
    dc80:	4629      	mov	r1, r5
}
    dc82:	b004      	add	sp, #16
    dc84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    dc88:	f7ff b8ca 	b.w	ce20 <encrypt_change.part.0>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dc8c:	4b1e      	ldr	r3, [pc, #120]	; (dd08 <hci_evt_encode+0x36c>)
    dc8e:	6858      	ldr	r0, [r3, #4]
    dc90:	2100      	movs	r1, #0
    dc92:	460a      	mov	r2, r1
    dc94:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dc98:	4313      	orrs	r3, r2
    dc9a:	f43f af04 	beq.w	daa6 <hci_evt_encode+0x10a>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    dc9e:	4b1b      	ldr	r3, [pc, #108]	; (dd0c <hci_evt_encode+0x370>)
    dca0:	6818      	ldr	r0, [r3, #0]
    dca2:	460b      	mov	r3, r1
    dca4:	f000 0210 	and.w	r2, r0, #16
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dca8:	4313      	orrs	r3, r2
    dcaa:	f43f aefc 	beq.w	daa6 <hci_evt_encode+0x10a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    dcae:	4630      	mov	r0, r6
    dcb0:	220c      	movs	r2, #12
    dcb2:	2105      	movs	r1, #5
    dcb4:	f7ff f89c 	bl	cdf0 <meta_evt>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    dcb8:	f104 0120 	add.w	r1, r4, #32
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    dcbc:	4606      	mov	r6, r0
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    dcbe:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
    dcc0:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
    dcc4:	f00d feb1 	bl	1ba2a <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    dcc8:	f106 000a 	add.w	r0, r6, #10
    dccc:	f104 0128 	add.w	r1, r4, #40	; 0x28
    dcd0:	2202      	movs	r2, #2
}
    dcd2:	b004      	add	sp, #16
    dcd4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
    dcd8:	f00d bea7 	b.w	1ba2a <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    dcdc:	4b0a      	ldr	r3, [pc, #40]	; (dd08 <hci_evt_encode+0x36c>)
    dcde:	6819      	ldr	r1, [r3, #0]
    dce0:	2000      	movs	r0, #0
    dce2:	f001 0280 	and.w	r2, r1, #128	; 0x80
    dce6:	4603      	mov	r3, r0
    dce8:	4313      	orrs	r3, r2
    dcea:	f43f aedc 	beq.w	daa6 <hci_evt_encode+0x10a>
    dcee:	4632      	mov	r2, r6
    dcf0:	4629      	mov	r1, r5
    dcf2:	e7c6      	b.n	dc82 <hci_evt_encode+0x2e6>
	switch (pdu_data->llctrl.unknown_rsp.type) {
    dcf4:	f894 3020 	ldrb.w	r3, [r4, #32]
    dcf8:	2b0e      	cmp	r3, #14
    dcfa:	f47f aed4 	bne.w	daa6 <hci_evt_encode+0x10a>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    dcfe:	460b      	mov	r3, r1
    dd00:	462a      	mov	r2, r5
    dd02:	2100      	movs	r1, #0
    dd04:	201a      	movs	r0, #26
    dd06:	e7ab      	b.n	dc60 <hci_evt_encode+0x2c4>
    dd08:	20000168 	.word	0x20000168
    dd0c:	20000170 	.word	0x20000170
    dd10:	2000172c 	.word	0x2000172c
    dd14:	20001208 	.word	0x20001208
    dd18:	0001fd88 	.word	0x0001fd88
    dd1c:	0001fd3c 	.word	0x0001fd3c
    dd20:	0001fcdc 	.word	0x0001fcdc
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd24:	4b37      	ldr	r3, [pc, #220]	; (de04 <hci_evt_encode+0x468>)
    dd26:	6858      	ldr	r0, [r3, #4]
    dd28:	2100      	movs	r1, #0
    dd2a:	460a      	mov	r2, r1
    dd2c:	f000 5300 	and.w	r3, r0, #536870912	; 0x20000000
    dd30:	4313      	orrs	r3, r2
    dd32:	d01e      	beq.n	dd72 <hci_evt_encode+0x3d6>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    dd34:	4b34      	ldr	r3, [pc, #208]	; (de08 <hci_evt_encode+0x46c>)
    dd36:	6818      	ldr	r0, [r3, #0]
    dd38:	460b      	mov	r3, r1
    dd3a:	f000 0220 	and.w	r2, r0, #32
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    dd3e:	4313      	orrs	r3, r2
    dd40:	d017      	beq.n	dd72 <hci_evt_encode+0x3d6>
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    dd42:	4630      	mov	r0, r6
    dd44:	220a      	movs	r2, #10
    dd46:	2106      	movs	r1, #6
    dd48:	f7ff f852 	bl	cdf0 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    dd4c:	8005      	strh	r5, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
    dd4e:	8c23      	ldrh	r3, [r4, #32]
    dd50:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
    dd52:	8c63      	ldrh	r3, [r4, #34]	; 0x22
    dd54:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
    dd56:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
    dd58:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
    dd5a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
    dd5c:	8103      	strh	r3, [r0, #8]
    dd5e:	e6a2      	b.n	daa6 <hci_evt_encode+0x10a>
		ll_rl_crpa_set(node_rx->peer_addr_type,
    dd60:	7fa0      	ldrb	r0, [r4, #30]
    dd62:	f104 0325 	add.w	r3, r4, #37	; 0x25
    dd66:	22ff      	movs	r2, #255	; 0xff
    dd68:	f104 011f 	add.w	r1, r4, #31
    dd6c:	f006 f83a 	bl	13de4 <ll_rl_crpa_set>
    dd70:	e64b      	b.n	da0a <hci_evt_encode+0x6e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
    dd72:	2300      	movs	r3, #0
    dd74:	e9cd 3301 	strd	r3, r3, [sp, #4]
    dd78:	4628      	mov	r0, r5
    dd7a:	9300      	str	r3, [sp, #0]
    dd7c:	221a      	movs	r2, #26
    dd7e:	2102      	movs	r1, #2
    dd80:	f002 fb48 	bl	10414 <ll_conn_update>
		return;
    dd84:	e68f      	b.n	daa6 <hci_evt_encode+0x10a>
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    dd86:	ea50 0301 	orrs.w	r3, r0, r1
    dd8a:	d02c      	beq.n	dde6 <hci_evt_encode+0x44a>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    dd8c:	221e      	movs	r2, #30
    dd8e:	210a      	movs	r1, #10
    dd90:	4630      	mov	r0, r6
    dd92:	f7ff f82d 	bl	cdf0 <meta_evt>
    dd96:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
    dd98:	4641      	mov	r1, r8
    dd9a:	221e      	movs	r2, #30
    dd9c:	f00d fe70 	bl	1ba80 <memset>
			leecc->status = status;
    dda0:	7025      	strb	r5, [r4, #0]
			return;
    dda2:	e680      	b.n	daa6 <hci_evt_encode+0x10a>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    dda4:	2212      	movs	r2, #18
    dda6:	2101      	movs	r1, #1
    dda8:	f7ff f822 	bl	cdf0 <meta_evt>
    ddac:	4606      	mov	r6, r0
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
    ddae:	2206      	movs	r2, #6
	lecc->status = 0x00;
    ddb0:	7035      	strb	r5, [r6, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    ddb2:	f8a6 7001 	strh.w	r7, [r6, #1]
	lecc->role = node_rx->role;
    ddb6:	7f63      	ldrb	r3, [r4, #29]
    ddb8:	70f3      	strb	r3, [r6, #3]
	lecc->peer_addr.type = node_rx->peer_addr_type & 0x1;
    ddba:	7fa3      	ldrb	r3, [r4, #30]
    ddbc:	f003 0301 	and.w	r3, r3, #1
    ddc0:	7133      	strb	r3, [r6, #4]
	memcpy(&lecc->peer_addr.a.val[0], &node_rx->peer_addr[0], BDADDR_SIZE);
    ddc2:	f104 011f 	add.w	r1, r4, #31
    ddc6:	3005      	adds	r0, #5
    ddc8:	f00d fe2f 	bl	1ba2a <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    ddcc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
    ddce:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(node_rx->latency);
    ddd0:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
    ddd2:	f8a6 200d 	strh.w	r2, [r6, #13]
	lecc->interval = sys_cpu_to_le16(node_rx->interval);
    ddd6:	f8a6 100b 	strh.w	r1, [r6, #11]
	lecc->supv_timeout = sys_cpu_to_le16(node_rx->timeout);
    ddda:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = node_rx->sca;
    ddde:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
    dde2:	7473      	strb	r3, [r6, #17]
    dde4:	e65f      	b.n	daa6 <hci_evt_encode+0x10a>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    dde6:	2212      	movs	r2, #18
    dde8:	2101      	movs	r1, #1
    ddea:	4630      	mov	r0, r6
    ddec:	f7ff f800 	bl	cdf0 <meta_evt>
    ddf0:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
    ddf2:	4641      	mov	r1, r8
    ddf4:	2212      	movs	r2, #18
    ddf6:	f00d fe43 	bl	1ba80 <memset>
		lecc->status = status;
    ddfa:	7025      	strb	r5, [r4, #0]
		return;
    ddfc:	e653      	b.n	daa6 <hci_evt_encode+0x10a>
		LL_ASSERT(0);
    ddfe:	f241 03e2 	movw	r3, #4322	; 0x10e2
    de02:	e6fd      	b.n	dc00 <hci_evt_encode+0x264>
    de04:	20000168 	.word	0x20000168
    de08:	20000170 	.word	0x20000170

0000de0c <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
    de0c:	b570      	push	{r4, r5, r6, lr}
	hdr = net_buf_add(buf, sizeof(*hdr));
    de0e:	f100 0408 	add.w	r4, r0, #8
{
    de12:	460e      	mov	r6, r1
	hdr = net_buf_add(buf, sizeof(*hdr));
    de14:	4620      	mov	r0, r4
    de16:	2102      	movs	r1, #2
{
    de18:	4615      	mov	r5, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    de1a:	f010 fbbb 	bl	1e594 <net_buf_simple_add>
    de1e:	4603      	mov	r3, r0
	hdr->evt = evt;
    de20:	2213      	movs	r2, #19
	hdr->len = len;
    de22:	2105      	movs	r1, #5
	hdr->evt = evt;
    de24:	701a      	strb	r2, [r3, #0]
	hdr->len = len;
    de26:	7059      	strb	r1, [r3, #1]
	num_handles = 1U;

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
    de28:	4620      	mov	r0, r4
    de2a:	f010 fbb3 	bl	1e594 <net_buf_simple_add>
	ep->num_handles = num_handles;
    de2e:	2301      	movs	r3, #1
    de30:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
    de32:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    de36:	f8a0 5003 	strh.w	r5, [r0, #3]
}
    de3a:	bd70      	pop	{r4, r5, r6, pc}

0000de3c <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    de3c:	7903      	ldrb	r3, [r0, #4]
    de3e:	2b02      	cmp	r3, #2
    de40:	d009      	beq.n	de56 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
    de42:	2b0c      	cmp	r3, #12
    de44:	d005      	beq.n	de52 <hci_get_class+0x16>
    de46:	3b0d      	subs	r3, #13
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EXT */

		default:
			return HCI_CLASS_NONE;
    de48:	2b05      	cmp	r3, #5
    de4a:	bf94      	ite	ls
    de4c:	2003      	movls	r0, #3
    de4e:	2000      	movhi	r0, #0
    de50:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    de52:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
    de54:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    de56:	7f03      	ldrb	r3, [r0, #28]
    de58:	f003 0303 	and.w	r3, r3, #3
    de5c:	2b03      	cmp	r3, #3
		return HCI_CLASS_ACL_DATA;
    de5e:	bf0c      	ite	eq
    de60:	2004      	moveq	r0, #4
    de62:	2005      	movne	r0, #5
    de64:	4770      	bx	lr
    de66:	bf00      	nop

0000de68 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
    de68:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
    de6a:	480b      	ldr	r0, [pc, #44]	; (de98 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    de6c:	490b      	ldr	r1, [pc, #44]	; (de9c <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    de6e:	4a0c      	ldr	r2, [pc, #48]	; (dea0 <hci_init+0x38>)
	conn_count = 0U;
    de70:	4b0c      	ldr	r3, [pc, #48]	; (dea4 <hci_init+0x3c>)
	event_mask = DEFAULT_EVENT_MASK;
    de72:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    de76:	f641 75ff 	movw	r5, #8191	; 0x1fff
    de7a:	e9c0 4500 	strd	r4, r5, [r0]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    de7e:	2400      	movs	r4, #0
    de80:	2500      	movs	r5, #0
    de82:	e9c1 4500 	strd	r4, r5, [r1]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    de86:	201f      	movs	r0, #31
    de88:	2100      	movs	r1, #0
    de8a:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
    de8e:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
    de90:	bc30      	pop	{r4, r5}
	conn_count = 0U;
    de92:	601a      	str	r2, [r3, #0]
}
    de94:	4770      	bx	lr
    de96:	bf00      	nop
    de98:	20000168 	.word	0x20000168
    de9c:	20001208 	.word	0x20001208
    dea0:	20000170 	.word	0x20000170
    dea4:	2000172c 	.word	0x2000172c

0000dea8 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
    dea8:	f006 bba4 	b.w	145f4 <lll_csrand_get>

0000deac <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
    deac:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
    deae:	2300      	movs	r3, #0
    deb0:	f007 ff84 	bl	15dbc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
    deb4:	2000      	movs	r0, #0
    deb6:	bd08      	pop	{r3, pc}

0000deb8 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
    deb8:	b510      	push	{r4, lr}
    deba:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
    debc:	f006 fbbc 	bl	14638 <lll_reset>
	LL_ASSERT(!err);
    dec0:	b950      	cbnz	r0, ded8 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
    dec2:	f007 f81d 	bl	14f00 <lll_adv_reset>
	LL_ASSERT(!err);
    dec6:	b9c0      	cbnz	r0, defa <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
    dec8:	f007 fa78 	bl	153bc <lll_conn_reset>
	LL_ASSERT(!err);
    decc:	bb30      	cbnz	r0, df1c <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
    dece:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CONN */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
    ded0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ded4:	f00b ba5c 	b.w	19390 <z_impl_k_sem_give>
	LL_ASSERT(!err);
    ded8:	4a19      	ldr	r2, [pc, #100]	; (df40 <perform_lll_reset+0x88>)
    deda:	491a      	ldr	r1, [pc, #104]	; (df44 <perform_lll_reset+0x8c>)
    dedc:	481a      	ldr	r0, [pc, #104]	; (df48 <perform_lll_reset+0x90>)
    dede:	f240 53bb 	movw	r3, #1467	; 0x5bb
    dee2:	f00b ff88 	bl	19df6 <printk>
    dee6:	4040      	eors	r0, r0
    dee8:	f380 8811 	msr	BASEPRI, r0
    deec:	f04f 0003 	mov.w	r0, #3
    def0:	df02      	svc	2
	err = lll_adv_reset();
    def2:	f007 f805 	bl	14f00 <lll_adv_reset>
	LL_ASSERT(!err);
    def6:	2800      	cmp	r0, #0
    def8:	d0e6      	beq.n	dec8 <perform_lll_reset+0x10>
    defa:	4a11      	ldr	r2, [pc, #68]	; (df40 <perform_lll_reset+0x88>)
    defc:	4911      	ldr	r1, [pc, #68]	; (df44 <perform_lll_reset+0x8c>)
    defe:	4812      	ldr	r0, [pc, #72]	; (df48 <perform_lll_reset+0x90>)
    df00:	f44f 63b8 	mov.w	r3, #1472	; 0x5c0
    df04:	f00b ff77 	bl	19df6 <printk>
    df08:	4040      	eors	r0, r0
    df0a:	f380 8811 	msr	BASEPRI, r0
    df0e:	f04f 0003 	mov.w	r0, #3
    df12:	df02      	svc	2
	err = lll_conn_reset();
    df14:	f007 fa52 	bl	153bc <lll_conn_reset>
	LL_ASSERT(!err);
    df18:	2800      	cmp	r0, #0
    df1a:	d0d8      	beq.n	dece <perform_lll_reset+0x16>
    df1c:	4a08      	ldr	r2, [pc, #32]	; (df40 <perform_lll_reset+0x88>)
    df1e:	4909      	ldr	r1, [pc, #36]	; (df44 <perform_lll_reset+0x8c>)
    df20:	4809      	ldr	r0, [pc, #36]	; (df48 <perform_lll_reset+0x90>)
    df22:	f240 53cc 	movw	r3, #1484	; 0x5cc
    df26:	f00b ff66 	bl	19df6 <printk>
    df2a:	4040      	eors	r0, r0
    df2c:	f380 8811 	msr	BASEPRI, r0
    df30:	f04f 0003 	mov.w	r0, #3
    df34:	df02      	svc	2
    df36:	4620      	mov	r0, r4
}
    df38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    df3c:	f00b ba28 	b.w	19390 <z_impl_k_sem_give>
    df40:	0001fdc4 	.word	0x0001fdc4
    df44:	0001fe00 	.word	0x0001fe00
    df48:	0001fcdc 	.word	0x0001fcdc

0000df4c <disabled_cb>:
    df4c:	f00b ba20 	b.w	19390 <z_impl_k_sem_give>

0000df50 <tx_cmplt_get>:
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */
}

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
    df50:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    df54:	4f2f      	ldr	r7, [pc, #188]	; (e014 <tx_cmplt_get+0xc4>)
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
    df56:	780b      	ldrb	r3, [r1, #0]
    df58:	783c      	ldrb	r4, [r7, #0]
{
    df5a:	460d      	mov	r5, r1
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    df5c:	7879      	ldrb	r1, [r7, #1]
    df5e:	4299      	cmp	r1, r3
    df60:	bf9c      	itt	ls
    df62:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    df64:	702b      	strbls	r3, [r5, #0]
	}

	if (*idx == last) {
    df66:	429a      	cmp	r2, r3
{
    df68:	4683      	mov	fp, r0
    df6a:	4692      	mov	sl, r2
    df6c:	d046      	beq.n	dffc <tx_cmplt_get+0xac>
		return NULL;
	}

	i = *idx + 1;
    df6e:	1c5a      	adds	r2, r3, #1
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
    df70:	4e29      	ldr	r6, [pc, #164]	; (e018 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
    df72:	b2d2      	uxtb	r2, r2
	p = (void *)(fifo + (*idx) * size);
    df74:	fb13 f304 	smulbb	r3, r3, r4
		i = 0U;
    df78:	4291      	cmp	r1, r2
    df7a:	bf08      	it	eq
    df7c:	2200      	moveq	r2, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
    df7e:	18f1      	adds	r1, r6, r3

	*idx = i;
    df80:	702a      	strb	r2, [r5, #0]
    df82:	d03b      	beq.n	dffc <tx_cmplt_get+0xac>
		return 0;
	}

	*handle = tx->handle;
    df84:	5af3      	ldrh	r3, [r6, r3]
    df86:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
    df88:	f04f 0800 	mov.w	r8, #0
    df8c:	f04f 0901 	mov.w	r9, #1
    df90:	e020      	b.n	dfd4 <tx_cmplt_get+0x84>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
    df92:	f108 0801 	add.w	r8, r8, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
    df96:	f030 0303 	bics.w	r3, r0, #3
			cmplt++;
    df9a:	fa5f f888 	uxtb.w	r8, r8
    df9e:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    dfa2:	d125      	bne.n	dff0 <tx_cmplt_get+0xa0>
	if (*idx >= count) {
    dfa4:	782b      	ldrb	r3, [r5, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
    dfa6:	7879      	ldrb	r1, [r7, #1]
    dfa8:	7838      	ldrb	r0, [r7, #0]
    dfaa:	4299      	cmp	r1, r3
    dfac:	bf9c      	itt	ls
    dfae:	78bb      	ldrbls	r3, [r7, #2]
		*idx = first;
    dfb0:	702b      	strbls	r3, [r5, #0]
	if (*idx == last) {
    dfb2:	459a      	cmp	sl, r3
    dfb4:	d024      	beq.n	e000 <tx_cmplt_get+0xb0>
	i = *idx + 1;
    dfb6:	1c5c      	adds	r4, r3, #1
    dfb8:	b2e4      	uxtb	r4, r4
	p = (void *)(fifo + (*idx) * size);
    dfba:	fb13 f300 	smulbb	r3, r3, r0
		i = 0U;
    dfbe:	42a1      	cmp	r1, r4
    dfc0:	bf08      	it	eq
    dfc2:	2400      	moveq	r4, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
    dfc4:	18f1      	adds	r1, r6, r3
	*idx = i;
    dfc6:	702c      	strb	r4, [r5, #0]
    dfc8:	d01a      	beq.n	e000 <tx_cmplt_get+0xb0>
    dfca:	5af0      	ldrh	r0, [r6, r3]
    dfcc:	f8bb 3000 	ldrh.w	r3, [fp]
    dfd0:	4298      	cmp	r0, r3
    dfd2:	d115      	bne.n	e000 <tx_cmplt_get+0xb0>
		node_tx = tx->node;
    dfd4:	6848      	ldr	r0, [r1, #4]
		if (!node_tx || (node_tx == (void *)1) ||
    dfd6:	2801      	cmp	r0, #1
    dfd8:	d9db      	bls.n	df92 <tx_cmplt_get+0x42>
    dfda:	f030 0303 	bics.w	r3, r0, #3
    dfde:	d00a      	beq.n	dff6 <tx_cmplt_get+0xa6>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
    dfe0:	7903      	ldrb	r3, [r0, #4]
    dfe2:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
    dfe6:	3b01      	subs	r3, #1
    dfe8:	2b01      	cmp	r3, #1
    dfea:	d90c      	bls.n	e006 <tx_cmplt_get+0xb6>
    dfec:	2302      	movs	r3, #2
    dfee:	604b      	str	r3, [r1, #4]
			ll_tx_mem_release(node_tx);
    dff0:	f002 f9c0 	bl	10374 <ll_tx_mem_release>
    dff4:	e7d6      	b.n	dfa4 <tx_cmplt_get+0x54>
    dff6:	2302      	movs	r3, #2
    dff8:	604b      	str	r3, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    dffa:	e7d3      	b.n	dfa4 <tx_cmplt_get+0x54>
		return 0;
    dffc:	f04f 0800 	mov.w	r8, #0

	return cmplt;
}
    e000:	4640      	mov	r0, r8
    e002:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
    e006:	f108 0801 	add.w	r8, r8, #1
    e00a:	fa5f f888 	uxtb.w	r8, r8
    e00e:	f8c1 9004 	str.w	r9, [r1, #4]
		if (((uint32_t)node_tx & ~3)) {
    e012:	e7ed      	b.n	dff0 <tx_cmplt_get+0xa0>
    e014:	20000720 	.word	0x20000720
    e018:	20000724 	.word	0x20000724

0000e01c <rx_demux>:
{
    e01c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e020:	4cb0      	ldr	r4, [pc, #704]	; (e2e4 <rx_demux+0x2c8>)
	k_sem_give(sem_recv);
    e022:	4eb1      	ldr	r6, [pc, #708]	; (e2e8 <rx_demux+0x2cc>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
    e024:	f8df b2e8 	ldr.w	fp, [pc, #744]	; e310 <rx_demux+0x2f4>
{
    e028:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    e02a:	e9d4 0100 	ldrd	r0, r1, [r4]
    e02e:	aa03      	add	r2, sp, #12
    e030:	f7fd f952 	bl	b2d8 <memq_peek>
		if (link) {
    e034:	4607      	mov	r7, r0
    e036:	2800      	cmp	r0, #0
    e038:	d036      	beq.n	e0a8 <rx_demux+0x8c>
			LL_ASSERT(rx);
    e03a:	9b03      	ldr	r3, [sp, #12]
    e03c:	2b00      	cmp	r3, #0
    e03e:	f000 8122 	beq.w	e286 <rx_demux+0x26a>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
    e042:	7818      	ldrb	r0, [r3, #0]
    e044:	aa04      	add	r2, sp, #16
    e046:	a902      	add	r1, sp, #8
    e048:	f004 fd0a 	bl	12a60 <ull_conn_ack_by_last_peek>
			if (link_tx) {
    e04c:	4605      	mov	r5, r0
    e04e:	2800      	cmp	r0, #0
    e050:	d056      	beq.n	e100 <rx_demux+0xe4>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
    e052:	e9dd 1203 	ldrd	r1, r2, [sp, #12]
    e056:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e05a:	f891 9000 	ldrb.w	r9, [r1]
    e05e:	9205      	str	r2, [sp, #20]
    e060:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    e064:	f10d 0814 	add.w	r8, sp, #20
    e068:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    e06c:	f004 fd0e 	bl	12a8c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    e070:	4629      	mov	r1, r5
    e072:	9a05      	ldr	r2, [sp, #20]
    e074:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e078:	f004 fd50 	bl	12b1c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    e07c:	4628      	mov	r0, r5
    e07e:	f004 fcc9 	bl	12a14 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    e082:	4642      	mov	r2, r8
    e084:	4639      	mov	r1, r7
    e086:	4648      	mov	r0, r9
    e088:	f004 fcea 	bl	12a60 <ull_conn_ack_by_last_peek>
	} while (link);
    e08c:	4605      	mov	r5, r0
    e08e:	2800      	cmp	r0, #0
    e090:	d1ec      	bne.n	e06c <rx_demux+0x50>
	k_sem_give(sem_recv);
    e092:	6830      	ldr	r0, [r6, #0]
    e094:	f00b f97c 	bl	19390 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
    e098:	e9d4 0100 	ldrd	r0, r1, [r4]
    e09c:	aa03      	add	r2, sp, #12
    e09e:	f7fd f91b 	bl	b2d8 <memq_peek>
		if (link) {
    e0a2:	4607      	mov	r7, r0
    e0a4:	2800      	cmp	r0, #0
    e0a6:	d1c8      	bne.n	e03a <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
    e0a8:	aa04      	add	r2, sp, #16
    e0aa:	a902      	add	r1, sp, #8
    e0ac:	f10d 0007 	add.w	r0, sp, #7
    e0b0:	f004 fcbc 	bl	12a2c <ull_conn_ack_peek>
			if (link) {
    e0b4:	4605      	mov	r5, r0
    e0b6:	2800      	cmp	r0, #0
    e0b8:	d061      	beq.n	e17e <rx_demux+0x162>
				rx_demux_conn_tx_ack(ack_last, handle,
    e0ba:	9a04      	ldr	r2, [sp, #16]
    e0bc:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    e0c0:	f89d 9007 	ldrb.w	r9, [sp, #7]
    e0c4:	9205      	str	r2, [sp, #20]
    e0c6:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
    e0ca:	f10d 0814 	add.w	r8, sp, #20
    e0ce:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
    e0d2:	f004 fcdb 	bl	12a8c <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
    e0d6:	4629      	mov	r1, r5
    e0d8:	9a05      	ldr	r2, [sp, #20]
    e0da:	f8bd 000a 	ldrh.w	r0, [sp, #10]
    e0de:	f004 fd1d 	bl	12b1c <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
    e0e2:	4628      	mov	r0, r5
    e0e4:	f004 fc96 	bl	12a14 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
    e0e8:	4642      	mov	r2, r8
    e0ea:	4639      	mov	r1, r7
    e0ec:	4648      	mov	r0, r9
    e0ee:	f004 fcb7 	bl	12a60 <ull_conn_ack_by_last_peek>
	} while (link);
    e0f2:	4605      	mov	r5, r0
    e0f4:	2800      	cmp	r0, #0
    e0f6:	d1ec      	bne.n	e0d2 <rx_demux+0xb6>
	k_sem_give(sem_recv);
    e0f8:	6830      	ldr	r0, [r6, #0]
    e0fa:	f00b f949 	bl	19390 <z_impl_k_sem_give>
			if (nack) {
    e0fe:	e7cb      	b.n	e098 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
    e100:	9b03      	ldr	r3, [sp, #12]
    e102:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
    e104:	791b      	ldrb	r3, [r3, #4]
    e106:	3b01      	subs	r3, #1
    e108:	2b0c      	cmp	r3, #12
    e10a:	d808      	bhi.n	e11e <rx_demux+0x102>
    e10c:	e8df f003 	tbb	[pc, r3]
    e110:	0707303a 	.word	0x0707303a
    e114:	07070707 	.word	0x07070707
    e118:	26070707 	.word	0x26070707
    e11c:	15          	.byte	0x15
    e11d:	00          	.byte	0x00
		LL_ASSERT(0);
    e11e:	4a73      	ldr	r2, [pc, #460]	; (e2ec <rx_demux+0x2d0>)
    e120:	4973      	ldr	r1, [pc, #460]	; (e2f0 <rx_demux+0x2d4>)
    e122:	4874      	ldr	r0, [pc, #464]	; (e2f4 <rx_demux+0x2d8>)
    e124:	f240 7366 	movw	r3, #1894	; 0x766
    e128:	f00b fe65 	bl	19df6 <printk>
    e12c:	4040      	eors	r0, r0
    e12e:	f380 8811 	msr	BASEPRI, r0
    e132:	f04f 0003 	mov.w	r0, #3
    e136:	df02      	svc	2
			if (nack) {
    e138:	e777      	b.n	e02a <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e13a:	496a      	ldr	r1, [pc, #424]	; (e2e4 <rx_demux+0x2c8>)
    e13c:	6860      	ldr	r0, [r4, #4]
    e13e:	2200      	movs	r2, #0
    e140:	f7fd f8d2 	bl	b2e8 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e144:	4b6c      	ldr	r3, [pc, #432]	; (e2f8 <rx_demux+0x2dc>)
		ll_rx_put(link, rx);
    e146:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e148:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e14a:	4a6c      	ldr	r2, [pc, #432]	; (e2fc <rx_demux+0x2e0>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e14c:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e14e:	4638      	mov	r0, r7
    e150:	f7fd f8ba 	bl	b2c8 <memq_enqueue>
	k_sem_give(sem_recv);
    e154:	6830      	ldr	r0, [r6, #0]
    e156:	f00b f91b 	bl	19390 <z_impl_k_sem_give>
			if (nack) {
    e15a:	e79d      	b.n	e098 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e15c:	4961      	ldr	r1, [pc, #388]	; (e2e4 <rx_demux+0x2c8>)
    e15e:	6860      	ldr	r0, [r4, #4]
    e160:	2200      	movs	r2, #0
    e162:	f7fd f8c1 	bl	b2e8 <memq_dequeue>
		ull_conn_setup(link, rx);
    e166:	9905      	ldr	r1, [sp, #20]
    e168:	4638      	mov	r0, r7
    e16a:	f002 fc33 	bl	109d4 <ull_conn_setup>
			if (nack) {
    e16e:	e75c      	b.n	e02a <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
    e170:	a905      	add	r1, sp, #20
    e172:	4638      	mov	r0, r7
    e174:	f002 fc50 	bl	10a18 <ull_conn_rx>
		if (nack) {
    e178:	2800      	cmp	r0, #0
    e17a:	f000 80d1 	beq.w	e320 <rx_demux+0x304>
}
    e17e:	b007      	add	sp, #28
    e180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e184:	4957      	ldr	r1, [pc, #348]	; (e2e4 <rx_demux+0x2c8>)
    e186:	6860      	ldr	r0, [r4, #4]
    e188:	2200      	movs	r2, #0
    e18a:	f7fd f8ad 	bl	b2e8 <memq_dequeue>
		rx_demux_event_done(link, rx);
    e18e:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
    e190:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
    e194:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
    e198:	b17b      	cbz	r3, e1ba <rx_demux+0x19e>
    e19a:	2b01      	cmp	r3, #1
    e19c:	f000 80bc 	beq.w	e318 <rx_demux+0x2fc>
		LL_ASSERT(0);
    e1a0:	4a52      	ldr	r2, [pc, #328]	; (e2ec <rx_demux+0x2d0>)
    e1a2:	4953      	ldr	r1, [pc, #332]	; (e2f0 <rx_demux+0x2d4>)
    e1a4:	4853      	ldr	r0, [pc, #332]	; (e2f4 <rx_demux+0x2d8>)
    e1a6:	f240 73a2 	movw	r3, #1954	; 0x7a2
    e1aa:	f00b fe24 	bl	19df6 <printk>
    e1ae:	4040      	eors	r0, r0
    e1b0:	f380 8811 	msr	BASEPRI, r0
    e1b4:	f04f 0003 	mov.w	r0, #3
    e1b8:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e1ba:	4a51      	ldr	r2, [pc, #324]	; (e300 <rx_demux+0x2e4>)
    e1bc:	78d1      	ldrb	r1, [r2, #3]
	if (last == count) {
    e1be:	f892 c001 	ldrb.w	ip, [r2, #1]
    e1c2:	7890      	ldrb	r0, [r2, #2]
	last = last + 1;
    e1c4:	1c4b      	adds	r3, r1, #1
    e1c6:	b2db      	uxtb	r3, r3
		last = 0U;
    e1c8:	459c      	cmp	ip, r3
    e1ca:	bf08      	it	eq
    e1cc:	2300      	moveq	r3, #0
	if (last == first) {
    e1ce:	4298      	cmp	r0, r3
	done->extra.type = 0U;
    e1d0:	f04f 0c00 	mov.w	ip, #0
    e1d4:	f885 c020 	strb.w	ip, [r5, #32]
    e1d8:	f000 80b6 	beq.w	e348 <rx_demux+0x32c>
	done->hdr.link = link;
    e1dc:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e1de:	7810      	ldrb	r0, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e1e0:	fb00 2101 	mla	r1, r0, r1, r2
    e1e4:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
    e1e6:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
    e1e8:	4d46      	ldr	r5, [pc, #280]	; (e304 <rx_demux+0x2e8>)
    e1ea:	78ab      	ldrb	r3, [r5, #2]
	if (first == last) {
    e1ec:	78ea      	ldrb	r2, [r5, #3]
    e1ee:	f895 c000 	ldrb.w	ip, [r5]
    e1f2:	429a      	cmp	r2, r3
    e1f4:	d02a      	beq.n	e24c <rx_demux+0x230>
	return (void *)(fifo + first * size);
    e1f6:	f105 0a04 	add.w	sl, r5, #4
    e1fa:	fb03 ac0c 	mla	ip, r3, ip, sl
	while (next) {
    e1fe:	f1bc 0f00 	cmp.w	ip, #0
    e202:	d023      	beq.n	e24c <rx_demux+0x230>
		uint8_t is_aborted = next->is_aborted;
    e204:	f89c 3020 	ldrb.w	r3, [ip, #32]
		if (!is_aborted) {
    e208:	079a      	lsls	r2, r3, #30
		uint8_t is_aborted = next->is_aborted;
    e20a:	f3c3 0740 	ubfx	r7, r3, #1, #1
		uint8_t is_resume = next->is_resume;
    e20e:	f003 0801 	and.w	r8, r3, #1
		if (!is_aborted) {
    e212:	d547      	bpl.n	e2a4 <rx_demux+0x288>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
    e214:	78ea      	ldrb	r2, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
    e216:	78ab      	ldrb	r3, [r5, #2]
    e218:	f895 c000 	ldrb.w	ip, [r5]
    e21c:	7869      	ldrb	r1, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
    e21e:	429a      	cmp	r2, r3
    e220:	d014      	beq.n	e24c <rx_demux+0x230>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
    e222:	3301      	adds	r3, #1
    e224:	b2db      	uxtb	r3, r3
	if (_first == count) {
    e226:	4299      	cmp	r1, r3
    e228:	d054      	beq.n	e2d4 <rx_demux+0x2b8>
	if (first == last) {
    e22a:	429a      	cmp	r2, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
    e22c:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    e22e:	d00d      	beq.n	e24c <rx_demux+0x230>
	return (void *)(fifo + first * size);
    e230:	fb03 ac0c 	mla	ip, r3, ip, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
    e234:	f1bc 0f00 	cmp.w	ip, #0
    e238:	d008      	beq.n	e24c <rx_demux+0x230>
    e23a:	2f00      	cmp	r7, #0
    e23c:	d1e2      	bne.n	e204 <rx_demux+0x1e8>
    e23e:	f1b8 0f00 	cmp.w	r8, #0
    e242:	d003      	beq.n	e24c <rx_demux+0x230>
    e244:	f89c 3020 	ldrb.w	r3, [ip, #32]
    e248:	07db      	lsls	r3, r3, #31
    e24a:	d5db      	bpl.n	e204 <rx_demux+0x1e8>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
    e24c:	f1b9 0f00 	cmp.w	r9, #0
    e250:	f43f aeeb 	beq.w	e02a <rx_demux+0xe>
	return hdr->ref;
    e254:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
    e258:	2b00      	cmp	r3, #0
    e25a:	f000 8083 	beq.w	e364 <rx_demux+0x348>
	return hdr->ref--;
    e25e:	f899 3000 	ldrb.w	r3, [r9]
    e262:	3b01      	subs	r3, #1
    e264:	b2db      	uxtb	r3, r3
    e266:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
    e26a:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
    e26e:	2b00      	cmp	r3, #0
    e270:	f47f aedb 	bne.w	e02a <rx_demux+0xe>
    e274:	f8d9 3004 	ldr.w	r3, [r9, #4]
    e278:	2b00      	cmp	r3, #0
    e27a:	f43f aed6 	beq.w	e02a <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
    e27e:	f8d9 0008 	ldr.w	r0, [r9, #8]
    e282:	4798      	blx	r3
			if (nack) {
    e284:	e6d1      	b.n	e02a <rx_demux+0xe>
			LL_ASSERT(rx);
    e286:	4a19      	ldr	r2, [pc, #100]	; (e2ec <rx_demux+0x2d0>)
    e288:	491f      	ldr	r1, [pc, #124]	; (e308 <rx_demux+0x2ec>)
    e28a:	481a      	ldr	r0, [pc, #104]	; (e2f4 <rx_demux+0x2d8>)
    e28c:	f240 6366 	movw	r3, #1638	; 0x666
    e290:	f00b fdb1 	bl	19df6 <printk>
    e294:	4040      	eors	r0, r0
    e296:	f380 8811 	msr	BASEPRI, r0
    e29a:	f04f 0003 	mov.w	r0, #3
    e29e:	df02      	svc	2
    e2a0:	9b03      	ldr	r3, [sp, #12]
    e2a2:	e6ce      	b.n	e042 <rx_demux+0x26>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e2a4:	465b      	mov	r3, fp
    e2a6:	463a      	mov	r2, r7
    e2a8:	4639      	mov	r1, r7
    e2aa:	2001      	movs	r0, #1
			mfy.param = next;
    e2ac:	f8cb c008 	str.w	ip, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    e2b0:	f7fd f87e 	bl	b3b0 <mayfly_enqueue>
			LL_ASSERT(!ret);
    e2b4:	2800      	cmp	r0, #0
    e2b6:	d0ad      	beq.n	e214 <rx_demux+0x1f8>
    e2b8:	4a0c      	ldr	r2, [pc, #48]	; (e2ec <rx_demux+0x2d0>)
    e2ba:	4914      	ldr	r1, [pc, #80]	; (e30c <rx_demux+0x2f0>)
    e2bc:	480d      	ldr	r0, [pc, #52]	; (e2f4 <rx_demux+0x2d8>)
    e2be:	f240 73ba 	movw	r3, #1978	; 0x7ba
    e2c2:	f00b fd98 	bl	19df6 <printk>
    e2c6:	4040      	eors	r0, r0
    e2c8:	f380 8811 	msr	BASEPRI, r0
    e2cc:	f04f 0003 	mov.w	r0, #3
    e2d0:	df02      	svc	2
    e2d2:	e79f      	b.n	e214 <rx_demux+0x1f8>
	*first = _first; /* Write back read-index */
    e2d4:	2300      	movs	r3, #0
    e2d6:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
    e2d8:	2a00      	cmp	r2, #0
    e2da:	d0b7      	beq.n	e24c <rx_demux+0x230>
	return (void *)(fifo + first * size);
    e2dc:	f8df c034 	ldr.w	ip, [pc, #52]	; e314 <rx_demux+0x2f8>
    e2e0:	e7ab      	b.n	e23a <rx_demux+0x21e>
    e2e2:	bf00      	nop
    e2e4:	20001b08 	.word	0x20001b08
    e2e8:	20001b10 	.word	0x20001b10
    e2ec:	0001fdc4 	.word	0x0001fdc4
    e2f0:	0001fd3c 	.word	0x0001fd3c
    e2f4:	0001fcdc 	.word	0x0001fcdc
    e2f8:	20000720 	.word	0x20000720
    e2fc:	20001b04 	.word	0x20001b04
    e300:	200005bc 	.word	0x200005bc
    e304:	200005fc 	.word	0x200005fc
    e308:	0001fe08 	.word	0x0001fe08
    e30c:	0001fe0c 	.word	0x0001fe0c
    e310:	20000774 	.word	0x20000774
    e314:	20000600 	.word	0x20000600
		ull_conn_done(done);
    e318:	4628      	mov	r0, r5
    e31a:	f004 f8ed 	bl	124f8 <ull_conn_done>
		break;
    e31e:	e74c      	b.n	e1ba <rx_demux+0x19e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
    e320:	4917      	ldr	r1, [pc, #92]	; (e380 <rx_demux+0x364>)
    e322:	4602      	mov	r2, r0
    e324:	6860      	ldr	r0, [r4, #4]
    e326:	f7fc ffdf 	bl	b2e8 <memq_dequeue>
		if (rx) {
    e32a:	9905      	ldr	r1, [sp, #20]
    e32c:	2900      	cmp	r1, #0
    e32e:	f43f ae7c 	beq.w	e02a <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e332:	4b14      	ldr	r3, [pc, #80]	; (e384 <rx_demux+0x368>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e334:	4a14      	ldr	r2, [pc, #80]	; (e388 <rx_demux+0x36c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    e336:	78db      	ldrb	r3, [r3, #3]
    e338:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    e33a:	4638      	mov	r0, r7
    e33c:	f7fc ffc4 	bl	b2c8 <memq_enqueue>
	k_sem_give(sem_recv);
    e340:	6830      	ldr	r0, [r6, #0]
    e342:	f00b f825 	bl	19390 <z_impl_k_sem_give>
			if (nack) {
    e346:	e670      	b.n	e02a <rx_demux+0xe>
	LL_ASSERT(release == done);
    e348:	4a10      	ldr	r2, [pc, #64]	; (e38c <rx_demux+0x370>)
    e34a:	4911      	ldr	r1, [pc, #68]	; (e390 <rx_demux+0x374>)
    e34c:	4811      	ldr	r0, [pc, #68]	; (e394 <rx_demux+0x378>)
    e34e:	f240 73a9 	movw	r3, #1961	; 0x7a9
    e352:	f00b fd50 	bl	19df6 <printk>
    e356:	4040      	eors	r0, r0
    e358:	f380 8811 	msr	BASEPRI, r0
    e35c:	f04f 0003 	mov.w	r0, #3
    e360:	df02      	svc	2
    e362:	e741      	b.n	e1e8 <rx_demux+0x1cc>
	LL_ASSERT(ull_ref_get(ull_hdr));
    e364:	4a09      	ldr	r2, [pc, #36]	; (e38c <rx_demux+0x370>)
    e366:	490c      	ldr	r1, [pc, #48]	; (e398 <rx_demux+0x37c>)
    e368:	480a      	ldr	r0, [pc, #40]	; (e394 <rx_demux+0x378>)
    e36a:	f240 73cc 	movw	r3, #1996	; 0x7cc
    e36e:	f00b fd42 	bl	19df6 <printk>
    e372:	4040      	eors	r0, r0
    e374:	f380 8811 	msr	BASEPRI, r0
    e378:	f04f 0003 	mov.w	r0, #3
    e37c:	df02      	svc	2
    e37e:	e76e      	b.n	e25e <rx_demux+0x242>
    e380:	20001b08 	.word	0x20001b08
    e384:	20000720 	.word	0x20000720
    e388:	20001b04 	.word	0x20001b04
    e38c:	0001fdc4 	.word	0x0001fdc4
    e390:	0001fe2c 	.word	0x0001fe2c
    e394:	0001fcdc 	.word	0x0001fcdc
    e398:	0001fe14 	.word	0x0001fe14

0000e39c <ll_init>:
{
    e39c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	sem_recv = sem_rx;
    e3a0:	4b9a      	ldr	r3, [pc, #616]	; (e60c <ll_init+0x270>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e3a2:	4c9b      	ldr	r4, [pc, #620]	; (e610 <ll_init+0x274>)
	sem_recv = sem_rx;
    e3a4:	6018      	str	r0, [r3, #0]
{
    e3a6:	b086      	sub	sp, #24
	cntr_init();
    e3a8:	f007 fc8c 	bl	15cc4 <cntr_init>
	mayfly_init();
    e3ac:	f7fc ffac 	bl	b308 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e3b0:	4998      	ldr	r1, [pc, #608]	; (e614 <ll_init+0x278>)
    e3b2:	4899      	ldr	r0, [pc, #612]	; (e618 <ll_init+0x27c>)
    e3b4:	9105      	str	r1, [sp, #20]
    e3b6:	9004      	str	r0, [sp, #16]
    e3b8:	4998      	ldr	r1, [pc, #608]	; (e61c <ll_init+0x280>)
    e3ba:	4899      	ldr	r0, [pc, #612]	; (e620 <ll_init+0x284>)
    e3bc:	9103      	str	r1, [sp, #12]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e3be:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e3c0:	2203      	movs	r2, #3
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e3c2:	210b      	movs	r1, #11
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e3c4:	2502      	movs	r5, #2
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e3c6:	e9cd 1001 	strd	r1, r0, [sp, #4]
    e3ca:	9400      	str	r4, [sp, #0]
    e3cc:	4619      	mov	r1, r3
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
    e3ce:	7022      	strb	r2, [r4, #0]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
    e3d0:	7223      	strb	r3, [r4, #8]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e3d2:	4a94      	ldr	r2, [pc, #592]	; (e624 <ll_init+0x288>)
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
    e3d4:	7425      	strb	r5, [r4, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e3d6:	2000      	movs	r0, #0
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
    e3d8:	7625      	strb	r5, [r4, #24]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
    e3da:	f7fe f997 	bl	c70c <ticker_init>
	LL_ASSERT(!err);
    e3de:	2800      	cmp	r0, #0
    e3e0:	f040 80e5 	bne.w	e5ae <ll_init+0x212>
	return z_impl_k_sem_init(sem, initial_count, limit);
    e3e4:	2201      	movs	r2, #1
    e3e6:	2100      	movs	r1, #0
    e3e8:	488f      	ldr	r0, [pc, #572]	; (e628 <ll_init+0x28c>)
    e3ea:	f010 fd69 	bl	1eec0 <z_impl_k_sem_init>
	err = lll_init();
    e3ee:	f006 f8cf 	bl	14590 <lll_init>
	if (err) {
    e3f2:	4604      	mov	r4, r0
    e3f4:	b118      	cbz	r0, e3fe <ll_init+0x62>
}
    e3f6:	4620      	mov	r0, r4
    e3f8:	b006      	add	sp, #24
    e3fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e3fe:	4b8b      	ldr	r3, [pc, #556]	; (e62c <ll_init+0x290>)
		link = mem_acquire(&mem_link_done.free);
    e400:	f8df 8230 	ldr.w	r8, [pc, #560]	; e634 <ll_init+0x298>
    e404:	4d8a      	ldr	r5, [pc, #552]	; (e630 <ll_init+0x294>)
		rx = mem_acquire(&mem_done.free);
    e406:	4f89      	ldr	r7, [pc, #548]	; (e62c <ll_init+0x290>)
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e408:	1d18      	adds	r0, r3, #4
    e40a:	2203      	movs	r2, #3
    e40c:	2134      	movs	r1, #52	; 0x34
    e40e:	f7fc fec9 	bl	b1a4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    e412:	4643      	mov	r3, r8
    e414:	2203      	movs	r2, #3
    e416:	1d18      	adds	r0, r3, #4
    e418:	2108      	movs	r1, #8
    e41a:	f7fc fec3 	bl	b1a4 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e41e:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
    e420:	786a      	ldrb	r2, [r5, #1]
    e422:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e424:	3401      	adds	r4, #1
    e426:	b2e4      	uxtb	r4, r4
		last = 0U;
    e428:	42a2      	cmp	r2, r4
    e42a:	bf08      	it	eq
    e42c:	2400      	moveq	r4, #0
	if (last == first) {
    e42e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    e430:	4640      	mov	r0, r8
    e432:	d013      	beq.n	e45c <ll_init+0xc0>
    e434:	f7fc fee4 	bl	b200 <mem_acquire>
    e438:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
    e43a:	4638      	mov	r0, r7
		if (!link) {
    e43c:	b176      	cbz	r6, e45c <ll_init+0xc0>
		rx = mem_acquire(&mem_done.free);
    e43e:	f7fc fedf 	bl	b200 <mem_acquire>
		if (!rx) {
    e442:	b138      	cbz	r0, e454 <ll_init+0xb8>
		rx->link = link;
    e444:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e446:	78ea      	ldrb	r2, [r5, #3]
    e448:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e44a:	fb02 5303 	mla	r3, r2, r3, r5
    e44e:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    e450:	70ec      	strb	r4, [r5, #3]
}
    e452:	e7e5      	b.n	e420 <ll_init+0x84>
			mem_release(link, &mem_link_done.free);
    e454:	4977      	ldr	r1, [pc, #476]	; (e634 <ll_init+0x298>)
    e456:	4630      	mov	r0, r6
    e458:	f7fc feec 	bl	b234 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e45c:	4b76      	ldr	r3, [pc, #472]	; (e638 <ll_init+0x29c>)
    e45e:	2209      	movs	r2, #9
    e460:	1d18      	adds	r0, r3, #4
    e462:	2148      	movs	r1, #72	; 0x48
    e464:	f7fc fe9e 	bl	b1a4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e468:	4b74      	ldr	r3, [pc, #464]	; (e63c <ll_init+0x2a0>)
    e46a:	220b      	movs	r2, #11
    e46c:	1d18      	adds	r0, r3, #4
    e46e:	2108      	movs	r1, #8
    e470:	f7fc fe98 	bl	b1a4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e474:	4871      	ldr	r0, [pc, #452]	; (e63c <ll_init+0x2a0>)
    e476:	f7fc fec3 	bl	b200 <mem_acquire>
	LL_ASSERT(link);
    e47a:	4604      	mov	r4, r0
    e47c:	2800      	cmp	r0, #0
    e47e:	f000 80b2 	beq.w	e5e6 <ll_init+0x24a>
	MEMQ_INIT(ull_rx, link);
    e482:	4a6f      	ldr	r2, [pc, #444]	; (e640 <ll_init+0x2a4>)
    e484:	4620      	mov	r0, r4
    e486:	1f11      	subs	r1, r2, #4
    e488:	f7fc ff10 	bl	b2ac <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    e48c:	486b      	ldr	r0, [pc, #428]	; (e63c <ll_init+0x2a0>)
    e48e:	f7fc feb7 	bl	b200 <mem_acquire>
	LL_ASSERT(link);
    e492:	4604      	mov	r4, r0
    e494:	2800      	cmp	r0, #0
    e496:	f000 8098 	beq.w	e5ca <ll_init+0x22e>
	MEMQ_INIT(ll_rx, link);
    e49a:	4a6a      	ldr	r2, [pc, #424]	; (e644 <ll_init+0x2a8>)
	mem_link_rx.quota_pdu = RX_CNT;
    e49c:	4d6a      	ldr	r5, [pc, #424]	; (e648 <ll_init+0x2ac>)
    e49e:	f8df 91c0 	ldr.w	r9, [pc, #448]	; e660 <ll_init+0x2c4>
		rx = mem_acquire(&mem_pdu_rx.free);
    e4a2:	f8df 8194 	ldr.w	r8, [pc, #404]	; e638 <ll_init+0x29c>
	MEMQ_INIT(ll_rx, link);
    e4a6:	4620      	mov	r0, r4
    e4a8:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    e4aa:	462e      	mov	r6, r5
	MEMQ_INIT(ll_rx, link);
    e4ac:	f7fc fefe 	bl	b2ac <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    e4b0:	2307      	movs	r3, #7
    e4b2:	f806 3b04 	strb.w	r3, [r6], #4
	while (mem_link_rx.quota_pdu &&
    e4b6:	f899 4003 	ldrb.w	r4, [r9, #3]
		link->mem = NULL;
    e4ba:	2700      	movs	r7, #0
	if (last == count) {
    e4bc:	f899 2001 	ldrb.w	r2, [r9, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e4c0:	f899 3002 	ldrb.w	r3, [r9, #2]
	last = last + 1;
    e4c4:	3401      	adds	r4, #1
    e4c6:	b2e4      	uxtb	r4, r4
		last = 0U;
    e4c8:	42a2      	cmp	r2, r4
    e4ca:	bf08      	it	eq
    e4cc:	2400      	moveq	r4, #0
	if (last == first) {
    e4ce:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e4d0:	4630      	mov	r0, r6
    e4d2:	d03c      	beq.n	e54e <ll_init+0x1b2>
    e4d4:	f7fc fe94 	bl	b200 <mem_acquire>
    e4d8:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e4da:	4640      	mov	r0, r8
		if (!link) {
    e4dc:	f1ba 0f00 	cmp.w	sl, #0
    e4e0:	d035      	beq.n	e54e <ll_init+0x1b2>
		rx = mem_acquire(&mem_pdu_rx.free);
    e4e2:	f7fc fe8d 	bl	b200 <mem_acquire>
		if (!rx) {
    e4e6:	b370      	cbz	r0, e546 <ll_init+0x1aa>
		link->mem = NULL;
    e4e8:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
    e4ec:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e4f0:	f899 1003 	ldrb.w	r1, [r9, #3]
    e4f4:	f899 2000 	ldrb.w	r2, [r9]
	mem_link_rx.quota_pdu += delta;
    e4f8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e4fa:	fb01 9202 	mla	r2, r1, r2, r9
    e4fe:	3b01      	subs	r3, #1
    e500:	b2db      	uxtb	r3, r3
    e502:	6050      	str	r0, [r2, #4]
    e504:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    e506:	f889 4003 	strb.w	r4, [r9, #3]
	while (mem_link_rx.quota_pdu &&
    e50a:	2b00      	cmp	r3, #0
    e50c:	d1d6      	bne.n	e4bc <ll_init+0x120>
	err = lll_adv_init();
    e50e:	f006 fcf5 	bl	14efc <lll_adv_init>
	if (err) {
    e512:	4604      	mov	r4, r0
    e514:	2800      	cmp	r0, #0
    e516:	f47f af6e 	bne.w	e3f6 <ll_init+0x5a>
	err = ull_adv_init();
    e51a:	f001 f983 	bl	f824 <ull_adv_init>
	if (err) {
    e51e:	4604      	mov	r4, r0
    e520:	2800      	cmp	r0, #0
    e522:	f47f af68 	bne.w	e3f6 <ll_init+0x5a>
	err = lll_conn_init();
    e526:	f006 ff3f 	bl	153a8 <lll_conn_init>
	if (err) {
    e52a:	4604      	mov	r4, r0
    e52c:	2800      	cmp	r0, #0
    e52e:	f47f af62 	bne.w	e3f6 <ll_init+0x5a>
	err = ull_conn_init();
    e532:	f002 f9c7 	bl	108c4 <ull_conn_init>
	if (err) {
    e536:	4604      	mov	r4, r0
    e538:	2800      	cmp	r0, #0
    e53a:	f47f af5c 	bne.w	e3f6 <ll_init+0x5a>
		ull_filter_reset(true);
    e53e:	2001      	movs	r0, #1
    e540:	f005 fce4 	bl	13f0c <ull_filter_reset>
	return  0;
    e544:	e757      	b.n	e3f6 <ll_init+0x5a>
			mem_release(link, &mem_link_rx.free);
    e546:	493d      	ldr	r1, [pc, #244]	; (e63c <ll_init+0x2a0>)
    e548:	4650      	mov	r0, sl
    e54a:	f7fc fe73 	bl	b234 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    e54e:	782b      	ldrb	r3, [r5, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e550:	1e5f      	subs	r7, r3, #1
    e552:	b2ff      	uxtb	r7, r7
    e554:	2b00      	cmp	r3, #0
    e556:	d0da      	beq.n	e50e <ll_init+0x172>
    e558:	4e3c      	ldr	r6, [pc, #240]	; (e64c <ll_init+0x2b0>)
		link = mem_acquire(&mem_link_rx.free);
    e55a:	f8df 90e0 	ldr.w	r9, [pc, #224]	; e63c <ll_init+0x2a0>
    e55e:	78f4      	ldrb	r4, [r6, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    e560:	f8df 80d4 	ldr.w	r8, [pc, #212]	; e638 <ll_init+0x29c>
	if (last == count) {
    e564:	7872      	ldrb	r2, [r6, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e566:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    e568:	3401      	adds	r4, #1
    e56a:	b2e4      	uxtb	r4, r4
		last = 0U;
    e56c:	42a2      	cmp	r2, r4
    e56e:	bf08      	it	eq
    e570:	2400      	moveq	r4, #0
	if (last == first) {
    e572:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e574:	4648      	mov	r0, r9
    e576:	d0ca      	beq.n	e50e <ll_init+0x172>
    e578:	f7fc fe42 	bl	b200 <mem_acquire>
    e57c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e57e:	4640      	mov	r0, r8
		if (!link) {
    e580:	f1ba 0f00 	cmp.w	sl, #0
    e584:	d0c3      	beq.n	e50e <ll_init+0x172>
		rx = mem_acquire(&mem_pdu_rx.free);
    e586:	f7fc fe3b 	bl	b200 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e58a:	3f01      	subs	r7, #1
    e58c:	b2ff      	uxtb	r7, r7
		if (!rx) {
    e58e:	2800      	cmp	r0, #0
    e590:	d037      	beq.n	e602 <ll_init+0x266>
		rx->link = link;
    e592:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e596:	78f1      	ldrb	r1, [r6, #3]
    e598:	7832      	ldrb	r2, [r6, #0]
	mem_link_rx.quota_pdu += delta;
    e59a:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e59c:	fb01 6202 	mla	r2, r1, r2, r6
    e5a0:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e5a2:	2fff      	cmp	r7, #255	; 0xff
    e5a4:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    e5a6:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    e5a8:	70f4      	strb	r4, [r6, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e5aa:	d1db      	bne.n	e564 <ll_init+0x1c8>
    e5ac:	e7af      	b.n	e50e <ll_init+0x172>
	LL_ASSERT(!err);
    e5ae:	4a28      	ldr	r2, [pc, #160]	; (e650 <ll_init+0x2b4>)
    e5b0:	4928      	ldr	r1, [pc, #160]	; (e654 <ll_init+0x2b8>)
    e5b2:	4829      	ldr	r0, [pc, #164]	; (e658 <ll_init+0x2bc>)
    e5b4:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    e5b8:	f00b fc1d 	bl	19df6 <printk>
    e5bc:	4040      	eors	r0, r0
    e5be:	f380 8811 	msr	BASEPRI, r0
    e5c2:	f04f 0003 	mov.w	r0, #3
    e5c6:	df02      	svc	2
    e5c8:	e70c      	b.n	e3e4 <ll_init+0x48>
	LL_ASSERT(link);
    e5ca:	4a21      	ldr	r2, [pc, #132]	; (e650 <ll_init+0x2b4>)
    e5cc:	4923      	ldr	r1, [pc, #140]	; (e65c <ll_init+0x2c0>)
    e5ce:	4822      	ldr	r0, [pc, #136]	; (e658 <ll_init+0x2bc>)
    e5d0:	f240 53a9 	movw	r3, #1449	; 0x5a9
    e5d4:	f00b fc0f 	bl	19df6 <printk>
    e5d8:	4040      	eors	r0, r0
    e5da:	f380 8811 	msr	BASEPRI, r0
    e5de:	f04f 0003 	mov.w	r0, #3
    e5e2:	df02      	svc	2
    e5e4:	e759      	b.n	e49a <ll_init+0xfe>
	LL_ASSERT(link);
    e5e6:	4a1a      	ldr	r2, [pc, #104]	; (e650 <ll_init+0x2b4>)
    e5e8:	491c      	ldr	r1, [pc, #112]	; (e65c <ll_init+0x2c0>)
    e5ea:	481b      	ldr	r0, [pc, #108]	; (e658 <ll_init+0x2bc>)
    e5ec:	f240 53a2 	movw	r3, #1442	; 0x5a2
    e5f0:	f00b fc01 	bl	19df6 <printk>
    e5f4:	4040      	eors	r0, r0
    e5f6:	f380 8811 	msr	BASEPRI, r0
    e5fa:	f04f 0003 	mov.w	r0, #3
    e5fe:	df02      	svc	2
    e600:	e73f      	b.n	e482 <ll_init+0xe6>
			mem_release(link, &mem_link_rx.free);
    e602:	490e      	ldr	r1, [pc, #56]	; (e63c <ll_init+0x2a0>)
    e604:	4650      	mov	r0, sl
    e606:	f7fc fe15 	bl	b234 <mem_release>
			break;
    e60a:	e780      	b.n	e50e <ll_init+0x172>
    e60c:	20001b10 	.word	0x20001b10
    e610:	20001e28 	.word	0x20001e28
    e614:	00016b0d 	.word	0x00016b0d
    e618:	00016a2d 	.word	0x00016a2d
    e61c:	000169c9 	.word	0x000169c9
    e620:	20001bec 	.word	0x20001bec
    e624:	20001b2c 	.word	0x20001b2c
    e628:	20001b14 	.word	0x20001b14
    e62c:	20001758 	.word	0x20001758
    e630:	200005bc 	.word	0x200005bc
    e634:	200017f8 	.word	0x200017f8
    e638:	20001874 	.word	0x20001874
    e63c:	20001818 	.word	0x20001818
    e640:	20001b0c 	.word	0x20001b0c
    e644:	20001b04 	.word	0x20001b04
    e648:	20001814 	.word	0x20001814
    e64c:	200005e4 	.word	0x200005e4
    e650:	0001fdc4 	.word	0x0001fdc4
    e654:	0001fe00 	.word	0x0001fe00
    e658:	0001fcdc 	.word	0x0001fcdc
    e65c:	00020078 	.word	0x00020078
    e660:	200005d0 	.word	0x200005d0

0000e664 <ll_reset>:
{
    e664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e668:	b087      	sub	sp, #28
	err = ull_adv_reset();
    e66a:	f001 f8e3 	bl	f834 <ull_adv_reset>
	LL_ASSERT(!err);
    e66e:	2800      	cmp	r0, #0
    e670:	f040 80e4 	bne.w	e83c <ll_reset+0x1d8>
	err = ull_conn_reset();
    e674:	f002 f928 	bl	108c8 <ull_conn_reset>
	LL_ASSERT(!err);
    e678:	2800      	cmp	r0, #0
    e67a:	f040 80f1 	bne.w	e860 <ll_reset+0x1fc>
	MFIFO_INIT(tx_ack);
    e67e:	4b97      	ldr	r3, [pc, #604]	; (e8dc <ll_reset+0x278>)
	MFIFO_INIT(done);
    e680:	4e97      	ldr	r6, [pc, #604]	; (e8e0 <ll_reset+0x27c>)
	MFIFO_INIT(pdu_rx_free);
    e682:	4f98      	ldr	r7, [pc, #608]	; (e8e4 <ll_reset+0x280>)
	MFIFO_INIT(ll_pdu_rx_free);
    e684:	4d98      	ldr	r5, [pc, #608]	; (e8e8 <ll_reset+0x284>)
	MFIFO_INIT(tx_ack);
    e686:	2400      	movs	r4, #0
    e688:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
    e68a:	4620      	mov	r0, r4
    e68c:	f005 fc3e 	bl	13f0c <ull_filter_reset>
	MFIFO_INIT(prep);
    e690:	4b96      	ldr	r3, [pc, #600]	; (e8ec <ll_reset+0x288>)
	MFIFO_INIT(done);
    e692:	8074      	strh	r4, [r6, #2]
	MFIFO_INIT(prep);
    e694:	805c      	strh	r4, [r3, #2]
	MFIFO_INIT(pdu_rx_free);
    e696:	807c      	strh	r4, [r7, #2]
	MFIFO_INIT(ll_pdu_rx_free);
    e698:	806c      	strh	r4, [r5, #2]
    e69a:	2201      	movs	r2, #1
    e69c:	4621      	mov	r1, r4
    e69e:	4668      	mov	r0, sp
    e6a0:	f010 fc0e 	bl	1eec0 <z_impl_k_sem_init>
		mfy.param = &sem;
    e6a4:	4b92      	ldr	r3, [pc, #584]	; (e8f0 <ll_reset+0x28c>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    e6a6:	4622      	mov	r2, r4
    e6a8:	4621      	mov	r1, r4
    e6aa:	2003      	movs	r0, #3
		mfy.param = &sem;
    e6ac:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
    e6b0:	f7fc fe7e 	bl	b3b0 <mayfly_enqueue>
		LL_ASSERT(!retval);
    e6b4:	2800      	cmp	r0, #0
    e6b6:	f040 80e1 	bne.w	e87c <ll_reset+0x218>
	return z_impl_k_sem_take(sem, timeout);
    e6ba:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    e6be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e6c2:	4668      	mov	r0, sp
    e6c4:	f00a fe8a 	bl	193dc <z_impl_k_sem_take>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e6c8:	4b8a      	ldr	r3, [pc, #552]	; (e8f4 <ll_reset+0x290>)
		link = mem_acquire(&mem_link_done.free);
    e6ca:	f8df 922c 	ldr.w	r9, [pc, #556]	; e8f8 <ll_reset+0x294>
		rx = mem_acquire(&mem_done.free);
    e6ce:	f8df 8224 	ldr.w	r8, [pc, #548]	; e8f4 <ll_reset+0x290>
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
    e6d2:	1d18      	adds	r0, r3, #4
    e6d4:	2203      	movs	r2, #3
    e6d6:	2134      	movs	r1, #52	; 0x34
    e6d8:	f7fc fd64 	bl	b1a4 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
    e6dc:	464b      	mov	r3, r9
    e6de:	2203      	movs	r2, #3
    e6e0:	1d18      	adds	r0, r3, #4
    e6e2:	2108      	movs	r1, #8
    e6e4:	f7fc fd5e 	bl	b1a4 <mem_init>
static inline void done_alloc(void)
    e6e8:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    e6ea:	7872      	ldrb	r2, [r6, #1]
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
    e6ec:	78b3      	ldrb	r3, [r6, #2]
	last = last + 1;
    e6ee:	3401      	adds	r4, #1
    e6f0:	b2e4      	uxtb	r4, r4
		last = 0U;
    e6f2:	42a2      	cmp	r2, r4
    e6f4:	bf08      	it	eq
    e6f6:	2400      	moveq	r4, #0
	if (last == first) {
    e6f8:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
    e6fa:	4648      	mov	r0, r9
    e6fc:	d016      	beq.n	e72c <ll_reset+0xc8>
    e6fe:	f7fc fd7f 	bl	b200 <mem_acquire>
    e702:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_done.free);
    e704:	4640      	mov	r0, r8
		if (!link) {
    e706:	f1ba 0f00 	cmp.w	sl, #0
    e70a:	d00f      	beq.n	e72c <ll_reset+0xc8>
		rx = mem_acquire(&mem_done.free);
    e70c:	f7fc fd78 	bl	b200 <mem_acquire>
		if (!rx) {
    e710:	b140      	cbz	r0, e724 <ll_reset+0xc0>
		rx->link = link;
    e712:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e716:	78f2      	ldrb	r2, [r6, #3]
    e718:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e71a:	fb02 6303 	mla	r3, r2, r3, r6
    e71e:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
    e720:	70f4      	strb	r4, [r6, #3]
}
    e722:	e7e2      	b.n	e6ea <ll_reset+0x86>
			mem_release(link, &mem_link_done.free);
    e724:	4974      	ldr	r1, [pc, #464]	; (e8f8 <ll_reset+0x294>)
    e726:	4650      	mov	r0, sl
    e728:	f7fc fd84 	bl	b234 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
    e72c:	4b73      	ldr	r3, [pc, #460]	; (e8fc <ll_reset+0x298>)
    e72e:	2209      	movs	r2, #9
    e730:	1d18      	adds	r0, r3, #4
    e732:	2148      	movs	r1, #72	; 0x48
    e734:	f7fc fd36 	bl	b1a4 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
    e738:	4b71      	ldr	r3, [pc, #452]	; (e900 <ll_reset+0x29c>)
    e73a:	220b      	movs	r2, #11
    e73c:	1d18      	adds	r0, r3, #4
    e73e:	2108      	movs	r1, #8
    e740:	f7fc fd30 	bl	b1a4 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
    e744:	486e      	ldr	r0, [pc, #440]	; (e900 <ll_reset+0x29c>)
    e746:	f7fc fd5b 	bl	b200 <mem_acquire>
	LL_ASSERT(link);
    e74a:	4604      	mov	r4, r0
    e74c:	2800      	cmp	r0, #0
    e74e:	f000 80b1 	beq.w	e8b4 <ll_reset+0x250>
	MEMQ_INIT(ull_rx, link);
    e752:	4a6c      	ldr	r2, [pc, #432]	; (e904 <ll_reset+0x2a0>)
    e754:	4620      	mov	r0, r4
    e756:	1f11      	subs	r1, r2, #4
    e758:	f7fc fda8 	bl	b2ac <memq_init>
	link = mem_acquire(&mem_link_rx.free);
    e75c:	4868      	ldr	r0, [pc, #416]	; (e900 <ll_reset+0x29c>)
    e75e:	f7fc fd4f 	bl	b200 <mem_acquire>
	LL_ASSERT(link);
    e762:	4604      	mov	r4, r0
    e764:	2800      	cmp	r0, #0
    e766:	f000 8097 	beq.w	e898 <ll_reset+0x234>
	MEMQ_INIT(ll_rx, link);
    e76a:	4a67      	ldr	r2, [pc, #412]	; (e908 <ll_reset+0x2a4>)
	mem_link_rx.quota_pdu = RX_CNT;
    e76c:	4e67      	ldr	r6, [pc, #412]	; (e90c <ll_reset+0x2a8>)
		rx = mem_acquire(&mem_pdu_rx.free);
    e76e:	f8df a18c 	ldr.w	sl, [pc, #396]	; e8fc <ll_reset+0x298>
	MEMQ_INIT(ll_rx, link);
    e772:	4620      	mov	r0, r4
    e774:	1f11      	subs	r1, r2, #4
	mem_link_rx.quota_pdu = RX_CNT;
    e776:	46b0      	mov	r8, r6
	MEMQ_INIT(ll_rx, link);
    e778:	f7fc fd98 	bl	b2ac <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
    e77c:	2307      	movs	r3, #7
    e77e:	f808 3b04 	strb.w	r3, [r8], #4
	while (mem_link_rx.quota_pdu &&
    e782:	78ec      	ldrb	r4, [r5, #3]
		link->mem = NULL;
    e784:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
    e788:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e78a:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    e78c:	3401      	adds	r4, #1
    e78e:	b2e4      	uxtb	r4, r4
		last = 0U;
    e790:	42a2      	cmp	r2, r4
    e792:	bf08      	it	eq
    e794:	2400      	moveq	r4, #0
	if (last == first) {
    e796:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e798:	4640      	mov	r0, r8
    e79a:	d020      	beq.n	e7de <ll_reset+0x17a>
    e79c:	f7fc fd30 	bl	b200 <mem_acquire>
    e7a0:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e7a2:	4650      	mov	r0, sl
		if (!link) {
    e7a4:	f1bb 0f00 	cmp.w	fp, #0
    e7a8:	d019      	beq.n	e7de <ll_reset+0x17a>
		rx = mem_acquire(&mem_pdu_rx.free);
    e7aa:	f7fc fd29 	bl	b200 <mem_acquire>
		if (!rx) {
    e7ae:	b190      	cbz	r0, e7d6 <ll_reset+0x172>
		link->mem = NULL;
    e7b0:	f8cb 9004 	str.w	r9, [fp, #4]
		rx->link = link;
    e7b4:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e7b8:	78e9      	ldrb	r1, [r5, #3]
    e7ba:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
    e7bc:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e7be:	fb01 5202 	mla	r2, r1, r2, r5
    e7c2:	3b01      	subs	r3, #1
    e7c4:	b2db      	uxtb	r3, r3
    e7c6:	6050      	str	r0, [r2, #4]
    e7c8:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    e7ca:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
    e7cc:	2b00      	cmp	r3, #0
    e7ce:	d1db      	bne.n	e788 <ll_reset+0x124>
}
    e7d0:	b007      	add	sp, #28
    e7d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    e7d6:	494a      	ldr	r1, [pc, #296]	; (e900 <ll_reset+0x29c>)
    e7d8:	4658      	mov	r0, fp
    e7da:	f7fc fd2b 	bl	b234 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    e7de:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e7e0:	1e5d      	subs	r5, r3, #1
    e7e2:	b2ed      	uxtb	r5, r5
    e7e4:	2b00      	cmp	r3, #0
    e7e6:	d0f3      	beq.n	e7d0 <ll_reset+0x16c>
    e7e8:	78fc      	ldrb	r4, [r7, #3]
		link = mem_acquire(&mem_link_rx.free);
    e7ea:	f8df 9114 	ldr.w	r9, [pc, #276]	; e900 <ll_reset+0x29c>
		rx = mem_acquire(&mem_pdu_rx.free);
    e7ee:	f8df 810c 	ldr.w	r8, [pc, #268]	; e8fc <ll_reset+0x298>
	if (last == count) {
    e7f2:	787a      	ldrb	r2, [r7, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e7f4:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    e7f6:	3401      	adds	r4, #1
    e7f8:	b2e4      	uxtb	r4, r4
		last = 0U;
    e7fa:	42a2      	cmp	r2, r4
    e7fc:	bf08      	it	eq
    e7fe:	2400      	moveq	r4, #0
	if (last == first) {
    e800:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    e802:	4648      	mov	r0, r9
    e804:	d0e4      	beq.n	e7d0 <ll_reset+0x16c>
    e806:	f7fc fcfb 	bl	b200 <mem_acquire>
    e80a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e80c:	4640      	mov	r0, r8
		if (!link) {
    e80e:	f1ba 0f00 	cmp.w	sl, #0
    e812:	d0dd      	beq.n	e7d0 <ll_reset+0x16c>
		rx = mem_acquire(&mem_pdu_rx.free);
    e814:	f7fc fcf4 	bl	b200 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e818:	3d01      	subs	r5, #1
    e81a:	b2ed      	uxtb	r5, r5
		if (!rx) {
    e81c:	2800      	cmp	r0, #0
    e81e:	d057      	beq.n	e8d0 <ll_reset+0x26c>
		rx->link = link;
    e820:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e824:	78f9      	ldrb	r1, [r7, #3]
    e826:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    e828:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e82a:	fb01 7202 	mla	r2, r1, r2, r7
    e82e:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e830:	2dff      	cmp	r5, #255	; 0xff
    e832:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    e834:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    e836:	70fc      	strb	r4, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    e838:	d1db      	bne.n	e7f2 <ll_reset+0x18e>
    e83a:	e7c9      	b.n	e7d0 <ll_reset+0x16c>
	LL_ASSERT(!err);
    e83c:	4a34      	ldr	r2, [pc, #208]	; (e910 <ll_reset+0x2ac>)
    e83e:	4935      	ldr	r1, [pc, #212]	; (e914 <ll_reset+0x2b0>)
    e840:	4835      	ldr	r0, [pc, #212]	; (e918 <ll_reset+0x2b4>)
    e842:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    e846:	f00b fad6 	bl	19df6 <printk>
    e84a:	4040      	eors	r0, r0
    e84c:	f380 8811 	msr	BASEPRI, r0
    e850:	f04f 0003 	mov.w	r0, #3
    e854:	df02      	svc	2
	err = ull_conn_reset();
    e856:	f002 f837 	bl	108c8 <ull_conn_reset>
	LL_ASSERT(!err);
    e85a:	2800      	cmp	r0, #0
    e85c:	f43f af0f 	beq.w	e67e <ll_reset+0x1a>
    e860:	4a2b      	ldr	r2, [pc, #172]	; (e910 <ll_reset+0x2ac>)
    e862:	492c      	ldr	r1, [pc, #176]	; (e914 <ll_reset+0x2b0>)
    e864:	482c      	ldr	r0, [pc, #176]	; (e918 <ll_reset+0x2b4>)
    e866:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
    e86a:	f00b fac4 	bl	19df6 <printk>
    e86e:	4040      	eors	r0, r0
    e870:	f380 8811 	msr	BASEPRI, r0
    e874:	f04f 0003 	mov.w	r0, #3
    e878:	df02      	svc	2
    e87a:	e700      	b.n	e67e <ll_reset+0x1a>
		LL_ASSERT(!retval);
    e87c:	4a24      	ldr	r2, [pc, #144]	; (e910 <ll_reset+0x2ac>)
    e87e:	4927      	ldr	r1, [pc, #156]	; (e91c <ll_reset+0x2b8>)
    e880:	4825      	ldr	r0, [pc, #148]	; (e918 <ll_reset+0x2b4>)
    e882:	f44f 7300 	mov.w	r3, #512	; 0x200
    e886:	f00b fab6 	bl	19df6 <printk>
    e88a:	4040      	eors	r0, r0
    e88c:	f380 8811 	msr	BASEPRI, r0
    e890:	f04f 0003 	mov.w	r0, #3
    e894:	df02      	svc	2
    e896:	e710      	b.n	e6ba <ll_reset+0x56>
	LL_ASSERT(link);
    e898:	4a1d      	ldr	r2, [pc, #116]	; (e910 <ll_reset+0x2ac>)
    e89a:	4921      	ldr	r1, [pc, #132]	; (e920 <ll_reset+0x2bc>)
    e89c:	481e      	ldr	r0, [pc, #120]	; (e918 <ll_reset+0x2b4>)
    e89e:	f240 53a9 	movw	r3, #1449	; 0x5a9
    e8a2:	f00b faa8 	bl	19df6 <printk>
    e8a6:	4040      	eors	r0, r0
    e8a8:	f380 8811 	msr	BASEPRI, r0
    e8ac:	f04f 0003 	mov.w	r0, #3
    e8b0:	df02      	svc	2
    e8b2:	e75a      	b.n	e76a <ll_reset+0x106>
	LL_ASSERT(link);
    e8b4:	4a16      	ldr	r2, [pc, #88]	; (e910 <ll_reset+0x2ac>)
    e8b6:	491a      	ldr	r1, [pc, #104]	; (e920 <ll_reset+0x2bc>)
    e8b8:	4817      	ldr	r0, [pc, #92]	; (e918 <ll_reset+0x2b4>)
    e8ba:	f240 53a2 	movw	r3, #1442	; 0x5a2
    e8be:	f00b fa9a 	bl	19df6 <printk>
    e8c2:	4040      	eors	r0, r0
    e8c4:	f380 8811 	msr	BASEPRI, r0
    e8c8:	f04f 0003 	mov.w	r0, #3
    e8cc:	df02      	svc	2
    e8ce:	e740      	b.n	e752 <ll_reset+0xee>
			mem_release(link, &mem_link_rx.free);
    e8d0:	490b      	ldr	r1, [pc, #44]	; (e900 <ll_reset+0x29c>)
    e8d2:	4650      	mov	r0, sl
    e8d4:	f7fc fcae 	bl	b234 <mem_release>
			break;
    e8d8:	e77a      	b.n	e7d0 <ll_reset+0x16c>
    e8da:	bf00      	nop
    e8dc:	20000720 	.word	0x20000720
    e8e0:	200005bc 	.word	0x200005bc
    e8e4:	200005e4 	.word	0x200005e4
    e8e8:	200005d0 	.word	0x200005d0
    e8ec:	200005fc 	.word	0x200005fc
    e8f0:	20000744 	.word	0x20000744
    e8f4:	20001758 	.word	0x20001758
    e8f8:	200017f8 	.word	0x200017f8
    e8fc:	20001874 	.word	0x20001874
    e900:	20001818 	.word	0x20001818
    e904:	20001b0c 	.word	0x20001b0c
    e908:	20001b04 	.word	0x20001b04
    e90c:	20001814 	.word	0x20001814
    e910:	0001fdc4 	.word	0x0001fdc4
    e914:	0001fe00 	.word	0x0001fe00
    e918:	0001fcdc 	.word	0x0001fcdc
    e91c:	0001fe3c 	.word	0x0001fe3c
    e920:	00020078 	.word	0x00020078

0000e924 <ll_rx_get>:
{
    e924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e928:	b085      	sub	sp, #20
    e92a:	e9cd 0100 	strd	r0, r1, [sp]
    e92e:	4c5f      	ldr	r4, [pc, #380]	; (eaac <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x4c>)
				mem_release(link, &mem_link_rx.free);
    e930:	4d5f      	ldr	r5, [pc, #380]	; (eab0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x50>)
    e932:	f8df 9184 	ldr.w	r9, [pc, #388]	; eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>
	*node_rx = NULL;
    e936:	9a00      	ldr	r2, [sp, #0]
    e938:	2300      	movs	r3, #0
    e93a:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
    e93c:	e9d9 0100 	ldrd	r0, r1, [r9]
    e940:	aa03      	add	r2, sp, #12
    e942:	f7fc fcc9 	bl	b2d8 <memq_peek>
	if (link) {
    e946:	4607      	mov	r7, r0
    e948:	2800      	cmp	r0, #0
    e94a:	f000 80a4 	beq.w	ea96 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x36>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    e94e:	9b03      	ldr	r3, [sp, #12]
    e950:	4958      	ldr	r1, [pc, #352]	; (eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    e952:	781a      	ldrb	r2, [r3, #0]
    e954:	9801      	ldr	r0, [sp, #4]
    e956:	f7ff fafb 	bl	df50 <tx_cmplt_get>
		if (!cmplt) {
    e95a:	4603      	mov	r3, r0
    e95c:	2800      	cmp	r0, #0
    e95e:	f040 8091 	bne.w	ea84 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x24>
			f = mfifo_tx_ack.f;
    e962:	78a2      	ldrb	r2, [r4, #2]
    e964:	f88d 2009 	strb.w	r2, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
    e968:	78e2      	ldrb	r2, [r4, #3]
    e96a:	f10d 0109 	add.w	r1, sp, #9
    e96e:	f10d 000a 	add.w	r0, sp, #10
    e972:	461e      	mov	r6, r3
    e974:	f7ff faec 	bl	df50 <tx_cmplt_get>
    e978:	ea46 0200 	orr.w	r2, r6, r0
			} while ((cmplt_prev != 0U) ||
    e97c:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
				cmplt_curr = tx_cmplt_get(&h, &f,
    e980:	4603      	mov	r3, r0
			} while ((cmplt_prev != 0U) ||
    e982:	d1f1      	bne.n	e968 <ll_rx_get+0x44>
			if (rx->type == NODE_RX_TYPE_DC_PDU_RELEASE) {
    e984:	9b03      	ldr	r3, [sp, #12]
    e986:	7919      	ldrb	r1, [r3, #4]
    e988:	2903      	cmp	r1, #3
    e98a:	d178      	bne.n	ea7e <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x1e>
				(void)memq_dequeue(memq_ll_rx.tail,
    e98c:	494a      	ldr	r1, [pc, #296]	; (eab8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x58>)
    e98e:	f8d9 0004 	ldr.w	r0, [r9, #4]
    e992:	f7fc fca9 	bl	b2e8 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
    e996:	4949      	ldr	r1, [pc, #292]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    e998:	4638      	mov	r0, r7
    e99a:	f7fc fc4b 	bl	b234 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    e99e:	782b      	ldrb	r3, [r5, #0]
    e9a0:	2b06      	cmp	r3, #6
    e9a2:	d85d      	bhi.n	ea60 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1>
	mem_link_rx.quota_pdu += delta;
    e9a4:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
    e9a6:	4946      	ldr	r1, [pc, #280]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    e9a8:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
    e9aa:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
    e9ac:	f7fc fc42 	bl	b234 <mem_release>
	while (mem_link_rx.quota_pdu &&
    e9b0:	782b      	ldrb	r3, [r5, #0]
    e9b2:	2b00      	cmp	r3, #0
    e9b4:	d0bf      	beq.n	e936 <ll_rx_get+0x12>
    e9b6:	4f43      	ldr	r7, [pc, #268]	; (eac4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x64>)
		link = mem_acquire(&mem_link_rx.free);
    e9b8:	f8df 8100 	ldr.w	r8, [pc, #256]	; eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>
    e9bc:	78fe      	ldrb	r6, [r7, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    e9be:	f8df a100 	ldr.w	sl, [pc, #256]	; eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>
	if (last == count) {
    e9c2:	787a      	ldrb	r2, [r7, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    e9c4:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    e9c6:	3601      	adds	r6, #1
    e9c8:	b2f6      	uxtb	r6, r6
		last = 0U;
    e9ca:	42b2      	cmp	r2, r6
    e9cc:	bf08      	it	eq
    e9ce:	2600      	moveq	r6, #0
	if (last == first) {
    e9d0:	429e      	cmp	r6, r3
		link = mem_acquire(&mem_link_rx.free);
    e9d2:	4640      	mov	r0, r8
    e9d4:	d01f      	beq.n	ea16 <ll_rx_get+0xf2>
    e9d6:	f7fc fc13 	bl	b200 <mem_acquire>
    e9da:	4683      	mov	fp, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    e9dc:	4650      	mov	r0, sl
		if (!link) {
    e9de:	f1bb 0f00 	cmp.w	fp, #0
    e9e2:	d018      	beq.n	ea16 <ll_rx_get+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
    e9e4:	f7fc fc0c 	bl	b200 <mem_acquire>
		if (!rx) {
    e9e8:	b188      	cbz	r0, ea0e <ll_rx_get+0xea>
		link->mem = NULL;
    e9ea:	2300      	movs	r3, #0
    e9ec:	f8cb 3004 	str.w	r3, [fp, #4]
		rx->link = link;
    e9f0:	f8c0 b000 	str.w	fp, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    e9f4:	78f9      	ldrb	r1, [r7, #3]
    e9f6:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    e9f8:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    e9fa:	fb01 7202 	mla	r2, r1, r2, r7
    e9fe:	3b01      	subs	r3, #1
    ea00:	b2db      	uxtb	r3, r3
    ea02:	6050      	str	r0, [r2, #4]
    ea04:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    ea06:	70fe      	strb	r6, [r7, #3]
	while (mem_link_rx.quota_pdu &&
    ea08:	2b00      	cmp	r3, #0
    ea0a:	d1da      	bne.n	e9c2 <ll_rx_get+0x9e>
    ea0c:	e793      	b.n	e936 <ll_rx_get+0x12>
			mem_release(link, &mem_link_rx.free);
    ea0e:	492b      	ldr	r1, [pc, #172]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea10:	4658      	mov	r0, fp
    ea12:	f7fc fc0f 	bl	b234 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ea16:	782b      	ldrb	r3, [r5, #0]
    ea18:	2b00      	cmp	r3, #0
    ea1a:	d08c      	beq.n	e936 <ll_rx_get+0x12>
    ea1c:	4f2a      	ldr	r7, [pc, #168]	; (eac8 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x68>)
	last = last + 1;
    ea1e:	78fe      	ldrb	r6, [r7, #3]
	if (last == count) {
    ea20:	787a      	ldrb	r2, [r7, #1]
    ea22:	78bb      	ldrb	r3, [r7, #2]
	last = last + 1;
    ea24:	3601      	adds	r6, #1
    ea26:	b2f6      	uxtb	r6, r6
		last = 0U;
    ea28:	42b2      	cmp	r2, r6
    ea2a:	bf08      	it	eq
    ea2c:	2600      	moveq	r6, #0
	if (last == first) {
    ea2e:	429e      	cmp	r6, r3
    ea30:	d081      	beq.n	e936 <ll_rx_get+0x12>
		link = mem_acquire(&mem_link_rx.free);
    ea32:	4822      	ldr	r0, [pc, #136]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea34:	f7fc fbe4 	bl	b200 <mem_acquire>
		if (!link) {
    ea38:	4680      	mov	r8, r0
    ea3a:	2800      	cmp	r0, #0
    ea3c:	f43f af7b 	beq.w	e936 <ll_rx_get+0x12>
		rx = mem_acquire(&mem_pdu_rx.free);
    ea40:	481f      	ldr	r0, [pc, #124]	; (eac0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x60>)
    ea42:	f7fc fbdd 	bl	b200 <mem_acquire>
		if (!rx) {
    ea46:	b308      	cbz	r0, ea8c <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x2c>
		rx->link = link;
    ea48:	f8c0 8000 	str.w	r8, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ea4c:	78f9      	ldrb	r1, [r7, #3]
    ea4e:	783a      	ldrb	r2, [r7, #0]
	mem_link_rx.quota_pdu += delta;
    ea50:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ea52:	fb01 7202 	mla	r2, r1, r2, r7
    ea56:	3b01      	subs	r3, #1
    ea58:	6050      	str	r0, [r2, #4]
    ea5a:	702b      	strb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
    ea5c:	70fe      	strb	r6, [r7, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ea5e:	e76a      	b.n	e936 <ll_rx_get+0x12>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ea60:	4a1a      	ldr	r2, [pc, #104]	; (eacc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x6c>)
    ea62:	491b      	ldr	r1, [pc, #108]	; (ead0 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x70>)
    ea64:	481b      	ldr	r0, [pc, #108]	; (ead4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x74>)
    ea66:	f240 4317 	movw	r3, #1047	; 0x417
    ea6a:	f00b f9c4 	bl	19df6 <printk>
    ea6e:	4040      	eors	r0, r0
    ea70:	f380 8811 	msr	BASEPRI, r0
    ea74:	f04f 0003 	mov.w	r0, #3
    ea78:	df02      	svc	2
    ea7a:	782b      	ldrb	r3, [r5, #0]
    ea7c:	e792      	b.n	e9a4 <ll_rx_get+0x80>
			*node_rx = rx;
    ea7e:	9900      	ldr	r1, [sp, #0]
    ea80:	600b      	str	r3, [r1, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
    ea82:	4613      	mov	r3, r2
}
    ea84:	4618      	mov	r0, r3
    ea86:	b005      	add	sp, #20
    ea88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
    ea8c:	490b      	ldr	r1, [pc, #44]	; (eabc <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x5c>)
    ea8e:	4640      	mov	r0, r8
    ea90:	f7fc fbd0 	bl	b234 <mem_release>
			break;
    ea94:	e74f      	b.n	e936 <ll_rx_get+0x12>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
    ea96:	78e2      	ldrb	r2, [r4, #3]
    ea98:	4906      	ldr	r1, [pc, #24]	; (eab4 <CONFIG_SYS_PM_MIN_RESIDENCY_DEEP_SLEEP_1+0x54>)
    ea9a:	9801      	ldr	r0, [sp, #4]
    ea9c:	f7ff fa58 	bl	df50 <tx_cmplt_get>
    eaa0:	4603      	mov	r3, r0
}
    eaa2:	4618      	mov	r0, r3
    eaa4:	b005      	add	sp, #20
    eaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    eaaa:	bf00      	nop
    eaac:	20000720 	.word	0x20000720
    eab0:	20001814 	.word	0x20001814
    eab4:	20000722 	.word	0x20000722
    eab8:	20001b00 	.word	0x20001b00
    eabc:	20001818 	.word	0x20001818
    eac0:	20001874 	.word	0x20001874
    eac4:	200005d0 	.word	0x200005d0
    eac8:	200005e4 	.word	0x200005e4
    eacc:	0001fdc4 	.word	0x0001fdc4
    ead0:	0001fe44 	.word	0x0001fe44
    ead4:	0001fcdc 	.word	0x0001fcdc

0000ead8 <ll_rx_dequeue>:
{
    ead8:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    eada:	495d      	ldr	r1, [pc, #372]	; (ec50 <ll_rx_dequeue+0x178>)
{
    eadc:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
    eade:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    eae0:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
    eae2:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
    eae4:	aa01      	add	r2, sp, #4
    eae6:	f7fc fbff 	bl	b2e8 <memq_dequeue>
	LL_ASSERT(link);
    eaea:	4604      	mov	r4, r0
    eaec:	2800      	cmp	r0, #0
    eaee:	d053      	beq.n	eb98 <ll_rx_dequeue+0xc0>
	mem_release(link, &mem_link_rx.free);
    eaf0:	4958      	ldr	r1, [pc, #352]	; (ec54 <ll_rx_dequeue+0x17c>)
    eaf2:	4620      	mov	r0, r4
    eaf4:	f7fc fb9e 	bl	b234 <mem_release>
	switch (rx->type) {
    eaf8:	9a01      	ldr	r2, [sp, #4]
    eafa:	7913      	ldrb	r3, [r2, #4]
    eafc:	2b12      	cmp	r3, #18
    eafe:	d80f      	bhi.n	eb20 <ll_rx_dequeue+0x48>
    eb00:	e8df f003 	tbb	[pc, r3]
    eb04:	0e0a0e0a 	.word	0x0e0a0e0a
    eb08:	0e0e0e0e 	.word	0x0e0e0e0e
    eb0c:	0e0e0e0e 	.word	0x0e0e0e0e
    eb10:	0a0a0a1d 	.word	0x0a0a0a1d
    eb14:	0a0a      	.short	0x0a0a
    eb16:	0a          	.byte	0x0a
    eb17:	00          	.byte	0x00
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    eb18:	2b00      	cmp	r3, #0
    eb1a:	d04b      	beq.n	ebb4 <ll_rx_dequeue+0xdc>
}
    eb1c:	b002      	add	sp, #8
    eb1e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(0);
    eb20:	4a4d      	ldr	r2, [pc, #308]	; (ec58 <ll_rx_dequeue+0x180>)
    eb22:	494e      	ldr	r1, [pc, #312]	; (ec5c <ll_rx_dequeue+0x184>)
    eb24:	484e      	ldr	r0, [pc, #312]	; (ec60 <ll_rx_dequeue+0x188>)
    eb26:	f240 3336 	movw	r3, #822	; 0x336
    eb2a:	f00b f964 	bl	19df6 <printk>
    eb2e:	4040      	eors	r0, r0
    eb30:	f380 8811 	msr	BASEPRI, r0
    eb34:	f04f 0003 	mov.w	r0, #3
    eb38:	df02      	svc	2
}
    eb3a:	b002      	add	sp, #8
    eb3c:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
    eb3e:	7f13      	ldrb	r3, [r2, #28]
    eb40:	2b3c      	cmp	r3, #60	; 0x3c
    eb42:	d046      	beq.n	ebd2 <ll_rx_dequeue+0xfa>
    eb44:	7f53      	ldrb	r3, [r2, #29]
    eb46:	b1cb      	cbz	r3, eb7c <ll_rx_dequeue+0xa4>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    eb48:	6893      	ldr	r3, [r2, #8]
    eb4a:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
    eb4c:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
    eb50:	b128      	cbz	r0, eb5e <ll_rx_dequeue+0x86>
					adv->node_rx_cc_free = NULL;
    eb52:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
    eb54:	4943      	ldr	r1, [pc, #268]	; (ec64 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
    eb56:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
					mem_release(rx_free, &mem_pdu_rx.free);
    eb5a:	f7fc fb6b 	bl	b234 <mem_release>
			adv->is_enabled = 0U;
    eb5e:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    eb62:	f36f 0300 	bfc	r3, #0, #1
    eb66:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
			      ull_adv_is_enabled(0));
    eb6a:	2000      	movs	r0, #0
    eb6c:	f000 ff32 	bl	f9d4 <ull_adv_is_enabled>
			if (!bm) {
    eb70:	2800      	cmp	r0, #0
    eb72:	d1d3      	bne.n	eb1c <ll_rx_dequeue+0x44>
				ull_filter_adv_scan_state_cb(0);
    eb74:	f004 fd54 	bl	13620 <ull_filter_adv_scan_state_cb>
}
    eb78:	b002      	add	sp, #8
    eb7a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
    eb7c:	4a36      	ldr	r2, [pc, #216]	; (ec58 <ll_rx_dequeue+0x180>)
    eb7e:	4937      	ldr	r1, [pc, #220]	; (ec5c <ll_rx_dequeue+0x184>)
    eb80:	4837      	ldr	r0, [pc, #220]	; (ec60 <ll_rx_dequeue+0x188>)
    eb82:	f240 23de 	movw	r3, #734	; 0x2de
    eb86:	f00b f936 	bl	19df6 <printk>
    eb8a:	4040      	eors	r0, r0
    eb8c:	f380 8811 	msr	BASEPRI, r0
    eb90:	f04f 0003 	mov.w	r0, #3
    eb94:	df02      	svc	2
    eb96:	e7e8      	b.n	eb6a <ll_rx_dequeue+0x92>
	LL_ASSERT(link);
    eb98:	4a2f      	ldr	r2, [pc, #188]	; (ec58 <ll_rx_dequeue+0x180>)
    eb9a:	4933      	ldr	r1, [pc, #204]	; (ec68 <ll_rx_dequeue+0x190>)
    eb9c:	4830      	ldr	r0, [pc, #192]	; (ec60 <ll_rx_dequeue+0x188>)
    eb9e:	f240 235e 	movw	r3, #606	; 0x25e
    eba2:	f00b f928 	bl	19df6 <printk>
    eba6:	4040      	eors	r0, r0
    eba8:	f380 8811 	msr	BASEPRI, r0
    ebac:	f04f 0003 	mov.w	r0, #3
    ebb0:	df02      	svc	2
    ebb2:	e79d      	b.n	eaf0 <ll_rx_dequeue+0x18>
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
    ebb4:	4a28      	ldr	r2, [pc, #160]	; (ec58 <ll_rx_dequeue+0x180>)
    ebb6:	492d      	ldr	r1, [pc, #180]	; (ec6c <ll_rx_dequeue+0x194>)
    ebb8:	4829      	ldr	r0, [pc, #164]	; (ec60 <ll_rx_dequeue+0x188>)
    ebba:	f240 3332 	movw	r3, #818	; 0x332
    ebbe:	f00b f91a 	bl	19df6 <printk>
    ebc2:	4040      	eors	r0, r0
    ebc4:	f380 8811 	msr	BASEPRI, r0
    ebc8:	f04f 0003 	mov.w	r0, #3
    ebcc:	df02      	svc	2
}
    ebce:	b002      	add	sp, #8
    ebd0:	bd70      	pop	{r4, r5, r6, pc}
			struct lll_adv *lll = ftr->param;
    ebd2:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
    ebd4:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
    ebd6:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
    ebd8:	b1ed      	cbz	r5, ec16 <ll_rx_dequeue+0x13e>
				LL_ASSERT(!conn_lll->link_tx_free);
    ebda:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
    ebdc:	2200      	movs	r2, #0
    ebde:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
    ebe0:	b163      	cbz	r3, ebfc <ll_rx_dequeue+0x124>
    ebe2:	4a1d      	ldr	r2, [pc, #116]	; (ec58 <ll_rx_dequeue+0x180>)
    ebe4:	4922      	ldr	r1, [pc, #136]	; (ec70 <ll_rx_dequeue+0x198>)
    ebe6:	481e      	ldr	r0, [pc, #120]	; (ec60 <ll_rx_dequeue+0x188>)
    ebe8:	f240 23bf 	movw	r3, #703	; 0x2bf
    ebec:	f00b f903 	bl	19df6 <printk>
    ebf0:	4040      	eors	r0, r0
    ebf2:	f380 8811 	msr	BASEPRI, r0
    ebf6:	f04f 0003 	mov.w	r0, #3
    ebfa:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
    ebfc:	f105 0150 	add.w	r1, r5, #80	; 0x50
    ec00:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    ec04:	f7fc fb56 	bl	b2b4 <memq_deinit>
				LL_ASSERT(link);
    ec08:	4606      	mov	r6, r0
    ec0a:	b190      	cbz	r0, ec32 <ll_rx_dequeue+0x15a>
				ll_conn_release(conn);
    ec0c:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
    ec0e:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
    ec10:	f001 fb82 	bl	10318 <ll_conn_release>
    ec14:	e7a3      	b.n	eb5e <ll_rx_dequeue+0x86>
				LL_ASSERT(conn_lll);
    ec16:	4a10      	ldr	r2, [pc, #64]	; (ec58 <ll_rx_dequeue+0x180>)
    ec18:	4916      	ldr	r1, [pc, #88]	; (ec74 <ll_rx_dequeue+0x19c>)
    ec1a:	4811      	ldr	r0, [pc, #68]	; (ec60 <ll_rx_dequeue+0x188>)
    ec1c:	f44f 732f 	mov.w	r3, #700	; 0x2bc
    ec20:	f00b f8e9 	bl	19df6 <printk>
    ec24:	4040      	eors	r0, r0
    ec26:	f380 8811 	msr	BASEPRI, r0
    ec2a:	f04f 0003 	mov.w	r0, #3
    ec2e:	df02      	svc	2
    ec30:	e7d3      	b.n	ebda <ll_rx_dequeue+0x102>
				LL_ASSERT(link);
    ec32:	4a09      	ldr	r2, [pc, #36]	; (ec58 <ll_rx_dequeue+0x180>)
    ec34:	490c      	ldr	r1, [pc, #48]	; (ec68 <ll_rx_dequeue+0x190>)
    ec36:	480a      	ldr	r0, [pc, #40]	; (ec60 <ll_rx_dequeue+0x188>)
    ec38:	f240 23c2 	movw	r3, #706	; 0x2c2
    ec3c:	f00b f8db 	bl	19df6 <printk>
    ec40:	4040      	eors	r0, r0
    ec42:	f380 8811 	msr	BASEPRI, r0
    ec46:	f04f 0003 	mov.w	r0, #3
    ec4a:	df02      	svc	2
    ec4c:	e7de      	b.n	ec0c <ll_rx_dequeue+0x134>
    ec4e:	bf00      	nop
    ec50:	20001b00 	.word	0x20001b00
    ec54:	20001818 	.word	0x20001818
    ec58:	0001fdc4 	.word	0x0001fdc4
    ec5c:	0001fd3c 	.word	0x0001fd3c
    ec60:	0001fcdc 	.word	0x0001fcdc
    ec64:	20001874 	.word	0x20001874
    ec68:	00020078 	.word	0x00020078
    ec6c:	0001fe9c 	.word	0x0001fe9c
    ec70:	0001fe84 	.word	0x0001fe84
    ec74:	0001fe78 	.word	0x0001fe78

0000ec78 <ll_rx_mem_release>:
{
    ec78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = *node_rx;
    ec7c:	6804      	ldr	r4, [r0, #0]
	while (rx) {
    ec7e:	4e85      	ldr	r6, [pc, #532]	; (ee94 <ll_rx_mem_release+0x21c>)
{
    ec80:	4681      	mov	r9, r0
	while (rx) {
    ec82:	2c00      	cmp	r4, #0
    ec84:	d041      	beq.n	ed0a <ll_rx_mem_release+0x92>
			LL_ASSERT(0);
    ec86:	f8df 8238 	ldr.w	r8, [pc, #568]	; eec0 <ll_rx_mem_release+0x248>
    ec8a:	f8df a238 	ldr.w	sl, [pc, #568]	; eec4 <ll_rx_mem_release+0x24c>
    ec8e:	4f82      	ldr	r7, [pc, #520]	; (ee98 <ll_rx_mem_release+0x220>)
		rx = rx->next;
    ec90:	4625      	mov	r5, r4
    ec92:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
    ec94:	792b      	ldrb	r3, [r5, #4]
    ec96:	2b12      	cmp	r3, #18
    ec98:	d869      	bhi.n	ed6e <ll_rx_mem_release+0xf6>
    ec9a:	e8df f003 	tbb	[pc, r3]
    ec9e:	681d      	.short	0x681d
    eca0:	6868681d 	.word	0x6868681d
    eca4:	68686868 	.word	0x68686868
    eca8:	780a6868 	.word	0x780a6868
    ecac:	1d1d1d1d 	.word	0x1d1d1d1d
    ecb0:	1d          	.byte	0x1d
    ecb1:	00          	.byte	0x00
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
    ecb2:	7f2b      	ldrb	r3, [r5, #28]
    ecb4:	2b3c      	cmp	r3, #60	; 0x3c
    ecb6:	f000 80d1 	beq.w	ee5c <ll_rx_mem_release+0x1e4>
				LL_ASSERT(!cc->status);
    ecba:	b1db      	cbz	r3, ecf4 <ll_rx_mem_release+0x7c>
    ecbc:	4977      	ldr	r1, [pc, #476]	; (ee9c <ll_rx_mem_release+0x224>)
    ecbe:	f240 338e 	movw	r3, #910	; 0x38e
    ecc2:	4642      	mov	r2, r8
    ecc4:	4638      	mov	r0, r7
    ecc6:	f00b f896 	bl	19df6 <printk>
    ecca:	4040      	eors	r0, r0
    eccc:	f380 8811 	msr	BASEPRI, r0
    ecd0:	f04f 0003 	mov.w	r0, #3
    ecd4:	df02      	svc	2
    ecd6:	792b      	ldrb	r3, [r5, #4]
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
    ecd8:	b963      	cbnz	r3, ecf4 <ll_rx_mem_release+0x7c>
    ecda:	4971      	ldr	r1, [pc, #452]	; (eea0 <ll_rx_mem_release+0x228>)
    ecdc:	f240 33d7 	movw	r3, #983	; 0x3d7
    ece0:	4642      	mov	r2, r8
    ece2:	4638      	mov	r0, r7
    ece4:	f00b f887 	bl	19df6 <printk>
    ece8:	4040      	eors	r0, r0
    ecea:	f380 8811 	msr	BASEPRI, r0
    ecee:	f04f 0003 	mov.w	r0, #3
    ecf2:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    ecf4:	7833      	ldrb	r3, [r6, #0]
    ecf6:	2b06      	cmp	r3, #6
    ecf8:	d86e      	bhi.n	edd8 <ll_rx_mem_release+0x160>
	mem_link_rx.quota_pdu += delta;
    ecfa:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
    ecfc:	4969      	ldr	r1, [pc, #420]	; (eea4 <ll_rx_mem_release+0x22c>)
	mem_link_rx.quota_pdu += delta;
    ecfe:	7033      	strb	r3, [r6, #0]
			mem_release(rx_free, &mem_pdu_rx.free);
    ed00:	4628      	mov	r0, r5
    ed02:	f7fc fa97 	bl	b234 <mem_release>
	while (rx) {
    ed06:	2c00      	cmp	r4, #0
    ed08:	d1c2      	bne.n	ec90 <ll_rx_mem_release+0x18>
	*node_rx = rx;
    ed0a:	2700      	movs	r7, #0
    ed0c:	f8c9 7000 	str.w	r7, [r9]
	while (mem_link_rx.quota_pdu &&
    ed10:	7833      	ldrb	r3, [r6, #0]
    ed12:	b353      	cbz	r3, ed6a <ll_rx_mem_release+0xf2>
    ed14:	4d64      	ldr	r5, [pc, #400]	; (eea8 <ll_rx_mem_release+0x230>)
		link = mem_acquire(&mem_link_rx.free);
    ed16:	f8df 819c 	ldr.w	r8, [pc, #412]	; eeb4 <ll_rx_mem_release+0x23c>
    ed1a:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    ed1c:	f8df 9184 	ldr.w	r9, [pc, #388]	; eea4 <ll_rx_mem_release+0x22c>
	if (last == count) {
    ed20:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
    ed22:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    ed24:	3401      	adds	r4, #1
    ed26:	b2e4      	uxtb	r4, r4
		last = 0U;
    ed28:	42a2      	cmp	r2, r4
    ed2a:	bf08      	it	eq
    ed2c:	2400      	moveq	r4, #0
	if (last == first) {
    ed2e:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    ed30:	4640      	mov	r0, r8
    ed32:	d064      	beq.n	edfe <ll_rx_mem_release+0x186>
    ed34:	f7fc fa64 	bl	b200 <mem_acquire>
    ed38:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    ed3a:	4648      	mov	r0, r9
		if (!link) {
    ed3c:	f1ba 0f00 	cmp.w	sl, #0
    ed40:	d05d      	beq.n	edfe <ll_rx_mem_release+0x186>
		rx = mem_acquire(&mem_pdu_rx.free);
    ed42:	f7fc fa5d 	bl	b200 <mem_acquire>
		if (!rx) {
    ed46:	2800      	cmp	r0, #0
    ed48:	d055      	beq.n	edf6 <ll_rx_mem_release+0x17e>
		link->mem = NULL;
    ed4a:	f8ca 7004 	str.w	r7, [sl, #4]
		rx->link = link;
    ed4e:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ed52:	78e9      	ldrb	r1, [r5, #3]
    ed54:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
    ed56:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ed58:	fb01 5202 	mla	r2, r1, r2, r5
    ed5c:	3b01      	subs	r3, #1
    ed5e:	b2db      	uxtb	r3, r3
    ed60:	6050      	str	r0, [r2, #4]
    ed62:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    ed64:	70ec      	strb	r4, [r5, #3]
	while (mem_link_rx.quota_pdu &&
    ed66:	2b00      	cmp	r3, #0
    ed68:	d1da      	bne.n	ed20 <ll_rx_mem_release+0xa8>
}
    ed6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(0);
    ed6e:	f240 430b 	movw	r3, #1035	; 0x40b
    ed72:	4642      	mov	r2, r8
    ed74:	4651      	mov	r1, sl
    ed76:	4638      	mov	r0, r7
    ed78:	f00b f83d 	bl	19df6 <printk>
    ed7c:	4040      	eors	r0, r0
    ed7e:	f380 8811 	msr	BASEPRI, r0
    ed82:	f04f 0003 	mov.w	r0, #3
    ed86:	df02      	svc	2
	while (rx) {
    ed88:	2c00      	cmp	r4, #0
    ed8a:	d181      	bne.n	ec90 <ll_rx_mem_release+0x18>
    ed8c:	e7bd      	b.n	ed0a <ll_rx_mem_release+0x92>
			conn = ll_conn_get(rx_free->handle);
    ed8e:	88e8      	ldrh	r0, [r5, #6]
    ed90:	f001 fad0 	bl	10334 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
    ed94:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
    ed96:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
    ed98:	b163      	cbz	r3, edb4 <ll_rx_mem_release+0x13c>
    ed9a:	4944      	ldr	r1, [pc, #272]	; (eeac <ll_rx_mem_release+0x234>)
    ed9c:	f240 33fe 	movw	r3, #1022	; 0x3fe
    eda0:	4642      	mov	r2, r8
    eda2:	4638      	mov	r0, r7
    eda4:	f00b f827 	bl	19df6 <printk>
    eda8:	4040      	eors	r0, r0
    edaa:	f380 8811 	msr	BASEPRI, r0
    edae:	f04f 0003 	mov.w	r0, #3
    edb2:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
    edb4:	f105 016c 	add.w	r1, r5, #108	; 0x6c
    edb8:	f105 0068 	add.w	r0, r5, #104	; 0x68
    edbc:	f7fc fa7a 	bl	b2b4 <memq_deinit>
			LL_ASSERT(link);
    edc0:	4683      	mov	fp, r0
    edc2:	2800      	cmp	r0, #0
    edc4:	d052      	beq.n	ee6c <ll_rx_mem_release+0x1f4>
			conn->lll.link_tx_free = link;
    edc6:	f8c5 b078 	str.w	fp, [r5, #120]	; 0x78
			ll_conn_release(conn);
    edca:	4628      	mov	r0, r5
    edcc:	f001 faa4 	bl	10318 <ll_conn_release>
	while (rx) {
    edd0:	2c00      	cmp	r4, #0
    edd2:	f47f af5d 	bne.w	ec90 <ll_rx_mem_release+0x18>
    edd6:	e798      	b.n	ed0a <ll_rx_mem_release+0x92>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
    edd8:	4935      	ldr	r1, [pc, #212]	; (eeb0 <ll_rx_mem_release+0x238>)
    edda:	f240 4317 	movw	r3, #1047	; 0x417
    edde:	4642      	mov	r2, r8
    ede0:	4638      	mov	r0, r7
    ede2:	f00b f808 	bl	19df6 <printk>
    ede6:	4040      	eors	r0, r0
    ede8:	f380 8811 	msr	BASEPRI, r0
    edec:	f04f 0003 	mov.w	r0, #3
    edf0:	df02      	svc	2
    edf2:	7833      	ldrb	r3, [r6, #0]
    edf4:	e781      	b.n	ecfa <ll_rx_mem_release+0x82>
			mem_release(link, &mem_link_rx.free);
    edf6:	492f      	ldr	r1, [pc, #188]	; (eeb4 <ll_rx_mem_release+0x23c>)
    edf8:	4650      	mov	r0, sl
    edfa:	f7fc fa1b 	bl	b234 <mem_release>
	if (max > mem_link_rx.quota_pdu) {
    edfe:	7833      	ldrb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ee00:	1e5f      	subs	r7, r3, #1
    ee02:	b2ff      	uxtb	r7, r7
    ee04:	2b00      	cmp	r3, #0
    ee06:	d0b0      	beq.n	ed6a <ll_rx_mem_release+0xf2>
    ee08:	4d2b      	ldr	r5, [pc, #172]	; (eeb8 <ll_rx_mem_release+0x240>)
		link = mem_acquire(&mem_link_rx.free);
    ee0a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; eeb4 <ll_rx_mem_release+0x23c>
    ee0e:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
    ee10:	f8df 9090 	ldr.w	r9, [pc, #144]	; eea4 <ll_rx_mem_release+0x22c>
	if (last == count) {
    ee14:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ee16:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
    ee18:	3401      	adds	r4, #1
    ee1a:	b2e4      	uxtb	r4, r4
		last = 0U;
    ee1c:	42a2      	cmp	r2, r4
    ee1e:	bf08      	it	eq
    ee20:	2400      	moveq	r4, #0
	if (last == first) {
    ee22:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
    ee24:	4640      	mov	r0, r8
    ee26:	d0a0      	beq.n	ed6a <ll_rx_mem_release+0xf2>
    ee28:	f7fc f9ea 	bl	b200 <mem_acquire>
    ee2c:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
    ee2e:	4648      	mov	r0, r9
		if (!link) {
    ee30:	f1ba 0f00 	cmp.w	sl, #0
    ee34:	d099      	beq.n	ed6a <ll_rx_mem_release+0xf2>
		rx = mem_acquire(&mem_pdu_rx.free);
    ee36:	f7fc f9e3 	bl	b200 <mem_acquire>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ee3a:	3f01      	subs	r7, #1
    ee3c:	b2ff      	uxtb	r7, r7
		if (!rx) {
    ee3e:	b318      	cbz	r0, ee88 <ll_rx_mem_release+0x210>
		rx->link = link;
    ee40:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
    ee44:	78e9      	ldrb	r1, [r5, #3]
    ee46:	782a      	ldrb	r2, [r5, #0]
	mem_link_rx.quota_pdu += delta;
    ee48:	7833      	ldrb	r3, [r6, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
    ee4a:	fb01 5202 	mla	r2, r1, r2, r5
    ee4e:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ee50:	2fff      	cmp	r7, #255	; 0xff
    ee52:	6050      	str	r0, [r2, #4]
	mem_link_rx.quota_pdu += delta;
    ee54:	7033      	strb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
    ee56:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
    ee58:	d1dc      	bne.n	ee14 <ll_rx_mem_release+0x19c>
    ee5a:	e786      	b.n	ed6a <ll_rx_mem_release+0xf2>
				mem_release(rx_free, &mem_pdu_rx.free);
    ee5c:	4911      	ldr	r1, [pc, #68]	; (eea4 <ll_rx_mem_release+0x22c>)
    ee5e:	4628      	mov	r0, r5
    ee60:	f7fc f9e8 	bl	b234 <mem_release>
	while (rx) {
    ee64:	2c00      	cmp	r4, #0
    ee66:	f47f af13 	bne.w	ec90 <ll_rx_mem_release+0x18>
    ee6a:	e74e      	b.n	ed0a <ll_rx_mem_release+0x92>
			LL_ASSERT(link);
    ee6c:	4913      	ldr	r1, [pc, #76]	; (eebc <ll_rx_mem_release+0x244>)
    ee6e:	f240 4301 	movw	r3, #1025	; 0x401
    ee72:	4642      	mov	r2, r8
    ee74:	4638      	mov	r0, r7
    ee76:	f00a ffbe 	bl	19df6 <printk>
    ee7a:	4040      	eors	r0, r0
    ee7c:	f380 8811 	msr	BASEPRI, r0
    ee80:	f04f 0003 	mov.w	r0, #3
    ee84:	df02      	svc	2
    ee86:	e79e      	b.n	edc6 <ll_rx_mem_release+0x14e>
			mem_release(link, &mem_link_rx.free);
    ee88:	4650      	mov	r0, sl
    ee8a:	490a      	ldr	r1, [pc, #40]	; (eeb4 <ll_rx_mem_release+0x23c>)
}
    ee8c:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
			mem_release(link, &mem_link_rx.free);
    ee90:	f7fc b9d0 	b.w	b234 <mem_release>
    ee94:	20001814 	.word	0x20001814
    ee98:	0001fcdc 	.word	0x0001fcdc
    ee9c:	0001febc 	.word	0x0001febc
    eea0:	0001fec8 	.word	0x0001fec8
    eea4:	20001874 	.word	0x20001874
    eea8:	200005d0 	.word	0x200005d0
    eeac:	0001feec 	.word	0x0001feec
    eeb0:	0001fe44 	.word	0x0001fe44
    eeb4:	20001818 	.word	0x20001818
    eeb8:	200005e4 	.word	0x200005e4
    eebc:	00020078 	.word	0x00020078
    eec0:	0001fdc4 	.word	0x0001fdc4
    eec4:	0001fd3c 	.word	0x0001fd3c

0000eec8 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
    eec8:	4801      	ldr	r0, [pc, #4]	; (eed0 <ll_rx_link_alloc+0x8>)
    eeca:	f7fc b999 	b.w	b200 <mem_acquire>
    eece:	bf00      	nop
    eed0:	20001818 	.word	0x20001818

0000eed4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
    eed4:	4901      	ldr	r1, [pc, #4]	; (eedc <ll_rx_link_release+0x8>)
    eed6:	f7fc b9ad 	b.w	b234 <mem_release>
    eeda:	bf00      	nop
    eedc:	20001818 	.word	0x20001818

0000eee0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
    eee0:	4801      	ldr	r0, [pc, #4]	; (eee8 <ll_rx_alloc+0x8>)
    eee2:	f7fc b98d 	b.w	b200 <mem_acquire>
    eee6:	bf00      	nop
    eee8:	20001874 	.word	0x20001874

0000eeec <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
    eeec:	4901      	ldr	r1, [pc, #4]	; (eef4 <ll_rx_release+0x8>)
    eeee:	f7fc b9a1 	b.w	b234 <mem_release>
    eef2:	bf00      	nop
    eef4:	20001874 	.word	0x20001874

0000eef8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
    eef8:	4b02      	ldr	r3, [pc, #8]	; (ef04 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    eefa:	4a03      	ldr	r2, [pc, #12]	; (ef08 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
    eefc:	78db      	ldrb	r3, [r3, #3]
    eefe:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
    ef00:	f7fc b9e2 	b.w	b2c8 <memq_enqueue>
    ef04:	20000720 	.word	0x20000720
    ef08:	20001b04 	.word	0x20001b04

0000ef0c <ll_rx_sched>:
	k_sem_give(sem_recv);
    ef0c:	4b01      	ldr	r3, [pc, #4]	; (ef14 <ll_rx_sched+0x8>)
    ef0e:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
    ef10:	f00a ba3e 	b.w	19390 <z_impl_k_sem_give>
    ef14:	20001b10 	.word	0x20001b10

0000ef18 <ll_pdu_rx_alloc_peek>:
{
    ef18:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    ef1a:	4b0d      	ldr	r3, [pc, #52]	; (ef50 <ll_pdu_rx_alloc_peek+0x38>)
    ef1c:	789a      	ldrb	r2, [r3, #2]
    ef1e:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    ef20:	42a2      	cmp	r2, r4
    ef22:	d809      	bhi.n	ef38 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
    ef24:	1aa1      	subs	r1, r4, r2
    ef26:	b2c9      	uxtb	r1, r1
    ef28:	4288      	cmp	r0, r1
    ef2a:	d802      	bhi.n	ef32 <ll_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    ef2c:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    ef2e:	7819      	ldrb	r1, [r3, #0]
    ef30:	d109      	bne.n	ef46 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
    ef32:	2000      	movs	r0, #0
}
    ef34:	bc10      	pop	{r4}
    ef36:	4770      	bx	lr
		return count - first + last;
    ef38:	7859      	ldrb	r1, [r3, #1]
    ef3a:	1a89      	subs	r1, r1, r2
    ef3c:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
    ef3e:	b2c9      	uxtb	r1, r1
    ef40:	4288      	cmp	r0, r1
    ef42:	d8f6      	bhi.n	ef32 <ll_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
    ef44:	7819      	ldrb	r1, [r3, #0]
}
    ef46:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    ef48:	fb02 3301 	mla	r3, r2, r1, r3
    ef4c:	6858      	ldr	r0, [r3, #4]
    ef4e:	4770      	bx	lr
    ef50:	200005d0 	.word	0x200005d0

0000ef54 <ll_pdu_rx_alloc>:
{
    ef54:	b410      	push	{r4}
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    ef56:	4b0a      	ldr	r3, [pc, #40]	; (ef80 <ll_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    ef58:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    ef5a:	78da      	ldrb	r2, [r3, #3]
    ef5c:	7818      	ldrb	r0, [r3, #0]
    ef5e:	785c      	ldrb	r4, [r3, #1]
    ef60:	428a      	cmp	r2, r1
    ef62:	d00a      	beq.n	ef7a <ll_pdu_rx_alloc+0x26>
	_first += 1U;
    ef64:	1c4a      	adds	r2, r1, #1
    ef66:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    ef68:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    ef6c:	4294      	cmp	r4, r2
    ef6e:	bf08      	it	eq
    ef70:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    ef72:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    ef74:	709a      	strb	r2, [r3, #2]
}
    ef76:	bc10      	pop	{r4}
    ef78:	4770      	bx	lr
		return NULL;
    ef7a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
    ef7c:	e7fb      	b.n	ef76 <ll_pdu_rx_alloc+0x22>
    ef7e:	bf00      	nop
    ef80:	200005d0 	.word	0x200005d0

0000ef84 <ll_tx_ack_put>:
{
    ef84:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
    ef86:	4a13      	ldr	r2, [pc, #76]	; (efd4 <ll_tx_ack_put+0x50>)
    ef88:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
    ef8a:	7855      	ldrb	r5, [r2, #1]
    ef8c:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
    ef8e:	1c73      	adds	r3, r6, #1
    ef90:	b2db      	uxtb	r3, r3
		last = 0U;
    ef92:	429d      	cmp	r5, r3
    ef94:	bf08      	it	eq
    ef96:	2300      	moveq	r3, #0
	if (last == first) {
    ef98:	429c      	cmp	r4, r3
    ef9a:	d00a      	beq.n	efb2 <ll_tx_ack_put+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    ef9c:	4615      	mov	r5, r2
    ef9e:	f815 4b04 	ldrb.w	r4, [r5], #4
    efa2:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(tx);
    efa6:	192e      	adds	r6, r5, r4
    efa8:	d003      	beq.n	efb2 <ll_tx_ack_put+0x2e>
	tx->handle = handle;
    efaa:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
    efac:	70d3      	strb	r3, [r2, #3]
	tx->node = node_tx;
    efae:	6071      	str	r1, [r6, #4]
}
    efb0:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(tx);
    efb2:	4a09      	ldr	r2, [pc, #36]	; (efd8 <ll_tx_ack_put+0x54>)
    efb4:	4909      	ldr	r1, [pc, #36]	; (efdc <ll_tx_ack_put+0x58>)
    efb6:	480a      	ldr	r0, [pc, #40]	; (efe0 <ll_tx_ack_put+0x5c>)
    efb8:	f240 4361 	movw	r3, #1121	; 0x461
    efbc:	f00a ff1b 	bl	19df6 <printk>
    efc0:	4040      	eors	r0, r0
    efc2:	f380 8811 	msr	BASEPRI, r0
    efc6:	f04f 0003 	mov.w	r0, #3
    efca:	df02      	svc	2
	tx->handle = handle;
    efcc:	2300      	movs	r3, #0
    efce:	801b      	strh	r3, [r3, #0]
    efd0:	deff      	udf	#255	; 0xff
    efd2:	bf00      	nop
    efd4:	20000720 	.word	0x20000720
    efd8:	0001fdc4 	.word	0x0001fdc4
    efdc:	0002006c 	.word	0x0002006c
    efe0:	0001fcdc 	.word	0x0001fcdc

0000efe4 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
    efe4:	6008      	str	r0, [r1, #0]
    efe6:	4801      	ldr	r0, [pc, #4]	; (efec <ull_ticker_status_give+0x8>)
    efe8:	f00a b9d2 	b.w	19390 <z_impl_k_sem_give>
    efec:	20001b14 	.word	0x20001b14

0000eff0 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    eff0:	f030 0302 	bics.w	r3, r0, #2
{
    eff4:	b510      	push	{r4, lr}
    eff6:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    eff8:	d002      	beq.n	f000 <ull_ticker_status_take+0x10>
    effa:	680b      	ldr	r3, [r1, #0]
    effc:	2b02      	cmp	r3, #2
    effe:	d008      	beq.n	f012 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
    f000:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f004:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f008:	4809      	ldr	r0, [pc, #36]	; (f030 <ull_ticker_status_take+0x40>)
    f00a:	f00a f9e7 	bl	193dc <z_impl_k_sem_take>
	return *ret_cb;
    f00e:	6820      	ldr	r0, [r4, #0]
}
    f010:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f012:	4a08      	ldr	r2, [pc, #32]	; (f034 <ull_ticker_status_take+0x44>)
    f014:	4908      	ldr	r1, [pc, #32]	; (f038 <ull_ticker_status_take+0x48>)
    f016:	4809      	ldr	r0, [pc, #36]	; (f03c <ull_ticker_status_take+0x4c>)
    f018:	f240 4395 	movw	r3, #1173	; 0x495
    f01c:	f00a feeb 	bl	19df6 <printk>
    f020:	4040      	eors	r0, r0
    f022:	f380 8811 	msr	BASEPRI, r0
    f026:	f04f 0003 	mov.w	r0, #3
    f02a:	df02      	svc	2
    f02c:	e7e8      	b.n	f000 <ull_ticker_status_take+0x10>
    f02e:	bf00      	nop
    f030:	20001b14 	.word	0x20001b14
    f034:	0001fdc4 	.word	0x0001fdc4
    f038:	0001ff04 	.word	0x0001ff04
    f03c:	0001fcdc 	.word	0x0001fcdc

0000f040 <ull_disable_mark>:
	if (!*m) {
    f040:	4a04      	ldr	r2, [pc, #16]	; (f054 <ull_disable_mark+0x14>)
    f042:	6813      	ldr	r3, [r2, #0]
    f044:	b10b      	cbz	r3, f04a <ull_disable_mark+0xa>
}
    f046:	4618      	mov	r0, r3
    f048:	4770      	bx	lr
		*m = param;
    f04a:	4603      	mov	r3, r0
    f04c:	6010      	str	r0, [r2, #0]
}
    f04e:	4618      	mov	r0, r3
    f050:	4770      	bx	lr
    f052:	bf00      	nop
    f054:	20001750 	.word	0x20001750

0000f058 <ull_disable_unmark>:
	if (*m && *m == param) {
    f058:	4a04      	ldr	r2, [pc, #16]	; (f06c <ull_disable_unmark+0x14>)
    f05a:	6813      	ldr	r3, [r2, #0]
    f05c:	b123      	cbz	r3, f068 <ull_disable_unmark+0x10>
    f05e:	4298      	cmp	r0, r3
		*m = NULL;
    f060:	bf06      	itte	eq
    f062:	2100      	moveq	r1, #0
    f064:	6011      	streq	r1, [r2, #0]
	return NULL;
    f066:	2300      	movne	r3, #0
}
    f068:	4618      	mov	r0, r3
    f06a:	4770      	bx	lr
    f06c:	20001750 	.word	0x20001750

0000f070 <ull_disable_mark_get>:
	return mark_get(mark_disable);
    f070:	4b01      	ldr	r3, [pc, #4]	; (f078 <ull_disable_mark_get+0x8>)
}
    f072:	6818      	ldr	r0, [r3, #0]
    f074:	4770      	bx	lr
    f076:	bf00      	nop
    f078:	20001750 	.word	0x20001750

0000f07c <ull_update_mark>:
	if (!*m) {
    f07c:	4a04      	ldr	r2, [pc, #16]	; (f090 <ull_update_mark+0x14>)
    f07e:	6813      	ldr	r3, [r2, #0]
    f080:	b10b      	cbz	r3, f086 <ull_update_mark+0xa>
}
    f082:	4618      	mov	r0, r3
    f084:	4770      	bx	lr
		*m = param;
    f086:	4603      	mov	r3, r0
    f088:	6010      	str	r0, [r2, #0]
}
    f08a:	4618      	mov	r0, r3
    f08c:	4770      	bx	lr
    f08e:	bf00      	nop
    f090:	20001754 	.word	0x20001754

0000f094 <ull_update_unmark>:
	if (*m && *m == param) {
    f094:	4a04      	ldr	r2, [pc, #16]	; (f0a8 <ull_update_unmark+0x14>)
    f096:	6813      	ldr	r3, [r2, #0]
    f098:	b123      	cbz	r3, f0a4 <ull_update_unmark+0x10>
    f09a:	4298      	cmp	r0, r3
		*m = NULL;
    f09c:	bf06      	itte	eq
    f09e:	2100      	moveq	r1, #0
    f0a0:	6011      	streq	r1, [r2, #0]
	return NULL;
    f0a2:	2300      	movne	r3, #0
}
    f0a4:	4618      	mov	r0, r3
    f0a6:	4770      	bx	lr
    f0a8:	20001754 	.word	0x20001754

0000f0ac <ull_update_mark_get>:
	return mark_get(mark_update);
    f0ac:	4b01      	ldr	r3, [pc, #4]	; (f0b4 <ull_update_mark_get+0x8>)
}
    f0ae:	6818      	ldr	r0, [r3, #0]
    f0b0:	4770      	bx	lr
    f0b2:	bf00      	nop
    f0b4:	20001754 	.word	0x20001754

0000f0b8 <ull_disable>:
{
    f0b8:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
    f0ba:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
    f0bc:	f115 0f10 	cmn.w	r5, #16
{
    f0c0:	b087      	sub	sp, #28
	if (!hdr) {
    f0c2:	d00b      	beq.n	f0dc <ull_disable+0x24>
	compiler_barrier();
    f0c4:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
    f0c6:	2201      	movs	r2, #1
    f0c8:	4668      	mov	r0, sp
    f0ca:	2100      	movs	r1, #0
    f0cc:	f00f fef8 	bl	1eec0 <z_impl_k_sem_init>
    f0d0:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
    f0d2:	4a13      	ldr	r2, [pc, #76]	; (f120 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
    f0d4:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
    f0d8:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
    f0da:	b913      	cbnz	r3, f0e2 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
    f0dc:	2000      	movs	r0, #0
}
    f0de:	b007      	add	sp, #28
    f0e0:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
    f0e2:	4b10      	ldr	r3, [pc, #64]	; (f124 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f0e4:	2200      	movs	r2, #0
    f0e6:	4611      	mov	r1, r2
    f0e8:	2003      	movs	r0, #3
	mfy.param = lll;
    f0ea:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
    f0ec:	f7fc f960 	bl	b3b0 <mayfly_enqueue>
	LL_ASSERT(!ret);
    f0f0:	b940      	cbnz	r0, f104 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
    f0f2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f0f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    f0fa:	4668      	mov	r0, sp
    f0fc:	f00a f96e 	bl	193dc <z_impl_k_sem_take>
}
    f100:	b007      	add	sp, #28
    f102:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
    f104:	4a08      	ldr	r2, [pc, #32]	; (f128 <ull_disable+0x70>)
    f106:	4909      	ldr	r1, [pc, #36]	; (f12c <ull_disable+0x74>)
    f108:	4809      	ldr	r0, [pc, #36]	; (f130 <ull_disable+0x78>)
    f10a:	f240 43d7 	movw	r3, #1239	; 0x4d7
    f10e:	f00a fe72 	bl	19df6 <printk>
    f112:	4040      	eors	r0, r0
    f114:	f380 8811 	msr	BASEPRI, r0
    f118:	f04f 0003 	mov.w	r0, #3
    f11c:	df02      	svc	2
    f11e:	e7e8      	b.n	f0f2 <ull_disable+0x3a>
    f120:	0000df4d 	.word	0x0000df4d
    f124:	20000754 	.word	0x20000754
    f128:	0001fdc4 	.word	0x0001fdc4
    f12c:	0001fe0c 	.word	0x0001fe0c
    f130:	0001fcdc 	.word	0x0001fcdc

0000f134 <ull_pdu_rx_alloc_peek>:
{
    f134:	b410      	push	{r4}
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f136:	4b0d      	ldr	r3, [pc, #52]	; (f16c <ull_pdu_rx_alloc_peek+0x38>)
    f138:	789a      	ldrb	r2, [r3, #2]
    f13a:	78dc      	ldrb	r4, [r3, #3]
	if (last >= first) {
    f13c:	42a2      	cmp	r2, r4
    f13e:	d809      	bhi.n	f154 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
    f140:	1aa1      	subs	r1, r4, r2
    f142:	b2c9      	uxtb	r1, r1
    f144:	4288      	cmp	r0, r1
    f146:	d802      	bhi.n	f14e <ull_pdu_rx_alloc_peek+0x1a>
	if (first == last) {
    f148:	42a2      	cmp	r2, r4
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f14a:	7819      	ldrb	r1, [r3, #0]
    f14c:	d109      	bne.n	f162 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
    f14e:	2000      	movs	r0, #0
}
    f150:	bc10      	pop	{r4}
    f152:	4770      	bx	lr
		return count - first + last;
    f154:	7859      	ldrb	r1, [r3, #1]
    f156:	1a89      	subs	r1, r1, r2
    f158:	4421      	add	r1, r4
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
    f15a:	b2c9      	uxtb	r1, r1
    f15c:	4288      	cmp	r0, r1
    f15e:	d8f6      	bhi.n	f14e <ull_pdu_rx_alloc_peek+0x1a>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
    f160:	7819      	ldrb	r1, [r3, #0]
}
    f162:	bc10      	pop	{r4}
	return *((void **)(fifo + first * size));
    f164:	fb02 3301 	mla	r3, r2, r1, r3
    f168:	6858      	ldr	r0, [r3, #4]
    f16a:	4770      	bx	lr
    f16c:	200005e4 	.word	0x200005e4

0000f170 <ull_pdu_rx_alloc>:
{
    f170:	b410      	push	{r4}
	return MFIFO_DEQUEUE(pdu_rx_free);
    f172:	4b0a      	ldr	r3, [pc, #40]	; (f19c <ull_pdu_rx_alloc+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
    f174:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
    f176:	78da      	ldrb	r2, [r3, #3]
    f178:	7818      	ldrb	r0, [r3, #0]
    f17a:	785c      	ldrb	r4, [r3, #1]
    f17c:	428a      	cmp	r2, r1
    f17e:	d00a      	beq.n	f196 <ull_pdu_rx_alloc+0x26>
	_first += 1U;
    f180:	1c4a      	adds	r2, r1, #1
    f182:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
    f184:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
    f188:	4294      	cmp	r4, r2
    f18a:	bf08      	it	eq
    f18c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
    f18e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
    f190:	709a      	strb	r2, [r3, #2]
}
    f192:	bc10      	pop	{r4}
    f194:	4770      	bx	lr
		return NULL;
    f196:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(pdu_rx_free);
    f198:	e7fb      	b.n	f192 <ull_pdu_rx_alloc+0x22>
    f19a:	bf00      	nop
    f19c:	200005e4 	.word	0x200005e4

0000f1a0 <ull_rx_put>:
{
    f1a0:	b538      	push	{r3, r4, r5, lr}
    f1a2:	460c      	mov	r4, r1
    f1a4:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f1a6:	f003 fc3b 	bl	12a20 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f1aa:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f1ac:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f1ae:	4a03      	ldr	r2, [pc, #12]	; (f1bc <ull_rx_put+0x1c>)
    f1b0:	4628      	mov	r0, r5
}
    f1b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f1b6:	f7fc b887 	b.w	b2c8 <memq_enqueue>
    f1ba:	bf00      	nop
    f1bc:	20001b0c 	.word	0x20001b0c

0000f1c0 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f1c0:	2201      	movs	r2, #1
    f1c2:	4b02      	ldr	r3, [pc, #8]	; (f1cc <ull_rx_sched+0xc>)
    f1c4:	4611      	mov	r1, r2
    f1c6:	2000      	movs	r0, #0
    f1c8:	f7fc b8f2 	b.w	b3b0 <mayfly_enqueue>
    f1cc:	20000764 	.word	0x20000764

0000f1d0 <ull_prepare_enqueue>:
{
    f1d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f1d4:	4e19      	ldr	r6, [pc, #100]	; (f23c <ull_prepare_enqueue+0x6c>)
{
    f1d6:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
    f1da:	78f4      	ldrb	r4, [r6, #3]
	if (last == count) {
    f1dc:	7877      	ldrb	r7, [r6, #1]
    f1de:	f896 c002 	ldrb.w	ip, [r6, #2]
	last = last + 1;
    f1e2:	1c65      	adds	r5, r4, #1
    f1e4:	b2ed      	uxtb	r5, r5
		last = 0U;
    f1e6:	42af      	cmp	r7, r5
    f1e8:	bf08      	it	eq
    f1ea:	2500      	moveq	r5, #0
	if (last == first) {
    f1ec:	45ac      	cmp	ip, r5
    f1ee:	d021      	beq.n	f234 <ull_prepare_enqueue+0x64>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    f1f0:	4699      	mov	r9, r3
    f1f2:	4633      	mov	r3, r6
    f1f4:	460f      	mov	r7, r1
    f1f6:	4611      	mov	r1, r2
    f1f8:	f813 2b04 	ldrb.w	r2, [r3], #4
    f1fc:	fb02 3404 	mla	r4, r2, r4, r3
	if (!e) {
    f200:	b1c4      	cbz	r4, f234 <ull_prepare_enqueue+0x64>
    f202:	4680      	mov	r8, r0
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
    f204:	2210      	movs	r2, #16
    f206:	4620      	mov	r0, r4
    f208:	f00c fc0f 	bl	1ba2a <memcpy>
	e->is_resume = is_resume;
    f20c:	f894 2020 	ldrb.w	r2, [r4, #32]
	e->prepare_cb = prepare_cb;
    f210:	f8c4 9010 	str.w	r9, [r4, #16]
	e->is_resume = is_resume;
    f214:	f00a 0a01 	and.w	sl, sl, #1
    f218:	f022 0303 	bic.w	r3, r2, #3
    f21c:	ea43 030a 	orr.w	r3, r3, sl
	e->prio = prio;
    f220:	9a08      	ldr	r2, [sp, #32]
    f222:	61e2      	str	r2, [r4, #28]
	e->abort_cb = abort_cb;
    f224:	e9c4 8705 	strd	r8, r7, [r4, #20]
	*last = idx; /* Commit: Update write index */
    f228:	70f5      	strb	r5, [r6, #3]
	e->is_resume = is_resume;
    f22a:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
    f22e:	2000      	movs	r0, #0
}
    f230:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    f234:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    f238:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    f23c:	200005fc 	.word	0x200005fc

0000f240 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
    f240:	4b05      	ldr	r3, [pc, #20]	; (f258 <ull_prepare_dequeue_get+0x18>)
    f242:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
    f244:	78d9      	ldrb	r1, [r3, #3]
    f246:	7818      	ldrb	r0, [r3, #0]
    f248:	4291      	cmp	r1, r2
	return (void *)(fifo + first * size);
    f24a:	bf1a      	itte	ne
    f24c:	3304      	addne	r3, #4
    f24e:	fb02 3000 	mlane	r0, r2, r0, r3
		return NULL;
    f252:	2000      	moveq	r0, #0
}
    f254:	4770      	bx	lr
    f256:	bf00      	nop
    f258:	200005fc 	.word	0x200005fc

0000f25c <ull_prepare_dequeue_iter>:
{
    f25c:	b430      	push	{r4, r5}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f25e:	4b0c      	ldr	r3, [pc, #48]	; (f290 <ull_prepare_dequeue_iter+0x34>)
	if (*idx >= count) {
    f260:	7802      	ldrb	r2, [r0, #0]
    f262:	785c      	ldrb	r4, [r3, #1]
    f264:	78dd      	ldrb	r5, [r3, #3]
    f266:	7819      	ldrb	r1, [r3, #0]
    f268:	4294      	cmp	r4, r2
    f26a:	bf9c      	itt	ls
    f26c:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
    f26e:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
    f270:	4295      	cmp	r5, r2
    f272:	d00a      	beq.n	f28a <ull_prepare_dequeue_iter+0x2e>
	i = *idx + 1;
    f274:	1c53      	adds	r3, r2, #1
	p = (void *)(fifo + (*idx) * size);
    f276:	4d07      	ldr	r5, [pc, #28]	; (f294 <ull_prepare_dequeue_iter+0x38>)
	i = *idx + 1;
    f278:	b2db      	uxtb	r3, r3
		i = 0U;
    f27a:	429c      	cmp	r4, r3
    f27c:	bf08      	it	eq
    f27e:	2300      	moveq	r3, #0
	*idx = i;
    f280:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
    f282:	fb02 5001 	mla	r0, r2, r1, r5
}
    f286:	bc30      	pop	{r4, r5}
    f288:	4770      	bx	lr
		return NULL;
    f28a:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
    f28c:	e7fb      	b.n	f286 <ull_prepare_dequeue_iter+0x2a>
    f28e:	bf00      	nop
    f290:	200005fc 	.word	0x200005fc
    f294:	20000600 	.word	0x20000600

0000f298 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
    f298:	4b06      	ldr	r3, [pc, #24]	; (f2b4 <ull_event_done_extra_get+0x1c>)
    f29a:	7899      	ldrb	r1, [r3, #2]
	if (first == last) {
    f29c:	78d8      	ldrb	r0, [r3, #3]
    f29e:	781a      	ldrb	r2, [r3, #0]
    f2a0:	4288      	cmp	r0, r1
    f2a2:	d005      	beq.n	f2b0 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
    f2a4:	fb01 3302 	mla	r3, r1, r2, r3
    f2a8:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
    f2aa:	b110      	cbz	r0, f2b2 <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
    f2ac:	3020      	adds	r0, #32
    f2ae:	4770      	bx	lr
		return NULL;
    f2b0:	2000      	movs	r0, #0
}
    f2b2:	4770      	bx	lr
    f2b4:	200005bc 	.word	0x200005bc

0000f2b8 <ull_event_done>:
{
    f2b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	evdone = MFIFO_DEQUEUE(done);
    f2ba:	4a14      	ldr	r2, [pc, #80]	; (f30c <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
    f2bc:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
    f2be:	78d4      	ldrb	r4, [r2, #3]
    f2c0:	7811      	ldrb	r1, [r2, #0]
    f2c2:	7855      	ldrb	r5, [r2, #1]
    f2c4:	429c      	cmp	r4, r3
    f2c6:	d01f      	beq.n	f308 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
    f2c8:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
    f2cc:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
    f2ce:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
    f2d0:	b2db      	uxtb	r3, r3
		_first = 0U;
    f2d2:	429d      	cmp	r5, r3
    f2d4:	bf08      	it	eq
    f2d6:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
    f2d8:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
    f2da:	b19c      	cbz	r4, f304 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f2dc:	2501      	movs	r5, #1
	evdone->hdr.link = NULL;
    f2de:	2600      	movs	r6, #0
	link = evdone->hdr.link;
    f2e0:	6827      	ldr	r7, [r4, #0]
	evdone->param = param;
    f2e2:	61e0      	str	r0, [r4, #28]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
    f2e4:	7125      	strb	r5, [r4, #4]
	evdone->hdr.link = NULL;
    f2e6:	6026      	str	r6, [r4, #0]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f2e8:	f003 fb9a 	bl	12a20 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f2ec:	4a08      	ldr	r2, [pc, #32]	; (f310 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
    f2ee:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
    f2f0:	4621      	mov	r1, r4
    f2f2:	4638      	mov	r0, r7
    f2f4:	f7fb ffe8 	bl	b2c8 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
    f2f8:	4b06      	ldr	r3, [pc, #24]	; (f314 <ull_event_done+0x5c>)
    f2fa:	4630      	mov	r0, r6
    f2fc:	462a      	mov	r2, r5
    f2fe:	4629      	mov	r1, r5
    f300:	f7fc f856 	bl	b3b0 <mayfly_enqueue>
}
    f304:	4620      	mov	r0, r4
    f306:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
    f308:	2400      	movs	r4, #0
    f30a:	e7fb      	b.n	f304 <ull_event_done+0x4c>
    f30c:	200005bc 	.word	0x200005bc
    f310:	20001b0c 	.word	0x20001b0c
    f314:	20000764 	.word	0x20000764

0000f318 <disabled_cb>:
{
    f318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	adv = ((struct lll_hdr *)param)->parent;
    f31a:	6805      	ldr	r5, [r0, #0]
	LL_ASSERT(adv->link_cc_free);
    f31c:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
{
    f320:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
    f322:	b1ef      	cbz	r7, f360 <disabled_cb+0x48>
	LL_ASSERT(adv->node_rx_cc_free);
    f324:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
	adv->link_cc_free = NULL;
    f328:	2300      	movs	r3, #0
    f32a:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
    f32e:	b36c      	cbz	r4, f38c <disabled_cb+0x74>
	adv->node_rx_cc_free = NULL;
    f330:	2100      	movs	r1, #0
	rx->hdr.handle = 0xffff;
    f332:	f64f 73ff 	movw	r3, #65535	; 0xffff
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f336:	220c      	movs	r2, #12
	adv->node_rx_cc_free = NULL;
    f338:	f8c5 10d0 	str.w	r1, [r5, #208]	; 0xd0
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    f33c:	f104 001c 	add.w	r0, r4, #28
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
    f340:	7122      	strb	r2, [r4, #4]
	rx->hdr.handle = 0xffff;
    f342:	80e3      	strh	r3, [r4, #6]
	memset(cc, 0x00, sizeof(struct node_rx_cc));
    f344:	221e      	movs	r2, #30
    f346:	f00c fb9b 	bl	1ba80 <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    f34a:	233c      	movs	r3, #60	; 0x3c
	ftr->param = param;
    f34c:	60a6      	str	r6, [r4, #8]
	ll_rx_put(link, rx);
    f34e:	4638      	mov	r0, r7
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
    f350:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    f352:	4621      	mov	r1, r4
    f354:	f7ff fdd0 	bl	eef8 <ll_rx_put>
}
    f358:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
    f35c:	f7ff bdd6 	b.w	ef0c <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
    f360:	4a12      	ldr	r2, [pc, #72]	; (f3ac <disabled_cb+0x94>)
    f362:	4913      	ldr	r1, [pc, #76]	; (f3b0 <disabled_cb+0x98>)
    f364:	4813      	ldr	r0, [pc, #76]	; (f3b4 <disabled_cb+0x9c>)
    f366:	f44f 63d6 	mov.w	r3, #1712	; 0x6b0
    f36a:	f00a fd44 	bl	19df6 <printk>
    f36e:	4040      	eors	r0, r0
    f370:	f380 8811 	msr	BASEPRI, r0
    f374:	f04f 0003 	mov.w	r0, #3
    f378:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
    f37a:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
    f37e:	f8d5 70cc 	ldr.w	r7, [r5, #204]	; 0xcc
	adv->link_cc_free = NULL;
    f382:	2300      	movs	r3, #0
    f384:	f8c5 30cc 	str.w	r3, [r5, #204]	; 0xcc
	LL_ASSERT(adv->node_rx_cc_free);
    f388:	2c00      	cmp	r4, #0
    f38a:	d1d1      	bne.n	f330 <disabled_cb+0x18>
    f38c:	4a07      	ldr	r2, [pc, #28]	; (f3ac <disabled_cb+0x94>)
    f38e:	490a      	ldr	r1, [pc, #40]	; (f3b8 <disabled_cb+0xa0>)
    f390:	4808      	ldr	r0, [pc, #32]	; (f3b4 <disabled_cb+0x9c>)
    f392:	f240 63b4 	movw	r3, #1716	; 0x6b4
    f396:	f00a fd2e 	bl	19df6 <printk>
    f39a:	4040      	eors	r0, r0
    f39c:	f380 8811 	msr	BASEPRI, r0
    f3a0:	f04f 0003 	mov.w	r0, #3
    f3a4:	df02      	svc	2
    f3a6:	f8d5 40d0 	ldr.w	r4, [r5, #208]	; 0xd0
    f3aa:	e7c1      	b.n	f330 <disabled_cb+0x18>
    f3ac:	0001ff24 	.word	0x0001ff24
    f3b0:	0001ff64 	.word	0x0001ff64
    f3b4:	0001fcdc 	.word	0x0001fcdc
    f3b8:	0001ff78 	.word	0x0001ff78

0000f3bc <ticker_cb>:
{
    f3bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f3c0:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    f3c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
    f3c6:	4295      	cmp	r5, r2
{
    f3c8:	b08a      	sub	sp, #40	; 0x28
    f3ca:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
    f3cc:	d018      	beq.n	f400 <ticker_cb+0x44>
	return ++hdr->ref;
    f3ce:	7c1b      	ldrb	r3, [r3, #16]
    f3d0:	3301      	adds	r3, #1
    f3d2:	b2db      	uxtb	r3, r3
    f3d4:	4680      	mov	r8, r0
    f3d6:	460f      	mov	r7, r1
    f3d8:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
    f3da:	2b00      	cmp	r3, #0
    f3dc:	d061      	beq.n	f4a2 <ticker_cb+0xe6>
		p.ticks_at_expire = ticks_at_expire;
    f3de:	4e38      	ldr	r6, [pc, #224]	; (f4c0 <ticker_cb+0x104>)
		mfy.param = &p;
    f3e0:	4b38      	ldr	r3, [pc, #224]	; (f4c4 <ticker_cb+0x108>)
		p.ticks_at_expire = ticks_at_expire;
    f3e2:	f8c6 8000 	str.w	r8, [r6]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f3e6:	2200      	movs	r2, #0
	lll = &adv->lll;
    f3e8:	f104 0c1c 	add.w	ip, r4, #28
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f3ec:	4611      	mov	r1, r2
    f3ee:	2001      	movs	r0, #1
		mfy.param = &p;
    f3f0:	609e      	str	r6, [r3, #8]
		p.remainder = remainder;
    f3f2:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
    f3f4:	8135      	strh	r5, [r6, #8]
		p.param = lll;
    f3f6:	f8c6 c00c 	str.w	ip, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
    f3fa:	f7fb ffd9 	bl	b3b0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f3fe:	b938      	cbnz	r0, f410 <ticker_cb+0x54>
	if (!lll->is_hdcd)
    f400:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    f404:	f015 0501 	ands.w	r5, r5, #1
    f408:	d014      	beq.n	f434 <ticker_cb+0x78>
}
    f40a:	b00a      	add	sp, #40	; 0x28
    f40c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
    f410:	4a2d      	ldr	r2, [pc, #180]	; (f4c8 <ticker_cb+0x10c>)
    f412:	492e      	ldr	r1, [pc, #184]	; (f4cc <ticker_cb+0x110>)
    f414:	482e      	ldr	r0, [pc, #184]	; (f4d0 <ticker_cb+0x114>)
    f416:	f240 632f 	movw	r3, #1583	; 0x62f
    f41a:	f00a fcec 	bl	19df6 <printk>
    f41e:	4040      	eors	r0, r0
    f420:	f380 8811 	msr	BASEPRI, r0
    f424:	f04f 0003 	mov.w	r0, #3
    f428:	df02      	svc	2
	if (!lll->is_hdcd)
    f42a:	f894 5028 	ldrb.w	r5, [r4, #40]	; 0x28
    f42e:	f015 0501 	ands.w	r5, r5, #1
    f432:	d1ea      	bne.n	f40a <ticker_cb+0x4e>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
    f434:	2104      	movs	r1, #4
    f436:	a809      	add	r0, sp, #36	; 0x24
    f438:	f005 f8fc 	bl	14634 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f43c:	9809      	ldr	r0, [sp, #36]	; 0x24
    f43e:	4925      	ldr	r1, [pc, #148]	; (f4d4 <ticker_cb+0x118>)
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f440:	4a25      	ldr	r2, [pc, #148]	; (f4d8 <ticker_cb+0x11c>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f442:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f444:	fba1 3100 	umull	r3, r1, r1, r0
    f448:	1a43      	subs	r3, r0, r1
    f44a:	eb01 0353 	add.w	r3, r1, r3, lsr #1
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f44e:	1aa2      	subs	r2, r4, r2
    f450:	4c22      	ldr	r4, [pc, #136]	; (f4dc <ticker_cb+0x120>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f452:	9504      	str	r5, [sp, #16]
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f454:	f240 1147 	movw	r1, #327	; 0x147
    f458:	0a1b      	lsrs	r3, r3, #8
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f45a:	0952      	lsrs	r2, r2, #5
		random_delay %= ULL_ADV_RANDOM_DELAY;
    f45c:	fb01 0313 	mls	r3, r1, r3, r0
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f460:	fba4 1202 	umull	r1, r2, r4, r2
				    (TICKER_ID_ADV_BASE +
    f464:	3202      	adds	r2, #2
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f466:	491e      	ldr	r1, [pc, #120]	; (f4e0 <ticker_cb+0x124>)
    f468:	9105      	str	r1, [sp, #20]
		random_delay += 1;
    f46a:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f46c:	e9cd 5502 	strd	r5, r5, [sp, #8]
    f470:	e9cd 5500 	strd	r5, r5, [sp]
    f474:	4628      	mov	r0, r5
    f476:	b2d2      	uxtb	r2, r2
    f478:	2101      	movs	r1, #1
		random_delay += 1;
    f47a:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
    f47c:	f7fd fa1c 	bl	c8b8 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f480:	f030 0302 	bics.w	r3, r0, #2
    f484:	d0c1      	beq.n	f40a <ticker_cb+0x4e>
    f486:	4a10      	ldr	r2, [pc, #64]	; (f4c8 <ticker_cb+0x10c>)
    f488:	4916      	ldr	r1, [pc, #88]	; (f4e4 <ticker_cb+0x128>)
    f48a:	4811      	ldr	r0, [pc, #68]	; (f4d0 <ticker_cb+0x114>)
    f48c:	f240 6345 	movw	r3, #1605	; 0x645
    f490:	f00a fcb1 	bl	19df6 <printk>
    f494:	4040      	eors	r0, r0
    f496:	f380 8811 	msr	BASEPRI, r0
    f49a:	f04f 0003 	mov.w	r0, #3
    f49e:	df02      	svc	2
}
    f4a0:	e7b3      	b.n	f40a <ticker_cb+0x4e>
		LL_ASSERT(ref);
    f4a2:	4a09      	ldr	r2, [pc, #36]	; (f4c8 <ticker_cb+0x10c>)
    f4a4:	4910      	ldr	r1, [pc, #64]	; (f4e8 <ticker_cb+0x12c>)
    f4a6:	480a      	ldr	r0, [pc, #40]	; (f4d0 <ticker_cb+0x114>)
    f4a8:	f240 6323 	movw	r3, #1571	; 0x623
    f4ac:	f00a fca3 	bl	19df6 <printk>
    f4b0:	4040      	eors	r0, r0
    f4b2:	f380 8811 	msr	BASEPRI, r0
    f4b6:	f04f 0003 	mov.w	r0, #3
    f4ba:	df02      	svc	2
    f4bc:	e78f      	b.n	f3de <ticker_cb+0x22>
    f4be:	bf00      	nop
    f4c0:	20001f44 	.word	0x20001f44
    f4c4:	20000784 	.word	0x20000784
    f4c8:	0001ff24 	.word	0x0001ff24
    f4cc:	0001fe0c 	.word	0x0001fe0c
    f4d0:	0001fcdc 	.word	0x0001fcdc
    f4d4:	90d4f121 	.word	0x90d4f121
    f4d8:	20001e58 	.word	0x20001e58
    f4dc:	24924929 	.word	0x24924929
    f4e0:	0000f591 	.word	0x0000f591
    f4e4:	0001ff94 	.word	0x0001ff94
    f4e8:	0001ff90 	.word	0x0001ff90

0000f4ec <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
    f4ec:	2800      	cmp	r0, #0
    f4ee:	d132      	bne.n	f556 <ticker_op_stop_cb+0x6a>
{
    f4f0:	b538      	push	{r3, r4, r5, lr}
    f4f2:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
    f4f4:	4d1f      	ldr	r5, [pc, #124]	; (f574 <ticker_op_stop_cb+0x88>)
	return hdr->ref;
    f4f6:	7c09      	ldrb	r1, [r1, #16]
    f4f8:	f104 031c 	add.w	r3, r4, #28
    f4fc:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
    f4fe:	f001 02ff 	and.w	r2, r1, #255	; 0xff
    f502:	b1e1      	cbz	r1, f53e <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
    f504:	6962      	ldr	r2, [r4, #20]
    f506:	b16a      	cbz	r2, f524 <ticker_op_stop_cb+0x38>
    f508:	4a1b      	ldr	r2, [pc, #108]	; (f578 <ticker_op_stop_cb+0x8c>)
    f50a:	491c      	ldr	r1, [pc, #112]	; (f57c <ticker_op_stop_cb+0x90>)
    f50c:	481c      	ldr	r0, [pc, #112]	; (f580 <ticker_op_stop_cb+0x94>)
    f50e:	f240 6396 	movw	r3, #1686	; 0x696
    f512:	f00a fc70 	bl	19df6 <printk>
    f516:	4040      	eors	r0, r0
    f518:	f380 8811 	msr	BASEPRI, r0
    f51c:	f04f 0003 	mov.w	r0, #3
    f520:	df02      	svc	2
    f522:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
    f524:	4917      	ldr	r1, [pc, #92]	; (f584 <ticker_op_stop_cb+0x98>)
		mfy.fp = lll_disable;
    f526:	4818      	ldr	r0, [pc, #96]	; (f588 <ticker_op_stop_cb+0x9c>)
		hdr->disabled_param = mfy.param;
    f528:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f52a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
    f52c:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
    f52e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f530:	4b10      	ldr	r3, [pc, #64]	; (f574 <ticker_op_stop_cb+0x88>)
    f532:	4611      	mov	r1, r2
    f534:	2002      	movs	r0, #2
    f536:	f7fb ff3b 	bl	b3b0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f53a:	b968      	cbnz	r0, f558 <ticker_op_stop_cb+0x6c>
}
    f53c:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
    f53e:	4b11      	ldr	r3, [pc, #68]	; (f584 <ticker_op_stop_cb+0x98>)
    f540:	60eb      	str	r3, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
    f542:	2101      	movs	r1, #1
    f544:	462b      	mov	r3, r5
    f546:	2002      	movs	r0, #2
    f548:	f7fb ff32 	bl	b3b0 <mayfly_enqueue>
		LL_ASSERT(!ret);
    f54c:	2800      	cmp	r0, #0
    f54e:	d0f5      	beq.n	f53c <ticker_op_stop_cb+0x50>
    f550:	f240 63a2 	movw	r3, #1698	; 0x6a2
    f554:	e002      	b.n	f55c <ticker_op_stop_cb+0x70>
    f556:	4770      	bx	lr
		LL_ASSERT(!ret);
    f558:	f240 639d 	movw	r3, #1693	; 0x69d
		LL_ASSERT(!ret);
    f55c:	4a06      	ldr	r2, [pc, #24]	; (f578 <ticker_op_stop_cb+0x8c>)
    f55e:	490b      	ldr	r1, [pc, #44]	; (f58c <ticker_op_stop_cb+0xa0>)
    f560:	4807      	ldr	r0, [pc, #28]	; (f580 <ticker_op_stop_cb+0x94>)
    f562:	f00a fc48 	bl	19df6 <printk>
    f566:	4040      	eors	r0, r0
    f568:	f380 8811 	msr	BASEPRI, r0
    f56c:	f04f 0003 	mov.w	r0, #3
    f570:	df02      	svc	2
}
    f572:	bd38      	pop	{r3, r4, r5, pc}
    f574:	20000794 	.word	0x20000794
    f578:	0001ff24 	.word	0x0001ff24
    f57c:	0001ffb0 	.word	0x0001ffb0
    f580:	0001fcdc 	.word	0x0001fcdc
    f584:	0000f319 	.word	0x0000f319
    f588:	000146a1 	.word	0x000146a1
    f58c:	0001fe0c 	.word	0x0001fe0c

0000f590 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    f590:	b900      	cbnz	r0, f594 <ticker_op_update_cb+0x4>
    f592:	4770      	bx	lr
{
    f594:	b510      	push	{r4, lr}
    f596:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    f598:	f7ff fd6a 	bl	f070 <ull_disable_mark_get>
    f59c:	4284      	cmp	r4, r0
    f59e:	d00c      	beq.n	f5ba <ticker_op_update_cb+0x2a>
    f5a0:	4a06      	ldr	r2, [pc, #24]	; (f5bc <ticker_op_update_cb+0x2c>)
    f5a2:	4907      	ldr	r1, [pc, #28]	; (f5c0 <ticker_op_update_cb+0x30>)
    f5a4:	4807      	ldr	r0, [pc, #28]	; (f5c4 <ticker_op_update_cb+0x34>)
    f5a6:	f240 6366 	movw	r3, #1638	; 0x666
    f5aa:	f00a fc24 	bl	19df6 <printk>
    f5ae:	4040      	eors	r0, r0
    f5b0:	f380 8811 	msr	BASEPRI, r0
    f5b4:	f04f 0003 	mov.w	r0, #3
    f5b8:	df02      	svc	2
}
    f5ba:	bd10      	pop	{r4, pc}
    f5bc:	0001ff24 	.word	0x0001ff24
    f5c0:	0001ffc4 	.word	0x0001ffc4
    f5c4:	0001fcdc 	.word	0x0001fcdc

0000f5c8 <ticker_stop_cb>:
{
    f5c8:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f5ca:	4c19      	ldr	r4, [pc, #100]	; (f630 <ticker_stop_cb+0x68>)
    f5cc:	4a19      	ldr	r2, [pc, #100]	; (f634 <ticker_stop_cb+0x6c>)
    f5ce:	1b1c      	subs	r4, r3, r4
    f5d0:	0964      	lsrs	r4, r4, #5
{
    f5d2:	461d      	mov	r5, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f5d4:	fba2 3404 	umull	r3, r4, r2, r4
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    f5d8:	f014 0fff 	tst.w	r4, #255	; 0xff
{
    f5dc:	b083      	sub	sp, #12
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    f5de:	d119      	bne.n	f614 <ticker_stop_cb+0x4c>
			  TICKER_ID_ADV_BASE + handle,
    f5e0:	1ca2      	adds	r2, r4, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    f5e2:	4b15      	ldr	r3, [pc, #84]	; (f638 <ticker_stop_cb+0x70>)
    f5e4:	9500      	str	r5, [sp, #0]
    f5e6:	b2d2      	uxtb	r2, r2
    f5e8:	2101      	movs	r1, #1
    f5ea:	2000      	movs	r0, #0
    f5ec:	f7fd f9b4 	bl	c958 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
    f5f0:	f030 0302 	bics.w	r3, r0, #2
    f5f4:	d00c      	beq.n	f610 <ticker_stop_cb+0x48>
    f5f6:	4a11      	ldr	r2, [pc, #68]	; (f63c <ticker_stop_cb+0x74>)
    f5f8:	4911      	ldr	r1, [pc, #68]	; (f640 <ticker_stop_cb+0x78>)
    f5fa:	4812      	ldr	r0, [pc, #72]	; (f644 <ticker_stop_cb+0x7c>)
    f5fc:	f44f 63cf 	mov.w	r3, #1656	; 0x678
    f600:	f00a fbf9 	bl	19df6 <printk>
    f604:	4040      	eors	r0, r0
    f606:	f380 8811 	msr	BASEPRI, r0
    f60a:	f04f 0003 	mov.w	r0, #3
    f60e:	df02      	svc	2
}
    f610:	b003      	add	sp, #12
    f612:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
    f614:	4a09      	ldr	r2, [pc, #36]	; (f63c <ticker_stop_cb+0x74>)
    f616:	490c      	ldr	r1, [pc, #48]	; (f648 <ticker_stop_cb+0x80>)
    f618:	480a      	ldr	r0, [pc, #40]	; (f644 <ticker_stop_cb+0x7c>)
    f61a:	f240 6373 	movw	r3, #1651	; 0x673
    f61e:	f00a fbea 	bl	19df6 <printk>
    f622:	4040      	eors	r0, r0
    f624:	f380 8811 	msr	BASEPRI, r0
    f628:	f04f 0003 	mov.w	r0, #3
    f62c:	df02      	svc	2
    f62e:	e7d7      	b.n	f5e0 <ticker_stop_cb+0x18>
    f630:	20001e58 	.word	0x20001e58
    f634:	24924929 	.word	0x24924929
    f638:	0000f4ed 	.word	0x0000f4ed
    f63c:	0001ff24 	.word	0x0001ff24
    f640:	0001ff94 	.word	0x0001ff94
    f644:	0001fcdc 	.word	0x0001fcdc
    f648:	0001fff4 	.word	0x0001fff4

0000f64c <conn_release.constprop.0>:
static void conn_release(struct ll_adv_set *adv)
    f64c:	b570      	push	{r4, r5, r6, lr}
	struct lll_conn *lll = adv->lll.conn;
    f64e:	4c1d      	ldr	r4, [pc, #116]	; (f6c4 <conn_release.constprop.0+0x78>)
    f650:	6a65      	ldr	r5, [r4, #36]	; 0x24
	LL_ASSERT(!lll->link_tx_free);
    f652:	6deb      	ldr	r3, [r5, #92]	; 0x5c
    f654:	b163      	cbz	r3, f670 <conn_release.constprop.0+0x24>
    f656:	4a1c      	ldr	r2, [pc, #112]	; (f6c8 <conn_release.constprop.0+0x7c>)
    f658:	491c      	ldr	r1, [pc, #112]	; (f6cc <conn_release.constprop.0+0x80>)
    f65a:	481d      	ldr	r0, [pc, #116]	; (f6d0 <conn_release.constprop.0+0x84>)
    f65c:	f240 63cb 	movw	r3, #1739	; 0x6cb
    f660:	f00a fbc9 	bl	19df6 <printk>
    f664:	4040      	eors	r0, r0
    f666:	f380 8811 	msr	BASEPRI, r0
    f66a:	f04f 0003 	mov.w	r0, #3
    f66e:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
    f670:	f105 0150 	add.w	r1, r5, #80	; 0x50
    f674:	f105 004c 	add.w	r0, r5, #76	; 0x4c
    f678:	f7fb fe1c 	bl	b2b4 <memq_deinit>
	LL_ASSERT(link);
    f67c:	4606      	mov	r6, r0
    f67e:	b190      	cbz	r0, f6a6 <conn_release.constprop.0+0x5a>
	ll_conn_release(lll->hdr.parent);
    f680:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
    f682:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
    f684:	f000 fe48 	bl	10318 <ll_conn_release>
	adv->lll.conn = NULL;
    f688:	2500      	movs	r5, #0
	ll_rx_release(adv->node_rx_cc_free);
    f68a:	f8d4 00d0 	ldr.w	r0, [r4, #208]	; 0xd0
	adv->lll.conn = NULL;
    f68e:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
    f690:	f7ff fc2c 	bl	eeec <ll_rx_release>
	ll_rx_link_release(adv->link_cc_free);
    f694:	f8d4 00cc 	ldr.w	r0, [r4, #204]	; 0xcc
	adv->node_rx_cc_free = NULL;
    f698:	f8c4 50d0 	str.w	r5, [r4, #208]	; 0xd0
	ll_rx_link_release(adv->link_cc_free);
    f69c:	f7ff fc1a 	bl	eed4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
    f6a0:	f8c4 50cc 	str.w	r5, [r4, #204]	; 0xcc
}
    f6a4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
    f6a6:	4a08      	ldr	r2, [pc, #32]	; (f6c8 <conn_release.constprop.0+0x7c>)
    f6a8:	490a      	ldr	r1, [pc, #40]	; (f6d4 <conn_release.constprop.0+0x88>)
    f6aa:	4809      	ldr	r0, [pc, #36]	; (f6d0 <conn_release.constprop.0+0x84>)
    f6ac:	f240 63cd 	movw	r3, #1741	; 0x6cd
    f6b0:	f00a fba1 	bl	19df6 <printk>
    f6b4:	4040      	eors	r0, r0
    f6b6:	f380 8811 	msr	BASEPRI, r0
    f6ba:	f04f 0003 	mov.w	r0, #3
    f6be:	df02      	svc	2
    f6c0:	e7de      	b.n	f680 <conn_release.constprop.0+0x34>
    f6c2:	bf00      	nop
    f6c4:	20001e58 	.word	0x20001e58
    f6c8:	0001ff24 	.word	0x0001ff24
    f6cc:	00020000 	.word	0x00020000
    f6d0:	0001fcdc 	.word	0x0001fcdc
    f6d4:	00020078 	.word	0x00020078

0000f6d8 <ll_adv_params_set>:
{
    f6d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f6dc:	4d4f      	ldr	r5, [pc, #316]	; (f81c <ll_adv_params_set+0x144>)
	if (!adv || adv->is_enabled) {
    f6de:	4c50      	ldr	r4, [pc, #320]	; (f820 <ll_adv_params_set+0x148>)
{
    f6e0:	4686      	mov	lr, r0
	if (!adv || adv->is_enabled) {
    f6e2:	f894 70d6 	ldrb.w	r7, [r4, #214]	; 0xd6
{
    f6e6:	468c      	mov	ip, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f6e8:	e895 0003 	ldmia.w	r5, {r0, r1}
{
    f6ec:	b083      	sub	sp, #12
	if (!adv || adv->is_enabled) {
    f6ee:	f017 0701 	ands.w	r7, r7, #1
{
    f6f2:	4699      	mov	r9, r3
    f6f4:	f89d 602c 	ldrb.w	r6, [sp, #44]	; 0x2c
    f6f8:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
    f6fc:	9000      	str	r0, [sp, #0]
    f6fe:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
    f702:	d173      	bne.n	f7ec <ll_adv_params_set+0x114>
    f704:	f894 002c 	ldrb.w	r0, [r4, #44]	; 0x2c
	adv->lll.chan_map = chan_map;
    f708:	8d21      	ldrh	r1, [r4, #40]	; 0x28
    f70a:	4615      	mov	r5, r2
    f70c:	f04f 0827 	mov.w	r8, #39	; 0x27
    f710:	222d      	movs	r2, #45	; 0x2d
    f712:	fb18 2800 	smlabb	r8, r8, r0, r2
	pdu->type = pdu_adv_type[adv_type];
    f716:	aa02      	add	r2, sp, #8
    f718:	4462      	add	r2, ip
    f71a:	f814 0008 	ldrb.w	r0, [r4, r8]
    f71e:	f812 2c08 	ldrb.w	r2, [r2, #-8]
	adv->lll.chan_map = chan_map;
    f722:	f006 0607 	and.w	r6, r6, #7
		adv->interval = 0;
    f726:	f1bc 0f01 	cmp.w	ip, #1
	adv->lll.chan_map = chan_map;
    f72a:	f003 0303 	and.w	r3, r3, #3
    f72e:	ea4f 0646 	mov.w	r6, r6, lsl #1
	pdu->type = pdu_adv_type[adv_type];
    f732:	f020 001f 	bic.w	r0, r0, #31
		adv->interval = 0;
    f736:	bf08      	it	eq
    f738:	f04f 0e00 	moveq.w	lr, #0
	adv->lll.chan_map = chan_map;
    f73c:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    f740:	f012 0f0e 	tst.w	r2, #14
	adv->own_addr_type = own_addr_type;
    f744:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    f748:	f8a4 e0d4 	strh.w	lr, [r4, #212]	; 0xd4
	pdu->type = pdu_adv_type[adv_type];
    f74c:	f002 020f 	and.w	r2, r2, #15
	adv->lll.chan_map = chan_map;
    f750:	f421 7143 	bic.w	r1, r1, #780	; 0x30c
    f754:	ea42 0200 	orr.w	r2, r2, r0
    f758:	f021 0102 	bic.w	r1, r1, #2
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
    f75c:	bf0c      	ite	eq
    f75e:	2001      	moveq	r0, #1
    f760:	2000      	movne	r0, #0
	adv->own_addr_type = own_addr_type;
    f762:	f365 0342 	bfi	r3, r5, #1, #2
    f766:	f360 1245 	bfi	r2, r0, #5, #1
	adv->lll.chan_map = chan_map;
    f76a:	430e      	orrs	r6, r1
    f76c:	8526      	strh	r6, [r4, #40]	; 0x28
    f76e:	f804 2008 	strb.w	r2, [r4, r8]
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    f772:	b2da      	uxtb	r2, r3
	adv->own_addr_type = own_addr_type;
    f774:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    f778:	075b      	lsls	r3, r3, #29
    f77a:	eb04 0608 	add.w	r6, r4, r8
    f77e:	d50a      	bpl.n	f796 <ll_adv_params_set+0xbe>
		adv->id_addr_type = direct_addr_type;
    f780:	4613      	mov	r3, r2
    f782:	f369 03c3 	bfi	r3, r9, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    f786:	990a      	ldr	r1, [sp, #40]	; 0x28
		adv->id_addr_type = direct_addr_type;
    f788:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
    f78c:	2206      	movs	r2, #6
    f78e:	f104 00d7 	add.w	r0, r4, #215	; 0xd7
    f792:	f00c f94a 	bl	1ba2a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
    f796:	f814 1008 	ldrb.w	r1, [r4, r8]
    f79a:	f001 030f 	and.w	r3, r1, #15
    f79e:	2b01      	cmp	r3, #1
    f7a0:	d029      	beq.n	f7f6 <ll_adv_params_set+0x11e>
	} else if (pdu->len == 0) {
    f7a2:	7873      	ldrb	r3, [r6, #1]
		pdu->tx_addr = own_addr_type & 0x1;
    f7a4:	f005 0501 	and.w	r5, r5, #1
    f7a8:	f365 1186 	bfi	r1, r5, #6, #1
	} else if (pdu->len == 0) {
    f7ac:	b1bb      	cbz	r3, f7de <ll_adv_params_set+0x106>
		pdu->rx_addr = 0;
    f7ae:	f36f 11c7 	bfc	r1, #7, #1
    f7b2:	f804 1008 	strb.w	r1, [r4, r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    f7b6:	f894 107c 	ldrb.w	r1, [r4, #124]	; 0x7c
    f7ba:	2327      	movs	r3, #39	; 0x27
    f7bc:	227d      	movs	r2, #125	; 0x7d
    f7be:	fb13 2301 	smlabb	r3, r3, r1, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    f7c2:	01ad      	lsls	r5, r5, #6
    f7c4:	f045 0504 	orr.w	r5, r5, #4
    f7c8:	54e5      	strb	r5, [r4, r3]
    f7ca:	441c      	add	r4, r3
	if (pdu->len == 0) {
    f7cc:	7863      	ldrb	r3, [r4, #1]
    f7ce:	b913      	cbnz	r3, f7d6 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
    f7d0:	2206      	movs	r2, #6
	return 0;
    f7d2:	461f      	mov	r7, r3
		pdu->len = BDADDR_SIZE;
    f7d4:	7062      	strb	r2, [r4, #1]
}
    f7d6:	4638      	mov	r0, r7
    f7d8:	b003      	add	sp, #12
    f7da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->rx_addr = 0;
    f7de:	f363 11c7 	bfi	r1, r3, #7, #1
		pdu->len = BDADDR_SIZE;
    f7e2:	2306      	movs	r3, #6
		pdu->rx_addr = 0;
    f7e4:	f804 1008 	strb.w	r1, [r4, r8]
		pdu->len = BDADDR_SIZE;
    f7e8:	7073      	strb	r3, [r6, #1]
    f7ea:	e7e4      	b.n	f7b6 <ll_adv_params_set+0xde>
		return BT_HCI_ERR_CMD_DISALLOWED;
    f7ec:	270c      	movs	r7, #12
}
    f7ee:	4638      	mov	r0, r7
    f7f0:	b003      	add	sp, #12
    f7f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = own_addr_type & 0x1;
    f7f6:	f005 0501 	and.w	r5, r5, #1
    f7fa:	f365 1186 	bfi	r1, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
    f7fe:	4608      	mov	r0, r1
    f800:	f369 10c7 	bfi	r0, r9, #7, #1
    f804:	f804 0008 	strb.w	r0, [r4, r8]
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
    f808:	990a      	ldr	r1, [sp, #40]	; 0x28
    f80a:	2206      	movs	r2, #6
    f80c:	f106 0008 	add.w	r0, r6, #8
    f810:	f00c f90b 	bl	1ba2a <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
    f814:	230c      	movs	r3, #12
    f816:	7073      	strb	r3, [r6, #1]
    f818:	e7cd      	b.n	f7b6 <ll_adv_params_set+0xde>
    f81a:	bf00      	nop
    f81c:	0001f694 	.word	0x0001f694
    f820:	20001e58 	.word	0x20001e58

0000f824 <ull_adv_init>:
	ll_adv[0].lll.tx_pwr_lvl = RADIO_TXP_DEFAULT;
    f824:	4b02      	ldr	r3, [pc, #8]	; (f830 <ull_adv_init+0xc>)
    f826:	2000      	movs	r0, #0
    f828:	f883 00cb 	strb.w	r0, [r3, #203]	; 0xcb
}
    f82c:	4770      	bx	lr
    f82e:	bf00      	nop
    f830:	20001e58 	.word	0x20001e58

0000f834 <ull_adv_reset>:
{
    f834:	b530      	push	{r4, r5, lr}
	if (!adv || !adv->is_enabled) {
    f836:	4c48      	ldr	r4, [pc, #288]	; (f958 <ull_adv_reset+0x124>)
    f838:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    f83c:	07da      	lsls	r2, r3, #31
{
    f83e:	b085      	sub	sp, #20
	if (!adv || !adv->is_enabled) {
    f840:	d544      	bpl.n	f8cc <ull_adv_reset+0x98>
	mark = ull_disable_mark(adv);
    f842:	4620      	mov	r0, r4
    f844:	f7ff fbfc 	bl	f040 <ull_disable_mark>
	LL_ASSERT(mark == adv);
    f848:	4284      	cmp	r4, r0
    f84a:	d00c      	beq.n	f866 <ull_adv_reset+0x32>
    f84c:	4a43      	ldr	r2, [pc, #268]	; (f95c <ull_adv_reset+0x128>)
    f84e:	4944      	ldr	r1, [pc, #272]	; (f960 <ull_adv_reset+0x12c>)
    f850:	4844      	ldr	r0, [pc, #272]	; (f964 <ull_adv_reset+0x130>)
    f852:	f44f 63e4 	mov.w	r3, #1824	; 0x720
    f856:	f00a face 	bl	19df6 <printk>
    f85a:	4040      	eors	r0, r0
    f85c:	f380 8811 	msr	BASEPRI, r0
    f860:	f04f 0003 	mov.w	r0, #3
    f864:	df02      	svc	2
	if (adv->lll.is_hdcd) {
    f866:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
    f86a:	07db      	lsls	r3, r3, #31
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    f86c:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
    f86e:	d432      	bmi.n	f8d6 <ull_adv_reset+0xa2>
	ret_cb = TICKER_STATUS_BUSY;
    f870:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f872:	2103      	movs	r1, #3
    f874:	4b3c      	ldr	r3, [pc, #240]	; (f968 <ull_adv_reset+0x134>)
    f876:	9500      	str	r5, [sp, #0]
    f878:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
    f87a:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
    f87c:	f7fd f86c 	bl	c958 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
    f880:	4629      	mov	r1, r5
    f882:	f7ff fbb5 	bl	eff0 <ull_ticker_status_take>
	if (ret) {
    f886:	2800      	cmp	r0, #0
    f888:	d14e      	bne.n	f928 <ull_adv_reset+0xf4>
	ret = ull_disable(&adv->lll);
    f88a:	4838      	ldr	r0, [pc, #224]	; (f96c <ull_adv_reset+0x138>)
    f88c:	f7ff fc14 	bl	f0b8 <ull_disable>
	LL_ASSERT(!ret);
    f890:	2800      	cmp	r0, #0
    f892:	d136      	bne.n	f902 <ull_adv_reset+0xce>
	mark = ull_disable_unmark(adv);
    f894:	4830      	ldr	r0, [pc, #192]	; (f958 <ull_adv_reset+0x124>)
    f896:	f7ff fbdf 	bl	f058 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    f89a:	4284      	cmp	r4, r0
    f89c:	d00c      	beq.n	f8b8 <ull_adv_reset+0x84>
    f89e:	4a2f      	ldr	r2, [pc, #188]	; (f95c <ull_adv_reset+0x128>)
    f8a0:	492f      	ldr	r1, [pc, #188]	; (f960 <ull_adv_reset+0x12c>)
    f8a2:	4830      	ldr	r0, [pc, #192]	; (f964 <ull_adv_reset+0x130>)
    f8a4:	f240 7342 	movw	r3, #1858	; 0x742
    f8a8:	f00a faa5 	bl	19df6 <printk>
    f8ac:	4040      	eors	r0, r0
    f8ae:	f380 8811 	msr	BASEPRI, r0
    f8b2:	f04f 0003 	mov.w	r0, #3
    f8b6:	df02      	svc	2
	if (adv->lll.conn) {
    f8b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
    f8ba:	b10b      	cbz	r3, f8c0 <ull_adv_reset+0x8c>
		conn_release(adv);
    f8bc:	f7ff fec6 	bl	f64c <conn_release.constprop.0>
	adv->is_enabled = 0U;
    f8c0:	f894 30d6 	ldrb.w	r3, [r4, #214]	; 0xd6
    f8c4:	f36f 0300 	bfc	r3, #0, #1
    f8c8:	f884 30d6 	strb.w	r3, [r4, #214]	; 0xd6
	ll_adv[0].lll.tx_pwr_lvl = RADIO_TXP_DEFAULT;
    f8cc:	2000      	movs	r0, #0
    f8ce:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
}
    f8d2:	b005      	add	sp, #20
    f8d4:	bd30      	pop	{r4, r5, pc}
		ret_cb = TICKER_STATUS_BUSY;
    f8d6:	2202      	movs	r2, #2
    f8d8:	9203      	str	r2, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    f8da:	2103      	movs	r1, #3
    f8dc:	4b22      	ldr	r3, [pc, #136]	; (f968 <ull_adv_reset+0x134>)
    f8de:	9500      	str	r5, [sp, #0]
    f8e0:	2201      	movs	r2, #1
    f8e2:	2000      	movs	r0, #0
    f8e4:	f7fd f838 	bl	c958 <ticker_stop>
		ret = ull_ticker_status_take(ret, &ret_cb);
    f8e8:	4629      	mov	r1, r5
    f8ea:	f7ff fb81 	bl	eff0 <ull_ticker_status_take>
		if (ret) {
    f8ee:	2800      	cmp	r0, #0
    f8f0:	d0be      	beq.n	f870 <ull_adv_reset+0x3c>
			mark = ull_disable_unmark(adv);
    f8f2:	4819      	ldr	r0, [pc, #100]	; (f958 <ull_adv_reset+0x124>)
    f8f4:	f7ff fbb0 	bl	f058 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
    f8f8:	4284      	cmp	r4, r0
    f8fa:	d0e7      	beq.n	f8cc <ull_adv_reset+0x98>
    f8fc:	f240 732b 	movw	r3, #1835	; 0x72b
    f900:	e019      	b.n	f936 <ull_adv_reset+0x102>
	LL_ASSERT(!ret);
    f902:	4a16      	ldr	r2, [pc, #88]	; (f95c <ull_adv_reset+0x128>)
    f904:	491a      	ldr	r1, [pc, #104]	; (f970 <ull_adv_reset+0x13c>)
    f906:	4817      	ldr	r0, [pc, #92]	; (f964 <ull_adv_reset+0x130>)
    f908:	f240 733f 	movw	r3, #1855	; 0x73f
    f90c:	f00a fa73 	bl	19df6 <printk>
    f910:	4040      	eors	r0, r0
    f912:	f380 8811 	msr	BASEPRI, r0
    f916:	f04f 0003 	mov.w	r0, #3
    f91a:	df02      	svc	2
	mark = ull_disable_unmark(adv);
    f91c:	480e      	ldr	r0, [pc, #56]	; (f958 <ull_adv_reset+0x124>)
    f91e:	f7ff fb9b 	bl	f058 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
    f922:	4284      	cmp	r4, r0
    f924:	d1bb      	bne.n	f89e <ull_adv_reset+0x6a>
    f926:	e7c7      	b.n	f8b8 <ull_adv_reset+0x84>
		mark = ull_disable_unmark(adv);
    f928:	480b      	ldr	r0, [pc, #44]	; (f958 <ull_adv_reset+0x124>)
    f92a:	f7ff fb95 	bl	f058 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
    f92e:	4284      	cmp	r4, r0
    f930:	d0cc      	beq.n	f8cc <ull_adv_reset+0x98>
    f932:	f240 7339 	movw	r3, #1849	; 0x739
    f936:	4a09      	ldr	r2, [pc, #36]	; (f95c <ull_adv_reset+0x128>)
    f938:	4909      	ldr	r1, [pc, #36]	; (f960 <ull_adv_reset+0x12c>)
    f93a:	480a      	ldr	r0, [pc, #40]	; (f964 <ull_adv_reset+0x130>)
    f93c:	f00a fa5b 	bl	19df6 <printk>
    f940:	4040      	eors	r0, r0
    f942:	f380 8811 	msr	BASEPRI, r0
    f946:	f04f 0003 	mov.w	r0, #3
    f94a:	df02      	svc	2
	ll_adv[0].lll.tx_pwr_lvl = RADIO_TXP_DEFAULT;
    f94c:	2000      	movs	r0, #0
    f94e:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
}
    f952:	b005      	add	sp, #20
    f954:	bd30      	pop	{r4, r5, pc}
    f956:	bf00      	nop
    f958:	20001e58 	.word	0x20001e58
    f95c:	0001ff24 	.word	0x0001ff24
    f960:	00020014 	.word	0x00020014
    f964:	0001fcdc 	.word	0x0001fcdc
    f968:	0000efe5 	.word	0x0000efe5
    f96c:	20001e74 	.word	0x20001e74
    f970:	0001fe0c 	.word	0x0001fe0c

0000f974 <ull_adv_set_get>:
		return NULL;
    f974:	4b02      	ldr	r3, [pc, #8]	; (f980 <ull_adv_set_get+0xc>)
	if (handle >= BT_CTLR_ADV_SET) {
    f976:	2800      	cmp	r0, #0
}
    f978:	bf0c      	ite	eq
    f97a:	4618      	moveq	r0, r3
    f97c:	2000      	movne	r0, #0
    f97e:	4770      	bx	lr
    f980:	20001e58 	.word	0x20001e58

0000f984 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f984:	4a03      	ldr	r2, [pc, #12]	; (f994 <ull_adv_handle_get+0x10>)
    f986:	4b04      	ldr	r3, [pc, #16]	; (f998 <ull_adv_handle_get+0x14>)
    f988:	1a80      	subs	r0, r0, r2
    f98a:	0940      	lsrs	r0, r0, #5
    f98c:	fba3 3000 	umull	r3, r0, r3, r0
}
    f990:	b280      	uxth	r0, r0
    f992:	4770      	bx	lr
    f994:	20001e58 	.word	0x20001e58
    f998:	24924929 	.word	0x24924929

0000f99c <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
    f99c:	4a04      	ldr	r2, [pc, #16]	; (f9b0 <ull_adv_lll_handle_get+0x14>)
    f99e:	6800      	ldr	r0, [r0, #0]
    f9a0:	4b04      	ldr	r3, [pc, #16]	; (f9b4 <ull_adv_lll_handle_get+0x18>)
    f9a2:	1a80      	subs	r0, r0, r2
    f9a4:	0940      	lsrs	r0, r0, #5
    f9a6:	fba3 3000 	umull	r3, r0, r3, r0
}
    f9aa:	b280      	uxth	r0, r0
    f9ac:	4770      	bx	lr
    f9ae:	bf00      	nop
    f9b0:	20001e58 	.word	0x20001e58
    f9b4:	24924929 	.word	0x24924929

0000f9b8 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    f9b8:	b938      	cbnz	r0, f9ca <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
    f9ba:	4805      	ldr	r0, [pc, #20]	; (f9d0 <ull_adv_is_enabled_get+0x18>)
    f9bc:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
	return &ll_adv[handle];
    f9c0:	f013 0f01 	tst.w	r3, #1
    f9c4:	bf08      	it	eq
    f9c6:	2000      	moveq	r0, #0
    f9c8:	4770      	bx	lr
		return NULL;
    f9ca:	2000      	movs	r0, #0
}
    f9cc:	4770      	bx	lr
    f9ce:	bf00      	nop
    f9d0:	20001e58 	.word	0x20001e58

0000f9d4 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
    f9d4:	b928      	cbnz	r0, f9e2 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
    f9d6:	4b04      	ldr	r3, [pc, #16]	; (f9e8 <ull_adv_is_enabled+0x14>)
    f9d8:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
    f9dc:	f000 0001 	and.w	r0, r0, #1
    f9e0:	4770      	bx	lr
    f9e2:	2000      	movs	r0, #0
}
    f9e4:	4770      	bx	lr
    f9e6:	bf00      	nop
    f9e8:	20001e58 	.word	0x20001e58

0000f9ec <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
    f9ec:	b950      	cbnz	r0, fa04 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
    f9ee:	4b06      	ldr	r3, [pc, #24]	; (fa08 <ull_adv_filter_pol_get+0x1c>)
    f9f0:	f893 00d6 	ldrb.w	r0, [r3, #214]	; 0xd6
    f9f4:	f010 0001 	ands.w	r0, r0, #1
    f9f8:	d005      	beq.n	fa06 <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
    f9fa:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
    f9fe:	f000 0003 	and.w	r0, r0, #3
    fa02:	4770      	bx	lr
		return 0;
    fa04:	2000      	movs	r0, #0
}
    fa06:	4770      	bx	lr
    fa08:	20001e58 	.word	0x20001e58

0000fa0c <ull_adv_data_set>:
{
    fa0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    fa10:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
    fa14:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    fa18:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
    fa1c:	f100 0c1c 	add.w	ip, r0, #28
    fa20:	f103 0611 	add.w	r6, r3, #17
    fa24:	4605      	mov	r5, r0
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    fa26:	f81c 0006 	ldrb.w	r0, [ip, r6]
    fa2a:	f000 0e0f 	and.w	lr, r0, #15
    fa2e:	f1be 0f01 	cmp.w	lr, #1
{
    fa32:	460f      	mov	r7, r1
    fa34:	eb0c 0106 	add.w	r1, ip, r6
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
    fa38:	d038      	beq.n	faac <ull_adv_data_set+0xa0>
    fa3a:	4690      	mov	r8, r2
	first = pdu->first;
    fa3c:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
	if (first == last) {
    fa40:	4294      	cmp	r4, r2
	first = pdu->first;
    fa42:	fa5f fe82 	uxtb.w	lr, r2
	if (first == last) {
    fa46:	d034      	beq.n	fab2 <ull_adv_data_set+0xa6>
		pdu->last = first;
    fa48:	f885 e02c 	strb.w	lr, [r5, #44]	; 0x2c
    fa4c:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
    fa50:	f895 202b 	ldrb.w	r2, [r5, #43]	; 0x2b
		if (first_latest != first) {
    fa54:	4596      	cmp	lr, r2
    fa56:	d033      	beq.n	fac0 <ull_adv_data_set+0xb4>
			last++;
    fa58:	3401      	adds	r4, #1
    fa5a:	b2e4      	uxtb	r4, r4
			if (last == DOUBLE_BUFFER_SIZE) {
    fa5c:	2c02      	cmp	r4, #2
    fa5e:	f81c 0006 	ldrb.w	r0, [ip, r6]
    fa62:	d02a      	beq.n	faba <ull_adv_data_set+0xae>
    fa64:	2227      	movs	r2, #39	; 0x27
    fa66:	2302      	movs	r3, #2
    fa68:	fb12 3304 	smlabb	r3, r2, r4, r3
		pdu->chan_sel = prev->chan_sel;
    fa6c:	f3c0 1240 	ubfx	r2, r0, #5, #1
	pdu->type = prev->type;
    fa70:	f3c0 0603 	ubfx	r6, r0, #0, #4
    fa74:	ea46 1642 	orr.w	r6, r6, r2, lsl #5
	pdu->tx_addr = prev->tx_addr;
    fa78:	f3c0 1280 	ubfx	r2, r0, #6, #1
	pdu->type = prev->type;
    fa7c:	ea46 1682 	orr.w	r6, r6, r2, lsl #6
    fa80:	f000 0080 	and.w	r0, r0, #128	; 0x80
	return (void *)pdu->pdu[last];
    fa84:	f105 022b 	add.w	r2, r5, #43	; 0x2b
    fa88:	4330      	orrs	r0, r6
    fa8a:	18d6      	adds	r6, r2, r3
    fa8c:	54d0      	strb	r0, [r2, r3]
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
    fa8e:	3102      	adds	r1, #2
    fa90:	2206      	movs	r2, #6
    fa92:	1cb0      	adds	r0, r6, #2
    fa94:	f00b ffc9 	bl	1ba2a <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
    fa98:	463a      	mov	r2, r7
    fa9a:	4641      	mov	r1, r8
    fa9c:	f106 0008 	add.w	r0, r6, #8
	pdu->len = BDADDR_SIZE + len;
    faa0:	3706      	adds	r7, #6
	memcpy(&pdu->adv_ind.data[0], data, len);
    faa2:	f00b ffc2 	bl	1ba2a <memcpy>
	pdu->len = BDADDR_SIZE + len;
    faa6:	7077      	strb	r7, [r6, #1]
	pdu->last = idx;
    faa8:	f885 402c 	strb.w	r4, [r5, #44]	; 0x2c
}
    faac:	2000      	movs	r0, #0
    faae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last++;
    fab2:	3401      	adds	r4, #1
    fab4:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
    fab6:	2c02      	cmp	r4, #2
    fab8:	d1d4      	bne.n	fa64 <ull_adv_data_set+0x58>
{
    faba:	2302      	movs	r3, #2
			last = 0U;
    fabc:	2400      	movs	r4, #0
    fabe:	e7d5      	b.n	fa6c <ull_adv_data_set+0x60>
    fac0:	f81c 0006 	ldrb.w	r0, [ip, r6]
    fac4:	3302      	adds	r3, #2
    fac6:	e7d1      	b.n	fa6c <ull_adv_data_set+0x60>

0000fac8 <ll_adv_data_set>:
{
    fac8:	460a      	mov	r2, r1
	return ull_adv_data_set(adv, len, data);
    faca:	4601      	mov	r1, r0
    facc:	4801      	ldr	r0, [pc, #4]	; (fad4 <ll_adv_data_set+0xc>)
    face:	f7ff bf9d 	b.w	fa0c <ull_adv_data_set>
    fad2:	bf00      	nop
    fad4:	20001e58 	.word	0x20001e58

0000fad8 <ull_scan_rsp_set>:
{
    fad8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    fadc:	f890 407c 	ldrb.w	r4, [r0, #124]	; 0x7c
	first = pdu->first;
    fae0:	f890 e07b 	ldrb.w	lr, [r0, #123]	; 0x7b
    fae4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
    fae8:	4605      	mov	r5, r0
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    faea:	ebc4 03c3 	rsb	r3, r4, r3, lsl #3
    faee:	f103 0061 	add.w	r0, r3, #97	; 0x61
    faf2:	f105 0c1c 	add.w	ip, r5, #28
	if (first == last) {
    faf6:	45a6      	cmp	lr, r4
    faf8:	460e      	mov	r6, r1
    fafa:	4617      	mov	r7, r2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    fafc:	eb0c 0100 	add.w	r1, ip, r0
	if (first == last) {
    fb00:	d009      	beq.n	fb16 <ull_scan_rsp_set+0x3e>
		pdu->last = first;
    fb02:	fa5f f28e 	uxtb.w	r2, lr
    fb06:	f885 207c 	strb.w	r2, [r5, #124]	; 0x7c
    fb0a:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
    fb0e:	f895 e07b 	ldrb.w	lr, [r5, #123]	; 0x7b
		if (first_latest != first) {
    fb12:	4572      	cmp	r2, lr
    fb14:	d027      	beq.n	fb66 <ull_scan_rsp_set+0x8e>
		last++;
    fb16:	3401      	adds	r4, #1
    fb18:	b2e4      	uxtb	r4, r4
		if (last == DOUBLE_BUFFER_SIZE) {
    fb1a:	2c02      	cmp	r4, #2
    fb1c:	d025      	beq.n	fb6a <ull_scan_rsp_set+0x92>
    fb1e:	2227      	movs	r2, #39	; 0x27
    fb20:	2302      	movs	r3, #2
    fb22:	fb12 3304 	smlabb	r3, r2, r4, r3
	pdu->tx_addr = prev->tx_addr;
    fb26:	f81c 0000 	ldrb.w	r0, [ip, r0]
    fb2a:	f3c0 1080 	ubfx	r0, r0, #6, #1
	return (void *)pdu->pdu[last];
    fb2e:	f105 027b 	add.w	r2, r5, #123	; 0x7b
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
    fb32:	0180      	lsls	r0, r0, #6
    fb34:	eb02 0803 	add.w	r8, r2, r3
    fb38:	f040 0004 	orr.w	r0, r0, #4
    fb3c:	54d0      	strb	r0, [r2, r3]
	pdu->len = BDADDR_SIZE + len;
    fb3e:	1db3      	adds	r3, r6, #6
    fb40:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
    fb44:	3102      	adds	r1, #2
    fb46:	f108 0002 	add.w	r0, r8, #2
    fb4a:	2206      	movs	r2, #6
    fb4c:	f00b ff6d 	bl	1ba2a <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
    fb50:	4632      	mov	r2, r6
    fb52:	4639      	mov	r1, r7
    fb54:	f108 0008 	add.w	r0, r8, #8
    fb58:	f00b ff67 	bl	1ba2a <memcpy>
	pdu->last = idx;
    fb5c:	f885 407c 	strb.w	r4, [r5, #124]	; 0x7c
}
    fb60:	2000      	movs	r0, #0
    fb62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    fb66:	3302      	adds	r3, #2
    fb68:	e7dd      	b.n	fb26 <ull_scan_rsp_set+0x4e>
{
    fb6a:	2302      	movs	r3, #2
			last = 0U;
    fb6c:	2400      	movs	r4, #0
    fb6e:	e7da      	b.n	fb26 <ull_scan_rsp_set+0x4e>

0000fb70 <ll_adv_scan_rsp_set>:
{
    fb70:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
    fb72:	4601      	mov	r1, r0
    fb74:	4801      	ldr	r0, [pc, #4]	; (fb7c <ll_adv_scan_rsp_set+0xc>)
    fb76:	f7ff bfaf 	b.w	fad8 <ull_scan_rsp_set>
    fb7a:	bf00      	nop
    fb7c:	20001e58 	.word	0x20001e58

0000fb80 <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fb80:	f8d0 21b4 	ldr.w	r2, [r0, #436]	; 0x1b4
{
    fb84:	4603      	mov	r3, r0
    fb86:	b410      	push	{r4}
    fb88:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fb8a:	b172      	cbz	r2, fbaa <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
    fb8c:	f8d3 11b0 	ldr.w	r1, [r3, #432]	; 0x1b0
    fb90:	428a      	cmp	r2, r1
    fb92:	d02b      	beq.n	fbec <tx_ull_dequeue+0x6c>
    fb94:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
		if (conn->tx_head == conn->tx_data) {
    fb98:	4291      	cmp	r1, r2
    fb9a:	d01a      	beq.n	fbd2 <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
    fb9c:	680a      	ldr	r2, [r1, #0]
    fb9e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
		tx->next = NULL;
    fba2:	2300      	movs	r3, #0
}
    fba4:	bc10      	pop	{r4}
		tx->next = NULL;
    fba6:	6003      	str	r3, [r0, #0]
}
    fba8:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
    fbaa:	f8d3 21b0 	ldr.w	r2, [r3, #432]	; 0x1b0
    fbae:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    fbb2:	428a      	cmp	r2, r1
    fbb4:	d025      	beq.n	fc02 <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fbb6:	7911      	ldrb	r1, [r2, #4]
    fbb8:	f001 0103 	and.w	r1, r1, #3
    fbbc:	2903      	cmp	r1, #3
    fbbe:	d00e      	beq.n	fbde <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
    fbc0:	6812      	ldr	r2, [r2, #0]
    fbc2:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
			conn->tx_ctrl = NULL;
    fbc6:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
    fbc8:	e9c3 226d 	strd	r2, r2, [r3, #436]	; 0x1b4
}
    fbcc:	bc10      	pop	{r4}
		tx->next = tx;
    fbce:	6000      	str	r0, [r0, #0]
}
    fbd0:	4770      	bx	lr
    fbd2:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
    fbd4:	6809      	ldr	r1, [r1, #0]
    fbd6:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
    fbda:	4611      	mov	r1, r2
    fbdc:	e7de      	b.n	fb9c <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
    fbde:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
    fbe0:	2903      	cmp	r1, #3
    fbe2:	d001      	beq.n	fbe8 <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
    fbe4:	290a      	cmp	r1, #10
    fbe6:	d1eb      	bne.n	fbc0 <tx_ull_dequeue+0x40>
    fbe8:	4611      	mov	r1, r2
    fbea:	e7d7      	b.n	fb9c <tx_ull_dequeue+0x1c>
    fbec:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
		conn->tx_head = conn->tx_head->next;
    fbf0:	6809      	ldr	r1, [r1, #0]
    fbf2:	f8c3 11b0 	str.w	r1, [r3, #432]	; 0x1b0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    fbf6:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
    fbf8:	bf18      	it	ne
    fbfa:	f8c3 11b4 	strne.w	r1, [r3, #436]	; 0x1b4
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
    fbfe:	d1e5      	bne.n	fbcc <tx_ull_dequeue+0x4c>
    fc00:	e7e1      	b.n	fbc6 <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
    fc02:	2a00      	cmp	r2, #0
    fc04:	d1e6      	bne.n	fbd4 <tx_ull_dequeue+0x54>
    fc06:	f8d3 41b8 	ldr.w	r4, [r3, #440]	; 0x1b8
    fc0a:	4611      	mov	r1, r2
    fc0c:	e7f0      	b.n	fbf0 <tx_ull_dequeue+0x70>
    fc0e:	bf00      	nop

0000fc10 <calc_eff_time>:
	uint16_t time = PKT_US(max_octets, phy);
    fc10:	074b      	lsls	r3, r1, #29
    fc12:	d50c      	bpl.n	fc2e <calc_eff_time+0x1e>
    fc14:	0181      	lsls	r1, r0, #6
	eff_time = MIN(eff_time, default_time);
    fc16:	f501 7074 	add.w	r0, r1, #976	; 0x3d0
    fc1a:	4290      	cmp	r0, r2
    fc1c:	bf28      	it	cs
    fc1e:	4610      	movcs	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    fc20:	f44f 6129 	mov.w	r1, #2704	; 0xa90
    fc24:	4288      	cmp	r0, r1
    fc26:	bf38      	it	cc
    fc28:	4608      	movcc	r0, r1
}
    fc2a:	b280      	uxth	r0, r0
    fc2c:	4770      	bx	lr
{
    fc2e:	b410      	push	{r4}
	uint16_t time = PKT_US(max_octets, phy);
    fc30:	f100 040d 	add.w	r4, r0, #13
    fc34:	f001 0003 	and.w	r0, r1, #3
    fc38:	4404      	add	r4, r0
    fc3a:	f3c1 0140 	ubfx	r1, r1, #1, #1
    fc3e:	00e4      	lsls	r4, r4, #3
    fc40:	40cc      	lsrs	r4, r1
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
    fc42:	b2a3      	uxth	r3, r4
    fc44:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    fc48:	f100 0028 	add.w	r0, r0, #40	; 0x28
	eff_time = MAX(PDU_DC_PAYLOAD_TIME_MIN, time);
    fc4c:	bf38      	it	cc
    fc4e:	f44f 73a4 	movcc.w	r3, #328	; 0x148
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    fc52:	00c4      	lsls	r4, r0, #3
	eff_time = MIN(eff_time, default_time);
    fc54:	429a      	cmp	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    fc56:	fa24 f101 	lsr.w	r1, r4, r1
	eff_time = MIN(eff_time, default_time);
    fc5a:	bf28      	it	cs
    fc5c:	461a      	movcs	r2, r3
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    fc5e:	428a      	cmp	r2, r1
	eff_time = MIN(eff_time, default_time);
    fc60:	4610      	mov	r0, r2
	eff_time = MAX(eff_time, PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, phy));
    fc62:	bf38      	it	cc
    fc64:	4608      	movcc	r0, r1
}
    fc66:	b280      	uxth	r0, r0
    fc68:	bc10      	pop	{r4}
    fc6a:	4770      	bx	lr

0000fc6c <init_reset>:
{
    fc6c:	b538      	push	{r3, r4, r5, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
    fc6e:	4813      	ldr	r0, [pc, #76]	; (fcbc <init_reset+0x50>)
    fc70:	4b13      	ldr	r3, [pc, #76]	; (fcc0 <init_reset+0x54>)
    fc72:	2201      	movs	r2, #1
    fc74:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
    fc78:	f7fb fa94 	bl	b1a4 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
    fc7c:	4b11      	ldr	r3, [pc, #68]	; (fcc4 <init_reset+0x58>)
    fc7e:	2203      	movs	r2, #3
    fc80:	1d18      	adds	r0, r3, #4
    fc82:	2124      	movs	r1, #36	; 0x24
    fc84:	f7fb fa8e 	bl	b1a4 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
    fc88:	4b0f      	ldr	r3, [pc, #60]	; (fcc8 <init_reset+0x5c>)
    fc8a:	2204      	movs	r2, #4
    fc8c:	1898      	adds	r0, r3, r2
    fc8e:	2120      	movs	r1, #32
    fc90:	f7fb fa88 	bl	b1a4 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
    fc94:	4b0d      	ldr	r3, [pc, #52]	; (fccc <init_reset+0x60>)
    fc96:	2207      	movs	r2, #7
    fc98:	1d18      	adds	r0, r3, #4
    fc9a:	2108      	movs	r1, #8
    fc9c:	f7fb fa82 	bl	b1a4 <mem_init>
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    fca0:	4b0b      	ldr	r3, [pc, #44]	; (fcd0 <init_reset+0x64>)
	default_phy_tx |= BIT(2);
    fca2:	490c      	ldr	r1, [pc, #48]	; (fcd4 <init_reset+0x68>)
	default_phy_rx |= BIT(2);
    fca4:	4a0c      	ldr	r2, [pc, #48]	; (fcd8 <init_reset+0x6c>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    fca6:	480d      	ldr	r0, [pc, #52]	; (fcdc <init_reset+0x70>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    fca8:	251b      	movs	r5, #27
    fcaa:	801d      	strh	r5, [r3, #0]
	default_phy_tx |= BIT(2);
    fcac:	2307      	movs	r3, #7
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    fcae:	f44f 74a4 	mov.w	r4, #328	; 0x148
	default_phy_tx |= BIT(2);
    fcb2:	700b      	strb	r3, [r1, #0]
	default_phy_rx |= BIT(2);
    fcb4:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    fcb6:	8004      	strh	r4, [r0, #0]
}
    fcb8:	2000      	movs	r0, #0
    fcba:	bd38      	pop	{r3, r4, r5, pc}
    fcbc:	20001f58 	.word	0x20001f58
    fcc0:	20001f54 	.word	0x20001f54
    fcc4:	20002134 	.word	0x20002134
    fcc8:	200021a4 	.word	0x200021a4
    fccc:	20002228 	.word	0x20002228
    fcd0:	20002920 	.word	0x20002920
    fcd4:	200029cc 	.word	0x200029cc
    fcd8:	200029cb 	.word	0x200029cb
    fcdc:	20002922 	.word	0x20002922

0000fce0 <ctrl_tx_pause_enqueue>:
{
    fce0:	b538      	push	{r3, r4, r5, lr}
	    conn->tx_head &&
    fce2:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
{
    fce6:	4604      	mov	r4, r0
    fce8:	460d      	mov	r5, r1
	if (
    fcea:	b11b      	cbz	r3, fcf4 <ctrl_tx_pause_enqueue+0x14>
	    !conn->llcp_enc.pause_tx &&
    fcec:	f890 1152 	ldrb.w	r1, [r0, #338]	; 0x152
	    conn->tx_head &&
    fcf0:	0788      	lsls	r0, r1, #30
    fcf2:	d50d      	bpl.n	fd10 <ctrl_tx_pause_enqueue+0x30>
		if (!conn->tx_ctrl) {
    fcf4:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    fcf8:	b301      	cbz	r1, fd3c <ctrl_tx_pause_enqueue+0x5c>
			LL_ASSERT(!pause);
    fcfa:	bb4a      	cbnz	r2, fd50 <ctrl_tx_pause_enqueue+0x70>
	tx->next = conn->tx_ctrl_last->next;
    fcfc:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
    fd00:	681a      	ldr	r2, [r3, #0]
    fd02:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    fd04:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
    fd06:	682b      	ldr	r3, [r5, #0]
    fd08:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
	if (!tx->next) {
    fd0c:	b19b      	cbz	r3, fd36 <ctrl_tx_pause_enqueue+0x56>
}
    fd0e:	bd38      	pop	{r3, r4, r5, pc}
	    !conn->llcp_phy.pause_tx &&
    fd10:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
    fd14:	07c9      	lsls	r1, r1, #31
    fd16:	d4ed      	bmi.n	fcf4 <ctrl_tx_pause_enqueue+0x14>
		if (conn->tx_head == conn->tx_data) {
    fd18:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
    fd1c:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
    fd1e:	bf04      	itt	eq
    fd20:	6819      	ldreq	r1, [r3, #0]
    fd22:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
    fd26:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
    fd2a:	b1f9      	cbz	r1, fd6c <ctrl_tx_pause_enqueue+0x8c>
			LL_ASSERT(!pause);
    fd2c:	2a00      	cmp	r2, #0
    fd2e:	d0e5      	beq.n	fcfc <ctrl_tx_pause_enqueue+0x1c>
    fd30:	f240 7397 	movw	r3, #1943	; 0x797
    fd34:	e00e      	b.n	fd54 <ctrl_tx_pause_enqueue+0x74>
		conn->tx_data_last = tx;
    fd36:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
    fd3a:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head;
    fd3c:	602b      	str	r3, [r5, #0]
			conn->tx_head = tx;
    fd3e:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
			if (!pause) {
    fd42:	2a00      	cmp	r2, #0
    fd44:	d1e2      	bne.n	fd0c <ctrl_tx_pause_enqueue+0x2c>
				conn->tx_ctrl_last = tx;
    fd46:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
	if (!tx->next) {
    fd4a:	2b00      	cmp	r3, #0
    fd4c:	d1df      	bne.n	fd0e <ctrl_tx_pause_enqueue+0x2e>
    fd4e:	e7f2      	b.n	fd36 <ctrl_tx_pause_enqueue+0x56>
			LL_ASSERT(!pause);
    fd50:	f240 73a9 	movw	r3, #1961	; 0x7a9
    fd54:	4a0a      	ldr	r2, [pc, #40]	; (fd80 <ctrl_tx_pause_enqueue+0xa0>)
    fd56:	490b      	ldr	r1, [pc, #44]	; (fd84 <ctrl_tx_pause_enqueue+0xa4>)
    fd58:	480b      	ldr	r0, [pc, #44]	; (fd88 <ctrl_tx_pause_enqueue+0xa8>)
    fd5a:	f00a f84c 	bl	19df6 <printk>
    fd5e:	4040      	eors	r0, r0
    fd60:	f380 8811 	msr	BASEPRI, r0
    fd64:	f04f 0003 	mov.w	r0, #3
    fd68:	df02      	svc	2
    fd6a:	e7c7      	b.n	fcfc <ctrl_tx_pause_enqueue+0x1c>
			tx->next = conn->tx_head->next;
    fd6c:	6819      	ldr	r1, [r3, #0]
    fd6e:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
    fd70:	601d      	str	r5, [r3, #0]
			if (!pause) {
    fd72:	b90a      	cbnz	r2, fd78 <ctrl_tx_pause_enqueue+0x98>
				conn->tx_ctrl_last = tx;
    fd74:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
    fd78:	682b      	ldr	r3, [r5, #0]
	if (!tx->next) {
    fd7a:	2b00      	cmp	r3, #0
    fd7c:	d1c7      	bne.n	fd0e <ctrl_tx_pause_enqueue+0x2e>
    fd7e:	e7da      	b.n	fd36 <ctrl_tx_pause_enqueue+0x56>
    fd80:	00020020 	.word	0x00020020
    fd84:	00020060 	.word	0x00020060
    fd88:	0001fcdc 	.word	0x0001fcdc

0000fd8c <tx_lll_flush>:
{
    fd8c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
    fd90:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    fd94:	4935      	ldr	r1, [pc, #212]	; (fe6c <tx_lll_flush+0xe0>)
{
    fd96:	b083      	sub	sp, #12
    fd98:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    fd9a:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
    fd9e:	4640      	mov	r0, r8
    fda0:	f7fb fa64 	bl	b26c <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    fda4:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
    fda8:	4629      	mov	r1, r5
    fdaa:	f005 fb09 	bl	153c0 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    fdae:	6d28      	ldr	r0, [r5, #80]	; 0x50
    fdb0:	4631      	mov	r1, r6
    fdb2:	aa01      	add	r2, sp, #4
    fdb4:	f7fb fa98 	bl	b2e8 <memq_dequeue>
	while (link) {
    fdb8:	b340      	cbz	r0, fe0c <tx_lll_flush+0x80>
    fdba:	4c2d      	ldr	r4, [pc, #180]	; (fe70 <tx_lll_flush+0xe4>)
		lll_tx->handle = 0xFFFF;
    fdbc:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    fdc0:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
    fdc4:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
    fdc6:	f894 c001 	ldrb.w	ip, [r4, #1]
    fdca:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
    fdcc:	1c4b      	adds	r3, r1, #1
    fdce:	b2db      	uxtb	r3, r3
		last = 0U;
    fdd0:	459c      	cmp	ip, r3
    fdd2:	bf08      	it	eq
    fdd4:	2300      	moveq	r3, #0
	if (last == first) {
    fdd6:	429a      	cmp	r2, r3
    fdd8:	d038      	beq.n	fe4c <tx_lll_flush+0xc0>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
    fdda:	7822      	ldrb	r2, [r4, #0]
    fddc:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
    fde0:	eb19 0e02 	adds.w	lr, r9, r2
    fde4:	d032      	beq.n	fe4c <tx_lll_flush+0xc0>
		lll_tx->node = tx;
    fde6:	f8dd c004 	ldr.w	ip, [sp, #4]
		lll_tx->handle = 0xFFFF;
    fdea:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    fdee:	f8dc 1000 	ldr.w	r1, [ip]
		lll_tx->node = tx;
    fdf2:	f8ce c004 	str.w	ip, [lr, #4]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    fdf6:	aa01      	add	r2, sp, #4
		link->next = tx->next; /* Indicates ctrl pool or data pool */
    fdf8:	6001      	str	r1, [r0, #0]
		tx->next = link;
    fdfa:	f8cc 0000 	str.w	r0, [ip]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
    fdfe:	4631      	mov	r1, r6
    fe00:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
    fe02:	70e3      	strb	r3, [r4, #3]
    fe04:	f7fb fa70 	bl	b2e8 <memq_dequeue>
	while (link) {
    fe08:	2800      	cmp	r0, #0
    fe0a:	d1db      	bne.n	fdc4 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
    fe0c:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
	rx = (void *)&conn->llcp_terminate.node_rx;
    fe10:	f508 7498 	add.w	r4, r8, #304	; 0x130
	LL_ASSERT(rx->hdr.link);
    fe14:	b150      	cbz	r0, fe2c <tx_lll_flush+0xa0>
	rx->hdr.link = NULL;
    fe16:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
    fe18:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
    fe1a:	f8c8 3130 	str.w	r3, [r8, #304]	; 0x130
	ull_rx_put(link, rx);
    fe1e:	f7ff f9bf 	bl	f1a0 <ull_rx_put>
	ull_rx_sched();
    fe22:	f7ff f9cd 	bl	f1c0 <ull_rx_sched>
}
    fe26:	b003      	add	sp, #12
    fe28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
    fe2c:	4a11      	ldr	r2, [pc, #68]	; (fe74 <tx_lll_flush+0xe8>)
    fe2e:	4912      	ldr	r1, [pc, #72]	; (fe78 <tx_lll_flush+0xec>)
    fe30:	4812      	ldr	r0, [pc, #72]	; (fe7c <tx_lll_flush+0xf0>)
    fe32:	f240 733c 	movw	r3, #1852	; 0x73c
    fe36:	f009 ffde 	bl	19df6 <printk>
    fe3a:	4040      	eors	r0, r0
    fe3c:	f380 8811 	msr	BASEPRI, r0
    fe40:	f04f 0003 	mov.w	r0, #3
    fe44:	df02      	svc	2
    fe46:	f8d8 0130 	ldr.w	r0, [r8, #304]	; 0x130
    fe4a:	e7e4      	b.n	fe16 <tx_lll_flush+0x8a>
		LL_ASSERT(lll_tx);
    fe4c:	4a09      	ldr	r2, [pc, #36]	; (fe74 <tx_lll_flush+0xe8>)
    fe4e:	490c      	ldr	r1, [pc, #48]	; (fe80 <tx_lll_flush+0xf4>)
    fe50:	480a      	ldr	r0, [pc, #40]	; (fe7c <tx_lll_flush+0xf0>)
    fe52:	f44f 63e5 	mov.w	r3, #1832	; 0x728
    fe56:	f009 ffce 	bl	19df6 <printk>
    fe5a:	4040      	eors	r0, r0
    fe5c:	f380 8811 	msr	BASEPRI, r0
    fe60:	f04f 0003 	mov.w	r0, #3
    fe64:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
    fe66:	2300      	movs	r3, #0
    fe68:	801b      	strh	r3, [r3, #0]
    fe6a:	deff      	udf	#255	; 0xff
    fe6c:	20001f58 	.word	0x20001f58
    fe70:	200007a4 	.word	0x200007a4
    fe74:	00020020 	.word	0x00020020
    fe78:	00020070 	.word	0x00020070
    fe7c:	0001fcdc 	.word	0x0001fcdc
    fe80:	00020068 	.word	0x00020068

0000fe84 <ticker_op_stop_cb>:
{
    fe84:	b510      	push	{r4, lr}
    fe86:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    fe88:	b9b0      	cbnz	r0, feb8 <ticker_op_stop_cb+0x34>
	mfy.param = param;
    fe8a:	4b12      	ldr	r3, [pc, #72]	; (fed4 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    fe8c:	2200      	movs	r2, #0
    fe8e:	4611      	mov	r1, r2
    fe90:	2002      	movs	r0, #2
	mfy.param = param;
    fe92:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
    fe94:	f7fb fa8c 	bl	b3b0 <mayfly_enqueue>
	LL_ASSERT(!retval);
    fe98:	b900      	cbnz	r0, fe9c <ticker_op_stop_cb+0x18>
}
    fe9a:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
    fe9c:	4a0e      	ldr	r2, [pc, #56]	; (fed8 <ticker_op_stop_cb+0x54>)
    fe9e:	490f      	ldr	r1, [pc, #60]	; (fedc <ticker_op_stop_cb+0x58>)
    fea0:	480f      	ldr	r0, [pc, #60]	; (fee0 <ticker_op_stop_cb+0x5c>)
    fea2:	f240 6387 	movw	r3, #1671	; 0x687
    fea6:	f009 ffa6 	bl	19df6 <printk>
    feaa:	4040      	eors	r0, r0
    feac:	f380 8811 	msr	BASEPRI, r0
    feb0:	f04f 0003 	mov.w	r0, #3
    feb4:	df02      	svc	2
}
    feb6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    feb8:	4a07      	ldr	r2, [pc, #28]	; (fed8 <ticker_op_stop_cb+0x54>)
    feba:	490a      	ldr	r1, [pc, #40]	; (fee4 <ticker_op_stop_cb+0x60>)
    febc:	4808      	ldr	r0, [pc, #32]	; (fee0 <ticker_op_stop_cb+0x5c>)
    febe:	f44f 63d0 	mov.w	r3, #1664	; 0x680
    fec2:	f009 ff98 	bl	19df6 <printk>
    fec6:	4040      	eors	r0, r0
    fec8:	f380 8811 	msr	BASEPRI, r0
    fecc:	f04f 0003 	mov.w	r0, #3
    fed0:	df02      	svc	2
    fed2:	e7da      	b.n	fe8a <ticker_op_stop_cb+0x6>
    fed4:	2000081c 	.word	0x2000081c
    fed8:	00020020 	.word	0x00020020
    fedc:	0001fe3c 	.word	0x0001fe3c
    fee0:	0001fcdc 	.word	0x0001fcdc
    fee4:	00020080 	.word	0x00020080

0000fee8 <ticker_start_conn_op_cb>:
{
    fee8:	b510      	push	{r4, lr}
    feea:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    feec:	b990      	cbnz	r0, ff14 <ticker_start_conn_op_cb+0x2c>
	void *p = ull_update_unmark(param);
    feee:	4620      	mov	r0, r4
    fef0:	f7ff f8d0 	bl	f094 <ull_update_unmark>
	LL_ASSERT(p == param);
    fef4:	4284      	cmp	r4, r0
    fef6:	d00c      	beq.n	ff12 <ticker_start_conn_op_cb+0x2a>
    fef8:	4a0d      	ldr	r2, [pc, #52]	; (ff30 <ticker_start_conn_op_cb+0x48>)
    fefa:	490e      	ldr	r1, [pc, #56]	; (ff34 <ticker_start_conn_op_cb+0x4c>)
    fefc:	480e      	ldr	r0, [pc, #56]	; (ff38 <ticker_start_conn_op_cb+0x50>)
    fefe:	f240 6377 	movw	r3, #1655	; 0x677
    ff02:	f009 ff78 	bl	19df6 <printk>
    ff06:	4040      	eors	r0, r0
    ff08:	f380 8811 	msr	BASEPRI, r0
    ff0c:	f04f 0003 	mov.w	r0, #3
    ff10:	df02      	svc	2
}
    ff12:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ff14:	4a06      	ldr	r2, [pc, #24]	; (ff30 <ticker_start_conn_op_cb+0x48>)
    ff16:	4909      	ldr	r1, [pc, #36]	; (ff3c <ticker_start_conn_op_cb+0x54>)
    ff18:	4807      	ldr	r0, [pc, #28]	; (ff38 <ticker_start_conn_op_cb+0x50>)
    ff1a:	f240 6373 	movw	r3, #1651	; 0x673
    ff1e:	f009 ff6a 	bl	19df6 <printk>
    ff22:	4040      	eors	r0, r0
    ff24:	f380 8811 	msr	BASEPRI, r0
    ff28:	f04f 0003 	mov.w	r0, #3
    ff2c:	df02      	svc	2
    ff2e:	e7de      	b.n	feee <ticker_start_conn_op_cb+0x6>
    ff30:	00020020 	.word	0x00020020
    ff34:	0002008c 	.word	0x0002008c
    ff38:	0001fcdc 	.word	0x0001fcdc
    ff3c:	00020080 	.word	0x00020080

0000ff40 <ticker_stop_conn_op_cb>:
{
    ff40:	b510      	push	{r4, lr}
    ff42:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ff44:	b990      	cbnz	r0, ff6c <ticker_stop_conn_op_cb+0x2c>
	void *p = ull_update_mark(param);
    ff46:	4620      	mov	r0, r4
    ff48:	f7ff f898 	bl	f07c <ull_update_mark>
	LL_ASSERT(p == param);
    ff4c:	4284      	cmp	r4, r0
    ff4e:	d00c      	beq.n	ff6a <ticker_stop_conn_op_cb+0x2a>
    ff50:	4a0d      	ldr	r2, [pc, #52]	; (ff88 <ticker_stop_conn_op_cb+0x48>)
    ff52:	490e      	ldr	r1, [pc, #56]	; (ff8c <ticker_stop_conn_op_cb+0x4c>)
    ff54:	480e      	ldr	r0, [pc, #56]	; (ff90 <ticker_stop_conn_op_cb+0x50>)
    ff56:	f240 636e 	movw	r3, #1646	; 0x66e
    ff5a:	f009 ff4c 	bl	19df6 <printk>
    ff5e:	4040      	eors	r0, r0
    ff60:	f380 8811 	msr	BASEPRI, r0
    ff64:	f04f 0003 	mov.w	r0, #3
    ff68:	df02      	svc	2
}
    ff6a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
    ff6c:	4a06      	ldr	r2, [pc, #24]	; (ff88 <ticker_stop_conn_op_cb+0x48>)
    ff6e:	4909      	ldr	r1, [pc, #36]	; (ff94 <ticker_stop_conn_op_cb+0x54>)
    ff70:	4807      	ldr	r0, [pc, #28]	; (ff90 <ticker_stop_conn_op_cb+0x50>)
    ff72:	f240 636a 	movw	r3, #1642	; 0x66a
    ff76:	f009 ff3e 	bl	19df6 <printk>
    ff7a:	4040      	eors	r0, r0
    ff7c:	f380 8811 	msr	BASEPRI, r0
    ff80:	f04f 0003 	mov.w	r0, #3
    ff84:	df02      	svc	2
    ff86:	e7de      	b.n	ff46 <ticker_stop_conn_op_cb+0x6>
    ff88:	00020020 	.word	0x00020020
    ff8c:	0002008c 	.word	0x0002008c
    ff90:	0001fcdc 	.word	0x0001fcdc
    ff94:	00020080 	.word	0x00020080

0000ff98 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ff98:	b900      	cbnz	r0, ff9c <ticker_update_conn_op_cb+0x4>
    ff9a:	4770      	bx	lr
{
    ff9c:	b510      	push	{r4, lr}
    ff9e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
    ffa0:	f7ff f884 	bl	f0ac <ull_update_mark_get>
    ffa4:	4284      	cmp	r4, r0
    ffa6:	d010      	beq.n	ffca <ticker_update_conn_op_cb+0x32>
    ffa8:	f7ff f862 	bl	f070 <ull_disable_mark_get>
    ffac:	4284      	cmp	r4, r0
    ffae:	d00c      	beq.n	ffca <ticker_update_conn_op_cb+0x32>
    ffb0:	4a06      	ldr	r2, [pc, #24]	; (ffcc <ticker_update_conn_op_cb+0x34>)
    ffb2:	4907      	ldr	r1, [pc, #28]	; (ffd0 <ticker_update_conn_op_cb+0x38>)
    ffb4:	4807      	ldr	r0, [pc, #28]	; (ffd4 <ticker_update_conn_op_cb+0x3c>)
    ffb6:	f240 6363 	movw	r3, #1635	; 0x663
    ffba:	f009 ff1c 	bl	19df6 <printk>
    ffbe:	4040      	eors	r0, r0
    ffc0:	f380 8811 	msr	BASEPRI, r0
    ffc4:	f04f 0003 	mov.w	r0, #3
    ffc8:	df02      	svc	2
}
    ffca:	bd10      	pop	{r4, pc}
    ffcc:	00020020 	.word	0x00020020
    ffd0:	00020098 	.word	0x00020098
    ffd4:	0001fcdc 	.word	0x0001fcdc

0000ffd8 <reject_ext_ind_send.isra.0>:

	return 0;
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    ffd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    ffdc:	4605      	mov	r5, r0
{
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ffde:	4826      	ldr	r0, [pc, #152]	; (10078 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x79>)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
    ffe0:	460e      	mov	r6, r1
    ffe2:	4690      	mov	r8, r2
    ffe4:	461f      	mov	r7, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
    ffe6:	f7fb f90b 	bl	b200 <mem_acquire>
	if (!tx) {
    ffea:	2800      	cmp	r0, #0
    ffec:	d041      	beq.n	10072 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x73>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    ffee:	2303      	movs	r3, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fff0:	7904      	ldrb	r4, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
    fff2:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
    fff4:	f8d5 21b0 	ldr.w	r2, [r5, #432]	; 0x1b0
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
    fff8:	f880 8008 	strb.w	r8, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    fffc:	4323      	orrs	r3, r4
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
    fffe:	2111      	movs	r1, #17
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   10000:	7247      	strb	r7, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10002:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   10004:	71c1      	strb	r1, [r0, #7]
	if (
   10006:	b11a      	cbz	r2, 10010 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11>
	    !conn->llcp_enc.pause_tx &&
   10008:	f895 3152 	ldrb.w	r3, [r5, #338]	; 0x152
	    conn->tx_head &&
   1000c:	0799      	lsls	r1, r3, #30
   1000e:	d510      	bpl.n	10032 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x33>
		if (!conn->tx_ctrl) {
   10010:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   10014:	b33b      	cbz	r3, 10066 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x67>
	tx->next = conn->tx_ctrl_last->next;
   10016:	f8d5 31b8 	ldr.w	r3, [r5, #440]	; 0x1b8
   1001a:	681a      	ldr	r2, [r3, #0]
   1001c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1001e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   10020:	6802      	ldr	r2, [r0, #0]
   10022:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
	if (!tx->next) {
   10026:	b1da      	cbz	r2, 10060 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x61>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10028:	2303      	movs	r3, #3
   1002a:	7033      	strb	r3, [r6, #0]

	return 0;
   1002c:	2000      	movs	r0, #0
}
   1002e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    !conn->llcp_phy.pause_tx &&
   10032:	f895 31ab 	ldrb.w	r3, [r5, #427]	; 0x1ab
   10036:	07db      	lsls	r3, r3, #31
   10038:	d4ea      	bmi.n	10010 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11>
		if (conn->tx_head == conn->tx_data) {
   1003a:	f8d5 31bc 	ldr.w	r3, [r5, #444]	; 0x1bc
   1003e:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   10040:	bf04      	itt	eq
   10042:	6813      	ldreq	r3, [r2, #0]
   10044:	f8c5 31bc 	streq.w	r3, [r5, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   10048:	f8d5 31b4 	ldr.w	r3, [r5, #436]	; 0x1b4
   1004c:	2b00      	cmp	r3, #0
   1004e:	d1e2      	bne.n	10016 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x17>
			tx->next = conn->tx_head->next;
   10050:	6813      	ldr	r3, [r2, #0]
   10052:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   10054:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl = tx;
   10056:	6802      	ldr	r2, [r0, #0]
				conn->tx_ctrl_last = tx;
   10058:	e9c5 006d 	strd	r0, r0, [r5, #436]	; 0x1b4
	if (!tx->next) {
   1005c:	2a00      	cmp	r2, #0
   1005e:	d1e3      	bne.n	10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>
		conn->tx_data_last = tx;
   10060:	f8c5 01c0 	str.w	r0, [r5, #448]	; 0x1c0
   10064:	e7e0      	b.n	10028 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x29>
			tx->next = conn->tx_head;
   10066:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   10068:	e9c5 006c 	strd	r0, r0, [r5, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   1006c:	f8c5 01b8 	str.w	r0, [r5, #440]	; 0x1b8
   10070:	e7d9      	b.n	10026 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x27>
		return -ENOBUFS;
   10072:	f06f 0036 	mvn.w	r0, #54	; 0x36
   10076:	e7da      	b.n	1002e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x2f>
   10078:	200021a4 	.word	0x200021a4

0001007c <start_enc_rsp_send>:
{
   1007c:	b570      	push	{r4, r5, r6, lr}
   1007e:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   10080:	b179      	cbz	r1, 100a2 <start_enc_rsp_send+0x26>
	conn->lll.enc_tx = 1;
   10082:	f890 207e 	ldrb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10086:	780b      	ldrb	r3, [r1, #0]
	conn->lll.enc_tx = 1;
   10088:	f042 0210 	orr.w	r2, r2, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1008c:	2601      	movs	r6, #1
	conn->lll.enc_tx = 1;
   1008e:	f880 207e 	strb.w	r2, [r0, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10092:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   10096:	2506      	movs	r5, #6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   10098:	704e      	strb	r6, [r1, #1]
	return 0;
   1009a:	2000      	movs	r0, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1009c:	700b      	strb	r3, [r1, #0]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1009e:	70cd      	strb	r5, [r1, #3]
}
   100a0:	bd70      	pop	{r4, r5, r6, pc}
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   100a2:	4826      	ldr	r0, [pc, #152]	; (1013c <start_enc_rsp_send+0xc0>)
   100a4:	f7fb f8ac 	bl	b200 <mem_acquire>
		if (!tx) {
   100a8:	2800      	cmp	r0, #0
   100aa:	d043      	beq.n	10134 <start_enc_rsp_send+0xb8>
	conn->lll.enc_tx = 1;
   100ac:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   100b0:	7902      	ldrb	r2, [r0, #4]
	conn->lll.enc_tx = 1;
   100b2:	f043 0310 	orr.w	r3, r3, #16
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   100b6:	2101      	movs	r1, #1
	conn->lll.enc_tx = 1;
   100b8:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   100bc:	7141      	strb	r1, [r0, #5]
	    conn->tx_head &&
   100be:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   100c2:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   100c6:	2106      	movs	r1, #6
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   100c8:	7102      	strb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   100ca:	71c1      	strb	r1, [r0, #7]
	if (
   100cc:	b1e3      	cbz	r3, 10108 <start_enc_rsp_send+0x8c>
	    !conn->llcp_enc.pause_tx &&
   100ce:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   100d2:	0791      	lsls	r1, r2, #30
   100d4:	d418      	bmi.n	10108 <start_enc_rsp_send+0x8c>
	    !conn->llcp_phy.pause_tx &&
   100d6:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   100da:	07d2      	lsls	r2, r2, #31
   100dc:	d414      	bmi.n	10108 <start_enc_rsp_send+0x8c>
		if (conn->tx_head == conn->tx_data) {
   100de:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   100e2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   100e4:	bf04      	itt	eq
   100e6:	681a      	ldreq	r2, [r3, #0]
   100e8:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   100ec:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   100f0:	b1ca      	cbz	r2, 10126 <start_enc_rsp_send+0xaa>
	tx->next = conn->tx_ctrl_last->next;
   100f2:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   100f6:	681a      	ldr	r2, [r3, #0]
   100f8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   100fa:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   100fc:	6803      	ldr	r3, [r0, #0]
   100fe:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   10102:	b163      	cbz	r3, 1011e <start_enc_rsp_send+0xa2>
	return 0;
   10104:	2000      	movs	r0, #0
}
   10106:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->tx_ctrl) {
   10108:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   1010c:	2a00      	cmp	r2, #0
   1010e:	d1f0      	bne.n	100f2 <start_enc_rsp_send+0x76>
			tx->next = conn->tx_head;
   10110:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   10112:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   10116:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
	if (!tx->next) {
   1011a:	2b00      	cmp	r3, #0
   1011c:	d1f2      	bne.n	10104 <start_enc_rsp_send+0x88>
		conn->tx_data_last = tx;
   1011e:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
	return 0;
   10122:	4618      	mov	r0, r3
}
   10124:	bd70      	pop	{r4, r5, r6, pc}
			tx->next = conn->tx_head->next;
   10126:	681a      	ldr	r2, [r3, #0]
   10128:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1012a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   1012c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1012e:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
   10132:	e7e6      	b.n	10102 <start_enc_rsp_send+0x86>
			return -ENOBUFS;
   10134:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   10138:	bd70      	pop	{r4, r5, r6, pc}
   1013a:	bf00      	nop
   1013c:	200021a4 	.word	0x200021a4

00010140 <ctrl_tx_sec_enqueue>:
{
   10140:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
   10142:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
   10146:	079a      	lsls	r2, r3, #30
{
   10148:	4604      	mov	r4, r0
   1014a:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   1014c:	d50b      	bpl.n	10166 <ctrl_tx_sec_enqueue+0x26>
		if (!conn->tx_ctrl) {
   1014e:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   10152:	2b00      	cmp	r3, #0
   10154:	d042      	beq.n	101dc <ctrl_tx_sec_enqueue+0x9c>
			tx->next = conn->tx_ctrl_last->next;
   10156:	f8d0 31b8 	ldr.w	r3, [r0, #440]	; 0x1b8
   1015a:	681a      	ldr	r2, [r3, #0]
   1015c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1015e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   10160:	682b      	ldr	r3, [r5, #0]
   10162:	b34b      	cbz	r3, 101b8 <ctrl_tx_sec_enqueue+0x78>
}
   10164:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
   10166:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
   1016a:	b1ea      	cbz	r2, 101a8 <ctrl_tx_sec_enqueue+0x68>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1016c:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   10170:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   10174:	4299      	cmp	r1, r3
   10176:	d003      	beq.n	10180 <ctrl_tx_sec_enqueue+0x40>
   10178:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   1017c:	2b03      	cmp	r3, #3
   1017e:	d035      	beq.n	101ec <ctrl_tx_sec_enqueue+0xac>
	    !conn->llcp_phy.pause_tx &&
   10180:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   10184:	f013 0301 	ands.w	r3, r3, #1
   10188:	d119      	bne.n	101be <ctrl_tx_sec_enqueue+0x7e>
		if (conn->tx_head == conn->tx_data) {
   1018a:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   1018e:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   10190:	bf04      	itt	eq
   10192:	6811      	ldreq	r1, [r2, #0]
   10194:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   10198:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   1019c:	2900      	cmp	r1, #0
   1019e:	d048      	beq.n	10232 <ctrl_tx_sec_enqueue+0xf2>
			LL_ASSERT(!pause);
   101a0:	b18b      	cbz	r3, 101c6 <ctrl_tx_sec_enqueue+0x86>
   101a2:	f240 7397 	movw	r3, #1943	; 0x797
   101a6:	e034      	b.n	10212 <ctrl_tx_sec_enqueue+0xd2>
		if (!conn->tx_ctrl) {
   101a8:	f8d0 31b4 	ldr.w	r3, [r0, #436]	; 0x1b4
   101ac:	b95b      	cbnz	r3, 101c6 <ctrl_tx_sec_enqueue+0x86>
			tx->next = conn->tx_head;
   101ae:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   101b0:	e9c0 116c 	strd	r1, r1, [r0, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   101b4:	f8c4 11b8 	str.w	r1, [r4, #440]	; 0x1b8
			conn->tx_data_last = tx;
   101b8:	f8c4 51c0 	str.w	r5, [r4, #448]	; 0x1c0
}
   101bc:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   101be:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   101c2:	2b00      	cmp	r3, #0
   101c4:	d040      	beq.n	10248 <ctrl_tx_sec_enqueue+0x108>
	tx->next = conn->tx_ctrl_last->next;
   101c6:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   101ca:	681a      	ldr	r2, [r3, #0]
   101cc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   101ce:	601d      	str	r5, [r3, #0]
	conn->tx_ctrl_last = tx;
   101d0:	682b      	ldr	r3, [r5, #0]
   101d2:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
		if (!tx->next) {
   101d6:	2b00      	cmp	r3, #0
   101d8:	d1c4      	bne.n	10164 <ctrl_tx_sec_enqueue+0x24>
   101da:	e7ed      	b.n	101b8 <ctrl_tx_sec_enqueue+0x78>
			tx->next = conn->tx_head;
   101dc:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   101e0:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   101e2:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		if (!tx->next) {
   101e6:	2b00      	cmp	r3, #0
   101e8:	d1bc      	bne.n	10164 <ctrl_tx_sec_enqueue+0x24>
   101ea:	e7e5      	b.n	101b8 <ctrl_tx_sec_enqueue+0x78>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   101ec:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   101ee:	f003 0303 	and.w	r3, r3, #3
   101f2:	2b03      	cmp	r3, #3
   101f4:	d1c4      	bne.n	10180 <ctrl_tx_sec_enqueue+0x40>
			    ((pdu_data_tx->llctrl.opcode ==
   101f6:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   101f8:	2b03      	cmp	r3, #3
   101fa:	d001      	beq.n	10200 <ctrl_tx_sec_enqueue+0xc0>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   101fc:	2b0a      	cmp	r3, #10
   101fe:	d1bf      	bne.n	10180 <ctrl_tx_sec_enqueue+0x40>
	    !conn->llcp_phy.pause_tx &&
   10200:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   10204:	07db      	lsls	r3, r3, #31
   10206:	d525      	bpl.n	10254 <ctrl_tx_sec_enqueue+0x114>
		if (!conn->tx_ctrl) {
   10208:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
   1020c:	b16b      	cbz	r3, 1022a <ctrl_tx_sec_enqueue+0xea>
			LL_ASSERT(!pause);
   1020e:	f240 73a9 	movw	r3, #1961	; 0x7a9
   10212:	4a11      	ldr	r2, [pc, #68]	; (10258 <ctrl_tx_sec_enqueue+0x118>)
   10214:	4911      	ldr	r1, [pc, #68]	; (1025c <ctrl_tx_sec_enqueue+0x11c>)
   10216:	4812      	ldr	r0, [pc, #72]	; (10260 <ctrl_tx_sec_enqueue+0x120>)
   10218:	f009 fded 	bl	19df6 <printk>
   1021c:	4040      	eors	r0, r0
   1021e:	f380 8811 	msr	BASEPRI, r0
   10222:	f04f 0003 	mov.w	r0, #3
   10226:	df02      	svc	2
   10228:	e7cd      	b.n	101c6 <ctrl_tx_sec_enqueue+0x86>
			tx->next = conn->tx_head;
   1022a:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
   1022c:	f8c4 51b0 	str.w	r5, [r4, #432]	; 0x1b0
}
   10230:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
   10232:	6811      	ldr	r1, [r2, #0]
   10234:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   10236:	6015      	str	r5, [r2, #0]
			if (!pause) {
   10238:	2b00      	cmp	r3, #0
   1023a:	d191      	bne.n	10160 <ctrl_tx_sec_enqueue+0x20>
				conn->tx_ctrl = tx;
   1023c:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   1023e:	e9c4 556d 	strd	r5, r5, [r4, #436]	; 0x1b4
		if (!tx->next) {
   10242:	2b00      	cmp	r3, #0
   10244:	d18e      	bne.n	10164 <ctrl_tx_sec_enqueue+0x24>
   10246:	e7b7      	b.n	101b8 <ctrl_tx_sec_enqueue+0x78>
			tx->next = conn->tx_head;
   10248:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1024a:	e9c4 556c 	strd	r5, r5, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   1024e:	f8c4 51b8 	str.w	r5, [r4, #440]	; 0x1b8
}
   10252:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
   10254:	2301      	movs	r3, #1
   10256:	e798      	b.n	1018a <ctrl_tx_sec_enqueue+0x4a>
   10258:	00020020 	.word	0x00020020
   1025c:	00020060 	.word	0x00020060
   10260:	0001fcdc 	.word	0x0001fcdc

00010264 <feature_rsp_send.isra.0>:
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   10264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10266:	4606      	mov	r6, r0
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10268:	4825      	ldr	r0, [pc, #148]	; (10300 <feature_rsp_send.isra.0+0x9c>)
static int feature_rsp_send(struct ll_conn *conn, struct node_rx_pdu *rx,
   1026a:	460d      	mov	r5, r1
   1026c:	4617      	mov	r7, r2
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1026e:	f7fa ffc7 	bl	b200 <mem_acquire>
	if (!tx) {
   10272:	2800      	cmp	r0, #0
   10274:	d040      	beq.n	102f8 <feature_rsp_send.isra.0+0x94>
	       (features[1] << 8) | (features[2] << 16);
   10276:	79bb      	ldrb	r3, [r7, #6]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   10278:	7939      	ldrb	r1, [r7, #4]
	       (features[1] << 8) | (features[2] << 16);
   1027a:	4a22      	ldr	r2, [pc, #136]	; (10304 <feature_rsp_send.isra.0+0xa0>)
   1027c:	4604      	mov	r4, r0
   1027e:	7978      	ldrb	r0, [r7, #5]
   10280:	041b      	lsls	r3, r3, #16
   10282:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   10286:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   10288:	f8d6 111c 	ldr.w	r1, [r6, #284]	; 0x11c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1028c:	481e      	ldr	r0, [pc, #120]	; (10308 <feature_rsp_send.isra.0+0xa4>)
	       (features[1] << 8) | (features[2] << 16);
   1028e:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   10290:	400b      	ands	r3, r1
   10292:	f3c3 0310 	ubfx	r3, r3, #0, #17
   10296:	f8c6 311c 	str.w	r3, [r6, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   1029a:	79bb      	ldrb	r3, [r7, #6]
   1029c:	f897 c005 	ldrb.w	ip, [r7, #5]
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   102a0:	7939      	ldrb	r1, [r7, #4]
	conn->common.fex_valid = 1U;
   102a2:	f896 70dc 	ldrb.w	r7, [r6, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   102a6:	041b      	lsls	r3, r3, #16
   102a8:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
   102ac:	430b      	orrs	r3, r1
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   102ae:	7921      	ldrb	r1, [r4, #4]
	       (features[1] << 8) | (features[2] << 16);
   102b0:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   102b2:	f047 0201 	orr.w	r2, r7, #1
   102b6:	f886 20dc 	strb.w	r2, [r6, #220]	; 0xdc
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   102ba:	4018      	ands	r0, r3
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   102bc:	2208      	movs	r2, #8
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   102be:	f041 0303 	orr.w	r3, r1, #3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   102c2:	2109      	movs	r1, #9
	conn->llcp_feature.features_peer =
   102c4:	f8c6 0120 	str.w	r0, [r6, #288]	; 0x120
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   102c8:	7123      	strb	r3, [r4, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   102ca:	7161      	strb	r1, [r4, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   102cc:	71e1      	strb	r1, [r4, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   102ce:	18a0      	adds	r0, r4, r2
   102d0:	2100      	movs	r1, #0
   102d2:	f00b fbd5 	bl	1ba80 <memset>
	feat_result &= 0xFF;
   102d6:	f8d6 311c 	ldr.w	r3, [r6, #284]	; 0x11c
	dst[2] = val >> 16;
   102da:	2201      	movs	r2, #1
   102dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	dst[1] = val >> 8;
   102e0:	2149      	movs	r1, #73	; 0x49
	dst[0] = val;
   102e2:	7223      	strb	r3, [r4, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   102e4:	4630      	mov	r0, r6
	dst[1] = val >> 8;
   102e6:	7261      	strb	r1, [r4, #9]
	dst[2] = val >> 16;
   102e8:	72a2      	strb	r2, [r4, #10]
   102ea:	4621      	mov	r1, r4
   102ec:	f7ff ff28 	bl	10140 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   102f0:	2303      	movs	r3, #3
   102f2:	702b      	strb	r3, [r5, #0]
	return 0;
   102f4:	2000      	movs	r0, #0
}
   102f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   102f8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   102fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   102fe:	bf00      	nop
   10300:	200021a4 	.word	0x200021a4
   10304:	fffe30d0 	.word	0xfffe30d0
   10308:	0001ff7f 	.word	0x0001ff7f

0001030c <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   1030c:	4801      	ldr	r0, [pc, #4]	; (10314 <ll_conn_acquire+0x8>)
   1030e:	f7fa bf77 	b.w	b200 <mem_acquire>
   10312:	bf00      	nop
   10314:	20001f54 	.word	0x20001f54

00010318 <ll_conn_release>:
	mem_release(conn, &conn_free);
   10318:	4901      	ldr	r1, [pc, #4]	; (10320 <ll_conn_release+0x8>)
   1031a:	f7fa bf8b 	b.w	b234 <mem_release>
   1031e:	bf00      	nop
   10320:	20001f54 	.word	0x20001f54

00010324 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   10324:	4902      	ldr	r1, [pc, #8]	; (10330 <ll_conn_handle_get+0xc>)
   10326:	f44f 72e4 	mov.w	r2, #456	; 0x1c8
   1032a:	f7fa bf9f 	b.w	b26c <mem_index_get>
   1032e:	bf00      	nop
   10330:	20001f58 	.word	0x20001f58

00010334 <ll_conn_get>:
{
   10334:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10336:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1033a:	4801      	ldr	r0, [pc, #4]	; (10340 <ll_conn_get+0xc>)
   1033c:	f7fa bf92 	b.w	b264 <mem_get>
   10340:	20001f58 	.word	0x20001f58

00010344 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10344:	b958      	cbnz	r0, 1035e <ll_connected_get+0x1a>
{
   10346:	b508      	push	{r3, lr}
   10348:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1034a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1034e:	4805      	ldr	r0, [pc, #20]	; (10364 <ll_connected_get+0x20>)
   10350:	f7fa ff88 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   10354:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10356:	b903      	cbnz	r3, 1035a <ll_connected_get+0x16>
}
   10358:	bd08      	pop	{r3, pc}
		return NULL;
   1035a:	2000      	movs	r0, #0
}
   1035c:	bd08      	pop	{r3, pc}
		return NULL;
   1035e:	2000      	movs	r0, #0
}
   10360:	4770      	bx	lr
   10362:	bf00      	nop
   10364:	20001f58 	.word	0x20001f58

00010368 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   10368:	4801      	ldr	r0, [pc, #4]	; (10370 <ll_tx_mem_acquire+0x8>)
   1036a:	f7fa bf49 	b.w	b200 <mem_acquire>
   1036e:	bf00      	nop
   10370:	20002134 	.word	0x20002134

00010374 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   10374:	4901      	ldr	r1, [pc, #4]	; (1037c <ll_tx_mem_release+0x8>)
   10376:	f7fa bf5d 	b.w	b234 <mem_release>
   1037a:	bf00      	nop
   1037c:	20002134 	.word	0x20002134

00010380 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10380:	2800      	cmp	r0, #0
   10382:	d13d      	bne.n	10400 <ll_tx_mem_enqueue+0x80>
{
   10384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10386:	4602      	mov	r2, r0
   10388:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1038a:	481f      	ldr	r0, [pc, #124]	; (10408 <ll_tx_mem_enqueue+0x88>)
   1038c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10390:	f7fa ff68 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   10394:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10396:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   10398:	b9e2      	cbnz	r2, 103d4 <ll_tx_mem_enqueue+0x54>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   1039a:	491c      	ldr	r1, [pc, #112]	; (1040c <ll_tx_mem_enqueue+0x8c>)
   1039c:	78cf      	ldrb	r7, [r1, #3]
	if (last == count) {
   1039e:	784e      	ldrb	r6, [r1, #1]
   103a0:	7888      	ldrb	r0, [r1, #2]
	last = last + 1;
   103a2:	1c7b      	adds	r3, r7, #1
   103a4:	b2db      	uxtb	r3, r3
		last = 0U;
   103a6:	429e      	cmp	r6, r3
   103a8:	bf08      	it	eq
   103aa:	2300      	moveq	r3, #0
	if (last == first) {
   103ac:	4298      	cmp	r0, r3
   103ae:	d014      	beq.n	103da <ll_tx_mem_enqueue+0x5a>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   103b0:	460e      	mov	r6, r1
   103b2:	f816 0b04 	ldrb.w	r0, [r6], #4
   103b6:	fb10 f007 	smulbb	r0, r0, r7
	if (!lll_tx) {
   103ba:	1837      	adds	r7, r6, r0
   103bc:	d00d      	beq.n	103da <ll_tx_mem_enqueue+0x5a>
	lll_tx->handle = handle;
   103be:	5232      	strh	r2, [r6, r0]
	lll_tx->node = tx;
   103c0:	607d      	str	r5, [r7, #4]
   103c2:	7c20      	ldrb	r0, [r4, #16]
	*last = idx; /* Commit: Update write index */
   103c4:	70cb      	strb	r3, [r1, #3]
	if (ull_ref_get(&conn->ull)) {
   103c6:	b958      	cbnz	r0, 103e0 <ll_tx_mem_enqueue+0x60>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   103c8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   103cc:	2b00      	cmp	r3, #0
   103ce:	db11      	blt.n	103f4 <ll_tx_mem_enqueue+0x74>
	return 0;
   103d0:	2000      	movs	r0, #0
}
   103d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   103d4:	f06f 0015 	mvn.w	r0, #21
}
   103d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
   103da:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   103de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		mfy.param = conn;
   103e0:	4b0b      	ldr	r3, [pc, #44]	; (10410 <ll_tx_mem_enqueue+0x90>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   103e2:	2101      	movs	r1, #1
   103e4:	2003      	movs	r0, #3
		mfy.param = conn;
   103e6:	609c      	str	r4, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   103e8:	f7fa ffe2 	bl	b3b0 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   103ec:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   103f0:	2b00      	cmp	r3, #0
   103f2:	daed      	bge.n	103d0 <ll_tx_mem_enqueue+0x50>
		ull_slave_latency_cancel(conn, handle);
   103f4:	4620      	mov	r0, r4
   103f6:	2100      	movs	r1, #0
   103f8:	f002 fe1e 	bl	13038 <ull_slave_latency_cancel>
	return 0;
   103fc:	2000      	movs	r0, #0
}
   103fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -EINVAL;
   10400:	f06f 0015 	mvn.w	r0, #21
}
   10404:	4770      	bx	lr
   10406:	bf00      	nop
   10408:	20001f58 	.word	0x20001f58
   1040c:	200007e8 	.word	0x200007e8
   10410:	2000080c 	.word	0x2000080c

00010414 <ll_conn_update>:
{
   10414:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   10418:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   1041c:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   10420:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   10424:	2800      	cmp	r0, #0
   10426:	d154      	bne.n	104d2 <ll_conn_update+0xbe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10428:	460c      	mov	r4, r1
   1042a:	4616      	mov	r6, r2
   1042c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10430:	4602      	mov	r2, r0
   10432:	4840      	ldr	r0, [pc, #256]	; (10534 <ll_conn_update+0x120>)
   10434:	461d      	mov	r5, r3
   10436:	f7fa ff15 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   1043a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   1043c:	2b00      	cmp	r3, #0
   1043e:	d148      	bne.n	104d2 <ll_conn_update+0xbe>
	if (!cmd) {
   10440:	b1e4      	cbz	r4, 1047c <ll_conn_update+0x68>
		cmd--;
   10442:	3c01      	subs	r4, #1
		if (cmd) {
   10444:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   10448:	d04e      	beq.n	104e8 <ll_conn_update+0xd4>
			if ((conn->llcp_conn_param.req ==
   1044a:	f890 1170 	ldrb.w	r1, [r0, #368]	; 0x170
   1044e:	f890 2171 	ldrb.w	r2, [r0, #369]	; 0x171
   10452:	4291      	cmp	r1, r2
   10454:	d03a      	beq.n	104cc <ll_conn_update+0xb8>
			    (conn->llcp_conn_param.state !=
   10456:	f890 2172 	ldrb.w	r2, [r0, #370]	; 0x172
			     conn->llcp_conn_param.ack) ||
   1045a:	f002 0107 	and.w	r1, r2, #7
   1045e:	2903      	cmp	r1, #3
   10460:	d134      	bne.n	104cc <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   10462:	f004 0407 	and.w	r4, r4, #7
   10466:	f044 0408 	orr.w	r4, r4, #8
   1046a:	f022 020f 	bic.w	r2, r2, #15
   1046e:	4314      	orrs	r4, r2
   10470:	f880 4172 	strb.w	r4, [r0, #370]	; 0x172
			conn->llcp_conn_param.status = status;
   10474:	f880 6173 	strb.w	r6, [r0, #371]	; 0x173
	return 0;
   10478:	4618      	mov	r0, r3
   1047a:	e028      	b.n	104ce <ll_conn_update+0xba>
		if (!conn->llcp_conn_param.disabled &&
   1047c:	f890 3172 	ldrb.w	r3, [r0, #370]	; 0x172
   10480:	06d9      	lsls	r1, r3, #27
   10482:	d529      	bpl.n	104d8 <ll_conn_update+0xc4>
		} else if (conn->lll.role) {
   10484:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   10488:	2b00      	cmp	r3, #0
   1048a:	db4c      	blt.n	10526 <ll_conn_update+0x112>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   1048c:	f890 2104 	ldrb.w	r2, [r0, #260]	; 0x104
   10490:	f890 3105 	ldrb.w	r3, [r0, #261]	; 0x105
   10494:	4293      	cmp	r3, r2
   10496:	d119      	bne.n	104cc <ll_conn_update+0xb8>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   10498:	f890 2106 	ldrb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.interval = interval_max;
   1049c:	f8a0 9108 	strh.w	r9, [r0, #264]	; 0x108
		conn->llcp_cu.req++;
   104a0:	3301      	adds	r3, #1
		conn->llcp_cu.win_size = 1U;
   104a2:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   104a4:	f022 0207 	bic.w	r2, r2, #7
		conn->llcp_cu.req++;
   104a8:	f880 3104 	strb.w	r3, [r0, #260]	; 0x104
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   104ac:	f042 0205 	orr.w	r2, r2, #5
		conn->llcp_cu.win_offset_us = 0U;
   104b0:	2300      	movs	r3, #0
		conn->llcp_cu.win_size = 1U;
   104b2:	f880 1114 	strb.w	r1, [r0, #276]	; 0x114
		conn->llcp_cu.latency = latency;
   104b6:	f8a0 810a 	strh.w	r8, [r0, #266]	; 0x10a
		conn->llcp_cu.timeout = timeout;
   104ba:	f8a0 710c 	strh.w	r7, [r0, #268]	; 0x10c
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   104be:	f880 2106 	strb.w	r2, [r0, #262]	; 0x106
		conn->llcp_cu.win_offset_us = 0U;
   104c2:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
	return 0;
   104c6:	4618      	mov	r0, r3
}
   104c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   104cc:	200c      	movs	r0, #12
}
   104ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   104d2:	2002      	movs	r0, #2
}
   104d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		    (!conn->common.fex_valid ||
   104d8:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   104dc:	07da      	lsls	r2, r3, #31
   104de:	d503      	bpl.n	104e8 <ll_conn_update+0xd4>
		     (conn->llcp_feature.features_conn &
   104e0:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
		    (!conn->common.fex_valid ||
   104e4:	079b      	lsls	r3, r3, #30
   104e6:	d5cd      	bpl.n	10484 <ll_conn_update+0x70>
			if (conn->llcp_conn_param.req !=
   104e8:	f890 2170 	ldrb.w	r2, [r0, #368]	; 0x170
   104ec:	f890 3171 	ldrb.w	r3, [r0, #369]	; 0x171
   104f0:	4293      	cmp	r3, r2
   104f2:	d1eb      	bne.n	104cc <ll_conn_update+0xb8>
			conn->llcp_conn_param.state = cmd;
   104f4:	f8b0 2172 	ldrh.w	r2, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   104f8:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   104fc:	f8a0 5174 	strh.w	r5, [r0, #372]	; 0x174
			conn->llcp_conn_param.state = cmd;
   10500:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   10504:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   10506:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1050a:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   1050c:	f8a0 9176 	strh.w	r9, [r0, #374]	; 0x176
			conn->llcp_conn_param.req++;
   10510:	f880 3170 	strb.w	r3, [r0, #368]	; 0x170
			conn->llcp_conn_param.latency = latency;
   10514:	f8a0 8178 	strh.w	r8, [r0, #376]	; 0x178
			conn->llcp_conn_param.timeout = timeout;
   10518:	f8a0 717a 	strh.w	r7, [r0, #378]	; 0x17a
			conn->llcp_conn_param.state = cmd;
   1051c:	f8a0 2172 	strh.w	r2, [r0, #370]	; 0x172
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   10520:	db03      	blt.n	1052a <ll_conn_update+0x116>
	return 0;
   10522:	2000      	movs	r0, #0
   10524:	e7d3      	b.n	104ce <ll_conn_update+0xba>
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   10526:	201a      	movs	r0, #26
   10528:	e7d1      	b.n	104ce <ll_conn_update+0xba>
				ull_slave_latency_cancel(conn, handle);
   1052a:	2100      	movs	r1, #0
   1052c:	f002 fd84 	bl	13038 <ull_slave_latency_cancel>
	return 0;
   10530:	2000      	movs	r0, #0
   10532:	e7cc      	b.n	104ce <ll_conn_update+0xba>
   10534:	20001f58 	.word	0x20001f58

00010538 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10538:	b9d0      	cbnz	r0, 10570 <ll_chm_get+0x38>
{
   1053a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1053c:	4602      	mov	r2, r0
   1053e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10540:	480c      	ldr	r0, [pc, #48]	; (10574 <ll_chm_get+0x3c>)
   10542:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10546:	f7fa fe8d 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   1054a:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1054c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   1054e:	b96e      	cbnz	r6, 1056c <ll_chm_get+0x34>
   10550:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   10554:	f884 61c4 	strb.w	r6, [r4, #452]	; 0x1c4
		memcpy(chm, conn->lll.data_chan_map,
   10558:	2205      	movs	r2, #5
   1055a:	4639      	mov	r1, r7
   1055c:	4628      	mov	r0, r5
   1055e:	f00b fa64 	bl	1ba2a <memcpy>
	} while (conn->chm_updated);
   10562:	f894 01c4 	ldrb.w	r0, [r4, #452]	; 0x1c4
   10566:	2800      	cmp	r0, #0
   10568:	d1f4      	bne.n	10554 <ll_chm_get+0x1c>
}
   1056a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1056c:	2002      	movs	r0, #2
}
   1056e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10570:	2002      	movs	r0, #2
}
   10572:	4770      	bx	lr
   10574:	20001f58 	.word	0x20001f58

00010578 <ll_terminate_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10578:	b9e8      	cbnz	r0, 105b6 <ll_terminate_ind_send+0x3e>
{
   1057a:	b538      	push	{r3, r4, r5, lr}
   1057c:	4602      	mov	r2, r0
   1057e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10580:	480e      	ldr	r0, [pc, #56]	; (105bc <ll_terminate_ind_send+0x44>)
   10582:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10586:	f7fa fe6d 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   1058a:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   1058c:	b964      	cbnz	r4, 105a8 <ll_terminate_ind_send+0x30>
	conn->llcp_terminate.req++;
   1058e:	f890 212c 	ldrb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10592:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   10596:	f880 512e 	strb.w	r5, [r0, #302]	; 0x12e
	conn->llcp_terminate.req++;
   1059a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1059c:	2900      	cmp	r1, #0
	conn->llcp_terminate.req++;
   1059e:	f880 212c 	strb.w	r2, [r0, #300]	; 0x12c
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   105a2:	db03      	blt.n	105ac <ll_terminate_ind_send+0x34>
	return 0;
   105a4:	4620      	mov	r0, r4
}
   105a6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   105a8:	2002      	movs	r0, #2
}
   105aa:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   105ac:	4621      	mov	r1, r4
   105ae:	f002 fd43 	bl	13038 <ull_slave_latency_cancel>
	return 0;
   105b2:	4620      	mov	r0, r4
}
   105b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   105b6:	2002      	movs	r0, #2
}
   105b8:	4770      	bx	lr
   105ba:	bf00      	nop
   105bc:	20001f58 	.word	0x20001f58

000105c0 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   105c0:	b9d8      	cbnz	r0, 105fa <ll_feature_req_send+0x3a>
{
   105c2:	b510      	push	{r4, lr}
   105c4:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   105c6:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   105ca:	480f      	ldr	r0, [pc, #60]	; (10608 <ll_feature_req_send+0x48>)
   105cc:	f7fa fe4a 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   105d0:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   105d2:	b984      	cbnz	r4, 105f6 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   105d4:	f890 1118 	ldrb.w	r1, [r0, #280]	; 0x118
   105d8:	f890 2119 	ldrb.w	r2, [r0, #281]	; 0x119
   105dc:	428a      	cmp	r2, r1
   105de:	d108      	bne.n	105f2 <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   105e0:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   105e4:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   105e6:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   105e8:	f880 2118 	strb.w	r2, [r0, #280]	; 0x118
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   105ec:	db07      	blt.n	105fe <ll_feature_req_send+0x3e>
	return 0;
   105ee:	4620      	mov	r0, r4
}
   105f0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   105f2:	200c      	movs	r0, #12
}
   105f4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   105f6:	2002      	movs	r0, #2
}
   105f8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   105fa:	2002      	movs	r0, #2
}
   105fc:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   105fe:	4621      	mov	r1, r4
   10600:	f002 fd1a 	bl	13038 <ull_slave_latency_cancel>
	return 0;
   10604:	4620      	mov	r0, r4
}
   10606:	bd10      	pop	{r4, pc}
   10608:	20001f58 	.word	0x20001f58

0001060c <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1060c:	b9d8      	cbnz	r0, 10646 <ll_version_ind_send+0x3a>
{
   1060e:	b510      	push	{r4, lr}
   10610:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10612:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10616:	480f      	ldr	r0, [pc, #60]	; (10654 <ll_version_ind_send+0x48>)
   10618:	f7fa fe24 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   1061c:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   1061e:	b984      	cbnz	r4, 10642 <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   10620:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   10624:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   10628:	428a      	cmp	r2, r1
   1062a:	d108      	bne.n	1063e <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1062c:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   10630:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10632:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   10634:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10638:	db07      	blt.n	1064a <ll_version_ind_send+0x3e>
	return 0;
   1063a:	4620      	mov	r0, r4
}
   1063c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1063e:	200c      	movs	r0, #12
}
   10640:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10642:	2002      	movs	r0, #2
}
   10644:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10646:	2002      	movs	r0, #2
}
   10648:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   1064a:	4621      	mov	r1, r4
   1064c:	f002 fcf4 	bl	13038 <ull_slave_latency_cancel>
	return 0;
   10650:	4620      	mov	r0, r4
}
   10652:	bd10      	pop	{r4, pc}
   10654:	20001f58 	.word	0x20001f58

00010658 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10658:	2800      	cmp	r0, #0
   1065a:	d147      	bne.n	106ec <ll_length_req_send+0x94>
{
   1065c:	b538      	push	{r3, r4, r5, lr}
   1065e:	460d      	mov	r5, r1
   10660:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10662:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10666:	4602      	mov	r2, r0
   10668:	4824      	ldr	r0, [pc, #144]	; (106fc <ll_length_req_send+0xa4>)
   1066a:	f7fa fdfb 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   1066e:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   10670:	bb1b      	cbnz	r3, 106ba <ll_length_req_send+0x62>
	if (conn->llcp_length.disabled ||
   10672:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   10676:	071a      	lsls	r2, r3, #28
   10678:	d421      	bmi.n	106be <ll_length_req_send+0x66>
	    (conn->common.fex_valid &&
   1067a:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   1067e:	07d1      	lsls	r1, r2, #31
   10680:	d503      	bpl.n	1068a <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   10682:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
	    (conn->common.fex_valid &&
   10686:	0692      	lsls	r2, r2, #26
   10688:	d519      	bpl.n	106be <ll_length_req_send+0x66>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   1068a:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   1068e:	f890 2199 	ldrb.w	r2, [r0, #409]	; 0x199
   10692:	428a      	cmp	r2, r1
   10694:	d017      	beq.n	106c6 <ll_length_req_send+0x6e>
		switch (conn->llcp_length.state) {
   10696:	f003 0307 	and.w	r3, r3, #7
   1069a:	2b03      	cmp	r3, #3
   1069c:	d004      	beq.n	106a8 <ll_length_req_send+0x50>
   1069e:	3303      	adds	r3, #3
   106a0:	f003 0307 	and.w	r3, r3, #7
   106a4:	2b01      	cmp	r3, #1
   106a6:	d80c      	bhi.n	106c2 <ll_length_req_send+0x6a>
			if (!conn->llcp_length.cache.tx_octets) {
   106a8:	f8b0 31a4 	ldrh.w	r3, [r0, #420]	; 0x1a4
   106ac:	b94b      	cbnz	r3, 106c2 <ll_length_req_send+0x6a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   106ae:	f8a0 51a4 	strh.w	r5, [r0, #420]	; 0x1a4
				conn->llcp_length.cache.tx_time = tx_time;
   106b2:	f8a0 41a6 	strh.w	r4, [r0, #422]	; 0x1a6
				return 0;
   106b6:	4618      	mov	r0, r3
}
   106b8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   106ba:	2002      	movs	r0, #2
}
   106bc:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   106be:	201a      	movs	r0, #26
}
   106c0:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   106c2:	200c      	movs	r0, #12
}
   106c4:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   106c6:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   106ca:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_length.tx_octets = tx_octets;
   106ce:	f8a0 519e 	strh.w	r5, [r0, #414]	; 0x19e
	conn->llcp_length.req++;
   106d2:	3201      	adds	r2, #1
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   106d4:	f36f 0302 	bfc	r3, #0, #3
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   106d8:	2900      	cmp	r1, #0
	conn->llcp_length.req++;
   106da:	f880 2198 	strb.w	r2, [r0, #408]	; 0x198
	conn->llcp_length.tx_time = tx_time;
   106de:	f8a0 41a2 	strh.w	r4, [r0, #418]	; 0x1a2
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   106e2:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   106e6:	db03      	blt.n	106f0 <ll_length_req_send+0x98>
	return 0;
   106e8:	2000      	movs	r0, #0
}
   106ea:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   106ec:	2002      	movs	r0, #2
}
   106ee:	4770      	bx	lr
		ull_slave_latency_cancel(conn, handle);
   106f0:	2100      	movs	r1, #0
   106f2:	f002 fca1 	bl	13038 <ull_slave_latency_cancel>
	return 0;
   106f6:	2000      	movs	r0, #0
}
   106f8:	bd38      	pop	{r3, r4, r5, pc}
   106fa:	bf00      	nop
   106fc:	20001f58 	.word	0x20001f58

00010700 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   10700:	4a03      	ldr	r2, [pc, #12]	; (10710 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   10702:	4b04      	ldr	r3, [pc, #16]	; (10714 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   10704:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   10706:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   10708:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   1070a:	800b      	strh	r3, [r1, #0]
}
   1070c:	4770      	bx	lr
   1070e:	bf00      	nop
   10710:	20002920 	.word	0x20002920
   10714:	20002922 	.word	0x20002922

00010718 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   10718:	4a02      	ldr	r2, [pc, #8]	; (10724 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   1071a:	4b03      	ldr	r3, [pc, #12]	; (10728 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   1071c:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   1071e:	8019      	strh	r1, [r3, #0]
}
   10720:	2000      	movs	r0, #0
   10722:	4770      	bx	lr
   10724:	20002920 	.word	0x20002920
   10728:	20002922 	.word	0x20002922

0001072c <ll_length_max_get>:
{
   1072c:	b430      	push	{r4, r5}
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   1072e:	251b      	movs	r5, #27
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10730:	f44f 6429 	mov.w	r4, #2704	; 0xa90
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10734:	8005      	strh	r5, [r0, #0]
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   10736:	8015      	strh	r5, [r2, #0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   10738:	800c      	strh	r4, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   1073a:	801c      	strh	r4, [r3, #0]
}
   1073c:	bc30      	pop	{r4, r5}
   1073e:	4770      	bx	lr

00010740 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10740:	b9c0      	cbnz	r0, 10774 <ll_phy_get+0x34>
{
   10742:	b538      	push	{r3, r4, r5, lr}
   10744:	460d      	mov	r5, r1
   10746:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10748:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1074c:	4602      	mov	r2, r0
   1074e:	480a      	ldr	r0, [pc, #40]	; (10778 <ll_phy_get+0x38>)
   10750:	f7fa fd88 	bl	b264 <mem_get>
   10754:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   10756:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10758:	b950      	cbnz	r0, 10770 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   1075a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   1075e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   10762:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   10764:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   10768:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1076c:	7023      	strb	r3, [r4, #0]
}
   1076e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10770:	2002      	movs	r0, #2
}
   10772:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10774:	2002      	movs	r0, #2
}
   10776:	4770      	bx	lr
   10778:	20001f58 	.word	0x20001f58

0001077c <ll_phy_default_set>:
	default_phy_tx = tx;
   1077c:	4a02      	ldr	r2, [pc, #8]	; (10788 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   1077e:	4b03      	ldr	r3, [pc, #12]	; (1078c <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   10780:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   10782:	7019      	strb	r1, [r3, #0]
}
   10784:	2000      	movs	r0, #0
   10786:	4770      	bx	lr
   10788:	200029cc 	.word	0x200029cc
   1078c:	200029cb 	.word	0x200029cb

00010790 <ll_phy_req_send>:
{
   10790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   10792:	2800      	cmp	r0, #0
   10794:	d148      	bne.n	10828 <ll_phy_req_send+0x98>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10796:	460c      	mov	r4, r1
   10798:	4615      	mov	r5, r2
   1079a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1079e:	4602      	mov	r2, r0
   107a0:	4824      	ldr	r0, [pc, #144]	; (10834 <ll_phy_req_send+0xa4>)
   107a2:	461e      	mov	r6, r3
   107a4:	f7fa fd5e 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   107a8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   107aa:	bbeb      	cbnz	r3, 10828 <ll_phy_req_send+0x98>
	if (conn->llcp_phy.disabled ||
   107ac:	f890 71ab 	ldrb.w	r7, [r0, #427]	; 0x1ab
   107b0:	f017 0708 	ands.w	r7, r7, #8
   107b4:	d13b      	bne.n	1082e <ll_phy_req_send+0x9e>
	    (conn->common.fex_valid &&
   107b6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   107ba:	07db      	lsls	r3, r3, #31
   107bc:	d504      	bpl.n	107c8 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   107be:	f8d0 311c 	ldr.w	r3, [r0, #284]	; 0x11c
   107c2:	f413 6f10 	tst.w	r3, #2304	; 0x900
   107c6:	d032      	beq.n	1082e <ll_phy_req_send+0x9e>
	if ((conn->llcp_req != conn->llcp_ack) ||
   107c8:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   107cc:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   107d0:	429a      	cmp	r2, r3
   107d2:	d126      	bne.n	10822 <ll_phy_req_send+0x92>
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   107d4:	f890 31a8 	ldrb.w	r3, [r0, #424]	; 0x1a8
	if ((conn->llcp_req != conn->llcp_ack) ||
   107d8:	f890 21a9 	ldrb.w	r2, [r0, #425]	; 0x1a9
   107dc:	429a      	cmp	r2, r3
   107de:	d120      	bne.n	10822 <ll_phy_req_send+0x92>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   107e0:	f004 0407 	and.w	r4, r4, #7
   107e4:	f8b0 11aa 	ldrh.w	r1, [r0, #426]	; 0x1aa
   107e8:	00a4      	lsls	r4, r4, #2
   107ea:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   107ee:	f006 0307 	and.w	r3, r6, #7
   107f2:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   107f6:	f005 0501 	and.w	r5, r5, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   107fa:	f990 403d 	ldrsb.w	r4, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   107fe:	f421 61df 	bic.w	r1, r1, #1784	; 0x6f8
   10802:	ea43 2345 	orr.w	r3, r3, r5, lsl #9
   10806:	f021 0107 	bic.w	r1, r1, #7
	conn->llcp_phy.req++;
   1080a:	3201      	adds	r2, #1
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   1080c:	430b      	orrs	r3, r1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1080e:	2c00      	cmp	r4, #0
	conn->llcp_phy.req++;
   10810:	f880 21a8 	strb.w	r2, [r0, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   10814:	f8a0 31aa 	strh.w	r3, [r0, #426]	; 0x1aa
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   10818:	da04      	bge.n	10824 <ll_phy_req_send+0x94>
		ull_slave_latency_cancel(conn, handle);
   1081a:	2100      	movs	r1, #0
   1081c:	f002 fc0c 	bl	13038 <ull_slave_latency_cancel>
   10820:	e000      	b.n	10824 <ll_phy_req_send+0x94>
		return BT_HCI_ERR_CMD_DISALLOWED;
   10822:	270c      	movs	r7, #12
}
   10824:	4638      	mov	r0, r7
   10826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10828:	2702      	movs	r7, #2
}
   1082a:	4638      	mov	r0, r7
   1082c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   1082e:	271a      	movs	r7, #26
}
   10830:	4638      	mov	r0, r7
   10832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10834:	20001f58 	.word	0x20001f58

00010838 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10838:	b9d8      	cbnz	r0, 10872 <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1083a:	4602      	mov	r2, r0
{
   1083c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1083e:	480e      	ldr	r0, [pc, #56]	; (10878 <ll_apto_get+0x40>)
   10840:	460c      	mov	r4, r1
   10842:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10846:	f7fa fd0d 	bl	b264 <mem_get>
   1084a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   1084c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1084e:	b970      	cbnz	r0, 1086e <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   10850:	f8b2 10d2 	ldrh.w	r1, [r2, #210]	; 0xd2
   10854:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   10856:	4a09      	ldr	r2, [pc, #36]	; (1087c <ll_apto_get+0x44>)
   10858:	fb03 f301 	mul.w	r3, r3, r1
   1085c:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   10860:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   10864:	fba2 2303 	umull	r2, r3, r2, r3
   10868:	099b      	lsrs	r3, r3, #6
   1086a:	8023      	strh	r3, [r4, #0]
}
   1086c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1086e:	2002      	movs	r0, #2
}
   10870:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   10872:	2002      	movs	r0, #2
}
   10874:	4770      	bx	lr
   10876:	bf00      	nop
   10878:	20001f58 	.word	0x20001f58
   1087c:	10624dd3 	.word	0x10624dd3

00010880 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   10880:	b9d8      	cbnz	r0, 108ba <ll_apto_set+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10882:	4602      	mov	r2, r0
{
   10884:	b538      	push	{r3, r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10886:	480e      	ldr	r0, [pc, #56]	; (108c0 <ll_apto_set+0x40>)
   10888:	460d      	mov	r5, r1
   1088a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   1088e:	f7fa fce9 	bl	b264 <mem_get>
   10892:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   10894:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10896:	b970      	cbnz	r0, 108b6 <ll_apto_set+0x36>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   10898:	8dd3      	ldrh	r3, [r2, #46]	; 0x2e
   1089a:	f240 44e2 	movw	r4, #1250	; 0x4e2
   1089e:	fb04 f403 	mul.w	r4, r4, r3
   108a2:	f242 7310 	movw	r3, #10000	; 0x2710
   108a6:	fb03 4305 	mla	r3, r3, r5, r4
   108aa:	3b01      	subs	r3, #1
   108ac:	fbb3 f3f4 	udiv	r3, r3, r4
   108b0:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   108b4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   108b6:	2002      	movs	r0, #2
}
   108b8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   108ba:	2002      	movs	r0, #2
}
   108bc:	4770      	bx	lr
   108be:	bf00      	nop
   108c0:	20001f58 	.word	0x20001f58

000108c4 <ull_conn_init>:
	err = init_reset();
   108c4:	f7ff b9d2 	b.w	fc6c <init_reset>

000108c8 <ull_conn_reset>:
{
   108c8:	b530      	push	{r4, r5, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   108ca:	2200      	movs	r2, #0
{
   108cc:	b085      	sub	sp, #20
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   108ce:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   108d2:	482b      	ldr	r0, [pc, #172]	; (10980 <ull_conn_reset+0xb8>)
   108d4:	f7fa fcc6 	bl	b264 <mem_get>
   108d8:	4604      	mov	r4, r0
	mark = ull_disable_mark(conn);
   108da:	f7fe fbb1 	bl	f040 <ull_disable_mark>
	LL_ASSERT(mark == conn);
   108de:	4284      	cmp	r4, r0
   108e0:	d00c      	beq.n	108fc <ull_conn_reset+0x34>
   108e2:	4a28      	ldr	r2, [pc, #160]	; (10984 <ull_conn_reset+0xbc>)
   108e4:	4928      	ldr	r1, [pc, #160]	; (10988 <ull_conn_reset+0xc0>)
   108e6:	4829      	ldr	r0, [pc, #164]	; (1098c <ull_conn_reset+0xc4>)
   108e8:	f240 6394 	movw	r3, #1684	; 0x694
   108ec:	f009 fa83 	bl	19df6 <printk>
   108f0:	4040      	eors	r0, r0
   108f2:	f380 8811 	msr	BASEPRI, r0
   108f6:	f04f 0003 	mov.w	r0, #3
   108fa:	df02      	svc	2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   108fc:	ad03      	add	r5, sp, #12
   108fe:	2203      	movs	r2, #3
	ret_cb = TICKER_STATUS_BUSY;
   10900:	2002      	movs	r0, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10902:	4611      	mov	r1, r2
	ret_cb = TICKER_STATUS_BUSY;
   10904:	9003      	str	r0, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   10906:	4b22      	ldr	r3, [pc, #136]	; (10990 <ull_conn_reset+0xc8>)
   10908:	9500      	str	r5, [sp, #0]
   1090a:	2000      	movs	r0, #0
   1090c:	f7fc f824 	bl	c958 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   10910:	4629      	mov	r1, r5
   10912:	f7fe fb6d 	bl	eff0 <ull_ticker_status_take>
	if (!ret) {
   10916:	b1f0      	cbz	r0, 10956 <ull_conn_reset+0x8e>
	conn->lll.link_tx_free = NULL;
   10918:	2300      	movs	r3, #0
   1091a:	67a3      	str	r3, [r4, #120]	; 0x78
	mark = ull_disable_unmark(conn);
   1091c:	4620      	mov	r0, r4
   1091e:	f7fe fb9b 	bl	f058 <ull_disable_unmark>
	LL_ASSERT(mark == conn);
   10922:	4284      	cmp	r4, r0
   10924:	d00c      	beq.n	10940 <ull_conn_reset+0x78>
   10926:	4a17      	ldr	r2, [pc, #92]	; (10984 <ull_conn_reset+0xbc>)
   10928:	4917      	ldr	r1, [pc, #92]	; (10988 <ull_conn_reset+0xc0>)
   1092a:	4818      	ldr	r0, [pc, #96]	; (1098c <ull_conn_reset+0xc4>)
   1092c:	f240 63a3 	movw	r3, #1699	; 0x6a3
   10930:	f009 fa61 	bl	19df6 <printk>
   10934:	4040      	eors	r0, r0
   10936:	f380 8811 	msr	BASEPRI, r0
   1093a:	f04f 0003 	mov.w	r0, #3
   1093e:	df02      	svc	2
	MFIFO_INIT(conn_ack);
   10940:	4914      	ldr	r1, [pc, #80]	; (10994 <ull_conn_reset+0xcc>)
	MFIFO_INIT(conn_tx);
   10942:	4815      	ldr	r0, [pc, #84]	; (10998 <ull_conn_reset+0xd0>)
	conn_upd_curr = NULL;
   10944:	4a15      	ldr	r2, [pc, #84]	; (1099c <ull_conn_reset+0xd4>)
	MFIFO_INIT(conn_tx);
   10946:	2300      	movs	r3, #0
   10948:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   1094a:	804b      	strh	r3, [r1, #2]
	conn_upd_curr = NULL;
   1094c:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1094e:	f7ff f98d 	bl	fc6c <init_reset>
}
   10952:	b005      	add	sp, #20
   10954:	bd30      	pop	{r4, r5, pc}
		ret = ull_disable(&conn->lll);
   10956:	f104 001c 	add.w	r0, r4, #28
   1095a:	f7fe fbad 	bl	f0b8 <ull_disable>
		LL_ASSERT(!ret);
   1095e:	2800      	cmp	r0, #0
   10960:	d0da      	beq.n	10918 <ull_conn_reset+0x50>
   10962:	4a08      	ldr	r2, [pc, #32]	; (10984 <ull_conn_reset+0xbc>)
   10964:	490e      	ldr	r1, [pc, #56]	; (109a0 <ull_conn_reset+0xd8>)
   10966:	4809      	ldr	r0, [pc, #36]	; (1098c <ull_conn_reset+0xc4>)
   10968:	f240 639d 	movw	r3, #1693	; 0x69d
   1096c:	f009 fa43 	bl	19df6 <printk>
   10970:	4040      	eors	r0, r0
   10972:	f380 8811 	msr	BASEPRI, r0
   10976:	f04f 0003 	mov.w	r0, #3
   1097a:	df02      	svc	2
   1097c:	e7cc      	b.n	10918 <ull_conn_reset+0x50>
   1097e:	bf00      	nop
   10980:	20001f58 	.word	0x20001f58
   10984:	00020020 	.word	0x00020020
   10988:	000200ec 	.word	0x000200ec
   1098c:	0001fcdc 	.word	0x0001fcdc
   10990:	0000efe5 	.word	0x0000efe5
   10994:	200007a4 	.word	0x200007a4
   10998:	200007e8 	.word	0x200007e8
   1099c:	20002120 	.word	0x20002120
   109a0:	0001fe0c 	.word	0x0001fe0c

000109a4 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   109a4:	4b01      	ldr	r3, [pc, #4]	; (109ac <ull_conn_default_tx_octets_get+0x8>)
}
   109a6:	8818      	ldrh	r0, [r3, #0]
   109a8:	4770      	bx	lr
   109aa:	bf00      	nop
   109ac:	20002920 	.word	0x20002920

000109b0 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   109b0:	4b01      	ldr	r3, [pc, #4]	; (109b8 <ull_conn_default_tx_time_get+0x8>)
}
   109b2:	8818      	ldrh	r0, [r3, #0]
   109b4:	4770      	bx	lr
   109b6:	bf00      	nop
   109b8:	20002922 	.word	0x20002922

000109bc <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   109bc:	4b01      	ldr	r3, [pc, #4]	; (109c4 <ull_conn_default_phy_tx_get+0x8>)
}
   109be:	7818      	ldrb	r0, [r3, #0]
   109c0:	4770      	bx	lr
   109c2:	bf00      	nop
   109c4:	200029cc 	.word	0x200029cc

000109c8 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   109c8:	4b01      	ldr	r3, [pc, #4]	; (109d0 <ull_conn_default_phy_rx_get+0x8>)
}
   109ca:	7818      	ldrb	r0, [r3, #0]
   109cc:	4770      	bx	lr
   109ce:	bf00      	nop
   109d0:	200029cb 	.word	0x200029cb

000109d4 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   109d4:	688b      	ldr	r3, [r1, #8]
   109d6:	689b      	ldr	r3, [r3, #8]
{
   109d8:	b510      	push	{r4, lr}
	switch (lll->role) {
   109da:	f893 4021 	ldrb.w	r4, [r3, #33]	; 0x21
   109de:	09e4      	lsrs	r4, r4, #7
   109e0:	d10d      	bne.n	109fe <ull_conn_setup+0x2a>
		LL_ASSERT(0);
   109e2:	4a0a      	ldr	r2, [pc, #40]	; (10a0c <ull_conn_setup+0x38>)
   109e4:	490a      	ldr	r1, [pc, #40]	; (10a10 <ull_conn_setup+0x3c>)
   109e6:	480b      	ldr	r0, [pc, #44]	; (10a14 <ull_conn_setup+0x40>)
   109e8:	f240 23fa 	movw	r3, #762	; 0x2fa
   109ec:	f009 fa03 	bl	19df6 <printk>
   109f0:	4040      	eors	r0, r0
   109f2:	f380 8811 	msr	BASEPRI, r0
   109f6:	f04f 0003 	mov.w	r0, #3
   109fa:	df02      	svc	2
}
   109fc:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   109fe:	460a      	mov	r2, r1
}
   10a00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ull_slave_setup(link, rx, ftr, lll);
   10a04:	3208      	adds	r2, #8
   10a06:	f7f2 bc33 	b.w	3270 <ull_slave_setup>
   10a0a:	bf00      	nop
   10a0c:	00020020 	.word	0x00020020
   10a10:	0001fd3c 	.word	0x0001fd3c
   10a14:	0001fcdc 	.word	0x0001fcdc

00010a18 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   10a18:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   10a1a:	88da      	ldrh	r2, [r3, #6]
   10a1c:	2a00      	cmp	r2, #0
   10a1e:	d15a      	bne.n	10ad6 <ull_conn_rx+0xbe>
{
   10a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10a24:	460d      	mov	r5, r1
   10a26:	b085      	sub	sp, #20
   10a28:	4607      	mov	r7, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   10a2a:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   10a2e:	48b2      	ldr	r0, [pc, #712]	; (10cf8 <ull_conn_rx+0x2e0>)
   10a30:	f7fa fc18 	bl	b264 <mem_get>
   10a34:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   10a36:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   10a38:	2800      	cmp	r0, #0
   10a3a:	f040 8092 	bne.w	10b62 <ull_conn_rx+0x14a>
	pdu_rx = (void *)(*rx)->pdu;
   10a3e:	682a      	ldr	r2, [r5, #0]
	switch (pdu_rx->ll_id) {
   10a40:	7f13      	ldrb	r3, [r2, #28]
   10a42:	f003 0303 	and.w	r3, r3, #3
   10a46:	2b03      	cmp	r3, #3
	pdu_rx = (void *)(*rx)->pdu;
   10a48:	4616      	mov	r6, r2
	switch (pdu_rx->ll_id) {
   10a4a:	d12a      	bne.n	10aa2 <ull_conn_rx+0x8a>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   10a4c:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	opcode = pdu_rx->llctrl.opcode;
   10a50:	f892 a01f 	ldrb.w	sl, [r2, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   10a54:	07d8      	lsls	r0, r3, #31
   10a56:	f140 808b 	bpl.w	10b70 <ull_conn_rx+0x158>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   10a5a:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   10a5e:	2a00      	cmp	r2, #0
   10a60:	f2c0 8638 	blt.w	116d4 <ull_conn_rx+0xcbc>
	return (!conn->lll.role &&
   10a64:	0759      	lsls	r1, r3, #29
   10a66:	f100 80e9 	bmi.w	10c3c <ull_conn_rx+0x224>
		((!conn->llcp_enc.refresh &&
   10a6a:	f1ba 0f02 	cmp.w	sl, #2
   10a6e:	f000 841b 	beq.w	112a8 <ull_conn_rx+0x890>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10a72:	f1ba 0f05 	cmp.w	sl, #5
   10a76:	f000 856b 	beq.w	11550 <ull_conn_rx+0xb38>
   10a7a:	f1ba 0f06 	cmp.w	sl, #6
   10a7e:	f000 86b2 	beq.w	117e6 <ull_conn_rx+0xdce>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   10a82:	f1ba 0f0d 	cmp.w	sl, #13
   10a86:	f000 8437 	beq.w	112f8 <ull_conn_rx+0x8e0>
   10a8a:	f1ba 0f11 	cmp.w	sl, #17
   10a8e:	f000 8328 	beq.w	110e2 <ull_conn_rx+0x6ca>
		conn->llcp_terminate.reason_peer =
   10a92:	233d      	movs	r3, #61	; 0x3d
   10a94:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10a98:	682b      	ldr	r3, [r5, #0]
   10a9a:	2203      	movs	r2, #3
   10a9c:	711a      	strb	r2, [r3, #4]

		return 0;
   10a9e:	2000      	movs	r0, #0
   10aa0:	e00b      	b.n	10aba <ull_conn_rx+0xa2>
	switch (pdu_rx->ll_id) {
   10aa2:	b96b      	cbnz	r3, 10ac0 <ull_conn_rx+0xa8>
		if (conn->llcp_enc.pause_rx) {
   10aa4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   10aa8:	07db      	lsls	r3, r3, #31
   10aaa:	d503      	bpl.n	10ab4 <ull_conn_rx+0x9c>
			conn->llcp_terminate.reason_peer =
   10aac:	233d      	movs	r3, #61	; 0x3d
   10aae:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
   10ab2:	682a      	ldr	r2, [r5, #0]
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10ab4:	2303      	movs	r3, #3
   10ab6:	7113      	strb	r3, [r2, #4]
	return 0;
   10ab8:	2000      	movs	r0, #0
}
   10aba:	b005      	add	sp, #20
   10abc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   10ac0:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   10ac4:	07da      	lsls	r2, r3, #31
   10ac6:	d5f7      	bpl.n	10ab8 <ull_conn_rx+0xa0>
			conn->llcp_terminate.reason_peer =
   10ac8:	233d      	movs	r3, #61	; 0x3d
   10aca:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10ace:	682b      	ldr	r3, [r5, #0]
   10ad0:	2203      	movs	r2, #3
   10ad2:	711a      	strb	r2, [r3, #4]
   10ad4:	e7f1      	b.n	10aba <ull_conn_rx+0xa2>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10ad6:	2203      	movs	r2, #3
   10ad8:	711a      	strb	r2, [r3, #4]
		return 0;
   10ada:	2000      	movs	r0, #0
}
   10adc:	4770      	bx	lr
			} else {
				struct pdu_data_llctrl *c = &pdu_rx->llctrl;
				struct pdu_data_llctrl_phy_req *p =
					&c->phy_req;

				conn->llcp_phy.state =
   10ade:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
					LLCP_PHY_STATE_UPD;

				if (conn->llcp_phy.ack ==
   10ae2:	428a      	cmp	r2, r1
				conn->llcp_phy.state =
   10ae4:	f043 0303 	orr.w	r3, r3, #3
   10ae8:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (conn->llcp_phy.ack ==
   10aec:	d114      	bne.n	10b18 <ull_conn_rx+0x100>
				    conn->llcp_phy.req) {
					conn->llcp_phy.ack--;

					conn->llcp_phy.cmd = 0U;

					conn->llcp_phy.tx =
   10aee:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
						conn->phy_pref_tx;
					conn->llcp_phy.rx =
						conn->phy_pref_rx;
   10af2:	f894 01ac 	ldrb.w	r0, [r4, #428]	; 0x1ac
					conn->llcp_phy.tx =
   10af6:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   10afa:	f000 0307 	and.w	r3, r0, #7
   10afe:	009b      	lsls	r3, r3, #2
   10b00:	f3c0 1002 	ubfx	r0, r0, #4, #3
   10b04:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   10b08:	f021 0104 	bic.w	r1, r1, #4
					conn->llcp_phy.ack--;
   10b0c:	3a01      	subs	r2, #1
					conn->llcp_phy.tx =
   10b0e:	430b      	orrs	r3, r1
					conn->llcp_phy.ack--;
   10b10:	f884 21a9 	strb.w	r2, [r4, #425]	; 0x1a9
					conn->llcp_phy.tx =
   10b14:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
				}

				conn->llcp_phy.tx &= p->rx_phys;
				conn->llcp_phy.rx &= p->tx_phys;
   10b18:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
				conn->llcp_phy.tx &= p->rx_phys;
   10b1c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
				conn->llcp_phy.rx &= p->tx_phys;
   10b20:	f896 1020 	ldrb.w	r1, [r6, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   10b24:	f3c2 0082 	ubfx	r0, r2, #2, #3
   10b28:	4003      	ands	r3, r0
				conn->llcp_phy.rx &= p->tx_phys;
   10b2a:	ea01 1152 	and.w	r1, r1, r2, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   10b2e:	009b      	lsls	r3, r3, #2
   10b30:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   10b34:	f002 0203 	and.w	r2, r2, #3
   10b38:	4313      	orrs	r3, r2

				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   10b3a:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   10b3e:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   10b42:	d002      	beq.n	10b4a <ull_conn_rx+0x132>
   10b44:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   10b48:	d105      	bne.n	10b56 <ull_conn_rx+0x13e>
					conn->llcp_phy.tx = 0;
   10b4a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   10b4e:	f003 0303 	and.w	r3, r3, #3
   10b52:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
					conn->llcp_phy.rx = 0;
				}

				/* pause data packet tx */
				conn->llcp_phy.pause_tx = 1U;
   10b56:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   10b5a:	f043 0301 	orr.w	r3, r3, #1
   10b5e:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab

				/* Mark for buffer for release */
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10b62:	682b      	ldr	r3, [r5, #0]
   10b64:	2203      	movs	r2, #3
	int nack = 0;
   10b66:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10b68:	711a      	strb	r2, [r3, #4]
}
   10b6a:	b005      	add	sp, #20
   10b6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	pdu_rx = (void *)(*rx)->pdu;
   10b70:	321c      	adds	r2, #28
	switch (opcode) {
   10b72:	f1ba 0f19 	cmp.w	sl, #25
   10b76:	d81f      	bhi.n	10bb8 <ull_conn_rx+0x1a0>
   10b78:	e8df f01a 	tbh	[pc, sl, lsl #1]
   10b7c:	043900c2 	.word	0x043900c2
   10b80:	049a0396 	.word	0x049a0396
   10b84:	04e504de 	.word	0x04e504de
   10b88:	04740504 	.word	0x04740504
   10b8c:	025e0432 	.word	0x025e0432
   10b90:	051e0210 	.word	0x051e0210
   10b94:	03be0402 	.word	0x03be0402
   10b98:	037b03ae 	.word	0x037b03ae
   10b9c:	02b302e8 	.word	0x02b302e8
   10ba0:	03a3029a 	.word	0x03a3029a
   10ba4:	00880088 	.word	0x00880088
   10ba8:	01a201df 	.word	0x01a201df
   10bac:	01300165 	.word	0x01300165
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   10bb0:	7f73      	ldrb	r3, [r6, #29]
   10bb2:	2b01      	cmp	r3, #1
   10bb4:	f000 8509 	beq.w	115ca <ull_conn_rx+0xbb2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10bb8:	4850      	ldr	r0, [pc, #320]	; (10cfc <ull_conn_rx+0x2e4>)
   10bba:	f7fa fb21 	bl	b200 <mem_acquire>
	if (!tx) {
   10bbe:	2800      	cmp	r0, #0
   10bc0:	f000 86d6 	beq.w	11970 <ull_conn_rx+0xf58>
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   10bc4:	2302      	movs	r3, #2
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10bc6:	7902      	ldrb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   10bc8:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   10bca:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu->llctrl.unknown_rsp.type = type;
   10bce:	f880 a008 	strb.w	sl, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10bd2:	f042 0203 	orr.w	r2, r2, #3
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   10bd6:	2107      	movs	r1, #7
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   10bd8:	7102      	strb	r2, [r0, #4]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   10bda:	71c1      	strb	r1, [r0, #7]
	if (
   10bdc:	b303      	cbz	r3, 10c20 <ull_conn_rx+0x208>
	    !conn->llcp_enc.pause_tx &&
   10bde:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	    conn->tx_head &&
   10be2:	0795      	lsls	r5, r2, #30
   10be4:	d41c      	bmi.n	10c20 <ull_conn_rx+0x208>
	    !conn->llcp_phy.pause_tx &&
   10be6:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
   10bea:	07d1      	lsls	r1, r2, #31
   10bec:	d418      	bmi.n	10c20 <ull_conn_rx+0x208>
		if (conn->tx_head == conn->tx_data) {
   10bee:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
   10bf2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   10bf4:	bf04      	itt	eq
   10bf6:	681a      	ldreq	r2, [r3, #0]
   10bf8:	f8c4 21bc 	streq.w	r2, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   10bfc:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   10c00:	b99a      	cbnz	r2, 10c2a <ull_conn_rx+0x212>
			tx->next = conn->tx_head->next;
   10c02:	681a      	ldr	r2, [r3, #0]
   10c04:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   10c06:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl = tx;
   10c08:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   10c0a:	e9c4 006d 	strd	r0, r0, [r4, #436]	; 0x1b4
	if (!tx->next) {
   10c0e:	2b00      	cmp	r3, #0
   10c10:	f000 858a 	beq.w	11728 <ull_conn_rx+0xd10>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10c14:	2303      	movs	r3, #3
	return 0;
   10c16:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10c18:	7133      	strb	r3, [r6, #4]
}
   10c1a:	b005      	add	sp, #20
   10c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (!conn->tx_ctrl) {
   10c20:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   10c24:	2a00      	cmp	r2, #0
   10c26:	f000 8583 	beq.w	11730 <ull_conn_rx+0xd18>
	tx->next = conn->tx_ctrl_last->next;
   10c2a:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   10c2e:	681a      	ldr	r2, [r3, #0]
   10c30:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   10c32:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   10c34:	6803      	ldr	r3, [r0, #0]
   10c36:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
}
   10c3a:	e7e8      	b.n	10c0e <ull_conn_rx+0x1f6>
		 (conn->llcp_enc.refresh &&
   10c3c:	f1ba 0f02 	cmp.w	sl, #2
   10c40:	f000 8332 	beq.w	112a8 <ull_conn_rx+0x890>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   10c44:	f1ba 0f0b 	cmp.w	sl, #11
   10c48:	f000 8579 	beq.w	1173e <ull_conn_rx+0xd26>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   10c4c:	f1ba 0f04 	cmp.w	sl, #4
   10c50:	f47f af0f 	bne.w	10a72 <ull_conn_rx+0x5a>
		if (conn->lll.role ||
   10c54:	7f73      	ldrb	r3, [r6, #29]
   10c56:	2b0d      	cmp	r3, #13
   10c58:	d1ae      	bne.n	10bb8 <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp.encryption.skd[8],
   10c5a:	2208      	movs	r2, #8
   10c5c:	f106 0120 	add.w	r1, r6, #32
   10c60:	f104 00f6 	add.w	r0, r4, #246	; 0xf6
   10c64:	f00a fee1 	bl	1ba2a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[4],
   10c68:	f106 0128 	add.w	r1, r6, #40	; 0x28
   10c6c:	2204      	movs	r2, #4
   10c6e:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   10c72:	f00a feda 	bl	1ba2a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   10c76:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10c7a:	682a      	ldr	r2, [r5, #0]
		conn->llcp_enc.pause_rx = 1U;
   10c7c:	f043 0301 	orr.w	r3, r3, #1
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10c80:	2103      	movs	r1, #3
		conn->llcp_enc.pause_rx = 1U;
   10c82:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   10c86:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10c88:	7111      	strb	r1, [r2, #4]
		break;
   10c8a:	e716      	b.n	10aba <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   10c8c:	7f73      	ldrb	r3, [r6, #29]
   10c8e:	2b09      	cmp	r3, #9
   10c90:	d192      	bne.n	10bb8 <ull_conn_rx+0x1a0>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   10c92:	f1ba 0f14 	cmp.w	sl, #20
   10c96:	f000 85ac 	beq.w	117f2 <ull_conn_rx+0xdda>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   10c9a:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
	if (/* Local idle, and Peer request then complete the Peer procedure
   10c9e:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   10ca2:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   10ca6:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   10ca8:	428a      	cmp	r2, r1
	eff_tx_octets = conn->lll.max_tx_octets;
   10caa:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   10cae:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   10cb2:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   10cb6:	9100      	str	r1, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   10cb8:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   10cba:	f001 818e 	beq.w	11fda <ull_conn_rx+0x15c2>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   10cbe:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	struct node_tx *tx = NULL;
   10cc2:	2100      	movs	r1, #0
	       tx) ||
   10cc4:	f002 0207 	and.w	r2, r2, #7
   10cc8:	2a02      	cmp	r2, #2
   10cca:	f000 85ab 	beq.w	11824 <ull_conn_rx+0xe0c>
   10cce:	f896 a01f 	ldrb.w	sl, [r6, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   10cd2:	f1ba 0f15 	cmp.w	sl, #21
   10cd6:	f43f aeef 	beq.w	10ab8 <ull_conn_rx+0xa0>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   10cda:	4608      	mov	r0, r1
   10cdc:	4907      	ldr	r1, [pc, #28]	; (10cfc <ull_conn_rx+0x2e4>)
   10cde:	f7fa faa9 	bl	b234 <mem_release>
			if (conn->llcp_length.state ==
   10ce2:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
   10ce6:	f003 0307 	and.w	r3, r3, #7
   10cea:	2b04      	cmp	r3, #4
   10cec:	f47f aee4 	bne.w	10ab8 <ull_conn_rx+0xa0>
				return -EBUSY;
   10cf0:	f06f 000f 	mvn.w	r0, #15
   10cf4:	e6e1      	b.n	10aba <ull_conn_rx+0xa2>
   10cf6:	bf00      	nop
   10cf8:	20001f58 	.word	0x20001f58
   10cfc:	200021a4 	.word	0x200021a4
		if (!conn->lll.role ||
   10d00:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10d04:	2b00      	cmp	r3, #0
   10d06:	f6bf af57 	bge.w	10bb8 <ull_conn_rx+0x1a0>
   10d0a:	7f73      	ldrb	r3, [r6, #29]
   10d0c:	2b0c      	cmp	r3, #12
   10d0e:	f47f af53 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   10d12:	f8b6 0029 	ldrh.w	r0, [r6, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   10d16:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   10d18:	1ac3      	subs	r3, r0, r3
   10d1a:	041b      	lsls	r3, r3, #16
   10d1c:	f101 804c 	bmi.w	11db8 <ull_conn_rx+0x13a0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   10d20:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10d24:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   10d28:	1a9b      	subs	r3, r3, r2
   10d2a:	f003 0303 	and.w	r3, r3, #3
   10d2e:	2b02      	cmp	r3, #2
   10d30:	f001 80b6 	beq.w	11ea0 <ull_conn_rx+0x1488>
	if (!conn_upd_curr) {
   10d34:	4bda      	ldr	r3, [pc, #872]	; (110a0 <ull_conn_rx+0x688>)
   10d36:	681a      	ldr	r2, [r3, #0]
   10d38:	2a00      	cmp	r2, #0
   10d3a:	f001 8103 	beq.w	11f44 <ull_conn_rx+0x152c>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   10d3e:	f896 3020 	ldrb.w	r3, [r6, #32]
   10d42:	f884 3114 	strb.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   10d46:	f8b6 1021 	ldrh.w	r1, [r6, #33]	; 0x21
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10d4a:	f894 3106 	ldrb.w	r3, [r4, #262]	; 0x106
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) * 1250;
   10d4e:	f240 42e2 	movw	r2, #1250	; 0x4e2
   10d52:	fb02 f201 	mul.w	r2, r2, r1
	conn->llcp_cu.win_offset_us =
   10d56:	f8c4 2110 	str.w	r2, [r4, #272]	; 0x110
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   10d5a:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
   10d5e:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   10d62:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.interval =
   10d66:	f8a4 2108 	strh.w	r2, [r4, #264]	; 0x108
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   10d6a:	f896 1026 	ldrb.w	r1, [r6, #38]	; 0x26
   10d6e:	f896 2025 	ldrb.w	r2, [r6, #37]	; 0x25
   10d72:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_cu.latency =
   10d76:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   10d7a:	f896 1027 	ldrb.w	r1, [r6, #39]	; 0x27
	conn->llcp_cu.ack--;
   10d7e:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   10d82:	f896 6028 	ldrb.w	r6, [r6, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   10d86:	f8a4 00ec 	strh.w	r0, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10d8a:	f023 0307 	bic.w	r3, r3, #7
	link->mem = conn->llcp_rx;
   10d8e:	f8d4 0100 	ldr.w	r0, [r4, #256]	; 0x100
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10d92:	f043 0304 	orr.w	r3, r3, #4
	conn->llcp_cu.ack--;
   10d96:	3a01      	subs	r2, #1
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   10d98:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
	conn->llcp_cu.ack--;
   10d9c:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   10da0:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
	conn->llcp_cu.timeout =
   10da4:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
	link->mem = conn->llcp_rx;
   10da8:	6078      	str	r0, [r7, #4]
	(*rx)->hdr.link = link;
   10daa:	682b      	ldr	r3, [r5, #0]
   10dac:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   10dae:	682b      	ldr	r3, [r5, #0]
   10db0:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   10db4:	2300      	movs	r3, #0
   10db6:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10db8:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   10dbc:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   10dc0:	4293      	cmp	r3, r2
   10dc2:	d007      	beq.n	10dd4 <ull_conn_rx+0x3bc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   10dc4:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   10dc8:	f003 0307 	and.w	r3, r3, #7
   10dcc:	2b04      	cmp	r3, #4
   10dce:	d101      	bne.n	10dd4 <ull_conn_rx+0x3bc>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   10dd0:	f884 2171 	strb.w	r2, [r4, #369]	; 0x171
		conn->procedure_expire = 0U;
   10dd4:	2000      	movs	r0, #0
   10dd6:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		break;
   10dda:	e66e      	b.n	10aba <ull_conn_rx+0xa2>
	break;
#endif /* CONFIG_BT_CTLR_PHY */

#if defined(CONFIG_BT_CTLR_MIN_USED_CHAN)
	case PDU_DATA_LLCTRL_TYPE_MIN_USED_CHAN_IND:
		if (conn->lll.role ||
   10ddc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10de0:	2b00      	cmp	r3, #0
   10de2:	f6ff aee9 	blt.w	10bb8 <ull_conn_rx+0x1a0>
   10de6:	7f77      	ldrb	r7, [r6, #29]
   10de8:	2f03      	cmp	r7, #3
   10dea:	f47f aee5 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
			struct pdu_data_llctrl_min_used_chans_ind *p =
				&pdu_rx->llctrl.min_used_chans_ind;

#if defined(CONFIG_BT_CTLR_PHY)
			if (!(p->phys & (conn->lll.phy_tx |
   10dee:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
					 conn->lll.phy_rx))) {
   10df2:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
			if (!(p->phys & (conn->lll.phy_tx |
   10df6:	f896 2020 	ldrb.w	r2, [r6, #32]
   10dfa:	430b      	orrs	r3, r1
   10dfc:	f003 0307 	and.w	r3, r3, #7
   10e00:	4213      	tst	r3, r2
   10e02:	f43f ae59 	beq.w	10ab8 <ull_conn_rx+0xa0>
			if (!(p->phys & 0x01)) {
#endif /* !CONFIG_BT_CTLR_PHY */
				break;
			}

			if (((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   10e06:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10e0a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   10e0e:	1a9b      	subs	r3, r3, r2
   10e10:	f003 0303 	and.w	r3, r3, #3
   10e14:	2b02      	cmp	r3, #2
   10e16:	f43f ae4f 	beq.w	10ab8 <ull_conn_rx+0xa0>
			    0x02) {
				break;
			}

			ull_chan_map_get(conn->llcp.chan_map.chm);
   10e1a:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   10e1e:	f002 f98d 	bl	1313c <ull_chan_map_get>
			/* conn->llcp.chan_map.instant     = 0; */
			conn->llcp.chan_map.initiate = 1U;

			conn->llcp_type = LLCP_CHAN_MAP;
			conn->llcp_ack -= 2U;
   10e22:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.chan_map.initiate = 1U;
   10e26:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp_ack -= 2U;
   10e2a:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_CHAN_MAP;
   10e2c:	2102      	movs	r1, #2
			conn->llcp_ack -= 2U;
   10e2e:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp_type = LLCP_CHAN_MAP;
   10e32:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		}

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10e36:	682a      	ldr	r2, [r5, #0]
			conn->llcp.chan_map.initiate = 1U;
   10e38:	f043 0301 	orr.w	r3, r3, #1
   10e3c:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	int nack = 0;
   10e40:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10e42:	7117      	strb	r7, [r2, #4]

		break;
   10e44:	e639      	b.n	10aba <ull_conn_rx+0xa2>
		if (!conn->lll.role ||
   10e46:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10e4a:	2b00      	cmp	r3, #0
   10e4c:	f6bf aeb4 	bge.w	10bb8 <ull_conn_rx+0x1a0>
   10e50:	7f73      	ldrb	r3, [r6, #29]
   10e52:	2b05      	cmp	r3, #5
   10e54:	f47f aeb0 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   10e58:	f896 1020 	ldrb.w	r1, [r6, #32]
   10e5c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   10e60:	ea41 0003 	orr.w	r0, r1, r3
   10e64:	f010 0007 	ands.w	r0, r0, #7
   10e68:	f040 8728 	bne.w	11cbc <ull_conn_rx+0x12a4>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   10e6c:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   10e70:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   10e74:	428b      	cmp	r3, r1
   10e76:	f43f aecd 	beq.w	10c14 <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   10e7a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   10e7e:	f003 0303 	and.w	r3, r3, #3
   10e82:	2b02      	cmp	r3, #2
   10e84:	f47f aec6 	bne.w	10c14 <ull_conn_rx+0x1fc>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   10e88:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   10e8c:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   10e90:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   10e94:	f360 0300 	bfi	r3, r0, #0, #1
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   10e98:	4611      	mov	r1, r2
   10e9a:	f362 1106 	bfi	r1, r2, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   10e9e:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		if (!conn->llcp_phy.cmd) {
   10ea2:	f013 0304 	ands.w	r3, r3, #4
		conn->procedure_expire = 0U;
   10ea6:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   10eaa:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   10eae:	f3c2 0202 	ubfx	r2, r2, #0, #3
		if (!conn->llcp_phy.cmd) {
   10eb2:	f041 81a6 	bne.w	12202 <ull_conn_rx+0x17ea>
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10eb6:	682a      	ldr	r2, [r5, #0]
   10eb8:	2103      	movs	r1, #3
	int nack = 0;
   10eba:	4618      	mov	r0, r3
			(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10ebc:	7111      	strb	r1, [r2, #4]
		if (err) {
   10ebe:	e5fc      	b.n	10aba <ull_conn_rx+0xa2>
		if (conn->lll.role ||
   10ec0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10ec4:	2b00      	cmp	r3, #0
   10ec6:	f6ff ae77 	blt.w	10bb8 <ull_conn_rx+0x1a0>
   10eca:	7f73      	ldrb	r3, [r6, #29]
   10ecc:	2b03      	cmp	r3, #3
   10ece:	f47f ae73 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   10ed2:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   10ed6:	f894 31a8 	ldrb.w	r3, [r4, #424]	; 0x1a8
   10eda:	429a      	cmp	r2, r3
   10edc:	f43f ae9a 	beq.w	10c14 <ull_conn_rx+0x1fc>
		    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   10ee0:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
		    (conn->llcp_phy.ack != conn->llcp_phy.req) &&
   10ee4:	f001 0303 	and.w	r3, r1, #3
   10ee8:	2b02      	cmp	r3, #2
   10eea:	f47f ae93 	bne.w	10c14 <ull_conn_rx+0x1fc>
			conn->llcp_phy.tx &= p->rx_phys;
   10eee:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
			conn->llcp_phy.rx &= p->tx_phys;
   10ef2:	f896 2020 	ldrb.w	r2, [r6, #32]
			conn->llcp_phy.tx &= p->rx_phys;
   10ef6:	f3c1 0082 	ubfx	r0, r1, #2, #3
   10efa:	4003      	ands	r3, r0
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   10efc:	009b      	lsls	r3, r3, #2
   10efe:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp_phy.rx &= p->tx_phys;
   10f02:	ea02 1251 	and.w	r2, r2, r1, lsr #5
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   10f06:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   10f0a:	f013 0f1c 	tst.w	r3, #28
			conn->llcp_phy.state = LLCP_PHY_STATE_UPD;
   10f0e:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   10f12:	d002      	beq.n	10f1a <ull_conn_rx+0x502>
   10f14:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   10f18:	d105      	bne.n	10f26 <ull_conn_rx+0x50e>
				conn->llcp_phy.tx = 0;
   10f1a:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   10f1e:	f003 0303 	and.w	r3, r3, #3
   10f22:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
			conn->llcp_phy.pause_tx = 1U;
   10f26:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   10f2a:	2200      	movs	r2, #0
			conn->llcp_phy.pause_tx = 1U;
   10f2c:	f043 0301 	orr.w	r3, r3, #1
   10f30:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			conn->procedure_expire = 0U;
   10f34:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   10f38:	e66c      	b.n	10c14 <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   10f3a:	7f73      	ldrb	r3, [r6, #29]
   10f3c:	2b03      	cmp	r3, #3
   10f3e:	f47f ae3b 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		if (!conn->lll.role) {
   10f42:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10f46:	2b00      	cmp	r3, #0
   10f48:	f2c0 8516 	blt.w	11978 <ull_conn_rx+0xf60>
			if ((conn->llcp_phy.ack !=
   10f4c:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
			     conn->llcp_phy.req) &&
   10f50:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
			if ((conn->llcp_phy.ack !=
   10f54:	428a      	cmp	r2, r1
   10f56:	d007      	beq.n	10f68 <ull_conn_rx+0x550>
			      LLCP_PHY_STATE_RSP_WAIT) ||
   10f58:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
   10f5c:	f003 0303 	and.w	r3, r3, #3
			     conn->llcp_phy.req) &&
   10f60:	3b01      	subs	r3, #1
   10f62:	2b02      	cmp	r3, #2
   10f64:	f240 8730 	bls.w	11dc8 <ull_conn_rx+0x13b0>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   10f68:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   10f6c:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   10f70:	1a1b      	subs	r3, r3, r0
   10f72:	f003 0303 	and.w	r3, r3, #3
   10f76:	2b02      	cmp	r3, #2
   10f78:	f000 8699 	beq.w	11cae <ull_conn_rx+0x1296>
				     LLCP_ENCRYPTION)) ||
   10f7c:	f894 0170 	ldrb.w	r0, [r4, #368]	; 0x170
   10f80:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   10f84:	4298      	cmp	r0, r3
   10f86:	f43f adaa 	beq.w	10ade <ull_conn_rx+0xc6>
				nack = reject_ext_ind_send(conn, *rx,
   10f8a:	1d31      	adds	r1, r6, #4
   10f8c:	4620      	mov	r0, r4
   10f8e:	232a      	movs	r3, #42	; 0x2a
   10f90:	2216      	movs	r2, #22
}
   10f92:	b005      	add	sp, #20
   10f94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   10f98:	f7ff b81e 	b.w	ffd8 <reject_ext_ind_send.isra.0>
		if (!conn->lll.role ||
   10f9c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   10fa0:	2b00      	cmp	r3, #0
   10fa2:	f6bf ae09 	bge.w	10bb8 <ull_conn_rx+0x1a0>
   10fa6:	7f75      	ldrb	r5, [r6, #29]
   10fa8:	2d01      	cmp	r5, #1
   10faa:	f47f ae05 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   10fae:	483d      	ldr	r0, [pc, #244]	; (110a4 <ull_conn_rx+0x68c>)
   10fb0:	f7fa f926 	bl	b200 <mem_acquire>
		if (!tx) {
   10fb4:	4603      	mov	r3, r0
   10fb6:	2800      	cmp	r0, #0
   10fb8:	f000 84da 	beq.w	11970 <ull_conn_rx+0xf58>
	conn->llcp_enc.pause_rx = 1U;
   10fbc:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   10fc0:	f894 107e 	ldrb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   10fc4:	f022 0205 	bic.w	r2, r2, #5
	conn->lll.enc_rx = 0;
   10fc8:	f36f 01c3 	bfc	r1, #3, #1
   10fcc:	f884 107e 	strb.w	r1, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   10fd0:	f042 0205 	orr.w	r2, r2, #5
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10fd4:	7901      	ldrb	r1, [r0, #4]
	conn->llcp_enc.pause_rx = 1U;
   10fd6:	f884 2152 	strb.w	r2, [r4, #338]	; 0x152
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   10fda:	7145      	strb	r5, [r0, #5]
	    conn->tx_head &&
   10fdc:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10fe0:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   10fe4:	200b      	movs	r0, #11
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   10fe6:	7119      	strb	r1, [r3, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   10fe8:	71d8      	strb	r0, [r3, #7]
	if (
   10fea:	2a00      	cmp	r2, #0
   10fec:	f000 83f0 	beq.w	117d0 <ull_conn_rx+0xdb8>
	    !conn->llcp_enc.pause_tx &&
   10ff0:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   10ff4:	0788      	lsls	r0, r1, #30
   10ff6:	f100 83eb 	bmi.w	117d0 <ull_conn_rx+0xdb8>
	    !conn->llcp_phy.pause_tx &&
   10ffa:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   10ffe:	07c9      	lsls	r1, r1, #31
   11000:	f100 83e6 	bmi.w	117d0 <ull_conn_rx+0xdb8>
		if (conn->tx_head == conn->tx_data) {
   11004:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   11008:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   1100a:	bf04      	itt	eq
   1100c:	6811      	ldreq	r1, [r2, #0]
   1100e:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   11012:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   11016:	2900      	cmp	r1, #0
   11018:	f001 80b5 	beq.w	12186 <ull_conn_rx+0x176e>
	tx->next = conn->tx_ctrl_last->next;
   1101c:	f8d4 21b8 	ldr.w	r2, [r4, #440]	; 0x1b8
   11020:	6811      	ldr	r1, [r2, #0]
   11022:	6019      	str	r1, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   11024:	6013      	str	r3, [r2, #0]
	conn->tx_ctrl_last = tx;
   11026:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
	if (!tx->next) {
   1102a:	681a      	ldr	r2, [r3, #0]
   1102c:	2a00      	cmp	r2, #0
   1102e:	f47f adf1 	bne.w	10c14 <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   11032:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   11036:	e5ed      	b.n	10c14 <ull_conn_rx+0x1fc>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   11038:	7f73      	ldrb	r3, [r6, #29]
   1103a:	2b09      	cmp	r3, #9
   1103c:	f47f adbc 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	       (features[1] << 8) | (features[2] << 16);
   11040:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   11044:	f896 0021 	ldrb.w	r0, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   11048:	f896 1020 	ldrb.w	r1, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   1104c:	4a16      	ldr	r2, [pc, #88]	; (110a8 <ull_conn_rx+0x690>)
   1104e:	041b      	lsls	r3, r3, #16
   11050:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
   11054:	430b      	orrs	r3, r1
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   11056:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1105a:	4914      	ldr	r1, [pc, #80]	; (110ac <ull_conn_rx+0x694>)
	       (features[1] << 8) | (features[2] << 16);
   1105c:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1105e:	4003      	ands	r3, r0
   11060:	f3c3 0310 	ubfx	r3, r3, #0, #17
   11064:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
	       (features[1] << 8) | (features[2] << 16);
   11068:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
   1106c:	f896 5021 	ldrb.w	r5, [r6, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   11070:	f896 0020 	ldrb.w	r0, [r6, #32]
	       (features[1] << 8) | (features[2] << 16);
   11074:	041b      	lsls	r3, r3, #16
   11076:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1107a:	4303      	orrs	r3, r0
	conn->common.fex_valid = 1U;
   1107c:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
	conn->llcp_feature.ack = conn->llcp_feature.req;
   11080:	f894 5118 	ldrb.w	r5, [r4, #280]	; 0x118
   11084:	f884 5119 	strb.w	r5, [r4, #281]	; 0x119
	       (features[1] << 8) | (features[2] << 16);
   11088:	4313      	orrs	r3, r2
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1108a:	4019      	ands	r1, r3
	conn->common.fex_valid = 1U;
   1108c:	f040 0301 	orr.w	r3, r0, #1
	conn->procedure_expire = 0U;
   11090:	2000      	movs	r0, #0
	conn->llcp_feature.features_peer =
   11092:	f8c4 1120 	str.w	r1, [r4, #288]	; 0x120
	conn->common.fex_valid = 1U;
   11096:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	conn->procedure_expire = 0U;
   1109a:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
}
   1109e:	e50c      	b.n	10aba <ull_conn_rx+0xa2>
   110a0:	20002120 	.word	0x20002120
   110a4:	200021a4 	.word	0x200021a4
   110a8:	fffe30d0 	.word	0xfffe30d0
   110ac:	0001ff7f 	.word	0x0001ff7f
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   110b0:	7f75      	ldrb	r5, [r6, #29]
   110b2:	2d01      	cmp	r5, #1
   110b4:	f47f ad80 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   110b8:	48e8      	ldr	r0, [pc, #928]	; (1145c <ull_conn_rx+0xa44>)
   110ba:	f7fa f8a1 	bl	b200 <mem_acquire>
	if (!tx) {
   110be:	4601      	mov	r1, r0
   110c0:	2800      	cmp	r0, #0
   110c2:	f000 8455 	beq.w	11970 <ull_conn_rx+0xf58>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   110c6:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   110c8:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   110ca:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   110ce:	2213      	movs	r2, #19
	ctrl_tx_sec_enqueue(conn, tx);
   110d0:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   110d2:	710b      	strb	r3, [r1, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   110d4:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   110d6:	f7ff f833 	bl	10140 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   110da:	2303      	movs	r3, #3
   110dc:	7133      	strb	r3, [r6, #4]
	return 0;
   110de:	2000      	movs	r0, #0
   110e0:	e4eb      	b.n	10aba <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   110e2:	7f73      	ldrb	r3, [r6, #29]
   110e4:	2b03      	cmp	r3, #3
   110e6:	f47f ad67 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	switch (rej_ext_ind->reject_opcode) {
   110ea:	f896 3020 	ldrb.w	r3, [r6, #32]
   110ee:	3b03      	subs	r3, #3
   110f0:	2b13      	cmp	r3, #19
   110f2:	f63f ad8f 	bhi.w	10c14 <ull_conn_rx+0x1fc>
   110f6:	a201      	add	r2, pc, #4	; (adr r2, 110fc <ull_conn_rx+0x6e4>)
   110f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   110fc:	0001167d 	.word	0x0001167d
   11100:	00010c15 	.word	0x00010c15
   11104:	00010c15 	.word	0x00010c15
   11108:	00010c15 	.word	0x00010c15
   1110c:	00010c15 	.word	0x00010c15
   11110:	00010c15 	.word	0x00010c15
   11114:	00010c15 	.word	0x00010c15
   11118:	00010c15 	.word	0x00010c15
   1111c:	00010c15 	.word	0x00010c15
   11120:	00010c15 	.word	0x00010c15
   11124:	00010c15 	.word	0x00010c15
   11128:	00010c15 	.word	0x00010c15
   1112c:	00011617 	.word	0x00011617
   11130:	00010c15 	.word	0x00010c15
   11134:	00010c15 	.word	0x00010c15
   11138:	00010c15 	.word	0x00010c15
   1113c:	00010c15 	.word	0x00010c15
   11140:	000115db 	.word	0x000115db
   11144:	00010c15 	.word	0x00010c15
   11148:	000116bb 	.word	0x000116bb
		if (conn->lll.role ||
   1114c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   11150:	2b00      	cmp	r3, #0
   11152:	f6ff ad31 	blt.w	10bb8 <ull_conn_rx+0x1a0>
   11156:	7f73      	ldrb	r3, [r6, #29]
   11158:	2b18      	cmp	r3, #24
   1115a:	f47f ad2d 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		if (!conn->lll.role &&
   1115e:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   11162:	f894 3171 	ldrb.w	r3, [r4, #369]	; 0x171
   11166:	429a      	cmp	r2, r3
   11168:	f43f ad54 	beq.w	10c14 <ull_conn_rx+0x1fc>
		    (conn->llcp_conn_param.state ==
   1116c:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
		     conn->llcp_conn_param.ack) &&
   11170:	f003 0307 	and.w	r3, r3, #7
   11174:	2b04      	cmp	r3, #4
   11176:	f47f ad4d 	bne.w	10c14 <ull_conn_rx+0x1fc>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1117a:	f8b6 e020 	ldrh.w	lr, [r6, #32]
   1117e:	fa1f f28e 	uxth.w	r2, lr
			if ((interval_min < 6) ||
   11182:	2a05      	cmp	r2, #5
   11184:	f240 8612 	bls.w	11dac <ull_conn_rx+0x1394>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11188:	f8b6 c022 	ldrh.w	ip, [r6, #34]	; 0x22
   1118c:	fa1f f38c 	uxth.w	r3, ip
			if ((interval_min < 6) ||
   11190:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   11194:	f200 860a 	bhi.w	11dac <ull_conn_rx+0x1394>
			    (interval_max > 3200) ||
   11198:	429a      	cmp	r2, r3
   1119a:	f200 8607 	bhi.w	11dac <ull_conn_rx+0x1394>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1119e:	8cb7      	ldrh	r7, [r6, #36]	; 0x24
   111a0:	b2ba      	uxth	r2, r7
			    (interval_min > interval_max) ||
   111a2:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   111a6:	f080 8601 	bcs.w	11dac <ull_conn_rx+0x1394>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   111aa:	8cf0      	ldrh	r0, [r6, #38]	; 0x26
   111ac:	fa1f f880 	uxth.w	r8, r0
			    (latency > 499) ||
   111b0:	f1a8 010a 	sub.w	r1, r8, #10
   111b4:	b289      	uxth	r1, r1
   111b6:	f640 4976 	movw	r9, #3190	; 0xc76
   111ba:	4549      	cmp	r1, r9
   111bc:	f200 85f6 	bhi.w	11dac <ull_conn_rx+0x1394>
			     ((latency + 1) * interval_max)) ||
   111c0:	fb02 3203 	mla	r2, r2, r3, r3
			    (timeout < 10) || (timeout > 3200) ||
   111c4:	ebb2 0f88 	cmp.w	r2, r8, lsl #2
   111c8:	f080 85f0 	bcs.w	11dac <ull_conn_rx+0x1394>
			     ((latency + 1) * interval_max)) ||
   111cc:	f896 1028 	ldrb.w	r1, [r6, #40]	; 0x28
   111d0:	428b      	cmp	r3, r1
   111d2:	f0c0 85eb 	bcc.w	11dac <ull_conn_rx+0x1394>
			conn->procedure_expire = 0U;
   111d6:	2300      	movs	r3, #0
			conn->llcp_conn_param.preferred_periodicity =
   111d8:	f884 117c 	strb.w	r1, [r4, #380]	; 0x17c
			conn->llcp_conn_param.interval_min = interval_min;
   111dc:	f8a4 e174 	strh.w	lr, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   111e0:	f8a4 c176 	strh.w	ip, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   111e4:	f8a4 7178 	strh.w	r7, [r4, #376]	; 0x178
			conn->llcp_conn_param.timeout =	timeout;
   111e8:	f8a4 017a 	strh.w	r0, [r4, #378]	; 0x17a
			conn->procedure_expire = 0U;
   111ec:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   111f0:	f896 102a 	ldrb.w	r1, [r6, #42]	; 0x2a
   111f4:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   111f8:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   111fc:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11200:	f8a4 317e 	strh.w	r3, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   11204:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
   11208:	f896 302b 	ldrb.w	r3, [r6, #43]	; 0x2b
   1120c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset0 =
   11210:	f8a4 3180 	strh.w	r3, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   11214:	f896 102e 	ldrb.w	r1, [r6, #46]	; 0x2e
   11218:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   1121c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset1 =
   11220:	f8a4 3182 	strh.w	r3, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   11224:	f896 1030 	ldrb.w	r1, [r6, #48]	; 0x30
   11228:	f896 302f 	ldrb.w	r3, [r6, #47]	; 0x2f
   1122c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset2 =
   11230:	f8a4 3184 	strh.w	r3, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   11234:	f896 1032 	ldrb.w	r1, [r6, #50]	; 0x32
   11238:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
   1123c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset3 =
   11240:	f8a4 3186 	strh.w	r3, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   11244:	f896 1034 	ldrb.w	r1, [r6, #52]	; 0x34
   11248:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
   1124c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
			conn->llcp_conn_param.offset4 =
   11250:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   11254:	f896 3035 	ldrb.w	r3, [r6, #53]	; 0x35
   11258:	f896 0036 	ldrb.w	r0, [r6, #54]	; 0x36
   1125c:	682e      	ldr	r6, [r5, #0]
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1125e:	2101      	movs	r1, #1
				sys_le16_to_cpu(cpr->offset5);
   11260:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   11264:	f361 0202 	bfi	r2, r1, #0, #3
			conn->llcp_conn_param.offset5 =
   11268:	f8a4 318a 	strh.w	r3, [r4, #394]	; 0x18a
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1126c:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11270:	e4d0      	b.n	10c14 <ull_conn_rx+0x1fc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   11272:	7f72      	ldrb	r2, [r6, #29]
   11274:	2a18      	cmp	r2, #24
   11276:	f47f ac9f 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   1127a:	4f79      	ldr	r7, [pc, #484]	; (11460 <ull_conn_rx+0xa48>)
   1127c:	f8d7 9000 	ldr.w	r9, [r7]
   11280:	f1b9 0f00 	cmp.w	r9, #0
   11284:	f000 8276 	beq.w	11774 <ull_conn_rx+0xd5c>
   11288:	454c      	cmp	r4, r9
   1128a:	f000 8273 	beq.w	11774 <ull_conn_rx+0xd5c>
			nack = reject_ext_ind_send(conn, *rx,
   1128e:	1d31      	adds	r1, r6, #4
   11290:	4620      	mov	r0, r4
   11292:	2320      	movs	r3, #32
   11294:	220f      	movs	r2, #15
   11296:	e67c      	b.n	10f92 <ull_conn_rx+0x57a>
		((!conn->llcp_enc.refresh &&
   11298:	f1ba 0f07 	cmp.w	sl, #7
   1129c:	f000 80e2 	beq.w	11464 <ull_conn_rx+0xa4c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   112a0:	f1ba 0f02 	cmp.w	sl, #2
   112a4:	f040 8225 	bne.w	116f2 <ull_conn_rx+0xcda>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   112a8:	7f73      	ldrb	r3, [r6, #29]
   112aa:	2b02      	cmp	r3, #2
   112ac:	f47f ac84 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   112b0:	f896 3020 	ldrb.w	r3, [r6, #32]
   112b4:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   112b8:	2303      	movs	r3, #3
   112ba:	7133      	strb	r3, [r6, #4]
	int nack = 0;
   112bc:	2000      	movs	r0, #0
}
   112be:	f7ff bbfc 	b.w	10aba <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   112c2:	7f73      	ldrb	r3, [r6, #29]
   112c4:	2b01      	cmp	r3, #1
   112c6:	f47f ac77 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		conn->procedure_expire = 0U;
   112ca:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   112cc:	2303      	movs	r3, #3
		conn->procedure_expire = 0U;
   112ce:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   112d2:	7133      	strb	r3, [r6, #4]
		break;
   112d4:	f7ff bbf1 	b.w	10aba <ull_conn_rx+0xa2>
		if (conn->lll.role ||
   112d8:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   112dc:	2b00      	cmp	r3, #0
   112de:	f6ff ac6b 	blt.w	10bb8 <ull_conn_rx+0x1a0>
   112e2:	7f73      	ldrb	r3, [r6, #29]
   112e4:	2b09      	cmp	r3, #9
   112e6:	f47f ac67 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   112ea:	1d31      	adds	r1, r6, #4
   112ec:	4620      	mov	r0, r4
}
   112ee:	b005      	add	sp, #20
   112f0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		nack = feature_rsp_send(conn, *rx, pdu_rx);
   112f4:	f7fe bfb6 	b.w	10264 <feature_rsp_send.isra.0>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   112f8:	7f73      	ldrb	r3, [r6, #29]
   112fa:	2b02      	cmp	r3, #2
   112fc:	f47f ac5c 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   11300:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   11304:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   11308:	429a      	cmp	r2, r3
   1130a:	d004      	beq.n	11316 <ull_conn_rx+0x8fe>
   1130c:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   11310:	2a03      	cmp	r2, #3
   11312:	f000 85b8 	beq.w	11e86 <ull_conn_rx+0x146e>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   11316:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   1131a:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1131e:	4283      	cmp	r3, r0
   11320:	f000 857a 	beq.w	11e18 <ull_conn_rx+0x1400>
		rej_ext_ind->error_code = rej_ind->error_code;
   11324:	f896 2020 	ldrb.w	r2, [r6, #32]
   11328:	f886 2021 	strb.w	r2, [r6, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1132c:	2a23      	cmp	r2, #35	; 0x23
   1132e:	d012      	beq.n	11356 <ull_conn_rx+0x93e>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   11330:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   11334:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11338:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1133c:	f3c3 0002 	ubfx	r0, r3, #0, #3
   11340:	f360 1306 	bfi	r3, r0, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   11344:	f36f 0100 	bfc	r1, #0, #1
		conn->procedure_expire = 0U;
   11348:	2000      	movs	r0, #0
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1134a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   1134e:	f884 11ab 	strb.w	r1, [r4, #427]	; 0x1ab
		conn->procedure_expire = 0U;
   11352:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (!conn->llcp_phy.cmd) {
   11356:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   1135a:	0759      	lsls	r1, r3, #29
   1135c:	f57f ac5a 	bpl.w	10c14 <ull_conn_rx+0x1fc>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11360:	2312      	movs	r3, #18
	p->status = rej_ext_ind->error_code;
   11362:	7732      	strb	r2, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11364:	7133      	strb	r3, [r6, #4]
	p->tx = conn->lll.phy_tx;
   11366:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   1136a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1136e:	7773      	strb	r3, [r6, #29]
	p->rx = conn->lll.phy_rx;
   11370:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   11374:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11378:	77b3      	strb	r3, [r6, #30]
	int nack = 0;
   1137a:	2000      	movs	r0, #0
   1137c:	f7ff bb9d 	b.w	10aba <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   11380:	7f75      	ldrb	r5, [r6, #29]
   11382:	2d06      	cmp	r5, #6
   11384:	f47f ac18 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	if (!conn->llcp_version.tx) {
   11388:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
   1138c:	07df      	lsls	r7, r3, #31
   1138e:	f140 8391 	bpl.w	11ab4 <ull_conn_rx+0x109c>
	} else if (!conn->llcp_version.rx) {
   11392:	f013 0302 	ands.w	r3, r3, #2
   11396:	f47f ac3d 	bne.w	10c14 <ull_conn_rx+0x1fc>
		conn->llcp_version.ack = conn->llcp_version.req;
   1139a:	f894 2124 	ldrb.w	r2, [r4, #292]	; 0x124
		conn->procedure_expire = 0U;
   1139e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
		conn->llcp_version.ack = conn->llcp_version.req;
   113a2:	f884 2125 	strb.w	r2, [r4, #293]	; 0x125
	conn->llcp_version.version_number = v->version_number;
   113a6:	f896 3020 	ldrb.w	r3, [r6, #32]
   113aa:	f884 3127 	strb.w	r3, [r4, #295]	; 0x127
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   113ae:	f896 1022 	ldrb.w	r1, [r6, #34]	; 0x22
   113b2:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   113b6:	f894 3126 	ldrb.w	r3, [r4, #294]	; 0x126
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   113ba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   113be:	f8a4 2128 	strh.w	r2, [r4, #296]	; 0x128
		sys_le16_to_cpu(v->sub_version_number);
   113c2:	f896 2023 	ldrb.w	r2, [r6, #35]	; 0x23
   113c6:	f896 1024 	ldrb.w	r1, [r6, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   113ca:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   113ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   113d2:	f8a4 212a 	strh.w	r2, [r4, #298]	; 0x12a
	conn->llcp_version.rx = 1U;
   113d6:	f884 3126 	strb.w	r3, [r4, #294]	; 0x126
	return 0;
   113da:	2000      	movs	r0, #0
   113dc:	f7ff bb6d 	b.w	10aba <ull_conn_rx+0xa2>
		if (!conn->lll.role ||
   113e0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   113e4:	2b00      	cmp	r3, #0
   113e6:	f6ff af7c 	blt.w	112e2 <ull_conn_rx+0x8ca>
   113ea:	f7ff bbe5 	b.w	10bb8 <ull_conn_rx+0x1a0>
		if (!conn->lll.role ||
   113ee:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   113f2:	2b00      	cmp	r3, #0
   113f4:	f6bf abe0 	bge.w	10bb8 <ull_conn_rx+0x1a0>
   113f8:	7f73      	ldrb	r3, [r6, #29]
   113fa:	2b08      	cmp	r3, #8
   113fc:	f47f abdc 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   11400:	f8b6 5025 	ldrh.w	r5, [r6, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   11404:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   11406:	1aeb      	subs	r3, r5, r3
   11408:	041f      	lsls	r7, r3, #16
   1140a:	f100 84d5 	bmi.w	11db8 <ull_conn_rx+0x13a0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1140e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   11412:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   11416:	1a9b      	subs	r3, r3, r2
   11418:	f003 0303 	and.w	r3, r3, #3
   1141c:	2b02      	cmp	r3, #2
   1141e:	f000 853f 	beq.w	11ea0 <ull_conn_rx+0x1488>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   11422:	2205      	movs	r2, #5
   11424:	f106 0120 	add.w	r1, r6, #32
   11428:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   1142c:	f00a fafd 	bl	1ba2a <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   11430:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   11434:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   11438:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	conn->llcp_type = LLCP_CHAN_MAP;
   1143c:	2002      	movs	r0, #2
	conn->llcp.chan_map.initiate = 0U;
   1143e:	f36f 0200 	bfc	r2, #0, #1
	conn->llcp_ack -= 2U;
   11442:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11444:	2103      	movs	r1, #3
	conn->llcp_type = LLCP_CHAN_MAP;
   11446:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
	conn->llcp.chan_map.initiate = 0U;
   1144a:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   1144e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	int nack = 0;
   11452:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11454:	7131      	strb	r1, [r6, #4]
		if (err) {
   11456:	f7ff bb30 	b.w	10aba <ull_conn_rx+0xa2>
   1145a:	bf00      	nop
   1145c:	200021a4 	.word	0x200021a4
   11460:	20002120 	.word	0x20002120
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   11464:	7f73      	ldrb	r3, [r6, #29]
   11466:	2b02      	cmp	r3, #2
   11468:	f47f aba6 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		} else if ((conn->llcp_conn_param.ack !=
   1146c:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   11470:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   11474:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   11476:	f896 2020 	ldrb.w	r2, [r6, #32]
		} else if ((conn->llcp_conn_param.ack !=
   1147a:	d002      	beq.n	11482 <ull_conn_rx+0xa6a>
			    conn->llcp_conn_param.req) &&
   1147c:	2a0f      	cmp	r2, #15
   1147e:	f000 833e 	beq.w	11afe <ull_conn_rx+0x10e6>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   11482:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   11486:	f894 1199 	ldrb.w	r1, [r4, #409]	; 0x199
   1148a:	4299      	cmp	r1, r3
   1148c:	d002      	beq.n	11494 <ull_conn_rx+0xa7c>
   1148e:	2a14      	cmp	r2, #20
   11490:	f000 84a9 	beq.w	11de6 <ull_conn_rx+0x13ce>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   11494:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   11498:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   1149c:	428b      	cmp	r3, r1
   1149e:	d002      	beq.n	114a6 <ull_conn_rx+0xa8e>
   114a0:	2a16      	cmp	r2, #22
   114a2:	f000 852a 	beq.w	11efa <ull_conn_rx+0x14e2>
			switch (llctrl->unknown_rsp.type) {
   114a6:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   114a8:	bf04      	itt	eq
   114aa:	2303      	moveq	r3, #3
   114ac:	7133      	strbeq	r3, [r6, #4]
				break;
   114ae:	e491      	b.n	10dd4 <ull_conn_rx+0x3bc>
		if (!conn->lll.role ||
   114b0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   114b4:	2b00      	cmp	r3, #0
   114b6:	f6bf ab7f 	bge.w	10bb8 <ull_conn_rx+0x1a0>
   114ba:	7f73      	ldrb	r3, [r6, #29]
   114bc:	2b17      	cmp	r3, #23
   114be:	f47f ab7b 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		memcpy(&conn->llcp_enc.rand[0],
   114c2:	2208      	movs	r2, #8
   114c4:	f106 0120 	add.w	r1, r6, #32
   114c8:	f204 1055 	addw	r0, r4, #341	; 0x155
   114cc:	f00a faad 	bl	1ba2a <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   114d0:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
   114d4:	f884 3153 	strb.w	r3, [r4, #339]	; 0x153
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   114d8:	f896 3029 	ldrb.w	r3, [r6, #41]	; 0x29
   114dc:	f884 3154 	strb.w	r3, [r4, #340]	; 0x154
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   114e0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   114e4:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   114e6:	2201      	movs	r2, #1
   114e8:	f362 0301 	bfi	r3, r2, #0, #2
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   114ec:	2203      	movs	r2, #3
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   114ee:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   114f2:	710a      	strb	r2, [r1, #4]
		conn->llcp_ack -= 2U;
   114f4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   114f8:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		conn->llcp_ack -= 2U;
   114fc:	3b02      	subs	r3, #2
   114fe:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   11502:	2208      	movs	r2, #8
   11504:	f106 012a 	add.w	r1, r6, #42	; 0x2a
   11508:	f104 00ee 	add.w	r0, r4, #238	; 0xee
   1150c:	f00a fa8d 	bl	1ba2a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   11510:	2204      	movs	r2, #4
   11512:	f106 0132 	add.w	r1, r6, #50	; 0x32
   11516:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1151a:	f00a fa86 	bl	1ba2a <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   1151e:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   11522:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
   11526:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   1152a:	f043 0301 	orr.w	r3, r3, #1
   1152e:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	int nack = 0;
   11532:	2000      	movs	r0, #0
		break;
   11534:	f7ff bac1 	b.w	10aba <ull_conn_rx+0xa2>
		if (conn->lll.role ||
   11538:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1153c:	2b00      	cmp	r3, #0
   1153e:	f6bf ab89 	bge.w	10c54 <ull_conn_rx+0x23c>
   11542:	f7ff bb39 	b.w	10bb8 <ull_conn_rx+0x1a0>
		if (conn->lll.role || (conn->llcp_req == conn->llcp_ack) ||
   11546:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1154a:	2b00      	cmp	r3, #0
   1154c:	f6ff ab34 	blt.w	10bb8 <ull_conn_rx+0x1a0>
   11550:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   11554:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   11558:	429a      	cmp	r2, r3
   1155a:	f43f ab2d 	beq.w	10bb8 <ull_conn_rx+0x1a0>
   1155e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   11562:	2b03      	cmp	r3, #3
   11564:	f47f ab28 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		    (conn->llcp_type != LLCP_ENCRYPTION) ||
   11568:	7f72      	ldrb	r2, [r6, #29]
   1156a:	2a01      	cmp	r2, #1
   1156c:	f47f ab24 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   11570:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   11574:	f36f 0201 	bfc	r2, #0, #2
   11578:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	int nack = 0;
   1157c:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1157e:	7133      	strb	r3, [r6, #4]
		break;
   11580:	f7ff ba9b 	b.w	10aba <ull_conn_rx+0xa2>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   11584:	7f72      	ldrb	r2, [r6, #29]
   11586:	2a01      	cmp	r2, #1
   11588:	f47f ab16 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		if (conn->lll.role) {
   1158c:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   11590:	2a00      	cmp	r2, #0
   11592:	f2c0 80b6 	blt.w	11702 <ull_conn_rx+0xcea>
			conn->llcp_enc.pause_rx = 0U;
   11596:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   1159a:	f023 0303 	bic.w	r3, r3, #3
   1159e:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		if (conn->llcp_enc.refresh) {
   115a2:	075e      	lsls	r6, r3, #29
   115a4:	f57f ac16 	bpl.w	10dd4 <ull_conn_rx+0x3bc>
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   115a8:	682a      	ldr	r2, [r5, #0]
			conn->llcp_enc.refresh = 0U;
   115aa:	f36f 0382 	bfc	r3, #2, #1
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   115ae:	210f      	movs	r1, #15
			conn->llcp_enc.refresh = 0U;
   115b0:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   115b4:	7111      	strb	r1, [r2, #4]
		conn->procedure_expire = 0U;
   115b6:	e40d      	b.n	10dd4 <ull_conn_rx+0x3bc>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   115b8:	7f73      	ldrb	r3, [r6, #29]
   115ba:	2b01      	cmp	r3, #1
   115bc:	f47f aafc 	bne.w	10bb8 <ull_conn_rx+0x1a0>
	} else if (!conn->lll.role) {
   115c0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   115c4:	2b00      	cmp	r3, #0
   115c6:	f280 80be 	bge.w	11746 <ull_conn_rx+0xd2e>
		conn->lll.enc_tx = 0;
   115ca:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   115ce:	f36f 1304 	bfc	r3, #4, #1
   115d2:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   115d6:	f7ff bb1d 	b.w	10c14 <ull_conn_rx+0x1fc>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   115da:	f894 3198 	ldrb.w	r3, [r4, #408]	; 0x198
   115de:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
   115e2:	429a      	cmp	r2, r3
   115e4:	f43f ab16 	beq.w	10c14 <ull_conn_rx+0x1fc>
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   115e8:	2209      	movs	r2, #9
	conn->procedure_expire = 0U;
   115ea:	2000      	movs	r0, #0
	conn->llcp_length.ack = conn->llcp_length.req;
   115ec:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
	conn->procedure_expire = 0U;
   115f0:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   115f4:	7772      	strb	r2, [r6, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   115f6:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   115fa:	f8b4 505c 	ldrh.w	r5, [r4, #92]	; 0x5c
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   115fe:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   11602:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   11606:	8433      	strh	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11608:	2315      	movs	r3, #21
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   1160a:	84b5      	strh	r5, [r6, #36]	; 0x24
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   1160c:	8471      	strh	r1, [r6, #34]	; 0x22
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   1160e:	84f2      	strh	r2, [r6, #38]	; 0x26
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11610:	77f3      	strb	r3, [r6, #31]
	if (err) {
   11612:	f7ff ba52 	b.w	10aba <ull_conn_rx+0xa2>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   11616:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   1161a:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   1161e:	429a      	cmp	r2, r3
   11620:	f43f aaf8 	beq.w	10c14 <ull_conn_rx+0x1fc>
	if (!lll->role && (rej_ext_ind->error_code ==
   11624:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   11628:	2a00      	cmp	r2, #0
   1162a:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   1162e:	f2c0 85c9 	blt.w	121c4 <ull_conn_rx+0x17ac>
   11632:	2a1a      	cmp	r2, #26
   11634:	f000 864a 	beq.w	122cc <ull_conn_rx+0x18b4>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   11638:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   1163c:	f002 0107 	and.w	r1, r2, #7
   11640:	2904      	cmp	r1, #4
   11642:	f000 8583 	beq.w	1214c <ull_conn_rx+0x1734>
	if (!conn->llcp_conn_param.cmd) {
   11646:	0713      	lsls	r3, r2, #28
   11648:	f57f aae4 	bpl.w	10c14 <ull_conn_rx+0x1fc>
	cu->status = rej_ext_ind->error_code;
   1164c:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   11650:	7733      	strb	r3, [r6, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   11652:	220e      	movs	r2, #14
   11654:	7132      	strb	r2, [r6, #4]
	cu->interval = lll->interval;
   11656:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   11658:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
   1165c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
	cu->interval = lll->interval;
   1165e:	83f3      	strh	r3, [r6, #30]
	cu->timeout = conn->supervision_reload *
   11660:	fb03 f202 	mul.w	r2, r3, r2
		      lll->interval * 125U / 1000;
   11664:	237d      	movs	r3, #125	; 0x7d
   11666:	fb03 f302 	mul.w	r3, r3, r2
	cu->latency = lll->latency;
   1166a:	8431      	strh	r1, [r6, #32]
		      lll->interval * 125U / 1000;
   1166c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
	int nack = 0;
   11670:	2000      	movs	r0, #0
		      lll->interval * 125U / 1000;
   11672:	fbb3 f3f2 	udiv	r3, r3, r2
	cu->timeout = conn->supervision_reload *
   11676:	8473      	strh	r3, [r6, #34]	; 0x22
	if (err) {
   11678:	f7ff ba1f 	b.w	10aba <ull_conn_rx+0xa2>
		if ((conn->llcp_ack != conn->llcp_req) &&
   1167c:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   11680:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   11684:	4293      	cmp	r3, r2
   11686:	f43f aac5 	beq.w	10c14 <ull_conn_rx+0x1fc>
   1168a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1168e:	2b03      	cmp	r3, #3
   11690:	f47f aac0 	bne.w	10c14 <ull_conn_rx+0x1fc>
	conn->llcp_enc.pause_rx = 0U;
   11694:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   11698:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_enc.pause_rx = 0U;
   1169c:	f023 0303 	bic.w	r3, r3, #3
	conn->procedure_expire = 0U;
   116a0:	2000      	movs	r0, #0
	conn->llcp_enc.pause_rx = 0U;
   116a2:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   116a6:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   116aa:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
   116ae:	f886 3020 	strb.w	r3, [r6, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   116b2:	230d      	movs	r3, #13
   116b4:	77f3      	strb	r3, [r6, #31]
	if (err) {
   116b6:	f7ff ba00 	b.w	10aba <ull_conn_rx+0xa2>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   116ba:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
   116be:	f894 31a9 	ldrb.w	r3, [r4, #425]	; 0x1a9
   116c2:	4283      	cmp	r3, r0
   116c4:	f43f aaa6 	beq.w	10c14 <ull_conn_rx+0x1fc>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   116c8:	f896 2021 	ldrb.w	r2, [r6, #33]	; 0x21
   116cc:	2a23      	cmp	r2, #35	; 0x23
   116ce:	f47f ae2f 	bne.w	11330 <ull_conn_rx+0x918>
   116d2:	e640      	b.n	11356 <ull_conn_rx+0x93e>
	       (conn->lll.role &&
   116d4:	075a      	lsls	r2, r3, #29
   116d6:	f57f addf 	bpl.w	11298 <ull_conn_rx+0x880>
		 (conn->llcp_enc.refresh &&
   116da:	f1ba 0f02 	cmp.w	sl, #2
   116de:	f43f ade3 	beq.w	112a8 <ull_conn_rx+0x890>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   116e2:	f1ba 0f0b 	cmp.w	sl, #11
   116e6:	f43f aa63 	beq.w	10bb0 <ull_conn_rx+0x198>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   116ea:	f1ba 0f03 	cmp.w	sl, #3
   116ee:	f43f aee4 	beq.w	114ba <ull_conn_rx+0xaa2>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   116f2:	f1ba 0f06 	cmp.w	sl, #6
   116f6:	f47f a9c4 	bne.w	10a82 <ull_conn_rx+0x6a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   116fa:	7f72      	ldrb	r2, [r6, #29]
   116fc:	2a01      	cmp	r2, #1
   116fe:	f47f aa5b 	bne.w	10bb8 <ull_conn_rx+0x1a0>
			if ((conn->llcp_req != conn->llcp_ack) &&
   11702:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   11706:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   1170a:	428a      	cmp	r2, r1
   1170c:	f000 8444 	beq.w	11f98 <ull_conn_rx+0x1580>
   11710:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   11714:	2a03      	cmp	r2, #3
   11716:	f47f aa4f 	bne.w	10bb8 <ull_conn_rx+0x1a0>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1171a:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
   1171e:	f36f 0201 	bfc	r2, #0, #2
   11722:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
			if (conn->llcp_req == conn->llcp_ack) {
   11726:	e73c      	b.n	115a2 <ull_conn_rx+0xb8a>
		conn->tx_data_last = tx;
   11728:	f8c4 01c0 	str.w	r0, [r4, #448]	; 0x1c0
   1172c:	f7ff ba72 	b.w	10c14 <ull_conn_rx+0x1fc>
			tx->next = conn->tx_head;
   11730:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   11732:	e9c4 006c 	strd	r0, r0, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   11736:	f8c4 01b8 	str.w	r0, [r4, #440]	; 0x1b8
   1173a:	f7ff ba68 	b.w	10c0e <ull_conn_rx+0x1f6>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   1173e:	7f73      	ldrb	r3, [r6, #29]
   11740:	2b01      	cmp	r3, #1
   11742:	f47f aa39 	bne.w	10bb8 <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11746:	48d7      	ldr	r0, [pc, #860]	; (11aa4 <ull_conn_rx+0x108c>)
   11748:	f7f9 fd5a 	bl	b200 <mem_acquire>
		if (!tx) {
   1174c:	4603      	mov	r3, r0
   1174e:	2800      	cmp	r0, #0
   11750:	f000 810e 	beq.w	11970 <ull_conn_rx+0xf58>
	conn->llcp_enc.pause_rx = 1U;
   11754:	f894 0152 	ldrb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   11758:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1175c:	7919      	ldrb	r1, [r3, #4]
	conn->llcp_enc.pause_rx = 1U;
   1175e:	f040 0001 	orr.w	r0, r0, #1
   11762:	f884 0152 	strb.w	r0, [r4, #338]	; 0x152
	conn->lll.enc_rx = 0;
   11766:	f022 0218 	bic.w	r2, r2, #24
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1176a:	2001      	movs	r0, #1
	conn->lll.enc_rx = 0;
   1176c:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   11770:	7158      	strb	r0, [r3, #5]
   11772:	e433      	b.n	10fdc <ull_conn_rx+0x5c4>
		if (!conn->lll.role) {
   11774:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   11778:	2a00      	cmp	r2, #0
   1177a:	f2c0 8177 	blt.w	11a6c <ull_conn_rx+0x1054>
					conn->llcp_conn_param.ack) &&
   1177e:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   11782:	9200      	str	r2, [sp, #0]
   11784:	4611      	mov	r1, r2
			if ((conn->llcp_conn_param.req !=
   11786:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
   1178a:	428a      	cmp	r2, r1
   1178c:	d009      	beq.n	117a2 <ull_conn_rx+0xd8a>
			    ((conn->llcp_conn_param.state ==
   1178e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
					conn->llcp_conn_param.ack) &&
   11792:	f012 0207 	ands.w	r2, r2, #7
   11796:	f000 8330 	beq.w	11dfa <ull_conn_rx+0x13e2>
			      LLCP_CPR_STATE_REQ) ||
   1179a:	3a04      	subs	r2, #4
   1179c:	2a01      	cmp	r2, #1
   1179e:	f240 832c 	bls.w	11dfa <ull_conn_rx+0x13e2>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   117a2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   117a6:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   117aa:	1a52      	subs	r2, r2, r1
   117ac:	f002 0203 	and.w	r2, r2, #3
   117b0:	2a02      	cmp	r2, #2
   117b2:	f000 84ad 	beq.w	12110 <ull_conn_rx+0x16f8>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   117b6:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   117ba:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   117be:	4291      	cmp	r1, r2
   117c0:	f000 8413 	beq.w	11fea <ull_conn_rx+0x15d2>
				nack = reject_ext_ind_send(conn, *rx,
   117c4:	1d31      	adds	r1, r6, #4
   117c6:	4620      	mov	r0, r4
   117c8:	232a      	movs	r3, #42	; 0x2a
   117ca:	220f      	movs	r2, #15
   117cc:	f7ff bbe1 	b.w	10f92 <ull_conn_rx+0x57a>
		if (!conn->tx_ctrl) {
   117d0:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   117d4:	2900      	cmp	r1, #0
   117d6:	f47f ac21 	bne.w	1101c <ull_conn_rx+0x604>
			tx->next = conn->tx_head;
   117da:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl = tx;
   117dc:	e9c4 336c 	strd	r3, r3, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   117e0:	f8c4 31b8 	str.w	r3, [r4, #440]	; 0x1b8
   117e4:	e421      	b.n	1102a <ull_conn_rx+0x612>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   117e6:	7f73      	ldrb	r3, [r6, #29]
   117e8:	2b01      	cmp	r3, #1
   117ea:	f43f aed4 	beq.w	11596 <ull_conn_rx+0xb7e>
   117ee:	f7ff b9e3 	b.w	10bb8 <ull_conn_rx+0x1a0>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   117f2:	48ac      	ldr	r0, [pc, #688]	; (11aa4 <ull_conn_rx+0x108c>)
   117f4:	f7f9 fd04 	bl	b200 <mem_acquire>
		if (!tx) {
   117f8:	4601      	mov	r1, r0
   117fa:	2800      	cmp	r0, #0
   117fc:	f000 80b8 	beq.w	11970 <ull_conn_rx+0xf58>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   11800:	f894 0198 	ldrb.w	r0, [r4, #408]	; 0x198
   11804:	f894 2199 	ldrb.w	r2, [r4, #409]	; 0x199
	eff_rx_octets = conn->lll.max_rx_octets;
   11808:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   1180c:	9301      	str	r3, [sp, #4]
	if (/* Local idle, and Peer request then complete the Peer procedure
   1180e:	4290      	cmp	r0, r2
	eff_tx_octets = conn->lll.max_tx_octets;
   11810:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   11814:	f8b4 8062 	ldrh.w	r8, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   11818:	f8b4 9060 	ldrh.w	r9, [r4, #96]	; 0x60
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   1181c:	9000      	str	r0, [sp, #0]
	eff_tx_octets = conn->lll.max_tx_octets;
   1181e:	9302      	str	r3, [sp, #8]
	if (/* Local idle, and Peer request then complete the Peer procedure
   11820:	f040 854c 	bne.w	122bc <ull_conn_rx+0x18a4>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   11824:	8c32      	ldrh	r2, [r6, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11826:	2a1a      	cmp	r2, #26
   11828:	f240 82db 	bls.w	11de2 <ull_conn_rx+0x13ca>
			eff_tx_octets = MIN(max_rx_octets,
   1182c:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
   11830:	4282      	cmp	r2, r0
   11832:	bf28      	it	cs
   11834:	4602      	movcs	r2, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   11836:	f8b6 c024 	ldrh.w	ip, [r6, #36]	; 0x24
	if (!conn->common.fex_valid ||
   1183a:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
			eff_rx_octets = MIN(max_tx_octets,
   1183e:	9b01      	ldr	r3, [sp, #4]
   11840:	f1bc 0f1b 	cmp.w	ip, #27
   11844:	bf34      	ite	cc
   11846:	469e      	movcc	lr, r3
   11848:	f04f 0e1b 	movcs.w	lr, #27
	if (!conn->common.fex_valid ||
   1184c:	07c0      	lsls	r0, r0, #31
   1184e:	f140 82c4 	bpl.w	11dda <ull_conn_rx+0x13c2>
	feature_coded_phy = (conn->llcp_feature.features_conn &
   11852:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
	if (!conn->common.fex_valid ||
   11856:	0503      	lsls	r3, r0, #20
   11858:	f140 83ac 	bpl.w	11fb4 <ull_conn_rx+0x159c>
		tx_time = MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   1185c:	f8b4 00d8 	ldrh.w	r0, [r4, #216]	; 0xd8
   11860:	f5b0 6f29 	cmp.w	r0, #2704	; 0xa90
   11864:	bf28      	it	cs
   11866:	f44f 6029 	movcs.w	r0, #2704	; 0xa90
		tx_time = MAX(PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M), tx_time);
   1186a:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   1186e:	bf38      	it	cc
   11870:	f44f 70a4 	movcc.w	r0, #328	; 0x148
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED),
   11874:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
		lr_rx_time = sys_le16_to_cpu(lr->max_rx_time);
   11878:	f8b6 b022 	ldrh.w	fp, [r6, #34]	; 0x22
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   1187c:	8cf3      	ldrh	r3, [r6, #38]	; 0x26
   1187e:	9303      	str	r3, [sp, #12]
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   11880:	f5bb 7fa4 	cmp.w	fp, #328	; 0x148
   11884:	f0c0 82a7 	bcc.w	11dd6 <ull_conn_rx+0x13be>
			eff_tx_time = MAX(eff_tx_time,
   11888:	f894 a064 	ldrb.w	sl, [r4, #100]	; 0x64
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   1188c:	4583      	cmp	fp, r0
   1188e:	bf28      	it	cs
   11890:	4683      	movcs	fp, r0
			eff_tx_time = MAX(eff_tx_time,
   11892:	f01a 0f04 	tst.w	sl, #4
   11896:	f00a 0007 	and.w	r0, sl, #7
   1189a:	f040 837a 	bne.w	11f92 <ull_conn_rx+0x157a>
   1189e:	f100 0a28 	add.w	sl, r0, #40	; 0x28
   118a2:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   118a6:	1040      	asrs	r0, r0, #1
   118a8:	fa2a f000 	lsr.w	r0, sl, r0
   118ac:	4558      	cmp	r0, fp
   118ae:	bf38      	it	cc
   118b0:	4658      	movcc	r0, fp
   118b2:	b280      	uxth	r0, r0
		if (lr_tx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   118b4:	9b03      	ldr	r3, [sp, #12]
   118b6:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   118ba:	f0c0 828a 	bcc.w	11dd2 <ull_conn_rx+0x13ba>
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   118be:	f5bc 7fa4 	cmp.w	ip, #328	; 0x148
			eff_rx_time = MAX(eff_rx_time,
   118c2:	f894 a065 	ldrb.w	sl, [r4, #101]	; 0x65
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   118c6:	bf38      	it	cc
   118c8:	f44f 7ca4 	movcc.w	ip, #328	; 0x148
   118cc:	4563      	cmp	r3, ip
   118ce:	bf28      	it	cs
   118d0:	4663      	movcs	r3, ip
			eff_rx_time = MAX(eff_rx_time,
   118d2:	f01a 0f04 	tst.w	sl, #4
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   118d6:	469b      	mov	fp, r3
			eff_rx_time = MAX(eff_rx_time,
   118d8:	f00a 0c07 	and.w	ip, sl, #7
   118dc:	f040 832f 	bne.w	11f3e <ull_conn_rx+0x1526>
   118e0:	f10c 0a28 	add.w	sl, ip, #40	; 0x28
   118e4:	ea4f 0aca 	mov.w	sl, sl, lsl #3
   118e8:	ea4f 0c6c 	mov.w	ip, ip, asr #1
   118ec:	fa2a fc0c 	lsr.w	ip, sl, ip
   118f0:	45dc      	cmp	ip, fp
   118f2:	bf38      	it	cc
   118f4:	46dc      	movcc	ip, fp
   118f6:	fa1f fc8c 	uxth.w	ip, ip
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   118fa:	9b01      	ldr	r3, [sp, #4]
   118fc:	459e      	cmp	lr, r3
   118fe:	f000 82d3 	beq.w	11ea8 <ull_conn_rx+0x1490>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   11902:	9b00      	ldr	r3, [sp, #0]
			conn->llcp_length.rx_octets = eff_rx_octets;
   11904:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   11908:	3b01      	subs	r3, #1
   1190a:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.tx_octets = eff_tx_octets;
   1190e:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.state =
   11912:	f894 319a 	ldrb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.rx_time = eff_rx_time;
   11916:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
			conn->llcp_length.tx_time = eff_tx_time;
   1191a:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
			if (tx) {
   1191e:	2900      	cmp	r1, #0
   11920:	f000 8351 	beq.w	11fc6 <ull_conn_rx+0x15ae>
				conn->llcp_length.state =
   11924:	2605      	movs	r6, #5
   11926:	f366 0302 	bfi	r3, r6, #0, #3
   1192a:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			link->mem = conn->llcp_rx;
   1192e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
   11932:	607b      	str	r3, [r7, #4]
			(*rx)->hdr.link = link;
   11934:	682b      	ldr	r3, [r5, #0]
   11936:	601f      	str	r7, [r3, #0]
			conn->llcp_rx = *rx;
   11938:	682b      	ldr	r3, [r5, #0]
   1193a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
			*rx = NULL;
   1193e:	2300      	movs	r3, #0
   11940:	602b      	str	r3, [r5, #0]
	if (tx) {
   11942:	2900      	cmp	r1, #0
   11944:	f43f a8b8 	beq.w	10ab8 <ull_conn_rx+0xa0>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11948:	790b      	ldrb	r3, [r1, #4]
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   1194a:	818a      	strh	r2, [r1, #12]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1194c:	f043 0303 	orr.w	r3, r3, #3
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11950:	2215      	movs	r2, #21
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11952:	2509      	movs	r5, #9
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   11954:	81c8      	strh	r0, [r1, #14]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   11956:	f8a1 e008 	strh.w	lr, [r1, #8]
	ctrl_tx_sec_enqueue(conn, tx);
   1195a:	4620      	mov	r0, r4
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1195c:	f8a1 c00a 	strh.w	ip, [r1, #10]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11960:	710b      	strb	r3, [r1, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   11962:	714d      	strb	r5, [r1, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   11964:	71ca      	strb	r2, [r1, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   11966:	f7fe fbeb 	bl	10140 <ctrl_tx_sec_enqueue>
	return 0;
   1196a:	2000      	movs	r0, #0
}
   1196c:	f7ff b8a5 	b.w	10aba <ull_conn_rx+0xa2>
			return -ENOBUFS;
   11970:	f06f 0036 	mvn.w	r0, #54	; 0x36
   11974:	f7ff b8a1 	b.w	10aba <ull_conn_rx+0xa2>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11978:	484a      	ldr	r0, [pc, #296]	; (11aa4 <ull_conn_rx+0x108c>)
   1197a:	f7f9 fc41 	bl	b200 <mem_acquire>
	if (!tx) {
   1197e:	4602      	mov	r2, r0
   11980:	2800      	cmp	r0, #0
   11982:	d0f5      	beq.n	11970 <ull_conn_rx+0xf58>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11984:	f894 31aa 	ldrb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   11988:	f894 11a9 	ldrb.w	r1, [r4, #425]	; 0x1a9
   1198c:	f894 01a8 	ldrb.w	r0, [r4, #424]	; 0x1a8
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11990:	2502      	movs	r5, #2
   11992:	f365 0301 	bfi	r3, r5, #0, #2
	if (conn->llcp_phy.ack ==
   11996:	4288      	cmp	r0, r1
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   11998:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	if (conn->llcp_phy.ack ==
   1199c:	d118      	bne.n	119d0 <ull_conn_rx+0xfb8>
		conn->llcp_phy.tx =
   1199e:	f8b4 31aa 	ldrh.w	r3, [r4, #426]	; 0x1aa
			conn->phy_pref_rx;
   119a2:	f894 51ac 	ldrb.w	r5, [r4, #428]	; 0x1ac
		conn->llcp_phy.tx =
   119a6:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   119aa:	f005 0307 	and.w	r3, r5, #7
   119ae:	009b      	lsls	r3, r3, #2
   119b0:	f3c5 1502 	ubfx	r5, r5, #4, #3
   119b4:	f021 0104 	bic.w	r1, r1, #4
   119b8:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
   119bc:	430b      	orrs	r3, r1
		conn->llcp_phy.ack--;
   119be:	3801      	subs	r0, #1
		conn->procedure_expire =
   119c0:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
		conn->llcp_phy.ack--;
   119c4:	f884 01a9 	strb.w	r0, [r4, #425]	; 0x1a9
		conn->llcp_phy.tx =
   119c8:	f8a4 31aa 	strh.w	r3, [r4, #426]	; 0x1aa
		conn->procedure_expire =
   119cc:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
	conn->llcp_phy.rx &= p->tx_phys;
   119d0:	f894 11aa 	ldrb.w	r1, [r4, #426]	; 0x1aa
	conn->llcp_phy.tx &= p->rx_phys;
   119d4:	f896 3021 	ldrb.w	r3, [r6, #33]	; 0x21
	conn->llcp_phy.rx &= p->tx_phys;
   119d8:	f896 0020 	ldrb.w	r0, [r6, #32]
	conn->llcp_phy.tx &= p->rx_phys;
   119dc:	f3c1 0582 	ubfx	r5, r1, #2, #3
   119e0:	402b      	ands	r3, r5
	conn->llcp_phy.rx &= p->tx_phys;
   119e2:	ea00 1051 	and.w	r0, r0, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   119e6:	009b      	lsls	r3, r3, #2
   119e8:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   119ec:	f001 0103 	and.w	r1, r1, #3
   119f0:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   119f2:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   119f4:	f884 31aa 	strb.w	r3, [r4, #426]	; 0x1aa
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   119f8:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   119fa:	f894 51ac 	ldrb.w	r5, [r4, #428]	; 0x1ac
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   119fe:	7911      	ldrb	r1, [r2, #4]
	    conn->tx_head &&
   11a00:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11a04:	4628      	mov	r0, r5
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11a06:	f3c5 0502 	ubfx	r5, r5, #0, #3
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11a0a:	f3c0 1002 	ubfx	r0, r0, #4, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a0e:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   11a12:	7215      	strb	r5, [r2, #8]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11a14:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   11a16:	7250      	strb	r0, [r2, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11a18:	7111      	strb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11a1a:	71d5      	strb	r5, [r2, #7]
	if (
   11a1c:	2b00      	cmp	r3, #0
   11a1e:	f000 81ba 	beq.w	11d96 <ull_conn_rx+0x137e>
	    !conn->llcp_enc.pause_tx &&
   11a22:	f894 1152 	ldrb.w	r1, [r4, #338]	; 0x152
	    conn->tx_head &&
   11a26:	0788      	lsls	r0, r1, #30
   11a28:	f100 81b5 	bmi.w	11d96 <ull_conn_rx+0x137e>
	    !conn->llcp_phy.pause_tx &&
   11a2c:	f894 11ab 	ldrb.w	r1, [r4, #427]	; 0x1ab
   11a30:	07c9      	lsls	r1, r1, #31
   11a32:	f100 81b0 	bmi.w	11d96 <ull_conn_rx+0x137e>
		if (conn->tx_head == conn->tx_data) {
   11a36:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   11a3a:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   11a3c:	bf04      	itt	eq
   11a3e:	6819      	ldreq	r1, [r3, #0]
   11a40:	f8c4 11bc 	streq.w	r1, [r4, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   11a44:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   11a48:	2900      	cmp	r1, #0
   11a4a:	f000 83e9 	beq.w	12220 <ull_conn_rx+0x1808>
	tx->next = conn->tx_ctrl_last->next;
   11a4e:	f8d4 31b8 	ldr.w	r3, [r4, #440]	; 0x1b8
   11a52:	6819      	ldr	r1, [r3, #0]
   11a54:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   11a56:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   11a58:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
	if (!tx->next) {
   11a5c:	6813      	ldr	r3, [r2, #0]
   11a5e:	2b00      	cmp	r3, #0
   11a60:	f47f a8d8 	bne.w	10c14 <ull_conn_rx+0x1fc>
		conn->tx_data_last = tx;
   11a64:	f8c4 21c0 	str.w	r2, [r4, #448]	; 0x1c0
	rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11a68:	f7ff b8d4 	b.w	10c14 <ull_conn_rx+0x1fc>
			    conn->llcp_conn_param.ack) ||
   11a6c:	f894 1171 	ldrb.w	r1, [r4, #369]	; 0x171
		} else if ((conn->llcp_conn_param.req ==
   11a70:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   11a74:	428b      	cmp	r3, r1
   11a76:	f000 808e 	beq.w	11b96 <ull_conn_rx+0x117e>
			    conn->llcp_conn_param.ack) ||
   11a7a:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   11a7e:	0798      	lsls	r0, r3, #30
   11a80:	f000 8089 	beq.w	11b96 <ull_conn_rx+0x117e>
			LL_ASSERT(0);
   11a84:	4a08      	ldr	r2, [pc, #32]	; (11aa8 <ull_conn_rx+0x1090>)
   11a86:	4909      	ldr	r1, [pc, #36]	; (11aac <ull_conn_rx+0x1094>)
   11a88:	4809      	ldr	r0, [pc, #36]	; (11ab0 <ull_conn_rx+0x1098>)
   11a8a:	f241 63dd 	movw	r3, #5853	; 0x16dd
   11a8e:	f008 f9b2 	bl	19df6 <printk>
   11a92:	4040      	eors	r0, r0
   11a94:	f380 8811 	msr	BASEPRI, r0
   11a98:	f04f 0003 	mov.w	r0, #3
   11a9c:	df02      	svc	2
	int nack = 0;
   11a9e:	2000      	movs	r0, #0
   11aa0:	f7ff b80b 	b.w	10aba <ull_conn_rx+0xa2>
   11aa4:	200021a4 	.word	0x200021a4
   11aa8:	00020020 	.word	0x00020020
   11aac:	0001fd3c 	.word	0x0001fd3c
   11ab0:	0001fcdc 	.word	0x0001fcdc
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   11ab4:	48d4      	ldr	r0, [pc, #848]	; (11e08 <ull_conn_rx+0x13f0>)
   11ab6:	f7f9 fba3 	bl	b200 <mem_acquire>
		if (!tx) {
   11aba:	4601      	mov	r1, r0
   11abc:	2800      	cmp	r0, #0
   11abe:	f43f af57 	beq.w	11970 <ull_conn_rx+0xf58>
		conn->llcp_version.tx = 1U;
   11ac2:	f894 2126 	ldrb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ac6:	7903      	ldrb	r3, [r0, #4]
		conn->llcp_version.tx = 1U;
   11ac8:	f042 0201 	orr.w	r2, r2, #1
   11acc:	f884 2126 	strb.w	r2, [r4, #294]	; 0x126
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ad0:	f043 0303 	orr.w	r3, r3, #3
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11ad4:	220c      	movs	r2, #12
		pdu_tx->len =
   11ad6:	7145      	strb	r5, [r0, #5]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   11ad8:	7103      	strb	r3, [r0, #4]
		v->version_number = LL_VERSION_NUMBER;
   11ada:	250b      	movs	r5, #11
		v->sub_version_number =
   11adc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11ae0:	f06f 000e 	mvn.w	r0, #14
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11ae4:	71ca      	strb	r2, [r1, #7]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11ae6:	2205      	movs	r2, #5
   11ae8:	7248      	strb	r0, [r1, #9]
		v->sub_version_number =
   11aea:	72cb      	strb	r3, [r1, #11]
   11aec:	730b      	strb	r3, [r1, #12]
		v->version_number = LL_VERSION_NUMBER;
   11aee:	720d      	strb	r5, [r1, #8]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   11af0:	728a      	strb	r2, [r1, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   11af2:	4620      	mov	r0, r4
   11af4:	f7fe fb24 	bl	10140 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11af8:	2303      	movs	r3, #3
   11afa:	7133      	strb	r3, [r6, #4]
   11afc:	e453      	b.n	113a6 <ull_conn_rx+0x98e>
			conn->llcp_conn_param.disabled = 1U;
   11afe:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   11b02:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
			conn->llcp_conn_param.disabled = 1U;
   11b06:	f042 0210 	orr.w	r2, r2, #16
			if (!conn->lll.role) {
   11b0a:	2900      	cmp	r1, #0
			conn->llcp_conn_param.disabled = 1U;
   11b0c:	f884 2172 	strb.w	r2, [r4, #370]	; 0x172
			if (!conn->lll.role) {
   11b10:	f2c0 821b 	blt.w	11f4a <ull_conn_rx+0x1532>
				LL_ASSERT(conn->llcp_cu.req ==
   11b14:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   11b18:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   11b1c:	4293      	cmp	r3, r2
   11b1e:	d00e      	beq.n	11b3e <ull_conn_rx+0x1126>
   11b20:	4aba      	ldr	r2, [pc, #744]	; (11e0c <ull_conn_rx+0x13f4>)
   11b22:	49bb      	ldr	r1, [pc, #748]	; (11e10 <ull_conn_rx+0x13f8>)
   11b24:	48bb      	ldr	r0, [pc, #748]	; (11e14 <ull_conn_rx+0x13fc>)
   11b26:	f241 7361 	movw	r3, #5985	; 0x1761
   11b2a:	f008 f964 	bl	19df6 <printk>
   11b2e:	4040      	eors	r0, r0
   11b30:	f380 8811 	msr	BASEPRI, r0
   11b34:	f04f 0003 	mov.w	r0, #3
   11b38:	df02      	svc	2
   11b3a:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
				conn->llcp_conn_param.state =
   11b3e:	f894 0172 	ldrb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.interval =
   11b42:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   11b46:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
				conn->llcp_conn_param.state =
   11b4a:	2305      	movs	r3, #5
   11b4c:	f363 0002 	bfi	r0, r3, #0, #3
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11b50:	f894 1106 	ldrb.w	r1, [r4, #262]	; 0x106
				conn->llcp_cu.ack--;
   11b54:	1e53      	subs	r3, r2, #1
				conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   11b56:	f3c0 02c0 	ubfx	r2, r0, #3, #1
				conn->llcp_cu.ack--;
   11b5a:	f884 3105 	strb.w	r3, [r4, #261]	; 0x105
				conn->llcp_cu.win_size = 1U;
   11b5e:	2601      	movs	r6, #1
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11b60:	0093      	lsls	r3, r2, #2
				conn->llcp_cu.win_size = 1U;
   11b62:	f884 6114 	strb.w	r6, [r4, #276]	; 0x114
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11b66:	f021 0207 	bic.w	r2, r1, #7
   11b6a:	4333      	orrs	r3, r6
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11b6c:	6829      	ldr	r1, [r5, #0]
				conn->llcp_cu.latency =
   11b6e:	f8b4 5178 	ldrh.w	r5, [r4, #376]	; 0x178
				conn->llcp_conn_param.state =
   11b72:	f884 0172 	strb.w	r0, [r4, #370]	; 0x172
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   11b76:	4313      	orrs	r3, r2
   11b78:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
				conn->llcp_cu.timeout =
   11b7c:	f8b4 217a 	ldrh.w	r2, [r4, #378]	; 0x17a
				conn->llcp_cu.latency =
   11b80:	f8a4 510a 	strh.w	r5, [r4, #266]	; 0x10a
				conn->llcp_cu.win_offset_us = 0U;
   11b84:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11b86:	2303      	movs	r3, #3
				conn->llcp_cu.win_offset_us = 0U;
   11b88:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
				conn->llcp_cu.timeout =
   11b8c:	f8a4 210c 	strh.w	r2, [r4, #268]	; 0x10c
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11b90:	710b      	strb	r3, [r1, #4]
				break;
   11b92:	f7fe bf92 	b.w	10aba <ull_conn_rx+0xa2>
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   11b96:	f8b6 a020 	ldrh.w	sl, [r6, #32]
   11b9a:	fa1f f38a 	uxth.w	r3, sl
			if ((interval_min < 6) ||
   11b9e:	2b05      	cmp	r3, #5
   11ba0:	d97f      	bls.n	11ca2 <ull_conn_rx+0x128a>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   11ba2:	8c72      	ldrh	r2, [r6, #34]	; 0x22
   11ba4:	f8ad 2000 	strh.w	r2, [sp]
   11ba8:	b292      	uxth	r2, r2
			if ((interval_min < 6) ||
   11baa:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   11bae:	d878      	bhi.n	11ca2 <ull_conn_rx+0x128a>
			    (interval_max > 3200) ||
   11bb0:	4293      	cmp	r3, r2
   11bb2:	d876      	bhi.n	11ca2 <ull_conn_rx+0x128a>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   11bb4:	f8b6 8024 	ldrh.w	r8, [r6, #36]	; 0x24
   11bb8:	fa1f f088 	uxth.w	r0, r8
			    (interval_min > interval_max) ||
   11bbc:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   11bc0:	d26f      	bcs.n	11ca2 <ull_conn_rx+0x128a>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   11bc2:	f8b6 e026 	ldrh.w	lr, [r6, #38]	; 0x26
   11bc6:	fa1f f38e 	uxth.w	r3, lr
			    (latency > 499) ||
   11bca:	f1a3 0c0a 	sub.w	ip, r3, #10
   11bce:	fa1f fc8c 	uxth.w	ip, ip
   11bd2:	f640 4b76 	movw	fp, #3190	; 0xc76
   11bd6:	45dc      	cmp	ip, fp
   11bd8:	d863      	bhi.n	11ca2 <ull_conn_rx+0x128a>
			     ((latency + 1) * interval_max)) ||
   11bda:	fb00 2c02 	mla	ip, r0, r2, r2
			    (timeout < 10) || (timeout > 3200) ||
   11bde:	ebbc 0f83 	cmp.w	ip, r3, lsl #2
   11be2:	d25e      	bcs.n	11ca2 <ull_conn_rx+0x128a>
			     ((latency + 1) * interval_max)) ||
   11be4:	f896 b028 	ldrb.w	fp, [r6, #40]	; 0x28
   11be8:	455a      	cmp	r2, fp
   11bea:	d35a      	bcc.n	11ca2 <ull_conn_rx+0x128a>
			conn->llcp_conn_param.interval_min = interval_min;
   11bec:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
			conn->llcp_conn_param.interval_max = interval_max;
   11bf0:	f8bd a000 	ldrh.w	sl, [sp]
			conn->llcp_conn_param.timeout =	timeout;
   11bf4:	f8a4 e17a 	strh.w	lr, [r4, #378]	; 0x17a
			conn->llcp_conn_param.interval_max = interval_max;
   11bf8:	f8a4 a176 	strh.w	sl, [r4, #374]	; 0x176
			conn->llcp_conn_param.latency =	latency;
   11bfc:	f8a4 8178 	strh.w	r8, [r4, #376]	; 0x178
			conn->llcp_conn_param.preferred_periodicity =
   11c00:	f884 b17c 	strb.w	fp, [r4, #380]	; 0x17c
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   11c04:	f896 802a 	ldrb.w	r8, [r6, #42]	; 0x2a
   11c08:	f896 c029 	ldrb.w	ip, [r6, #41]	; 0x29
			     lll->interval) ||
   11c0c:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   11c10:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   11c14:	f8a4 c17e 	strh.w	ip, [r4, #382]	; 0x17e
				sys_le16_to_cpu(cpr->offset0);
   11c18:	f896 802c 	ldrb.w	r8, [r6, #44]	; 0x2c
   11c1c:	f896 c02b 	ldrb.w	ip, [r6, #43]	; 0x2b
   11c20:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset0 =
   11c24:	f8a4 c180 	strh.w	ip, [r4, #384]	; 0x180
				sys_le16_to_cpu(cpr->offset1);
   11c28:	f896 802e 	ldrb.w	r8, [r6, #46]	; 0x2e
   11c2c:	f896 c02d 	ldrb.w	ip, [r6, #45]	; 0x2d
   11c30:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset1 =
   11c34:	f8a4 c182 	strh.w	ip, [r4, #386]	; 0x182
				sys_le16_to_cpu(cpr->offset2);
   11c38:	f896 8030 	ldrb.w	r8, [r6, #48]	; 0x30
   11c3c:	f896 c02f 	ldrb.w	ip, [r6, #47]	; 0x2f
   11c40:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset2 =
   11c44:	f8a4 c184 	strh.w	ip, [r4, #388]	; 0x184
				sys_le16_to_cpu(cpr->offset3);
   11c48:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
   11c4c:	f896 c031 	ldrb.w	ip, [r6, #49]	; 0x31
   11c50:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset3 =
   11c54:	f8a4 c186 	strh.w	ip, [r4, #390]	; 0x186
				sys_le16_to_cpu(cpr->offset4);
   11c58:	f896 c033 	ldrb.w	ip, [r6, #51]	; 0x33
   11c5c:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
   11c60:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
			conn->llcp_conn_param.offset4 =
   11c64:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->offset5);
   11c68:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   11c6c:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
			if ((conn->llcp_conn_param.interval_max !=
   11c70:	4572      	cmp	r2, lr
				sys_le16_to_cpu(cpr->offset5);
   11c72:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
			conn->llcp_conn_param.offset5 =
   11c76:	f8a4 618a 	strh.w	r6, [r4, #394]	; 0x18a
			if ((conn->llcp_conn_param.interval_max !=
   11c7a:	f000 82d7 	beq.w	1222c <ull_conn_rx+0x1814>
				conn->llcp_conn_param.state =
   11c7e:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
   11c82:	2203      	movs	r2, #3
   11c84:	f362 0302 	bfi	r3, r2, #0, #3
   11c88:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack--;
   11c8c:	3901      	subs	r1, #1
   11c8e:	f884 1171 	strb.w	r1, [r4, #369]	; 0x171
			if (!conn_upd_curr) {
   11c92:	f1b9 0f00 	cmp.w	r9, #0
   11c96:	f47e af0f 	bne.w	10ab8 <ull_conn_rx+0xa0>
				conn_upd_curr = conn;
   11c9a:	603c      	str	r4, [r7, #0]
	int nack = 0;
   11c9c:	4648      	mov	r0, r9
   11c9e:	f7fe bf0c 	b.w	10aba <ull_conn_rx+0xa2>
				nack = reject_ext_ind_send(conn, *rx,
   11ca2:	1d31      	adds	r1, r6, #4
   11ca4:	4620      	mov	r0, r4
   11ca6:	231e      	movs	r3, #30
   11ca8:	220f      	movs	r2, #15
   11caa:	f7ff b972 	b.w	10f92 <ull_conn_rx+0x57a>
				      0x03) == 0x02) &&
   11cae:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   11cb2:	2b03      	cmp	r3, #3
   11cb4:	f47f a969 	bne.w	10f8a <ull_conn_rx+0x572>
   11cb8:	f7ff b960 	b.w	10f7c <ull_conn_rx+0x564>
	instant = sys_le16_to_cpu(ind->instant);
   11cbc:	8c70      	ldrh	r0, [r6, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   11cbe:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   11cc0:	1a82      	subs	r2, r0, r2
   11cc2:	0412      	lsls	r2, r2, #16
   11cc4:	d478      	bmi.n	11db8 <ull_conn_rx+0x13a0>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   11cc6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   11cca:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
   11cce:	eba2 020c 	sub.w	r2, r2, ip
   11cd2:	f002 0203 	and.w	r2, r2, #3
   11cd6:	2a02      	cmp	r2, #2
   11cd8:	f000 80e2 	beq.w	11ea0 <ull_conn_rx+0x1488>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   11cdc:	f894 c1a8 	ldrb.w	ip, [r4, #424]	; 0x1a8
   11ce0:	f894 21a9 	ldrb.w	r2, [r4, #425]	; 0x1a9
   11ce4:	4562      	cmp	r2, ip
   11ce6:	d019      	beq.n	11d1c <ull_conn_rx+0x1304>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   11ce8:	f894 21aa 	ldrb.w	r2, [r4, #426]	; 0x1aa
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   11cec:	f002 0203 	and.w	r2, r2, #3
   11cf0:	2a02      	cmp	r2, #2
   11cf2:	d113      	bne.n	11d1c <ull_conn_rx+0x1304>
		conn->llcp_phy.pause_tx = 0U;
   11cf4:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11cf8:	f894 60ec 	ldrb.w	r6, [r4, #236]	; 0xec
		conn->llcp_phy.ack = conn->llcp_phy.req;
   11cfc:	f884 c1a9 	strb.w	ip, [r4, #425]	; 0x1a9
		conn->llcp_phy.pause_tx = 0U;
   11d00:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11d04:	f3c2 0c80 	ubfx	ip, r2, #2, #1
   11d08:	f36c 0641 	bfi	r6, ip, #1, #1
		conn->procedure_expire = 0U;
   11d0c:	f04f 0c00 	mov.w	ip, #0
		conn->llcp_phy.pause_tx = 0U;
   11d10:	f884 21ab 	strb.w	r2, [r4, #427]	; 0x1ab
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   11d14:	f884 60ec 	strb.w	r6, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
   11d18:	f8a4 c0cc 	strh.w	ip, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   11d1c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   11d20:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   11d24:	009b      	lsls	r3, r3, #2
   11d26:	f003 031c 	and.w	r3, r3, #28
   11d2a:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   11d2e:	f002 0202 	and.w	r2, r2, #2
   11d32:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   11d34:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
	conn->llcp.phy_upd_ind.initiate = 0U;
   11d38:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   11d3c:	607a      	str	r2, [r7, #4]
	(*rx)->hdr.link = link;
   11d3e:	682b      	ldr	r3, [r5, #0]
   11d40:	601f      	str	r7, [r3, #0]
	conn->llcp_rx = *rx;
   11d42:	682b      	ldr	r3, [r5, #0]
   11d44:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	*rx = NULL;
   11d48:	2300      	movs	r3, #0
   11d4a:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   11d4c:	f7fd f902 	bl	ef54 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   11d50:	4605      	mov	r5, r0
   11d52:	2800      	cmp	r0, #0
   11d54:	f000 823f 	beq.w	121d6 <ull_conn_rx+0x17be>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   11d58:	682b      	ldr	r3, [r5, #0]
   11d5a:	f8d4 2100 	ldr.w	r2, [r4, #256]	; 0x100
   11d5e:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   11d60:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   11d64:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   11d68:	f8c4 5100 	str.w	r5, [r4, #256]	; 0x100
	conn->llcp_ack -= 2U;
   11d6c:	3a02      	subs	r2, #2
	conn->llcp_type = LLCP_PHY_UPD;
   11d6e:	2106      	movs	r1, #6
	if (conn->llcp.phy_upd_ind.tx) {
   11d70:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_ack -= 2U;
   11d74:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->llcp_type = LLCP_PHY_UPD;
   11d78:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	if (conn->llcp.phy_upd_ind.tx) {
   11d7c:	f43e ae9c 	beq.w	10ab8 <ull_conn_rx+0xa0>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   11d80:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   11d84:	f3c3 0382 	ubfx	r3, r3, #2, #3
   11d88:	f363 1206 	bfi	r2, r3, #4, #3
   11d8c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
   11d90:	2000      	movs	r0, #0
   11d92:	f7fe be92 	b.w	10aba <ull_conn_rx+0xa2>
		if (!conn->tx_ctrl) {
   11d96:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   11d9a:	2900      	cmp	r1, #0
   11d9c:	f47f ae57 	bne.w	11a4e <ull_conn_rx+0x1036>
			tx->next = conn->tx_head;
   11da0:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   11da2:	e9c4 226c 	strd	r2, r2, [r4, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   11da6:	f8c4 21b8 	str.w	r2, [r4, #440]	; 0x1b8
   11daa:	e657      	b.n	11a5c <ull_conn_rx+0x1044>
				nack = reject_ext_ind_send(conn, *rx,
   11dac:	1d31      	adds	r1, r6, #4
   11dae:	4620      	mov	r0, r4
   11db0:	231e      	movs	r3, #30
   11db2:	2210      	movs	r2, #16
   11db4:	f7ff b8ed 	b.w	10f92 <ull_conn_rx+0x57a>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11db8:	2303      	movs	r3, #3
   11dba:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   11dbc:	2328      	movs	r3, #40	; 0x28
			conn->llcp_terminate.reason_peer = err;
   11dbe:	f884 312f 	strb.w	r3, [r4, #303]	; 0x12f
	int nack = 0;
   11dc2:	2000      	movs	r0, #0
   11dc4:	f7fe be79 	b.w	10aba <ull_conn_rx+0xa2>
				nack = reject_ext_ind_send(conn, *rx,
   11dc8:	1d31      	adds	r1, r6, #4
   11dca:	4620      	mov	r0, r4
   11dcc:	2323      	movs	r3, #35	; 0x23
   11dce:	f7ff b8df 	b.w	10f90 <ull_conn_rx+0x578>
   11dd2:	46c4      	mov	ip, r8
   11dd4:	e591      	b.n	118fa <ull_conn_rx+0xee2>
   11dd6:	4648      	mov	r0, r9
   11dd8:	e56c      	b.n	118b4 <ull_conn_rx+0xe9c>
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   11dda:	f44f 70a4 	mov.w	r0, #328	; 0x148
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   11dde:	4684      	mov	ip, r0
   11de0:	e54a      	b.n	11878 <ull_conn_rx+0xe60>
   11de2:	9a02      	ldr	r2, [sp, #8]
   11de4:	e527      	b.n	11836 <ull_conn_rx+0xe1e>
			conn->llcp_length.disabled = 1U;
   11de6:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   11dea:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			conn->llcp_length.disabled = 1U;
   11dee:	f042 0308 	orr.w	r3, r2, #8
   11df2:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
			conn->llcp_length.ack = conn->llcp_length.req;
   11df6:	f7fe bfed 	b.w	10dd4 <ull_conn_rx+0x3bc>
				nack = reject_ext_ind_send(conn, *rx,
   11dfa:	1d31      	adds	r1, r6, #4
   11dfc:	4620      	mov	r0, r4
   11dfe:	2323      	movs	r3, #35	; 0x23
   11e00:	220f      	movs	r2, #15
   11e02:	f7ff b8c6 	b.w	10f92 <ull_conn_rx+0x57a>
   11e06:	bf00      	nop
   11e08:	200021a4 	.word	0x200021a4
   11e0c:	00020020 	.word	0x00020020
   11e10:	000200fc 	.word	0x000200fc
   11e14:	0001fcdc 	.word	0x0001fcdc
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   11e18:	f894 2171 	ldrb.w	r2, [r4, #369]	; 0x171
   11e1c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   11e20:	429a      	cmp	r2, r3
   11e22:	f43f abda 	beq.w	115da <ull_conn_rx+0xbc2>
		rej_ext_ind->error_code = rej_ind->error_code;
   11e26:	f896 3020 	ldrb.w	r3, [r6, #32]
   11e2a:	f886 3021 	strb.w	r3, [r6, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   11e2e:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   11e32:	2a00      	cmp	r2, #0
   11e34:	f2c0 81dd 	blt.w	121f2 <ull_conn_rx+0x17da>
   11e38:	2b1a      	cmp	r3, #26
   11e3a:	f000 8247 	beq.w	122cc <ull_conn_rx+0x18b4>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   11e3e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
   11e42:	f002 0307 	and.w	r3, r2, #7
   11e46:	2b04      	cmp	r3, #4
   11e48:	f47f abfd 	bne.w	11646 <ull_conn_rx+0xc2e>
		LL_ASSERT(conn_upd_curr == conn);
   11e4c:	4fd9      	ldr	r7, [pc, #868]	; (121b4 <ull_conn_rx+0x179c>)
   11e4e:	683b      	ldr	r3, [r7, #0]
   11e50:	429c      	cmp	r4, r3
   11e52:	d00e      	beq.n	11e72 <ull_conn_rx+0x145a>
   11e54:	4ad8      	ldr	r2, [pc, #864]	; (121b8 <ull_conn_rx+0x17a0>)
   11e56:	49d9      	ldr	r1, [pc, #868]	; (121bc <ull_conn_rx+0x17a4>)
   11e58:	48d9      	ldr	r0, [pc, #868]	; (121c0 <ull_conn_rx+0x17a8>)
   11e5a:	f241 03ea 	movw	r3, #4330	; 0x10ea
   11e5e:	f007 ffca 	bl	19df6 <printk>
   11e62:	4040      	eors	r0, r0
   11e64:	f380 8811 	msr	BASEPRI, r0
   11e68:	f04f 0003 	mov.w	r0, #3
   11e6c:	df02      	svc	2
   11e6e:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11e72:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   11e76:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   11e7a:	2300      	movs	r3, #0
   11e7c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   11e7e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   11e82:	f7ff bbe0 	b.w	11646 <ull_conn_rx+0xc2e>
	conn->llcp_enc.pause_rx = 0U;
   11e86:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
	conn->llcp_ack = conn->llcp_req;
   11e8a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   11e8e:	2000      	movs	r0, #0
	conn->llcp_enc.pause_rx = 0U;
   11e90:	f022 0303 	bic.w	r3, r2, #3
   11e94:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
	conn->procedure_expire = 0U;
   11e98:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
	if (err) {
   11e9c:	f7fe be0d 	b.w	10aba <ull_conn_rx+0xa2>
		(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11ea0:	2303      	movs	r3, #3
   11ea2:	7133      	strb	r3, [r6, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   11ea4:	232a      	movs	r3, #42	; 0x2a
   11ea6:	e78a      	b.n	11dbe <ull_conn_rx+0x13a6>
			conn->llcp_length.ack = conn->llcp_length.req;
   11ea8:	9b00      	ldr	r3, [sp, #0]
   11eaa:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   11eae:	9b02      	ldr	r3, [sp, #8]
			conn->procedure_expire = 0U;
   11eb0:	2700      	movs	r7, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   11eb2:	429a      	cmp	r2, r3
			conn->procedure_expire = 0U;
   11eb4:	f8a4 70cc 	strh.w	r7, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   11eb8:	f000 8171 	beq.w	1219e <ull_conn_rx+0x1786>
			conn->lll.max_rx_time = eff_rx_time;
   11ebc:	f8a4 c062 	strh.w	ip, [r4, #98]	; 0x62
			if (tx) {
   11ec0:	2900      	cmp	r1, #0
   11ec2:	f000 8167 	beq.w	12194 <ull_conn_rx+0x177c>
				conn->llcp_length.state =
   11ec6:	f894 519a 	ldrb.w	r5, [r4, #410]	; 0x19a
					(conn->llcp_length.req - 1);
   11eca:	9b00      	ldr	r3, [sp, #0]
				conn->llcp_length.rx_octets = eff_rx_octets;
   11ecc:	f8a4 e19c 	strh.w	lr, [r4, #412]	; 0x19c
				conn->llcp_length.state =
   11ed0:	2703      	movs	r7, #3
					(conn->llcp_length.req - 1);
   11ed2:	3b01      	subs	r3, #1
				conn->llcp_length.state =
   11ed4:	f367 0502 	bfi	r5, r7, #0, #3
				conn->llcp_length.ack =
   11ed8:	f884 3199 	strb.w	r3, [r4, #409]	; 0x199
				conn->llcp_length.tx_octets = eff_tx_octets;
   11edc:	f8a4 219e 	strh.w	r2, [r4, #414]	; 0x19e
				conn->llcp_length.rx_time = eff_rx_time;
   11ee0:	f8a4 c1a0 	strh.w	ip, [r4, #416]	; 0x1a0
				conn->llcp_length.tx_time = eff_tx_time;
   11ee4:	f8a4 01a2 	strh.w	r0, [r4, #418]	; 0x1a2
				conn->llcp_length.state =
   11ee8:	f884 519a 	strb.w	r5, [r4, #410]	; 0x19a
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   11eec:	f8a6 e020 	strh.w	lr, [r6, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   11ef0:	84b2      	strh	r2, [r6, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   11ef2:	f8a6 c022 	strh.w	ip, [r6, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   11ef6:	84f0      	strh	r0, [r6, #38]	; 0x26
   11ef8:	e523      	b.n	11942 <ull_conn_rx+0xf2a>
			conn->llcp_phy.pause_tx = 0U;
   11efa:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   11efe:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.ack = conn->llcp_phy.req;
   11f02:	f884 11a9 	strb.w	r1, [r4, #425]	; 0x1a9
			conn->llcp_phy.pause_tx = 0U;
   11f06:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   11f0a:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   11f0c:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   11f10:	f362 1106 	bfi	r1, r2, #4, #3
			if (conn->llcp_phy.cmd) {
   11f14:	075f      	lsls	r7, r3, #29
			conn->llcp_phy.pause_tx = 0U;
   11f16:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
			lll->phy_tx_time = lll->phy_tx;
   11f1a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
   11f1e:	f3c2 0202 	ubfx	r2, r2, #0, #3
			if (conn->llcp_phy.cmd) {
   11f22:	d55d      	bpl.n	11fe0 <ull_conn_rx+0x15c8>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11f24:	6829      	ldr	r1, [r5, #0]
				p->status = 0U;
   11f26:	2300      	movs	r3, #0
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   11f28:	2012      	movs	r0, #18
   11f2a:	7108      	strb	r0, [r1, #4]
				p->tx = lll->phy_tx;
   11f2c:	7772      	strb	r2, [r6, #29]
				p->status = 0U;
   11f2e:	7733      	strb	r3, [r6, #28]
				p->rx = lll->phy_rx;
   11f30:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   11f34:	f3c3 0302 	ubfx	r3, r3, #0, #3
   11f38:	77b3      	strb	r3, [r6, #30]
   11f3a:	f7fe bf4b 	b.w	10dd4 <ull_conn_rx+0x3bc>
			eff_rx_time = MAX(eff_rx_time,
   11f3e:	f44f 6c29 	mov.w	ip, #2704	; 0xa90
   11f42:	e4d5      	b.n	118f0 <ull_conn_rx+0xed8>
		conn_upd_curr = conn;
   11f44:	601c      	str	r4, [r3, #0]
   11f46:	f7fe befa 	b.w	10d3e <ull_conn_rx+0x326>
			LL_ASSERT(conn_upd_curr == conn);
   11f4a:	4f9a      	ldr	r7, [pc, #616]	; (121b4 <ull_conn_rx+0x179c>)
   11f4c:	683a      	ldr	r2, [r7, #0]
   11f4e:	4294      	cmp	r4, r2
   11f50:	d00e      	beq.n	11f70 <ull_conn_rx+0x1558>
   11f52:	4a99      	ldr	r2, [pc, #612]	; (121b8 <ull_conn_rx+0x17a0>)
   11f54:	4999      	ldr	r1, [pc, #612]	; (121bc <ull_conn_rx+0x17a4>)
   11f56:	489a      	ldr	r0, [pc, #616]	; (121c0 <ull_conn_rx+0x17a8>)
   11f58:	f241 7379 	movw	r3, #6009	; 0x1779
   11f5c:	f007 ff4b 	bl	19df6 <printk>
   11f60:	4040      	eors	r0, r0
   11f62:	f380 8811 	msr	BASEPRI, r0
   11f66:	f04f 0003 	mov.w	r0, #3
   11f6a:	df02      	svc	2
   11f6c:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
			if (!conn->llcp_conn_param.cmd) {
   11f70:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11f74:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
			if (!conn->llcp_conn_param.cmd) {
   11f78:	f012 0208 	ands.w	r2, r2, #8
	conn_upd_curr = NULL;
   11f7c:	f04f 0300 	mov.w	r3, #0
   11f80:	603b      	str	r3, [r7, #0]
			if (!conn->llcp_conn_param.cmd) {
   11f82:	f040 80cc 	bne.w	1211e <ull_conn_rx+0x1706>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11f86:	682b      	ldr	r3, [r5, #0]
   11f88:	2103      	movs	r1, #3
	int nack = 0;
   11f8a:	4610      	mov	r0, r2
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11f8c:	7119      	strb	r1, [r3, #4]
				break;
   11f8e:	f7fe bd94 	b.w	10aba <ull_conn_rx+0xa2>
			eff_tx_time = MAX(eff_tx_time,
   11f92:	f44f 6029 	mov.w	r0, #2704	; 0xa90
   11f96:	e489      	b.n	118ac <ull_conn_rx+0xe94>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   11f98:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
				conn->llcp_ack -= 2U;
   11f9c:	3a02      	subs	r2, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   11f9e:	f36f 0101 	bfc	r1, #0, #2
				conn->llcp_type = LLCP_ENCRYPTION;
   11fa2:	2003      	movs	r0, #3
				conn->llcp_ack -= 2U;
   11fa4:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   11fa8:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
				conn->llcp_type = LLCP_ENCRYPTION;
   11fac:	f884 00ea 	strb.w	r0, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   11fb0:	f7ff baf7 	b.w	115a2 <ull_conn_rx+0xb8a>
	    (!feature_coded_phy && !feature_phy_2m)) {
   11fb4:	f410 7f80 	tst.w	r0, #256	; 0x100
		tx_time = MAX(MIN(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M),
   11fb8:	f44f 70a4 	mov.w	r0, #328	; 0x148
	    (!feature_coded_phy && !feature_phy_2m)) {
   11fbc:	f000 812d 	beq.w	1221a <ull_conn_rx+0x1802>
		rx_time = MAX(PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_2M),
   11fc0:	f04f 0ca8 	mov.w	ip, #168	; 0xa8
   11fc4:	e458      	b.n	11878 <ull_conn_rx+0xe60>
				conn->llcp_length.state =
   11fc6:	2604      	movs	r6, #4
   11fc8:	f366 0302 	bfi	r3, r6, #0, #3
				conn->lll.max_tx_octets = eff_tx_octets;
   11fcc:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   11fd0:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
   11fd4:	f884 319a 	strb.w	r3, [r4, #410]	; 0x19a
   11fd8:	e4a9      	b.n	1192e <ull_conn_rx+0xf16>
	struct node_tx *tx = NULL;
   11fda:	2100      	movs	r1, #0
   11fdc:	f7fe be79 	b.w	10cd2 <ull_conn_rx+0x2ba>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   11fe0:	682b      	ldr	r3, [r5, #0]
   11fe2:	2203      	movs	r2, #3
   11fe4:	711a      	strb	r2, [r3, #4]
   11fe6:	f7fe bef5 	b.w	10dd4 <ull_conn_rx+0x3bc>
				uint16_t interval_min =
   11fea:	8c32      	ldrh	r2, [r6, #32]
   11fec:	f8ad 2004 	strh.w	r2, [sp, #4]
   11ff0:	b292      	uxth	r2, r2
				if ((interval_min < 6) ||
   11ff2:	2a05      	cmp	r2, #5
   11ff4:	f67f ae55 	bls.w	11ca2 <ull_conn_rx+0x128a>
				uint16_t interval_max =
   11ff8:	f8b6 8022 	ldrh.w	r8, [r6, #34]	; 0x22
   11ffc:	fa1f f188 	uxth.w	r1, r8
				if ((interval_min < 6) ||
   12000:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12004:	f63f ae4d 	bhi.w	11ca2 <ull_conn_rx+0x128a>
				    (interval_max > 3200) ||
   12008:	428a      	cmp	r2, r1
   1200a:	f63f ae4a 	bhi.w	11ca2 <ull_conn_rx+0x128a>
				uint16_t latency =
   1200e:	f8b6 e024 	ldrh.w	lr, [r6, #36]	; 0x24
   12012:	fa1f f08e 	uxth.w	r0, lr
				    (interval_min > interval_max) ||
   12016:	f5b0 7ffa 	cmp.w	r0, #500	; 0x1f4
   1201a:	f4bf ae42 	bcs.w	11ca2 <ull_conn_rx+0x128a>
				uint16_t timeout =
   1201e:	f8b6 b026 	ldrh.w	fp, [r6, #38]	; 0x26
   12022:	fa1f f28b 	uxth.w	r2, fp
				    (latency > 499) ||
   12026:	f1a2 0c0a 	sub.w	ip, r2, #10
   1202a:	fa1f fc8c 	uxth.w	ip, ip
   1202e:	f640 4a76 	movw	sl, #3190	; 0xc76
   12032:	45d4      	cmp	ip, sl
   12034:	f63f ae35 	bhi.w	11ca2 <ull_conn_rx+0x128a>
				     ((latency + 1) * interval_max)) ||
   12038:	fb00 1c01 	mla	ip, r0, r1, r1
				    (timeout > 3200) ||
   1203c:	ebbc 0f82 	cmp.w	ip, r2, lsl #2
   12040:	f4bf ae2f 	bcs.w	11ca2 <ull_conn_rx+0x128a>
				     ((latency + 1) * interval_max)) ||
   12044:	f896 a028 	ldrb.w	sl, [r6, #40]	; 0x28
   12048:	4551      	cmp	r1, sl
					cpr->preferred_periodicity;
   1204a:	46d4      	mov	ip, sl
				     ((latency + 1) * interval_max)) ||
   1204c:	f4ff ae29 	bcc.w	11ca2 <ull_conn_rx+0x128a>
				conn->llcp_conn_param.interval_min =
   12050:	f8bd a004 	ldrh.w	sl, [sp, #4]
				conn->llcp_conn_param.latency =	latency;
   12054:	f8a4 e178 	strh.w	lr, [r4, #376]	; 0x178
				conn->llcp_conn_param.interval_min =
   12058:	f8a4 a174 	strh.w	sl, [r4, #372]	; 0x174
				conn->llcp_conn_param.interval_max =
   1205c:	f8a4 8176 	strh.w	r8, [r4, #374]	; 0x176
				conn->llcp_conn_param.timeout =	timeout;
   12060:	f8a4 b17a 	strh.w	fp, [r4, #378]	; 0x17a
				conn->llcp_conn_param.preferred_periodicity =
   12064:	f884 c17c 	strb.w	ip, [r4, #380]	; 0x17c
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12068:	f896 802a 	ldrb.w	r8, [r6, #42]	; 0x2a
   1206c:	f896 c029 	ldrb.w	ip, [r6, #41]	; 0x29
				     lll->interval) ||
   12070:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   12074:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   12078:	f8a4 c17e 	strh.w	ip, [r4, #382]	; 0x17e
					sys_le16_to_cpu(cpr->offset0);
   1207c:	f896 802c 	ldrb.w	r8, [r6, #44]	; 0x2c
   12080:	f896 c02b 	ldrb.w	ip, [r6, #43]	; 0x2b
   12084:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   12088:	f8a4 c180 	strh.w	ip, [r4, #384]	; 0x180
					sys_le16_to_cpu(cpr->offset1);
   1208c:	f896 802e 	ldrb.w	r8, [r6, #46]	; 0x2e
   12090:	f896 c02d 	ldrb.w	ip, [r6, #45]	; 0x2d
   12094:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   12098:	f8a4 c182 	strh.w	ip, [r4, #386]	; 0x182
					sys_le16_to_cpu(cpr->offset2);
   1209c:	f896 8030 	ldrb.w	r8, [r6, #48]	; 0x30
   120a0:	f896 c02f 	ldrb.w	ip, [r6, #47]	; 0x2f
   120a4:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   120a8:	f8a4 c184 	strh.w	ip, [r4, #388]	; 0x184
					sys_le16_to_cpu(cpr->offset3);
   120ac:	f896 8032 	ldrb.w	r8, [r6, #50]	; 0x32
   120b0:	f896 c031 	ldrb.w	ip, [r6, #49]	; 0x31
   120b4:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   120b8:	f8a4 c186 	strh.w	ip, [r4, #390]	; 0x186
					sys_le16_to_cpu(cpr->offset4);
   120bc:	f896 c033 	ldrb.w	ip, [r6, #51]	; 0x33
   120c0:	f896 8034 	ldrb.w	r8, [r6, #52]	; 0x34
   120c4:	ea4c 2c08 	orr.w	ip, ip, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   120c8:	f8a4 c188 	strh.w	ip, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->offset5);
   120cc:	f896 c035 	ldrb.w	ip, [r6, #53]	; 0x35
   120d0:	f896 6036 	ldrb.w	r6, [r6, #54]	; 0x36
				if ((conn->llcp_conn_param.interval_max !=
   120d4:	4571      	cmp	r1, lr
					sys_le16_to_cpu(cpr->offset5);
   120d6:	ea4c 2606 	orr.w	r6, ip, r6, lsl #8
				conn->llcp_conn_param.offset5 =
   120da:	f8a4 618a 	strh.w	r6, [r4, #394]	; 0x18a
				if ((conn->llcp_conn_param.interval_max !=
   120de:	f000 80cc 	beq.w	1227a <ull_conn_rx+0x1862>
					if (conn->llcp_enc.pause_tx) {
   120e2:	f013 0f02 	tst.w	r3, #2
						conn->llcp_conn_param.state =
   120e6:	f894 3172 	ldrb.w	r3, [r4, #370]	; 0x172
					if (conn->llcp_enc.pause_tx) {
   120ea:	f000 80c0 	beq.w	1226e <ull_conn_rx+0x1856>
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   120ee:	682a      	ldr	r2, [r5, #0]
						conn->llcp_conn_param.state =
   120f0:	2102      	movs	r1, #2
   120f2:	f361 0302 	bfi	r3, r1, #0, #3
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   120f6:	2103      	movs	r1, #3
						conn->llcp_conn_param.state =
   120f8:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
						(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   120fc:	7111      	strb	r1, [r2, #4]
				conn->llcp_conn_param.ack--;
   120fe:	9b00      	ldr	r3, [sp, #0]
   12100:	3b01      	subs	r3, #1
   12102:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
				if (!conn_upd_curr) {
   12106:	f1b9 0f00 	cmp.w	r9, #0
   1210a:	f47e acd5 	bne.w	10ab8 <ull_conn_rx+0xa0>
   1210e:	e5c4      	b.n	11c9a <ull_conn_rx+0x1282>
				      0x03) == 0x02) &&
   12110:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   12114:	2a03      	cmp	r2, #3
   12116:	f47f ab55 	bne.w	117c4 <ull_conn_rx+0xdac>
   1211a:	f7ff bb4c 	b.w	117b6 <ull_conn_rx+0xd9e>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1211e:	682a      	ldr	r2, [r5, #0]
   12120:	210e      	movs	r1, #14
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12122:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   12124:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   12126:	7733      	strb	r3, [r6, #28]
			cu->interval = lll->interval;
   12128:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   1212a:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
   1212e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   12130:	83f3      	strh	r3, [r6, #30]
			cu->timeout = conn->supervision_reload *
   12132:	fb03 f202 	mul.w	r2, r3, r2
				      lll->interval * 125U / 1000;
   12136:	237d      	movs	r3, #125	; 0x7d
   12138:	fb03 f302 	mul.w	r3, r3, r2
			cu->latency = lll->latency;
   1213c:	8431      	strh	r1, [r6, #32]
				      lll->interval * 125U / 1000;
   1213e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   12142:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   12146:	8473      	strh	r3, [r6, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   12148:	f7fe be44 	b.w	10dd4 <ull_conn_rx+0x3bc>
		LL_ASSERT(conn_upd_curr == conn);
   1214c:	4f19      	ldr	r7, [pc, #100]	; (121b4 <ull_conn_rx+0x179c>)
   1214e:	6839      	ldr	r1, [r7, #0]
   12150:	428c      	cmp	r4, r1
   12152:	d010      	beq.n	12176 <ull_conn_rx+0x175e>
   12154:	4a18      	ldr	r2, [pc, #96]	; (121b8 <ull_conn_rx+0x17a0>)
   12156:	4919      	ldr	r1, [pc, #100]	; (121bc <ull_conn_rx+0x17a4>)
   12158:	4819      	ldr	r0, [pc, #100]	; (121c0 <ull_conn_rx+0x17a8>)
   1215a:	f241 03ea 	movw	r3, #4330	; 0x10ea
   1215e:	f007 fe4a 	bl	19df6 <printk>
   12162:	4040      	eors	r0, r0
   12164:	f380 8811 	msr	BASEPRI, r0
   12168:	f04f 0003 	mov.w	r0, #3
   1216c:	df02      	svc	2
   1216e:	f894 3170 	ldrb.w	r3, [r4, #368]	; 0x170
   12172:	f894 2172 	ldrb.w	r2, [r4, #370]	; 0x172
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   12176:	f884 3171 	strb.w	r3, [r4, #369]	; 0x171
	conn_upd_curr = NULL;
   1217a:	2300      	movs	r3, #0
   1217c:	603b      	str	r3, [r7, #0]
		conn->procedure_expire = 0U;
   1217e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   12182:	f7ff ba60 	b.w	11646 <ull_conn_rx+0xc2e>
			tx->next = conn->tx_head->next;
   12186:	6811      	ldr	r1, [r2, #0]
   12188:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   1218a:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   1218c:	e9c4 336d 	strd	r3, r3, [r4, #436]	; 0x1b4
   12190:	f7fe bf4b 	b.w	1102a <ull_conn_rx+0x612>
				conn->lll.max_tx_octets = eff_tx_octets;
   12194:	f8a4 205c 	strh.w	r2, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   12198:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
   1219c:	e6a6      	b.n	11eec <ull_conn_rx+0x14d4>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1219e:	4548      	cmp	r0, r9
   121a0:	f47f ae8c 	bne.w	11ebc <ull_conn_rx+0x14a4>
			    eff_rx_time == conn->lll.max_rx_time &&
   121a4:	45c4      	cmp	ip, r8
   121a6:	f47f ae89 	bne.w	11ebc <ull_conn_rx+0x14a4>
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   121aa:	682b      	ldr	r3, [r5, #0]
   121ac:	2503      	movs	r5, #3
   121ae:	711d      	strb	r5, [r3, #4]
				goto send_length_resp;
   121b0:	f7ff bbc7 	b.w	11942 <ull_conn_rx+0xf2a>
   121b4:	20002120 	.word	0x20002120
   121b8:	00020020 	.word	0x00020020
   121bc:	00020124 	.word	0x00020124
   121c0:	0001fcdc 	.word	0x0001fcdc
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   121c4:	2a23      	cmp	r2, #35	; 0x23
   121c6:	f43f aa37 	beq.w	11638 <ull_conn_rx+0xc20>
			conn->slave.ticks_to_offset =
   121ca:	f8d4 2194 	ldr.w	r2, [r4, #404]	; 0x194
   121ce:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   121d2:	f7ff ba31 	b.w	11638 <ull_conn_rx+0xc20>
	LL_ASSERT(rx_dle);
   121d6:	4a5d      	ldr	r2, [pc, #372]	; (1234c <ull_conn_rx+0x1934>)
   121d8:	495d      	ldr	r1, [pc, #372]	; (12350 <ull_conn_rx+0x1938>)
   121da:	485e      	ldr	r0, [pc, #376]	; (12354 <ull_conn_rx+0x193c>)
   121dc:	f241 33a2 	movw	r3, #5026	; 0x13a2
   121e0:	f007 fe09 	bl	19df6 <printk>
   121e4:	4040      	eors	r0, r0
   121e6:	f380 8811 	msr	BASEPRI, r0
   121ea:	f04f 0003 	mov.w	r0, #3
   121ee:	df02      	svc	2
   121f0:	e5b2      	b.n	11d58 <ull_conn_rx+0x1340>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   121f2:	2b23      	cmp	r3, #35	; 0x23
   121f4:	f43f ae23 	beq.w	11e3e <ull_conn_rx+0x1426>
			conn->slave.ticks_to_offset =
   121f8:	f8d4 3194 	ldr.w	r3, [r4, #404]	; 0x194
   121fc:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   12200:	e61d      	b.n	11e3e <ull_conn_rx+0x1426>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   12202:	682b      	ldr	r3, [r5, #0]
   12204:	2112      	movs	r1, #18
   12206:	7119      	strb	r1, [r3, #4]
		p->status = 0U;
   12208:	7730      	strb	r0, [r6, #28]
		p->tx = conn->lll.phy_tx;
   1220a:	7772      	strb	r2, [r6, #29]
		p->rx = conn->lll.phy_rx;
   1220c:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   12210:	f3c3 0302 	ubfx	r3, r3, #0, #3
   12214:	77b3      	strb	r3, [r6, #30]
		if (err) {
   12216:	f7fe bc50 	b.w	10aba <ull_conn_rx+0xa2>
		rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_1M);
   1221a:	4684      	mov	ip, r0
   1221c:	f7ff bb2c 	b.w	11878 <ull_conn_rx+0xe60>
			tx->next = conn->tx_head->next;
   12220:	6819      	ldr	r1, [r3, #0]
   12222:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   12224:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   12226:	e9c4 226d 	strd	r2, r2, [r4, #436]	; 0x1b4
   1222a:	e417      	b.n	11a5c <ull_conn_rx+0x1044>
			     lll->interval) ||
   1222c:	8e26      	ldrh	r6, [r4, #48]	; 0x30
   1222e:	4286      	cmp	r6, r0
   12230:	f47f ad25 	bne.w	11c7e <ull_conn_rx+0x1266>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12234:	f240 40e2 	movw	r0, #1250	; 0x4e2
   12238:	fb00 f202 	mul.w	r2, r0, r2
   1223c:	f242 7010 	movw	r0, #10000	; 0x2710
   12240:	fb00 2303 	mla	r3, r0, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
   12244:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12248:	3b01      	subs	r3, #1
   1224a:	fbb3 f3f2 	udiv	r3, r3, r2
			    (conn->llcp_conn_param.latency != lll->latency) ||
   1224e:	b29b      	uxth	r3, r3
   12250:	4298      	cmp	r0, r3
   12252:	f47f ad14 	bne.w	11c7e <ull_conn_rx+0x1266>
				conn->llcp_conn_param.state =
   12256:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   1225a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1225e:	f043 0301 	orr.w	r3, r3, #1
   12262:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
				(*rx)->hdr.type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12266:	682b      	ldr	r3, [r5, #0]
   12268:	2203      	movs	r2, #3
   1226a:	711a      	strb	r2, [r3, #4]
   1226c:	e50e      	b.n	11c8c <ull_conn_rx+0x1274>
						conn->llcp_conn_param.state =
   1226e:	2203      	movs	r2, #3
   12270:	f362 0302 	bfi	r3, r2, #0, #3
   12274:	f884 3172 	strb.w	r3, [r4, #370]	; 0x172
   12278:	e741      	b.n	120fe <ull_conn_rx+0x16e6>
				     lll->interval) ||
   1227a:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1227c:	4281      	cmp	r1, r0
   1227e:	f47f af30 	bne.w	120e2 <ull_conn_rx+0x16ca>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12282:	f240 41e2 	movw	r1, #1250	; 0x4e2
   12286:	fb01 f10e 	mul.w	r1, r1, lr
   1228a:	f242 7010 	movw	r0, #10000	; 0x2710
   1228e:	fb00 1202 	mla	r2, r0, r2, r1
				     lll->latency) ||
   12292:	f8b4 00c6 	ldrh.w	r0, [r4, #198]	; 0xc6
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12296:	3a01      	subs	r2, #1
   12298:	fbb2 f2f1 	udiv	r2, r2, r1
				     lll->latency) ||
   1229c:	b292      	uxth	r2, r2
   1229e:	4290      	cmp	r0, r2
   122a0:	f47f af1f 	bne.w	120e2 <ull_conn_rx+0x16ca>
					conn->llcp_conn_param.state =
   122a4:	f8b4 3172 	ldrh.w	r3, [r4, #370]	; 0x172
   122a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   122ac:	f043 0301 	orr.w	r3, r3, #1
   122b0:	f8a4 3172 	strh.w	r3, [r4, #370]	; 0x172
					(*rx)->hdr.type =
   122b4:	682b      	ldr	r3, [r5, #0]
   122b6:	2203      	movs	r2, #3
   122b8:	711a      	strb	r2, [r3, #4]
   122ba:	e720      	b.n	120fe <ull_conn_rx+0x16e6>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   122bc:	f894 219a 	ldrb.w	r2, [r4, #410]	; 0x19a
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   122c0:	f012 0f06 	tst.w	r2, #6
   122c4:	f43f aaae 	beq.w	11824 <ull_conn_rx+0xe0c>
   122c8:	f7fe bcfc 	b.w	10cc4 <ull_conn_rx+0x2ac>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   122cc:	f894 3104 	ldrb.w	r3, [r4, #260]	; 0x104
   122d0:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
   122d4:	4293      	cmp	r3, r2
   122d6:	d00e      	beq.n	122f6 <ull_conn_rx+0x18de>
   122d8:	4a1c      	ldr	r2, [pc, #112]	; (1234c <ull_conn_rx+0x1934>)
   122da:	491f      	ldr	r1, [pc, #124]	; (12358 <ull_conn_rx+0x1940>)
   122dc:	481d      	ldr	r0, [pc, #116]	; (12354 <ull_conn_rx+0x193c>)
   122de:	f241 03cf 	movw	r3, #4303	; 0x10cf
   122e2:	f007 fd88 	bl	19df6 <printk>
   122e6:	4040      	eors	r0, r0
   122e8:	f380 8811 	msr	BASEPRI, r0
   122ec:	f04f 0003 	mov.w	r0, #3
   122f0:	df02      	svc	2
   122f2:	f894 2105 	ldrb.w	r2, [r4, #261]	; 0x105
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   122f6:	f894 1172 	ldrb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   122fa:	f8b4 3176 	ldrh.w	r3, [r4, #374]	; 0x176
   122fe:	f8a4 3108 	strh.w	r3, [r4, #264]	; 0x108
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   12302:	2305      	movs	r3, #5
   12304:	f363 0102 	bfi	r1, r3, #0, #3
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12308:	f894 0106 	ldrb.w	r0, [r4, #262]	; 0x106
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1230c:	f884 1172 	strb.w	r1, [r4, #370]	; 0x172
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   12310:	f3c1 03c0 	ubfx	r3, r1, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   12314:	009b      	lsls	r3, r3, #2
   12316:	f020 0007 	bic.w	r0, r0, #7
   1231a:	f043 0301 	orr.w	r3, r3, #1
   1231e:	4303      	orrs	r3, r0
		conn->llcp_cu.ack--;
   12320:	3a01      	subs	r2, #1
		conn->llcp_cu.win_size = 1U;
   12322:	2501      	movs	r5, #1
		conn->llcp_cu.ack--;
   12324:	f884 2105 	strb.w	r2, [r4, #261]	; 0x105
		conn->llcp_cu.win_offset_us = 0U;
   12328:	2000      	movs	r0, #0
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1232a:	f8b4 2178 	ldrh.w	r2, [r4, #376]	; 0x178
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1232e:	f884 3106 	strb.w	r3, [r4, #262]	; 0x106
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12332:	f8b4 317a 	ldrh.w	r3, [r4, #378]	; 0x17a
		conn->llcp_cu.win_size = 1U;
   12336:	f884 5114 	strb.w	r5, [r4, #276]	; 0x114
		conn->llcp_cu.win_offset_us = 0U;
   1233a:	f8c4 0110 	str.w	r0, [r4, #272]	; 0x110
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1233e:	f8a4 210a 	strh.w	r2, [r4, #266]	; 0x10a
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   12342:	f8a4 310c 	strh.w	r3, [r4, #268]	; 0x10c
	if (err) {
   12346:	f7fe bc65 	b.w	10c14 <ull_conn_rx+0x1fc>
   1234a:	bf00      	nop
   1234c:	00020020 	.word	0x00020020
   12350:	0002013c 	.word	0x0002013c
   12354:	0001fcdc 	.word	0x0001fcdc
   12358:	000200fc 	.word	0x000200fc

0001235c <ull_conn_tx_demux>:
{
   1235c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12360:	4f24      	ldr	r7, [pc, #144]	; (123f4 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12362:	4e25      	ldr	r6, [pc, #148]	; (123f8 <ull_conn_tx_demux+0x9c>)
   12364:	78fa      	ldrb	r2, [r7, #3]
{
   12366:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   12368:	1d3d      	adds	r5, r7, #4
   1236a:	e021      	b.n	123b0 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1236c:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   12370:	4630      	mov	r0, r6
   12372:	f7f8 ff77 	bl	b264 <mem_get>
	if (conn->lll.handle != handle) {
   12376:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   12378:	bb32      	cbnz	r2, 123c8 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   1237a:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   1237e:	f8d0 11bc 	ldr.w	r1, [r0, #444]	; 0x1bc
			tx->next = NULL;
   12382:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   12384:	b369      	cbz	r1, 123e2 <ull_conn_tx_demux+0x86>
			if (conn->tx_data_last) {
   12386:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
   1238a:	b102      	cbz	r2, 1238e <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   1238c:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   1238e:	f8c0 31c0 	str.w	r3, [r0, #448]	; 0x1c0
		MFIFO_DEQUEUE(conn_tx);
   12392:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   12394:	78bb      	ldrb	r3, [r7, #2]
   12396:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   12398:	429a      	cmp	r2, r3
   1239a:	d005      	beq.n	123a8 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   1239c:	3301      	adds	r3, #1
   1239e:	b2db      	uxtb	r3, r3
		_first = 0U;
   123a0:	4299      	cmp	r1, r3
   123a2:	bf08      	it	eq
   123a4:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   123a6:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   123a8:	3c01      	subs	r4, #1
   123aa:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   123ae:	d016      	beq.n	123de <ull_conn_tx_demux+0x82>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   123b0:	78bb      	ldrb	r3, [r7, #2]
   123b2:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   123b4:	4293      	cmp	r3, r2
   123b6:	d012      	beq.n	123de <ull_conn_tx_demux+0x82>
	return (void *)(fifo + first * size);
   123b8:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   123bc:	eb15 0803 	adds.w	r8, r5, r3
   123c0:	d00d      	beq.n	123de <ull_conn_tx_demux+0x82>
	if (handle >= CONFIG_BT_MAX_CONN) {
   123c2:	5aea      	ldrh	r2, [r5, r3]
   123c4:	2a00      	cmp	r2, #0
   123c6:	d0d1      	beq.n	1236c <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   123c8:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   123cc:	790b      	ldrb	r3, [r1, #4]
   123ce:	f36f 0301 	bfc	r3, #0, #2
   123d2:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   123d4:	f64f 70ff 	movw	r0, #65535	; 0xffff
   123d8:	f7fc fdd4 	bl	ef84 <ll_tx_ack_put>
   123dc:	e7d9      	b.n	12392 <ull_conn_tx_demux+0x36>
}
   123de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				if (!conn->tx_head) {
   123e2:	f8d0 21b0 	ldr.w	r2, [r0, #432]	; 0x1b0
				conn->tx_data = tx;
   123e6:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
				if (!conn->tx_head) {
   123ea:	2a00      	cmp	r2, #0
   123ec:	d1cb      	bne.n	12386 <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   123ee:	f8c0 31b0 	str.w	r3, [r0, #432]	; 0x1b0
			if (conn->tx_data_last) {
   123f2:	e7cc      	b.n	1238e <ull_conn_tx_demux+0x32>
   123f4:	200007e8 	.word	0x200007e8
   123f8:	20001f58 	.word	0x20001f58

000123fc <conn_cleanup>:
{
   123fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	rx = conn->llcp_rx;
   12400:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	rx->hdr.handle = conn->lll.handle;
   12404:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	*((uint8_t *)rx->pdu) = reason;
   12406:	f880 114c 	strb.w	r1, [r0, #332]	; 0x14c
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   1240a:	230d      	movs	r3, #13
{
   1240c:	b083      	sub	sp, #12
   1240e:	4606      	mov	r6, r0
	rx->hdr.handle = conn->lll.handle;
   12410:	f8a0 2136 	strh.w	r2, [r0, #310]	; 0x136
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   12414:	f880 3134 	strb.w	r3, [r0, #308]	; 0x134
	struct lll_conn *lll = &conn->lll;
   12418:	f100 0b1c 	add.w	fp, r0, #28
	while (rx) {
   1241c:	b144      	cbz	r4, 12430 <conn_cleanup+0x34>
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   1241e:	2503      	movs	r5, #3
		rx = hdr->link->mem;
   12420:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   12422:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   12424:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_DC_PDU_RELEASE;
   12426:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   12428:	f7fc fd66 	bl	eef8 <ll_rx_put>
	while (rx) {
   1242c:	2c00      	cmp	r4, #0
   1242e:	d1f7      	bne.n	12420 <conn_cleanup+0x24>
	while (conn->tx_head) {
   12430:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   12434:	b381      	cbz	r1, 12498 <conn_cleanup+0x9c>
		link = mem_acquire(&mem_link_tx.free);
   12436:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 124f0 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   1243a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 124e8 <conn_cleanup+0xec>
   1243e:	f8df 90b4 	ldr.w	r9, [pc, #180]	; 124f4 <conn_cleanup+0xf8>
   12442:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   12446:	e007      	b.n	12458 <conn_cleanup+0x5c>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   12448:	4629      	mov	r1, r5
   1244a:	4620      	mov	r0, r4
   1244c:	463a      	mov	r2, r7
   1244e:	f7f8 ff3b 	bl	b2c8 <memq_enqueue>
	while (conn->tx_head) {
   12452:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   12456:	b1f9      	cbz	r1, 12498 <conn_cleanup+0x9c>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   12458:	4630      	mov	r0, r6
   1245a:	f7fd fb91 	bl	fb80 <tx_ull_dequeue>
   1245e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   12460:	4640      	mov	r0, r8
   12462:	f7f8 fecd 	bl	b200 <mem_acquire>
		LL_ASSERT(link);
   12466:	4604      	mov	r4, r0
   12468:	2800      	cmp	r0, #0
   1246a:	d1ed      	bne.n	12448 <conn_cleanup+0x4c>
   1246c:	481c      	ldr	r0, [pc, #112]	; (124e0 <conn_cleanup+0xe4>)
   1246e:	f44f 63e2 	mov.w	r3, #1808	; 0x710
   12472:	4652      	mov	r2, sl
   12474:	4649      	mov	r1, r9
   12476:	f007 fcbe 	bl	19df6 <printk>
   1247a:	4040      	eors	r0, r0
   1247c:	f380 8811 	msr	BASEPRI, r0
   12480:	f04f 0003 	mov.w	r0, #3
   12484:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   12486:	4629      	mov	r1, r5
   12488:	4620      	mov	r0, r4
   1248a:	463a      	mov	r2, r7
   1248c:	f7f8 ff1c 	bl	b2c8 <memq_enqueue>
	while (conn->tx_head) {
   12490:	f8d6 11b0 	ldr.w	r1, [r6, #432]	; 0x1b0
   12494:	2900      	cmp	r1, #0
   12496:	d1df      	bne.n	12458 <conn_cleanup+0x5c>
				    TICKER_ID_CONN_BASE + lll->handle,
   12498:	f896 202c 	ldrb.w	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1249c:	4b11      	ldr	r3, [pc, #68]	; (124e4 <conn_cleanup+0xe8>)
   1249e:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   124a2:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   124a4:	b2d2      	uxtb	r2, r2
   124a6:	2101      	movs	r1, #1
   124a8:	2000      	movs	r0, #0
   124aa:	f7fa fa55 	bl	c958 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   124ae:	f030 0302 	bics.w	r3, r0, #2
   124b2:	d00c      	beq.n	124ce <conn_cleanup+0xd2>
   124b4:	4a0c      	ldr	r2, [pc, #48]	; (124e8 <conn_cleanup+0xec>)
   124b6:	490d      	ldr	r1, [pc, #52]	; (124ec <conn_cleanup+0xf0>)
   124b8:	4809      	ldr	r0, [pc, #36]	; (124e0 <conn_cleanup+0xe4>)
   124ba:	f240 63cf 	movw	r3, #1743	; 0x6cf
   124be:	f007 fc9a 	bl	19df6 <printk>
   124c2:	4040      	eors	r0, r0
   124c4:	f380 8811 	msr	BASEPRI, r0
   124c8:	f04f 0003 	mov.w	r0, #3
   124cc:	df02      	svc	2
	lll->handle = 0xFFFF;
   124ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   124d2:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   124d4:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   124d6:	b003      	add	sp, #12
   124d8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   124dc:	f7ff bf3e 	b.w	1235c <ull_conn_tx_demux>
   124e0:	0001fcdc 	.word	0x0001fcdc
   124e4:	0000fe85 	.word	0x0000fe85
   124e8:	00020020 	.word	0x00020020
   124ec:	00020158 	.word	0x00020158
   124f0:	20002228 	.word	0x20002228
   124f4:	00020078 	.word	0x00020078

000124f8 <ull_conn_done>:
{
   124f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   124fc:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   124fe:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   12500:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   12502:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12506:	429a      	cmp	r2, r3
{
   12508:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   1250a:	d05f      	beq.n	125cc <ull_conn_done+0xd4>
	switch (done->extra.mic_state) {
   1250c:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   12510:	2b01      	cmp	r3, #1
   12512:	4606      	mov	r6, r0
   12514:	f000 80e2 	beq.w	126dc <ull_conn_done+0x1e4>
   12518:	2b02      	cmp	r3, #2
   1251a:	d050      	beq.n	125be <ull_conn_done+0xc6>
   1251c:	2b00      	cmp	r3, #0
   1251e:	f000 80c3 	beq.w	126a8 <ull_conn_done+0x1b0>
	reason_peer = conn->llcp_terminate.reason_peer;
   12522:	f894 712f 	ldrb.w	r7, [r4, #303]	; 0x12f
	if (reason_peer && (
   12526:	2f00      	cmp	r7, #0
   12528:	d14c      	bne.n	125c4 <ull_conn_done+0xcc>
	latency_event = lll->latency_event;
   1252a:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   1252e:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	ticks_drift_plus = 0U;
   12530:	9709      	str	r7, [sp, #36]	; 0x24
	elapsed_event = latency_event + 1;
   12532:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   12536:	9708      	str	r7, [sp, #32]
	elapsed_event = latency_event + 1;
   12538:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   1253c:	2b00      	cmp	r3, #0
   1253e:	d048      	beq.n	125d2 <ull_conn_done+0xda>
		} else if (lll->role) {
   12540:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   12544:	2b00      	cmp	r3, #0
   12546:	f2c0 810f 	blt.w	12768 <ull_conn_done+0x270>
	if (done->extra.crc_valid) {
   1254a:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   1254e:	2200      	movs	r2, #0
   12550:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   12554:	2b00      	cmp	r3, #0
   12556:	f000 80c7 	beq.w	126e8 <ull_conn_done+0x1f0>
		conn->supervision_expire = 0U;
   1255a:	2300      	movs	r3, #0
   1255c:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   12560:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   12564:	b133      	cbz	r3, 12574 <ull_conn_done+0x7c>
		if (conn->procedure_expire > elapsed_event) {
   12566:	4543      	cmp	r3, r8
   12568:	f240 8114 	bls.w	12794 <ull_conn_done+0x29c>
			conn->procedure_expire -= elapsed_event;
   1256c:	eba3 0308 	sub.w	r3, r3, r8
   12570:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   12574:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   12578:	b133      	cbz	r3, 12588 <ull_conn_done+0x90>
		if (conn->apto_expire > elapsed_event) {
   1257a:	4543      	cmp	r3, r8
   1257c:	f240 80e1 	bls.w	12742 <ull_conn_done+0x24a>
			conn->apto_expire -= elapsed_event;
   12580:	eba3 0308 	sub.w	r3, r3, r8
   12584:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   12588:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   1258c:	2b00      	cmp	r3, #0
   1258e:	d04a      	beq.n	12626 <ull_conn_done+0x12e>
		if (conn->appto_expire > elapsed_event) {
   12590:	4543      	cmp	r3, r8
   12592:	f200 80b6 	bhi.w	12702 <ull_conn_done+0x20a>
			if ((conn->procedure_expire == 0U) &&
   12596:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
			conn->appto_expire = 0U;
   1259a:	2200      	movs	r2, #0
   1259c:	f8a4 20d0 	strh.w	r2, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   125a0:	2b00      	cmp	r3, #0
   125a2:	d140      	bne.n	12626 <ull_conn_done+0x12e>
			    (conn->llcp_req == conn->llcp_ack)) {
   125a4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   125a8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			if ((conn->procedure_expire == 0U) &&
   125ac:	4293      	cmp	r3, r2
   125ae:	d13e      	bne.n	1262e <ull_conn_done+0x136>
				conn->llcp_ack -= 2U;
   125b0:	3b02      	subs	r3, #2
				conn->llcp_type = LLCP_PING;
   125b2:	2205      	movs	r2, #5
				conn->llcp_ack -= 2U;
   125b4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   125b8:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   125bc:	e03c      	b.n	12638 <ull_conn_done+0x140>
		conn->llcp_terminate.reason_peer =
   125be:	273d      	movs	r7, #61	; 0x3d
   125c0:	f884 712f 	strb.w	r7, [r4, #303]	; 0x12f
		conn_cleanup(conn, reason_peer);
   125c4:	4639      	mov	r1, r7
   125c6:	4620      	mov	r0, r4
   125c8:	f7ff ff18 	bl	123fc <conn_cleanup>
}
   125cc:	b00b      	add	sp, #44	; 0x2c
   125ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   125d2:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   125d6:	2b00      	cmp	r3, #0
   125d8:	d1bf      	bne.n	1255a <ull_conn_done+0x62>
	else if (conn->connect_expire) {
   125da:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   125de:	2b00      	cmp	r3, #0
   125e0:	f000 8082 	beq.w	126e8 <ull_conn_done+0x1f0>
		if (conn->connect_expire > elapsed_event) {
   125e4:	4543      	cmp	r3, r8
   125e6:	f240 80f1 	bls.w	127cc <ull_conn_done+0x2d4>
			conn->connect_expire -= elapsed_event;
   125ea:	eba3 0308 	sub.w	r3, r3, r8
   125ee:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
   125f2:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
	if (conn->supervision_expire) {
   125f6:	2b00      	cmp	r3, #0
   125f8:	d0b2      	beq.n	12560 <ull_conn_done+0x68>
		if (conn->supervision_expire > elapsed_event) {
   125fa:	4598      	cmp	r8, r3
   125fc:	f080 80c5 	bcs.w	1278a <ull_conn_done+0x292>
			conn->supervision_expire -= elapsed_event;
   12600:	eba3 0308 	sub.w	r3, r3, r8
   12604:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   12606:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   12608:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   1260a:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   1260e:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   12610:	d907      	bls.n	12622 <ull_conn_done+0x12a>
			else if (lll->role) {
   12612:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   12616:	4293      	cmp	r3, r2
   12618:	daa2      	bge.n	12560 <ull_conn_done+0x68>
				if (latency_event) {
   1261a:	f1b9 0f00 	cmp.w	r9, #0
   1261e:	f000 80c7 	beq.w	127b0 <ull_conn_done+0x2b8>
				force = 1U;
   12622:	2701      	movs	r7, #1
   12624:	e79c      	b.n	12560 <ull_conn_done+0x68>
   12626:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1262a:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1262e:	1a9b      	subs	r3, r3, r2
   12630:	f003 0303 	and.w	r3, r3, #3
   12634:	2b02      	cmp	r3, #2
   12636:	d071      	beq.n	1271c <ull_conn_done+0x224>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   12638:	f894 2104 	ldrb.w	r2, [r4, #260]	; 0x104
   1263c:	f894 3105 	ldrb.w	r3, [r4, #261]	; 0x105
   12640:	429a      	cmp	r2, r3
   12642:	f000 808f 	beq.w	12764 <ull_conn_done+0x26c>
		lll->latency_event = 0U;
   12646:	2200      	movs	r2, #0
   12648:	84aa      	strh	r2, [r5, #36]	; 0x24
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1264a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   1264c:	b90f      	cbnz	r7, 12652 <ull_conn_done+0x15a>
   1264e:	454a      	cmp	r2, r9
   12650:	d070      	beq.n	12734 <ull_conn_done+0x23c>
		lazy = lll->latency_event + 1U;
   12652:	3201      	adds	r2, #1
   12654:	9c08      	ldr	r4, [sp, #32]
   12656:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   12658:	b90b      	cbnz	r3, 1265e <ull_conn_done+0x166>
   1265a:	2c00      	cmp	r4, #0
   1265c:	d04d      	beq.n	126fa <ull_conn_done+0x202>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   1265e:	7f2a      	ldrb	r2, [r5, #28]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12660:	4e67      	ldr	r6, [pc, #412]	; (12800 <ull_conn_done+0x308>)
		struct ll_conn *conn = lll->hdr.parent;
   12662:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   12664:	9506      	str	r5, [sp, #24]
   12666:	2000      	movs	r0, #0
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   12668:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1266a:	9103      	str	r1, [sp, #12]
   1266c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   12670:	b2d2      	uxtb	r2, r2
   12672:	9704      	str	r7, [sp, #16]
   12674:	9400      	str	r4, [sp, #0]
   12676:	9605      	str	r6, [sp, #20]
   12678:	2101      	movs	r1, #1
   1267a:	f7fa f91d 	bl	c8b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1267e:	f030 0302 	bics.w	r3, r0, #2
   12682:	d0a3      	beq.n	125cc <ull_conn_done+0xd4>
   12684:	f7fc fcf4 	bl	f070 <ull_disable_mark_get>
   12688:	4285      	cmp	r5, r0
   1268a:	d09f      	beq.n	125cc <ull_conn_done+0xd4>
   1268c:	4a5d      	ldr	r2, [pc, #372]	; (12804 <ull_conn_done+0x30c>)
   1268e:	495e      	ldr	r1, [pc, #376]	; (12808 <ull_conn_done+0x310>)
   12690:	485e      	ldr	r0, [pc, #376]	; (1280c <ull_conn_done+0x314>)
   12692:	f240 5317 	movw	r3, #1303	; 0x517
   12696:	f007 fbae 	bl	19df6 <printk>
   1269a:	4040      	eors	r0, r0
   1269c:	f380 8811 	msr	BASEPRI, r0
   126a0:	f04f 0003 	mov.w	r0, #3
   126a4:	df02      	svc	2
   126a6:	e791      	b.n	125cc <ull_conn_done+0xd4>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   126a8:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   126ac:	0719      	lsls	r1, r3, #28
   126ae:	d53b      	bpl.n	12728 <ull_conn_done+0x230>
					    (lll->latency + 6)) ?
   126b0:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   126b2:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   126b6:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   126b8:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   126ba:	bfc4      	itt	gt
   126bc:	1ad3      	subgt	r3, r2, r3
   126be:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   126c0:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   126c4:	bfcc      	ite	gt
   126c6:	b29b      	uxthgt	r3, r3
   126c8:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   126ca:	4299      	cmp	r1, r3
   126cc:	d057      	beq.n	1277e <ull_conn_done+0x286>
				conn->appto_reload = appto_reload_new;
   126ce:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   126d2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   126d6:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   126da:	e722      	b.n	12522 <ull_conn_done+0x2a>
		conn->appto_expire = conn->apto_expire = 0U;
   126dc:	2300      	movs	r3, #0
   126de:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   126e2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   126e6:	e71c      	b.n	12522 <ull_conn_done+0x2a>
		if (!conn->supervision_expire) {
   126e8:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   126ec:	2b00      	cmp	r3, #0
   126ee:	d184      	bne.n	125fa <ull_conn_done+0x102>
			conn->supervision_expire = conn->supervision_reload;
   126f0:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   126f4:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   126f8:	e77d      	b.n	125f6 <ull_conn_done+0xfe>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   126fa:	2900      	cmp	r1, #0
   126fc:	d04f      	beq.n	1279e <ull_conn_done+0x2a6>
   126fe:	4623      	mov	r3, r4
   12700:	e7ad      	b.n	1265e <ull_conn_done+0x166>
			conn->appto_expire -= elapsed_event;
   12702:	eba3 0808 	sub.w	r8, r3, r8
   12706:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1270a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
			conn->appto_expire -= elapsed_event;
   1270e:	f8a4 80d0 	strh.w	r8, [r4, #208]	; 0xd0
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   12712:	1a9b      	subs	r3, r3, r2
   12714:	f003 0303 	and.w	r3, r3, #3
   12718:	2b02      	cmp	r3, #2
   1271a:	d18d      	bne.n	12638 <ull_conn_done+0x140>
   1271c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   12720:	3b01      	subs	r3, #1
   12722:	2b01      	cmp	r3, #1
   12724:	d888      	bhi.n	12638 <ull_conn_done+0x140>
   12726:	e78e      	b.n	12646 <ull_conn_done+0x14e>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   12728:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   1272c:	07da      	lsls	r2, r3, #31
   1272e:	f57f aef8 	bpl.w	12522 <ull_conn_done+0x2a>
   12732:	e7bd      	b.n	126b0 <ull_conn_done+0x1b8>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   12734:	9c08      	ldr	r4, [sp, #32]
   12736:	b913      	cbnz	r3, 1273e <ull_conn_done+0x246>
   12738:	2c00      	cmp	r4, #0
   1273a:	f43f af47 	beq.w	125cc <ull_conn_done+0xd4>
	lazy = 0U;
   1273e:	4639      	mov	r1, r7
   12740:	e78d      	b.n	1265e <ull_conn_done+0x166>
			rx = ll_pdu_rx_alloc();
   12742:	f7fc fc07 	bl	ef54 <ll_pdu_rx_alloc>
			if (rx) {
   12746:	4601      	mov	r1, r0
   12748:	b370      	cbz	r0, 127a8 <ull_conn_done+0x2b0>
				conn->apto_expire = 0U;
   1274a:	2300      	movs	r3, #0
				rx->handle = lll->handle;
   1274c:	8baa      	ldrh	r2, [r5, #28]
				conn->apto_expire = 0U;
   1274e:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
				rx->type = NODE_RX_TYPE_APTO;
   12752:	2310      	movs	r3, #16
				rx->handle = lll->handle;
   12754:	80c2      	strh	r2, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   12756:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   12758:	6800      	ldr	r0, [r0, #0]
   1275a:	f7fc fbcd 	bl	eef8 <ll_rx_put>
				ll_rx_sched();
   1275e:	f7fc fbd5 	bl	ef0c <ll_rx_sched>
   12762:	e711      	b.n	12588 <ull_conn_done+0x90>
   12764:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   12766:	e770      	b.n	1264a <ull_conn_done+0x152>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   12768:	aa08      	add	r2, sp, #32
   1276a:	a909      	add	r1, sp, #36	; 0x24
   1276c:	4630      	mov	r0, r6
   1276e:	f7ee fc83 	bl	1078 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   12772:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   12776:	b373      	cbz	r3, 127d6 <ull_conn_done+0x2de>
				lll->latency_event = 0;
   12778:	2300      	movs	r3, #0
   1277a:	84ab      	strh	r3, [r5, #36]	; 0x24
   1277c:	e6e5      	b.n	1254a <ull_conn_done+0x52>
			if (conn->apto_expire == 0U) {
   1277e:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   12782:	2900      	cmp	r1, #0
   12784:	f47f aecd 	bne.w	12522 <ull_conn_done+0x2a>
   12788:	e7a3      	b.n	126d2 <ull_conn_done+0x1da>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   1278a:	4620      	mov	r0, r4
   1278c:	2108      	movs	r1, #8
   1278e:	f7ff fe35 	bl	123fc <conn_cleanup>
			return;
   12792:	e71b      	b.n	125cc <ull_conn_done+0xd4>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   12794:	4620      	mov	r0, r4
   12796:	2122      	movs	r1, #34	; 0x22
   12798:	f7ff fe30 	bl	123fc <conn_cleanup>
			return;
   1279c:	e716      	b.n	125cc <ull_conn_done+0xd4>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   1279e:	2f00      	cmp	r7, #0
   127a0:	f43f af14 	beq.w	125cc <ull_conn_done+0xd4>
   127a4:	460b      	mov	r3, r1
   127a6:	e75a      	b.n	1265e <ull_conn_done+0x166>
				conn->apto_expire = 1U;
   127a8:	2301      	movs	r3, #1
   127aa:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   127ae:	e6eb      	b.n	12588 <ull_conn_done+0x90>
					force = conn->slave.force & 0x01;
   127b0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   127b4:	085a      	lsrs	r2, r3, #1
					if (force) {
   127b6:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   127ba:	bf17      	itett	ne
   127bc:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   127c0:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   127c4:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   127c8:	461f      	movne	r7, r3
   127ca:	e6c9      	b.n	12560 <ull_conn_done+0x68>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   127cc:	4620      	mov	r0, r4
   127ce:	213e      	movs	r1, #62	; 0x3e
   127d0:	f7ff fe14 	bl	123fc <conn_cleanup>
			return;
   127d4:	e6fa      	b.n	125cc <ull_conn_done+0xd4>
				ull_conn_tx_demux(UINT8_MAX);
   127d6:	20ff      	movs	r0, #255	; 0xff
   127d8:	f7ff fdc0 	bl	1235c <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   127dc:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   127e0:	2b00      	cmp	r3, #0
   127e2:	d1c9      	bne.n	12778 <ull_conn_done+0x280>
   127e4:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   127e8:	463a      	mov	r2, r7
   127ea:	f7f8 fd75 	bl	b2d8 <memq_peek>
   127ee:	2800      	cmp	r0, #0
   127f0:	d1c2      	bne.n	12778 <ull_conn_done+0x280>
			} else if (lll->slave.latency_enabled) {
   127f2:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   127f6:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   127f8:	bf44      	itt	mi
   127fa:	8c2b      	ldrhmi	r3, [r5, #32]
   127fc:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   127fe:	e6a4      	b.n	1254a <ull_conn_done+0x52>
   12800:	0000ff99 	.word	0x0000ff99
   12804:	00020020 	.word	0x00020020
   12808:	00020188 	.word	0x00020188
   1280c:	0001fcdc 	.word	0x0001fcdc

00012810 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   12810:	f8d0 31b0 	ldr.w	r3, [r0, #432]	; 0x1b0
   12814:	2b00      	cmp	r3, #0
   12816:	f000 80e7 	beq.w	129e8 <ull_conn_tx_lll_enqueue+0x1d8>
   1281a:	3901      	subs	r1, #1
{
   1281c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   12820:	f8df 81cc 	ldr.w	r8, [pc, #460]	; 129f0 <ull_conn_tx_lll_enqueue+0x1e0>
		LL_ASSERT(link);
   12824:	f8df a1cc 	ldr.w	sl, [pc, #460]	; 129f4 <ull_conn_tx_lll_enqueue+0x1e4>
   12828:	f8df 91cc 	ldr.w	r9, [pc, #460]	; 129f8 <ull_conn_tx_lll_enqueue+0x1e8>
   1282c:	4604      	mov	r4, r0
   1282e:	b2cd      	uxtb	r5, r1
   12830:	e012      	b.n	12858 <ull_conn_tx_lll_enqueue+0x48>
		link = mem_acquire(&mem_link_tx.free);
   12832:	4640      	mov	r0, r8
   12834:	f7f8 fce4 	bl	b200 <mem_acquire>
		LL_ASSERT(link);
   12838:	4607      	mov	r7, r0
   1283a:	2800      	cmp	r0, #0
   1283c:	d066      	beq.n	1290c <ull_conn_tx_lll_enqueue+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   1283e:	4631      	mov	r1, r6
   12840:	4638      	mov	r0, r7
   12842:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   12846:	f7f8 fd3f 	bl	b2c8 <memq_enqueue>
	while (conn->tx_head &&
   1284a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
   1284e:	3d01      	subs	r5, #1
   12850:	b2ed      	uxtb	r5, r5
   12852:	2b00      	cmp	r3, #0
   12854:	f000 8089 	beq.w	1296a <ull_conn_tx_lll_enqueue+0x15a>
		 !conn->llcp_phy.pause_tx &&
   12858:	f894 21ab 	ldrb.w	r2, [r4, #427]	; 0x1ab
	while (conn->tx_head &&
   1285c:	07d1      	lsls	r1, r2, #31
   1285e:	d403      	bmi.n	12868 <ull_conn_tx_lll_enqueue+0x58>
		 !conn->llcp_enc.pause_tx &&
   12860:	f894 2152 	ldrb.w	r2, [r4, #338]	; 0x152
		 !conn->llcp_phy.pause_tx &&
   12864:	0792      	lsls	r2, r2, #30
   12866:	d566      	bpl.n	12936 <ull_conn_tx_lll_enqueue+0x126>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   12868:	f8d4 21b4 	ldr.w	r2, [r4, #436]	; 0x1b4
   1286c:	4293      	cmp	r3, r2
   1286e:	d17c      	bne.n	1296a <ull_conn_tx_lll_enqueue+0x15a>
   12870:	2dff      	cmp	r5, #255	; 0xff
   12872:	d07a      	beq.n	1296a <ull_conn_tx_lll_enqueue+0x15a>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   12874:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
   12878:	4620      	mov	r0, r4
   1287a:	f7fd f981 	bl	fb80 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1287e:	7903      	ldrb	r3, [r0, #4]
   12880:	f003 0303 	and.w	r3, r3, #3
   12884:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   12886:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   12888:	d1d3      	bne.n	12832 <ull_conn_tx_lll_enqueue+0x22>
	switch (pdu_tx->llctrl.opcode) {
   1288a:	79c3      	ldrb	r3, [r0, #7]
   1288c:	3b03      	subs	r3, #3
   1288e:	2b14      	cmp	r3, #20
   12890:	d8cf      	bhi.n	12832 <ull_conn_tx_lll_enqueue+0x22>
   12892:	a201      	add	r2, pc, #4	; (adr r2, 12898 <ull_conn_tx_lll_enqueue+0x88>)
   12894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   12898:	000128f5 	.word	0x000128f5
   1289c:	000128f5 	.word	0x000128f5
   128a0:	00012833 	.word	0x00012833
   128a4:	00012833 	.word	0x00012833
   128a8:	00012833 	.word	0x00012833
   128ac:	00012833 	.word	0x00012833
   128b0:	00012833 	.word	0x00012833
   128b4:	000128f5 	.word	0x000128f5
   128b8:	000128ed 	.word	0x000128ed
   128bc:	00012833 	.word	0x00012833
   128c0:	00012833 	.word	0x00012833
   128c4:	00012833 	.word	0x00012833
   128c8:	00012833 	.word	0x00012833
   128cc:	00012833 	.word	0x00012833
   128d0:	00012833 	.word	0x00012833
   128d4:	00012833 	.word	0x00012833
   128d8:	00012833 	.word	0x00012833
   128dc:	00012833 	.word	0x00012833
   128e0:	00012833 	.word	0x00012833
   128e4:	00012929 	.word	0x00012929
   128e8:	00012929 	.word	0x00012929
		if (!conn->lll.role) {
   128ec:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   128f0:	2b00      	cmp	r3, #0
   128f2:	da9e      	bge.n	12832 <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   128f4:	f894 3152 	ldrb.w	r3, [r4, #338]	; 0x152
   128f8:	f043 0302 	orr.w	r3, r3, #2
   128fc:	f884 3152 	strb.w	r3, [r4, #338]	; 0x152
		link = mem_acquire(&mem_link_tx.free);
   12900:	4640      	mov	r0, r8
   12902:	f7f8 fc7d 	bl	b200 <mem_acquire>
		LL_ASSERT(link);
   12906:	4607      	mov	r7, r0
   12908:	2800      	cmp	r0, #0
   1290a:	d198      	bne.n	1283e <ull_conn_tx_lll_enqueue+0x2e>
   1290c:	4837      	ldr	r0, [pc, #220]	; (129ec <ull_conn_tx_lll_enqueue+0x1dc>)
   1290e:	f240 536b 	movw	r3, #1387	; 0x56b
   12912:	4652      	mov	r2, sl
   12914:	4649      	mov	r1, r9
   12916:	f007 fa6e 	bl	19df6 <printk>
   1291a:	4040      	eors	r0, r0
   1291c:	f380 8811 	msr	BASEPRI, r0
   12920:	f04f 0003 	mov.w	r0, #3
   12924:	df02      	svc	2
   12926:	e78a      	b.n	1283e <ull_conn_tx_lll_enqueue+0x2e>
		conn->llcp_phy.pause_tx = 1U;
   12928:	f894 31ab 	ldrb.w	r3, [r4, #427]	; 0x1ab
   1292c:	f043 0301 	orr.w	r3, r3, #1
   12930:	f884 31ab 	strb.w	r3, [r4, #427]	; 0x1ab
		break;
   12934:	e77d      	b.n	12832 <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   12936:	791a      	ldrb	r2, [r3, #4]
   12938:	f002 0203 	and.w	r2, r2, #3
   1293c:	2a03      	cmp	r2, #3
   1293e:	d197      	bne.n	12870 <ull_conn_tx_lll_enqueue+0x60>
	    ((pdu_data_tx->llctrl.opcode ==
   12940:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   12942:	2a03      	cmp	r2, #3
   12944:	d001      	beq.n	1294a <ull_conn_tx_lll_enqueue+0x13a>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   12946:	2a0a      	cmp	r2, #10
   12948:	d192      	bne.n	12870 <ull_conn_tx_lll_enqueue+0x60>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1294a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1294e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   12952:	428a      	cmp	r2, r1
   12954:	d00b      	beq.n	1296e <ull_conn_tx_lll_enqueue+0x15e>
   12956:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   1295a:	2a03      	cmp	r2, #3
   1295c:	d088      	beq.n	12870 <ull_conn_tx_lll_enqueue+0x60>
			if ((tx->next != NULL) &&
   1295e:	681a      	ldr	r2, [r3, #0]
   12960:	b11a      	cbz	r2, 1296a <ull_conn_tx_lll_enqueue+0x15a>
   12962:	f8d4 11b4 	ldr.w	r1, [r4, #436]	; 0x1b4
   12966:	428a      	cmp	r2, r1
   12968:	d02d      	beq.n	129c6 <ull_conn_tx_lll_enqueue+0x1b6>
}
   1296a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		    ((conn->llcp_req == conn->llcp_ack) &&
   1296e:	f894 0119 	ldrb.w	r0, [r4, #281]	; 0x119
   12972:	f894 1118 	ldrb.w	r1, [r4, #280]	; 0x118
   12976:	4288      	cmp	r0, r1
   12978:	d1f1      	bne.n	1295e <ull_conn_tx_lll_enqueue+0x14e>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   1297a:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   1297e:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   12982:	4288      	cmp	r0, r1
   12984:	d1eb      	bne.n	1295e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   12986:	f894 0171 	ldrb.w	r0, [r4, #369]	; 0x171
   1298a:	f894 1170 	ldrb.w	r1, [r4, #368]	; 0x170
   1298e:	4288      	cmp	r0, r1
   12990:	d1e5      	bne.n	1295e <ull_conn_tx_lll_enqueue+0x14e>
		       conn->llcp_conn_param.req) ||
   12992:	f894 0199 	ldrb.w	r0, [r4, #409]	; 0x199
   12996:	f894 1198 	ldrb.w	r1, [r4, #408]	; 0x198
   1299a:	4288      	cmp	r0, r1
   1299c:	d1df      	bne.n	1295e <ull_conn_tx_lll_enqueue+0x14e>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   1299e:	f894 01a9 	ldrb.w	r0, [r4, #425]	; 0x1a9
   129a2:	f894 11a8 	ldrb.w	r1, [r4, #424]	; 0x1a8
   129a6:	4288      	cmp	r0, r1
   129a8:	d1d9      	bne.n	1295e <ull_conn_tx_lll_enqueue+0x14e>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   129aa:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   129ae:	2101      	movs	r1, #1
   129b0:	f361 0301 	bfi	r3, r1, #0, #2
			conn->llcp_ack -= 2U;
   129b4:	3a02      	subs	r2, #2
			conn->llcp_type = LLCP_ENCRYPTION;
   129b6:	2103      	movs	r1, #3
			conn->llcp_ack -= 2U;
   129b8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   129bc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
			conn->llcp_type = LLCP_ENCRYPTION;
   129c0:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   129c4:	e754      	b.n	12870 <ull_conn_tx_lll_enqueue+0x60>
				tx->next = conn->tx_ctrl_last->next;
   129c6:	f8d4 11b8 	ldr.w	r1, [r4, #440]	; 0x1b8
				if (!conn->tx_data_last) {
   129ca:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
				conn->tx_head = tx->next;
   129ce:	f8c4 21b0 	str.w	r2, [r4, #432]	; 0x1b0
				tx->next = conn->tx_ctrl_last->next;
   129d2:	680a      	ldr	r2, [r1, #0]
   129d4:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   129d6:	600b      	str	r3, [r1, #0]
				conn->tx_data = tx;
   129d8:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
				if (!conn->tx_data_last) {
   129dc:	2800      	cmp	r0, #0
   129de:	f47f af47 	bne.w	12870 <ull_conn_tx_lll_enqueue+0x60>
					conn->tx_data_last = tx;
   129e2:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
   129e6:	e743      	b.n	12870 <ull_conn_tx_lll_enqueue+0x60>
   129e8:	4770      	bx	lr
   129ea:	bf00      	nop
   129ec:	0001fcdc 	.word	0x0001fcdc
   129f0:	20002228 	.word	0x20002228
   129f4:	00020020 	.word	0x00020020
   129f8:	00020078 	.word	0x00020078

000129fc <tx_demux>:
{
   129fc:	b510      	push	{r4, lr}
   129fe:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   12a00:	2001      	movs	r0, #1
   12a02:	f7ff fcab 	bl	1235c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   12a06:	4620      	mov	r0, r4
   12a08:	2101      	movs	r1, #1
}
   12a0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   12a0e:	f7ff beff 	b.w	12810 <ull_conn_tx_lll_enqueue>
   12a12:	bf00      	nop

00012a14 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   12a14:	4901      	ldr	r1, [pc, #4]	; (12a1c <ull_conn_link_tx_release+0x8>)
   12a16:	f7f8 bc0d 	b.w	b234 <mem_release>
   12a1a:	bf00      	nop
   12a1c:	20002228 	.word	0x20002228

00012a20 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   12a20:	4b01      	ldr	r3, [pc, #4]	; (12a28 <ull_conn_ack_last_idx_get+0x8>)
}
   12a22:	78d8      	ldrb	r0, [r3, #3]
   12a24:	4770      	bx	lr
   12a26:	bf00      	nop
   12a28:	200007a4 	.word	0x200007a4

00012a2c <ull_conn_ack_peek>:
{
   12a2c:	b4f0      	push	{r4, r5, r6, r7}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   12a2e:	4b0b      	ldr	r3, [pc, #44]	; (12a5c <ull_conn_ack_peek+0x30>)
   12a30:	789c      	ldrb	r4, [r3, #2]
   12a32:	78de      	ldrb	r6, [r3, #3]
   12a34:	781f      	ldrb	r7, [r3, #0]
	if (first == last) {
   12a36:	42b4      	cmp	r4, r6
   12a38:	d00d      	beq.n	12a56 <ull_conn_ack_peek+0x2a>
	return (void *)(fifo + first * size);
   12a3a:	3304      	adds	r3, #4
   12a3c:	fb14 f407 	smulbb	r4, r4, r7
	if (!lll_tx) {
   12a40:	4605      	mov	r5, r0
   12a42:	1918      	adds	r0, r3, r4
   12a44:	d005      	beq.n	12a52 <ull_conn_ack_peek+0x26>
	*ack_last = mfifo_conn_ack.l;
   12a46:	702e      	strb	r6, [r5, #0]
	*handle = lll_tx->handle;
   12a48:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   12a4a:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   12a4c:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   12a4e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   12a50:	6818      	ldr	r0, [r3, #0]
}
   12a52:	bcf0      	pop	{r4, r5, r6, r7}
   12a54:	4770      	bx	lr
		return NULL;
   12a56:	2000      	movs	r0, #0
   12a58:	e7fb      	b.n	12a52 <ull_conn_ack_peek+0x26>
   12a5a:	bf00      	nop
   12a5c:	200007a4 	.word	0x200007a4

00012a60 <ull_conn_ack_by_last_peek>:
{
   12a60:	b430      	push	{r4, r5}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   12a62:	4b09      	ldr	r3, [pc, #36]	; (12a88 <ull_conn_ack_by_last_peek+0x28>)
   12a64:	789c      	ldrb	r4, [r3, #2]
   12a66:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   12a68:	4284      	cmp	r4, r0
   12a6a:	d00b      	beq.n	12a84 <ull_conn_ack_by_last_peek+0x24>
	return (void *)(fifo + first * size);
   12a6c:	3304      	adds	r3, #4
   12a6e:	fb14 f405 	smulbb	r4, r4, r5
	if (!lll_tx) {
   12a72:	1918      	adds	r0, r3, r4
   12a74:	d004      	beq.n	12a80 <ull_conn_ack_by_last_peek+0x20>
	*handle = lll_tx->handle;
   12a76:	5b1c      	ldrh	r4, [r3, r4]
	*tx = lll_tx->node;
   12a78:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   12a7a:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   12a7c:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   12a7e:	6818      	ldr	r0, [r3, #0]
}
   12a80:	bc30      	pop	{r4, r5}
   12a82:	4770      	bx	lr
		return NULL;
   12a84:	2000      	movs	r0, #0
   12a86:	e7fb      	b.n	12a80 <ull_conn_ack_by_last_peek+0x20>
   12a88:	200007a4 	.word	0x200007a4

00012a8c <ull_conn_ack_dequeue>:
{
   12a8c:	b410      	push	{r4}
	return MFIFO_DEQUEUE(conn_ack);
   12a8e:	4b0a      	ldr	r3, [pc, #40]	; (12ab8 <ull_conn_ack_dequeue+0x2c>)
	uint8_t _first = *first; /* Copy read-index */
   12a90:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   12a92:	78da      	ldrb	r2, [r3, #3]
   12a94:	7818      	ldrb	r0, [r3, #0]
   12a96:	785c      	ldrb	r4, [r3, #1]
   12a98:	428a      	cmp	r2, r1
   12a9a:	d00a      	beq.n	12ab2 <ull_conn_ack_dequeue+0x26>
	_first += 1U;
   12a9c:	1c4a      	adds	r2, r1, #1
   12a9e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   12aa0:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   12aa4:	4294      	cmp	r4, r2
   12aa6:	bf08      	it	eq
   12aa8:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   12aaa:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   12aac:	709a      	strb	r2, [r3, #2]
}
   12aae:	bc10      	pop	{r4}
   12ab0:	4770      	bx	lr
		return NULL;
   12ab2:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE(conn_ack);
   12ab4:	e7fb      	b.n	12aae <ull_conn_ack_dequeue+0x22>
   12ab6:	bf00      	nop
   12ab8:	200007a4 	.word	0x200007a4

00012abc <ull_conn_lll_ack_enqueue>:
{
   12abc:	b570      	push	{r4, r5, r6, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   12abe:	4a13      	ldr	r2, [pc, #76]	; (12b0c <ull_conn_lll_ack_enqueue+0x50>)
   12ac0:	78d6      	ldrb	r6, [r2, #3]
	if (last == count) {
   12ac2:	7855      	ldrb	r5, [r2, #1]
   12ac4:	7894      	ldrb	r4, [r2, #2]
	last = last + 1;
   12ac6:	1c73      	adds	r3, r6, #1
   12ac8:	b2db      	uxtb	r3, r3
		last = 0U;
   12aca:	429d      	cmp	r5, r3
   12acc:	bf08      	it	eq
   12ace:	2300      	moveq	r3, #0
	if (last == first) {
   12ad0:	429c      	cmp	r4, r3
   12ad2:	d00a      	beq.n	12aea <ull_conn_lll_ack_enqueue+0x2e>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   12ad4:	4615      	mov	r5, r2
   12ad6:	f815 4b04 	ldrb.w	r4, [r5], #4
   12ada:	fb14 f406 	smulbb	r4, r4, r6
	LL_ASSERT(lll_tx);
   12ade:	192e      	adds	r6, r5, r4
   12ae0:	d003      	beq.n	12aea <ull_conn_lll_ack_enqueue+0x2e>
	lll_tx->handle = handle;
   12ae2:	5328      	strh	r0, [r5, r4]
	*last = idx; /* Commit: Update write index */
   12ae4:	70d3      	strb	r3, [r2, #3]
	lll_tx->node = tx;
   12ae6:	6071      	str	r1, [r6, #4]
}
   12ae8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(lll_tx);
   12aea:	4a09      	ldr	r2, [pc, #36]	; (12b10 <ull_conn_lll_ack_enqueue+0x54>)
   12aec:	4909      	ldr	r1, [pc, #36]	; (12b14 <ull_conn_lll_ack_enqueue+0x58>)
   12aee:	480a      	ldr	r0, [pc, #40]	; (12b18 <ull_conn_lll_ack_enqueue+0x5c>)
   12af0:	f240 53a9 	movw	r3, #1449	; 0x5a9
   12af4:	f007 f97f 	bl	19df6 <printk>
   12af8:	4040      	eors	r0, r0
   12afa:	f380 8811 	msr	BASEPRI, r0
   12afe:	f04f 0003 	mov.w	r0, #3
   12b02:	df02      	svc	2
	lll_tx->handle = handle;
   12b04:	2300      	movs	r3, #0
   12b06:	801b      	strh	r3, [r3, #0]
   12b08:	deff      	udf	#255	; 0xff
   12b0a:	bf00      	nop
   12b0c:	200007a4 	.word	0x200007a4
   12b10:	00020020 	.word	0x00020020
   12b14:	00020068 	.word	0x00020068
   12b18:	0001fcdc 	.word	0x0001fcdc

00012b1c <ull_conn_tx_ack>:
{
   12b1c:	b5f0      	push	{r4, r5, r6, r7, lr}
	LL_ASSERT(pdu_tx->len);
   12b1e:	7953      	ldrb	r3, [r2, #5]
{
   12b20:	b083      	sub	sp, #12
   12b22:	4614      	mov	r4, r2
   12b24:	4605      	mov	r5, r0
   12b26:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   12b28:	b37b      	cbz	r3, 12b8a <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   12b2a:	7923      	ldrb	r3, [r4, #4]
   12b2c:	f003 0203 	and.w	r2, r3, #3
   12b30:	2a03      	cmp	r2, #3
   12b32:	d00d      	beq.n	12b50 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   12b34:	f64f 72ff 	movw	r2, #65535	; 0xffff
   12b38:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   12b3a:	bf04      	itt	eq
   12b3c:	f36f 0301 	bfceq	r3, #0, #2
   12b40:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   12b42:	4621      	mov	r1, r4
   12b44:	4628      	mov	r0, r5
}
   12b46:	b003      	add	sp, #12
   12b48:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   12b4c:	f7fc ba1a 	b.w	ef84 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   12b50:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12b54:	429d      	cmp	r5, r3
   12b56:	d126      	bne.n	12ba6 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   12b58:	6830      	ldr	r0, [r6, #0]
   12b5a:	4284      	cmp	r4, r0
   12b5c:	d040      	beq.n	12be0 <ull_conn_tx_ack+0xc4>
			LL_ASSERT(!link->next);
   12b5e:	2800      	cmp	r0, #0
   12b60:	d0ef      	beq.n	12b42 <ull_conn_tx_ack+0x26>
   12b62:	4aba      	ldr	r2, [pc, #744]	; (12e4c <ull_conn_tx_ack+0x330>)
   12b64:	49ba      	ldr	r1, [pc, #744]	; (12e50 <ull_conn_tx_ack+0x334>)
   12b66:	48bb      	ldr	r0, [pc, #748]	; (12e54 <ull_conn_tx_ack+0x338>)
   12b68:	f240 53c9 	movw	r3, #1481	; 0x5c9
   12b6c:	f007 f943 	bl	19df6 <printk>
   12b70:	4040      	eors	r0, r0
   12b72:	f380 8811 	msr	BASEPRI, r0
   12b76:	f04f 0003 	mov.w	r0, #3
   12b7a:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   12b7c:	4621      	mov	r1, r4
   12b7e:	4628      	mov	r0, r5
}
   12b80:	b003      	add	sp, #12
   12b82:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	ll_tx_ack_put(handle, tx);
   12b86:	f7fc b9fd 	b.w	ef84 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   12b8a:	4ab0      	ldr	r2, [pc, #704]	; (12e4c <ull_conn_tx_ack+0x330>)
   12b8c:	49b2      	ldr	r1, [pc, #712]	; (12e58 <ull_conn_tx_ack+0x33c>)
   12b8e:	48b1      	ldr	r0, [pc, #708]	; (12e54 <ull_conn_tx_ack+0x338>)
   12b90:	f240 53b6 	movw	r3, #1462	; 0x5b6
   12b94:	f007 f92f 	bl	19df6 <printk>
   12b98:	4040      	eors	r0, r0
   12b9a:	f380 8811 	msr	BASEPRI, r0
   12b9e:	f04f 0003 	mov.w	r0, #3
   12ba2:	df02      	svc	2
   12ba4:	e7c1      	b.n	12b2a <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   12ba6:	48ad      	ldr	r0, [pc, #692]	; (12e5c <ull_conn_tx_ack+0x340>)
   12ba8:	462a      	mov	r2, r5
   12baa:	f44f 71e4 	mov.w	r1, #456	; 0x1c8
   12bae:	f7f8 fb59 	bl	b264 <mem_get>
   12bb2:	79e3      	ldrb	r3, [r4, #7]
   12bb4:	3b02      	subs	r3, #2
   12bb6:	4607      	mov	r7, r0
	switch (pdu_tx->llctrl.opcode) {
   12bb8:	2b16      	cmp	r3, #22
   12bba:	d80d      	bhi.n	12bd8 <ull_conn_tx_ack+0xbc>
   12bbc:	e8df f003 	tbb	[pc, r3]
   12bc0:	0c3dc2de 	.word	0x0c3dc2de
   12bc4:	0c0c0c0c 	.word	0x0c0c0c0c
   12bc8:	470c51b1 	.word	0x470c51b1
   12bcc:	440c0c0c 	.word	0x440c0c0c
   12bd0:	e5980c0c 	.word	0xe5980c0c
   12bd4:	1d16      	.short	0x1d16
   12bd6:	a0          	.byte	0xa0
   12bd7:	00          	.byte	0x00
		if (link->next == (void *)tx) {
   12bd8:	6830      	ldr	r0, [r6, #0]
   12bda:	42a0      	cmp	r0, r4
   12bdc:	d1bf      	bne.n	12b5e <ull_conn_tx_ack+0x42>
   12bde:	4620      	mov	r0, r4
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12be0:	499f      	ldr	r1, [pc, #636]	; (12e60 <ull_conn_tx_ack+0x344>)
}
   12be2:	b003      	add	sp, #12
   12be4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   12be8:	f7f8 bb24 	b.w	b234 <mem_release>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   12bec:	f890 31aa 	ldrb.w	r3, [r0, #426]	; 0x1aa
   12bf0:	2202      	movs	r2, #2
   12bf2:	f362 0301 	bfi	r3, r2, #0, #2
   12bf6:	f880 31aa 	strb.w	r3, [r0, #426]	; 0x1aa
		if (conn->lll.role) {
   12bfa:	f997 303d 	ldrsb.w	r3, [r7, #61]	; 0x3d
   12bfe:	2b00      	cmp	r3, #0
   12c00:	da14      	bge.n	12c2c <ull_conn_tx_ack+0x110>
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   12c02:	4998      	ldr	r1, [pc, #608]	; (12e64 <ull_conn_tx_ack+0x348>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   12c04:	f897 2064 	ldrb.w	r2, [r7, #100]	; 0x64
   12c08:	f897 31aa 	ldrb.w	r3, [r7, #426]	; 0x1aa
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   12c0c:	c903      	ldmia	r1, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   12c0e:	ea42 0393 	orr.w	r3, r2, r3, lsr #2
			uint8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   12c12:	f10d 0c08 	add.w	ip, sp, #8
   12c16:	e90c 0003 	stmdb	ip, {r0, r1}
			lll->phy_tx_time = phy_tx_time[phys];
   12c1a:	f003 0307 	and.w	r3, r3, #7
   12c1e:	4463      	add	r3, ip
   12c20:	f813 3c08 	ldrb.w	r3, [r3, #-8]
   12c24:	f363 1206 	bfi	r2, r3, #4, #3
   12c28:	f887 2064 	strb.w	r2, [r7, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   12c2c:	f897 31ab 	ldrb.w	r3, [r7, #427]	; 0x1ab
   12c30:	f36f 0300 	bfc	r3, #0, #1
   12c34:	f887 31ab 	strb.w	r3, [r7, #427]	; 0x1ab
		break;
   12c38:	e78e      	b.n	12b58 <ull_conn_tx_ack+0x3c>
			conn->llcp_enc.pause_tx = 1U;
   12c3a:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
   12c3e:	f043 0302 	orr.w	r3, r3, #2
   12c42:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
   12c46:	e787      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   12c48:	7a23      	ldrb	r3, [r4, #8]
   12c4a:	2b03      	cmp	r3, #3
   12c4c:	d184      	bne.n	12b58 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   12c4e:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   12c52:	2200      	movs	r2, #0
		conn->llcp_enc.pause_rx = 0U;
   12c54:	f023 0303 	bic.w	r3, r3, #3
   12c58:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = 0U;
   12c5c:	f8a7 20cc 	strh.w	r2, [r7, #204]	; 0xcc
		break;
   12c60:	e77a      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		if (!conn->lll.role) {
   12c62:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
   12c66:	2b00      	cmp	r3, #0
   12c68:	dbe7      	blt.n	12c3a <ull_conn_tx_ack+0x11e>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c6a:	7923      	ldrb	r3, [r4, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12c6c:	2203      	movs	r2, #3
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c6e:	f043 0303 	orr.w	r3, r3, #3
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   12c72:	2117      	movs	r1, #23
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   12c74:	71e2      	strb	r2, [r4, #7]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   12c76:	2208      	movs	r2, #8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12c78:	7123      	strb	r3, [r4, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_req) +
   12c7a:	7161      	strb	r1, [r4, #5]
	memcpy(&pdu_ctrl_tx->llctrl.enc_req.rand[0], &conn->llcp_enc.rand[0],
   12c7c:	f200 1155 	addw	r1, r0, #341	; 0x155
   12c80:	18a0      	adds	r0, r4, r2
   12c82:	f008 fed2 	bl	1ba2a <memcpy>
	pdu_ctrl_tx->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   12c86:	f897 3153 	ldrb.w	r3, [r7, #339]	; 0x153
   12c8a:	7423      	strb	r3, [r4, #16]
	pdu_ctrl_tx->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   12c8c:	f897 3154 	ldrb.w	r3, [r7, #340]	; 0x154
   12c90:	7463      	strb	r3, [r4, #17]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_req.skdm,
   12c92:	210c      	movs	r1, #12
   12c94:	f104 0012 	add.w	r0, r4, #18
   12c98:	f001 fcb8 	bl	1460c <lll_csrand_isr_get>
	    conn->tx_head &&
   12c9c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
	if (
   12ca0:	2b00      	cmp	r3, #0
   12ca2:	f000 80ad 	beq.w	12e00 <ull_conn_tx_ack+0x2e4>
	    !conn->llcp_enc.pause_tx &&
   12ca6:	f897 2152 	ldrb.w	r2, [r7, #338]	; 0x152
	    conn->tx_head &&
   12caa:	0791      	lsls	r1, r2, #30
   12cac:	f100 80a8 	bmi.w	12e00 <ull_conn_tx_ack+0x2e4>
	    !conn->llcp_phy.pause_tx &&
   12cb0:	f897 21ab 	ldrb.w	r2, [r7, #427]	; 0x1ab
   12cb4:	07d2      	lsls	r2, r2, #31
   12cb6:	f100 80a3 	bmi.w	12e00 <ull_conn_tx_ack+0x2e4>
		if (conn->tx_head == conn->tx_data) {
   12cba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
   12cbe:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   12cc0:	bf04      	itt	eq
   12cc2:	681a      	ldreq	r2, [r3, #0]
   12cc4:	f8c7 21bc 	streq.w	r2, [r7, #444]	; 0x1bc
		if (!conn->tx_ctrl) {
   12cc8:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   12ccc:	2a00      	cmp	r2, #0
   12cce:	f000 80b6 	beq.w	12e3e <ull_conn_tx_ack+0x322>
	tx->next = conn->tx_ctrl_last->next;
   12cd2:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
   12cd6:	681a      	ldr	r2, [r3, #0]
   12cd8:	6022      	str	r2, [r4, #0]
	conn->tx_ctrl_last->next = tx;
   12cda:	601c      	str	r4, [r3, #0]
	conn->tx_ctrl_last = tx;
   12cdc:	6823      	ldr	r3, [r4, #0]
   12cde:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
	if (!tx->next) {
   12ce2:	2b00      	cmp	r3, #0
   12ce4:	d078      	beq.n	12dd8 <ull_conn_tx_ack+0x2bc>
		if (link->next == (void *)tx) {
   12ce6:	6833      	ldr	r3, [r6, #0]
   12ce8:	2b00      	cmp	r3, #0
   12cea:	d07a      	beq.n	12de2 <ull_conn_tx_ack+0x2c6>
}
   12cec:	b003      	add	sp, #12
   12cee:	bdf0      	pop	{r4, r5, r6, r7, pc}
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   12cf0:	f890 319a 	ldrb.w	r3, [r0, #410]	; 0x19a
   12cf4:	2202      	movs	r2, #2
   12cf6:	f362 0302 	bfi	r3, r2, #0, #3
   12cfa:	f880 319a 	strb.w	r3, [r0, #410]	; 0x19a
		break;
   12cfe:	e72b      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   12d00:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   12d04:	f890 1064 	ldrb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   12d08:	f890 21ab 	ldrb.w	r2, [r0, #427]	; 0x1ab
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   12d0c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   12d10:	f363 1106 	bfi	r1, r3, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   12d14:	f36f 0200 	bfc	r2, #0, #1
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   12d18:	f880 1064 	strb.w	r1, [r0, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   12d1c:	f880 21ab 	strb.w	r2, [r0, #427]	; 0x1ab
		break;
   12d20:	e71a      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_tx = 1U;
   12d22:	f890 3152 	ldrb.w	r3, [r0, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   12d26:	f8b0 20ca 	ldrh.w	r2, [r0, #202]	; 0xca
   12d2a:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   12d2e:	f023 0306 	bic.w	r3, r3, #6
		conn->llcp_enc.ack = conn->llcp_enc.req;
   12d32:	f890 2150 	ldrb.w	r2, [r0, #336]	; 0x150
   12d36:	f880 2151 	strb.w	r2, [r0, #337]	; 0x151
		conn->llcp_enc.pause_tx = 1U;
   12d3a:	f043 0306 	orr.w	r3, r3, #6
   12d3e:	f880 3152 	strb.w	r3, [r0, #338]	; 0x152
		break;
   12d42:	e709      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		memcpy(&conn->llcp.encryption.skd[0],
   12d44:	2208      	movs	r2, #8
   12d46:	f104 0112 	add.w	r1, r4, #18
   12d4a:	30ee      	adds	r0, #238	; 0xee
   12d4c:	f008 fe6d 	bl	1ba2a <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   12d50:	2204      	movs	r2, #4
   12d52:	f104 011a 	add.w	r1, r4, #26
   12d56:	f107 0098 	add.w	r0, r7, #152	; 0x98
   12d5a:	f008 fe66 	bl	1ba2a <memcpy>
		conn->llcp_enc.pause_tx = 1U;
   12d5e:	f897 3152 	ldrb.w	r3, [r7, #338]	; 0x152
		conn->procedure_expire = conn->procedure_reload;
   12d62:	f8b7 10ca 	ldrh.w	r1, [r7, #202]	; 0xca
		conn->llcp_enc.ack = conn->llcp_enc.req;
   12d66:	f897 2150 	ldrb.w	r2, [r7, #336]	; 0x150
		conn->procedure_expire = conn->procedure_reload;
   12d6a:	f8a7 10cc 	strh.w	r1, [r7, #204]	; 0xcc
		conn->llcp_enc.pause_tx = 1U;
   12d6e:	f043 0302 	orr.w	r3, r3, #2
   12d72:	f887 3152 	strb.w	r3, [r7, #338]	; 0x152
		conn->llcp_enc.ack = conn->llcp_enc.req;
   12d76:	f887 2151 	strb.w	r2, [r7, #337]	; 0x151
		break;
   12d7a:	e6ed      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   12d7c:	7a21      	ldrb	r1, [r4, #8]
   12d7e:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   12d80:	bf08      	it	eq
   12d82:	2116      	moveq	r1, #22
   12d84:	f7ff fb3a 	bl	123fc <conn_cleanup>
	break;
   12d88:	e6e6      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   12d8a:	f890 1198 	ldrb.w	r1, [r0, #408]	; 0x198
   12d8e:	f890 3199 	ldrb.w	r3, [r0, #409]	; 0x199
   12d92:	428b      	cmp	r3, r1
   12d94:	f43f aee0 	beq.w	12b58 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   12d98:	f890 219a 	ldrb.w	r2, [r0, #410]	; 0x19a
   12d9c:	f002 0307 	and.w	r3, r2, #7
   12da0:	2b03      	cmp	r3, #3
   12da2:	d005      	beq.n	12db0 <ull_conn_tx_ack+0x294>
   12da4:	3303      	adds	r3, #3
   12da6:	f003 0307 	and.w	r3, r3, #7
   12daa:	2b01      	cmp	r3, #1
   12dac:	f63f af14 	bhi.w	12bd8 <ull_conn_tx_ack+0xbc>
				conn->lll.max_tx_octets =
   12db0:	f8b7 319e 	ldrh.w	r3, [r7, #414]	; 0x19e
   12db4:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				if (conn->llcp_length.state ==
   12db8:	f002 0307 	and.w	r3, r2, #7
				conn->lll.max_tx_time =
   12dbc:	f8b7 01a2 	ldrh.w	r0, [r7, #418]	; 0x1a2
   12dc0:	f8a7 0060 	strh.w	r0, [r7, #96]	; 0x60
				if (conn->llcp_length.state ==
   12dc4:	2b05      	cmp	r3, #5
   12dc6:	d034      	beq.n	12e32 <ull_conn_tx_ack+0x316>
				if (!conn->llcp_length.cache.tx_octets) {
   12dc8:	f8b7 31a4 	ldrh.w	r3, [r7, #420]	; 0x1a4
   12dcc:	bb1b      	cbnz	r3, 12e16 <ull_conn_tx_ack+0x2fa>
					conn->llcp_length.ack =
   12dce:	f887 1199 	strb.w	r1, [r7, #409]	; 0x199
					conn->procedure_expire = 0U;
   12dd2:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
					break;
   12dd6:	e6bf      	b.n	12b58 <ull_conn_tx_ack+0x3c>
		if (link->next == (void *)tx) {
   12dd8:	6833      	ldr	r3, [r6, #0]
		conn->tx_data_last = tx;
   12dda:	f8c7 41c0 	str.w	r4, [r7, #448]	; 0x1c0
		if (link->next == (void *)tx) {
   12dde:	2b00      	cmp	r3, #0
   12de0:	d184      	bne.n	12cec <ull_conn_tx_ack+0x1d0>
			LL_ASSERT(link->next);
   12de2:	4a1a      	ldr	r2, [pc, #104]	; (12e4c <ull_conn_tx_ack+0x330>)
   12de4:	4920      	ldr	r1, [pc, #128]	; (12e68 <ull_conn_tx_ack+0x34c>)
   12de6:	481b      	ldr	r0, [pc, #108]	; (12e54 <ull_conn_tx_ack+0x338>)
   12de8:	f240 53c1 	movw	r3, #1473	; 0x5c1
   12dec:	f007 f803 	bl	19df6 <printk>
   12df0:	4040      	eors	r0, r0
   12df2:	f380 8811 	msr	BASEPRI, r0
   12df6:	f04f 0003 	mov.w	r0, #3
   12dfa:	df02      	svc	2
   12dfc:	2000      	movs	r0, #0
   12dfe:	e6ef      	b.n	12be0 <ull_conn_tx_ack+0xc4>
		if (!conn->tx_ctrl) {
   12e00:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
   12e04:	2a00      	cmp	r2, #0
   12e06:	f47f af64 	bne.w	12cd2 <ull_conn_tx_ack+0x1b6>
			tx->next = conn->tx_head;
   12e0a:	6023      	str	r3, [r4, #0]
				conn->tx_ctrl = tx;
   12e0c:	e9c7 446c 	strd	r4, r4, [r7, #432]	; 0x1b0
				conn->tx_ctrl_last = tx;
   12e10:	f8c7 41b8 	str.w	r4, [r7, #440]	; 0x1b8
   12e14:	e765      	b.n	12ce2 <ull_conn_tx_ack+0x1c6>
				conn->llcp_length.cache.tx_octets = 0;
   12e16:	2100      	movs	r1, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12e18:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_length.tx_octets =
   12e1c:	f8a7 319e 	strh.w	r3, [r7, #414]	; 0x19e
				conn->llcp_length.tx_time =
   12e20:	f8b7 31a6 	ldrh.w	r3, [r7, #422]	; 0x1a6
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   12e24:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
				conn->llcp_length.cache.tx_octets = 0;
   12e28:	f8a7 11a4 	strh.w	r1, [r7, #420]	; 0x1a4
				conn->llcp_length.tx_time =
   12e2c:	f8a7 31a2 	strh.w	r3, [r7, #418]	; 0x1a2
				break;
   12e30:	e692      	b.n	12b58 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   12e32:	2304      	movs	r3, #4
   12e34:	f363 0202 	bfi	r2, r3, #0, #3
   12e38:	f887 219a 	strb.w	r2, [r7, #410]	; 0x19a
					break;
   12e3c:	e68c      	b.n	12b58 <ull_conn_tx_ack+0x3c>
			tx->next = conn->tx_head->next;
   12e3e:	681a      	ldr	r2, [r3, #0]
   12e40:	6022      	str	r2, [r4, #0]
			conn->tx_head->next = tx;
   12e42:	601c      	str	r4, [r3, #0]
				conn->tx_ctrl = tx;
   12e44:	6823      	ldr	r3, [r4, #0]
				conn->tx_ctrl_last = tx;
   12e46:	e9c7 446d 	strd	r4, r4, [r7, #436]	; 0x1b4
   12e4a:	e74a      	b.n	12ce2 <ull_conn_tx_ack+0x1c6>
   12e4c:	00020020 	.word	0x00020020
   12e50:	000201f0 	.word	0x000201f0
   12e54:	0001fcdc 	.word	0x0001fcdc
   12e58:	000201e4 	.word	0x000201e4
   12e5c:	20001f58 	.word	0x20001f58
   12e60:	200021a4 	.word	0x200021a4
   12e64:	00020208 	.word	0x00020208
   12e68:	000201fc 	.word	0x000201fc

00012e6c <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   12e6c:	f890 2048 	ldrb.w	r2, [r0, #72]	; 0x48
   12e70:	f3c2 1302 	ubfx	r3, r2, #4, #3
   12e74:	2b02      	cmp	r3, #2
   12e76:	d012      	beq.n	12e9e <ull_conn_lll_max_tx_octets_get+0x32>
   12e78:	2b04      	cmp	r3, #4
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   12e7a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
	switch (lll->phy_tx_time) {
   12e7e:	d014      	beq.n	12eaa <ull_conn_lll_max_tx_octets_get+0x3e>
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   12e80:	08db      	lsrs	r3, r3, #3
   12e82:	3b0a      	subs	r3, #10
   12e84:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   12e86:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	return max_tx_octets;
   12e8a:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
	if (lll->enc_tx) {
   12e8e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   12e90:	bf44      	itt	mi
   12e92:	3b04      	submi	r3, #4
   12e94:	b29b      	uxthmi	r3, r3
}
   12e96:	4298      	cmp	r0, r3
   12e98:	bf28      	it	cs
   12e9a:	4618      	movcs	r0, r3
   12e9c:	4770      	bx	lr
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   12e9e:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   12ea2:	089b      	lsrs	r3, r3, #2
   12ea4:	3b0b      	subs	r3, #11
   12ea6:	b29b      	uxth	r3, r3
		break;
   12ea8:	e7ed      	b.n	12e86 <ull_conn_lll_max_tx_octets_get+0x1a>
		if (lll->phy_flags & 0x01) {
   12eaa:	0711      	lsls	r1, r2, #28
			max_tx_octets = ((lll->max_tx_time - 592) >>
   12eac:	bf4b      	itete	mi
   12eae:	f5a3 7314 	submi.w	r3, r3, #592	; 0x250
			max_tx_octets = ((lll->max_tx_time - 430) >>
   12eb2:	f5a3 73d7 	subpl.w	r3, r3, #430	; 0x1ae
			max_tx_octets = ((lll->max_tx_time - 592) >>
   12eb6:	119b      	asrmi	r3, r3, #6
			max_tx_octets = ((lll->max_tx_time - 430) >>
   12eb8:	111b      	asrpl	r3, r3, #4
					  4) - 2;
   12eba:	3b02      	subs	r3, #2
			max_tx_octets = ((lll->max_tx_time - 430) >>
   12ebc:	b29b      	uxth	r3, r3
   12ebe:	e7e2      	b.n	12e86 <ull_conn_lll_max_tx_octets_get+0x1a>

00012ec0 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   12ec0:	b510      	push	{r4, lr}
   12ec2:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   12ec4:	b930      	cbnz	r0, 12ed4 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   12ec6:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12eca:	f36f 0341 	bfc	r3, #1, #1
   12ece:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   12ed2:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   12ed4:	4a09      	ldr	r2, [pc, #36]	; (12efc <ticker_update_latency_cancel_op_cb+0x3c>)
   12ed6:	490a      	ldr	r1, [pc, #40]	; (12f00 <ticker_update_latency_cancel_op_cb+0x40>)
   12ed8:	480a      	ldr	r0, [pc, #40]	; (12f04 <ticker_update_latency_cancel_op_cb+0x44>)
   12eda:	f44f 73ef 	mov.w	r3, #478	; 0x1de
   12ede:	f006 ff8a 	bl	19df6 <printk>
   12ee2:	4040      	eors	r0, r0
   12ee4:	f380 8811 	msr	BASEPRI, r0
   12ee8:	f04f 0003 	mov.w	r0, #3
   12eec:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   12eee:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   12ef2:	f36f 0341 	bfc	r3, #1, #1
   12ef6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   12efa:	bd10      	pop	{r4, pc}
   12efc:	00020214 	.word	0x00020214
   12f00:	00020258 	.word	0x00020258
   12f04:	0001fcdc 	.word	0x0001fcdc

00012f08 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12f08:	b900      	cbnz	r0, 12f0c <ticker_op_cb+0x4>
   12f0a:	4770      	bx	lr
{
   12f0c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   12f0e:	4a07      	ldr	r2, [pc, #28]	; (12f2c <ticker_op_cb+0x24>)
   12f10:	4907      	ldr	r1, [pc, #28]	; (12f30 <ticker_op_cb+0x28>)
   12f12:	4808      	ldr	r0, [pc, #32]	; (12f34 <ticker_op_cb+0x2c>)
   12f14:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   12f18:	f006 ff6d 	bl	19df6 <printk>
   12f1c:	4040      	eors	r0, r0
   12f1e:	f380 8811 	msr	BASEPRI, r0
   12f22:	f04f 0003 	mov.w	r0, #3
   12f26:	df02      	svc	2
}
   12f28:	bd08      	pop	{r3, pc}
   12f2a:	bf00      	nop
   12f2c:	00020214 	.word	0x00020214
   12f30:	00020080 	.word	0x00020080
   12f34:	0001fcdc 	.word	0x0001fcdc

00012f38 <ticker_op_stop_adv_cb.part.0>:
static void ticker_op_stop_adv_cb(uint32_t status, void *param)
   12f38:	b508      	push	{r3, lr}
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12f3a:	4a07      	ldr	r2, [pc, #28]	; (12f58 <ticker_op_stop_adv_cb.part.0+0x20>)
   12f3c:	4907      	ldr	r1, [pc, #28]	; (12f5c <ticker_op_stop_adv_cb.part.0+0x24>)
   12f3e:	4808      	ldr	r0, [pc, #32]	; (12f60 <ticker_op_stop_adv_cb.part.0+0x28>)
   12f40:	f44f 73e7 	mov.w	r3, #462	; 0x1ce
   12f44:	f006 ff57 	bl	19df6 <printk>
   12f48:	4040      	eors	r0, r0
   12f4a:	f380 8811 	msr	BASEPRI, r0
   12f4e:	f04f 0003 	mov.w	r0, #3
   12f52:	df02      	svc	2
}
   12f54:	bd08      	pop	{r3, pc}
   12f56:	bf00      	nop
   12f58:	00020214 	.word	0x00020214
   12f5c:	0002026c 	.word	0x0002026c
   12f60:	0001fcdc 	.word	0x0001fcdc

00012f64 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12f64:	2801      	cmp	r0, #1
   12f66:	d000      	beq.n	12f6a <ticker_op_stop_adv_cb+0x6>
   12f68:	4770      	bx	lr
{
   12f6a:	b510      	push	{r4, lr}
   12f6c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   12f6e:	f7fc f87f 	bl	f070 <ull_disable_mark_get>
   12f72:	4284      	cmp	r4, r0
   12f74:	d003      	beq.n	12f7e <ticker_op_stop_adv_cb+0x1a>
}
   12f76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   12f7a:	f7ff bfdd 	b.w	12f38 <ticker_op_stop_adv_cb.part.0>
   12f7e:	bd10      	pop	{r4, pc}

00012f80 <ull_slave_ticker_cb>:
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12f80:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
{
   12f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12f86:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   12f88:	f64f 73ff 	movw	r3, #65535	; 0xffff
   12f8c:	459c      	cmp	ip, r3
   12f8e:	d02a      	beq.n	12fe6 <ull_slave_ticker_cb+0x66>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   12f90:	4605      	mov	r5, r0
   12f92:	460f      	mov	r7, r1
   12f94:	4601      	mov	r1, r0
   12f96:	4620      	mov	r0, r4
   12f98:	4616      	mov	r6, r2
   12f9a:	f7ee fb9d 	bl	16d8 <ull_conn_llcp>
		if (ret) {
   12f9e:	bb10      	cbnz	r0, 12fe6 <ull_slave_ticker_cb+0x66>
	return ++hdr->ref;
   12fa0:	7c23      	ldrb	r3, [r4, #16]
   12fa2:	3301      	adds	r3, #1
   12fa4:	b2db      	uxtb	r3, r3
   12fa6:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   12fa8:	b363      	cbz	r3, 13004 <ull_slave_ticker_cb+0x84>
	p.ticks_at_expire = ticks_at_expire;
   12faa:	f8df c088 	ldr.w	ip, [pc, #136]	; 13034 <ull_slave_ticker_cb+0xb4>
	mfy.param = &p;
   12fae:	4b1c      	ldr	r3, [pc, #112]	; (13020 <ull_slave_ticker_cb+0xa0>)
	p.ticks_at_expire = ticks_at_expire;
   12fb0:	f8cc 5000 	str.w	r5, [ip]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12fb4:	2200      	movs	r2, #0
	p.param = &conn->lll;
   12fb6:	f104 0e1c 	add.w	lr, r4, #28
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12fba:	4611      	mov	r1, r2
   12fbc:	2001      	movs	r0, #1
	mfy.param = &p;
   12fbe:	f8c3 c008 	str.w	ip, [r3, #8]
	p.remainder = remainder;
   12fc2:	f8cc 7004 	str.w	r7, [ip, #4]
	p.lazy = lazy;
   12fc6:	f8ac 6008 	strh.w	r6, [ip, #8]
	p.param = &conn->lll;
   12fca:	f8cc e00c 	str.w	lr, [ip, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   12fce:	f7f8 f9ef 	bl	b3b0 <mayfly_enqueue>
	LL_ASSERT(!err);
   12fd2:	b948      	cbnz	r0, 12fe8 <ull_slave_ticker_cb+0x68>
	ull_conn_tx_demux(UINT8_MAX);
   12fd4:	20ff      	movs	r0, #255	; 0xff
   12fd6:	f7ff f9c1 	bl	1235c <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12fda:	4620      	mov	r0, r4
   12fdc:	21ff      	movs	r1, #255	; 0xff
}
   12fde:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   12fe2:	f7ff bc15 	b.w	12810 <ull_conn_tx_lll_enqueue>
}
   12fe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   12fe8:	4a0e      	ldr	r2, [pc, #56]	; (13024 <ull_slave_ticker_cb+0xa4>)
   12fea:	490f      	ldr	r1, [pc, #60]	; (13028 <ull_slave_ticker_cb+0xa8>)
   12fec:	480f      	ldr	r0, [pc, #60]	; (1302c <ull_slave_ticker_cb+0xac>)
   12fee:	f44f 73c9 	mov.w	r3, #402	; 0x192
   12ff2:	f006 ff00 	bl	19df6 <printk>
   12ff6:	4040      	eors	r0, r0
   12ff8:	f380 8811 	msr	BASEPRI, r0
   12ffc:	f04f 0003 	mov.w	r0, #3
   13000:	df02      	svc	2
   13002:	e7e7      	b.n	12fd4 <ull_slave_ticker_cb+0x54>
	LL_ASSERT(ref);
   13004:	4a07      	ldr	r2, [pc, #28]	; (13024 <ull_slave_ticker_cb+0xa4>)
   13006:	490a      	ldr	r1, [pc, #40]	; (13030 <ull_slave_ticker_cb+0xb0>)
   13008:	4808      	ldr	r0, [pc, #32]	; (1302c <ull_slave_ticker_cb+0xac>)
   1300a:	f44f 73c3 	mov.w	r3, #390	; 0x186
   1300e:	f006 fef2 	bl	19df6 <printk>
   13012:	4040      	eors	r0, r0
   13014:	f380 8811 	msr	BASEPRI, r0
   13018:	f04f 0003 	mov.w	r0, #3
   1301c:	df02      	svc	2
   1301e:	e7c4      	b.n	12faa <ull_slave_ticker_cb+0x2a>
   13020:	2000082c 	.word	0x2000082c
   13024:	00020214 	.word	0x00020214
   13028:	0001fe00 	.word	0x0001fe00
   1302c:	0001fcdc 	.word	0x0001fcdc
   13030:	0001ff90 	.word	0x0001ff90
   13034:	2000226c 	.word	0x2000226c

00013038 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   13038:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1303a:	b123      	cbz	r3, 13046 <ull_slave_latency_cancel+0xe>
   1303c:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   13040:	f012 0302 	ands.w	r3, r2, #2
   13044:	d000      	beq.n	13048 <ull_slave_latency_cancel+0x10>
   13046:	4770      	bx	lr
{
   13048:	b530      	push	{r4, r5, lr}
   1304a:	b089      	sub	sp, #36	; 0x24
		conn->slave.latency_cancel = 1U;
   1304c:	f042 0202 	orr.w	r2, r2, #2
				      (TICKER_ID_CONN_BASE + handle),
   13050:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   13052:	4d11      	ldr	r5, [pc, #68]	; (13098 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   13054:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   13058:	2401      	movs	r4, #1
   1305a:	e9cd 3301 	strd	r3, r3, [sp, #4]
   1305e:	b2ca      	uxtb	r2, r1
   13060:	9006      	str	r0, [sp, #24]
   13062:	9304      	str	r3, [sp, #16]
   13064:	9300      	str	r3, [sp, #0]
   13066:	4618      	mov	r0, r3
   13068:	9505      	str	r5, [sp, #20]
   1306a:	9403      	str	r4, [sp, #12]
   1306c:	2103      	movs	r1, #3
   1306e:	f7f9 fc23 	bl	c8b8 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   13072:	f030 0302 	bics.w	r3, r0, #2
   13076:	d00c      	beq.n	13092 <ull_slave_latency_cancel+0x5a>
   13078:	4a08      	ldr	r2, [pc, #32]	; (1309c <ull_slave_latency_cancel+0x64>)
   1307a:	4909      	ldr	r1, [pc, #36]	; (130a0 <ull_slave_latency_cancel+0x68>)
   1307c:	4809      	ldr	r0, [pc, #36]	; (130a4 <ull_slave_latency_cancel+0x6c>)
   1307e:	f240 135b 	movw	r3, #347	; 0x15b
   13082:	f006 feb8 	bl	19df6 <printk>
   13086:	4040      	eors	r0, r0
   13088:	f380 8811 	msr	BASEPRI, r0
   1308c:	f04f 0003 	mov.w	r0, #3
   13090:	df02      	svc	2
}
   13092:	b009      	add	sp, #36	; 0x24
   13094:	bd30      	pop	{r4, r5, pc}
   13096:	bf00      	nop
   13098:	00012ec1 	.word	0x00012ec1
   1309c:	00020214 	.word	0x00020214
   130a0:	00020158 	.word	0x00020158
   130a4:	0001fcdc 	.word	0x0001fcdc

000130a8 <ll_start_enc_req_send>:
{
   130a8:	b570      	push	{r4, r5, r6, lr}
   130aa:	460e      	mov	r6, r1
   130ac:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   130ae:	f7fd f949 	bl	10344 <ll_connected_get>
	if (!conn) {
   130b2:	2800      	cmp	r0, #0
   130b4:	d040      	beq.n	13138 <ll_start_enc_req_send+0x90>
	if (error_code) {
   130b6:	4604      	mov	r4, r0
   130b8:	b95e      	cbnz	r6, 130d2 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   130ba:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   130be:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   130c2:	429a      	cmp	r2, r3
   130c4:	d003      	beq.n	130ce <ll_start_enc_req_send+0x26>
   130c6:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   130ca:	2b03      	cmp	r3, #3
   130cc:	d026      	beq.n	1311c <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   130ce:	200c      	movs	r0, #12
}
   130d0:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   130d2:	f890 0152 	ldrb.w	r0, [r0, #338]	; 0x152
   130d6:	f010 0004 	ands.w	r0, r0, #4
   130da:	d112      	bne.n	13102 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   130dc:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   130e0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   130e4:	429a      	cmp	r2, r3
   130e6:	d0f2      	beq.n	130ce <ll_start_enc_req_send+0x26>
   130e8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   130ec:	2b03      	cmp	r3, #3
   130ee:	d1ee      	bne.n	130ce <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   130f0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			conn->llcp.encryption.error_code = error_code;
   130f4:	f884 60ed 	strb.w	r6, [r4, #237]	; 0xed
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   130f8:	f360 0301 	bfi	r3, r0, #0, #2
   130fc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
}
   13100:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   13102:	f894 212c 	ldrb.w	r2, [r4, #300]	; 0x12c
			if (conn->llcp_terminate.ack !=
   13106:	f894 312d 	ldrb.w	r3, [r4, #301]	; 0x12d
   1310a:	4293      	cmp	r3, r2
   1310c:	d1df      	bne.n	130ce <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   1310e:	3301      	adds	r3, #1
   13110:	f884 312c 	strb.w	r3, [r4, #300]	; 0x12c
			conn->llcp_terminate.reason_own = error_code;
   13114:	f884 612e 	strb.w	r6, [r4, #302]	; 0x12e
	return 0;
   13118:	2000      	movs	r0, #0
}
   1311a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   1311c:	4629      	mov	r1, r5
   1311e:	2210      	movs	r2, #16
   13120:	f200 105d 	addw	r0, r0, #349	; 0x15d
   13124:	f008 fc81 	bl	1ba2a <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13128:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   1312c:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
	return 0;
   13130:	4630      	mov	r0, r6
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   13132:	f8a4 30ec 	strh.w	r3, [r4, #236]	; 0xec
}
   13136:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13138:	2002      	movs	r0, #2
}
   1313a:	bd70      	pop	{r4, r5, r6, pc}

0001313c <ull_chan_map_get>:

	return 0;
}

uint8_t ull_chan_map_get(uint8_t *const chan_map)
{
   1313c:	b508      	push	{r3, lr}
	memcpy(chan_map, map, sizeof(map));
   1313e:	4903      	ldr	r1, [pc, #12]	; (1314c <ull_chan_map_get+0x10>)
   13140:	2205      	movs	r2, #5
   13142:	f008 fc72 	bl	1ba2a <memcpy>

	return count;
   13146:	4b02      	ldr	r3, [pc, #8]	; (13150 <ull_chan_map_get+0x14>)
}
   13148:	7818      	ldrb	r0, [r3, #0]
   1314a:	bd08      	pop	{r3, pc}
   1314c:	2000083c 	.word	0x2000083c
   13150:	200009ef 	.word	0x200009ef

00013154 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   13154:	b470      	push	{r4, r5, r6}
   13156:	4605      	mov	r5, r0
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   13158:	7800      	ldrb	r0, [r0, #0]
   1315a:	4c1b      	ldr	r4, [pc, #108]	; (131c8 <lll_chan_sel_1+0x74>)
   1315c:	fb02 1101 	mla	r1, r2, r1, r1
   13160:	180a      	adds	r2, r1, r0
   13162:	fb84 0102 	smull	r0, r1, r4, r2
   13166:	4411      	add	r1, r2
   13168:	1149      	asrs	r1, r1, #5
   1316a:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   1316e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
   13172:	1a51      	subs	r1, r2, r1
   13174:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   13176:	08c2      	lsrs	r2, r0, #3
	*chan_use = chan_next;
   13178:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1317a:	5c9c      	ldrb	r4, [r3, r2]
{
   1317c:	f89d 500c 	ldrb.w	r5, [sp, #12]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   13180:	f001 0107 	and.w	r1, r1, #7
   13184:	410c      	asrs	r4, r1
   13186:	f014 0401 	ands.w	r4, r4, #1
   1318a:	d11b      	bne.n	131c4 <lll_chan_sel_1+0x70>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1318c:	fbb0 f2f5 	udiv	r2, r0, r5
   13190:	fb05 0212 	mls	r2, r5, r2, r0
   13194:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   13196:	1e5d      	subs	r5, r3, #1
   13198:	1d1e      	adds	r6, r3, #4
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   1319a:	f104 0108 	add.w	r1, r4, #8
   1319e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
		bit_count = 8U;
		while (bit_count--) {
   131a2:	4620      	mov	r0, r4
   131a4:	b2cc      	uxtb	r4, r1
			if (bite & 0x01) {
   131a6:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   131aa:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   131ae:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   131b2:	d002      	beq.n	131ba <lll_chan_sel_1+0x66>
				if (chan_index == 0U) {
   131b4:	b132      	cbz	r2, 131c4 <lll_chan_sel_1+0x70>
				chan_index--;
   131b6:	3a01      	subs	r2, #1
   131b8:	b2d2      	uxtb	r2, r2
			chan_next++;
   131ba:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   131bc:	4284      	cmp	r4, r0
   131be:	d1f2      	bne.n	131a6 <lll_chan_sel_1+0x52>
	while (byte_count--) {
   131c0:	42b5      	cmp	r5, r6
   131c2:	d1ea      	bne.n	1319a <lll_chan_sel_1+0x46>
}
   131c4:	bc70      	pop	{r4, r5, r6}
   131c6:	4770      	bx	lr
   131c8:	dd67c8a7 	.word	0xdd67c8a7

000131cc <lll_chan_sel_2>:
{
   131cc:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   131ce:	4f2f      	ldr	r7, [pc, #188]	; (1328c <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   131d0:	4e2f      	ldr	r6, [pc, #188]	; (13290 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   131d2:	ea80 0501 	eor.w	r5, r0, r1
   131d6:	2403      	movs	r4, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   131d8:	0a28      	lsrs	r0, r5, #8
   131da:	b2ed      	uxtb	r5, r5
   131dc:	eb00 2080 	add.w	r0, r0, r0, lsl #10
   131e0:	eb05 2585 	add.w	r5, r5, r5, lsl #10
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   131e4:	ea06 1e40 	and.w	lr, r6, r0, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   131e8:	ea07 0c40 	and.w	ip, r7, r0, lsl #1
   131ec:	ea07 0045 	and.w	r0, r7, r5, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   131f0:	ea06 1545 	and.w	r5, r6, r5, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   131f4:	ea4c 0c0e 	orr.w	ip, ip, lr
   131f8:	4328      	orrs	r0, r5
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   131fa:	eb00 2500 	add.w	r5, r0, r0, lsl #8
   131fe:	eb0c 2e0c 	add.w	lr, ip, ip, lsl #8
   13202:	eb00 2005 	add.w	r0, r0, r5, lsl #8
   13206:	eb0c 2c0e 	add.w	ip, ip, lr, lsl #8
   1320a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1320e:	f3c0 4007 	ubfx	r0, r0, #16, #8
   13212:	ea40 200c 	orr.w	r0, r0, ip, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   13216:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   1321a:	3c01      	subs	r4, #1
   1321c:	4408      	add	r0, r1

	for (iterate = 0U; iterate < 3; iterate++) {
   1321e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   13222:	b285      	uxth	r5, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   13224:	d1d8      	bne.n	131d8 <lll_chan_sel_2+0xc>
	chan_next = prn_e % 37;
   13226:	481b      	ldr	r0, [pc, #108]	; (13294 <lll_chan_sel_2+0xc8>)
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   13228:	4069      	eors	r1, r5
	chan_next = prn_e % 37;
   1322a:	fba0 5001 	umull	r5, r0, r0, r1
   1322e:	1a0d      	subs	r5, r1, r0
   13230:	eb00 0055 	add.w	r0, r0, r5, lsr #1
   13234:	0940      	lsrs	r0, r0, #5
   13236:	eb00 05c0 	add.w	r5, r0, r0, lsl #3
   1323a:	eb00 0085 	add.w	r0, r0, r5, lsl #2
   1323e:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   13240:	f3c0 05c4 	ubfx	r5, r0, #3, #5
   13244:	f000 0607 	and.w	r6, r0, #7
   13248:	5d55      	ldrb	r5, [r2, r5]
   1324a:	4135      	asrs	r5, r6
   1324c:	07ed      	lsls	r5, r5, #31
	chan_next = prn_e % 37;
   1324e:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   13250:	d41a      	bmi.n	13288 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   13252:	fb01 f303 	mul.w	r3, r1, r3
   13256:	1e56      	subs	r6, r2, #1
   13258:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   1325c:	3204      	adds	r2, #4
		bite = *chan_map;
   1325e:	f104 0508 	add.w	r5, r4, #8
   13262:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   13266:	4620      	mov	r0, r4
   13268:	b2ec      	uxtb	r4, r5
			if (bite & 0x01) {
   1326a:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   1326e:	f100 0501 	add.w	r5, r0, #1
			bite >>= 1;
   13272:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   13276:	d002      	beq.n	1327e <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   13278:	b133      	cbz	r3, 13288 <lll_chan_sel_2+0xbc>
				chan_index--;
   1327a:	3b01      	subs	r3, #1
   1327c:	b2db      	uxtb	r3, r3
			chan_next++;
   1327e:	b2e8      	uxtb	r0, r5
		while (bit_count--) {
   13280:	42a0      	cmp	r0, r4
   13282:	d1f2      	bne.n	1326a <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   13284:	42b2      	cmp	r2, r6
   13286:	d1ea      	bne.n	1325e <lll_chan_sel_2+0x92>
}
   13288:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1328a:	bf00      	nop
   1328c:	00022110 	.word	0x00022110
   13290:	00088440 	.word	0x00088440
   13294:	bacf914d 	.word	0xbacf914d

00013298 <wl_find>:
		wl[i].taken = 0U;
	}
}

static uint8_t wl_find(uint8_t addr_type, uint8_t *addr, uint8_t *free)
{
   13298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1329c:	4688      	mov	r8, r1
	int i;

	if (free) {
   1329e:	4615      	mov	r5, r2
   132a0:	b10a      	cbz	r2, 132a6 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   132a2:	23ff      	movs	r3, #255	; 0xff
   132a4:	7013      	strb	r3, [r2, #0]
   132a6:	4e17      	ldr	r6, [pc, #92]	; (13304 <wl_find+0x6c>)
	}

	for (i = 0; i < WL_SIZE; i++) {
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   132a8:	f000 0701 	and.w	r7, r0, #1
   132ac:	f106 0902 	add.w	r9, r6, #2
{
   132b0:	2400      	movs	r4, #0
   132b2:	e004      	b.n	132be <wl_find+0x26>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   132b4:	42ba      	cmp	r2, r7
   132b6:	d014      	beq.n	132e2 <wl_find+0x4a>
	for (i = 0; i < WL_SIZE; i++) {
   132b8:	3401      	adds	r4, #1
   132ba:	2c08      	cmp	r4, #8
   132bc:	d00e      	beq.n	132dc <wl_find+0x44>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   132be:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   132c2:	07d9      	lsls	r1, r3, #31
   132c4:	f3c3 0240 	ubfx	r2, r3, #1, #1
   132c8:	d4f4      	bmi.n	132b4 <wl_find+0x1c>
			return i;
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   132ca:	2d00      	cmp	r5, #0
   132cc:	d0f4      	beq.n	132b8 <wl_find+0x20>
   132ce:	782b      	ldrb	r3, [r5, #0]
   132d0:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   132d2:	bf08      	it	eq
   132d4:	702c      	strbeq	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   132d6:	3401      	adds	r4, #1
   132d8:	2c08      	cmp	r4, #8
   132da:	d1f0      	bne.n	132be <wl_find+0x26>
		}
	}

	return FILTER_IDX_NONE;
   132dc:	20ff      	movs	r0, #255	; 0xff
}
   132de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   132e2:	2206      	movs	r2, #6
   132e4:	4641      	mov	r1, r8
   132e6:	eb09 00c4 	add.w	r0, r9, r4, lsl #3
   132ea:	f008 fb8e 	bl	1ba0a <memcmp>
   132ee:	b130      	cbz	r0, 132fe <wl_find+0x66>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   132f0:	2d00      	cmp	r5, #0
   132f2:	d0e1      	beq.n	132b8 <wl_find+0x20>
   132f4:	f816 3034 	ldrb.w	r3, [r6, r4, lsl #3]
   132f8:	07db      	lsls	r3, r3, #31
   132fa:	d4dd      	bmi.n	132b8 <wl_find+0x20>
   132fc:	e7e7      	b.n	132ce <wl_find+0x36>
			return i;
   132fe:	b2e0      	uxtb	r0, r4
   13300:	e7ed      	b.n	132de <wl_find+0x46>
   13302:	bf00      	nop
   13304:	200024ac 	.word	0x200024ac

00013308 <wl_update>:

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
}

static void wl_update(void)
{
   13308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1330c:	4f21      	ldr	r7, [pc, #132]	; (13394 <wl_update+0x8c>)
   1330e:	4d22      	ldr	r5, [pc, #136]	; (13398 <wl_update+0x90>)
			continue;
		}

		j = wl[i].rl_idx;

		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   13310:	f8df 9088 	ldr.w	r9, [pc, #136]	; 1339c <wl_update+0x94>
   13314:	f8df a088 	ldr.w	sl, [pc, #136]	; 133a0 <wl_update+0x98>
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   13318:	f1a7 0802 	sub.w	r8, r7, #2
   1331c:	f1a5 0b02 	sub.w	fp, r5, #2
{
   13320:	2400      	movs	r4, #0
		if (!wl[i].taken) {
   13322:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   13326:	2601      	movs	r6, #1
		if (!wl[i].taken) {
   13328:	f013 0f01 	tst.w	r3, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1332c:	4638      	mov	r0, r7
	filter->enable_bitmask |= BIT(index);
   1332e:	fa06 f604 	lsl.w	r6, r6, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   13332:	4629      	mov	r1, r5
   13334:	f107 0706 	add.w	r7, r7, #6
   13338:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   1333c:	d022      	beq.n	13384 <wl_update+0x7c>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1333e:	f899 3000 	ldrb.w	r3, [r9]
   13342:	b163      	cbz	r3, 1335e <wl_update+0x56>
		j = wl[i].rl_idx;
   13344:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   13348:	2b07      	cmp	r3, #7
   1334a:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1334e:	d806      	bhi.n	1335e <wl_update+0x56>
   13350:	f81a 303c 	ldrb.w	r3, [sl, ip, lsl #3]
   13354:	f013 0f04 	tst.w	r3, #4
   13358:	d001      	beq.n	1335e <wl_update+0x56>
   1335a:	06db      	lsls	r3, r3, #27
   1335c:	d512      	bpl.n	13384 <wl_update+0x7c>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1335e:	f81b 3034 	ldrb.w	r3, [fp, r4, lsl #3]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   13362:	f898 e001 	ldrb.w	lr, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   13366:	f898 c000 	ldrb.w	ip, [r8]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1336a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1336e:	40a3      	lsls	r3, r4
   13370:	ea4e 0303 	orr.w	r3, lr, r3
	filter->enable_bitmask |= BIT(index);
   13374:	ea4c 0606 	orr.w	r6, ip, r6
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   13378:	f888 3001 	strb.w	r3, [r8, #1]
	filter->enable_bitmask |= BIT(index);
   1337c:	f888 6000 	strb.w	r6, [r8]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   13380:	f008 fb53 	bl	1ba2a <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   13384:	3401      	adds	r4, #1
   13386:	2c08      	cmp	r4, #8
   13388:	f105 0508 	add.w	r5, r5, #8
   1338c:	d1c9      	bne.n	13322 <wl_update+0x1a>
}
   1338e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13392:	bf00      	nop
   13394:	200024ee 	.word	0x200024ee
   13398:	200024ae 	.word	0x200024ae
   1339c:	200029ce 	.word	0x200029ce
   133a0:	20002334 	.word	0x20002334

000133a4 <rl_update>:
{
   133a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   133a8:	f8df 8060 	ldr.w	r8, [pc, #96]	; 1340c <rl_update+0x68>
	filter->enable_bitmask |= BIT(index);
   133ac:	4d16      	ldr	r5, [pc, #88]	; (13408 <rl_update+0x64>)
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   133ae:	f108 0701 	add.w	r7, r8, #1
   133b2:	1cae      	adds	r6, r5, #2
{
   133b4:	2400      	movs	r4, #0
   133b6:	e002      	b.n	133be <rl_update+0x1a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   133b8:	3401      	adds	r4, #1
   133ba:	2c08      	cmp	r4, #8
   133bc:	d021      	beq.n	13402 <rl_update+0x5e>
		if (rl[i].taken) {
   133be:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   133c2:	00d9      	lsls	r1, r3, #3
   133c4:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   133c8:	07da      	lsls	r2, r3, #31
   133ca:	d5f5      	bpl.n	133b8 <rl_update+0x14>
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   133cc:	786a      	ldrb	r2, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   133ce:	f895 c000 	ldrb.w	ip, [r5]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   133d2:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   133d6:	f04f 0e01 	mov.w	lr, #1
   133da:	fa0e fe04 	lsl.w	lr, lr, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   133de:	40a3      	lsls	r3, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   133e0:	eb04 0044 	add.w	r0, r4, r4, lsl #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   133e4:	4313      	orrs	r3, r2
	filter->enable_bitmask |= BIT(index);
   133e6:	ea4c 0c0e 	orr.w	ip, ip, lr
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   133ea:	4439      	add	r1, r7
   133ec:	eb06 0040 	add.w	r0, r6, r0, lsl #1
   133f0:	2206      	movs	r2, #6
   133f2:	3401      	adds	r4, #1
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   133f4:	706b      	strb	r3, [r5, #1]
	filter->enable_bitmask |= BIT(index);
   133f6:	f885 c000 	strb.w	ip, [r5]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   133fa:	f008 fb16 	bl	1ba2a <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   133fe:	2c08      	cmp	r4, #8
   13400:	d1dd      	bne.n	133be <rl_update+0x1a>
}
   13402:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13406:	bf00      	nop
   13408:	20002474 	.word	0x20002474
   1340c:	20002334 	.word	0x20002334

00013410 <ll_wl_size_get>:
}
   13410:	2008      	movs	r0, #8
   13412:	4770      	bx	lr

00013414 <ll_wl_clear>:
{
   13414:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   13416:	2000      	movs	r0, #0
   13418:	f7fc fae8 	bl	f9ec <ull_adv_filter_pol_get>
   1341c:	b9d8      	cbnz	r0, 13456 <ll_wl_clear+0x42>
   1341e:	4a0f      	ldr	r2, [pc, #60]	; (1345c <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   13420:	4c0f      	ldr	r4, [pc, #60]	; (13460 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   13422:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   13426:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   13428:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   1342a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1342e:	d805      	bhi.n	1343c <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   13430:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   13434:	f36f 1345 	bfc	r3, #5, #1
   13438:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   1343c:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   13440:	f36f 0300 	bfc	r3, #0, #1
   13444:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   13448:	3001      	adds	r0, #1
   1344a:	2808      	cmp	r0, #8
   1344c:	d1e9      	bne.n	13422 <ll_wl_clear+0xe>
	wl_anon = 0U;
   1344e:	4b05      	ldr	r3, [pc, #20]	; (13464 <ll_wl_clear+0x50>)
   13450:	2000      	movs	r0, #0
   13452:	7018      	strb	r0, [r3, #0]
}
   13454:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13456:	200c      	movs	r0, #12
}
   13458:	bd10      	pop	{r4, pc}
   1345a:	bf00      	nop
   1345c:	200024ac 	.word	0x200024ac
   13460:	20002334 	.word	0x20002334
   13464:	200029cf 	.word	0x200029cf

00013468 <ll_wl_remove>:
{
   13468:	b538      	push	{r3, r4, r5, lr}
   1346a:	4605      	mov	r5, r0
	if (ull_adv_filter_pol_get(0)) {
   1346c:	2000      	movs	r0, #0
   1346e:	f7fc fabd 	bl	f9ec <ull_adv_filter_pol_get>
   13472:	bb30      	cbnz	r0, 134c2 <ll_wl_remove+0x5a>
   13474:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   13476:	7828      	ldrb	r0, [r5, #0]
   13478:	28ff      	cmp	r0, #255	; 0xff
   1347a:	d01e      	beq.n	134ba <ll_wl_remove+0x52>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   1347c:	1c69      	adds	r1, r5, #1
   1347e:	4622      	mov	r2, r4
   13480:	f7ff ff0a 	bl	13298 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   13484:	2807      	cmp	r0, #7
   13486:	d901      	bls.n	1348c <ll_wl_remove+0x24>
   13488:	2002      	movs	r0, #2
}
   1348a:	bd38      	pop	{r3, r4, r5, pc}
		uint8_t j = wl[i].rl_idx;
   1348c:	4a0e      	ldr	r2, [pc, #56]	; (134c8 <ll_wl_remove+0x60>)
   1348e:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   13492:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   13494:	2b07      	cmp	r3, #7
   13496:	d808      	bhi.n	134aa <ll_wl_remove+0x42>
			rl[j].wl = 0U;
   13498:	490c      	ldr	r1, [pc, #48]	; (134cc <ll_wl_remove+0x64>)
   1349a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   1349e:	f811 5033 	ldrb.w	r5, [r1, r3, lsl #3]
   134a2:	f364 1545 	bfi	r5, r4, #5, #1
   134a6:	f801 5033 	strb.w	r5, [r1, r3, lsl #3]
		wl[i].taken = 0U;
   134aa:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   134ae:	f36f 0300 	bfc	r3, #0, #1
   134b2:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
		return 0;
   134b6:	2000      	movs	r0, #0
}
   134b8:	bd38      	pop	{r3, r4, r5, pc}
		wl_anon = 0U;
   134ba:	4b05      	ldr	r3, [pc, #20]	; (134d0 <ll_wl_remove+0x68>)
   134bc:	701c      	strb	r4, [r3, #0]
		return 0;
   134be:	4620      	mov	r0, r4
}
   134c0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   134c2:	200c      	movs	r0, #12
}
   134c4:	bd38      	pop	{r3, r4, r5, pc}
   134c6:	bf00      	nop
   134c8:	200024ac 	.word	0x200024ac
   134cc:	20002334 	.word	0x20002334
   134d0:	200029cf 	.word	0x200029cf

000134d4 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   134d4:	2807      	cmp	r0, #7
{
   134d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   134da:	4604      	mov	r4, r0
   134dc:	460d      	mov	r5, r1
   134de:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   134e0:	d817      	bhi.n	13512 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   134e2:	4e19      	ldr	r6, [pc, #100]	; (13548 <ll_rl_id_addr_get+0x74>)
   134e4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   134e8:	00a7      	lsls	r7, r4, #2
   134ea:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   134ee:	07db      	lsls	r3, r3, #31
   134f0:	d51c      	bpl.n	1352c <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   134f2:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   134f4:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   134f6:	f816 3037 	ldrb.w	r3, [r6, r7, lsl #3]
   134fa:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   134fe:	fb01 6104 	mla	r1, r1, r4, r6
	*id_addr_type = rl[rl_idx].id_addr_type;
   13502:	702b      	strb	r3, [r5, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   13504:	4640      	mov	r0, r8
   13506:	3101      	adds	r1, #1
}
   13508:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   1350c:	2206      	movs	r2, #6
   1350e:	f008 ba8c 	b.w	1ba2a <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   13512:	4a0e      	ldr	r2, [pc, #56]	; (1354c <ll_rl_id_addr_get+0x78>)
   13514:	490e      	ldr	r1, [pc, #56]	; (13550 <ll_rl_id_addr_get+0x7c>)
   13516:	480f      	ldr	r0, [pc, #60]	; (13554 <ll_rl_id_addr_get+0x80>)
   13518:	23e9      	movs	r3, #233	; 0xe9
   1351a:	f006 fc6c 	bl	19df6 <printk>
   1351e:	4040      	eors	r0, r0
   13520:	f380 8811 	msr	BASEPRI, r0
   13524:	f04f 0003 	mov.w	r0, #3
   13528:	df02      	svc	2
   1352a:	e7da      	b.n	134e2 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   1352c:	4a07      	ldr	r2, [pc, #28]	; (1354c <ll_rl_id_addr_get+0x78>)
   1352e:	490a      	ldr	r1, [pc, #40]	; (13558 <ll_rl_id_addr_get+0x84>)
   13530:	4808      	ldr	r0, [pc, #32]	; (13554 <ll_rl_id_addr_get+0x80>)
   13532:	23ea      	movs	r3, #234	; 0xea
   13534:	f006 fc5f 	bl	19df6 <printk>
   13538:	4040      	eors	r0, r0
   1353a:	f380 8811 	msr	BASEPRI, r0
   1353e:	f04f 0003 	mov.w	r0, #3
   13542:	df02      	svc	2
   13544:	e7d5      	b.n	134f2 <ll_rl_id_addr_get+0x1e>
   13546:	bf00      	nop
   13548:	20002334 	.word	0x20002334
   1354c:	0002029c 	.word	0x0002029c
   13550:	000202e0 	.word	0x000202e0
   13554:	0001fcdc 	.word	0x0001fcdc
   13558:	000202ec 	.word	0x000202ec

0001355c <ll_rl_size_get>:
   1355c:	2008      	movs	r0, #8
   1355e:	4770      	bx	lr

00013560 <ll_rl_clear>:
{
   13560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   13562:	2000      	movs	r0, #0
   13564:	f7fc fa36 	bl	f9d4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   13568:	bb98      	cbnz	r0, 135d2 <ll_rl_clear+0x72>
		rl[i].taken = 0U;
   1356a:	4b1b      	ldr	r3, [pc, #108]	; (135d8 <ll_rl_clear+0x78>)
	peer_irk_count = 0U;
   1356c:	491b      	ldr	r1, [pc, #108]	; (135dc <ll_rl_clear+0x7c>)
		rl[i].taken = 0U;
   1356e:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   13572:	f893 c000 	ldrb.w	ip, [r3]
   13576:	f893 7028 	ldrb.w	r7, [r3, #40]	; 0x28
   1357a:	f893 6078 	ldrb.w	r6, [r3, #120]	; 0x78
   1357e:	f893 50a0 	ldrb.w	r5, [r3, #160]	; 0xa0
   13582:	f893 40c8 	ldrb.w	r4, [r3, #200]	; 0xc8
	peer_irk_count = 0U;
   13586:	7008      	strb	r0, [r1, #0]
		rl[i].taken = 0U;
   13588:	f360 0200 	bfi	r2, r0, #0, #1
   1358c:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   13590:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
   13594:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   13598:	f360 0c00 	bfi	ip, r0, #0, #1
   1359c:	f360 0700 	bfi	r7, r0, #0, #1
   135a0:	f360 0600 	bfi	r6, r0, #0, #1
   135a4:	f360 0500 	bfi	r5, r0, #0, #1
   135a8:	f360 0400 	bfi	r4, r0, #0, #1
   135ac:	f360 0100 	bfi	r1, r0, #0, #1
   135b0:	f360 0200 	bfi	r2, r0, #0, #1
   135b4:	f883 c000 	strb.w	ip, [r3]
   135b8:	f883 7028 	strb.w	r7, [r3, #40]	; 0x28
   135bc:	f883 6078 	strb.w	r6, [r3, #120]	; 0x78
   135c0:	f883 50a0 	strb.w	r5, [r3, #160]	; 0xa0
   135c4:	f883 40c8 	strb.w	r4, [r3, #200]	; 0xc8
   135c8:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   135cc:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   135d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   135d2:	200c      	movs	r0, #12
}
   135d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   135d6:	bf00      	nop
   135d8:	20002334 	.word	0x20002334
   135dc:	200029cd 	.word	0x200029cd

000135e0 <ll_rl_enable>:
{
   135e0:	b510      	push	{r4, lr}
   135e2:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   135e4:	2000      	movs	r0, #0
   135e6:	f7fc f9f5 	bl	f9d4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   135ea:	b958      	cbnz	r0, 13604 <ll_rl_enable+0x24>
	switch (enable) {
   135ec:	b134      	cbz	r4, 135fc <ll_rl_enable+0x1c>
   135ee:	2c01      	cmp	r4, #1
   135f0:	d001      	beq.n	135f6 <ll_rl_enable+0x16>
   135f2:	2012      	movs	r0, #18
}
   135f4:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   135f6:	4b04      	ldr	r3, [pc, #16]	; (13608 <ll_rl_enable+0x28>)
   135f8:	701c      	strb	r4, [r3, #0]
}
   135fa:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   135fc:	4b02      	ldr	r3, [pc, #8]	; (13608 <ll_rl_enable+0x28>)
   135fe:	701c      	strb	r4, [r3, #0]
	return 0;
   13600:	4620      	mov	r0, r4
}
   13602:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13604:	200c      	movs	r0, #12
}
   13606:	bd10      	pop	{r4, pc}
   13608:	200029ce 	.word	0x200029ce

0001360c <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1360c:	4a03      	ldr	r2, [pc, #12]	; (1361c <ll_rl_timeout_set+0x10>)
   1360e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   13612:	fb03 f300 	mul.w	r3, r3, r0
   13616:	6013      	str	r3, [r2, #0]
}
   13618:	4770      	bx	lr
   1361a:	bf00      	nop
   1361c:	200024a8 	.word	0x200024a8

00013620 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   13620:	b1b0      	cbz	r0, 13650 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   13622:	4b0d      	ldr	r3, [pc, #52]	; (13658 <ull_filter_adv_scan_state_cb+0x38>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   13624:	681a      	ldr	r2, [r3, #0]
{
   13626:	b510      	push	{r4, lr}
   13628:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1362c:	f240 30e7 	movw	r0, #999	; 0x3e7
   13630:	2100      	movs	r1, #0
   13632:	fbe3 0102 	umlal	r0, r1, r3, r2
   13636:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1363a:	2300      	movs	r3, #0
   1363c:	f7ed f97e 	bl	93c <__aeabi_uldivmod>
}
   13640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13644:	4602      	mov	r2, r0
   13646:	460b      	mov	r3, r1
   13648:	4804      	ldr	r0, [pc, #16]	; (1365c <ull_filter_adv_scan_state_cb+0x3c>)
   1364a:	4905      	ldr	r1, [pc, #20]	; (13660 <ull_filter_adv_scan_state_cb+0x40>)
   1364c:	f005 bffc 	b.w	19648 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   13650:	4803      	ldr	r0, [pc, #12]	; (13660 <ull_filter_adv_scan_state_cb+0x40>)
   13652:	f00b bcbb 	b.w	1efcc <k_delayed_work_cancel>
   13656:	bf00      	nop
   13658:	200024a8 	.word	0x200024a8
   1365c:	20001348 	.word	0x20001348
   13660:	20001218 	.word	0x20001218

00013664 <ull_filter_adv_update>:
{
   13664:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   13666:	4b09      	ldr	r3, [pc, #36]	; (1368c <ull_filter_adv_update+0x28>)
   13668:	2200      	movs	r2, #0
   1366a:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   1366c:	b930      	cbnz	r0, 1367c <ull_filter_adv_update+0x18>
	if (rl_enable &&
   1366e:	4b08      	ldr	r3, [pc, #32]	; (13690 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   13670:	4a08      	ldr	r2, [pc, #32]	; (13694 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   13672:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   13674:	2100      	movs	r1, #0
   13676:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   13678:	b91b      	cbnz	r3, 13682 <ull_filter_adv_update+0x1e>
}
   1367a:	bd08      	pop	{r3, pc}
		wl_update();
   1367c:	f7ff fe44 	bl	13308 <wl_update>
   13680:	e7f5      	b.n	1366e <ull_filter_adv_update+0xa>
}
   13682:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   13686:	f7ff be8d 	b.w	133a4 <rl_update>
   1368a:	bf00      	nop
   1368c:	200024ec 	.word	0x200024ec
   13690:	200029ce 	.word	0x200029ce
   13694:	20002474 	.word	0x20002474

00013698 <ull_filter_adv_pdu_update>:
{
   13698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint8_t idx = adv->lll.rl_idx;
   1369c:	f890 702a 	ldrb.w	r7, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   136a0:	2f07      	cmp	r7, #7
{
   136a2:	4605      	mov	r5, r0
   136a4:	460c      	mov	r4, r1
				  &pdu->scan_rsp.addr[0] :
   136a6:	f101 0602 	add.w	r6, r1, #2
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   136aa:	d845      	bhi.n	13738 <ull_filter_adv_pdu_update+0xa0>
   136ac:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 137a4 <ull_filter_adv_pdu_update+0x10c>
   136b0:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   136b4:	ea4f 0987 	mov.w	r9, r7, lsl #2
   136b8:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   136bc:	0719      	lsls	r1, r3, #28
   136be:	d529      	bpl.n	13714 <ull_filter_adv_pdu_update+0x7c>
		LL_ASSERT(rl[idx].rpas_ready);
   136c0:	079a      	lsls	r2, r3, #30
   136c2:	d55b      	bpl.n	1377c <ull_filter_adv_pdu_update+0xe4>
		pdu->tx_addr = 1;
   136c4:	7822      	ldrb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   136c6:	eb09 0307 	add.w	r3, r9, r7
   136ca:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
		pdu->tx_addr = 1;
   136ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   136d2:	6a59      	ldr	r1, [r3, #36]	; 0x24
		pdu->tx_addr = 1;
   136d4:	7022      	strb	r2, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   136d6:	4630      	mov	r0, r6
   136d8:	2206      	movs	r2, #6
   136da:	f008 f9a6 	bl	1ba2a <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   136de:	7823      	ldrb	r3, [r4, #0]
   136e0:	f003 030f 	and.w	r3, r3, #15
   136e4:	2b01      	cmp	r3, #1
   136e6:	d125      	bne.n	13734 <ull_filter_adv_pdu_update+0x9c>
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   136e8:	44b9      	add	r9, r7
   136ea:	f818 3039 	ldrb.w	r3, [r8, r9, lsl #3]
   136ee:	075b      	lsls	r3, r3, #29
   136f0:	d434      	bmi.n	1375c <ull_filter_adv_pdu_update+0xc4>
			pdu->rx_addr = adv->id_addr_type;
   136f2:	f895 30d6 	ldrb.w	r3, [r5, #214]	; 0xd6
   136f6:	7822      	ldrb	r2, [r4, #0]
   136f8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
   136fc:	4620      	mov	r0, r4
   136fe:	f363 12c7 	bfi	r2, r3, #7, #1
   13702:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->direct_ind.tgt_addr[0],
   13706:	f105 01d7 	add.w	r1, r5, #215	; 0xd7
   1370a:	2206      	movs	r2, #6
}
   1370c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   13710:	f008 b98b 	b.w	1ba2a <memcpy>
		pdu->tx_addr = adv->own_addr_type & 0x1;
   13714:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   13718:	7823      	ldrb	r3, [r4, #0]
   1371a:	f3c0 0040 	ubfx	r0, r0, #1, #1
   1371e:	f360 1386 	bfi	r3, r0, #6, #1
   13722:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   13724:	4631      	mov	r1, r6
   13726:	f7f9 f963 	bl	c9f0 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1372a:	7823      	ldrb	r3, [r4, #0]
   1372c:	f003 030f 	and.w	r3, r3, #15
   13730:	2b01      	cmp	r3, #1
   13732:	d0d9      	beq.n	136e8 <ull_filter_adv_pdu_update+0x50>
}
   13734:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu->tx_addr = adv->own_addr_type & 0x1;
   13738:	f890 00d6 	ldrb.w	r0, [r0, #214]	; 0xd6
   1373c:	780b      	ldrb	r3, [r1, #0]
   1373e:	f3c0 0040 	ubfx	r0, r0, #1, #1
   13742:	f360 1386 	bfi	r3, r0, #6, #1
   13746:	7023      	strb	r3, [r4, #0]
			ll_addr_get(pdu->tx_addr, adva);
   13748:	4631      	mov	r1, r6
   1374a:	f7f9 f951 	bl	c9f0 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1374e:	7823      	ldrb	r3, [r4, #0]
   13750:	f003 030f 	and.w	r3, r3, #15
   13754:	2b01      	cmp	r3, #1
   13756:	d0cc      	beq.n	136f2 <ull_filter_adv_pdu_update+0x5a>
}
   13758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu->rx_addr = 1;
   1375c:	7823      	ldrb	r3, [r4, #0]
   1375e:	4620      	mov	r0, r4
   13760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   13764:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   13768:	2328      	movs	r3, #40	; 0x28
   1376a:	fb03 8707 	mla	r7, r3, r7, r8
			memcpy(&pdu->direct_ind.tgt_addr[0],
   1376e:	f107 011e 	add.w	r1, r7, #30
   13772:	2206      	movs	r2, #6
}
   13774:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			memcpy(&pdu->direct_ind.tgt_addr[0],
   13778:	f008 b957 	b.w	1ba2a <memcpy>
		LL_ASSERT(rl[idx].rpas_ready);
   1377c:	4a06      	ldr	r2, [pc, #24]	; (13798 <ull_filter_adv_pdu_update+0x100>)
   1377e:	4907      	ldr	r1, [pc, #28]	; (1379c <ull_filter_adv_pdu_update+0x104>)
   13780:	4807      	ldr	r0, [pc, #28]	; (137a0 <ull_filter_adv_pdu_update+0x108>)
   13782:	f44f 7313 	mov.w	r3, #588	; 0x24c
   13786:	f006 fb36 	bl	19df6 <printk>
   1378a:	4040      	eors	r0, r0
   1378c:	f380 8811 	msr	BASEPRI, r0
   13790:	f04f 0003 	mov.w	r0, #3
   13794:	df02      	svc	2
   13796:	e795      	b.n	136c4 <ull_filter_adv_pdu_update+0x2c>
   13798:	0002029c 	.word	0x0002029c
   1379c:	00020300 	.word	0x00020300
   137a0:	0001fcdc 	.word	0x0001fcdc
   137a4:	20002334 	.word	0x20002334

000137a8 <ull_filter_rpa_update>:
{
   137a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   137ac:	4682      	mov	sl, r0
   137ae:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   137b0:	f00b fc65 	bl	1f07e <z_impl_k_uptime_ticks>
   137b4:	014b      	lsls	r3, r1, #5
   137b6:	0142      	lsls	r2, r0, #5
   137b8:	ebb2 0800 	subs.w	r8, r2, r0
   137bc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   137c0:	eb63 0301 	sbc.w	r3, r3, r1
   137c4:	009b      	lsls	r3, r3, #2
   137c6:	ea4f 0288 	mov.w	r2, r8, lsl #2
   137ca:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
   137ce:	eb12 0800 	adds.w	r8, r2, r0
   137d2:	eb43 0101 	adc.w	r1, r3, r1
   137d6:	00c9      	lsls	r1, r1, #3
   137d8:	ea41 7158 	orr.w	r1, r1, r8, lsr #29
   137dc:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   137e0:	ea4f 38d3 	mov.w	r8, r3, lsr #15
   137e4:	0bce      	lsrs	r6, r1, #15
   137e6:	ea48 4841 	orr.w	r8, r8, r1, lsl #17
   137ea:	9601      	str	r6, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   137ec:	f1ba 0f00 	cmp.w	sl, #0
   137f0:	d117      	bne.n	13822 <ull_filter_rpa_update+0x7a>
   137f2:	4b76      	ldr	r3, [pc, #472]	; (139cc <ull_filter_rpa_update+0x224>)
   137f4:	e9d3 0100 	ldrd	r0, r1, [r3]
   137f8:	1c4c      	adds	r4, r1, #1
   137fa:	bf08      	it	eq
   137fc:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   13800:	d00f      	beq.n	13822 <ull_filter_rpa_update+0x7a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   13802:	4b73      	ldr	r3, [pc, #460]	; (139d0 <ull_filter_rpa_update+0x228>)
   13804:	681a      	ldr	r2, [r3, #0]
   13806:	ebb8 0400 	subs.w	r4, r8, r0
   1380a:	eb66 0501 	sbc.w	r5, r6, r1
   1380e:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   13810:	4294      	cmp	r4, r2
   13812:	eb75 0303 	sbcs.w	r3, r5, r3
   13816:	bfac      	ite	ge
   13818:	f04f 0901 	movge.w	r9, #1
   1381c:	f04f 0900 	movlt.w	r9, #0
   13820:	e001      	b.n	13826 <ull_filter_rpa_update+0x7e>
   13822:	f04f 0901 	mov.w	r9, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   13826:	4e6b      	ldr	r6, [pc, #428]	; (139d4 <ull_filter_rpa_update+0x22c>)
				LL_ASSERT(!err);
   13828:	f8df b1bc 	ldr.w	fp, [pc, #444]	; 139e8 <ull_filter_rpa_update+0x240>
   1382c:	f1a6 0724 	sub.w	r7, r6, #36	; 0x24
	bool all = timeout || (rpa_last_ms == -1) ||
   13830:	2400      	movs	r4, #0
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   13832:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   13836:	00a5      	lsls	r5, r4, #2
   13838:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1383c:	07da      	lsls	r2, r3, #31
   1383e:	d515      	bpl.n	1386c <ull_filter_rpa_update+0xc4>
   13840:	f1b9 0f00 	cmp.w	r9, #0
   13844:	d101      	bne.n	1384a <ull_filter_rpa_update+0xa2>
   13846:	0798      	lsls	r0, r3, #30
   13848:	d410      	bmi.n	1386c <ull_filter_rpa_update+0xc4>
			if (rl[i].pirk) {
   1384a:	192b      	adds	r3, r5, r4
   1384c:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   13850:	0759      	lsls	r1, r3, #29
   13852:	d435      	bmi.n	138c0 <ull_filter_rpa_update+0x118>
			if (rl[i].lirk) {
   13854:	192b      	adds	r3, r5, r4
   13856:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1385a:	071a      	lsls	r2, r3, #28
   1385c:	d419      	bmi.n	13892 <ull_filter_rpa_update+0xea>
			rl[i].rpas_ready = 1U;
   1385e:	4425      	add	r5, r4
   13860:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   13864:	f043 0302 	orr.w	r3, r3, #2
   13868:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1386c:	3401      	adds	r4, #1
   1386e:	2c08      	cmp	r4, #8
   13870:	f106 0628 	add.w	r6, r6, #40	; 0x28
   13874:	d1dd      	bne.n	13832 <ull_filter_rpa_update+0x8a>
	if (all) {
   13876:	f1b9 0f00 	cmp.w	r9, #0
   1387a:	d004      	beq.n	13886 <ull_filter_rpa_update+0xde>
		rpa_last_ms = now;
   1387c:	4b53      	ldr	r3, [pc, #332]	; (139cc <ull_filter_rpa_update+0x224>)
   1387e:	9a01      	ldr	r2, [sp, #4]
   13880:	f8c3 8000 	str.w	r8, [r3]
   13884:	605a      	str	r2, [r3, #4]
	if (timeout) {
   13886:	f1ba 0f00 	cmp.w	sl, #0
   1388a:	d13d      	bne.n	13908 <ull_filter_rpa_update+0x160>
}
   1388c:	b007      	add	sp, #28
   1388e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   13892:	a902      	add	r1, sp, #8
   13894:	f1a6 001d 	sub.w	r0, r6, #29
   13898:	f008 f954 	bl	1bb44 <bt_rpa_create>
				LL_ASSERT(!err);
   1389c:	2800      	cmp	r0, #0
   1389e:	f040 8081 	bne.w	139a4 <ull_filter_rpa_update+0x1fc>
				rl[i].local_rpa = &rpa;
   138a2:	4a4d      	ldr	r2, [pc, #308]	; (139d8 <ull_filter_rpa_update+0x230>)
   138a4:	eb04 0344 	add.w	r3, r4, r4, lsl #1
   138a8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
	memcpy(dst, src, sizeof(*dst));
   138ac:	a902      	add	r1, sp, #8
   138ae:	4618      	mov	r0, r3
   138b0:	2206      	movs	r2, #6
   138b2:	6031      	str	r1, [r6, #0]
   138b4:	9300      	str	r3, [sp, #0]
   138b6:	f008 f8b8 	bl	1ba2a <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   138ba:	9b00      	ldr	r3, [sp, #0]
   138bc:	6033      	str	r3, [r6, #0]
   138be:	e7ce      	b.n	1385e <ull_filter_rpa_update+0xb6>

	__ASSERT(((psrc < pdst && (psrc + length) <= pdst) ||
		  (psrc > pdst && (pdst + length) <= psrc)),
		 "Source and destination buffers must not overlap");

	psrc += length - 1;
   138c0:	f816 3c0d 	ldrb.w	r3, [r6, #-13]
   138c4:	4a45      	ldr	r2, [pc, #276]	; (139dc <ull_filter_rpa_update+0x234>)
   138c6:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   138ca:	320f      	adds	r2, #15

	for (; length > 0; length--) {
   138cc:	f10d 0307 	add.w	r3, sp, #7
   138d0:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   138d4:	f812 1901 	ldrb.w	r1, [r2], #-1
   138d8:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   138dc:	4283      	cmp	r3, r0
   138de:	d1f9      	bne.n	138d4 <ull_filter_rpa_update+0x12c>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   138e0:	1fb1      	subs	r1, r6, #6
   138e2:	a802      	add	r0, sp, #8
   138e4:	f008 f92e 	bl	1bb44 <bt_rpa_create>
				LL_ASSERT(!err);
   138e8:	2800      	cmp	r0, #0
   138ea:	d0b3      	beq.n	13854 <ull_filter_rpa_update+0xac>
   138ec:	493c      	ldr	r1, [pc, #240]	; (139e0 <ull_filter_rpa_update+0x238>)
   138ee:	483d      	ldr	r0, [pc, #244]	; (139e4 <ull_filter_rpa_update+0x23c>)
   138f0:	f240 2316 	movw	r3, #534	; 0x216
   138f4:	465a      	mov	r2, fp
   138f6:	f006 fa7e 	bl	19df6 <printk>
   138fa:	4040      	eors	r0, r0
   138fc:	f380 8811 	msr	BASEPRI, r0
   13900:	f04f 0003 	mov.w	r0, #3
   13904:	df02      	svc	2
   13906:	e7a5      	b.n	13854 <ull_filter_rpa_update+0xac>
		adv = ull_adv_is_enabled_get(0);
   13908:	2000      	movs	r0, #0
   1390a:	f7fc f855 	bl	f9b8 <ull_adv_is_enabled_get>
		if (adv) {
   1390e:	4604      	mov	r4, r0
   13910:	2800      	cmp	r0, #0
   13912:	d0bb      	beq.n	1388c <ull_filter_rpa_update+0xe4>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   13914:	f890 30d6 	ldrb.w	r3, [r0, #214]	; 0xd6
   13918:	075b      	lsls	r3, r3, #29
   1391a:	d5b7      	bpl.n	1388c <ull_filter_rpa_update+0xe4>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1391c:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   13920:	2b07      	cmp	r3, #7
   13922:	d8b3      	bhi.n	1388c <ull_filter_rpa_update+0xe4>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   13924:	f890 502c 	ldrb.w	r5, [r0, #44]	; 0x2c
	first = pdu->first;
   13928:	f890 102b 	ldrb.w	r1, [r0, #43]	; 0x2b
   1392c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   13930:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   13934:	f102 0311 	add.w	r3, r2, #17
   13938:	301c      	adds	r0, #28
	if (first == last) {
   1393a:	428d      	cmp	r5, r1
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1393c:	eb00 0603 	add.w	r6, r0, r3
	first = pdu->first;
   13940:	b2cf      	uxtb	r7, r1
	if (first == last) {
   13942:	d007      	beq.n	13954 <ull_filter_rpa_update+0x1ac>
		pdu->last = first;
   13944:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
   13948:	f3bf 8f4f 	dsb	sy
		first_latest = pdu->first;
   1394c:	f894 102b 	ldrb.w	r1, [r4, #43]	; 0x2b
		if (first_latest != first) {
   13950:	428f      	cmp	r7, r1
   13952:	d038      	beq.n	139c6 <ull_filter_rpa_update+0x21e>
		last++;
   13954:	3501      	adds	r5, #1
   13956:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   13958:	2d02      	cmp	r5, #2
   1395a:	d031      	beq.n	139c0 <ull_filter_rpa_update+0x218>
   1395c:	2127      	movs	r1, #39	; 0x27
   1395e:	2202      	movs	r2, #2
   13960:	fb11 2205 	smlabb	r2, r1, r5, r2
	return (void *)pdu->pdu[last];
   13964:	f104 012b 	add.w	r1, r4, #43	; 0x2b
		pdu->chan_sel = prev->chan_sel;
   13968:	5cc3      	ldrb	r3, [r0, r3]
	pdu->type = prev->type;
   1396a:	5c88      	ldrb	r0, [r1, r2]
		pdu->chan_sel = prev->chan_sel;
   1396c:	f3c3 1740 	ubfx	r7, r3, #5, #1
	pdu->type = prev->type;
   13970:	f3c3 0303 	ubfx	r3, r3, #0, #4
   13974:	ea43 1347 	orr.w	r3, r3, r7, lsl #5
   13978:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
   1397c:	4303      	orrs	r3, r0
   1397e:	188f      	adds	r7, r1, r2
   13980:	548b      	strb	r3, [r1, r2]
	ull_filter_adv_pdu_update(adv, pdu);
   13982:	4620      	mov	r0, r4
   13984:	4639      	mov	r1, r7
   13986:	f7ff fe87 	bl	13698 <ull_filter_adv_pdu_update>
	       prev->len - BDADDR_SIZE);
   1398a:	7872      	ldrb	r2, [r6, #1]
	memcpy(&pdu->adv_ind.data[0], &prev->adv_ind.data[0],
   1398c:	f107 0008 	add.w	r0, r7, #8
   13990:	3a06      	subs	r2, #6
   13992:	f106 0108 	add.w	r1, r6, #8
   13996:	f008 f848 	bl	1ba2a <memcpy>
	pdu->len = prev->len;
   1399a:	7873      	ldrb	r3, [r6, #1]
   1399c:	707b      	strb	r3, [r7, #1]
	pdu->last = idx;
   1399e:	f884 502c 	strb.w	r5, [r4, #44]	; 0x2c
}
   139a2:	e773      	b.n	1388c <ull_filter_rpa_update+0xe4>
				LL_ASSERT(!err);
   139a4:	490e      	ldr	r1, [pc, #56]	; (139e0 <ull_filter_rpa_update+0x238>)
   139a6:	480f      	ldr	r0, [pc, #60]	; (139e4 <ull_filter_rpa_update+0x23c>)
   139a8:	f240 2323 	movw	r3, #547	; 0x223
   139ac:	465a      	mov	r2, fp
   139ae:	f006 fa22 	bl	19df6 <printk>
   139b2:	4040      	eors	r0, r0
   139b4:	f380 8811 	msr	BASEPRI, r0
   139b8:	f04f 0003 	mov.w	r0, #3
   139bc:	df02      	svc	2
   139be:	e770      	b.n	138a2 <ull_filter_rpa_update+0xfa>
	bool all = timeout || (rpa_last_ms == -1) ||
   139c0:	2202      	movs	r2, #2
			last = 0U;
   139c2:	2500      	movs	r5, #0
   139c4:	e7ce      	b.n	13964 <ull_filter_rpa_update+0x1bc>
   139c6:	3202      	adds	r2, #2
   139c8:	e7cc      	b.n	13964 <ull_filter_rpa_update+0x1bc>
   139ca:	bf00      	nop
   139cc:	20001210 	.word	0x20001210
   139d0:	200024a8 	.word	0x200024a8
   139d4:	20002358 	.word	0x20002358
   139d8:	2000227c 	.word	0x2000227c
   139dc:	200022b4 	.word	0x200022b4
   139e0:	0001fe00 	.word	0x0001fe00
   139e4:	0001fcdc 	.word	0x0001fcdc
   139e8:	0002029c 	.word	0x0002029c

000139ec <rpa_timeout>:
{
   139ec:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   139ee:	2001      	movs	r0, #1
   139f0:	f7ff feda 	bl	137a8 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   139f4:	4b0a      	ldr	r3, [pc, #40]	; (13a20 <rpa_timeout+0x34>)
   139f6:	681a      	ldr	r2, [r3, #0]
   139f8:	f240 30e7 	movw	r0, #999	; 0x3e7
   139fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   13a00:	2100      	movs	r1, #0
   13a02:	fbe3 0102 	umlal	r0, r1, r3, r2
   13a06:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   13a0a:	2300      	movs	r3, #0
   13a0c:	f7ec ff96 	bl	93c <__aeabi_uldivmod>
}
   13a10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13a14:	4602      	mov	r2, r0
   13a16:	460b      	mov	r3, r1
   13a18:	4802      	ldr	r0, [pc, #8]	; (13a24 <rpa_timeout+0x38>)
   13a1a:	4903      	ldr	r1, [pc, #12]	; (13a28 <rpa_timeout+0x3c>)
   13a1c:	f005 be14 	b.w	19648 <k_delayed_work_submit_to_queue>
   13a20:	200024a8 	.word	0x200024a8
   13a24:	20001348 	.word	0x20001348
   13a28:	20001218 	.word	0x20001218

00013a2c <ull_filter_rl_find>:
{
   13a2c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13a30:	468b      	mov	fp, r1
	if (free) {
   13a32:	4616      	mov	r6, r2
   13a34:	b10a      	cbz	r2, 13a3a <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   13a36:	23ff      	movs	r3, #255	; 0xff
   13a38:	7013      	strb	r3, [r2, #0]
   13a3a:	f8df 8064 	ldr.w	r8, [pc, #100]	; 13aa0 <ull_filter_rl_find+0x74>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   13a3e:	f000 0901 	and.w	r9, r0, #1
   13a42:	f108 0a01 	add.w	sl, r8, #1
{
   13a46:	2400      	movs	r4, #0
   13a48:	e004      	b.n	13a54 <ull_filter_rl_find+0x28>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   13a4a:	454a      	cmp	r2, r9
   13a4c:	d019      	beq.n	13a82 <ull_filter_rl_find+0x56>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   13a4e:	3401      	adds	r4, #1
   13a50:	2c08      	cmp	r4, #8
   13a52:	d012      	beq.n	13a7a <ull_filter_rl_find+0x4e>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   13a54:	eb04 0584 	add.w	r5, r4, r4, lsl #2
   13a58:	00e8      	lsls	r0, r5, #3
   13a5a:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   13a5e:	07d9      	lsls	r1, r3, #31
   13a60:	f3c3 1280 	ubfx	r2, r3, #6, #1
   13a64:	b2e7      	uxtb	r7, r4
   13a66:	d4f0      	bmi.n	13a4a <ull_filter_rl_find+0x1e>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   13a68:	2e00      	cmp	r6, #0
   13a6a:	d0f0      	beq.n	13a4e <ull_filter_rl_find+0x22>
   13a6c:	7833      	ldrb	r3, [r6, #0]
   13a6e:	3401      	adds	r4, #1
   13a70:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   13a72:	bf08      	it	eq
   13a74:	7037      	strbeq	r7, [r6, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   13a76:	2c08      	cmp	r4, #8
   13a78:	d1ec      	bne.n	13a54 <ull_filter_rl_find+0x28>
	return FILTER_IDX_NONE;
   13a7a:	27ff      	movs	r7, #255	; 0xff
}
   13a7c:	4638      	mov	r0, r7
   13a7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   13a82:	4450      	add	r0, sl
   13a84:	2206      	movs	r2, #6
   13a86:	4659      	mov	r1, fp
   13a88:	f007 ffbf 	bl	1ba0a <memcmp>
   13a8c:	2800      	cmp	r0, #0
   13a8e:	d0f5      	beq.n	13a7c <ull_filter_rl_find+0x50>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   13a90:	2e00      	cmp	r6, #0
   13a92:	d0dc      	beq.n	13a4e <ull_filter_rl_find+0x22>
   13a94:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   13a98:	07db      	lsls	r3, r3, #31
   13a9a:	d4d8      	bmi.n	13a4e <ull_filter_rl_find+0x22>
   13a9c:	e7e6      	b.n	13a6c <ull_filter_rl_find+0x40>
   13a9e:	bf00      	nop
   13aa0:	20002334 	.word	0x20002334

00013aa4 <ll_wl_add>:
{
   13aa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13aa8:	4605      	mov	r5, r0
   13aaa:	b082      	sub	sp, #8
	if (ull_adv_filter_pol_get(0)) {
   13aac:	2000      	movs	r0, #0
   13aae:	f7fb ff9d 	bl	f9ec <ull_adv_filter_pol_get>
   13ab2:	2800      	cmp	r0, #0
   13ab4:	d13b      	bne.n	13b2e <ll_wl_add+0x8a>
   13ab6:	4604      	mov	r4, r0
	if (addr->type == ADDR_TYPE_ANON) {
   13ab8:	7828      	ldrb	r0, [r5, #0]
   13aba:	28ff      	cmp	r0, #255	; 0xff
   13abc:	d030      	beq.n	13b20 <ll_wl_add+0x7c>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   13abe:	f105 0801 	add.w	r8, r5, #1
   13ac2:	4641      	mov	r1, r8
   13ac4:	f10d 0207 	add.w	r2, sp, #7
   13ac8:	f7ff fbe6 	bl	13298 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   13acc:	2807      	cmp	r0, #7
   13ace:	d923      	bls.n	13b18 <ll_wl_add+0x74>
	} else if (j >= ARRAY_SIZE(wl)) {
   13ad0:	f89d 6007 	ldrb.w	r6, [sp, #7]
   13ad4:	2e07      	cmp	r6, #7
   13ad6:	d83b      	bhi.n	13b50 <ll_wl_add+0xac>
	wl[i].id_addr_type = id_addr->type & 0x1;
   13ad8:	4f1f      	ldr	r7, [pc, #124]	; (13b58 <ll_wl_add+0xb4>)
   13ada:	782a      	ldrb	r2, [r5, #0]
   13adc:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   13ae0:	eb07 00c6 	add.w	r0, r7, r6, lsl #3
	wl[i].id_addr_type = id_addr->type & 0x1;
   13ae4:	f362 0341 	bfi	r3, r2, #1, #1
   13ae8:	4641      	mov	r1, r8
   13aea:	2206      	movs	r2, #6
   13aec:	3002      	adds	r0, #2
   13aee:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
   13af2:	f007 ff9a 	bl	1ba2a <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13af6:	7828      	ldrb	r0, [r5, #0]
   13af8:	4622      	mov	r2, r4
   13afa:	4641      	mov	r1, r8
   13afc:	f7ff ff96 	bl	13a2c <ull_filter_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   13b00:	2807      	cmp	r0, #7
   13b02:	d918      	bls.n	13b36 <ll_wl_add+0x92>
		wl[i].rl_idx = FILTER_IDX_NONE;
   13b04:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
   13b08:	22ff      	movs	r2, #255	; 0xff
   13b0a:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   13b0c:	f817 3036 	ldrb.w	r3, [r7, r6, lsl #3]
   13b10:	f043 0301 	orr.w	r3, r3, #1
   13b14:	f807 3036 	strb.w	r3, [r7, r6, lsl #3]
	return 0;
   13b18:	2000      	movs	r0, #0
}
   13b1a:	b002      	add	sp, #8
   13b1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 1U;
   13b20:	4b0e      	ldr	r3, [pc, #56]	; (13b5c <ll_wl_add+0xb8>)
   13b22:	2201      	movs	r2, #1
		return 0;
   13b24:	4620      	mov	r0, r4
		wl_anon = 1U;
   13b26:	701a      	strb	r2, [r3, #0]
}
   13b28:	b002      	add	sp, #8
   13b2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13b2e:	200c      	movs	r0, #12
}
   13b30:	b002      	add	sp, #8
   13b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rl[j].wl = 1U;
   13b36:	490a      	ldr	r1, [pc, #40]	; (13b60 <ll_wl_add+0xbc>)
   13b38:	eb00 0480 	add.w	r4, r0, r0, lsl #2
		wl[i].rl_idx = j;
   13b3c:	eb07 02c6 	add.w	r2, r7, r6, lsl #3
		rl[j].wl = 1U;
   13b40:	f811 3034 	ldrb.w	r3, [r1, r4, lsl #3]
		wl[i].rl_idx = j;
   13b44:	7050      	strb	r0, [r2, #1]
		rl[j].wl = 1U;
   13b46:	f043 0320 	orr.w	r3, r3, #32
   13b4a:	f801 3034 	strb.w	r3, [r1, r4, lsl #3]
   13b4e:	e7dd      	b.n	13b0c <ll_wl_add+0x68>
   13b50:	2007      	movs	r0, #7
}
   13b52:	b002      	add	sp, #8
   13b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13b58:	200024ac 	.word	0x200024ac
   13b5c:	200029cf 	.word	0x200029cf
   13b60:	20002334 	.word	0x20002334

00013b64 <ll_rl_add>:
{
   13b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13b68:	4606      	mov	r6, r0
   13b6a:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   13b6c:	2000      	movs	r0, #0
{
   13b6e:	460d      	mov	r5, r1
   13b70:	4690      	mov	r8, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   13b72:	f7fb ff2f 	bl	f9d4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   13b76:	2800      	cmp	r0, #0
   13b78:	f040 8085 	bne.w	13c86 <ll_rl_add+0x122>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   13b7c:	46b1      	mov	r9, r6
   13b7e:	f10d 020f 	add.w	r2, sp, #15
   13b82:	f819 0b01 	ldrb.w	r0, [r9], #1
   13b86:	4649      	mov	r1, r9
   13b88:	f7ff ff50 	bl	13a2c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   13b8c:	2807      	cmp	r0, #7
   13b8e:	f240 808b 	bls.w	13ca8 <ll_rl_add+0x144>
	} else if (j >= ARRAY_SIZE(rl)) {
   13b92:	f89d 700f 	ldrb.w	r7, [sp, #15]
   13b96:	2f07      	cmp	r7, #7
   13b98:	d879      	bhi.n	13c8e <ll_rl_add+0x12a>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   13b9a:	eb07 0387 	add.w	r3, r7, r7, lsl #2
   13b9e:	4c4c      	ldr	r4, [pc, #304]	; (13cd0 <ll_rl_add+0x16c>)
   13ba0:	00db      	lsls	r3, r3, #3
   13ba2:	1c58      	adds	r0, r3, #1
	rl[i].id_addr_type = id_addr->type & 0x1;
   13ba4:	eb07 0a87 	add.w	sl, r7, r7, lsl #2
   13ba8:	2206      	movs	r2, #6
   13baa:	4649      	mov	r1, r9
   13bac:	4420      	add	r0, r4
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   13bae:	9301      	str	r3, [sp, #4]
   13bb0:	f007 ff3b 	bl	1ba2a <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   13bb4:	7831      	ldrb	r1, [r6, #0]
   13bb6:	f814 203a 	ldrb.w	r2, [r4, sl, lsl #3]
   13bba:	ea4f 0bca 	mov.w	fp, sl, lsl #3
   13bbe:	f361 1286 	bfi	r2, r1, #6, #1
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   13bc2:	4628      	mov	r0, r5
   13bc4:	2110      	movs	r1, #16
	rl[i].id_addr_type = id_addr->type & 0x1;
   13bc6:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   13bca:	f7f7 fb63 	bl	b294 <mem_nz>
   13bce:	f814 200b 	ldrb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   13bd2:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   13bd4:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   13bd8:	4640      	mov	r0, r8
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   13bda:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   13bde:	f7f7 fb59 	bl	b294 <mem_nz>
   13be2:	f814 200b 	ldrb.w	r2, [r4, fp]
	if (rl[i].pirk) {
   13be6:	9b01      	ldr	r3, [sp, #4]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   13be8:	f000 0001 	and.w	r0, r0, #1
   13bec:	f360 02c3 	bfi	r2, r0, #3, #1
	if (rl[i].pirk) {
   13bf0:	f012 0f04 	tst.w	r2, #4
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   13bf4:	f804 200b 	strb.w	r2, [r4, fp]
	rl[i].id_addr_type = id_addr->type & 0x1;
   13bf8:	eb04 0aca 	add.w	sl, r4, sl, lsl #3
   13bfc:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   13c00:	d01a      	beq.n	13c38 <ll_rl_add+0xd4>
		rl[i].pirk_idx = peer_irk_count;
   13c02:	f8df e0d8 	ldr.w	lr, [pc, #216]	; 13cdc <ll_rl_add+0x178>
		peer_irk_rl_ids[peer_irk_count] = i;
   13c06:	f8df c0d8 	ldr.w	ip, [pc, #216]	; 13ce0 <ll_rl_add+0x17c>
		rl[i].pirk_idx = peer_irk_count;
   13c0a:	f89e 1000 	ldrb.w	r1, [lr]
   13c0e:	4a31      	ldr	r2, [pc, #196]	; (13cd4 <ll_rl_add+0x170>)
		peer_irk_rl_ids[peer_irk_count] = i;
   13c10:	f80c 7001 	strb.w	r7, [ip, r1]
		rl[i].pirk_idx = peer_irk_count;
   13c14:	f88a 1017 	strb.w	r1, [sl, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   13c18:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   13c1c:	3101      	adds	r1, #1
	psrc += length - 1;
   13c1e:	f105 020f 	add.w	r2, r5, #15
   13c22:	f88e 1000 	strb.w	r1, [lr]
	for (; length > 0; length--) {
   13c26:	f10c 3cff 	add.w	ip, ip, #4294967295	; 0xffffffff
   13c2a:	3d01      	subs	r5, #1
		*pdst++ = *psrc--;
   13c2c:	f812 1901 	ldrb.w	r1, [r2], #-1
   13c30:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   13c34:	42aa      	cmp	r2, r5
   13c36:	d1f9      	bne.n	13c2c <ll_rl_add+0xc8>
	if (rl[i].lirk) {
   13c38:	2800      	cmp	r0, #0
   13c3a:	d139      	bne.n	13cb0 <ll_rl_add+0x14c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   13c3c:	f103 0018 	add.w	r0, r3, #24
   13c40:	2206      	movs	r2, #6
   13c42:	2100      	movs	r1, #0
   13c44:	4420      	add	r0, r4
   13c46:	f007 ff1b 	bl	1ba80 <memset>
	rl[i].dev = 0U;
   13c4a:	eb0b 0307 	add.w	r3, fp, r7
   13c4e:	00dd      	lsls	r5, r3, #3
	rl[i].rpas_ready = 0U;
   13c50:	f814 3033 	ldrb.w	r3, [r4, r3, lsl #3]
   13c54:	f023 0312 	bic.w	r3, r3, #18
   13c58:	5563      	strb	r3, [r4, r5]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   13c5a:	4649      	mov	r1, r9
   13c5c:	7830      	ldrb	r0, [r6, #0]
   13c5e:	2200      	movs	r2, #0
   13c60:	f7ff fb1a 	bl	13298 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   13c64:	2807      	cmp	r0, #7
   13c66:	d916      	bls.n	13c96 <ll_rl_add+0x132>
		rl[i].wl = 0U;
   13c68:	5d63      	ldrb	r3, [r4, r5]
   13c6a:	f36f 1345 	bfc	r3, #5, #1
   13c6e:	5563      	strb	r3, [r4, r5]
	rl[i].taken = 1U;
   13c70:	445f      	add	r7, fp
	return 0;
   13c72:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   13c74:	f814 3037 	ldrb.w	r3, [r4, r7, lsl #3]
   13c78:	f043 0301 	orr.w	r3, r3, #1
   13c7c:	f804 3037 	strb.w	r3, [r4, r7, lsl #3]
}
   13c80:	b005      	add	sp, #20
   13c82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13c86:	200c      	movs	r0, #12
}
   13c88:	b005      	add	sp, #20
   13c8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   13c8e:	2007      	movs	r0, #7
}
   13c90:	b005      	add	sp, #20
   13c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl[j].rl_idx = i;
   13c96:	4a10      	ldr	r2, [pc, #64]	; (13cd8 <ll_rl_add+0x174>)
		rl[i].wl = 1U;
   13c98:	5d63      	ldrb	r3, [r4, r5]
		wl[j].rl_idx = i;
   13c9a:	eb02 00c0 	add.w	r0, r2, r0, lsl #3
		rl[i].wl = 1U;
   13c9e:	f043 0320 	orr.w	r3, r3, #32
   13ca2:	5563      	strb	r3, [r4, r5]
		wl[j].rl_idx = i;
   13ca4:	7047      	strb	r7, [r0, #1]
		rl[i].wl = 1U;
   13ca6:	e7e3      	b.n	13c70 <ll_rl_add+0x10c>
		return BT_HCI_ERR_INVALID_PARAM;
   13ca8:	2012      	movs	r0, #18
}
   13caa:	b005      	add	sp, #20
   13cac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   13cb0:	1dd8      	adds	r0, r3, #7
   13cb2:	4641      	mov	r1, r8
   13cb4:	2210      	movs	r2, #16
   13cb6:	4420      	add	r0, r4
   13cb8:	9301      	str	r3, [sp, #4]
   13cba:	f007 feb6 	bl	1ba2a <memcpy>
		rl[i].local_rpa = NULL;
   13cbe:	eb0b 0207 	add.w	r2, fp, r7
   13cc2:	eb04 02c2 	add.w	r2, r4, r2, lsl #3
   13cc6:	2100      	movs	r1, #0
   13cc8:	9b01      	ldr	r3, [sp, #4]
   13cca:	6251      	str	r1, [r2, #36]	; 0x24
   13ccc:	e7b6      	b.n	13c3c <ll_rl_add+0xd8>
   13cce:	bf00      	nop
   13cd0:	20002334 	.word	0x20002334
   13cd4:	200022b4 	.word	0x200022b4
   13cd8:	200024ac 	.word	0x200024ac
   13cdc:	200029cd 	.word	0x200029cd
   13ce0:	200022ac 	.word	0x200022ac

00013ce4 <ll_rl_remove>:
{
   13ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13ce8:	4605      	mov	r5, r0
   13cea:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   13cec:	2000      	movs	r0, #0
   13cee:	f7fb fe71 	bl	f9d4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   13cf2:	2800      	cmp	r0, #0
   13cf4:	d13e      	bne.n	13d74 <ll_rl_remove+0x90>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13cf6:	462f      	mov	r7, r5
   13cf8:	4602      	mov	r2, r0
   13cfa:	4604      	mov	r4, r0
   13cfc:	f817 0b01 	ldrb.w	r0, [r7], #1
   13d00:	4639      	mov	r1, r7
   13d02:	f7ff fe93 	bl	13a2c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   13d06:	2807      	cmp	r0, #7
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13d08:	4606      	mov	r6, r0
	if (i < ARRAY_SIZE(rl)) {
   13d0a:	d903      	bls.n	13d14 <ll_rl_remove+0x30>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13d0c:	2002      	movs	r0, #2
}
   13d0e:	b003      	add	sp, #12
   13d10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (rl[i].pirk) {
   13d14:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 13ddc <ll_rl_remove+0xf8>
   13d18:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   13d1c:	eb08 01c3 	add.w	r1, r8, r3, lsl #3
   13d20:	f818 3033 	ldrb.w	r3, [r8, r3, lsl #3]
   13d24:	075b      	lsls	r3, r3, #29
   13d26:	ea4f 0980 	mov.w	r9, r0, lsl #2
   13d2a:	d50c      	bpl.n	13d46 <ll_rl_remove+0x62>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   13d2c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 13de0 <ll_rl_remove+0xfc>
   13d30:	f89a 2000 	ldrb.w	r2, [sl]
   13d34:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   13d36:	f012 0bff 	ands.w	fp, r2, #255	; 0xff
   13d3a:	d01f      	beq.n	13d7c <ll_rl_remove+0x98>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   13d3c:	7dcb      	ldrb	r3, [r1, #23]
			if (pj && pi != pj) {
   13d3e:	455b      	cmp	r3, fp
   13d40:	d11e      	bne.n	13d80 <ll_rl_remove+0x9c>
			peer_irk_count--;
   13d42:	f88a 2000 	strb.w	r2, [sl]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   13d46:	7828      	ldrb	r0, [r5, #0]
   13d48:	4639      	mov	r1, r7
   13d4a:	2200      	movs	r2, #0
   13d4c:	f7ff faa4 	bl	13298 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   13d50:	2807      	cmp	r0, #7
   13d52:	d804      	bhi.n	13d5e <ll_rl_remove+0x7a>
			wl[j].rl_idx = FILTER_IDX_NONE;
   13d54:	4b1e      	ldr	r3, [pc, #120]	; (13dd0 <ll_rl_remove+0xec>)
   13d56:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   13d5a:	23ff      	movs	r3, #255	; 0xff
   13d5c:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0U;
   13d5e:	444e      	add	r6, r9
		return 0;
   13d60:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   13d62:	f818 3036 	ldrb.w	r3, [r8, r6, lsl #3]
   13d66:	f36f 0300 	bfc	r3, #0, #1
   13d6a:	f808 3036 	strb.w	r3, [r8, r6, lsl #3]
}
   13d6e:	b003      	add	sp, #12
   13d70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13d74:	200c      	movs	r0, #12
}
   13d76:	b003      	add	sp, #12
   13d78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13d7c:	465a      	mov	r2, fp
   13d7e:	e7e0      	b.n	13d42 <ll_rl_remove+0x5e>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   13d80:	4814      	ldr	r0, [pc, #80]	; (13dd4 <ll_rl_remove+0xf0>)
   13d82:	9301      	str	r3, [sp, #4]
   13d84:	eb00 110b 	add.w	r1, r0, fp, lsl #4
   13d88:	2210      	movs	r2, #16
   13d8a:	eb00 1003 	add.w	r0, r0, r3, lsl #4
   13d8e:	f007 fe4c 	bl	1ba2a <memcpy>
   13d92:	9b01      	ldr	r3, [sp, #4]
					if (rl[k].taken && rl[k].pirk &&
   13d94:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   13d98:	eb08 01c2 	add.w	r1, r8, r2, lsl #3
   13d9c:	f818 2032 	ldrb.w	r2, [r8, r2, lsl #3]
   13da0:	f012 0f01 	tst.w	r2, #1
   13da4:	b2e0      	uxtb	r0, r4
   13da6:	f104 0401 	add.w	r4, r4, #1
   13daa:	d004      	beq.n	13db6 <ll_rl_remove+0xd2>
   13dac:	0752      	lsls	r2, r2, #29
   13dae:	d502      	bpl.n	13db6 <ll_rl_remove+0xd2>
   13db0:	7dca      	ldrb	r2, [r1, #23]
   13db2:	455a      	cmp	r2, fp
   13db4:	d005      	beq.n	13dc2 <ll_rl_remove+0xde>
				for (k = 0U;
   13db6:	2c08      	cmp	r4, #8
   13db8:	d1ec      	bne.n	13d94 <ll_rl_remove+0xb0>
   13dba:	f89a 2000 	ldrb.w	r2, [sl]
   13dbe:	3a01      	subs	r2, #1
   13dc0:	e7bf      	b.n	13d42 <ll_rl_remove+0x5e>
						peer_irk_rl_ids[pi] = k;
   13dc2:	4c05      	ldr	r4, [pc, #20]	; (13dd8 <ll_rl_remove+0xf4>)
   13dc4:	f89a 2000 	ldrb.w	r2, [sl]
   13dc8:	54e0      	strb	r0, [r4, r3]
						rl[k].pirk_idx = pi;
   13dca:	75cb      	strb	r3, [r1, #23]
						break;
   13dcc:	3a01      	subs	r2, #1
   13dce:	e7b8      	b.n	13d42 <ll_rl_remove+0x5e>
   13dd0:	200024ac 	.word	0x200024ac
   13dd4:	200022b4 	.word	0x200022b4
   13dd8:	200022ac 	.word	0x200022ac
   13ddc:	20002334 	.word	0x20002334
   13de0:	200029cd 	.word	0x200029cd

00013de4 <ll_rl_crpa_set>:
{
   13de4:	b538      	push	{r3, r4, r5, lr}
   13de6:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   13de8:	795b      	ldrb	r3, [r3, #5]
   13dea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   13dee:	2b40      	cmp	r3, #64	; 0x40
   13df0:	d000      	beq.n	13df4 <ll_rl_crpa_set+0x10>
}
   13df2:	bd38      	pop	{r3, r4, r5, pc}
		if (id_addr) {
   13df4:	b119      	cbz	r1, 13dfe <ll_rl_crpa_set+0x1a>
			rl_idx = ull_filter_rl_find(id_addr_type, id_addr, NULL);
   13df6:	2200      	movs	r2, #0
   13df8:	f7ff fe18 	bl	13a2c <ull_filter_rl_find>
   13dfc:	4602      	mov	r2, r0
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   13dfe:	2a07      	cmp	r2, #7
   13e00:	d8f7      	bhi.n	13df2 <ll_rl_crpa_set+0xe>
   13e02:	4b09      	ldr	r3, [pc, #36]	; (13e28 <ll_rl_crpa_set+0x44>)
   13e04:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   13e08:	f813 1031 	ldrb.w	r1, [r3, r1, lsl #3]
   13e0c:	07c9      	lsls	r1, r1, #31
   13e0e:	d5f0      	bpl.n	13df2 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   13e10:	2118      	movs	r1, #24
   13e12:	2028      	movs	r0, #40	; 0x28
   13e14:	fb10 1002 	smlabb	r0, r0, r2, r1
   13e18:	4418      	add	r0, r3
   13e1a:	4621      	mov	r1, r4
   13e1c:	2206      	movs	r2, #6
}
   13e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   13e22:	f007 be02 	b.w	1ba2a <memcpy>
   13e26:	bf00      	nop
   13e28:	20002334 	.word	0x20002334

00013e2c <ll_rl_crpa_get>:
{
   13e2c:	b538      	push	{r3, r4, r5, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13e2e:	4603      	mov	r3, r0
{
   13e30:	460d      	mov	r5, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13e32:	f813 0b01 	ldrb.w	r0, [r3], #1
   13e36:	2200      	movs	r2, #0
   13e38:	4619      	mov	r1, r3
   13e3a:	f7ff fdf7 	bl	13a2c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   13e3e:	2807      	cmp	r0, #7
   13e40:	d901      	bls.n	13e46 <ll_rl_crpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13e42:	2002      	movs	r0, #2
}
   13e44:	bd38      	pop	{r3, r4, r5, pc}
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   13e46:	4c09      	ldr	r4, [pc, #36]	; (13e6c <ll_rl_crpa_get+0x40>)
   13e48:	2328      	movs	r3, #40	; 0x28
   13e4a:	2218      	movs	r2, #24
   13e4c:	fb13 2000 	smlabb	r0, r3, r0, r2
   13e50:	4404      	add	r4, r0
   13e52:	4620      	mov	r0, r4
   13e54:	2106      	movs	r1, #6
   13e56:	f7f7 fa1d 	bl	b294 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   13e5a:	2800      	cmp	r0, #0
   13e5c:	d0f1      	beq.n	13e42 <ll_rl_crpa_get+0x16>
   13e5e:	4621      	mov	r1, r4
   13e60:	4628      	mov	r0, r5
   13e62:	2206      	movs	r2, #6
   13e64:	f007 fde1 	bl	1ba2a <memcpy>
		return 0;
   13e68:	2000      	movs	r0, #0
}
   13e6a:	bd38      	pop	{r3, r4, r5, pc}
   13e6c:	20002334 	.word	0x20002334

00013e70 <ll_rl_lrpa_get>:
{
   13e70:	b510      	push	{r4, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13e72:	4603      	mov	r3, r0
{
   13e74:	460c      	mov	r4, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13e76:	f813 0b01 	ldrb.w	r0, [r3], #1
   13e7a:	2200      	movs	r2, #0
   13e7c:	4619      	mov	r1, r3
   13e7e:	f7ff fdd5 	bl	13a2c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   13e82:	2807      	cmp	r0, #7
   13e84:	d901      	bls.n	13e8a <ll_rl_lrpa_get+0x1a>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13e86:	2002      	movs	r0, #2
}
   13e88:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   13e8a:	4b06      	ldr	r3, [pc, #24]	; (13ea4 <ll_rl_lrpa_get+0x34>)
   13e8c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13e90:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   13e94:	2206      	movs	r2, #6
   13e96:	6a59      	ldr	r1, [r3, #36]	; 0x24
   13e98:	4620      	mov	r0, r4
   13e9a:	f007 fdc6 	bl	1ba2a <memcpy>
		return 0;
   13e9e:	2000      	movs	r0, #0
}
   13ea0:	bd10      	pop	{r4, pc}
   13ea2:	bf00      	nop
   13ea4:	20002334 	.word	0x20002334

00013ea8 <ll_priv_mode_set>:
{
   13ea8:	b570      	push	{r4, r5, r6, lr}
   13eaa:	4605      	mov	r5, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   13eac:	2000      	movs	r0, #0
{
   13eae:	460e      	mov	r6, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   13eb0:	f7fb fd90 	bl	f9d4 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   13eb4:	b968      	cbnz	r0, 13ed2 <ll_priv_mode_set+0x2a>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   13eb6:	4629      	mov	r1, r5
   13eb8:	4602      	mov	r2, r0
   13eba:	4604      	mov	r4, r0
   13ebc:	f811 0b01 	ldrb.w	r0, [r1], #1
   13ec0:	f7ff fdb4 	bl	13a2c <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   13ec4:	2807      	cmp	r0, #7
   13ec6:	d81c      	bhi.n	13f02 <ll_priv_mode_set+0x5a>
		switch (mode) {
   13ec8:	b186      	cbz	r6, 13eec <ll_priv_mode_set+0x44>
   13eca:	2e01      	cmp	r6, #1
   13ecc:	d003      	beq.n	13ed6 <ll_priv_mode_set+0x2e>
   13ece:	2012      	movs	r0, #18
}
   13ed0:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   13ed2:	200c      	movs	r0, #12
}
   13ed4:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 1U;
   13ed6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   13eda:	490b      	ldr	r1, [pc, #44]	; (13f08 <ll_priv_mode_set+0x60>)
   13edc:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   13ee0:	f042 0210 	orr.w	r2, r2, #16
   13ee4:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	return 0;
   13ee8:	4620      	mov	r0, r4
}
   13eea:	bd70      	pop	{r4, r5, r6, pc}
			rl[i].dev = 0U;
   13eec:	4b06      	ldr	r3, [pc, #24]	; (13f08 <ll_priv_mode_set+0x60>)
   13eee:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   13ef2:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   13ef6:	f366 1204 	bfi	r2, r6, #4, #1
   13efa:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
	return 0;
   13efe:	4630      	mov	r0, r6
}
   13f00:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   13f02:	2002      	movs	r0, #2
}
   13f04:	bd70      	pop	{r4, r5, r6, pc}
   13f06:	bf00      	nop
   13f08:	20002334 	.word	0x20002334

00013f0c <ull_filter_reset>:
	wl_anon = 0U;
   13f0c:	4a31      	ldr	r2, [pc, #196]	; (13fd4 <ull_filter_reset+0xc8>)
   13f0e:	4932      	ldr	r1, [pc, #200]	; (13fd8 <ull_filter_reset+0xcc>)
{
   13f10:	b4f0      	push	{r4, r5, r6, r7}
	wl_anon = 0U;
   13f12:	2300      	movs	r3, #0
   13f14:	4c31      	ldr	r4, [pc, #196]	; (13fdc <ull_filter_reset+0xd0>)
   13f16:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   13f18:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
   13f1c:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   13f1e:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   13f20:	eb02 0582 	add.w	r5, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   13f24:	d805      	bhi.n	13f32 <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   13f26:	f811 2035 	ldrb.w	r2, [r1, r5, lsl #3]
   13f2a:	f36f 1245 	bfc	r2, #5, #1
   13f2e:	f801 2035 	strb.w	r2, [r1, r5, lsl #3]
		wl[i].taken = 0U;
   13f32:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
   13f36:	f36f 0200 	bfc	r2, #0, #1
   13f3a:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   13f3e:	3301      	adds	r3, #1
   13f40:	2b08      	cmp	r3, #8
   13f42:	d1e9      	bne.n	13f18 <ull_filter_reset+0xc>
		rl[i].taken = 0U;
   13f44:	780f      	ldrb	r7, [r1, #0]
   13f46:	f891 5028 	ldrb.w	r5, [r1, #40]	; 0x28
   13f4a:	f891 4050 	ldrb.w	r4, [r1, #80]	; 0x50
   13f4e:	f891 2078 	ldrb.w	r2, [r1, #120]	; 0x78
   13f52:	f891 60a0 	ldrb.w	r6, [r1, #160]	; 0xa0
	rl_enable = 0U;
   13f56:	2300      	movs	r3, #0
		rl[i].taken = 0U;
   13f58:	f363 0700 	bfi	r7, r3, #0, #1
   13f5c:	700f      	strb	r7, [r1, #0]
	rl_enable = 0U;
   13f5e:	4f20      	ldr	r7, [pc, #128]	; (13fe0 <ull_filter_reset+0xd4>)
		rl[i].taken = 0U;
   13f60:	f363 0500 	bfi	r5, r3, #0, #1
   13f64:	f363 0400 	bfi	r4, r3, #0, #1
   13f68:	f363 0200 	bfi	r2, r3, #0, #1
	rl_enable = 0U;
   13f6c:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   13f6e:	f881 5028 	strb.w	r5, [r1, #40]	; 0x28
	peer_irk_count = 0U;
   13f72:	4f1c      	ldr	r7, [pc, #112]	; (13fe4 <ull_filter_reset+0xd8>)
		rl[i].taken = 0U;
   13f74:	f891 50c8 	ldrb.w	r5, [r1, #200]	; 0xc8
   13f78:	f881 4050 	strb.w	r4, [r1, #80]	; 0x50
   13f7c:	f881 2078 	strb.w	r2, [r1, #120]	; 0x78
   13f80:	f891 40f0 	ldrb.w	r4, [r1, #240]	; 0xf0
   13f84:	f891 2118 	ldrb.w	r2, [r1, #280]	; 0x118
	peer_irk_count = 0U;
   13f88:	703b      	strb	r3, [r7, #0]
		rl[i].taken = 0U;
   13f8a:	f363 0600 	bfi	r6, r3, #0, #1
   13f8e:	f363 0500 	bfi	r5, r3, #0, #1
   13f92:	f363 0400 	bfi	r4, r3, #0, #1
   13f96:	f363 0200 	bfi	r2, r3, #0, #1
   13f9a:	f881 60a0 	strb.w	r6, [r1, #160]	; 0xa0
	rpa_last_ms = -1;
   13f9e:	4b12      	ldr	r3, [pc, #72]	; (13fe8 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   13fa0:	4e12      	ldr	r6, [pc, #72]	; (13fec <ull_filter_reset+0xe0>)
   13fa2:	4f13      	ldr	r7, [pc, #76]	; (13ff0 <ull_filter_reset+0xe4>)
		rl[i].taken = 0U;
   13fa4:	f881 50c8 	strb.w	r5, [r1, #200]	; 0xc8
   13fa8:	f881 40f0 	strb.w	r4, [r1, #240]	; 0xf0
	rpa_last_ms = -1;
   13fac:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   13fb0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
   13fb4:	e9c3 4500 	strd	r4, r5, [r3]
		rl[i].taken = 0U;
   13fb8:	f881 2118 	strb.w	r2, [r1, #280]	; 0x118
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   13fbc:	6037      	str	r7, [r6, #0]
	if (init) {
   13fbe:	b120      	cbz	r0, 13fca <ull_filter_reset+0xbe>
}
   13fc0:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   13fc2:	490c      	ldr	r1, [pc, #48]	; (13ff4 <ull_filter_reset+0xe8>)
   13fc4:	480c      	ldr	r0, [pc, #48]	; (13ff8 <ull_filter_reset+0xec>)
   13fc6:	f00a bff9 	b.w	1efbc <k_delayed_work_init>
}
   13fca:	bcf0      	pop	{r4, r5, r6, r7}
		k_delayed_work_cancel(&rpa_work);
   13fcc:	480a      	ldr	r0, [pc, #40]	; (13ff8 <ull_filter_reset+0xec>)
   13fce:	f00a bffd 	b.w	1efcc <k_delayed_work_cancel>
   13fd2:	bf00      	nop
   13fd4:	200029cf 	.word	0x200029cf
   13fd8:	20002334 	.word	0x20002334
   13fdc:	200024ac 	.word	0x200024ac
   13fe0:	200029ce 	.word	0x200029ce
   13fe4:	200029cd 	.word	0x200029cd
   13fe8:	20001210 	.word	0x20001210
   13fec:	200024a8 	.word	0x200024a8
   13ff0:	000dbba0 	.word	0x000dbba0
   13ff4:	000139ed 	.word	0x000139ed
   13ff8:	20001218 	.word	0x20001218

00013ffc <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   13ffc:	2807      	cmp	r0, #7
   13ffe:	d807      	bhi.n	14010 <ull_filter_lll_lrpa_used+0x14>
   14000:	4b04      	ldr	r3, [pc, #16]	; (14014 <ull_filter_lll_lrpa_used+0x18>)
   14002:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   14006:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1400a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1400e:	4770      	bx	lr
   14010:	2000      	movs	r0, #0
}
   14012:	4770      	bx	lr
   14014:	20002334 	.word	0x20002334

00014018 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   14018:	4b02      	ldr	r3, [pc, #8]	; (14024 <ull_filter_lll_irks_get+0xc>)
   1401a:	781b      	ldrb	r3, [r3, #0]
   1401c:	7003      	strb	r3, [r0, #0]
}
   1401e:	4802      	ldr	r0, [pc, #8]	; (14028 <ull_filter_lll_irks_get+0x10>)
   14020:	4770      	bx	lr
   14022:	bf00      	nop
   14024:	200029cd 	.word	0x200029cd
   14028:	200022b4 	.word	0x200022b4

0001402c <ull_filter_lll_rl_irk_idx>:
{
   1402c:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1402e:	4b20      	ldr	r3, [pc, #128]	; (140b0 <ull_filter_lll_rl_irk_idx+0x84>)
   14030:	781b      	ldrb	r3, [r3, #0]
   14032:	4283      	cmp	r3, r0
{
   14034:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   14036:	d90c      	bls.n	14052 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   14038:	4b1e      	ldr	r3, [pc, #120]	; (140b4 <ull_filter_lll_rl_irk_idx+0x88>)
   1403a:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1403c:	2c07      	cmp	r4, #7
   1403e:	d819      	bhi.n	14074 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   14040:	4b1d      	ldr	r3, [pc, #116]	; (140b8 <ull_filter_lll_rl_irk_idx+0x8c>)
   14042:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   14046:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1404a:	07db      	lsls	r3, r3, #31
   1404c:	d520      	bpl.n	14090 <ull_filter_lll_rl_irk_idx+0x64>
}
   1404e:	4620      	mov	r0, r4
   14050:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   14052:	4a1a      	ldr	r2, [pc, #104]	; (140bc <ull_filter_lll_rl_irk_idx+0x90>)
   14054:	491a      	ldr	r1, [pc, #104]	; (140c0 <ull_filter_lll_rl_irk_idx+0x94>)
   14056:	481b      	ldr	r0, [pc, #108]	; (140c4 <ull_filter_lll_rl_irk_idx+0x98>)
   14058:	f240 23c6 	movw	r3, #710	; 0x2c6
   1405c:	f005 fecb 	bl	19df6 <printk>
   14060:	4040      	eors	r0, r0
   14062:	f380 8811 	msr	BASEPRI, r0
   14066:	f04f 0003 	mov.w	r0, #3
   1406a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1406c:	4b11      	ldr	r3, [pc, #68]	; (140b4 <ull_filter_lll_rl_irk_idx+0x88>)
   1406e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   14070:	2c07      	cmp	r4, #7
   14072:	d9e5      	bls.n	14040 <ull_filter_lll_rl_irk_idx+0x14>
   14074:	4a11      	ldr	r2, [pc, #68]	; (140bc <ull_filter_lll_rl_irk_idx+0x90>)
   14076:	4914      	ldr	r1, [pc, #80]	; (140c8 <ull_filter_lll_rl_irk_idx+0x9c>)
   14078:	4812      	ldr	r0, [pc, #72]	; (140c4 <ull_filter_lll_rl_irk_idx+0x98>)
   1407a:	f44f 7332 	mov.w	r3, #712	; 0x2c8
   1407e:	f005 feba 	bl	19df6 <printk>
   14082:	4040      	eors	r0, r0
   14084:	f380 8811 	msr	BASEPRI, r0
   14088:	f04f 0003 	mov.w	r0, #3
   1408c:	df02      	svc	2
   1408e:	e7d7      	b.n	14040 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   14090:	4a0a      	ldr	r2, [pc, #40]	; (140bc <ull_filter_lll_rl_irk_idx+0x90>)
   14092:	490e      	ldr	r1, [pc, #56]	; (140cc <ull_filter_lll_rl_irk_idx+0xa0>)
   14094:	480b      	ldr	r0, [pc, #44]	; (140c4 <ull_filter_lll_rl_irk_idx+0x98>)
   14096:	f240 23c9 	movw	r3, #713	; 0x2c9
   1409a:	f005 feac 	bl	19df6 <printk>
   1409e:	4040      	eors	r0, r0
   140a0:	f380 8811 	msr	BASEPRI, r0
   140a4:	f04f 0003 	mov.w	r0, #3
   140a8:	df02      	svc	2
}
   140aa:	4620      	mov	r0, r4
   140ac:	bd10      	pop	{r4, pc}
   140ae:	bf00      	nop
   140b0:	200029cd 	.word	0x200029cd
   140b4:	200022ac 	.word	0x200022ac
   140b8:	20002334 	.word	0x20002334
   140bc:	0002029c 	.word	0x0002029c
   140c0:	00020480 	.word	0x00020480
   140c4:	0001fcdc 	.word	0x0001fcdc
   140c8:	000204a0 	.word	0x000204a0
   140cc:	00020474 	.word	0x00020474

000140d0 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   140d0:	2807      	cmp	r0, #7
   140d2:	d823      	bhi.n	1411c <ull_filter_lll_irk_whitelisted+0x4c>
{
   140d4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   140d6:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   140da:	4e11      	ldr	r6, [pc, #68]	; (14120 <ull_filter_lll_irk_whitelisted+0x50>)
   140dc:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   140e0:	07db      	lsls	r3, r3, #31
   140e2:	4604      	mov	r4, r0
   140e4:	ea4f 0580 	mov.w	r5, r0, lsl #2
   140e8:	d505      	bpl.n	140f6 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   140ea:	442c      	add	r4, r5
   140ec:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   140f0:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   140f4:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   140f6:	4a0b      	ldr	r2, [pc, #44]	; (14124 <ull_filter_lll_irk_whitelisted+0x54>)
   140f8:	490b      	ldr	r1, [pc, #44]	; (14128 <ull_filter_lll_irk_whitelisted+0x58>)
   140fa:	480c      	ldr	r0, [pc, #48]	; (1412c <ull_filter_lll_irk_whitelisted+0x5c>)
   140fc:	f44f 7335 	mov.w	r3, #724	; 0x2d4
   14100:	f005 fe79 	bl	19df6 <printk>
   14104:	4040      	eors	r0, r0
   14106:	f380 8811 	msr	BASEPRI, r0
   1410a:	f04f 0003 	mov.w	r0, #3
   1410e:	df02      	svc	2
	return rl[rl_idx].wl;
   14110:	442c      	add	r4, r5
   14112:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   14116:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1411a:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1411c:	2000      	movs	r0, #0
}
   1411e:	4770      	bx	lr
   14120:	20002334 	.word	0x20002334
   14124:	0002029c 	.word	0x0002029c
   14128:	000202ec 	.word	0x000202ec
   1412c:	0001fcdc 	.word	0x0001fcdc

00014130 <ull_filter_lll_get>:
		return &wl_filter;
   14130:	4a03      	ldr	r2, [pc, #12]	; (14140 <ull_filter_lll_get+0x10>)
   14132:	4b04      	ldr	r3, [pc, #16]	; (14144 <ull_filter_lll_get+0x14>)
}
   14134:	2800      	cmp	r0, #0
   14136:	bf0c      	ite	eq
   14138:	4610      	moveq	r0, r2
   1413a:	4618      	movne	r0, r3
   1413c:	4770      	bx	lr
   1413e:	bf00      	nop
   14140:	20002474 	.word	0x20002474
   14144:	200024ec 	.word	0x200024ec

00014148 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   14148:	4b1c      	ldr	r3, [pc, #112]	; (141bc <ull_filter_lll_rl_addr_allowed+0x74>)
   1414a:	781b      	ldrb	r3, [r3, #0]
   1414c:	b1fb      	cbz	r3, 1418e <ull_filter_lll_rl_addr_allowed+0x46>
   1414e:	7813      	ldrb	r3, [r2, #0]
   14150:	2bff      	cmp	r3, #255	; 0xff
   14152:	d11c      	bne.n	1418e <ull_filter_lll_rl_addr_allowed+0x46>
{
   14154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14158:	4d19      	ldr	r5, [pc, #100]	; (141c0 <ull_filter_lll_rl_addr_allowed+0x78>)
   1415a:	4606      	mov	r6, r0
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1415c:	2300      	movs	r3, #0
   1415e:	1faf      	subs	r7, r5, #6
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   14160:	eb03 0483 	add.w	r4, r3, r3, lsl #2
   14164:	fa5f fe83 	uxtb.w	lr, r3
   14168:	f817 4034 	ldrb.w	r4, [r7, r4, lsl #3]
   1416c:	f014 0001 	ands.w	r0, r4, #1
   14170:	ea4f 0c83 	mov.w	ip, r3, lsl #2
   14174:	d003      	beq.n	1417e <ull_filter_lll_rl_addr_allowed+0x36>
   14176:	f3c4 1480 	ubfx	r4, r4, #6, #1
   1417a:	42b4      	cmp	r4, r6
   1417c:	d009      	beq.n	14192 <ull_filter_lll_rl_addr_allowed+0x4a>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1417e:	3301      	adds	r3, #1
   14180:	2b08      	cmp	r3, #8
   14182:	f105 0528 	add.w	r5, r5, #40	; 0x28
   14186:	d1eb      	bne.n	14160 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   14188:	2001      	movs	r0, #1
}
   1418a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return true;
   1418e:	2001      	movs	r0, #1
}
   14190:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   14192:	1fac      	subs	r4, r5, #6
   14194:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
				if (addr[j] != id_addr[j]) {
   14198:	f814 af01 	ldrb.w	sl, [r4, #1]!
   1419c:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   141a0:	45ca      	cmp	sl, r9
   141a2:	d1ec      	bne.n	1417e <ull_filter_lll_rl_addr_allowed+0x36>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   141a4:	42ac      	cmp	r4, r5
   141a6:	d1f7      	bne.n	14198 <ull_filter_lll_rl_addr_allowed+0x50>
				return !rl[i].pirk || rl[i].dev;
   141a8:	4463      	add	r3, ip
				*rl_idx = i;
   141aa:	f882 e000 	strb.w	lr, [r2]
				return !rl[i].pirk || rl[i].dev;
   141ae:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   141b2:	075a      	lsls	r2, r3, #29
   141b4:	d5e9      	bpl.n	1418a <ull_filter_lll_rl_addr_allowed+0x42>
   141b6:	f3c3 1000 	ubfx	r0, r3, #4, #1
   141ba:	e7e6      	b.n	1418a <ull_filter_lll_rl_addr_allowed+0x42>
   141bc:	200029ce 	.word	0x200029ce
   141c0:	2000233a 	.word	0x2000233a

000141c4 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   141c4:	4b02      	ldr	r3, [pc, #8]	; (141d0 <ull_filter_lll_rl_enabled+0xc>)
   141c6:	7818      	ldrb	r0, [r3, #0]
}
   141c8:	3800      	subs	r0, #0
   141ca:	bf18      	it	ne
   141cc:	2001      	movne	r0, #1
   141ce:	4770      	bx	lr
   141d0:	200029ce 	.word	0x200029ce

000141d4 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   141d4:	4668      	mov	r0, sp
   141d6:	f020 0107 	bic.w	r1, r0, #7
   141da:	468d      	mov	sp, r1
   141dc:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	isr_radio();
   141de:	f001 ff51 	bl	16084 <isr_radio>

	ISR_DIRECT_PM();
   141e2:	f7f1 f97d 	bl	54e0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   141e6:	f7f1 fb0b 	bl	5800 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   141ea:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   141ee:	4685      	mov	sp, r0
   141f0:	4770      	bx	lr
   141f2:	bf00      	nop

000141f4 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   141f4:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   141f6:	4b09      	ldr	r3, [pc, #36]	; (1421c <rtc0_nrf5_isr+0x28>)
   141f8:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   141fc:	b93a      	cbnz	r2, 1420e <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   141fe:	2001      	movs	r0, #1
   14200:	f7f7 f92a 	bl	b458 <mayfly_run>
	(CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	mayfly_run(TICKER_USER_ID_ULL_LOW);
#endif

	DEBUG_TICKER_ISR(0);
}
   14204:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   14208:	2002      	movs	r0, #2
   1420a:	f7f7 b925 	b.w	b458 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1420e:	2000      	movs	r0, #0
   14210:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   14214:	f7f8 fac6 	bl	c7a4 <ticker_trigger>
   14218:	e7f1      	b.n	141fe <rtc0_nrf5_isr+0xa>
   1421a:	bf00      	nop
   1421c:	4000b000 	.word	0x4000b000

00014220 <swi_lll_nrf5_isr>:

static void swi_lll_nrf5_isr(const void *arg)
{
	DEBUG_RADIO_ISR(1);

	mayfly_run(TICKER_USER_ID_LLL);
   14220:	2000      	movs	r0, #0
   14222:	f7f7 b919 	b.w	b458 <mayfly_run>
   14226:	bf00      	nop

00014228 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   14228:	f002 b890 	b.w	1634c <radio_status_reset>

0001422c <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1422c:	2801      	cmp	r0, #1
   1422e:	d800      	bhi.n	14232 <ticker_stop_op_cb+0x6>
   14230:	4770      	bx	lr
{
   14232:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   14234:	4a06      	ldr	r2, [pc, #24]	; (14250 <ticker_stop_op_cb+0x24>)
   14236:	4907      	ldr	r1, [pc, #28]	; (14254 <ticker_stop_op_cb+0x28>)
   14238:	4807      	ldr	r0, [pc, #28]	; (14258 <ticker_stop_op_cb+0x2c>)
   1423a:	f240 238a 	movw	r3, #650	; 0x28a
   1423e:	f005 fdda 	bl	19df6 <printk>
   14242:	4040      	eors	r0, r0
   14244:	f380 8811 	msr	BASEPRI, r0
   14248:	f04f 0003 	mov.w	r0, #3
   1424c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1424e:	bd08      	pop	{r3, pc}
   14250:	000204a8 	.word	0x000204a8
   14254:	000204f0 	.word	0x000204f0
   14258:	0001fcdc 	.word	0x0001fcdc

0001425c <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1425c:	2801      	cmp	r0, #1
   1425e:	d800      	bhi.n	14262 <ticker_start_op_cb+0x6>
   14260:	4770      	bx	lr
{
   14262:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   14264:	4a06      	ldr	r2, [pc, #24]	; (14280 <ticker_start_op_cb+0x24>)
   14266:	4907      	ldr	r1, [pc, #28]	; (14284 <ticker_start_op_cb+0x28>)
   14268:	4807      	ldr	r0, [pc, #28]	; (14288 <ticker_start_op_cb+0x2c>)
   1426a:	f240 2395 	movw	r3, #661	; 0x295
   1426e:	f005 fdc2 	bl	19df6 <printk>
   14272:	4040      	eors	r0, r0
   14274:	f380 8811 	msr	BASEPRI, r0
   14278:	f04f 0003 	mov.w	r0, #3
   1427c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1427e:	bd08      	pop	{r3, pc}
   14280:	000204a8 	.word	0x000204a8
   14284:	000204f0 	.word	0x000204f0
   14288:	0001fcdc 	.word	0x0001fcdc

0001428c <preempt_ticker_start.isra.0>:

static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1428c:	b530      	push	{r4, r5, lr}
	preempt_to = MAX(evt->ticks_active_to_start,
			 evt->ticks_xtal_to_start) -
			 evt->ticks_preempt_to_start;

	/* Setup pre empt timeout */
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1428e:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   14290:	b08b      	sub	sp, #44	; 0x2c
	evt = HDR_LLL2EVT(prepare_param->param);
   14292:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   14294:	4c15      	ldr	r4, [pc, #84]	; (142ec <preempt_ticker_start.isra.0+0x60>)
   14296:	4916      	ldr	r1, [pc, #88]	; (142f0 <preempt_ticker_start.isra.0+0x64>)
   14298:	9208      	str	r2, [sp, #32]
   1429a:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1429e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   142a2:	9206      	str	r2, [sp, #24]
   142a4:	9407      	str	r4, [sp, #28]
   142a6:	9105      	str	r1, [sp, #20]
	preempt_to = MAX(evt->ticks_active_to_start,
   142a8:	e9d3 5400 	ldrd	r5, r4, [r3]
   142ac:	6899      	ldr	r1, [r3, #8]
   142ae:	42a5      	cmp	r5, r4
   142b0:	bf2c      	ite	cs
   142b2:	ebc1 0105 	rsbcs	r1, r1, r5
   142b6:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   142ba:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   142bc:	9100      	str	r1, [sp, #0]
   142be:	4610      	mov	r0, r2
   142c0:	4611      	mov	r1, r2
   142c2:	f7f8 fadd 	bl	c880 <ticker_start>
			   TICKER_NULL_REMAINDER,
			   TICKER_NULL_LAZY,
			   TICKER_NULL_SLOT,
			   preempt_ticker_cb, NULL,
			   ticker_start_op_cb, NULL);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   142c6:	2802      	cmp	r0, #2
   142c8:	d801      	bhi.n	142ce <preempt_ticker_start.isra.0+0x42>
		  (ret == TICKER_STATUS_FAILURE) ||
		  (ret == TICKER_STATUS_BUSY));
}
   142ca:	b00b      	add	sp, #44	; 0x2c
   142cc:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   142ce:	4a09      	ldr	r2, [pc, #36]	; (142f4 <preempt_ticker_start.isra.0+0x68>)
   142d0:	4909      	ldr	r1, [pc, #36]	; (142f8 <preempt_ticker_start.isra.0+0x6c>)
   142d2:	480a      	ldr	r0, [pc, #40]	; (142fc <preempt_ticker_start.isra.0+0x70>)
   142d4:	f240 23b3 	movw	r3, #691	; 0x2b3
   142d8:	f005 fd8d 	bl	19df6 <printk>
   142dc:	4040      	eors	r0, r0
   142de:	f380 8811 	msr	BASEPRI, r0
   142e2:	f04f 0003 	mov.w	r0, #3
   142e6:	df02      	svc	2
}
   142e8:	b00b      	add	sp, #44	; 0x2c
   142ea:	bd30      	pop	{r4, r5, pc}
   142ec:	0001425d 	.word	0x0001425d
   142f0:	00014551 	.word	0x00014551
   142f4:	000204a8 	.word	0x000204a8
   142f8:	00020510 	.word	0x00020510
   142fc:	0001fcdc 	.word	0x0001fcdc

00014300 <prepare>:
{
   14300:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   14304:	b085      	sub	sp, #20
   14306:	4604      	mov	r4, r0
	idx = UINT8_MAX;
   14308:	f04f 0cff 	mov.w	ip, #255	; 0xff
	p = ull_prepare_dequeue_iter(&idx);
   1430c:	f10d 000f 	add.w	r0, sp, #15
{
   14310:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   14314:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   14318:	f88d c00f 	strb.w	ip, [sp, #15]
{
   1431c:	460d      	mov	r5, r1
   1431e:	4616      	mov	r6, r2
   14320:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   14322:	f7fa ff9b 	bl	f25c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   14326:	b918      	cbnz	r0, 14330 <prepare+0x30>
   14328:	e01e      	b.n	14368 <prepare+0x68>
		p = ull_prepare_dequeue_iter(&idx);
   1432a:	f7fa ff97 	bl	f25c <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1432e:	b1d8      	cbz	r0, 14368 <prepare+0x68>
   14330:	f890 3020 	ldrb.w	r3, [r0, #32]
   14334:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   14336:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1433a:	d1f6      	bne.n	1432a <prepare+0x2a>
	if (event.curr.abort_cb || (p && is_resume)) {
   1433c:	4b2d      	ldr	r3, [pc, #180]	; (143f4 <prepare+0xf4>)
   1433e:	689a      	ldr	r2, [r3, #8]
   14340:	b9aa      	cbnz	r2, 1436e <prepare+0x6e>
   14342:	f1b9 0f00 	cmp.w	r9, #0
   14346:	d036      	beq.n	143b6 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   14348:	2201      	movs	r2, #1
   1434a:	9201      	str	r2, [sp, #4]
   1434c:	9700      	str	r7, [sp, #0]
   1434e:	4633      	mov	r3, r6
   14350:	4629      	mov	r1, r5
   14352:	4620      	mov	r0, r4
   14354:	4642      	mov	r2, r8
   14356:	f7fa ff3b 	bl	f1d0 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1435a:	b9d8      	cbnz	r0, 14394 <prepare+0x94>
		return -EINPROGRESS;
   1435c:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   14360:	4620      	mov	r0, r4
   14362:	b005      	add	sp, #20
   14364:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   14368:	4b22      	ldr	r3, [pc, #136]	; (143f4 <prepare+0xf4>)
   1436a:	689a      	ldr	r2, [r3, #8]
   1436c:	b31a      	cbz	r2, 143b6 <prepare+0xb6>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1436e:	e9cd 7900 	strd	r7, r9, [sp]
   14372:	4633      	mov	r3, r6
   14374:	4629      	mov	r1, r5
   14376:	4620      	mov	r0, r4
   14378:	4642      	mov	r2, r8
   1437a:	f7fa ff29 	bl	f1d0 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1437e:	b948      	cbnz	r0, 14394 <prepare+0x94>
		if (is_resume) {
   14380:	f1b9 0f00 	cmp.w	r9, #0
   14384:	d1ea      	bne.n	1435c <prepare+0x5c>
		preempt_ticker_start(prepare_param);
   14386:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1438a:	f8d8 0000 	ldr.w	r0, [r8]
   1438e:	f7ff ff7d 	bl	1428c <preempt_ticker_start.isra.0>
   14392:	e7e3      	b.n	1435c <prepare+0x5c>
		LL_ASSERT(!err);
   14394:	4a18      	ldr	r2, [pc, #96]	; (143f8 <prepare+0xf8>)
   14396:	4919      	ldr	r1, [pc, #100]	; (143fc <prepare+0xfc>)
   14398:	4819      	ldr	r0, [pc, #100]	; (14400 <prepare+0x100>)
   1439a:	f240 232f 	movw	r3, #559	; 0x22f
   1439e:	f005 fd2a 	bl	19df6 <printk>
   143a2:	4040      	eors	r0, r0
   143a4:	f380 8811 	msr	BASEPRI, r0
   143a8:	f04f 0003 	mov.w	r0, #3
   143ac:	df02      	svc	2
		if (is_resume) {
   143ae:	f1b9 0f00 	cmp.w	r9, #0
   143b2:	d1d3      	bne.n	1435c <prepare+0x5c>
   143b4:	e7e7      	b.n	14386 <prepare+0x86>
	event.curr.param = prepare_param->param;
   143b6:	f8d8 200c 	ldr.w	r2, [r8, #12]
   143ba:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   143bc:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   143c0:	4640      	mov	r0, r8
   143c2:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   143c4:	2200      	movs	r2, #0
   143c6:	4b0f      	ldr	r3, [pc, #60]	; (14404 <prepare+0x104>)
   143c8:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   143ca:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   143cc:	4611      	mov	r1, r2
   143ce:	4610      	mov	r0, r2
   143d0:	f7f8 fac2 	bl	c958 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   143d4:	2802      	cmp	r0, #2
   143d6:	d9c3      	bls.n	14360 <prepare+0x60>
   143d8:	4a07      	ldr	r2, [pc, #28]	; (143f8 <prepare+0xf8>)
   143da:	490b      	ldr	r1, [pc, #44]	; (14408 <prepare+0x108>)
   143dc:	4808      	ldr	r0, [pc, #32]	; (14400 <prepare+0x100>)
   143de:	f240 2369 	movw	r3, #617	; 0x269
   143e2:	f005 fd08 	bl	19df6 <printk>
   143e6:	4040      	eors	r0, r0
   143e8:	f380 8811 	msr	BASEPRI, r0
   143ec:	f04f 0003 	mov.w	r0, #3
   143f0:	df02      	svc	2
   143f2:	e7b5      	b.n	14360 <prepare+0x60>
   143f4:	20002524 	.word	0x20002524
   143f8:	000204a8 	.word	0x000204a8
   143fc:	0001fe00 	.word	0x0001fe00
   14400:	0001fcdc 	.word	0x0001fcdc
   14404:	0001422d 	.word	0x0001422d
   14408:	00020510 	.word	0x00020510

0001440c <preempt>:
			     0, &mfy);
	LL_ASSERT(!ret);
}

static void preempt(void *param)
{
   1440c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1440e:	4e4b      	ldr	r6, [pc, #300]	; (1453c <preempt+0x130>)
   14410:	68b3      	ldr	r3, [r6, #8]
{
   14412:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   14414:	b1b3      	cbz	r3, 14444 <preempt+0x38>
   14416:	6833      	ldr	r3, [r6, #0]
   14418:	b1a3      	cbz	r3, 14444 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   1441a:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   1441c:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   14420:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   14424:	f7fa ff1a 	bl	f25c <ull_prepare_dequeue_iter>
	if (!next) {
   14428:	4604      	mov	r4, r0
   1442a:	b158      	cbz	r0, 14444 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1442c:	f894 3020 	ldrb.w	r3, [r4, #32]
   14430:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   14434:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   14438:	d006      	beq.n	14448 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1443a:	f7fa ff0f 	bl	f25c <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1443e:	4604      	mov	r4, r0
   14440:	2800      	cmp	r0, #0
   14442:	d1f3      	bne.n	1442c <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   14444:	b00b      	add	sp, #44	; 0x2c
   14446:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   14448:	ab05      	add	r3, sp, #20
   1444a:	e9d6 2700 	ldrd	r2, r7, [r6]
   1444e:	69e1      	ldr	r1, [r4, #28]
   14450:	68e0      	ldr	r0, [r4, #12]
   14452:	9300      	str	r3, [sp, #0]
   14454:	ab04      	add	r3, sp, #16
   14456:	47b8      	blx	r7
	if (!ret) {
   14458:	4607      	mov	r7, r0
   1445a:	2800      	cmp	r0, #0
   1445c:	d062      	beq.n	14524 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   1445e:	68b3      	ldr	r3, [r6, #8]
   14460:	6831      	ldr	r1, [r6, #0]
   14462:	4628      	mov	r0, r5
   14464:	4798      	blx	r3
	if (ret == -EAGAIN) {
   14466:	f117 0f0b 	cmn.w	r7, #11
   1446a:	d01a      	beq.n	144a2 <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   1446c:	3748      	adds	r7, #72	; 0x48
   1446e:	d011      	beq.n	14494 <preempt+0x88>
   14470:	4a33      	ldr	r2, [pc, #204]	; (14540 <preempt+0x134>)
   14472:	4934      	ldr	r1, [pc, #208]	; (14544 <preempt+0x138>)
   14474:	4834      	ldr	r0, [pc, #208]	; (14548 <preempt+0x13c>)
   14476:	f240 23ff 	movw	r3, #767	; 0x2ff
   1447a:	f005 fcbc 	bl	19df6 <printk>
   1447e:	4040      	eors	r0, r0
   14480:	f380 8811 	msr	BASEPRI, r0
   14484:	f04f 0003 	mov.w	r0, #3
   14488:	df02      	svc	2
   1448a:	e003      	b.n	14494 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   1448c:	f890 3020 	ldrb.w	r3, [r0, #32]
   14490:	079b      	lsls	r3, r3, #30
   14492:	d041      	beq.n	14518 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   14494:	f10d 000e 	add.w	r0, sp, #14
   14498:	f7fa fee0 	bl	f25c <ull_prepare_dequeue_iter>
		if (!next) {
   1449c:	2800      	cmp	r0, #0
   1449e:	d1f5      	bne.n	1448c <preempt+0x80>
   144a0:	e7d0      	b.n	14444 <preempt+0x38>
		iter_idx = UINT8_MAX;
   144a2:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   144a4:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   144a8:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   144ac:	f7fa fed6 	bl	f25c <ull_prepare_dequeue_iter>
		while (iter) {
   144b0:	bb48      	cbnz	r0, 14506 <preempt+0xfa>
	prepare_param.param = event.curr.param;
   144b2:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   144b4:	9b05      	ldr	r3, [sp, #20]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   144b6:	9300      	str	r3, [sp, #0]
	prepare_param.param = event.curr.param;
   144b8:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   144ba:	2301      	movs	r3, #1
	event.curr.param = NULL;
   144bc:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   144be:	9301      	str	r3, [sp, #4]
	event.curr.param = NULL;
   144c0:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   144c2:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   144c6:	9b04      	ldr	r3, [sp, #16]
   144c8:	aa06      	add	r2, sp, #24
   144ca:	f7fa fe81 	bl	f1d0 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   144ce:	2800      	cmp	r0, #0
   144d0:	d0e0      	beq.n	14494 <preempt+0x88>
   144d2:	4a1b      	ldr	r2, [pc, #108]	; (14540 <preempt+0x134>)
   144d4:	491d      	ldr	r1, [pc, #116]	; (1454c <preempt+0x140>)
   144d6:	481c      	ldr	r0, [pc, #112]	; (14548 <preempt+0x13c>)
   144d8:	f240 23fd 	movw	r3, #765	; 0x2fd
   144dc:	f005 fc8b 	bl	19df6 <printk>
   144e0:	4040      	eors	r0, r0
   144e2:	f380 8811 	msr	BASEPRI, r0
   144e6:	f04f 0003 	mov.w	r0, #3
   144ea:	df02      	svc	2
   144ec:	e7d2      	b.n	14494 <preempt+0x88>
				iter->is_aborted = 1;
   144ee:	f043 0302 	orr.w	r3, r3, #2
   144f2:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   144f6:	6983      	ldr	r3, [r0, #24]
   144f8:	4798      	blx	r3
			iter = ull_prepare_dequeue_iter(&iter_idx);
   144fa:	f10d 000f 	add.w	r0, sp, #15
   144fe:	f7fa fead 	bl	f25c <ull_prepare_dequeue_iter>
		while (iter) {
   14502:	2800      	cmp	r0, #0
   14504:	d0d5      	beq.n	144b2 <preempt+0xa6>
			if (!iter->is_aborted &&
   14506:	f890 3020 	ldrb.w	r3, [r0, #32]
   1450a:	079a      	lsls	r2, r3, #30
   1450c:	d4f5      	bmi.n	144fa <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   1450e:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   14510:	6831      	ldr	r1, [r6, #0]
   14512:	4291      	cmp	r1, r2
   14514:	d1f1      	bne.n	144fa <preempt+0xee>
   14516:	e7ea      	b.n	144ee <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   14518:	68c1      	ldr	r1, [r0, #12]
   1451a:	6800      	ldr	r0, [r0, #0]
   1451c:	f7ff feb6 	bl	1428c <preempt_ticker_start.isra.0>
}
   14520:	b00b      	add	sp, #44	; 0x2c
   14522:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   14524:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   14528:	69a2      	ldr	r2, [r4, #24]
   1452a:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1452c:	f043 0302 	orr.w	r3, r3, #2
   14530:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   14534:	4620      	mov	r0, r4
   14536:	4790      	blx	r2
		goto preempt_next;
   14538:	e7ac      	b.n	14494 <preempt+0x88>
   1453a:	bf00      	nop
   1453c:	20002524 	.word	0x20002524
   14540:	000204a8 	.word	0x000204a8
   14544:	00020538 	.word	0x00020538
   14548:	0001fcdc 	.word	0x0001fcdc
   1454c:	0001fe0c 	.word	0x0001fe0c

00014550 <preempt_ticker_cb>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14550:	2200      	movs	r2, #0
{
   14552:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   14554:	4611      	mov	r1, r2
   14556:	4b0a      	ldr	r3, [pc, #40]	; (14580 <preempt_ticker_cb+0x30>)
   14558:	2001      	movs	r0, #1
   1455a:	f7f6 ff29 	bl	b3b0 <mayfly_enqueue>
	LL_ASSERT(!ret);
   1455e:	b900      	cbnz	r0, 14562 <preempt_ticker_cb+0x12>
}
   14560:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   14562:	4a08      	ldr	r2, [pc, #32]	; (14584 <preempt_ticker_cb+0x34>)
   14564:	4908      	ldr	r1, [pc, #32]	; (14588 <preempt_ticker_cb+0x38>)
   14566:	4809      	ldr	r0, [pc, #36]	; (1458c <preempt_ticker_cb+0x3c>)
   14568:	f240 23c1 	movw	r3, #705	; 0x2c1
   1456c:	f005 fc43 	bl	19df6 <printk>
   14570:	4040      	eors	r0, r0
   14572:	f380 8811 	msr	BASEPRI, r0
   14576:	f04f 0003 	mov.w	r0, #3
   1457a:	df02      	svc	2
}
   1457c:	bd08      	pop	{r3, pc}
   1457e:	bf00      	nop
   14580:	20000844 	.word	0x20000844
   14584:	000204a8 	.word	0x000204a8
   14588:	0001fe0c 	.word	0x0001fe0c
   1458c:	0001fcdc 	.word	0x0001fcdc

00014590 <lll_init>:
{
   14590:	b510      	push	{r4, lr}
   14592:	4815      	ldr	r0, [pc, #84]	; (145e8 <lll_init+0x58>)
   14594:	f004 f8d4 	bl	18740 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   14598:	4b14      	ldr	r3, [pc, #80]	; (145ec <lll_init+0x5c>)
   1459a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1459c:	b300      	cbz	r0, 145e0 <lll_init+0x50>
	event.curr.abort_cb = NULL;
   1459e:	4b14      	ldr	r3, [pc, #80]	; (145f0 <lll_init+0x60>)
   145a0:	2400      	movs	r4, #0
   145a2:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   145a4:	f000 fa22 	bl	149ec <lll_clock_init>
	if (err < 0) {
   145a8:	2800      	cmp	r0, #0
   145aa:	db18      	blt.n	145de <lll_init+0x4e>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   145ac:	4622      	mov	r2, r4
   145ae:	4621      	mov	r1, r4
   145b0:	2001      	movs	r0, #1
   145b2:	f7f0 ff7d 	bl	54b0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   145b6:	4622      	mov	r2, r4
   145b8:	4621      	mov	r1, r4
   145ba:	200b      	movs	r0, #11
   145bc:	f7f0 ff78 	bl	54b0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   145c0:	4622      	mov	r2, r4
   145c2:	4621      	mov	r1, r4
   145c4:	2018      	movs	r0, #24
   145c6:	f7f0 ff73 	bl	54b0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   145ca:	2001      	movs	r0, #1
   145cc:	f7f0 ff3e 	bl	544c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   145d0:	200b      	movs	r0, #11
   145d2:	f7f0 ff3b 	bl	544c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   145d6:	2018      	movs	r0, #24
   145d8:	f7f0 ff38 	bl	544c <arch_irq_enable>
	return 0;
   145dc:	4620      	mov	r0, r4
}
   145de:	bd10      	pop	{r4, pc}
		return -ENODEV;
   145e0:	f06f 0012 	mvn.w	r0, #18
}
   145e4:	bd10      	pop	{r4, pc}
   145e6:	bf00      	nop
   145e8:	00020544 	.word	0x00020544
   145ec:	20002520 	.word	0x20002520
   145f0:	20002524 	.word	0x20002524

000145f4 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   145f4:	4a04      	ldr	r2, [pc, #16]	; (14608 <lll_csrand_get+0x14>)
{
   145f6:	b410      	push	{r4}
   145f8:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   145fa:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   145fc:	6884      	ldr	r4, [r0, #8]
   145fe:	b28a      	uxth	r2, r1
   14600:	4619      	mov	r1, r3
   14602:	6823      	ldr	r3, [r4, #0]
}
   14604:	bc10      	pop	{r4}
   14606:	4718      	bx	r3
   14608:	20002520 	.word	0x20002520

0001460c <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1460c:	4b08      	ldr	r3, [pc, #32]	; (14630 <lll_csrand_isr_get+0x24>)
   1460e:	681b      	ldr	r3, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   14610:	689a      	ldr	r2, [r3, #8]
{
   14612:	b410      	push	{r4}
   14614:	6854      	ldr	r4, [r2, #4]
   14616:	b134      	cbz	r4, 14626 <lll_csrand_isr_get+0x1a>
   14618:	b28a      	uxth	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1461a:	46a4      	mov	ip, r4
   1461c:	4601      	mov	r1, r0
}
   1461e:	bc10      	pop	{r4}
   14620:	4618      	mov	r0, r3
   14622:	2300      	movs	r3, #0
   14624:	4760      	bx	ip
   14626:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1462a:	bc10      	pop	{r4}
   1462c:	4770      	bx	lr
   1462e:	bf00      	nop
   14630:	20002520 	.word	0x20002520

00014634 <lll_rand_isr_get>:
   14634:	f7ff bfea 	b.w	1460c <lll_csrand_isr_get>

00014638 <lll_reset>:
}
   14638:	2000      	movs	r0, #0
   1463a:	4770      	bx	lr

0001463c <lll_prepare>:
{
   1463c:	b510      	push	{r4, lr}
   1463e:	b082      	sub	sp, #8
   14640:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   14642:	9400      	str	r4, [sp, #0]
   14644:	2400      	movs	r4, #0
   14646:	9401      	str	r4, [sp, #4]
   14648:	f7ff fe5a 	bl	14300 <prepare>
}
   1464c:	b002      	add	sp, #8
   1464e:	bd10      	pop	{r4, pc}

00014650 <lll_resume>:
{
   14650:	b510      	push	{r4, lr}
   14652:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   14654:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   14656:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1465a:	69c3      	ldr	r3, [r0, #28]
   1465c:	6902      	ldr	r2, [r0, #16]
   1465e:	f004 0401 	and.w	r4, r4, #1
   14662:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   14666:	9401      	str	r4, [sp, #4]
   14668:	f7ff fe4a 	bl	14300 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1466c:	b108      	cbz	r0, 14672 <lll_resume+0x22>
   1466e:	3044      	adds	r0, #68	; 0x44
   14670:	d101      	bne.n	14676 <lll_resume+0x26>
}
   14672:	b002      	add	sp, #8
   14674:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   14676:	4a07      	ldr	r2, [pc, #28]	; (14694 <lll_resume+0x44>)
   14678:	4907      	ldr	r1, [pc, #28]	; (14698 <lll_resume+0x48>)
   1467a:	4808      	ldr	r0, [pc, #32]	; (1469c <lll_resume+0x4c>)
   1467c:	23e5      	movs	r3, #229	; 0xe5
   1467e:	f005 fbba 	bl	19df6 <printk>
   14682:	4040      	eors	r0, r0
   14684:	f380 8811 	msr	BASEPRI, r0
   14688:	f04f 0003 	mov.w	r0, #3
   1468c:	df02      	svc	2
}
   1468e:	b002      	add	sp, #8
   14690:	bd10      	pop	{r4, pc}
   14692:	bf00      	nop
   14694:	000204a8 	.word	0x000204a8
   14698:	00020548 	.word	0x00020548
   1469c:	0001fcdc 	.word	0x0001fcdc

000146a0 <lll_disable>:
{
   146a0:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
   146a2:	4604      	mov	r4, r0
{
   146a4:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
   146a6:	2800      	cmp	r0, #0
   146a8:	d033      	beq.n	14712 <lll_disable+0x72>
   146aa:	4b25      	ldr	r3, [pc, #148]	; (14740 <lll_disable+0xa0>)
   146ac:	681a      	ldr	r2, [r3, #0]
   146ae:	4282      	cmp	r2, r0
   146b0:	d029      	beq.n	14706 <lll_disable+0x66>
		idx = UINT8_MAX;
   146b2:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   146b4:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   146b8:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   146bc:	f7fa fdce 	bl	f25c <ull_prepare_dequeue_iter>
		while (next) {
   146c0:	b940      	cbnz	r0, 146d4 <lll_disable+0x34>
   146c2:	e01c      	b.n	146fe <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   146c4:	68c3      	ldr	r3, [r0, #12]
   146c6:	42a3      	cmp	r3, r4
   146c8:	d01b      	beq.n	14702 <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
   146ca:	f10d 0007 	add.w	r0, sp, #7
   146ce:	f7fa fdc5 	bl	f25c <ull_prepare_dequeue_iter>
		while (next) {
   146d2:	b1a0      	cbz	r0, 146fe <lll_disable+0x5e>
			if (!next->is_aborted &&
   146d4:	f890 3020 	ldrb.w	r3, [r0, #32]
   146d8:	079b      	lsls	r3, r3, #30
   146da:	d4f6      	bmi.n	146ca <lll_disable+0x2a>
   146dc:	2c00      	cmp	r4, #0
   146de:	d1f1      	bne.n	146c4 <lll_disable+0x24>
   146e0:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   146e2:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   146e6:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   146e8:	f043 0302 	orr.w	r3, r3, #2
   146ec:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   146f0:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   146f2:	f10d 0007 	add.w	r0, sp, #7
   146f6:	f7fa fdb1 	bl	f25c <ull_prepare_dequeue_iter>
		while (next) {
   146fa:	2800      	cmp	r0, #0
   146fc:	d1ea      	bne.n	146d4 <lll_disable+0x34>
}
   146fe:	b002      	add	sp, #8
   14700:	bd10      	pop	{r4, pc}
   14702:	4621      	mov	r1, r4
   14704:	e7ed      	b.n	146e2 <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
   14706:	689b      	ldr	r3, [r3, #8]
   14708:	b16b      	cbz	r3, 14726 <lll_disable+0x86>
   1470a:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1470c:	2000      	movs	r0, #0
   1470e:	4798      	blx	r3
   14710:	e7cf      	b.n	146b2 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   14712:	4a0b      	ldr	r2, [pc, #44]	; (14740 <lll_disable+0xa0>)
   14714:	6893      	ldr	r3, [r2, #8]
   14716:	2b00      	cmp	r3, #0
   14718:	d0cb      	beq.n	146b2 <lll_disable+0x12>
   1471a:	6811      	ldr	r1, [r2, #0]
   1471c:	2900      	cmp	r1, #0
   1471e:	d0c8      	beq.n	146b2 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   14720:	2000      	movs	r0, #0
   14722:	4798      	blx	r3
   14724:	e7c5      	b.n	146b2 <lll_disable+0x12>
			LL_ASSERT(!param);
   14726:	4a07      	ldr	r2, [pc, #28]	; (14744 <lll_disable+0xa4>)
   14728:	4907      	ldr	r1, [pc, #28]	; (14748 <lll_disable+0xa8>)
   1472a:	4808      	ldr	r0, [pc, #32]	; (1474c <lll_disable+0xac>)
   1472c:	23ef      	movs	r3, #239	; 0xef
   1472e:	f005 fb62 	bl	19df6 <printk>
   14732:	4040      	eors	r0, r0
   14734:	f380 8811 	msr	BASEPRI, r0
   14738:	f04f 0003 	mov.w	r0, #3
   1473c:	df02      	svc	2
   1473e:	e7b8      	b.n	146b2 <lll_disable+0x12>
   14740:	20002524 	.word	0x20002524
   14744:	000204a8 	.word	0x000204a8
   14748:	0002055c 	.word	0x0002055c
   1474c:	0001fcdc 	.word	0x0001fcdc

00014750 <lll_prepare_done>:
}
   14750:	2000      	movs	r0, #0
   14752:	4770      	bx	lr

00014754 <lll_done>:
{
   14754:	b510      	push	{r4, lr}
   14756:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   14758:	f7fa fd72 	bl	f240 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1475c:	b13c      	cbz	r4, 1476e <lll_done+0x1a>
   1475e:	b320      	cbz	r0, 147aa <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   14760:	6820      	ldr	r0, [r4, #0]
   14762:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   14764:	f7fa fda8 	bl	f2b8 <ull_event_done>
	LL_ASSERT(evdone);
   14768:	b180      	cbz	r0, 1478c <lll_done+0x38>
}
   1476a:	2000      	movs	r0, #0
   1476c:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1476e:	4c1d      	ldr	r4, [pc, #116]	; (147e4 <lll_done+0x90>)
   14770:	68a3      	ldr	r3, [r4, #8]
   14772:	b343      	cbz	r3, 147c6 <lll_done+0x72>
		param = event.curr.param;
   14774:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   14776:	2300      	movs	r3, #0
   14778:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1477a:	6023      	str	r3, [r4, #0]
		if (param) {
   1477c:	2800      	cmp	r0, #0
   1477e:	d0f1      	beq.n	14764 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   14780:	6800      	ldr	r0, [r0, #0]
   14782:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   14784:	f7fa fd98 	bl	f2b8 <ull_event_done>
	LL_ASSERT(evdone);
   14788:	2800      	cmp	r0, #0
   1478a:	d1ee      	bne.n	1476a <lll_done+0x16>
   1478c:	4a16      	ldr	r2, [pc, #88]	; (147e8 <lll_done+0x94>)
   1478e:	4917      	ldr	r1, [pc, #92]	; (147ec <lll_done+0x98>)
   14790:	4817      	ldr	r0, [pc, #92]	; (147f0 <lll_done+0x9c>)
   14792:	f44f 73a0 	mov.w	r3, #320	; 0x140
   14796:	f005 fb2e 	bl	19df6 <printk>
   1479a:	4040      	eors	r0, r0
   1479c:	f380 8811 	msr	BASEPRI, r0
   147a0:	f04f 0003 	mov.w	r0, #3
   147a4:	df02      	svc	2
}
   147a6:	2000      	movs	r0, #0
   147a8:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   147aa:	4a0f      	ldr	r2, [pc, #60]	; (147e8 <lll_done+0x94>)
   147ac:	4911      	ldr	r1, [pc, #68]	; (147f4 <lll_done+0xa0>)
   147ae:	4810      	ldr	r0, [pc, #64]	; (147f0 <lll_done+0x9c>)
   147b0:	f44f 7391 	mov.w	r3, #290	; 0x122
   147b4:	f005 fb1f 	bl	19df6 <printk>
   147b8:	4040      	eors	r0, r0
   147ba:	f380 8811 	msr	BASEPRI, r0
   147be:	f04f 0003 	mov.w	r0, #3
   147c2:	df02      	svc	2
   147c4:	e7cc      	b.n	14760 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   147c6:	4a08      	ldr	r2, [pc, #32]	; (147e8 <lll_done+0x94>)
   147c8:	490b      	ldr	r1, [pc, #44]	; (147f8 <lll_done+0xa4>)
   147ca:	4809      	ldr	r0, [pc, #36]	; (147f0 <lll_done+0x9c>)
   147cc:	f44f 7394 	mov.w	r3, #296	; 0x128
   147d0:	f005 fb11 	bl	19df6 <printk>
   147d4:	4040      	eors	r0, r0
   147d6:	f380 8811 	msr	BASEPRI, r0
   147da:	f04f 0003 	mov.w	r0, #3
   147de:	df02      	svc	2
   147e0:	e7c8      	b.n	14774 <lll_done+0x20>
   147e2:	bf00      	nop
   147e4:	20002524 	.word	0x20002524
   147e8:	000204a8 	.word	0x000204a8
   147ec:	00020588 	.word	0x00020588
   147f0:	0001fcdc 	.word	0x0001fcdc
   147f4:	00020564 	.word	0x00020564
   147f8:	00020574 	.word	0x00020574

000147fc <lll_is_abort_cb>:
}
   147fc:	f06f 0047 	mvn.w	r0, #71	; 0x47
   14800:	4770      	bx	lr
   14802:	bf00      	nop

00014804 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   14804:	6803      	ldr	r3, [r0, #0]
   14806:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
   14808:	bfb4      	ite	lt
   1480a:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
   1480e:	6840      	ldrge	r0, [r0, #4]
   14810:	4298      	cmp	r0, r3
   14812:	bf38      	it	cc
   14814:	4618      	movcc	r0, r3
}
   14816:	4770      	bx	lr

00014818 <lll_preempt_calc>:
{
   14818:	b510      	push	{r4, lr}
   1481a:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1481c:	f7f8 f8e2 	bl	c9e4 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   14820:	4621      	mov	r1, r4
   14822:	f7f8 f8e1 	bl	c9e8 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   14826:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   14828:	0203      	lsls	r3, r0, #8
   1482a:	d404      	bmi.n	14836 <lll_preempt_calc+0x1e>
   1482c:	2809      	cmp	r0, #9
   1482e:	bf94      	ite	ls
   14830:	2000      	movls	r0, #0
   14832:	2001      	movhi	r0, #1
}
   14834:	bd10      	pop	{r4, pc}
	return 0;
   14836:	2000      	movs	r0, #0
}
   14838:	bd10      	pop	{r4, pc}
   1483a:	bf00      	nop

0001483c <lll_chan_set>:
	switch (chan) {
   1483c:	2826      	cmp	r0, #38	; 0x26
{
   1483e:	b510      	push	{r4, lr}
   14840:	4604      	mov	r4, r0
	switch (chan) {
   14842:	d01c      	beq.n	1487e <lll_chan_set+0x42>
   14844:	2827      	cmp	r0, #39	; 0x27
   14846:	d012      	beq.n	1486e <lll_chan_set+0x32>
   14848:	2825      	cmp	r0, #37	; 0x25
   1484a:	d008      	beq.n	1485e <lll_chan_set+0x22>
		if (chan < 11) {
   1484c:	280a      	cmp	r0, #10
   1484e:	d91e      	bls.n	1488e <lll_chan_set+0x52>
		} else if (chan < 40) {
   14850:	2827      	cmp	r0, #39	; 0x27
   14852:	d821      	bhi.n	14898 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   14854:	3003      	adds	r0, #3
   14856:	0040      	lsls	r0, r0, #1
   14858:	f001 fcd4 	bl	16204 <radio_freq_chan_set>
   1485c:	e002      	b.n	14864 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1485e:	2002      	movs	r0, #2
   14860:	f001 fcd0 	bl	16204 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   14864:	4620      	mov	r0, r4
}
   14866:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1486a:	f001 bcd1 	b.w	16210 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1486e:	2050      	movs	r0, #80	; 0x50
   14870:	f001 fcc8 	bl	16204 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   14874:	4620      	mov	r0, r4
}
   14876:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1487a:	f001 bcc9 	b.w	16210 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1487e:	201a      	movs	r0, #26
   14880:	f001 fcc0 	bl	16204 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   14884:	4620      	mov	r0, r4
}
   14886:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1488a:	f001 bcc1 	b.w	16210 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1488e:	3002      	adds	r0, #2
   14890:	0040      	lsls	r0, r0, #1
   14892:	f001 fcb7 	bl	16204 <radio_freq_chan_set>
   14896:	e7e5      	b.n	14864 <lll_chan_set+0x28>
			LL_ASSERT(0);
   14898:	4a06      	ldr	r2, [pc, #24]	; (148b4 <lll_chan_set+0x78>)
   1489a:	4907      	ldr	r1, [pc, #28]	; (148b8 <lll_chan_set+0x7c>)
   1489c:	4807      	ldr	r0, [pc, #28]	; (148bc <lll_chan_set+0x80>)
   1489e:	f240 13a3 	movw	r3, #419	; 0x1a3
   148a2:	f005 faa8 	bl	19df6 <printk>
   148a6:	4040      	eors	r0, r0
   148a8:	f380 8811 	msr	BASEPRI, r0
   148ac:	f04f 0003 	mov.w	r0, #3
   148b0:	df02      	svc	2
   148b2:	e7d7      	b.n	14864 <lll_chan_set+0x28>
   148b4:	000204a8 	.word	0x000204a8
   148b8:	0001fd3c 	.word	0x0001fd3c
   148bc:	0001fcdc 	.word	0x0001fcdc

000148c0 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   148c0:	f001 bd16 	b.w	162f0 <radio_rx_ready_delay_get>

000148c4 <lll_radio_tx_pwr_min_get>:
	return radio_tx_power_min_get();
   148c4:	f001 bc66 	b.w	16194 <radio_tx_power_min_get>

000148c8 <lll_radio_tx_pwr_max_get>:
	return radio_tx_power_max_get();
   148c8:	f001 bc68 	b.w	1619c <radio_tx_power_max_get>

000148cc <lll_radio_tx_pwr_floor>:
	return radio_tx_power_floor(tx_pwr_lvl);
   148cc:	f001 bc68 	b.w	161a0 <radio_tx_power_floor>

000148d0 <lll_isr_tx_status_reset>:
{
   148d0:	b508      	push	{r3, lr}
	radio_status_reset();
   148d2:	f001 fd3b 	bl	1634c <radio_status_reset>
}
   148d6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   148da:	f001 bdf7 	b.w	164cc <radio_tmr_status_reset>
   148de:	bf00      	nop

000148e0 <lll_isr_rx_status_reset>:
{
   148e0:	b508      	push	{r3, lr}
	radio_status_reset();
   148e2:	f001 fd33 	bl	1634c <radio_status_reset>
	radio_tmr_status_reset();
   148e6:	f001 fdf1 	bl	164cc <radio_tmr_status_reset>
}
   148ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   148ee:	f001 bd9d 	b.w	1642c <radio_rssi_status_reset>
   148f2:	bf00      	nop

000148f4 <lll_isr_status_reset>:
{
   148f4:	b508      	push	{r3, lr}
	radio_status_reset();
   148f6:	f001 fd29 	bl	1634c <radio_status_reset>
	radio_tmr_status_reset();
   148fa:	f001 fde7 	bl	164cc <radio_tmr_status_reset>
	radio_filter_status_reset();
   148fe:	f001 fdcd 	bl	1649c <radio_filter_status_reset>
	radio_ar_status_reset();
   14902:	f001 ffbb 	bl	1687c <radio_ar_status_reset>
}
   14906:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1490a:	f001 bd8f 	b.w	1642c <radio_rssi_status_reset>
   1490e:	bf00      	nop

00014910 <lll_isr_cleanup>:
{
   14910:	b508      	push	{r3, lr}
   14912:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   14914:	4815      	ldr	r0, [pc, #84]	; (1496c <lll_isr_cleanup+0x5c>)
   14916:	f001 fbc5 	bl	160a4 <radio_isr_set>
	if (!radio_is_idle()) {
   1491a:	f001 fd37 	bl	1638c <radio_is_idle>
   1491e:	b150      	cbz	r0, 14936 <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   14920:	f001 fe62 	bl	165e8 <radio_tmr_stop>
	err = lll_hfclock_off();
   14924:	f000 f894 	bl	14a50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14928:	2800      	cmp	r0, #0
   1492a:	db0c      	blt.n	14946 <lll_isr_cleanup+0x36>
}
   1492c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   14930:	2000      	movs	r0, #0
   14932:	f7ff bf0f 	b.w	14754 <lll_done>
		radio_disable();
   14936:	f001 fcf1 	bl	1631c <radio_disable>
	radio_tmr_stop();
   1493a:	f001 fe55 	bl	165e8 <radio_tmr_stop>
	err = lll_hfclock_off();
   1493e:	f000 f887 	bl	14a50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14942:	2800      	cmp	r0, #0
   14944:	daf2      	bge.n	1492c <lll_isr_cleanup+0x1c>
   14946:	4a0a      	ldr	r2, [pc, #40]	; (14970 <lll_isr_cleanup+0x60>)
   14948:	490a      	ldr	r1, [pc, #40]	; (14974 <lll_isr_cleanup+0x64>)
   1494a:	480b      	ldr	r0, [pc, #44]	; (14978 <lll_isr_cleanup+0x68>)
   1494c:	f240 2306 	movw	r3, #518	; 0x206
   14950:	f005 fa51 	bl	19df6 <printk>
   14954:	4040      	eors	r0, r0
   14956:	f380 8811 	msr	BASEPRI, r0
   1495a:	f04f 0003 	mov.w	r0, #3
   1495e:	df02      	svc	2
	lll_done(NULL);
   14960:	2000      	movs	r0, #0
}
   14962:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   14966:	f7ff bef5 	b.w	14754 <lll_done>
   1496a:	bf00      	nop
   1496c:	00014229 	.word	0x00014229
   14970:	000204a8 	.word	0x000204a8
   14974:	00020590 	.word	0x00020590
   14978:	0001fcdc 	.word	0x0001fcdc

0001497c <lll_isr_abort>:
{
   1497c:	b510      	push	{r4, lr}
   1497e:	4604      	mov	r4, r0
	lll_isr_status_reset();
   14980:	f7ff ffb8 	bl	148f4 <lll_isr_status_reset>
	lll_isr_cleanup(param);
   14984:	4620      	mov	r0, r4
}
   14986:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1498a:	f7ff bfc1 	b.w	14910 <lll_isr_cleanup>
   1498e:	bf00      	nop

00014990 <clock_ready>:
	z_impl_k_sem_give(sem);
   14990:	f101 0010 	add.w	r0, r1, #16
   14994:	f004 bcfc 	b.w	19390 <z_impl_k_sem_give>

00014998 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   14998:	b530      	push	{r4, r5, lr}
   1499a:	4604      	mov	r4, r0
   1499c:	b08b      	sub	sp, #44	; 0x2c
   1499e:	460d      	mov	r5, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   149a0:	2201      	movs	r2, #1
   149a2:	2100      	movs	r1, #0
   149a4:	a804      	add	r0, sp, #16
   149a6:	f00a fa8b 	bl	1eec0 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   149aa:	2300      	movs	r3, #0
   149ac:	4a0e      	ldr	r2, [pc, #56]	; (149e8 <blocking_on+0x50>)
   149ae:	9303      	str	r3, [sp, #12]
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   149b0:	4620      	mov	r0, r4
   149b2:	2303      	movs	r3, #3
   149b4:	4669      	mov	r1, sp
   149b6:	9201      	str	r2, [sp, #4]
   149b8:	9302      	str	r3, [sp, #8]
   149ba:	f005 fa98 	bl	19eee <onoff_request>
	if (err < 0) {
   149be:	2800      	cmp	r0, #0
   149c0:	db10      	blt.n	149e4 <blocking_on+0x4c>
   149c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   149c6:	f240 30e7 	movw	r0, #999	; 0x3e7
   149ca:	2100      	movs	r1, #0
   149cc:	fbe3 0105 	umlal	r0, r1, r3, r5
   149d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   149d4:	2300      	movs	r3, #0
   149d6:	f7eb ffb1 	bl	93c <__aeabi_uldivmod>
   149da:	4602      	mov	r2, r0
   149dc:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   149de:	a804      	add	r0, sp, #16
   149e0:	f004 fcfc 	bl	193dc <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   149e4:	b00b      	add	sp, #44	; 0x2c
   149e6:	bd30      	pop	{r4, r5, pc}
   149e8:	00014991 	.word	0x00014991

000149ec <lll_clock_init>:

int lll_clock_init(void)
{
   149ec:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   149ee:	2001      	movs	r0, #1
   149f0:	f7f0 f9c2 	bl	4d78 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   149f4:	4904      	ldr	r1, [pc, #16]	; (14a08 <lll_clock_init+0x1c>)
   149f6:	2401      	movs	r4, #1
   149f8:	2300      	movs	r3, #0
   149fa:	608c      	str	r4, [r1, #8]
   149fc:	60cb      	str	r3, [r1, #12]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   149fe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   14a02:	604b      	str	r3, [r1, #4]
	return onoff_request(mgr, &lf_cli);
   14a04:	f005 ba73 	b.w	19eee <onoff_request>
   14a08:	2000253c 	.word	0x2000253c

00014a0c <lll_clock_wait>:

int lll_clock_wait(void)
{
   14a0c:	b508      	push	{r3, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   14a0e:	2001      	movs	r0, #1
   14a10:	f7f0 f9b2 	bl	4d78 <z_nrf_clock_control_get_onoff>

	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
}
   14a14:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   14a18:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   14a1c:	f7ff bfbc 	b.w	14998 <blocking_on>

00014a20 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   14a20:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   14a22:	4b0a      	ldr	r3, [pc, #40]	; (14a4c <lll_hfclock_on+0x2c>)
   14a24:	f3bf 8f5b 	dmb	ish
   14a28:	e853 2f00 	ldrex	r2, [r3]
   14a2c:	1c51      	adds	r1, r2, #1
   14a2e:	e843 1000 	strex	r0, r1, [r3]
   14a32:	2800      	cmp	r0, #0
   14a34:	d1f8      	bne.n	14a28 <lll_hfclock_on+0x8>
   14a36:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   14a3a:	2a00      	cmp	r2, #0
   14a3c:	dd01      	ble.n	14a42 <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   14a3e:	2000      	movs	r0, #0
   14a40:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   14a42:	f7f0 f9a1 	bl	4d88 <z_nrf_clock_bt_ctlr_hf_request>
}
   14a46:	2000      	movs	r0, #0
   14a48:	bd08      	pop	{r3, pc}
   14a4a:	bf00      	nop
   14a4c:	20002538 	.word	0x20002538

00014a50 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   14a50:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   14a52:	4b0d      	ldr	r3, [pc, #52]	; (14a88 <lll_hfclock_off+0x38>)
   14a54:	681a      	ldr	r2, [r3, #0]
   14a56:	2a00      	cmp	r2, #0
   14a58:	dd12      	ble.n	14a80 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   14a5a:	f3bf 8f5b 	dmb	ish
   14a5e:	e853 2f00 	ldrex	r2, [r3]
   14a62:	1e51      	subs	r1, r2, #1
   14a64:	e843 1000 	strex	r0, r1, [r3]
   14a68:	2800      	cmp	r0, #0
   14a6a:	d1f8      	bne.n	14a5e <lll_hfclock_off+0xe>
   14a6c:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   14a70:	2a01      	cmp	r2, #1
   14a72:	dd01      	ble.n	14a78 <lll_hfclock_off+0x28>
		return 0;
   14a74:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   14a76:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   14a78:	f7f0 f99c 	bl	4db4 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   14a7c:	2000      	movs	r0, #0
}
   14a7e:	bd08      	pop	{r3, pc}
		return -EALREADY;
   14a80:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   14a84:	bd08      	pop	{r3, pc}
   14a86:	bf00      	nop
   14a88:	20002538 	.word	0x20002538

00014a8c <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   14a8c:	2014      	movs	r0, #20
   14a8e:	4770      	bx	lr

00014a90 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   14a90:	4b01      	ldr	r3, [pc, #4]	; (14a98 <lll_clock_ppm_get+0x8>)
}
   14a92:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   14a96:	4770      	bx	lr
   14a98:	0002059c 	.word	0x0002059c

00014a9c <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   14a9c:	b510      	push	{r4, lr}
   14a9e:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   14aa0:	f7ff ff28 	bl	148f4 <lll_isr_status_reset>

	radio_filter_disable();
   14aa4:	f001 fcf0 	bl	16488 <radio_filter_disable>

	lll_isr_cleanup(param);
   14aa8:	4620      	mov	r0, r4
}
   14aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   14aae:	f7ff bf2f 	b.w	14910 <lll_isr_cleanup>
   14ab2:	bf00      	nop

00014ab4 <isr_tx>:
{
   14ab4:	b530      	push	{r4, r5, lr}
   14ab6:	b083      	sub	sp, #12
   14ab8:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   14aba:	f7ff ff09 	bl	148d0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   14abe:	2096      	movs	r0, #150	; 0x96
   14ac0:	f001 fd14 	bl	164ec <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   14ac4:	2300      	movs	r3, #0
   14ac6:	461a      	mov	r2, r3
   14ac8:	4619      	mov	r1, r3
   14aca:	4618      	mov	r0, r3
   14acc:	f001 fc94 	bl	163f8 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   14ad0:	f001 fc80 	bl	163d4 <radio_pkt_scratch_get>
   14ad4:	f001 fbfe 	bl	162d4 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   14ad8:	f001 fc44 	bl	16364 <radio_is_ready>
   14adc:	b9d8      	cbnz	r0, 14b16 <isr_tx+0x62>
	radio_isr_set(isr_rx, param);
   14ade:	481d      	ldr	r0, [pc, #116]	; (14b54 <isr_tx+0xa0>)
   14ae0:	4621      	mov	r1, r4
   14ae2:	f001 fadf 	bl	160a4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   14ae6:	f7ff fb6d 	bl	141c4 <ull_filter_lll_rl_enabled>
   14aea:	bb48      	cbnz	r0, 14b40 <isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   14aec:	f001 fdd8 	bl	166a0 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(0, 0);
   14af0:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   14af2:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(0, 0);
   14af4:	4608      	mov	r0, r1
   14af6:	f001 fbfd 	bl	162f4 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(0, 0);
   14afa:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(0, 0);
   14afc:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(0, 0);
   14afe:	4608      	mov	r0, r1
   14b00:	f001 fbf4 	bl	162ec <radio_tx_chain_delay_get>
   14b04:	442c      	add	r4, r5
   14b06:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   14b08:	1a20      	subs	r0, r4, r0
   14b0a:	f001 fd81 	bl	16610 <radio_tmr_hcto_configure>
	radio_tmr_end_capture();
   14b0e:	f001 fdb9 	bl	16684 <radio_tmr_end_capture>
}
   14b12:	b003      	add	sp, #12
   14b14:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!radio_is_ready());
   14b16:	4a10      	ldr	r2, [pc, #64]	; (14b58 <isr_tx+0xa4>)
   14b18:	4910      	ldr	r1, [pc, #64]	; (14b5c <isr_tx+0xa8>)
   14b1a:	4811      	ldr	r0, [pc, #68]	; (14b60 <isr_tx+0xac>)
   14b1c:	f44f 73c3 	mov.w	r3, #390	; 0x186
   14b20:	f005 f969 	bl	19df6 <printk>
   14b24:	4040      	eors	r0, r0
   14b26:	f380 8811 	msr	BASEPRI, r0
   14b2a:	f04f 0003 	mov.w	r0, #3
   14b2e:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   14b30:	4808      	ldr	r0, [pc, #32]	; (14b54 <isr_tx+0xa0>)
   14b32:	4621      	mov	r1, r4
   14b34:	f001 fab6 	bl	160a4 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   14b38:	f7ff fb44 	bl	141c4 <ull_filter_lll_rl_enabled>
   14b3c:	2800      	cmp	r0, #0
   14b3e:	d0d5      	beq.n	14aec <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   14b40:	f10d 0007 	add.w	r0, sp, #7
   14b44:	f7ff fa68 	bl	14018 <ull_filter_lll_irks_get>
   14b48:	4601      	mov	r1, r0
		radio_ar_configure(count, irks);
   14b4a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   14b4e:	f001 fe5b 	bl	16808 <radio_ar_configure>
   14b52:	e7cb      	b.n	14aec <isr_tx+0x38>
   14b54:	00014fed 	.word	0x00014fed
   14b58:	000205ac 	.word	0x000205ac
   14b5c:	000205f8 	.word	0x000205f8
   14b60:	0001fcdc 	.word	0x0001fcdc

00014b64 <chan_prepare>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   14b64:	7b03      	ldrb	r3, [r0, #12]
   14b66:	f3c3 1302 	ubfx	r3, r3, #4, #3
{
   14b6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14b6e:	2b00      	cmp	r3, #0
   14b70:	4604      	mov	r4, r0
   14b72:	fa93 f0a3 	rbit	r0, r3
   14b76:	fab0 f080 	clz	r0, r0
   14b7a:	bf08      	it	eq
   14b7c:	f04f 30ff 	moveq.w	r0, #4294967295	; 0xffffffff
	LL_ASSERT(chan);
   14b80:	1c45      	adds	r5, r0, #1
   14b82:	d053      	beq.n	14c2c <chan_prepare+0xc8>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   14b84:	7b22      	ldrb	r2, [r4, #12]
   14b86:	1e59      	subs	r1, r3, #1
   14b88:	400b      	ands	r3, r1
   14b8a:	f363 1206 	bfi	r2, r3, #4, #3
   14b8e:	7322      	strb	r2, [r4, #12]

	lll_chan_set(36 + chan);
   14b90:	f105 0024 	add.w	r0, r5, #36	; 0x24
   14b94:	f7ff fe52 	bl	1483c <lll_chan_set>
static inline struct pdu_adv *lll_adv_pdu_latest_get(struct lll_adv_pdu *pdu,
						     uint8_t *is_modified)
{
	uint8_t first;

	first = pdu->first;
   14b98:	7be2      	ldrb	r2, [r4, #15]
	if (first != pdu->last) {
   14b9a:	7c21      	ldrb	r1, [r4, #16]
   14b9c:	428a      	cmp	r2, r1
	first = pdu->first;
   14b9e:	b2d3      	uxtb	r3, r2
	if (first != pdu->last) {
   14ba0:	d03e      	beq.n	14c20 <chan_prepare+0xbc>
		first += 1U;
   14ba2:	3301      	adds	r3, #1
   14ba4:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   14ba6:	2b02      	cmp	r3, #2
   14ba8:	d037      	beq.n	14c1a <chan_prepare+0xb6>
   14baa:	2627      	movs	r6, #39	; 0x27
   14bac:	2202      	movs	r2, #2
   14bae:	fb16 2603 	smlabb	r6, r6, r3, r2
			first = 0U;
		}
		pdu->first = first;
   14bb2:	73e3      	strb	r3, [r4, #15]
		*is_modified = 1U;
   14bb4:	2701      	movs	r7, #1
	}

	return (void *)pdu->pdu[first];
   14bb6:	f104 080f 	add.w	r8, r4, #15
   14bba:	eb08 0506 	add.w	r5, r8, r6

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   14bbe:	4628      	mov	r0, r5
   14bc0:	f001 fb8e 	bl	162e0 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   14bc4:	f818 3006 	ldrb.w	r3, [r8, r6]
   14bc8:	f003 030f 	and.w	r3, r3, #15
   14bcc:	2b02      	cmp	r3, #2
   14bce:	d045      	beq.n	14c5c <chan_prepare+0xf8>
	first = pdu->first;
   14bd0:	f894 205f 	ldrb.w	r2, [r4, #95]	; 0x5f
	if (first != pdu->last) {
   14bd4:	f894 0060 	ldrb.w	r0, [r4, #96]	; 0x60
   14bd8:	4290      	cmp	r0, r2
	first = pdu->first;
   14bda:	b2d3      	uxtb	r3, r2
	if (first != pdu->last) {
   14bdc:	d037      	beq.n	14c4e <chan_prepare+0xea>
		first += 1U;
   14bde:	3301      	adds	r3, #1
   14be0:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   14be2:	2b02      	cmp	r3, #2
   14be4:	d043      	beq.n	14c6e <chan_prepare+0x10a>
   14be6:	2027      	movs	r0, #39	; 0x27
   14be8:	2202      	movs	r2, #2
   14bea:	fb10 2203 	smlabb	r2, r0, r3, r2
		pdu->first = first;
   14bee:	4620      	mov	r0, r4
   14bf0:	f800 3f5f 	strb.w	r3, [r0, #95]!
	return (void *)pdu->pdu[first];
   14bf4:	4410      	add	r0, r2
#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
			/* Copy the address from the adv packet we will send
			 * into the scan response.
			 */
			memcpy(&scan_pdu->scan_rsp.addr[0],
   14bf6:	3002      	adds	r0, #2
   14bf8:	2206      	movs	r2, #6
   14bfa:	1ca9      	adds	r1, r5, #2
   14bfc:	f006 ff15 	bl	1ba2a <memcpy>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   14c00:	4621      	mov	r1, r4
   14c02:	481c      	ldr	r0, [pc, #112]	; (14c74 <chan_prepare+0x110>)
   14c04:	f001 fa4e 	bl	160a4 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   14c08:	2096      	movs	r0, #150	; 0x96
   14c0a:	f001 fc6f 	bl	164ec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   14c0e:	2000      	movs	r0, #0
   14c10:	f001 fbe4 	bl	163dc <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   14c14:	4628      	mov	r0, r5
   14c16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c1a:	461e      	mov	r6, r3
			first = 0U;
   14c1c:	2300      	movs	r3, #0
   14c1e:	e7c8      	b.n	14bb2 <chan_prepare+0x4e>
   14c20:	2627      	movs	r6, #39	; 0x27
   14c22:	2202      	movs	r2, #2
   14c24:	fb16 2603 	smlabb	r6, r6, r3, r2
	upd = 0U;
   14c28:	2700      	movs	r7, #0
   14c2a:	e7c4      	b.n	14bb6 <chan_prepare+0x52>
	LL_ASSERT(chan);
   14c2c:	4a12      	ldr	r2, [pc, #72]	; (14c78 <chan_prepare+0x114>)
   14c2e:	4913      	ldr	r1, [pc, #76]	; (14c7c <chan_prepare+0x118>)
   14c30:	4813      	ldr	r0, [pc, #76]	; (14c80 <chan_prepare+0x11c>)
   14c32:	f240 2381 	movw	r3, #641	; 0x281
   14c36:	f005 f8de 	bl	19df6 <printk>
   14c3a:	4040      	eors	r0, r0
   14c3c:	f380 8811 	msr	BASEPRI, r0
   14c40:	f04f 0003 	mov.w	r0, #3
   14c44:	df02      	svc	2
   14c46:	7b23      	ldrb	r3, [r4, #12]
   14c48:	f3c3 1302 	ubfx	r3, r3, #4, #3
   14c4c:	e79a      	b.n	14b84 <chan_prepare+0x20>
		if (upd) {
   14c4e:	2f00      	cmp	r7, #0
   14c50:	d0d6      	beq.n	14c00 <chan_prepare+0x9c>
	return (void *)pdu->pdu[first];
   14c52:	2327      	movs	r3, #39	; 0x27
   14c54:	fb03 4000 	mla	r0, r3, r0, r4
   14c58:	3061      	adds	r0, #97	; 0x61
   14c5a:	e7cc      	b.n	14bf6 <chan_prepare+0x92>
		radio_isr_set(isr_done, lll);
   14c5c:	4809      	ldr	r0, [pc, #36]	; (14c84 <chan_prepare+0x120>)
   14c5e:	4621      	mov	r1, r4
   14c60:	f001 fa20 	bl	160a4 <radio_isr_set>
		radio_switch_complete_and_disable();
   14c64:	f001 fbd4 	bl	16410 <radio_switch_complete_and_disable>
}
   14c68:	4628      	mov	r0, r5
   14c6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14c6e:	461a      	mov	r2, r3
			first = 0U;
   14c70:	2300      	movs	r3, #0
   14c72:	e7bc      	b.n	14bee <chan_prepare+0x8a>
   14c74:	00014ab5 	.word	0x00014ab5
   14c78:	000205ac 	.word	0x000205ac
   14c7c:	0002060c 	.word	0x0002060c
   14c80:	0001fcdc 	.word	0x0001fcdc
   14c84:	00014eb9 	.word	0x00014eb9

00014c88 <prepare_cb>:
{
   14c88:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   14c8a:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   14c8c:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   14c8e:	f015 0501 	ands.w	r5, r5, #1
{
   14c92:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   14c94:	d16f      	bne.n	14d76 <prepare_cb+0xee>
	radio_reset();
   14c96:	4606      	mov	r6, r0
   14c98:	f001 fa24 	bl	160e4 <radio_reset>
	radio_tx_power_set(lll->tx_pwr_lvl);
   14c9c:	f994 00af 	ldrsb.w	r0, [r4, #175]	; 0xaf
   14ca0:	f001 fa72 	bl	16188 <radio_tx_power_set>
	radio_phy_set(0, 0);
   14ca4:	4629      	mov	r1, r5
   14ca6:	4628      	mov	r0, r5
   14ca8:	f001 fa42 	bl	16130 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, 0);
   14cac:	462a      	mov	r2, r5
   14cae:	2125      	movs	r1, #37	; 0x25
   14cb0:	2008      	movs	r0, #8
   14cb2:	f001 fad9 	bl	16268 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   14cb6:	4b3b      	ldr	r3, [pc, #236]	; (14da4 <prepare_cb+0x11c>)
   14cb8:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   14cba:	a801      	add	r0, sp, #4
   14cbc:	f001 faba 	bl	16234 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   14cc0:	4939      	ldr	r1, [pc, #228]	; (14da8 <prepare_cb+0x120>)
   14cc2:	f240 605b 	movw	r0, #1627	; 0x65b
   14cc6:	f001 fb6b 	bl	163a0 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   14cca:	7b23      	ldrb	r3, [r4, #12]
   14ccc:	f3c3 0242 	ubfx	r2, r3, #1, #3
   14cd0:	f362 1306 	bfi	r3, r2, #4, #3
   14cd4:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   14cd6:	4620      	mov	r0, r4
   14cd8:	f7ff ff44 	bl	14b64 <chan_prepare>
	if (ull_filter_lll_rl_enabled()) {
   14cdc:	f7ff fa72 	bl	141c4 <ull_filter_lll_rl_enabled>
   14ce0:	bb50      	cbnz	r0, 14d38 <prepare_cb+0xb0>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   14ce2:	7b63      	ldrb	r3, [r4, #13]
   14ce4:	079b      	lsls	r3, r3, #30
   14ce6:	d134      	bne.n	14d52 <prepare_cb+0xca>
	evt = HDR_LLL2EVT(lll);
   14ce8:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   14cea:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   14cec:	4638      	mov	r0, r7
   14cee:	f7ff fd89 	bl	14804 <lll_evt_offset_get>
   14cf2:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   14cf4:	6872      	ldr	r2, [r6, #4]
   14cf6:	f105 0109 	add.w	r1, r5, #9
   14cfa:	2001      	movs	r0, #1
   14cfc:	f001 fc02 	bl	16504 <radio_tmr_start>
	radio_tmr_end_capture();
   14d00:	f001 fcc0 	bl	16684 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   14d04:	4620      	mov	r0, r4
   14d06:	f7fa fe49 	bl	f99c <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   14d0a:	1c81      	adds	r1, r0, #2
   14d0c:	462a      	mov	r2, r5
   14d0e:	b2c9      	uxtb	r1, r1
   14d10:	4638      	mov	r0, r7
   14d12:	f7ff fd81 	bl	14818 <lll_preempt_calc>
   14d16:	b930      	cbnz	r0, 14d26 <prepare_cb+0x9e>
		ret = lll_prepare_done(lll);
   14d18:	4620      	mov	r0, r4
   14d1a:	f7ff fd19 	bl	14750 <lll_prepare_done>
		LL_ASSERT(!ret);
   14d1e:	b9d0      	cbnz	r0, 14d56 <prepare_cb+0xce>
}
   14d20:	2000      	movs	r0, #0
   14d22:	b003      	add	sp, #12
   14d24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   14d26:	4821      	ldr	r0, [pc, #132]	; (14dac <prepare_cb+0x124>)
   14d28:	4621      	mov	r1, r4
   14d2a:	f001 f9bb 	bl	160a4 <radio_isr_set>
		radio_disable();
   14d2e:	f001 faf5 	bl	1631c <radio_disable>
}
   14d32:	2000      	movs	r0, #0
   14d34:	b003      	add	sp, #12
   14d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   14d38:	7b60      	ldrb	r0, [r4, #13]
   14d3a:	f010 0003 	ands.w	r0, r0, #3
   14d3e:	bf18      	it	ne
   14d40:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   14d42:	f7ff f9f5 	bl	14130 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   14d46:	7841      	ldrb	r1, [r0, #1]
   14d48:	1c82      	adds	r2, r0, #2
   14d4a:	7800      	ldrb	r0, [r0, #0]
   14d4c:	f001 fb80 	bl	16450 <radio_filter_configure>
   14d50:	e7ca      	b.n	14ce8 <prepare_cb+0x60>
		struct lll_filter *wl = ull_filter_lll_get(true);
   14d52:	2001      	movs	r0, #1
   14d54:	e7f5      	b.n	14d42 <prepare_cb+0xba>
		LL_ASSERT(!ret);
   14d56:	4a16      	ldr	r2, [pc, #88]	; (14db0 <prepare_cb+0x128>)
   14d58:	4916      	ldr	r1, [pc, #88]	; (14db4 <prepare_cb+0x12c>)
   14d5a:	4817      	ldr	r0, [pc, #92]	; (14db8 <prepare_cb+0x130>)
   14d5c:	f240 131f 	movw	r3, #287	; 0x11f
   14d60:	f005 f849 	bl	19df6 <printk>
   14d64:	4040      	eors	r0, r0
   14d66:	f380 8811 	msr	BASEPRI, r0
   14d6a:	f04f 0003 	mov.w	r0, #3
   14d6e:	df02      	svc	2
}
   14d70:	2000      	movs	r0, #0
   14d72:	b003      	add	sp, #12
   14d74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   14d76:	f7ff fe6b 	bl	14a50 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   14d7a:	2800      	cmp	r0, #0
   14d7c:	db05      	blt.n	14d8a <prepare_cb+0x102>
		lll_done(NULL);
   14d7e:	2000      	movs	r0, #0
   14d80:	f7ff fce8 	bl	14754 <lll_done>
}
   14d84:	2000      	movs	r0, #0
   14d86:	b003      	add	sp, #12
   14d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   14d8a:	4a09      	ldr	r2, [pc, #36]	; (14db0 <prepare_cb+0x128>)
   14d8c:	490b      	ldr	r1, [pc, #44]	; (14dbc <prepare_cb+0x134>)
   14d8e:	480a      	ldr	r0, [pc, #40]	; (14db8 <prepare_cb+0x130>)
   14d90:	23c0      	movs	r3, #192	; 0xc0
   14d92:	f005 f830 	bl	19df6 <printk>
   14d96:	4040      	eors	r0, r0
   14d98:	f380 8811 	msr	BASEPRI, r0
   14d9c:	f04f 0003 	mov.w	r0, #3
   14da0:	df02      	svc	2
   14da2:	e7ec      	b.n	14d7e <prepare_cb+0xf6>
   14da4:	8e89bed6 	.word	0x8e89bed6
   14da8:	00555555 	.word	0x00555555
   14dac:	00014a9d 	.word	0x00014a9d
   14db0:	000205ac 	.word	0x000205ac
   14db4:	0001fe0c 	.word	0x0001fe0c
   14db8:	0001fcdc 	.word	0x0001fcdc
   14dbc:	00020590 	.word	0x00020590

00014dc0 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   14dc0:	68c3      	ldr	r3, [r0, #12]
{
   14dc2:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   14dc4:	681e      	ldr	r6, [r3, #0]
{
   14dc6:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   14dc8:	f7f7 fe0c 	bl	c9e4 <ticker_ticks_now_get>
   14dcc:	4605      	mov	r5, r0
   14dce:	4630      	mov	r0, r6
   14dd0:	f7ff fd18 	bl	14804 <lll_evt_offset_get>
	p->remainder = 0;
   14dd4:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   14dd6:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   14dd8:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   14ddc:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   14dde:	4620      	mov	r0, r4
}
   14de0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   14de4:	f7ff bf50 	b.w	14c88 <prepare_cb>

00014de8 <is_abort_cb>:
	if (next != curr) {
   14de8:	4282      	cmp	r2, r0
{
   14dea:	b508      	push	{r3, lr}
	if (next != curr) {
   14dec:	d011      	beq.n	14e12 <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   14dee:	7b12      	ldrb	r2, [r2, #12]
   14df0:	07d2      	lsls	r2, r2, #31
   14df2:	d402      	bmi.n	14dfa <is_abort_cb+0x12>
			return -ECANCELED;
   14df4:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   14df8:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   14dfa:	4a14      	ldr	r2, [pc, #80]	; (14e4c <is_abort_cb+0x64>)
   14dfc:	601a      	str	r2, [r3, #0]
			*resume_prio = 0; /* TODO: */
   14dfe:	9a02      	ldr	r2, [sp, #8]
   14e00:	2300      	movs	r3, #0
   14e02:	6013      	str	r3, [r2, #0]
			err = lll_hfclock_on();
   14e04:	f7ff fe0c 	bl	14a20 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   14e08:	2800      	cmp	r0, #0
   14e0a:	db0f      	blt.n	14e2c <is_abort_cb+0x44>
   14e0c:	f06f 000a 	mvn.w	r0, #10
}
   14e10:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   14e12:	7bd3      	ldrb	r3, [r2, #15]
   14e14:	2127      	movs	r1, #39	; 0x27
   14e16:	fb01 2203 	mla	r2, r1, r3, r2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14e1a:	7c53      	ldrb	r3, [r2, #17]
   14e1c:	f003 030f 	and.w	r3, r3, #15
   14e20:	2b01      	cmp	r3, #1
		return 0;
   14e22:	bf14      	ite	ne
   14e24:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   14e28:	2000      	moveq	r0, #0
}
   14e2a:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   14e2c:	4a08      	ldr	r2, [pc, #32]	; (14e50 <is_abort_cb+0x68>)
   14e2e:	4909      	ldr	r1, [pc, #36]	; (14e54 <is_abort_cb+0x6c>)
   14e30:	4809      	ldr	r0, [pc, #36]	; (14e58 <is_abort_cb+0x70>)
   14e32:	f44f 73a5 	mov.w	r3, #330	; 0x14a
   14e36:	f004 ffde 	bl	19df6 <printk>
   14e3a:	4040      	eors	r0, r0
   14e3c:	f380 8811 	msr	BASEPRI, r0
   14e40:	f04f 0003 	mov.w	r0, #3
   14e44:	df02      	svc	2
   14e46:	f06f 000a 	mvn.w	r0, #10
}
   14e4a:	bd08      	pop	{r3, pc}
   14e4c:	00014dc1 	.word	0x00014dc1
   14e50:	000205ac 	.word	0x000205ac
   14e54:	00020590 	.word	0x00020590
   14e58:	0001fcdc 	.word	0x0001fcdc

00014e5c <abort_cb>:
{
   14e5c:	b510      	push	{r4, lr}
	if (!prepare_param) {
   14e5e:	b1d8      	cbz	r0, 14e98 <abort_cb+0x3c>
	err = lll_hfclock_off();
   14e60:	460c      	mov	r4, r1
   14e62:	f7ff fdf5 	bl	14a50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   14e66:	2800      	cmp	r0, #0
   14e68:	db04      	blt.n	14e74 <abort_cb+0x18>
	lll_done(param);
   14e6a:	4620      	mov	r0, r4
}
   14e6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   14e70:	f7ff bc70 	b.w	14754 <lll_done>
	LL_ASSERT(err >= 0);
   14e74:	4a0c      	ldr	r2, [pc, #48]	; (14ea8 <abort_cb+0x4c>)
   14e76:	490d      	ldr	r1, [pc, #52]	; (14eac <abort_cb+0x50>)
   14e78:	480d      	ldr	r0, [pc, #52]	; (14eb0 <abort_cb+0x54>)
   14e7a:	f44f 73b8 	mov.w	r3, #368	; 0x170
   14e7e:	f004 ffba 	bl	19df6 <printk>
   14e82:	4040      	eors	r0, r0
   14e84:	f380 8811 	msr	BASEPRI, r0
   14e88:	f04f 0003 	mov.w	r0, #3
   14e8c:	df02      	svc	2
	lll_done(param);
   14e8e:	4620      	mov	r0, r4
}
   14e90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   14e94:	f7ff bc5e 	b.w	14754 <lll_done>
		radio_isr_set(isr_abort, param);
   14e98:	4806      	ldr	r0, [pc, #24]	; (14eb4 <abort_cb+0x58>)
   14e9a:	f001 f903 	bl	160a4 <radio_isr_set>
}
   14e9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   14ea2:	f001 ba3b 	b.w	1631c <radio_disable>
   14ea6:	bf00      	nop
   14ea8:	000205ac 	.word	0x000205ac
   14eac:	00020590 	.word	0x00020590
   14eb0:	0001fcdc 	.word	0x0001fcdc
   14eb4:	00014a9d 	.word	0x00014a9d

00014eb8 <isr_done>:
{
   14eb8:	b510      	push	{r4, lr}
   14eba:	4604      	mov	r4, r0
	lll_isr_status_reset();
   14ebc:	f7ff fd1a 	bl	148f4 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   14ec0:	7b23      	ldrb	r3, [r4, #12]
   14ec2:	f003 0271 	and.w	r2, r3, #113	; 0x71
   14ec6:	2a01      	cmp	r2, #1
   14ec8:	d105      	bne.n	14ed6 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   14eca:	f3c3 0242 	ubfx	r2, r3, #1, #3
   14ece:	f362 1306 	bfi	r3, r2, #4, #3
   14ed2:	7323      	strb	r3, [r4, #12]
   14ed4:	b2db      	uxtb	r3, r3
	if (lll->chan_map_curr) {
   14ed6:	f013 0f70 	tst.w	r3, #112	; 0x70
   14eda:	d106      	bne.n	14eea <isr_done+0x32>
	radio_filter_disable();
   14edc:	f001 fad4 	bl	16488 <radio_filter_disable>
	lll_isr_cleanup(param);
   14ee0:	4620      	mov	r0, r4
}
   14ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   14ee6:	f7ff bd13 	b.w	14910 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   14eea:	4620      	mov	r0, r4
   14eec:	f7ff fe3a 	bl	14b64 <chan_prepare>
		radio_tx_enable();
   14ef0:	f001 fa0e 	bl	16310 <radio_tx_enable>
}
   14ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   14ef8:	f001 bbc4 	b.w	16684 <radio_tmr_end_capture>

00014efc <lll_adv_init>:
}
   14efc:	2000      	movs	r0, #0
   14efe:	4770      	bx	lr

00014f00 <lll_adv_reset>:
   14f00:	2000      	movs	r0, #0
   14f02:	4770      	bx	lr

00014f04 <lll_adv_prepare>:
{
   14f04:	b510      	push	{r4, lr}
   14f06:	b082      	sub	sp, #8
   14f08:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   14f0a:	f7ff fd89 	bl	14a20 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   14f0e:	2800      	cmp	r0, #0
   14f10:	db19      	blt.n	14f46 <lll_adv_prepare+0x42>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   14f12:	4a13      	ldr	r2, [pc, #76]	; (14f60 <lll_adv_prepare+0x5c>)
   14f14:	4913      	ldr	r1, [pc, #76]	; (14f64 <lll_adv_prepare+0x60>)
   14f16:	4814      	ldr	r0, [pc, #80]	; (14f68 <lll_adv_prepare+0x64>)
   14f18:	9400      	str	r4, [sp, #0]
   14f1a:	2300      	movs	r3, #0
   14f1c:	f7ff fb8e 	bl	1463c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   14f20:	b108      	cbz	r0, 14f26 <lll_adv_prepare+0x22>
   14f22:	3044      	adds	r0, #68	; 0x44
   14f24:	d101      	bne.n	14f2a <lll_adv_prepare+0x26>
}
   14f26:	b002      	add	sp, #8
   14f28:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   14f2a:	4a10      	ldr	r2, [pc, #64]	; (14f6c <lll_adv_prepare+0x68>)
   14f2c:	4910      	ldr	r1, [pc, #64]	; (14f70 <lll_adv_prepare+0x6c>)
   14f2e:	4811      	ldr	r0, [pc, #68]	; (14f74 <lll_adv_prepare+0x70>)
   14f30:	236a      	movs	r3, #106	; 0x6a
   14f32:	f004 ff60 	bl	19df6 <printk>
   14f36:	4040      	eors	r0, r0
   14f38:	f380 8811 	msr	BASEPRI, r0
   14f3c:	f04f 0003 	mov.w	r0, #3
   14f40:	df02      	svc	2
}
   14f42:	b002      	add	sp, #8
   14f44:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   14f46:	4a09      	ldr	r2, [pc, #36]	; (14f6c <lll_adv_prepare+0x68>)
   14f48:	490b      	ldr	r1, [pc, #44]	; (14f78 <lll_adv_prepare+0x74>)
   14f4a:	480a      	ldr	r0, [pc, #40]	; (14f74 <lll_adv_prepare+0x70>)
   14f4c:	2367      	movs	r3, #103	; 0x67
   14f4e:	f004 ff52 	bl	19df6 <printk>
   14f52:	4040      	eors	r0, r0
   14f54:	f380 8811 	msr	BASEPRI, r0
   14f58:	f04f 0003 	mov.w	r0, #3
   14f5c:	df02      	svc	2
   14f5e:	e7d8      	b.n	14f12 <lll_adv_prepare+0xe>
   14f60:	00014c89 	.word	0x00014c89
   14f64:	00014e5d 	.word	0x00014e5d
   14f68:	00014de9 	.word	0x00014de9
   14f6c:	000205ac 	.word	0x000205ac
   14f70:	00020614 	.word	0x00020614
   14f74:	0001fcdc 	.word	0x0001fcdc
   14f78:	00020590 	.word	0x00020590

00014f7c <lll_adv_scan_req_check>:
{
   14f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   14f80:	7b45      	ldrb	r5, [r0, #13]
{
   14f82:	f89d 8020 	ldrb.w	r8, [sp, #32]
   14f86:	4617      	mov	r7, r2
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   14f88:	07ea      	lsls	r2, r5, #31
{
   14f8a:	4689      	mov	r9, r1
   14f8c:	461e      	mov	r6, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   14f8e:	d50a      	bpl.n	14fa6 <lll_adv_scan_req_check+0x2a>
		(((lll->filter_policy & 0x01) != 0) &&
   14f90:	f1b8 0f00 	cmp.w	r8, #0
   14f94:	d017      	beq.n	14fc6 <lll_adv_scan_req_check+0x4a>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   14f96:	f899 3000 	ldrb.w	r3, [r9]
   14f9a:	ebb7 1fd3 	cmp.w	r7, r3, lsr #7
   14f9e:	d019      	beq.n	14fd4 <lll_adv_scan_req_check+0x58>
{
   14fa0:	2000      	movs	r0, #0
}
   14fa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14fa6:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   14fa8:	f811 0b02 	ldrb.w	r0, [r1], #2
   14fac:	9a09      	ldr	r2, [sp, #36]	; 0x24
   14fae:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14fb2:	f7ff f8c9 	bl	14148 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   14fb6:	2800      	cmp	r0, #0
   14fb8:	d1ed      	bne.n	14f96 <lll_adv_scan_req_check+0x1a>
		(((lll->filter_policy & 0x01) != 0) &&
   14fba:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   14fbc:	07db      	lsls	r3, r3, #31
   14fbe:	d5ef      	bpl.n	14fa0 <lll_adv_scan_req_check+0x24>
		(((lll->filter_policy & 0x01) != 0) &&
   14fc0:	f1b8 0f00 	cmp.w	r8, #0
   14fc4:	d1e7      	bne.n	14f96 <lll_adv_scan_req_check+0x1a>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   14fc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   14fc8:	7818      	ldrb	r0, [r3, #0]
   14fca:	f7ff f881 	bl	140d0 <ull_filter_lll_irk_whitelisted>
   14fce:	2800      	cmp	r0, #0
   14fd0:	d1e1      	bne.n	14f96 <lll_adv_scan_req_check+0x1a>
   14fd2:	e7e5      	b.n	14fa0 <lll_adv_scan_req_check+0x24>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   14fd4:	f109 0108 	add.w	r1, r9, #8
   14fd8:	4630      	mov	r0, r6
   14fda:	2206      	movs	r2, #6
   14fdc:	f006 fd15 	bl	1ba0a <memcmp>
	return (tx_addr == sr->rx_addr) &&
   14fe0:	fab0 f080 	clz	r0, r0
   14fe4:	0940      	lsrs	r0, r0, #5
}
   14fe6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   14fea:	bf00      	nop

00014fec <isr_rx>:
{
   14fec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   14ff0:	b085      	sub	sp, #20
   14ff2:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   14ff4:	f001 f9c0 	bl	16378 <radio_is_done>
	if (trx_done) {
   14ff8:	f010 0fff 	tst.w	r0, #255	; 0xff
   14ffc:	d10a      	bne.n	15014 <isr_rx+0x28>
	lll_isr_status_reset();
   14ffe:	f7ff fc79 	bl	148f4 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   15002:	48b7      	ldr	r0, [pc, #732]	; (152e0 <isr_rx+0x2f4>)
   15004:	4621      	mov	r1, r4
   15006:	f001 f84d 	bl	160a4 <radio_isr_set>
	radio_disable();
   1500a:	f001 f987 	bl	1631c <radio_disable>
}
   1500e:	b005      	add	sp, #20
   15010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		crc_ok = radio_crc_is_valid();
   15014:	f001 f9d0 	bl	163b8 <radio_crc_is_valid>
   15018:	4607      	mov	r7, r0
		devmatch_ok = radio_filter_has_match();
   1501a:	f001 fa47 	bl	164ac <radio_filter_has_match>
   1501e:	4605      	mov	r5, r0
		devmatch_id = radio_filter_match_get();
   15020:	f001 fa4e 	bl	164c0 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   15024:	f001 fc36 	bl	16894 <radio_ar_has_match>
   15028:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1502a:	f001 fc21 	bl	16870 <radio_ar_match_get>
   1502e:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   15030:	f001 fa04 	bl	1643c <radio_rssi_is_ready>
	lll_isr_status_reset();
   15034:	f7ff fc5e 	bl	148f4 <lll_isr_status_reset>
	if (crc_ok) {
   15038:	f017 0fff 	tst.w	r7, #255	; 0xff
   1503c:	d0e1      	beq.n	15002 <isr_rx+0x16>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1503e:	f016 07ff 	ands.w	r7, r6, #255	; 0xff
   15042:	f040 8086 	bne.w	15152 <isr_rx+0x166>
   15046:	20ff      	movs	r0, #255	; 0xff
   15048:	f88d 000f 	strb.w	r0, [sp, #15]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1504c:	f001 f9c2 	bl	163d4 <radio_pkt_scratch_get>
   15050:	f894 800f 	ldrb.w	r8, [r4, #15]
   15054:	4606      	mov	r6, r0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   15056:	7800      	ldrb	r0, [r0, #0]
   15058:	2311      	movs	r3, #17
   1505a:	f04f 0927 	mov.w	r9, #39	; 0x27
   1505e:	fb09 3808 	mla	r8, r9, r8, r3
   15062:	f000 030f 	and.w	r3, r0, #15
   15066:	eb04 0a08 	add.w	sl, r4, r8
   1506a:	2b03      	cmp	r3, #3
		devmatch_ok = radio_filter_has_match();
   1506c:	b2ed      	uxtb	r5, r5
	addr = pdu_adv->adv_ind.addr;
   1506e:	f10a 0b02 	add.w	fp, sl, #2
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   15072:	f000 8081 	beq.w	15178 <isr_rx+0x18c>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   15076:	2b05      	cmp	r3, #5
   15078:	d1c3      	bne.n	15002 <isr_rx+0x16>
   1507a:	7873      	ldrb	r3, [r6, #1]
   1507c:	2b22      	cmp	r3, #34	; 0x22
   1507e:	d1c0      	bne.n	15002 <isr_rx+0x16>
static inline bool isr_rx_ci_check(struct lll_adv *lll, struct pdu_adv *adv,
				   struct pdu_adv *ci, uint8_t devmatch_ok,
				   uint8_t *rl_idx)
{
	/* LL 4.3.2: filter policy shall be ignored for directed adv */
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   15080:	f814 2008 	ldrb.w	r2, [r4, r8]
   15084:	f002 020f 	and.w	r2, r2, #15
   15088:	2a01      	cmp	r2, #1
   1508a:	f000 80b7 	beq.w	151fc <isr_rx+0x210>
		       isr_rx_ci_adva_check(adv, ci) &&
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
	}

#if defined(CONFIG_BT_CTLR_PRIVACY)
	return ((((lll->filter_policy & 0x02) == 0) &&
   1508e:	7b63      	ldrb	r3, [r4, #13]
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
						ci->connect_ind.init_addr,
						rl_idx)) ||
		(((lll->filter_policy & 0x02) != 0) &&
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   15090:	0799      	lsls	r1, r3, #30
   15092:	d563      	bpl.n	1515c <isr_rx+0x170>
		(((lll->filter_policy & 0x02) != 0) &&
   15094:	2d00      	cmp	r5, #0
   15096:	f000 80a9 	beq.w	151ec <isr_rx+0x200>
}

static inline bool isr_rx_ci_adva_check(struct pdu_adv *adv,
					struct pdu_adv *ci)
{
	return (adv->tx_addr == ci->rx_addr) &&
   1509a:	f814 3008 	ldrb.w	r3, [r4, r8]
   1509e:	7831      	ldrb	r1, [r6, #0]
   150a0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   150a4:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   150a8:	d1ab      	bne.n	15002 <isr_rx+0x16>
   150aa:	f003 030f 	and.w	r3, r3, #15
   150ae:	2b01      	cmp	r3, #1
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   150b0:	f106 0508 	add.w	r5, r6, #8
	return (adv->tx_addr == ci->rx_addr) &&
   150b4:	f000 80cf 	beq.w	15256 <isr_rx+0x26a>
			 BDADDR_SIZE)) ||
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   150b8:	4629      	mov	r1, r5
   150ba:	4658      	mov	r0, fp
   150bc:	2206      	movs	r2, #6
   150be:	f006 fca4 	bl	1ba0a <memcmp>
			 BDADDR_SIZE)) ||
   150c2:	fab0 f080 	clz	r0, r0
   150c6:	0940      	lsrs	r0, r0, #5
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   150c8:	2800      	cmp	r0, #0
   150ca:	d09a      	beq.n	15002 <isr_rx+0x16>
				   &rl_idx) &&
   150cc:	68a3      	ldr	r3, [r4, #8]
   150ce:	2b00      	cmp	r3, #0
   150d0:	d097      	beq.n	15002 <isr_rx+0x16>
			rx = ull_pdu_rx_alloc_peek(4);
   150d2:	2004      	movs	r0, #4
   150d4:	f7fa f82e 	bl	f134 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   150d8:	2800      	cmp	r0, #0
   150da:	d092      	beq.n	15002 <isr_rx+0x16>
		radio_isr_set(isr_abort, lll);
   150dc:	4881      	ldr	r0, [pc, #516]	; (152e4 <isr_rx+0x2f8>)
   150de:	4621      	mov	r1, r4
   150e0:	f000 ffe0 	bl	160a4 <radio_isr_set>
		radio_disable();
   150e4:	f001 f91a 	bl	1631c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   150e8:	f001 f93c 	bl	16364 <radio_is_ready>
   150ec:	2800      	cmp	r0, #0
   150ee:	d16f      	bne.n	151d0 <isr_rx+0x1e4>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   150f0:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   150f2:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   150f6:	07db      	lsls	r3, r3, #31
   150f8:	7122      	strb	r2, [r4, #4]
   150fa:	d45b      	bmi.n	151b4 <isr_rx+0x1c8>
		rx = ull_pdu_rx_alloc();
   150fc:	f7fa f838 	bl	f170 <ull_pdu_rx_alloc>
		rx->hdr.handle = 0xffff;
   15100:	f64f 73ff 	movw	r3, #65535	; 0xffff
		rx = ull_pdu_rx_alloc();
   15104:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   15106:	220c      	movs	r2, #12
		rx->hdr.handle = 0xffff;
   15108:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1510a:	4631      	mov	r1, r6
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1510c:	7102      	strb	r2, [r0, #4]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1510e:	2224      	movs	r2, #36	; 0x24
   15110:	301c      	adds	r0, #28
   15112:	f006 fc8a 	bl	1ba2a <memcpy>
		ftr->param = lll;
   15116:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   15118:	f001 fa60 	bl	165dc <radio_tmr_start_get>
   1511c:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1511e:	f001 fab9 	bl	16694 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   15122:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   15124:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   15126:	4608      	mov	r0, r1
   15128:	f001 f8e0 	bl	162ec <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1512c:	1a24      	subs	r4, r4, r0
   1512e:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   15130:	2f00      	cmp	r7, #0
   15132:	d03d      	beq.n	151b0 <isr_rx+0x1c4>
   15134:	f89d 300f 	ldrb.w	r3, [sp, #15]
   15138:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1513a:	f7fa f819 	bl	f170 <ull_pdu_rx_alloc>
		ull_rx_put(rx->hdr.link, rx);
   1513e:	4629      	mov	r1, r5
			ftr->extra = ull_pdu_rx_alloc();
   15140:	60e8      	str	r0, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   15142:	6828      	ldr	r0, [r5, #0]
   15144:	f7fa f82c 	bl	f1a0 <ull_rx_put>
		ull_rx_sched();
   15148:	f7fa f83a 	bl	f1c0 <ull_rx_sched>
}
   1514c:	b005      	add	sp, #20
   1514e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   15152:	fa5f f088 	uxtb.w	r0, r8
   15156:	f7fe ff69 	bl	1402c <ull_filter_lll_rl_irk_idx>
   1515a:	e775      	b.n	15048 <isr_rx+0x5c>
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1515c:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15160:	f10d 020f 	add.w	r2, sp, #15
   15164:	1cb1      	adds	r1, r6, #2
   15166:	f7fe ffef 	bl	14148 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1516a:	2800      	cmp	r0, #0
   1516c:	d195      	bne.n	1509a <isr_rx+0xae>
		(((lll->filter_policy & 0x02) != 0) &&
   1516e:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   15170:	079a      	lsls	r2, r3, #30
   15172:	f57f af46 	bpl.w	15002 <isr_rx+0x16>
   15176:	e78d      	b.n	15094 <isr_rx+0xa8>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   15178:	7873      	ldrb	r3, [r6, #1]
   1517a:	2b0c      	cmp	r3, #12
   1517c:	f47f af41 	bne.w	15002 <isr_rx+0x16>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   15180:	f814 2008 	ldrb.w	r2, [r4, r8]
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   15184:	f002 030f 	and.w	r3, r2, #15
   15188:	2b01      	cmp	r3, #1
   1518a:	f43f af3a 	beq.w	15002 <isr_rx+0x16>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1518e:	f10d 030f 	add.w	r3, sp, #15
   15192:	9301      	str	r3, [sp, #4]
   15194:	9500      	str	r5, [sp, #0]
   15196:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1519a:	465b      	mov	r3, fp
   1519c:	4631      	mov	r1, r6
   1519e:	4620      	mov	r0, r4
   151a0:	f7ff feec 	bl	14f7c <lll_adv_scan_req_check>
	    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND) &&
   151a4:	2800      	cmp	r0, #0
   151a6:	d15f      	bne.n	15268 <isr_rx+0x27c>
   151a8:	7830      	ldrb	r0, [r6, #0]
   151aa:	f000 030f 	and.w	r3, r0, #15
   151ae:	e762      	b.n	15076 <isr_rx+0x8a>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   151b0:	23ff      	movs	r3, #255	; 0xff
   151b2:	e7c1      	b.n	15138 <isr_rx+0x14c>
		LL_ASSERT(!ret);
   151b4:	4a4c      	ldr	r2, [pc, #304]	; (152e8 <isr_rx+0x2fc>)
   151b6:	494d      	ldr	r1, [pc, #308]	; (152ec <isr_rx+0x300>)
   151b8:	484d      	ldr	r0, [pc, #308]	; (152f0 <isr_rx+0x304>)
   151ba:	f240 3319 	movw	r3, #793	; 0x319
   151be:	f004 fe1a 	bl	19df6 <printk>
   151c2:	4040      	eors	r0, r0
   151c4:	f380 8811 	msr	BASEPRI, r0
   151c8:	f04f 0003 	mov.w	r0, #3
   151cc:	df02      	svc	2
   151ce:	e795      	b.n	150fc <isr_rx+0x110>
		LL_ASSERT(!radio_is_ready());
   151d0:	4a45      	ldr	r2, [pc, #276]	; (152e8 <isr_rx+0x2fc>)
   151d2:	4948      	ldr	r1, [pc, #288]	; (152f4 <isr_rx+0x308>)
   151d4:	4846      	ldr	r0, [pc, #280]	; (152f0 <isr_rx+0x304>)
   151d6:	f240 330b 	movw	r3, #779	; 0x30b
   151da:	f004 fe0c 	bl	19df6 <printk>
   151de:	4040      	eors	r0, r0
   151e0:	f380 8811 	msr	BASEPRI, r0
   151e4:	f04f 0003 	mov.w	r0, #3
   151e8:	df02      	svc	2
   151ea:	e781      	b.n	150f0 <isr_rx+0x104>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   151ec:	f89d 000f 	ldrb.w	r0, [sp, #15]
   151f0:	f7fe ff6e 	bl	140d0 <ull_filter_lll_irk_whitelisted>
   151f4:	2800      	cmp	r0, #0
   151f6:	f47f af50 	bne.w	1509a <isr_rx+0xae>
   151fa:	e702      	b.n	15002 <isr_rx+0x16>
						      ci->connect_ind.init_addr,
   151fc:	1cb5      	adds	r5, r6, #2
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   151fe:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15202:	4629      	mov	r1, r5
   15204:	f10d 020f 	add.w	r2, sp, #15
   15208:	f7fe ff9e 	bl	14148 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(adv, ci) &&
   1520c:	2800      	cmp	r0, #0
   1520e:	f43f aef8 	beq.w	15002 <isr_rx+0x16>
	return (adv->tx_addr == ci->rx_addr) &&
   15212:	f814 3008 	ldrb.w	r3, [r4, r8]
   15216:	7831      	ldrb	r1, [r6, #0]
   15218:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1521c:	ebb2 1fd1 	cmp.w	r2, r1, lsr #7
   15220:	f47f aeef 	bne.w	15002 <isr_rx+0x16>
   15224:	f003 030f 	and.w	r3, r3, #15
   15228:	2b01      	cmp	r3, #1
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   1522a:	f106 0908 	add.w	r9, r6, #8
	return (adv->tx_addr == ci->rx_addr) &&
   1522e:	d04e      	beq.n	152ce <isr_rx+0x2e2>
		 (!memcmp(adv->adv_ind.addr, ci->connect_ind.adv_addr,
   15230:	4649      	mov	r1, r9
   15232:	4658      	mov	r0, fp
   15234:	2206      	movs	r2, #6
   15236:	f006 fbe8 	bl	1ba0a <memcmp>
			 BDADDR_SIZE)) ||
   1523a:	2800      	cmp	r0, #0
   1523c:	f47f aee1 	bne.w	15002 <isr_rx+0x16>
		       isr_rx_ci_tgta_check(lll, adv, ci, *rl_idx);
   15240:	f89d 000f 	ldrb.w	r0, [sp, #15]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   15244:	28ff      	cmp	r0, #255	; 0xff
   15246:	d02f      	beq.n	152a8 <isr_rx+0x2bc>
   15248:	7ba3      	ldrb	r3, [r4, #14]
   1524a:	2bff      	cmp	r3, #255	; 0xff
   1524c:	d02c      	beq.n	152a8 <isr_rx+0x2bc>
		return rl_idx == lll->rl_idx;
   1524e:	1ac5      	subs	r5, r0, r3
   15250:	4268      	negs	r0, r5
   15252:	4168      	adcs	r0, r5
   15254:	e738      	b.n	150c8 <isr_rx+0xdc>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   15256:	4629      	mov	r1, r5
   15258:	2206      	movs	r2, #6
   1525a:	4658      	mov	r0, fp
   1525c:	f006 fbd5 	bl	1ba0a <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   15260:	2800      	cmp	r0, #0
   15262:	f43f af33 	beq.w	150cc <isr_rx+0xe0>
   15266:	e727      	b.n	150b8 <isr_rx+0xcc>
		radio_isr_set(isr_done, lll);
   15268:	481d      	ldr	r0, [pc, #116]	; (152e0 <isr_rx+0x2f4>)
   1526a:	4621      	mov	r1, r4
   1526c:	f000 ff1a 	bl	160a4 <radio_isr_set>
		radio_switch_complete_and_disable();
   15270:	f001 f8ce 	bl	16410 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   15274:	f894 005f 	ldrb.w	r0, [r4, #95]	; 0x5f
   15278:	fb09 4000 	mla	r0, r9, r0, r4
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1527c:	3061      	adds	r0, #97	; 0x61
   1527e:	f001 f82f 	bl	162e0 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   15282:	f001 f86f 	bl	16364 <radio_is_ready>
   15286:	2800      	cmp	r0, #0
   15288:	f43f aec1 	beq.w	1500e <isr_rx+0x22>
   1528c:	4a16      	ldr	r2, [pc, #88]	; (152e8 <isr_rx+0x2fc>)
   1528e:	4919      	ldr	r1, [pc, #100]	; (152f4 <isr_rx+0x308>)
   15290:	4817      	ldr	r0, [pc, #92]	; (152f0 <isr_rx+0x304>)
   15292:	f240 23ce 	movw	r3, #718	; 0x2ce
   15296:	f004 fdae 	bl	19df6 <printk>
   1529a:	4040      	eors	r0, r0
   1529c:	f380 8811 	msr	BASEPRI, r0
   152a0:	f04f 0003 	mov.w	r0, #3
   152a4:	df02      	svc	2
		if (!err) {
   152a6:	e6b2      	b.n	1500e <isr_rx+0x22>
	return (adv->rx_addr == ci->tx_addr) &&
   152a8:	7833      	ldrb	r3, [r6, #0]
   152aa:	f814 2008 	ldrb.w	r2, [r4, r8]
   152ae:	f3c3 1380 	ubfx	r3, r3, #6, #1
   152b2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   152b6:	f47f aea4 	bne.w	15002 <isr_rx+0x16>
	       !memcmp(adv->direct_ind.tgt_addr, ci->connect_ind.init_addr,
   152ba:	4629      	mov	r1, r5
   152bc:	f10a 0008 	add.w	r0, sl, #8
   152c0:	2206      	movs	r2, #6
   152c2:	f006 fba2 	bl	1ba0a <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   152c6:	fab0 f080 	clz	r0, r0
   152ca:	0940      	lsrs	r0, r0, #5
		       isr_rx_ci_adva_check(adv, ci) &&
   152cc:	e6fc      	b.n	150c8 <isr_rx+0xdc>
		 !memcmp(adv->direct_ind.adv_addr, ci->connect_ind.adv_addr,
   152ce:	4649      	mov	r1, r9
   152d0:	2206      	movs	r2, #6
   152d2:	4658      	mov	r0, fp
   152d4:	f006 fb99 	bl	1ba0a <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   152d8:	2800      	cmp	r0, #0
   152da:	d0b1      	beq.n	15240 <isr_rx+0x254>
   152dc:	e7a8      	b.n	15230 <isr_rx+0x244>
   152de:	bf00      	nop
   152e0:	00014eb9 	.word	0x00014eb9
   152e4:	00014a9d 	.word	0x00014a9d
   152e8:	000205ac 	.word	0x000205ac
   152ec:	0001fe0c 	.word	0x0001fe0c
   152f0:	0001fcdc 	.word	0x0001fcdc
   152f4:	000205f8 	.word	0x000205f8

000152f8 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   152f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   152fa:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   152fc:	f7ff fafa 	bl	148f4 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   15300:	f7f9 ffca 	bl	f298 <ull_event_done_extra_get>
	LL_ASSERT(e);
   15304:	4604      	mov	r4, r0
   15306:	2800      	cmp	r0, #0
   15308:	d033      	beq.n	15372 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1530a:	4b21      	ldr	r3, [pc, #132]	; (15390 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1530c:	4921      	ldr	r1, [pc, #132]	; (15394 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1530e:	4a22      	ldr	r2, [pc, #136]	; (15398 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   15310:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   15312:	7808      	ldrb	r0, [r1, #0]
	e->mic_state = mic_state;
   15314:	7811      	ldrb	r1, [r2, #0]
	e->trx_cnt = trx_cnt;
   15316:	80a3      	strh	r3, [r4, #4]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   15318:	2201      	movs	r2, #1
	e->crc_valid = crc_valid;
   1531a:	71a0      	strb	r0, [r4, #6]
	e->mic_state = mic_state;
   1531c:	71e1      	strb	r1, [r4, #7]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1531e:	7022      	strb	r2, [r4, #0]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   15320:	b11b      	cbz	r3, 1532a <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   15322:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   15326:	2b00      	cmp	r3, #0
   15328:	db04      	blt.n	15334 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1532a:	4628      	mov	r0, r5
}
   1532c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   15330:	f7ff baee 	b.w	14910 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   15334:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   15338:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1533c:	2b02      	cmp	r3, #2
   1533e:	d016      	beq.n	1536e <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   15340:	2b04      	cmp	r3, #4
   15342:	bf14      	ite	ne
   15344:	2728      	movne	r7, #40	; 0x28
   15346:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1534a:	f001 f98f 	bl	1666c <radio_tmr_aa_restore>
   1534e:	4606      	mov	r6, r0
   15350:	f001 f992 	bl	16678 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   15354:	6b6a      	ldr	r2, [r5, #52]	; 0x34
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   15356:	1a36      	subs	r6, r6, r0
			lll->slave.window_widening_event_us = 0;
   15358:	2300      	movs	r3, #0
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1535a:	e9c4 2703 	strd	r2, r7, [r4, #12]
			e->drift.start_to_address_actual_us =
   1535e:	60a6      	str	r6, [r4, #8]
	lll_isr_cleanup(param);
   15360:	4628      	mov	r0, r5
			lll->slave.window_widening_event_us = 0;
   15362:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   15364:	63eb      	str	r3, [r5, #60]	; 0x3c
}
   15366:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1536a:	f7ff bad1 	b.w	14910 <lll_isr_cleanup>
	switch (phy) {
   1536e:	2718      	movs	r7, #24
   15370:	e7eb      	b.n	1534a <isr_done+0x52>
	LL_ASSERT(e);
   15372:	4a0a      	ldr	r2, [pc, #40]	; (1539c <isr_done+0xa4>)
   15374:	490a      	ldr	r1, [pc, #40]	; (153a0 <isr_done+0xa8>)
   15376:	480b      	ldr	r0, [pc, #44]	; (153a4 <isr_done+0xac>)
   15378:	f240 236d 	movw	r3, #621	; 0x26d
   1537c:	f004 fd3b 	bl	19df6 <printk>
   15380:	4040      	eors	r0, r0
   15382:	f380 8811 	msr	BASEPRI, r0
   15386:	f04f 0003 	mov.w	r0, #3
   1538a:	df02      	svc	2
   1538c:	e7bd      	b.n	1530a <isr_done+0x12>
   1538e:	bf00      	nop
   15390:	20002924 	.word	0x20002924
   15394:	200029d1 	.word	0x200029d1
   15398:	200029d2 	.word	0x200029d2
   1539c:	00020628 	.word	0x00020628
   153a0:	0001ff74 	.word	0x0001ff74
   153a4:	0001fcdc 	.word	0x0001fcdc

000153a8 <lll_conn_init>:
{
   153a8:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   153aa:	f001 f80f 	bl	163cc <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   153ae:	7803      	ldrb	r3, [r0, #0]
   153b0:	2201      	movs	r2, #1
   153b2:	f362 0301 	bfi	r3, r2, #0, #2
   153b6:	7003      	strb	r3, [r0, #0]
}
   153b8:	2000      	movs	r0, #0
   153ba:	bd08      	pop	{r3, pc}

000153bc <lll_conn_reset>:
}
   153bc:	2000      	movs	r0, #0
   153be:	4770      	bx	lr

000153c0 <lll_conn_flush>:
}
   153c0:	4770      	bx	lr
   153c2:	bf00      	nop

000153c4 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   153c4:	4805      	ldr	r0, [pc, #20]	; (153dc <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   153c6:	4906      	ldr	r1, [pc, #24]	; (153e0 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   153c8:	4a06      	ldr	r2, [pc, #24]	; (153e4 <lll_conn_prepare_reset+0x20>)
{
   153ca:	b410      	push	{r4}
	trx_cnt = 0U;
   153cc:	2300      	movs	r3, #0
   153ce:	4c06      	ldr	r4, [pc, #24]	; (153e8 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   153d0:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   153d2:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   153d4:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   153d6:	8023      	strh	r3, [r4, #0]
}
   153d8:	bc10      	pop	{r4}
   153da:	4770      	bx	lr
   153dc:	200029d1 	.word	0x200029d1
   153e0:	200029d0 	.word	0x200029d0
   153e4:	200029d2 	.word	0x200029d2
   153e8:	20002924 	.word	0x20002924

000153ec <lll_conn_abort_cb>:
{
   153ec:	b510      	push	{r4, lr}
	if (!prepare_param) {
   153ee:	b1d0      	cbz	r0, 15426 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   153f0:	460c      	mov	r4, r1
   153f2:	f7ff fb2d 	bl	14a50 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   153f6:	2800      	cmp	r0, #0
   153f8:	db04      	blt.n	15404 <lll_conn_abort_cb+0x18>
	lll_done(param);
   153fa:	4620      	mov	r0, r4
}
   153fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   15400:	f7ff b9a8 	b.w	14754 <lll_done>
	LL_ASSERT(err >= 0);
   15404:	4a0b      	ldr	r2, [pc, #44]	; (15434 <lll_conn_abort_cb+0x48>)
   15406:	490c      	ldr	r1, [pc, #48]	; (15438 <lll_conn_abort_cb+0x4c>)
   15408:	480c      	ldr	r0, [pc, #48]	; (1543c <lll_conn_abort_cb+0x50>)
   1540a:	239b      	movs	r3, #155	; 0x9b
   1540c:	f004 fcf3 	bl	19df6 <printk>
   15410:	4040      	eors	r0, r0
   15412:	f380 8811 	msr	BASEPRI, r0
   15416:	f04f 0003 	mov.w	r0, #3
   1541a:	df02      	svc	2
	lll_done(param);
   1541c:	4620      	mov	r0, r4
}
   1541e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   15422:	f7ff b997 	b.w	14754 <lll_done>
		radio_isr_set(isr_done, param);
   15426:	4806      	ldr	r0, [pc, #24]	; (15440 <lll_conn_abort_cb+0x54>)
   15428:	f000 fe3c 	bl	160a4 <radio_isr_set>
}
   1542c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   15430:	f000 bf74 	b.w	1631c <radio_disable>
   15434:	00020628 	.word	0x00020628
   15438:	00020590 	.word	0x00020590
   1543c:	0001fcdc 	.word	0x0001fcdc
   15440:	000152f9 	.word	0x000152f9

00015444 <lll_conn_rx_pkt_set>:
{
   15444:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15446:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   15448:	2001      	movs	r0, #1
   1544a:	f7f9 fe73 	bl	f134 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1544e:	4606      	mov	r6, r0
   15450:	b368      	cbz	r0, 154ae <lll_conn_rx_pkt_set+0x6a>
	phy = lll->phy_rx;
   15452:	f895 4049 	ldrb.w	r4, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   15456:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1545a:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1545e:	4620      	mov	r0, r4
   15460:	2100      	movs	r1, #0
   15462:	f000 fe65 	bl	16130 <radio_phy_set>
	} else if (lll->enc_rx) {
   15466:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1546a:	071b      	lsls	r3, r3, #28
   1546c:	d512      	bpl.n	15494 <lll_conn_rx_pkt_set+0x50>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1546e:	1d39      	adds	r1, r7, #4
   15470:	0062      	lsls	r2, r4, #1
   15472:	b2c9      	uxtb	r1, r1
   15474:	f042 0201 	orr.w	r2, r2, #1
   15478:	2008      	movs	r0, #8
   1547a:	f000 fef5 	bl	16268 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1547e:	f106 021c 	add.w	r2, r6, #28
   15482:	4621      	mov	r1, r4
   15484:	f105 0063 	add.w	r0, r5, #99	; 0x63
   15488:	f001 f910 	bl	166ac <radio_ccm_rx_pkt_set>
}
   1548c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   15490:	f000 bf20 	b.w	162d4 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   15494:	0062      	lsls	r2, r4, #1
   15496:	b2f9      	uxtb	r1, r7
   15498:	2008      	movs	r0, #8
   1549a:	f042 0201 	orr.w	r2, r2, #1
   1549e:	f000 fee3 	bl	16268 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   154a2:	f106 001c 	add.w	r0, r6, #28
}
   154a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   154aa:	f000 bf13 	b.w	162d4 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   154ae:	4a07      	ldr	r2, [pc, #28]	; (154cc <lll_conn_rx_pkt_set+0x88>)
   154b0:	4907      	ldr	r1, [pc, #28]	; (154d0 <lll_conn_rx_pkt_set+0x8c>)
   154b2:	4808      	ldr	r0, [pc, #32]	; (154d4 <lll_conn_rx_pkt_set+0x90>)
   154b4:	f240 13d5 	movw	r3, #469	; 0x1d5
   154b8:	f004 fc9d 	bl	19df6 <printk>
   154bc:	4040      	eors	r0, r0
   154be:	f380 8811 	msr	BASEPRI, r0
   154c2:	f04f 0003 	mov.w	r0, #3
   154c6:	df02      	svc	2
   154c8:	e7c3      	b.n	15452 <lll_conn_rx_pkt_set+0xe>
   154ca:	bf00      	nop
   154cc:	00020628 	.word	0x00020628
   154d0:	00020674 	.word	0x00020674
   154d4:	0001fcdc 	.word	0x0001fcdc

000154d8 <lll_conn_isr_tx>:
{
   154d8:	b538      	push	{r3, r4, r5, lr}
   154da:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   154dc:	f7ff f9f8 	bl	148d0 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   154e0:	2096      	movs	r0, #150	; 0x96
   154e2:	f001 f803 	bl	164ec <radio_tmr_tifs_set>
				     lll->phy_flags);
   154e6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   154ea:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   154ee:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   154f2:	f000 0007 	and.w	r0, r0, #7
   154f6:	f002 0207 	and.w	r2, r2, #7
   154fa:	2100      	movs	r1, #0
   154fc:	f000 ff7c 	bl	163f8 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   15500:	4620      	mov	r0, r4
   15502:	f7ff ff9f 	bl	15444 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   15506:	f000 ff2d 	bl	16364 <radio_is_ready>
   1550a:	bb58      	cbnz	r0, 15564 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1550c:	f001 f8c8 	bl	166a0 <radio_tmr_tifs_base_get>
   15510:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15512:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   15516:	2101      	movs	r1, #1
   15518:	f000 0007 	and.w	r0, r0, #7
   1551c:	f000 feea 	bl	162f4 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   15520:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   15524:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15528:	4405      	add	r5, r0
   1552a:	2b02      	cmp	r3, #2
   1552c:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   15530:	d016      	beq.n	15560 <lll_conn_isr_tx+0x88>
		return 376;
   15532:	2b04      	cmp	r3, #4
   15534:	bf14      	ite	ne
   15536:	2328      	movne	r3, #40	; 0x28
   15538:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1553c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   15540:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   15544:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   15548:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1554a:	f000 fecf 	bl	162ec <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1554e:	1a28      	subs	r0, r5, r0
   15550:	f001 f85e 	bl	16610 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   15554:	4621      	mov	r1, r4
   15556:	480a      	ldr	r0, [pc, #40]	; (15580 <lll_conn_isr_tx+0xa8>)
}
   15558:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1555c:	f000 bda2 	b.w	160a4 <radio_isr_set>
	switch (phy) {
   15560:	2318      	movs	r3, #24
   15562:	e7eb      	b.n	1553c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   15564:	4a07      	ldr	r2, [pc, #28]	; (15584 <lll_conn_isr_tx+0xac>)
   15566:	4908      	ldr	r1, [pc, #32]	; (15588 <lll_conn_isr_tx+0xb0>)
   15568:	4808      	ldr	r0, [pc, #32]	; (1558c <lll_conn_isr_tx+0xb4>)
   1556a:	f240 13a1 	movw	r3, #417	; 0x1a1
   1556e:	f004 fc42 	bl	19df6 <printk>
   15572:	4040      	eors	r0, r0
   15574:	f380 8811 	msr	BASEPRI, r0
   15578:	f04f 0003 	mov.w	r0, #3
   1557c:	df02      	svc	2
   1557e:	e7c5      	b.n	1550c <lll_conn_isr_tx+0x34>
   15580:	000156d1 	.word	0x000156d1
   15584:	00020628 	.word	0x00020628
   15588:	000205f8 	.word	0x000205f8
   1558c:	0001fcdc 	.word	0x0001fcdc

00015590 <lll_conn_tx_pkt_set>:
{
   15590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15592:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   15594:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   15598:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1559c:	f001 0507 	and.w	r5, r1, #7
{
   155a0:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   155a2:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   155a6:	4628      	mov	r0, r5
   155a8:	f000 fdc2 	bl	16130 <radio_phy_set>
	} else if (lll->enc_tx) {
   155ac:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   155b0:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   155b2:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   155b6:	d50f      	bpl.n	155d8 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   155b8:	1d39      	adds	r1, r7, #4
   155ba:	f042 0201 	orr.w	r2, r2, #1
   155be:	b2c9      	uxtb	r1, r1
   155c0:	2008      	movs	r0, #8
   155c2:	f000 fe51 	bl	16268 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   155c6:	4631      	mov	r1, r6
   155c8:	f104 0084 	add.w	r0, r4, #132	; 0x84
   155cc:	f001 f8c6 	bl	1675c <radio_ccm_tx_pkt_set>
}
   155d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   155d4:	f000 be84 	b.w	162e0 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   155d8:	b2f9      	uxtb	r1, r7
   155da:	2008      	movs	r0, #8
   155dc:	f042 0201 	orr.w	r2, r2, #1
   155e0:	f000 fe42 	bl	16268 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   155e4:	4630      	mov	r0, r6
}
   155e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   155ea:	f000 be79 	b.w	162e0 <radio_pkt_tx_set>
   155ee:	bf00      	nop

000155f0 <lll_conn_pdu_tx_prep>:
{
   155f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   155f4:	4604      	mov	r4, r0
   155f6:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   155f8:	aa01      	add	r2, sp, #4
   155fa:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   155fc:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   155fe:	6d21      	ldr	r1, [r4, #80]	; 0x50
   15600:	f7f5 fe6a 	bl	b2d8 <memq_peek>
	if (lll->empty || !link) {
   15604:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   15608:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1560a:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1560c:	d432      	bmi.n	15674 <lll_conn_pdu_tx_prep+0x84>
   1560e:	2800      	cmp	r0, #0
   15610:	d04e      	beq.n	156b0 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   15612:	9a01      	ldr	r2, [sp, #4]
   15614:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
		if (!lll->packet_tx_head_len) {
   15618:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1561c:	f102 0804 	add.w	r8, r2, #4
   15620:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   15624:	b913      	cbnz	r3, 1562c <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   15626:	786b      	ldrb	r3, [r5, #1]
   15628:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1562c:	b137      	cbz	r7, 1563c <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1562e:	f818 2007 	ldrb.w	r2, [r8, r7]
   15632:	2101      	movs	r1, #1
   15634:	f361 0201 	bfi	r2, r1, #0, #2
   15638:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1563c:	1bdb      	subs	r3, r3, r7
   1563e:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   15640:	4620      	mov	r0, r4
   15642:	f7fd fc13 	bl	12e6c <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   15646:	786b      	ldrb	r3, [r5, #1]
   15648:	4283      	cmp	r3, r0
   1564a:	d924      	bls.n	15696 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1564c:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1564e:	f818 3007 	ldrb.w	r3, [r8, r7]
   15652:	f043 0310 	orr.w	r3, r3, #16
   15656:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1565a:	f818 3007 	ldrb.w	r3, [r8, r7]
		p->resv = 0U;
   1565e:	2200      	movs	r2, #0
		p->rfu = 0U;
   15660:	f36f 1347 	bfc	r3, #5, #3
   15664:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   15668:	70aa      	strb	r2, [r5, #2]
	*pdu_data_tx = p;
   1566a:	f8c9 5000 	str.w	r5, [r9]
}
   1566e:	b003      	add	sp, #12
   15670:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   15674:	f043 0304 	orr.w	r3, r3, #4
   15678:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1567c:	f000 fea6 	bl	163cc <radio_pkt_empty_get>
   15680:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   15682:	b1e6      	cbz	r6, 156be <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   15684:	7803      	ldrb	r3, [r0, #0]
   15686:	f043 0310 	orr.w	r3, r3, #16
   1568a:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1568c:	f8c9 5000 	str.w	r5, [r9]
}
   15690:	b003      	add	sp, #12
   15692:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   15696:	6d23      	ldr	r3, [r4, #80]	; 0x50
   15698:	6832      	ldr	r2, [r6, #0]
   1569a:	429a      	cmp	r2, r3
			p->md = 1U;
   1569c:	f818 3007 	ldrb.w	r3, [r8, r7]
   156a0:	bf14      	ite	ne
   156a2:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   156a6:	f36f 1304 	bfceq	r3, #4, #1
   156aa:	f808 3007 	strb.w	r3, [r8, r7]
   156ae:	e7d4      	b.n	1565a <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   156b0:	f043 0304 	orr.w	r3, r3, #4
   156b4:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   156b8:	f000 fe88 	bl	163cc <radio_pkt_empty_get>
   156bc:	4605      	mov	r5, r0
			p->md = 0U;
   156be:	782b      	ldrb	r3, [r5, #0]
   156c0:	f36f 1304 	bfc	r3, #4, #1
   156c4:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   156c6:	f8c9 5000 	str.w	r5, [r9]
}
   156ca:	b003      	add	sp, #12
   156cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000156d0 <lll_conn_isr_rx>:
{
   156d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   156d2:	b083      	sub	sp, #12
   156d4:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   156d6:	f000 fe4f 	bl	16378 <radio_is_done>
	if (trx_done) {
   156da:	f010 0fff 	tst.w	r0, #255	; 0xff
   156de:	d109      	bne.n	156f4 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   156e0:	f7ff f8fe 	bl	148e0 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   156e4:	48ac      	ldr	r0, [pc, #688]	; (15998 <lll_conn_isr_rx+0x2c8>)
   156e6:	4621      	mov	r1, r4
   156e8:	f000 fcdc 	bl	160a4 <radio_isr_set>
		radio_disable();
   156ec:	f000 fe16 	bl	1631c <radio_disable>
}
   156f0:	b003      	add	sp, #12
   156f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		crc_ok = radio_crc_is_valid();
   156f4:	f000 fe60 	bl	163b8 <radio_crc_is_valid>
   156f8:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   156fa:	f000 fe9f 	bl	1643c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   156fe:	f7ff f8ef 	bl	148e0 <lll_isr_rx_status_reset>
	trx_cnt++;
   15702:	4aa6      	ldr	r2, [pc, #664]	; (1599c <lll_conn_isr_rx+0x2cc>)
   15704:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   15706:	2001      	movs	r0, #1
	trx_cnt++;
   15708:	4403      	add	r3, r0
   1570a:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1570c:	f7f9 fd12 	bl	f134 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   15710:	4606      	mov	r6, r0
   15712:	2800      	cmp	r0, #0
   15714:	f000 80b6 	beq.w	15884 <lll_conn_isr_rx+0x1b4>
	if (crc_ok) {
   15718:	2d00      	cmp	r5, #0
   1571a:	d155      	bne.n	157c8 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1571c:	4ba0      	ldr	r3, [pc, #640]	; (159a0 <lll_conn_isr_rx+0x2d0>)
   1571e:	781f      	ldrb	r7, [r3, #0]
   15720:	2f00      	cmp	r7, #0
   15722:	f040 809e 	bne.w	15862 <lll_conn_isr_rx+0x192>
		crc_expire--;
   15726:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   15728:	a901      	add	r1, sp, #4
   1572a:	4620      	mov	r0, r4
		crc_expire--;
   1572c:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1572e:	f7ff ff5f 	bl	155f0 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   15732:	2096      	movs	r0, #150	; 0x96
   15734:	f000 feda 	bl	164ec <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   15738:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1573c:	f000 0007 	and.w	r0, r0, #7
   15740:	f000 fe4c 	bl	163dc <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   15744:	4897      	ldr	r0, [pc, #604]	; (159a4 <lll_conn_isr_rx+0x2d4>)
   15746:	4621      	mov	r1, r4
   15748:	f000 fcac 	bl	160a4 <radio_isr_set>
		radio_tmr_end_capture();
   1574c:	f000 ff9a 	bl	16684 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   15750:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
   15754:	9901      	ldr	r1, [sp, #4]
	pdu_data_tx->nesn = lll->nesn;
   15756:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1575a:	7808      	ldrb	r0, [r1, #0]
	pdu_data_tx->sn = lll->sn;
   1575c:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   15760:	009b      	lsls	r3, r3, #2
   15762:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   15766:	f020 020c 	bic.w	r2, r0, #12
   1576a:	4313      	orrs	r3, r2
   1576c:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1576e:	4620      	mov	r0, r4
   15770:	f7ff ff0e 	bl	15590 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   15774:	f000 fdf6 	bl	16364 <radio_is_ready>
   15778:	2800      	cmp	r0, #0
   1577a:	f040 80b2 	bne.w	158e2 <lll_conn_isr_rx+0x212>
	if (!radio_tmr_aa_restore()) {
   1577e:	f000 ff75 	bl	1666c <radio_tmr_aa_restore>
   15782:	b170      	cbz	r0, 157a2 <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   15784:	b19d      	cbz	r5, 157ae <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   15786:	8a20      	ldrh	r0, [r4, #16]
   15788:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1578c:	4298      	cmp	r0, r3
   1578e:	f000 80c1 	beq.w	15914 <lll_conn_isr_rx+0x244>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   15792:	4629      	mov	r1, r5
   15794:	f7fd f992 	bl	12abc <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   15798:	b95f      	cbnz	r7, 157b2 <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   1579a:	f7f9 fd11 	bl	f1c0 <ull_rx_sched>
}
   1579e:	b003      	add	sp, #12
   157a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   157a2:	f000 ff57 	bl	16654 <radio_tmr_aa_get>
   157a6:	f000 ff5b 	bl	16660 <radio_tmr_aa_save>
	if (tx_release) {
   157aa:	2d00      	cmp	r5, #0
   157ac:	d1eb      	bne.n	15786 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   157ae:	2f00      	cmp	r7, #0
   157b0:	d09e      	beq.n	156f0 <lll_conn_isr_rx+0x20>
		ull_pdu_rx_alloc();
   157b2:	f7f9 fcdd 	bl	f170 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   157b6:	2302      	movs	r3, #2
   157b8:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   157ba:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   157bc:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   157be:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   157c0:	4631      	mov	r1, r6
   157c2:	f7f9 fced 	bl	f1a0 <ull_rx_put>
	if (is_ull_rx) {
   157c6:	e7e8      	b.n	1579a <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   157c8:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   157cc:	7f32      	ldrb	r2, [r6, #28]
   157ce:	f003 0101 	and.w	r1, r3, #1
   157d2:	f3c2 0080 	ubfx	r0, r2, #2, #1
   157d6:	4288      	cmp	r0, r1
   157d8:	d064      	beq.n	158a4 <lll_conn_isr_rx+0x1d4>
		if (lll->role) {
   157da:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   157de:	f081 0101 	eor.w	r1, r1, #1
   157e2:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   157e6:	2a00      	cmp	r2, #0
		lll->sn++;
   157e8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   157ec:	da05      	bge.n	157fa <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   157ee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   157f2:	f043 0301 	orr.w	r3, r3, #1
   157f6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   157fa:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   157fe:	075f      	lsls	r7, r3, #29
   15800:	d47d      	bmi.n	158fe <lll_conn_isr_rx+0x22e>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   15802:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   15806:	aa01      	add	r2, sp, #4
   15808:	f7f5 fd66 	bl	b2d8 <memq_peek>
		if (link) {
   1580c:	4607      	mov	r7, r0
   1580e:	2800      	cmp	r0, #0
   15810:	d07b      	beq.n	1590a <lll_conn_isr_rx+0x23a>
					       lll->packet_tx_head_offset);
   15812:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   15816:	9b01      	ldr	r3, [sp, #4]
   15818:	4413      	add	r3, r2
   1581a:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1581c:	b151      	cbz	r1, 15834 <lll_conn_isr_rx+0x164>
				if (lll->enc_tx) {
   1581e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   15822:	06dd      	lsls	r5, r3, #27
   15824:	d506      	bpl.n	15834 <lll_conn_isr_rx+0x164>
					lll->ccm_tx.counter++;
   15826:	e9d4 3025 	ldrd	r3, r0, [r4, #148]	; 0x94
   1582a:	3301      	adds	r3, #1
   1582c:	f140 0000 	adc.w	r0, r0, #0
   15830:	e9c4 3025 	strd	r3, r0, [r4, #148]	; 0x94
			if (offset < lll->packet_tx_head_len) {
   15834:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   15838:	440a      	add	r2, r1
   1583a:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1583c:	429a      	cmp	r2, r3
   1583e:	d378      	bcc.n	15932 <lll_conn_isr_rx+0x262>
			} else if (offset == lll->packet_tx_head_len) {
   15840:	d163      	bne.n	1590a <lll_conn_isr_rx+0x23a>
				lll->packet_tx_head_len = 0;
   15842:	2200      	movs	r2, #0
   15844:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   15848:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1584a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1584e:	f7f5 fd4b 	bl	b2e8 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   15852:	9d01      	ldr	r5, [sp, #4]
   15854:	7f32      	ldrb	r2, [r6, #28]
   15856:	682b      	ldr	r3, [r5, #0]
   15858:	603b      	str	r3, [r7, #0]
				tx->next = link;
   1585a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1585e:	602f      	str	r7, [r5, #0]
				*tx_release = tx;
   15860:	e021      	b.n	158a6 <lll_conn_isr_rx+0x1d6>
		crc_expire--;
   15862:	3f01      	subs	r7, #1
   15864:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   15866:	a901      	add	r1, sp, #4
   15868:	4620      	mov	r0, r4
		crc_expire--;
   1586a:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1586c:	f7ff fec0 	bl	155f0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   15870:	2f00      	cmp	r7, #0
   15872:	f040 80dc 	bne.w	15a2e <lll_conn_isr_rx+0x35e>
		radio_isr_set(isr_done, param);
   15876:	4848      	ldr	r0, [pc, #288]	; (15998 <lll_conn_isr_rx+0x2c8>)
   15878:	4621      	mov	r1, r4
   1587a:	f000 fc13 	bl	160a4 <radio_isr_set>
			radio_switch_complete_and_disable();
   1587e:	f000 fdc7 	bl	16410 <radio_switch_complete_and_disable>
   15882:	e765      	b.n	15750 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   15884:	4a48      	ldr	r2, [pc, #288]	; (159a8 <lll_conn_isr_rx+0x2d8>)
   15886:	4949      	ldr	r1, [pc, #292]	; (159ac <lll_conn_isr_rx+0x2dc>)
   15888:	4849      	ldr	r0, [pc, #292]	; (159b0 <lll_conn_isr_rx+0x2e0>)
   1588a:	23d0      	movs	r3, #208	; 0xd0
   1588c:	f004 fab3 	bl	19df6 <printk>
   15890:	4040      	eors	r0, r0
   15892:	f380 8811 	msr	BASEPRI, r0
   15896:	f04f 0003 	mov.w	r0, #3
   1589a:	df02      	svc	2
	if (crc_ok) {
   1589c:	2d00      	cmp	r5, #0
   1589e:	f43f af3d 	beq.w	1571c <lll_conn_isr_rx+0x4c>
   158a2:	e791      	b.n	157c8 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   158a4:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   158a6:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   158aa:	f3c3 0340 	ubfx	r3, r3, #1, #1
   158ae:	429a      	cmp	r2, r3
   158b0:	d046      	beq.n	15940 <lll_conn_isr_rx+0x270>
	is_rx_enqueue = 0U;
   158b2:	2700      	movs	r7, #0
		crc_expire = 0U;
   158b4:	4a3a      	ldr	r2, [pc, #232]	; (159a0 <lll_conn_isr_rx+0x2d0>)
		crc_valid = 1U;
   158b6:	4b3f      	ldr	r3, [pc, #252]	; (159b4 <lll_conn_isr_rx+0x2e4>)
		crc_expire = 0U;
   158b8:	2100      	movs	r1, #0
   158ba:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   158bc:	4620      	mov	r0, r4
		crc_valid = 1U;
   158be:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   158c0:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   158c2:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   158c4:	f7ff fe94 	bl	155f0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   158c8:	7f33      	ldrb	r3, [r6, #28]
   158ca:	06d9      	lsls	r1, r3, #27
   158cc:	f53f af31 	bmi.w	15732 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   158d0:	9b01      	ldr	r3, [sp, #4]
   158d2:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   158d4:	06d2      	lsls	r2, r2, #27
   158d6:	f53f af2c 	bmi.w	15732 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   158da:	785b      	ldrb	r3, [r3, #1]
   158dc:	2b00      	cmp	r3, #0
   158de:	d0ca      	beq.n	15876 <lll_conn_isr_rx+0x1a6>
   158e0:	e727      	b.n	15732 <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   158e2:	4a31      	ldr	r2, [pc, #196]	; (159a8 <lll_conn_isr_rx+0x2d8>)
   158e4:	4934      	ldr	r1, [pc, #208]	; (159b8 <lll_conn_isr_rx+0x2e8>)
   158e6:	4832      	ldr	r0, [pc, #200]	; (159b0 <lll_conn_isr_rx+0x2e0>)
   158e8:	f44f 739e 	mov.w	r3, #316	; 0x13c
   158ec:	f004 fa83 	bl	19df6 <printk>
   158f0:	4040      	eors	r0, r0
   158f2:	f380 8811 	msr	BASEPRI, r0
   158f6:	f04f 0003 	mov.w	r0, #3
   158fa:	df02      	svc	2
   158fc:	e73f      	b.n	1577e <lll_conn_isr_rx+0xae>
			lll->empty = 0;
   158fe:	f36f 0382 	bfc	r3, #2, #1
   15902:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   15906:	f000 fd61 	bl	163cc <radio_pkt_empty_get>
		if (link) {
   1590a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1590e:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   15910:	2500      	movs	r5, #0
   15912:	e7c8      	b.n	158a6 <lll_conn_isr_rx+0x1d6>
		LL_ASSERT(lll->handle != 0xFFFF);
   15914:	4a24      	ldr	r2, [pc, #144]	; (159a8 <lll_conn_isr_rx+0x2d8>)
   15916:	4929      	ldr	r1, [pc, #164]	; (159bc <lll_conn_isr_rx+0x2ec>)
   15918:	4825      	ldr	r0, [pc, #148]	; (159b0 <lll_conn_isr_rx+0x2e0>)
   1591a:	f240 134b 	movw	r3, #331	; 0x14b
   1591e:	f004 fa6a 	bl	19df6 <printk>
   15922:	4040      	eors	r0, r0
   15924:	f380 8811 	msr	BASEPRI, r0
   15928:	f04f 0003 	mov.w	r0, #3
   1592c:	df02      	svc	2
   1592e:	8a20      	ldrh	r0, [r4, #16]
   15930:	e72f      	b.n	15792 <lll_conn_isr_rx+0xc2>
				lll->packet_tx_head_offset = offset;
   15932:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   15936:	7f32      	ldrb	r2, [r6, #28]
   15938:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
	tx_release = NULL;
   1593c:	2500      	movs	r5, #0
   1593e:	e7b2      	b.n	158a6 <lll_conn_isr_rx+0x1d6>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   15940:	2003      	movs	r0, #3
   15942:	f7f9 fbf7 	bl	f134 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   15946:	2800      	cmp	r0, #0
   15948:	d0b3      	beq.n	158b2 <lll_conn_isr_rx+0x1e2>
		lll->nesn++;
   1594a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1594e:	f083 0302 	eor.w	r3, r3, #2
   15952:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   15956:	7f73      	ldrb	r3, [r6, #29]
   15958:	2b00      	cmp	r3, #0
   1595a:	d0aa      	beq.n	158b2 <lll_conn_isr_rx+0x1e2>
			if (lll->enc_rx) {
   1595c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   15960:	0718      	lsls	r0, r3, #28
   15962:	d401      	bmi.n	15968 <lll_conn_isr_rx+0x298>
			*is_rx_enqueue = 1U;
   15964:	2701      	movs	r7, #1
   15966:	e7a5      	b.n	158b4 <lll_conn_isr_rx+0x1e4>
				done = radio_ccm_is_done();
   15968:	f000 ff22 	bl	167b0 <radio_ccm_is_done>
				LL_ASSERT(done);
   1596c:	2800      	cmp	r0, #0
   1596e:	d050      	beq.n	15a12 <lll_conn_isr_rx+0x342>
				bool mic_failure = !radio_ccm_mic_is_valid();
   15970:	f000 ff40 	bl	167f4 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   15974:	2800      	cmp	r0, #0
   15976:	d13c      	bne.n	159f2 <lll_conn_isr_rx+0x322>
				    lll->ccm_rx.counter == 0 &&
   15978:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1597c:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   15980:	4313      	orrs	r3, r2
   15982:	d104      	bne.n	1598e <lll_conn_isr_rx+0x2be>
				    (pdu_data_rx->ll_id ==
   15984:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   15986:	f003 0303 	and.w	r3, r3, #3
   1598a:	2b03      	cmp	r3, #3
   1598c:	d01a      	beq.n	159c4 <lll_conn_isr_rx+0x2f4>
					mic_state = LLL_CONN_MIC_FAIL;
   1598e:	4b0c      	ldr	r3, [pc, #48]	; (159c0 <lll_conn_isr_rx+0x2f0>)
   15990:	2202      	movs	r2, #2
   15992:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   15994:	2700      	movs	r7, #0
   15996:	e6f2      	b.n	1577e <lll_conn_isr_rx+0xae>
   15998:	000152f9 	.word	0x000152f9
   1599c:	20002924 	.word	0x20002924
   159a0:	200029d0 	.word	0x200029d0
   159a4:	000154d9 	.word	0x000154d9
   159a8:	00020628 	.word	0x00020628
   159ac:	00020674 	.word	0x00020674
   159b0:	0001fcdc 	.word	0x0001fcdc
   159b4:	200029d1 	.word	0x200029d1
   159b8:	000205f8 	.word	0x000205f8
   159bc:	00020684 	.word	0x00020684
   159c0:	200029d2 	.word	0x200029d2
						radio_pkt_scratch_get();
   159c4:	f000 fd06 	bl	163d4 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   159c8:	7842      	ldrb	r2, [r0, #1]
   159ca:	2a1b      	cmp	r2, #27
						radio_pkt_scratch_get();
   159cc:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   159ce:	d8de      	bhi.n	1598e <lll_conn_isr_rx+0x2be>
						memcpy(pdu_data_rx,
   159d0:	3203      	adds	r2, #3
   159d2:	f106 001c 	add.w	r0, r6, #28
   159d6:	f006 f828 	bl	1ba2a <memcpy>
						lll->ccm_rx.counter--;
   159da:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   159de:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   159e2:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   159e6:	f142 32ff 	adc.w	r2, r2, #4294967295	; 0xffffffff
   159ea:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   159ee:	f8c4 2077 	str.w	r2, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   159f2:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   159f6:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
				mic_state = LLL_CONN_MIC_PASS;
   159fa:	490e      	ldr	r1, [pc, #56]	; (15a34 <lll_conn_isr_rx+0x364>)
				lll->ccm_rx.counter++;
   159fc:	3301      	adds	r3, #1
						lll->ccm_rx.counter--;
   159fe:	f104 0073 	add.w	r0, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   15a02:	f142 0200 	adc.w	r2, r2, #0
				mic_state = LLL_CONN_MIC_PASS;
   15a06:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   15a08:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   15a0c:	700f      	strb	r7, [r1, #0]
				lll->ccm_rx.counter++;
   15a0e:	6042      	str	r2, [r0, #4]
		if (err) {
   15a10:	e750      	b.n	158b4 <lll_conn_isr_rx+0x1e4>
				LL_ASSERT(done);
   15a12:	4a09      	ldr	r2, [pc, #36]	; (15a38 <lll_conn_isr_rx+0x368>)
   15a14:	4909      	ldr	r1, [pc, #36]	; (15a3c <lll_conn_isr_rx+0x36c>)
   15a16:	480a      	ldr	r0, [pc, #40]	; (15a40 <lll_conn_isr_rx+0x370>)
   15a18:	f240 330d 	movw	r3, #781	; 0x30d
   15a1c:	f004 f9eb 	bl	19df6 <printk>
   15a20:	4040      	eors	r0, r0
   15a22:	f380 8811 	msr	BASEPRI, r0
   15a26:	f04f 0003 	mov.w	r0, #3
   15a2a:	df02      	svc	2
   15a2c:	e7a0      	b.n	15970 <lll_conn_isr_rx+0x2a0>
	is_rx_enqueue = 0U;
   15a2e:	462f      	mov	r7, r5
   15a30:	e67f      	b.n	15732 <lll_conn_isr_rx+0x62>
   15a32:	bf00      	nop
   15a34:	200029d2 	.word	0x200029d2
   15a38:	00020628 	.word	0x00020628
   15a3c:	0002067c 	.word	0x0002067c
   15a40:	0001fcdc 	.word	0x0001fcdc

00015a44 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   15a44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   15a48:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   15a4a:	8a22      	ldrh	r2, [r4, #16]
   15a4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   15a50:	429a      	cmp	r2, r3
{
   15a52:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   15a54:	f000 80c6 	beq.w	15be4 <prepare_cb+0x1a0>
		DEBUG_RADIO_START_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   15a58:	4605      	mov	r5, r0
   15a5a:	f7ff fcb3 	bl	153c4 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   15a5e:	8ae1      	ldrh	r1, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   15a60:	8b60      	ldrh	r0, [r4, #26]
	lll->event_counter = lll->event_counter + lll->latency_prepare;

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;

	if (lll->data_chan_sel) {
   15a62:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   15a66:	1e4a      	subs	r2, r1, #1
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   15a68:	4401      	add	r1, r0
   15a6a:	8361      	strh	r1, [r4, #26]
	lll->latency_prepare = 0;
   15a6c:	2100      	movs	r1, #0
	lll->latency_event = lll->latency_prepare - 1;
   15a6e:	b292      	uxth	r2, r2
	lll->latency_prepare = 0;
   15a70:	82e1      	strh	r1, [r4, #22]
	if (lll->data_chan_sel) {
   15a72:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   15a74:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   15a76:	f100 8092 	bmi.w	15b9e <prepare_cb+0x15a>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   15a7a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15a7e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   15a82:	9300      	str	r3, [sp, #0]
   15a84:	f104 0023 	add.w	r0, r4, #35	; 0x23
   15a88:	f104 031c 	add.w	r3, r4, #28
   15a8c:	f7fd fb62 	bl	13154 <lll_chan_sel_1>
   15a90:	4606      	mov	r6, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   15a92:	e9d4 710c 	ldrd	r7, r1, [r4, #48]	; 0x30
		lll->slave.window_widening_prepare_us;
	lll->slave.window_widening_prepare_us = 0;
	if (lll->slave.window_widening_event_us >
	    lll->slave.window_widening_max_us) {
   15a96:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   15a98:	e9d4 030e 	ldrd	r0, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_event_us +=
   15a9c:	4439      	add	r1, r7
		lll->slave.window_widening_event_us =
   15a9e:	428a      	cmp	r2, r1
   15aa0:	bf28      	it	cs
   15aa2:	460a      	movcs	r2, r1
	lll->slave.window_size_event_us +=
   15aa4:	4403      	add	r3, r0
	lll->slave.window_widening_prepare_us = 0;
   15aa6:	f04f 0800 	mov.w	r8, #0
		lll->slave.window_widening_event_us =
   15aaa:	6362      	str	r2, [r4, #52]	; 0x34
	lll->slave.window_size_event_us +=
   15aac:	63e3      	str	r3, [r4, #60]	; 0x3c
	lll->slave.window_widening_prepare_us = 0;
   15aae:	f8c4 8030 	str.w	r8, [r4, #48]	; 0x30
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   15ab2:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38

	/* Start setting up Radio h/w */
	radio_reset();
   15ab6:	f000 fb15 	bl	160e4 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
   15aba:	f994 00a5 	ldrsb.w	r0, [r4, #165]	; 0xa5
   15abe:	f000 fb63 	bl	16188 <radio_tx_power_set>
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   15ac2:	4620      	mov	r0, r4
   15ac4:	f7ff fcbe 	bl	15444 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   15ac8:	f104 0008 	add.w	r0, r4, #8
   15acc:	f000 fbb2 	bl	16234 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   15ad0:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   15ad2:	7ba2      	ldrb	r2, [r4, #14]
			     ((uint32_t)lll->crc_init[0])));
   15ad4:	7b21      	ldrb	r1, [r4, #12]
			     ((uint32_t)lll->crc_init[1] << 8) |
   15ad6:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   15ad8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   15adc:	4319      	orrs	r1, r3
   15ade:	f240 605b 	movw	r0, #1627	; 0x65b
   15ae2:	f000 fc5d 	bl	163a0 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   15ae6:	4630      	mov	r0, r6
   15ae8:	f7fe fea8 	bl	1483c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   15aec:	4621      	mov	r1, r4
   15aee:	4849      	ldr	r0, [pc, #292]	; (15c14 <prepare_cb+0x1d0>)
   15af0:	f000 fad8 	bl	160a4 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   15af4:	2096      	movs	r0, #150	; 0x96
   15af6:	f000 fcf9 	bl	164ec <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   15afa:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   15afe:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   15b02:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   15b06:	4641      	mov	r1, r8
   15b08:	f002 0207 	and.w	r2, r2, #7
   15b0c:	f000 0007 	and.w	r0, r0, #7
   15b10:	f000 fc72 	bl	163f8 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   15b14:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   15b16:	682e      	ldr	r6, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   15b18:	4638      	mov	r0, r7
   15b1a:	f7fe fe73 	bl	14804 <lll_evt_offset_get>
   15b1e:	4406      	add	r6, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   15b20:	686a      	ldr	r2, [r5, #4]
   15b22:	f106 0109 	add.w	r1, r6, #9
   15b26:	4640      	mov	r0, r8
   15b28:	f000 fcec 	bl	16504 <radio_tmr_start>
   15b2c:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   15b2e:	f000 fd7d 	bl	1662c <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   15b32:	4640      	mov	r0, r8
   15b34:	f000 fd94 	bl	16660 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   15b38:	6b62      	ldr	r2, [r4, #52]	; 0x34
	hcto = remainder_us +
   15b3a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   15b3c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   15b40:	3230      	adds	r2, #48	; 0x30
	hcto = remainder_us +
   15b42:	eb03 0342 	add.w	r3, r3, r2, lsl #1
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   15b46:	f000 0007 	and.w	r0, r0, #7
   15b4a:	2101      	movs	r1, #1
	hcto = remainder_us +
   15b4c:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   15b4e:	f000 fbcf 	bl	162f0 <radio_rx_ready_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   15b52:	f894 2049 	ldrb.w	r2, [r4, #73]	; 0x49
   15b56:	f002 0207 	and.w	r2, r2, #7
   15b5a:	2a02      	cmp	r2, #2
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   15b5c:	4405      	add	r5, r0
   15b5e:	d03f      	beq.n	15be0 <prepare_cb+0x19c>
		return 40;
   15b60:	2a04      	cmp	r2, #4
   15b62:	bf0c      	ite	eq
   15b64:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   15b68:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15b6a:	4610      	mov	r0, r2
   15b6c:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   15b6e:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   15b70:	f000 fbc0 	bl	162f4 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   15b74:	4428      	add	r0, r5
   15b76:	f000 fd4b 	bl	16610 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   15b7a:	7c21      	ldrb	r1, [r4, #16]
   15b7c:	3103      	adds	r1, #3
   15b7e:	4632      	mov	r2, r6
   15b80:	4638      	mov	r0, r7
   15b82:	b2c9      	uxtb	r1, r1
   15b84:	f7fe fe48 	bl	14818 <lll_preempt_calc>
   15b88:	b1a0      	cbz	r0, 15bb4 <prepare_cb+0x170>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   15b8a:	4823      	ldr	r0, [pc, #140]	; (15c18 <prepare_cb+0x1d4>)
   15b8c:	4621      	mov	r1, r4
   15b8e:	f000 fa89 	bl	160a4 <radio_isr_set>
		radio_disable();
   15b92:	f000 fbc3 	bl	1631c <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   15b96:	2000      	movs	r0, #0
   15b98:	b002      	add	sp, #8
   15b9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   15b9e:	4410      	add	r0, r2
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   15ba0:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   15ba2:	b280      	uxth	r0, r0
   15ba4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   15ba8:	f104 021c 	add.w	r2, r4, #28
   15bac:	f7fd fb0e 	bl	131cc <lll_chan_sel_2>
   15bb0:	4606      	mov	r6, r0
   15bb2:	e76e      	b.n	15a92 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   15bb4:	4620      	mov	r0, r4
   15bb6:	f7fe fdcb 	bl	14750 <lll_prepare_done>
		LL_ASSERT(!ret);
   15bba:	2800      	cmp	r0, #0
   15bbc:	d0eb      	beq.n	15b96 <prepare_cb+0x152>
   15bbe:	4a17      	ldr	r2, [pc, #92]	; (15c1c <prepare_cb+0x1d8>)
   15bc0:	4917      	ldr	r1, [pc, #92]	; (15c20 <prepare_cb+0x1dc>)
   15bc2:	4818      	ldr	r0, [pc, #96]	; (15c24 <prepare_cb+0x1e0>)
   15bc4:	f240 1313 	movw	r3, #275	; 0x113
   15bc8:	f004 f915 	bl	19df6 <printk>
   15bcc:	4040      	eors	r0, r0
   15bce:	f380 8811 	msr	BASEPRI, r0
   15bd2:	f04f 0003 	mov.w	r0, #3
   15bd6:	df02      	svc	2
}
   15bd8:	2000      	movs	r0, #0
   15bda:	b002      	add	sp, #8
   15bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   15be0:	2318      	movs	r3, #24
   15be2:	e7c2      	b.n	15b6a <prepare_cb+0x126>
		err = lll_hfclock_off();
   15be4:	f7fe ff34 	bl	14a50 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   15be8:	2800      	cmp	r0, #0
   15bea:	db06      	blt.n	15bfa <prepare_cb+0x1b6>
		lll_done(NULL);
   15bec:	2000      	movs	r0, #0
   15bee:	f7fe fdb1 	bl	14754 <lll_done>
}
   15bf2:	2000      	movs	r0, #0
   15bf4:	b002      	add	sp, #8
   15bf6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   15bfa:	4a08      	ldr	r2, [pc, #32]	; (15c1c <prepare_cb+0x1d8>)
   15bfc:	490a      	ldr	r1, [pc, #40]	; (15c28 <prepare_cb+0x1e4>)
   15bfe:	4809      	ldr	r0, [pc, #36]	; (15c24 <prepare_cb+0x1e0>)
   15c00:	237d      	movs	r3, #125	; 0x7d
   15c02:	f004 f8f8 	bl	19df6 <printk>
   15c06:	4040      	eors	r0, r0
   15c08:	f380 8811 	msr	BASEPRI, r0
   15c0c:	f04f 0003 	mov.w	r0, #3
   15c10:	df02      	svc	2
   15c12:	e7eb      	b.n	15bec <prepare_cb+0x1a8>
   15c14:	000156d1 	.word	0x000156d1
   15c18:	0001497d 	.word	0x0001497d
   15c1c:	0002069c 	.word	0x0002069c
   15c20:	0001fe0c 	.word	0x0001fe0c
   15c24:	0001fcdc 	.word	0x0001fcdc
   15c28:	00020590 	.word	0x00020590

00015c2c <lll_slave_prepare>:
{
   15c2c:	b570      	push	{r4, r5, r6, lr}
   15c2e:	b082      	sub	sp, #8
   15c30:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   15c32:	f7fe fef5 	bl	14a20 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   15c36:	2800      	cmp	r0, #0
   15c38:	db29      	blt.n	15c8e <lll_slave_prepare+0x62>
	lll = p->param;
   15c3a:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   15c3c:	8923      	ldrh	r3, [r4, #8]
	    lll->slave.window_widening_periodic_us * elapsed;
   15c3e:	6a88      	ldr	r0, [r1, #40]	; 0x28
	lll->slave.window_widening_prepare_us +=
   15c40:	6b0d      	ldr	r5, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   15c42:	8ace      	ldrh	r6, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   15c44:	4a18      	ldr	r2, [pc, #96]	; (15ca8 <lll_slave_prepare+0x7c>)
	elapsed = p->lazy + 1;
   15c46:	3301      	adds	r3, #1
   15c48:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   15c4a:	fb00 5503 	mla	r5, r0, r3, r5
	    lll->slave.window_widening_max_us) {
   15c4e:	6ac8      	ldr	r0, [r1, #44]	; 0x2c
		lll->slave.window_widening_prepare_us =
   15c50:	42a8      	cmp	r0, r5
   15c52:	bf28      	it	cs
   15c54:	4628      	movcs	r0, r5
	lll->latency_prepare += elapsed;
   15c56:	4433      	add	r3, r6
		lll->slave.window_widening_prepare_us =
   15c58:	6308      	str	r0, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   15c5a:	82cb      	strh	r3, [r1, #22]
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   15c5c:	4813      	ldr	r0, [pc, #76]	; (15cac <lll_slave_prepare+0x80>)
   15c5e:	4914      	ldr	r1, [pc, #80]	; (15cb0 <lll_slave_prepare+0x84>)
   15c60:	9400      	str	r4, [sp, #0]
   15c62:	2300      	movs	r3, #0
   15c64:	f7fe fcea 	bl	1463c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   15c68:	b108      	cbz	r0, 15c6e <lll_slave_prepare+0x42>
   15c6a:	3044      	adds	r0, #68	; 0x44
   15c6c:	d101      	bne.n	15c72 <lll_slave_prepare+0x46>
}
   15c6e:	b002      	add	sp, #8
   15c70:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   15c72:	4a10      	ldr	r2, [pc, #64]	; (15cb4 <lll_slave_prepare+0x88>)
   15c74:	4910      	ldr	r1, [pc, #64]	; (15cb8 <lll_slave_prepare+0x8c>)
   15c76:	4811      	ldr	r0, [pc, #68]	; (15cbc <lll_slave_prepare+0x90>)
   15c78:	235f      	movs	r3, #95	; 0x5f
   15c7a:	f004 f8bc 	bl	19df6 <printk>
   15c7e:	4040      	eors	r0, r0
   15c80:	f380 8811 	msr	BASEPRI, r0
   15c84:	f04f 0003 	mov.w	r0, #3
   15c88:	df02      	svc	2
}
   15c8a:	b002      	add	sp, #8
   15c8c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(err >= 0);
   15c8e:	4a09      	ldr	r2, [pc, #36]	; (15cb4 <lll_slave_prepare+0x88>)
   15c90:	490b      	ldr	r1, [pc, #44]	; (15cc0 <lll_slave_prepare+0x94>)
   15c92:	480a      	ldr	r0, [pc, #40]	; (15cbc <lll_slave_prepare+0x90>)
   15c94:	2348      	movs	r3, #72	; 0x48
   15c96:	f004 f8ae 	bl	19df6 <printk>
   15c9a:	4040      	eors	r0, r0
   15c9c:	f380 8811 	msr	BASEPRI, r0
   15ca0:	f04f 0003 	mov.w	r0, #3
   15ca4:	df02      	svc	2
   15ca6:	e7c8      	b.n	15c3a <lll_slave_prepare+0xe>
   15ca8:	00015a45 	.word	0x00015a45
   15cac:	000147fd 	.word	0x000147fd
   15cb0:	000153ed 	.word	0x000153ed
   15cb4:	0002069c 	.word	0x0002069c
   15cb8:	00020614 	.word	0x00020614
   15cbc:	0001fcdc 	.word	0x0001fcdc
   15cc0:	00020590 	.word	0x00020590

00015cc4 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   15cc4:	4b05      	ldr	r3, [pc, #20]	; (15cdc <cntr_init+0x18>)
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
   15cc6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   15cca:	2100      	movs	r1, #0
   15ccc:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   15cd0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   15cd4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   15cd8:	4770      	bx	lr
   15cda:	bf00      	nop
   15cdc:	4000b000 	.word	0x4000b000

00015ce0 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   15ce0:	4b05      	ldr	r3, [pc, #20]	; (15cf8 <cntr_start+0x18>)
   15ce2:	7818      	ldrb	r0, [r3, #0]
   15ce4:	1c42      	adds	r2, r0, #1
   15ce6:	701a      	strb	r2, [r3, #0]
   15ce8:	b918      	cbnz	r0, 15cf2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   15cea:	4b04      	ldr	r3, [pc, #16]	; (15cfc <cntr_start+0x1c>)
   15cec:	2201      	movs	r2, #1
   15cee:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   15cf0:	4770      	bx	lr
		return 1;
   15cf2:	2001      	movs	r0, #1
}
   15cf4:	4770      	bx	lr
   15cf6:	bf00      	nop
   15cf8:	200029d3 	.word	0x200029d3
   15cfc:	4000b000 	.word	0x4000b000

00015d00 <cntr_stop>:

uint32_t cntr_stop(void)
{
   15d00:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   15d02:	4c0d      	ldr	r4, [pc, #52]	; (15d38 <cntr_stop+0x38>)
   15d04:	7820      	ldrb	r0, [r4, #0]
   15d06:	b148      	cbz	r0, 15d1c <cntr_stop+0x1c>

	if (--_refcount) {
   15d08:	3801      	subs	r0, #1
   15d0a:	b2c0      	uxtb	r0, r0
   15d0c:	7020      	strb	r0, [r4, #0]
   15d0e:	b918      	cbnz	r0, 15d18 <cntr_stop+0x18>
   15d10:	4b0a      	ldr	r3, [pc, #40]	; (15d3c <cntr_stop+0x3c>)
   15d12:	2201      	movs	r2, #1
   15d14:	601a      	str	r2, [r3, #0]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   15d16:	bd10      	pop	{r4, pc}
		return 1;
   15d18:	2001      	movs	r0, #1
}
   15d1a:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   15d1c:	4a08      	ldr	r2, [pc, #32]	; (15d40 <cntr_stop+0x40>)
   15d1e:	4909      	ldr	r1, [pc, #36]	; (15d44 <cntr_stop+0x44>)
   15d20:	4809      	ldr	r0, [pc, #36]	; (15d48 <cntr_stop+0x48>)
   15d22:	232e      	movs	r3, #46	; 0x2e
   15d24:	f004 f867 	bl	19df6 <printk>
   15d28:	4040      	eors	r0, r0
   15d2a:	f380 8811 	msr	BASEPRI, r0
   15d2e:	f04f 0003 	mov.w	r0, #3
   15d32:	df02      	svc	2
   15d34:	7820      	ldrb	r0, [r4, #0]
   15d36:	e7e7      	b.n	15d08 <cntr_stop+0x8>
   15d38:	200029d3 	.word	0x200029d3
   15d3c:	4000b004 	.word	0x4000b004
   15d40:	000206e8 	.word	0x000206e8
   15d44:	00020734 	.word	0x00020734
   15d48:	0001fcdc 	.word	0x0001fcdc

00015d4c <cntr_cnt_get>:
     return p_reg->COUNTER;
   15d4c:	4b01      	ldr	r3, [pc, #4]	; (15d54 <cntr_cnt_get+0x8>)
   15d4e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   15d52:	4770      	bx	lr
   15d54:	4000b000 	.word	0x4000b000

00015d58 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   15d58:	4b02      	ldr	r3, [pc, #8]	; (15d64 <cntr_cmp_set+0xc>)
   15d5a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   15d5e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   15d62:	4770      	bx	lr
   15d64:	4000b000 	.word	0x4000b000

00015d68 <do_ecb>:
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   15d68:	b4f0      	push	{r4, r5, r6, r7}
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   15d6a:	4b12      	ldr	r3, [pc, #72]	; (15db4 <do_ecb+0x4c>)

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15d6c:	4d12      	ldr	r5, [pc, #72]	; (15db8 <do_ecb+0x50>)
   15d6e:	2601      	movs	r6, #1
   15d70:	4634      	mov	r4, r6
		NRF_ECB->EVENTS_ENDECB = 0;
   15d72:	2100      	movs	r1, #0
   15d74:	602c      	str	r4, [r5, #0]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   15d76:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   15d7a:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   15d7e:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
   15d82:	601c      	str	r4, [r3, #0]
}
   15d84:	e005      	b.n	15d92 <do_ecb+0x2a>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15d86:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15d8a:	b932      	cbnz	r2, 15d9a <do_ecb+0x32>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   15d8c:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   15d90:	b11a      	cbz	r2, 15d9a <do_ecb+0x32>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   15d92:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   15d96:	2a00      	cmp	r2, #0
   15d98:	d0f5      	beq.n	15d86 <do_ecb+0x1e>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   15d9a:	602e      	str	r6, [r5, #0]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   15d9c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   15da0:	2a00      	cmp	r2, #0
   15da2:	d1e7      	bne.n	15d74 <do_ecb+0xc>
   15da4:	f8d3 7504 	ldr.w	r7, [r3, #1284]	; 0x504
   15da8:	2f00      	cmp	r7, #0
   15daa:	d0e3      	beq.n	15d74 <do_ecb+0xc>

	NRF_ECB->ECBDATAPTR = 0;
}
   15dac:	bcf0      	pop	{r4, r5, r6, r7}
	NRF_ECB->ECBDATAPTR = 0;
   15dae:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   15db2:	4770      	bx	lr
   15db4:	4000e000 	.word	0x4000e000
   15db8:	4000e004 	.word	0x4000e004

00015dbc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   15dbc:	b570      	push	{r4, r5, r6, lr}
   15dbe:	b08c      	sub	sp, #48	; 0x30
   15dc0:	460e      	mov	r6, r1
   15dc2:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   15dc4:	4601      	mov	r1, r0
   15dc6:	2210      	movs	r2, #16
   15dc8:	4668      	mov	r0, sp
{
   15dca:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   15dcc:	f7f5 fa54 	bl	b278 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   15dd0:	2210      	movs	r2, #16
   15dd2:	eb0d 0002 	add.w	r0, sp, r2
   15dd6:	4631      	mov	r1, r6
   15dd8:	f7f5 fa4e 	bl	b278 <mem_rcopy>

	do_ecb(&ecb);
   15ddc:	4668      	mov	r0, sp
   15dde:	f7ff ffc3 	bl	15d68 <do_ecb>

	if (cipher_text_le) {
   15de2:	b125      	cbz	r5, 15dee <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   15de4:	4628      	mov	r0, r5
   15de6:	2210      	movs	r2, #16
   15de8:	a908      	add	r1, sp, #32
   15dea:	f7f5 fa45 	bl	b278 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   15dee:	b124      	cbz	r4, 15dfa <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   15df0:	4620      	mov	r0, r4
   15df2:	2210      	movs	r2, #16
   15df4:	a908      	add	r1, sp, #32
   15df6:	f005 fe18 	bl	1ba2a <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   15dfa:	b00c      	add	sp, #48	; 0x30
   15dfc:	bd70      	pop	{r4, r5, r6, pc}
   15dfe:	bf00      	nop

00015e00 <sw_switch.isra.0>:
#endif

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
static uint8_t sw_tifs_toggle;

static void sw_switch(uint8_t dir, uint8_t phy_curr, uint8_t flags_curr, uint8_t phy_next,
   15e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		      uint8_t flags_next)
{
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   15e04:	4e94      	ldr	r6, [pc, #592]	; (16058 <sw_switch.isra.0+0x258>)
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15e06:	f8df 8268 	ldr.w	r8, [pc, #616]	; 16070 <sw_switch.isra.0+0x270>
   15e0a:	f996 3000 	ldrsb.w	r3, [r6]
   15e0e:	4c93      	ldr	r4, [pc, #588]	; (1605c <sw_switch.isra.0+0x25c>)
   15e10:	7835      	ldrb	r5, [r6, #0]
   15e12:	f8c8 4560 	str.w	r4, [r8, #1376]	; 0x560
   15e16:	f103 040b 	add.w	r4, r3, #11
   15e1a:	b2e4      	uxtb	r4, r4
   15e1c:	00e4      	lsls	r4, r4, #3
   15e1e:	f104 4780 	add.w	r7, r4, #1073741824	; 0x40000000
	 * (TX/RX).
	 */
	nrf_ppi_event_endpoint_setup(
		NRF_PPI,
		radio_enable_ppi,
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   15e22:	f8df e250 	ldr.w	lr, [pc, #592]	; 16074 <sw_switch.isra.0+0x274>
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   15e26:	ea4f 0cc5 	mov.w	ip, r5, lsl #3
   15e2a:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
   15e2e:	f10c 4480 	add.w	r4, ip, #1073741824	; 0x40000000
   15e32:	f504 34f8 	add.w	r4, r4, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   15e36:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15e3a:	f8c8 4564 	str.w	r4, [r8, #1380]	; 0x564

NRF_STATIC_INLINE void nrf_ppi_event_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                    nrf_ppi_channel_t channel,
                                                    uint32_t          eep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
   15e3e:	f8c7 e510 	str.w	lr, [r7, #1296]	; 0x510
	uint8_t cc = SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle);
	uint32_t delay;

	hal_radio_sw_switch_setup(cc, ppi, sw_tifs_toggle);

	if (dir) {
   15e42:	b308      	cbz	r0, 15e88 <sw_switch.isra.0+0x88>
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   15e44:	2a02      	cmp	r2, #2
   15e46:	ea4f 0885 	mov.w	r8, r5, lsl #2
   15e4a:	d057      	beq.n	15efc <sw_switch.isra.0+0xfc>
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_TXEN_TXIDLE_TX_1M_NS;
   15e4c:	f24a 543c 	movw	r4, #42300	; 0xa53c
   15e50:	f649 70c4 	movw	r0, #40900	; 0x9fc4
   15e54:	2a04      	cmp	r2, #4
   15e56:	bf18      	it	ne
   15e58:	4604      	movne	r4, r0
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   15e5a:	2902      	cmp	r1, #2
   15e5c:	f000 80c7 	beq.w	15fee <sw_switch.isra.0+0x1ee>
   15e60:	2904      	cmp	r1, #4
   15e62:	f040 80bc 	bne.w	15fde <sw_switch.isra.0+0x1de>
   15e66:	487e      	ldr	r0, [pc, #504]	; (16060 <sw_switch.isra.0+0x260>)
   15e68:	f504 44eb 	add.w	r4, r4, #30080	; 0x7580
   15e6c:	3414      	adds	r4, #20
   15e6e:	fba0 0404 	umull	r0, r4, r0, r4
   15e72:	09a4      	lsrs	r4, r4, #6

NRF_STATIC_INLINE void nrf_ppi_task_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                   nrf_ppi_channel_t channel,
                                                   uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15e74:	487b      	ldr	r0, [pc, #492]	; (16064 <sw_switch.isra.0+0x264>)
   15e76:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
		hal_radio_txen_on_sw_switch(ppi);

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
		uint8_t ppi_en =
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   15e7a:	f103 0010 	add.w	r0, r3, #16
		uint8_t ppi_dis =
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   15e7e:	f103 0708 	add.w	r7, r3, #8
		uint8_t ppi_en =
   15e82:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   15e84:	b2ff      	uxtb	r7, r7
			    sw_tifs_toggle);

		if (phy_curr & BIT(2)) {
   15e86:	e04c      	b.n	15f22 <sw_switch.isra.0+0x122>

#if defined(CONFIG_BT_CTLR_PHY_CODED)
#if defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
		if (1) {
			uint8_t ppi_en =
				HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(
   15e88:	f103 0210 	add.w	r2, r3, #16
					sw_tifs_toggle);
			uint8_t ppi_dis =
				HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   15e8c:	3308      	adds	r3, #8
   15e8e:	b2d2      	uxtb	r2, r2
   15e90:	b2db      	uxtb	r3, r3
   15e92:	00d2      	lsls	r2, r2, #3
   15e94:	00db      	lsls	r3, r3, #3
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_EVT(
		ppi_dis) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_EVT(cc_reg);
	HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_REGISTER_TASK(
		ppi_dis) =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   15e96:	4974      	ldr	r1, [pc, #464]	; (16068 <sw_switch.isra.0+0x268>)
   15e98:	4c74      	ldr	r4, [pc, #464]	; (1606c <sw_switch.isra.0+0x26c>)
   15e9a:	f8c7 4514 	str.w	r4, [r7, #1300]	; 0x514
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   15e9e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   15ea2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15ea6:	f502 32f8 	add.w	r2, r2, #126976	; 0x1f000
   15eaa:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   15eae:	4461      	add	r1, ip
		ppi_en) = 0;
   15eb0:	f8c2 0510 	str.w	r0, [r2, #1296]	; 0x510
		delay = HAL_RADIO_NS2US_CEIL(
   15eb4:	2428      	movs	r4, #40	; 0x28
		ppi_en) = 0;
   15eb6:	f8c2 0514 	str.w	r0, [r2, #1300]	; 0x514
		ppi_dis) =
   15eba:	f8c3 e510 	str.w	lr, [r3, #1296]	; 0x510
		ppi_dis) =
   15ebe:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
		}
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
	}

	if (delay <
   15ec2:	00ab      	lsls	r3, r5, #2
   15ec4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   15ec8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
		SW_SWITCH_TIMER->CC[cc]) {
   15ecc:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
	if (delay <
   15ed0:	42a2      	cmp	r2, r4
   15ed2:	d80d      	bhi.n	15ef0 <sw_switch.isra.0+0xf0>

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   15ed4:	2201      	movs	r2, #1
   15ed6:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    p_reg->CHENSET = mask;
   15eda:	4b65      	ldr	r3, [pc, #404]	; (16070 <sw_switch.isra.0+0x270>)
	 * always need to capture the PDU END time-stamp.
	 */
	radio_tmr_end_capture();
#endif /* CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

	sw_tifs_toggle += 1U;
   15edc:	3501      	adds	r5, #1
	sw_tifs_toggle &= 1;
   15ede:	f005 0501 	and.w	r5, r5, #1
   15ee2:	f44f 6290 	mov.w	r2, #1152	; 0x480
   15ee6:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   15eea:	7035      	strb	r5, [r6, #0]
}
   15eec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				 SW_SWITCH_TIMER->CC[cc] - delay);
   15ef0:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   15ef4:	1b14      	subs	r4, r2, r4
   15ef6:	f8c3 4540 	str.w	r4, [r3, #1344]	; 0x540
}
   15efa:	e7ee      	b.n	15eda <sw_switch.isra.0+0xda>
   15efc:	2902      	cmp	r1, #2
   15efe:	f000 80a0 	beq.w	16042 <sw_switch.isra.0+0x242>
   15f02:	2904      	cmp	r1, #4
   15f04:	f000 809b 	beq.w	1603e <sw_switch.isra.0+0x23e>
   15f08:	2431      	movs	r4, #49	; 0x31
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15f0a:	4856      	ldr	r0, [pc, #344]	; (16064 <sw_switch.isra.0+0x264>)
   15f0c:	f8c7 0514 	str.w	r0, [r7, #1300]	; 0x514
		if (phy_curr & BIT(2)) {
   15f10:	f011 0f04 	tst.w	r1, #4
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   15f14:	f103 0010 	add.w	r0, r3, #16
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   15f18:	f103 0708 	add.w	r7, r3, #8
		uint8_t ppi_en =
   15f1c:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   15f1e:	b2ff      	uxtb	r7, r7
		if (phy_curr & BIT(2)) {
   15f20:	d074      	beq.n	1600c <sw_switch.isra.0+0x20c>
	switch (phy) {
   15f22:	2a02      	cmp	r2, #2
   15f24:	f000 8088 	beq.w	16038 <sw_switch.isra.0+0x238>
   15f28:	f24a 19b8 	movw	r9, #41400	; 0xa1b8
   15f2c:	f24a 7e30 	movw	lr, #42800	; 0xa730
   15f30:	2a04      	cmp	r2, #4
   15f32:	bf14      	ite	ne
   15f34:	464a      	movne	r2, r9
   15f36:	4672      	moveq	r2, lr
			    SW_SWITCH_TIMER_S2_EVTS_COMP(sw_tifs_toggle);
   15f38:	3302      	adds	r3, #2
   15f3a:	fa5f f983 	uxtb.w	r9, r3
   15f3e:	ea4f 0e89 	mov.w	lr, r9, lsl #2
				SW_SWITCH_TIMER->CC[cc];
   15f42:	f8df b13c 	ldr.w	fp, [pc, #316]	; 16080 <sw_switch.isra.0+0x280>
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   15f46:	f8df a118 	ldr.w	sl, [pc, #280]	; 16060 <sw_switch.isra.0+0x260>
   15f4a:	f10e 4e80 	add.w	lr, lr, #1073741824	; 0x40000000
				SW_SWITCH_TIMER->CC[cc];
   15f4e:	f505 73a8 	add.w	r3, r5, #336	; 0x150
   15f52:	f50e 4e10 	add.w	lr, lr, #36864	; 0x9000
   15f56:	f85b 3023 	ldr.w	r3, [fp, r3, lsl #2]
			SW_SWITCH_TIMER->CC[cc_s2] =
   15f5a:	f8ce 3540 	str.w	r3, [lr, #1344]	; 0x540
#if defined(CONFIG_BT_CTLR_PHY_CODED)
	case BIT(2):
		if (flags & 0x01) {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S8_NS;
		} else {
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_NS;
   15f5e:	f246 0b18 	movw	fp, #24600	; 0x6018
   15f62:	f242 43b8 	movw	r3, #9400	; 0x24b8
   15f66:	2904      	cmp	r1, #4
   15f68:	bf14      	ite	ne
   15f6a:	4619      	movne	r1, r3
   15f6c:	4659      	moveq	r1, fp
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   15f6e:	440a      	add	r2, r1
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   15f70:	f8de 3540 	ldr.w	r3, [lr, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   15f74:	fbaa 1202 	umull	r1, r2, sl, r2
			if (delay_s2 < SW_SWITCH_TIMER->CC[cc_s2]) {
   15f78:	ebb3 1f92 	cmp.w	r3, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   15f7c:	bf88      	it	hi
   15f7e:	f8de 3540 	ldrhi.w	r3, [lr, #1344]	; 0x540
			delay_s2 = HAL_RADIO_NS2US_ROUND(
   15f82:	ea4f 1192 	mov.w	r1, r2, lsr #6
				SW_SWITCH_TIMER->CC[cc_s2] -= delay_s2;
   15f86:	bf8c      	ite	hi
   15f88:	1a5b      	subhi	r3, r3, r1
				SW_SWITCH_TIMER->CC[cc_s2] = 1;
   15f8a:	2301      	movls	r3, #1
   15f8c:	00c0      	lsls	r0, r0, #3
   15f8e:	00ff      	lsls	r7, r7, #3
   15f90:	f8ce 3540 	str.w	r3, [lr, #1344]	; 0x540
   15f94:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   15f98:	4b36      	ldr	r3, [pc, #216]	; (16074 <sw_switch.isra.0+0x274>)
	    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   15f9a:	f8df e0cc 	ldr.w	lr, [pc, #204]	; 16068 <sw_switch.isra.0+0x268>
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   15f9e:	4936      	ldr	r1, [pc, #216]	; (16078 <sw_switch.isra.0+0x278>)
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   15fa0:	4a33      	ldr	r2, [pc, #204]	; (16070 <sw_switch.isra.0+0x270>)
   15fa2:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   15fa6:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   15faa:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(cc_s2);
   15fae:	eb03 0389 	add.w	r3, r3, r9, lsl #2
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   15fb2:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 16064 <sw_switch.isra.0+0x264>
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(ppi_en) =
   15fb6:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
	    HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   15fba:	44e6      	add	lr, ip
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_TASK(ppi_en) =
   15fbc:	f8c0 9514 	str.w	r9, [r0, #1300]	; 0x514
		HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_TASK(
   15fc0:	4441      	add	r1, r8
	    ppi_dis)	=
   15fc2:	f8c7 3510 	str.w	r3, [r7, #1296]	; 0x510
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   15fc6:	482d      	ldr	r0, [pc, #180]	; (1607c <sw_switch.isra.0+0x27c>)
	    ppi_dis) =
   15fc8:	f8c7 e514 	str.w	lr, [r7, #1300]	; 0x514
    p_reg->CHENSET = mask;
   15fcc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_EVT =
   15fd0:	f8c2 05a0 	str.w	r0, [r2, #1440]	; 0x5a0
	HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI_REGISTER_TASK =
   15fd4:	f8c2 15a4 	str.w	r1, [r2, #1444]	; 0x5a4
   15fd8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   15fdc:	e771      	b.n	15ec2 <sw_switch.isra.0+0xc2>
   15fde:	4820      	ldr	r0, [pc, #128]	; (16060 <sw_switch.isra.0+0x260>)
   15fe0:	f504 541a 	add.w	r4, r4, #9856	; 0x2680
   15fe4:	342c      	adds	r4, #44	; 0x2c
   15fe6:	fba0 0404 	umull	r0, r4, r0, r4
   15fea:	09a4      	lsrs	r4, r4, #6
   15fec:	e78d      	b.n	15f0a <sw_switch.isra.0+0x10a>
		delay = HAL_RADIO_NS2US_ROUND(
   15fee:	4a1c      	ldr	r2, [pc, #112]	; (16060 <sw_switch.isra.0+0x260>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   15ff0:	491c      	ldr	r1, [pc, #112]	; (16064 <sw_switch.isra.0+0x264>)
   15ff2:	f8c7 1514 	str.w	r1, [r7, #1300]	; 0x514
   15ff6:	f504 54ab 	add.w	r4, r4, #5472	; 0x1560
   15ffa:	341c      	adds	r4, #28
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   15ffc:	f103 0010 	add.w	r0, r3, #16
		delay = HAL_RADIO_NS2US_ROUND(
   16000:	fba2 2404 	umull	r2, r4, r2, r4
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   16004:	3308      	adds	r3, #8
		delay = HAL_RADIO_NS2US_ROUND(
   16006:	09a4      	lsrs	r4, r4, #6
		uint8_t ppi_en =
   16008:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   1600a:	b2df      	uxtb	r7, r3
	HAL_SW_SWITCH_RADIO_ENABLE_PPI_REGISTER_EVT(
   1600c:	00c0      	lsls	r0, r0, #3
   1600e:	00ff      	lsls	r7, r7, #3
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   16010:	4b15      	ldr	r3, [pc, #84]	; (16068 <sw_switch.isra.0+0x268>)
   16012:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   16016:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   1601a:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
   1601e:	f507 37f8 	add.w	r7, r7, #126976	; 0x1f000
		ppi_en) = 0;
   16022:	2200      	movs	r2, #0
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_TASK(
   16024:	4463      	add	r3, ip
		ppi_en) = 0;
   16026:	f8c0 2510 	str.w	r2, [r0, #1296]	; 0x510
		ppi_en) = 0;
   1602a:	f8c0 2514 	str.w	r2, [r0, #1300]	; 0x514
		ppi_dis) =
   1602e:	f8c7 e510 	str.w	lr, [r7, #1296]	; 0x510
		ppi_dis) =
   16032:	f8c7 3514 	str.w	r3, [r7, #1300]	; 0x514
			group_index);
}
   16036:	e744      	b.n	15ec2 <sw_switch.isra.0+0xc2>
	switch (phy) {
   16038:	f649 6234 	movw	r2, #40500	; 0x9e34
   1603c:	e77c      	b.n	15f38 <sw_switch.isra.0+0x138>
	switch (phy) {
   1603e:	2446      	movs	r4, #70	; 0x46
   16040:	e718      	b.n	15e74 <sw_switch.isra.0+0x74>
		    HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI(sw_tifs_toggle);
   16042:	f103 0010 	add.w	r0, r3, #16
   16046:	4a07      	ldr	r2, [pc, #28]	; (16064 <sw_switch.isra.0+0x264>)
   16048:	f8c7 2514 	str.w	r2, [r7, #1300]	; 0x514
			HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(
   1604c:	3308      	adds	r3, #8
		uint8_t ppi_en =
   1604e:	b2c0      	uxtb	r0, r0
		uint8_t ppi_dis =
   16050:	b2df      	uxtb	r7, r3
   16052:	242d      	movs	r4, #45	; 0x2d
   16054:	e7da      	b.n	1600c <sw_switch.isra.0+0x20c>
   16056:	bf00      	nop
   16058:	200029d4 	.word	0x200029d4
   1605c:	4000110c 	.word	0x4000110c
   16060:	10624dd3 	.word	0x10624dd3
   16064:	40001000 	.word	0x40001000
   16068:	4001f004 	.word	0x4001f004
   1606c:	40001004 	.word	0x40001004
   16070:	4001f000 	.word	0x4001f000
   16074:	40009140 	.word	0x40009140
   16078:	40009040 	.word	0x40009040
   1607c:	40001150 	.word	0x40001150
   16080:	40009000 	.word	0x40009000

00016084 <isr_radio>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   16084:	4b04      	ldr	r3, [pc, #16]	; (16098 <isr_radio+0x14>)
   16086:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1608a:	b123      	cbz	r3, 16096 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1608c:	4a03      	ldr	r2, [pc, #12]	; (1609c <isr_radio+0x18>)
   1608e:	4b04      	ldr	r3, [pc, #16]	; (160a0 <isr_radio+0x1c>)
   16090:	6810      	ldr	r0, [r2, #0]
   16092:	681b      	ldr	r3, [r3, #0]
   16094:	4718      	bx	r3
}
   16096:	4770      	bx	lr
   16098:	40001000 	.word	0x40001000
   1609c:	20002768 	.word	0x20002768
   160a0:	20002764 	.word	0x20002764

000160a4 <radio_isr_set>:
{
   160a4:	b538      	push	{r3, r4, r5, lr}
   160a6:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   160a8:	2001      	movs	r0, #1
{
   160aa:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   160ac:	f7ef f9de 	bl	546c <arch_irq_disable>
	isr_cb_param = param;
   160b0:	4a08      	ldr	r2, [pc, #32]	; (160d4 <radio_isr_set+0x30>)
	isr_cb = cb;
   160b2:	4809      	ldr	r0, [pc, #36]	; (160d8 <radio_isr_set+0x34>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   160b4:	4b09      	ldr	r3, [pc, #36]	; (160dc <radio_isr_set+0x38>)
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   160b6:	490a      	ldr	r1, [pc, #40]	; (160e0 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   160b8:	6015      	str	r5, [r2, #0]
   160ba:	2510      	movs	r5, #16
   160bc:	2202      	movs	r2, #2
	isr_cb = cb;
   160be:	6004      	str	r4, [r0, #0]
   160c0:	f8c1 5304 	str.w	r5, [r1, #772]	; 0x304
	irq_enable(RADIO_IRQn);
   160c4:	2001      	movs	r0, #1
   160c6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
}
   160ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   160ce:	f7ef b9bd 	b.w	544c <arch_irq_enable>
   160d2:	bf00      	nop
   160d4:	20002768 	.word	0x20002768
   160d8:	20002764 	.word	0x20002764
   160dc:	e000e100 	.word	0xe000e100
   160e0:	40001000 	.word	0x40001000

000160e4 <radio_reset>:
{
   160e4:	b538      	push	{r3, r4, r5, lr}
	irq_disable(RADIO_IRQn);
   160e6:	2001      	movs	r0, #1
   160e8:	f7ef f9c0 	bl	546c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   160ec:	4b0b      	ldr	r3, [pc, #44]	; (1611c <radio_reset+0x38>)
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   160ee:	490c      	ldr	r1, [pc, #48]	; (16120 <radio_reset+0x3c>)
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_1_INCLUDE |
			HAL_SW_SWITCH_RADIO_ENABLE_PPI_1_INCLUDE;
#else
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   160f0:	4a0c      	ldr	r2, [pc, #48]	; (16124 <radio_reset+0x40>)
   160f2:	4c0d      	ldr	r4, [pc, #52]	; (16128 <radio_reset+0x44>)
		HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_0_INCLUDE |
		HAL_SW_SWITCH_RADIO_ENABLE_S2_PPI_0_INCLUDE;
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   160f4:	480d      	ldr	r0, [pc, #52]	; (1612c <radio_reset+0x48>)
   160f6:	2500      	movs	r5, #0
   160f8:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   160fc:	2501      	movs	r5, #1
   160fe:	f8c3 5ffc 	str.w	r5, [r3, #4092]	; 0xffc
   16102:	680b      	ldr	r3, [r1, #0]
					 0xfffffffe) | 0x01000000;
   16104:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   16108:	f023 0301 	bic.w	r3, r3, #1
   1610c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   16110:	600b      	str	r3, [r1, #0]
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   16112:	f8c2 4800 	str.w	r4, [r2, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   16116:	f8c2 0804 	str.w	r0, [r2, #2052]	; 0x804
}
   1611a:	bd38      	pop	{r3, r4, r5, pc}
   1611c:	40001000 	.word	0x40001000
   16120:	40001774 	.word	0x40001774
   16124:	4001f000 	.word	0x4001f000
   16128:	00010900 	.word	0x00010900
   1612c:	00021200 	.word	0x00021200

00016130 <radio_phy_set>:
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   16130:	4a13      	ldr	r2, [pc, #76]	; (16180 <radio_phy_set+0x50>)
	switch (phy) {
   16132:	2802      	cmp	r0, #2
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   16134:	6813      	ldr	r3, [r2, #0]
	switch (phy) {
   16136:	d00f      	beq.n	16158 <radio_phy_set+0x28>
   16138:	2804      	cmp	r0, #4
   1613a:	d012      	beq.n	16162 <radio_phy_set+0x32>
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   1613c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   16140:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_1Mbit;
   16142:	2103      	movs	r1, #3
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   16144:	4b0f      	ldr	r3, [pc, #60]	; (16184 <radio_phy_set+0x54>)
   16146:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1614a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1614e:	f042 0201 	orr.w	r2, r2, #1
   16152:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   16156:	4770      	bx	lr
		*(volatile uint32_t *)0x4000173c &= ~0x80000000;
   16158:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1615c:	6013      	str	r3, [r2, #0]
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1615e:	2104      	movs	r1, #4
		break;
   16160:	e7f0      	b.n	16144 <radio_phy_set+0x14>
		*(volatile uint32_t *)0x4000173c |= 0x80000000;
   16162:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   16166:	6013      	str	r3, [r2, #0]
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   16168:	6813      	ldr	r3, [r2, #0]
   1616a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
		if (flags & 0x01) {
   1616e:	f001 0101 	and.w	r1, r1, #1
				((*(volatile uint32_t *)0x4000173c) & 0xFFFFFF00) |
   16172:	f043 035c 	orr.w	r3, r3, #92	; 0x5c
		if (flags & 0x01) {
   16176:	f1c1 0106 	rsb	r1, r1, #6
		*(volatile uint32_t *)0x4000173c =
   1617a:	6013      	str	r3, [r2, #0]
		break;
   1617c:	e7e2      	b.n	16144 <radio_phy_set+0x14>
   1617e:	bf00      	nop
   16180:	4000173c 	.word	0x4000173c
   16184:	40001000 	.word	0x40001000

00016188 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   16188:	4b01      	ldr	r3, [pc, #4]	; (16190 <radio_tx_power_set+0x8>)
   1618a:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1618e:	4770      	bx	lr
   16190:	40001000 	.word	0x40001000

00016194 <radio_tx_power_min_get>:
}
   16194:	f06f 0027 	mvn.w	r0, #39	; 0x27
   16198:	4770      	bx	lr
   1619a:	bf00      	nop

0001619c <radio_tx_power_max_get>:
}
   1619c:	2008      	movs	r0, #8
   1619e:	4770      	bx	lr

000161a0 <radio_tx_power_floor>:
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos8dBm) {
   161a0:	2807      	cmp	r0, #7
   161a2:	dc22      	bgt.n	161ea <radio_tx_power_floor+0x4a>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos7dBm) {
   161a4:	d020      	beq.n	161e8 <radio_tx_power_floor+0x48>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos6dBm) {
   161a6:	2806      	cmp	r0, #6
   161a8:	d01e      	beq.n	161e8 <radio_tx_power_floor+0x48>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos5dBm) {
   161aa:	2805      	cmp	r0, #5
   161ac:	d01c      	beq.n	161e8 <radio_tx_power_floor+0x48>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos4dBm) {
   161ae:	2804      	cmp	r0, #4
   161b0:	d01a      	beq.n	161e8 <radio_tx_power_floor+0x48>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos3dBm) {
   161b2:	2803      	cmp	r0, #3
   161b4:	d018      	beq.n	161e8 <radio_tx_power_floor+0x48>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Pos2dBm) {
   161b6:	2802      	cmp	r0, #2
   161b8:	d016      	beq.n	161e8 <radio_tx_power_floor+0x48>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_0dBm) {
   161ba:	2800      	cmp	r0, #0
   161bc:	da17      	bge.n	161ee <radio_tx_power_floor+0x4e>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg4dBm) {
   161be:	1d03      	adds	r3, r0, #4
   161c0:	da17      	bge.n	161f2 <radio_tx_power_floor+0x52>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg8dBm) {
   161c2:	f110 0f08 	cmn.w	r0, #8
   161c6:	da17      	bge.n	161f8 <radio_tx_power_floor+0x58>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg12dBm) {
   161c8:	f110 0f0c 	cmn.w	r0, #12
   161cc:	da17      	bge.n	161fe <radio_tx_power_floor+0x5e>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg16dBm) {
   161ce:	f110 0f10 	cmn.w	r0, #16
   161d2:	da07      	bge.n	161e4 <radio_tx_power_floor+0x44>
	if (tx_power_lvl >= (int8_t)RADIO_TXPOWER_TXPOWER_Neg20dBm) {
   161d4:	f110 0f14 	cmn.w	r0, #20
   161d8:	bfb4      	ite	lt
   161da:	f06f 0027 	mvnlt.w	r0, #39	; 0x27
   161de:	f06f 0013 	mvnge.w	r0, #19
   161e2:	4770      	bx	lr
   161e4:	f06f 000f 	mvn.w	r0, #15
}
   161e8:	4770      	bx	lr
   161ea:	2008      	movs	r0, #8
   161ec:	4770      	bx	lr
   161ee:	2000      	movs	r0, #0
   161f0:	4770      	bx	lr
   161f2:	f06f 0003 	mvn.w	r0, #3
   161f6:	4770      	bx	lr
   161f8:	f06f 0007 	mvn.w	r0, #7
   161fc:	4770      	bx	lr
   161fe:	f06f 000b 	mvn.w	r0, #11
   16202:	4770      	bx	lr

00016204 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   16204:	4b01      	ldr	r3, [pc, #4]	; (1620c <radio_freq_chan_set+0x8>)
   16206:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1620a:	4770      	bx	lr
   1620c:	40001000 	.word	0x40001000

00016210 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   16210:	4b07      	ldr	r3, [pc, #28]	; (16230 <radio_whiten_iv_set+0x20>)
   16212:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   16216:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1621a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1621e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   16222:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   16226:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1622a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1622e:	4770      	bx	lr
   16230:	40001000 	.word	0x40001000

00016234 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   16234:	4a0b      	ldr	r2, [pc, #44]	; (16264 <radio_aa_set+0x30>)
   16236:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   16238:	2301      	movs	r3, #1
{
   1623a:	b410      	push	{r4}
	NRF_RADIO->TXADDRESS =
   1623c:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   16240:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   16244:	78c3      	ldrb	r3, [r0, #3]
   16246:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1624a:	7843      	ldrb	r3, [r0, #1]
   1624c:	7884      	ldrb	r4, [r0, #2]
   1624e:	7801      	ldrb	r1, [r0, #0]
   16250:	041b      	lsls	r3, r3, #16
   16252:	ea43 6304 	orr.w	r3, r3, r4, lsl #24
   16256:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
}
   1625a:	bc10      	pop	{r4}
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1625c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   16260:	4770      	bx	lr
   16262:	bf00      	nop
   16264:	40001000 	.word	0x40001000

00016268 <radio_pkt_configure>:
	phy = (flags >> 1) & 0x07; /* phy */
   16268:	f3c2 0342 	ubfx	r3, r2, #1, #3
	switch (phy) {
   1626c:	2b02      	cmp	r3, #2
{
   1626e:	b410      	push	{r4}
	uint8_t dc = flags & 0x01; /* Adv or Data channel */
   16270:	f002 0201 	and.w	r2, r2, #1
	switch (phy) {
   16274:	d024      	beq.n	162c0 <radio_pkt_configure+0x58>
		extra |= (3UL << RADIO_PCNF0_TERMLEN_Pos) &
   16276:	2b04      	cmp	r3, #4
   16278:	bf14      	ite	ne
   1627a:	2400      	movne	r4, #0
   1627c:	f04f 44c7 	moveq.w	r4, #1669332992	; 0x63800000
	if (dc) {
   16280:	b10a      	cbz	r2, 16286 <radio_pkt_configure+0x1e>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   16282:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   16286:	f1c0 0308 	rsb	r3, r0, #8
   1628a:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1628c:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   16290:	4320      	orrs	r0, r4
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   16292:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   16296:	4a0d      	ldr	r2, [pc, #52]	; (162cc <radio_pkt_configure+0x64>)
}
   16298:	bc10      	pop	{r4}
			    RADIO_PCNF0_S1LEN_Msk) |
   1629a:	4303      	orrs	r3, r0
   1629c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   162a0:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   162a4:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   162a8:	4809      	ldr	r0, [pc, #36]	; (162d0 <radio_pkt_configure+0x68>)
   162aa:	4018      	ands	r0, r3
   162ac:	f8c2 0518 	str.w	r0, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   162b0:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   162b4:	4319      	orrs	r1, r3
   162b6:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   162ba:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   162be:	4770      	bx	lr
	switch (phy) {
   162c0:	f04f 7480 	mov.w	r4, #16777216	; 0x1000000
	if (dc) {
   162c4:	2a00      	cmp	r2, #0
   162c6:	d0de      	beq.n	16286 <radio_pkt_configure+0x1e>
   162c8:	e7db      	b.n	16282 <radio_pkt_configure+0x1a>
   162ca:	bf00      	nop
   162cc:	40001000 	.word	0x40001000
   162d0:	fef80000 	.word	0xfef80000

000162d4 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   162d4:	4b01      	ldr	r3, [pc, #4]	; (162dc <radio_pkt_rx_set+0x8>)
   162d6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   162da:	4770      	bx	lr
   162dc:	40001000 	.word	0x40001000

000162e0 <radio_pkt_tx_set>:
   162e0:	4b01      	ldr	r3, [pc, #4]	; (162e8 <radio_pkt_tx_set+0x8>)
   162e2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   162e6:	4770      	bx	lr
   162e8:	40001000 	.word	0x40001000

000162ec <radio_tx_chain_delay_get>:
}
   162ec:	2001      	movs	r0, #1
   162ee:	4770      	bx	lr

000162f0 <radio_rx_ready_delay_get>:
}
   162f0:	2029      	movs	r0, #41	; 0x29
   162f2:	4770      	bx	lr

000162f4 <radio_rx_chain_delay_get>:
	switch (phy) {
   162f4:	2802      	cmp	r0, #2
   162f6:	d009      	beq.n	1630c <radio_rx_chain_delay_get+0x18>
   162f8:	2804      	cmp	r0, #4
   162fa:	d105      	bne.n	16308 <radio_rx_chain_delay_get+0x14>
		if (flags & 0x01) {
   162fc:	f011 0f01 	tst.w	r1, #1
			return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_S2_US;
   16300:	bf14      	ite	ne
   16302:	201e      	movne	r0, #30
   16304:	2019      	moveq	r0, #25
   16306:	4770      	bx	lr
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
   16308:	200a      	movs	r0, #10
}
   1630a:	4770      	bx	lr
	switch (phy) {
   1630c:	2005      	movs	r0, #5
   1630e:	4770      	bx	lr

00016310 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16310:	4b01      	ldr	r3, [pc, #4]	; (16318 <radio_tx_enable+0x8>)
   16312:	2201      	movs	r2, #1
   16314:	601a      	str	r2, [r3, #0]
}
   16316:	4770      	bx	lr
   16318:	40001000 	.word	0x40001000

0001631c <radio_disable>:
{
   1631c:	b430      	push	{r4, r5}
    p_reg->CHENCLR = mask;
   1631e:	4a08      	ldr	r2, [pc, #32]	; (16340 <radio_disable+0x24>)
	NRF_RADIO->SHORTS = 0;
   16320:	4808      	ldr	r0, [pc, #32]	; (16344 <radio_disable+0x28>)
   16322:	4909      	ldr	r1, [pc, #36]	; (16348 <radio_disable+0x2c>)
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   16324:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   16326:	f44f 6590 	mov.w	r5, #1152	; 0x480
   1632a:	2400      	movs	r4, #0
   1632c:	f8c2 5508 	str.w	r5, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   16330:	6053      	str	r3, [r2, #4]
   16332:	60d3      	str	r3, [r2, #12]
   16334:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
}
   16338:	bc30      	pop	{r4, r5}
   1633a:	600b      	str	r3, [r1, #0]
   1633c:	4770      	bx	lr
   1633e:	bf00      	nop
   16340:	4001f000 	.word	0x4001f000
   16344:	40001000 	.word	0x40001000
   16348:	40001010 	.word	0x40001010

0001634c <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1634c:	4b04      	ldr	r3, [pc, #16]	; (16360 <radio_status_reset+0x14>)
   1634e:	2200      	movs	r2, #0
   16350:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   16354:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   16358:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1635c:	4770      	bx	lr
   1635e:	bf00      	nop
   16360:	40001000 	.word	0x40001000

00016364 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   16364:	4b03      	ldr	r3, [pc, #12]	; (16374 <radio_is_ready+0x10>)
   16366:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1636a:	3800      	subs	r0, #0
   1636c:	bf18      	it	ne
   1636e:	2001      	movne	r0, #1
   16370:	4770      	bx	lr
   16372:	bf00      	nop
   16374:	40001000 	.word	0x40001000

00016378 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   16378:	4b03      	ldr	r3, [pc, #12]	; (16388 <radio_is_done+0x10>)
   1637a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1637e:	3800      	subs	r0, #0
   16380:	bf18      	it	ne
   16382:	2001      	movne	r0, #1
   16384:	4770      	bx	lr
   16386:	bf00      	nop
   16388:	40001000 	.word	0x40001000

0001638c <radio_is_idle>:
	return (NRF_RADIO->STATE == 0);
   1638c:	4b03      	ldr	r3, [pc, #12]	; (1639c <radio_is_idle+0x10>)
   1638e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   16392:	fab0 f080 	clz	r0, r0
   16396:	0940      	lsrs	r0, r0, #5
   16398:	4770      	bx	lr
   1639a:	bf00      	nop
   1639c:	40001000 	.word	0x40001000

000163a0 <radio_crc_configure>:
	NRF_RADIO->CRCCNF =
   163a0:	4b04      	ldr	r3, [pc, #16]	; (163b4 <radio_crc_configure+0x14>)
   163a2:	f240 1203 	movw	r2, #259	; 0x103
   163a6:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_RADIO->CRCPOLY = polynomial;
   163aa:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   163ae:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   163b2:	4770      	bx	lr
   163b4:	40001000 	.word	0x40001000

000163b8 <radio_crc_is_valid>:
	return (NRF_RADIO->CRCSTATUS != 0);
   163b8:	4b03      	ldr	r3, [pc, #12]	; (163c8 <radio_crc_is_valid+0x10>)
   163ba:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   163be:	3800      	subs	r0, #0
   163c0:	bf18      	it	ne
   163c2:	2001      	movne	r0, #1
   163c4:	4770      	bx	lr
   163c6:	bf00      	nop
   163c8:	40001000 	.word	0x40001000

000163cc <radio_pkt_empty_get>:
}
   163cc:	4800      	ldr	r0, [pc, #0]	; (163d0 <radio_pkt_empty_get+0x4>)
   163ce:	4770      	bx	lr
   163d0:	2000265c 	.word	0x2000265c

000163d4 <radio_pkt_scratch_get>:
}
   163d4:	4800      	ldr	r0, [pc, #0]	; (163d8 <radio_pkt_scratch_get+0x4>)
   163d6:	4770      	bx	lr
   163d8:	20002660 	.word	0x20002660

000163dc <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   163dc:	4b05      	ldr	r3, [pc, #20]	; (163f4 <radio_switch_complete_and_rx+0x18>)
{
   163de:	b410      	push	{r4}
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
   163e0:	2100      	movs	r1, #0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   163e2:	2403      	movs	r4, #3
{
   163e4:	4602      	mov	r2, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   163e6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	sw_switch(0, 0, 0, phy_rx, 0);
   163ea:	4608      	mov	r0, r1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   163ec:	bc10      	pop	{r4}
	sw_switch(0, 0, 0, phy_rx, 0);
   163ee:	f7ff bd07 	b.w	15e00 <sw_switch.isra.0>
   163f2:	bf00      	nop
   163f4:	40001000 	.word	0x40001000

000163f8 <radio_switch_complete_and_tx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   163f8:	4b04      	ldr	r3, [pc, #16]	; (1640c <radio_switch_complete_and_tx+0x14>)
{
   163fa:	b410      	push	{r4}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   163fc:	2403      	movs	r4, #3
{
   163fe:	4601      	mov	r1, r0
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   16400:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   16404:	2001      	movs	r0, #1
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16406:	bc10      	pop	{r4}
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
   16408:	f7ff bcfa 	b.w	15e00 <sw_switch.isra.0>
   1640c:	40001000 	.word	0x40001000

00016410 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   16410:	4904      	ldr	r1, [pc, #16]	; (16424 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   16412:	4b05      	ldr	r3, [pc, #20]	; (16428 <radio_switch_complete_and_disable+0x18>)
   16414:	2003      	movs	r0, #3
   16416:	f44f 6290 	mov.w	r2, #1152	; 0x480
   1641a:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1641e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   16422:	4770      	bx	lr
   16424:	40001000 	.word	0x40001000
   16428:	4001f000 	.word	0x4001f000

0001642c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1642c:	4b02      	ldr	r3, [pc, #8]	; (16438 <radio_rssi_status_reset+0xc>)
   1642e:	2200      	movs	r2, #0
   16430:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   16434:	4770      	bx	lr
   16436:	bf00      	nop
   16438:	40001000 	.word	0x40001000

0001643c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1643c:	4b03      	ldr	r3, [pc, #12]	; (1644c <radio_rssi_is_ready+0x10>)
   1643e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   16442:	3800      	subs	r0, #0
   16444:	bf18      	it	ne
   16446:	2001      	movne	r0, #1
   16448:	4770      	bx	lr
   1644a:	bf00      	nop
   1644c:	40001000 	.word	0x40001000

00016450 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   16450:	b430      	push	{r4, r5}
   16452:	2400      	movs	r4, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   16454:	00a3      	lsls	r3, r4, #2
   16456:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1645a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1645e:	6815      	ldr	r5, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   16460:	f8c3 5600 	str.w	r5, [r3, #1536]	; 0x600
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   16464:	3401      	adds	r4, #1
   16466:	8895      	ldrh	r5, [r2, #4]
   16468:	f8c3 5620 	str.w	r5, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1646c:	2c08      	cmp	r4, #8
		bdaddr += 6;
   1646e:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   16472:	d1ef      	bne.n	16454 <radio_filter_configure+0x4>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   16474:	4b03      	ldr	r3, [pc, #12]	; (16484 <radio_filter_configure+0x34>)
   16476:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
}
   1647a:	bc30      	pop	{r4, r5}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1647c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   16480:	4770      	bx	lr
   16482:	bf00      	nop
   16484:	40001000 	.word	0x40001000

00016488 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   16488:	4a03      	ldr	r2, [pc, #12]	; (16498 <radio_filter_disable+0x10>)
   1648a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1648e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   16492:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   16496:	4770      	bx	lr
   16498:	40001000 	.word	0x40001000

0001649c <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1649c:	4b02      	ldr	r3, [pc, #8]	; (164a8 <radio_filter_status_reset+0xc>)
   1649e:	2200      	movs	r2, #0
   164a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   164a4:	4770      	bx	lr
   164a6:	bf00      	nop
   164a8:	40001000 	.word	0x40001000

000164ac <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   164ac:	4b03      	ldr	r3, [pc, #12]	; (164bc <radio_filter_has_match+0x10>)
   164ae:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   164b2:	3800      	subs	r0, #0
   164b4:	bf18      	it	ne
   164b6:	2001      	movne	r0, #1
   164b8:	4770      	bx	lr
   164ba:	bf00      	nop
   164bc:	40001000 	.word	0x40001000

000164c0 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   164c0:	4b01      	ldr	r3, [pc, #4]	; (164c8 <radio_filter_match_get+0x8>)
   164c2:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   164c6:	4770      	bx	lr
   164c8:	40001000 	.word	0x40001000

000164cc <radio_tmr_status_reset>:
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
   164cc:	4904      	ldr	r1, [pc, #16]	; (164e0 <radio_tmr_status_reset+0x14>)
   164ce:	4b05      	ldr	r3, [pc, #20]	; (164e4 <radio_tmr_status_reset+0x18>)
   164d0:	4a05      	ldr	r2, [pc, #20]	; (164e8 <radio_tmr_status_reset+0x1c>)
   164d2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   164d6:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   164da:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   164de:	4770      	bx	lr
   164e0:	4000b000 	.word	0x4000b000
   164e4:	4001f000 	.word	0x4001f000
   164e8:	0e742060 	.word	0x0e742060

000164ec <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   164ec:	4b03      	ldr	r3, [pc, #12]	; (164fc <radio_tmr_tifs_set+0x10>)
    p_reg->CC[cc_channel] = cc_value;
   164ee:	4a04      	ldr	r2, [pc, #16]	; (16500 <radio_tmr_tifs_set+0x14>)
   164f0:	781b      	ldrb	r3, [r3, #0]
   164f2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   164f6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   164fa:	4770      	bx	lr
   164fc:	200029d4 	.word	0x200029d4
   16500:	40009000 	.word	0x40009000

00016504 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   16504:	b4f0      	push	{r4, r5, r6, r7}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   16506:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1650a:	4d2a      	ldr	r5, [pc, #168]	; (165b4 <radio_tmr_start+0xb0>)
   1650c:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   16510:	42ab      	cmp	r3, r5
{
   16512:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   16514:	d906      	bls.n	16524 <radio_tmr_start+0x20>
		ticks_start--;
		remainder += 30517578UL;
   16516:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1651a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
   1651e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
		ticks_start--;
   16522:	3901      	subs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16524:	4d24      	ldr	r5, [pc, #144]	; (165b8 <radio_tmr_start+0xb4>)
	}
	remainder /= 1000000UL;

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   16526:	4b25      	ldr	r3, [pc, #148]	; (165bc <radio_tmr_start+0xb8>)
	remainder /= 1000000UL;
   16528:	4825      	ldr	r0, [pc, #148]	; (165c0 <radio_tmr_start+0xbc>)
   1652a:	2601      	movs	r6, #1
   1652c:	602e      	str	r6, [r5, #0]
	EVENT_TIMER->MODE = 0;
   1652e:	2600      	movs	r6, #0
   16530:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
    p_reg->CC[ch] = cc_val;
   16534:	4d23      	ldr	r5, [pc, #140]	; (165c4 <radio_tmr_start+0xc0>)
	remainder /= 1000000UL;
   16536:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1653a:	2604      	movs	r6, #4
   1653c:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   16540:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   16542:	2602      	movs	r6, #2
   16544:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16548:	4a1f      	ldr	r2, [pc, #124]	; (165c8 <radio_tmr_start+0xc4>)
    p_reg->CC[cc_channel] = cc_value;
   1654a:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1654e:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   16552:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   16556:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
   1655a:	491c      	ldr	r1, [pc, #112]	; (165cc <radio_tmr_start+0xc8>)
   1655c:	f8c2 1538 	str.w	r1, [r2, #1336]	; 0x538
    p_reg->CHENSET = mask;
   16560:	2120      	movs	r1, #32
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16562:	f8c2 353c 	str.w	r3, [r2, #1340]	; 0x53c
    p_reg->CHENSET = mask;
   16566:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1656a:	b1e4      	cbz	r4, 165a6 <radio_tmr_start+0xa2>
    p_reg->CHENCLR = mask;
   1656c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   16570:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   16574:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
    p_reg->CHENSET = mask;
   16578:	4a13      	ldr	r2, [pc, #76]	; (165c8 <radio_tmr_start+0xc4>)
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1657a:	4b15      	ldr	r3, [pc, #84]	; (165d0 <radio_tmr_start+0xcc>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1657c:	4915      	ldr	r1, [pc, #84]	; (165d4 <radio_tmr_start+0xd0>)
   1657e:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
   16582:	2500      	movs	r5, #0
   16584:	2401      	movs	r4, #1
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16586:	4e14      	ldr	r6, [pc, #80]	; (165d8 <radio_tmr_start+0xd4>)
   16588:	600c      	str	r4, [r1, #0]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1658a:	2704      	movs	r7, #4
	SW_SWITCH_TIMER->MODE = 0;
   1658c:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   16590:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   16594:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
   16598:	601c      	str	r4, [r3, #0]
   1659a:	f8c2 6548 	str.w	r6, [r2, #1352]	; 0x548
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1659e:	bcf0      	pop	{r4, r5, r6, r7}
    p_reg->CH[(uint32_t) channel].TEP = tep;
   165a0:	f8c2 154c 	str.w	r1, [r2, #1356]	; 0x54c
   165a4:	4770      	bx	lr
    p_reg->CHENCLR = mask;
   165a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   165aa:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   165ae:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
   165b2:	e7e1      	b.n	16578 <radio_tmr_start+0x74>
   165b4:	7ff0bdbf 	.word	0x7ff0bdbf
   165b8:	4000800c 	.word	0x4000800c
   165bc:	40008000 	.word	0x40008000
   165c0:	431bde83 	.word	0x431bde83
   165c4:	4000b000 	.word	0x4000b000
   165c8:	4001f000 	.word	0x4001f000
   165cc:	4000b148 	.word	0x4000b148
   165d0:	40009000 	.word	0x40009000
   165d4:	4000900c 	.word	0x4000900c
   165d8:	4000110c 	.word	0x4000110c

000165dc <radio_tmr_start_get>:
    return p_reg->CC[ch];
   165dc:	4b01      	ldr	r3, [pc, #4]	; (165e4 <radio_tmr_start_get+0x8>)
   165de:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   165e2:	4770      	bx	lr
   165e4:	4000b000 	.word	0x4000b000

000165e8 <radio_tmr_stop>:

void radio_tmr_stop(void)
{
   165e8:	b410      	push	{r4}
   165ea:	4805      	ldr	r0, [pc, #20]	; (16600 <radio_tmr_stop+0x18>)
   165ec:	4c05      	ldr	r4, [pc, #20]	; (16604 <radio_tmr_stop+0x1c>)
   165ee:	4906      	ldr	r1, [pc, #24]	; (16608 <radio_tmr_stop+0x20>)
   165f0:	4a06      	ldr	r2, [pc, #24]	; (1660c <radio_tmr_stop+0x24>)
   165f2:	2301      	movs	r3, #1
   165f4:	6023      	str	r3, [r4, #0]
   165f6:	6003      	str	r3, [r0, #0]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   165f8:	bc10      	pop	{r4}
   165fa:	600b      	str	r3, [r1, #0]
   165fc:	6013      	str	r3, [r2, #0]
   165fe:	4770      	bx	lr
   16600:	40008010 	.word	0x40008010
   16604:	40008004 	.word	0x40008004
   16608:	40009004 	.word	0x40009004
   1660c:	40009010 	.word	0x40009010

00016610 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   16610:	4904      	ldr	r1, [pc, #16]	; (16624 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   16612:	4b05      	ldr	r3, [pc, #20]	; (16628 <radio_tmr_hcto_configure+0x18>)
   16614:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   16618:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1661c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   16620:	4770      	bx	lr
   16622:	bf00      	nop
   16624:	40008000 	.word	0x40008000
   16628:	4001f000 	.word	0x4001f000

0001662c <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1662c:	4b05      	ldr	r3, [pc, #20]	; (16644 <radio_tmr_aa_capture+0x18>)
   1662e:	4806      	ldr	r0, [pc, #24]	; (16648 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16630:	4906      	ldr	r1, [pc, #24]	; (1664c <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   16632:	4a07      	ldr	r2, [pc, #28]	; (16650 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   16634:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   16638:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1663c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   16640:	4770      	bx	lr
   16642:	bf00      	nop
   16644:	4001f000 	.word	0x4001f000
   16648:	40001100 	.word	0x40001100
   1664c:	40008040 	.word	0x40008040
   16650:	04000040 	.word	0x04000040

00016654 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   16654:	4b01      	ldr	r3, [pc, #4]	; (1665c <radio_tmr_aa_get+0x8>)
   16656:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1665a:	4770      	bx	lr
   1665c:	40008000 	.word	0x40008000

00016660 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   16660:	4b01      	ldr	r3, [pc, #4]	; (16668 <radio_tmr_aa_save+0x8>)
   16662:	6018      	str	r0, [r3, #0]
}
   16664:	4770      	bx	lr
   16666:	bf00      	nop
   16668:	2000276c 	.word	0x2000276c

0001666c <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1666c:	4b01      	ldr	r3, [pc, #4]	; (16674 <radio_tmr_aa_restore+0x8>)
}
   1666e:	6818      	ldr	r0, [r3, #0]
   16670:	4770      	bx	lr
   16672:	bf00      	nop
   16674:	2000276c 	.word	0x2000276c

00016678 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   16678:	4b01      	ldr	r3, [pc, #4]	; (16680 <radio_tmr_ready_get+0x8>)
   1667a:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1667e:	4770      	bx	lr
   16680:	40008000 	.word	0x40008000

00016684 <radio_tmr_end_capture>:
   16684:	4b02      	ldr	r3, [pc, #8]	; (16690 <radio_tmr_end_capture+0xc>)
   16686:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1668a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1668e:	4770      	bx	lr
   16690:	4001f000 	.word	0x4001f000

00016694 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   16694:	4b01      	ldr	r3, [pc, #4]	; (1669c <radio_tmr_end_get+0x8>)
   16696:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1669a:	4770      	bx	lr
   1669c:	40008000 	.word	0x40008000

000166a0 <radio_tmr_tifs_base_get>:
   166a0:	4b01      	ldr	r3, [pc, #4]	; (166a8 <radio_tmr_tifs_base_get+0x8>)
   166a2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   166a6:	4770      	bx	lr
   166a8:	40008000 	.word	0x40008000

000166ac <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static uint8_t MALIGN(4) _ccm_scratch[(HAL_RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
   166ac:	b4f0      	push	{r4, r5, r6, r7}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   166ae:	4b21      	ldr	r3, [pc, #132]	; (16734 <radio_ccm_rx_pkt_set+0x88>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   166b0:	2402      	movs	r4, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   166b2:	2500      	movs	r5, #0
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
   166b4:	42a1      	cmp	r1, r4
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   166b6:	f8c3 5500 	str.w	r5, [r3, #1280]	; 0x500
{
   166ba:	4606      	mov	r6, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   166bc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	switch (phy) {
   166c0:	d035      	beq.n	1672e <radio_ccm_rx_pkt_set+0x82>
   166c2:	2904      	cmp	r1, #4
   166c4:	d131      	bne.n	1672a <radio_ccm_rx_pkt_set+0x7e>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   166c6:	491c      	ldr	r1, [pc, #112]	; (16738 <radio_ccm_rx_pkt_set+0x8c>)
   166c8:	4c1c      	ldr	r4, [pc, #112]	; (1673c <radio_ccm_rx_pkt_set+0x90>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   166ca:	481d      	ldr	r0, [pc, #116]	; (16740 <radio_ccm_rx_pkt_set+0x94>)
	case BIT(2):
		mode |= (CCM_MODE_DATARATE_125Kbps <<
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;

		NRF_CCM->RATEOVERRIDE =
   166cc:	2503      	movs	r5, #3
   166ce:	f8c3 551c 	str.w	r5, [r3, #1308]	; 0x51c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   166d2:	f8c1 4578 	str.w	r4, [r1, #1400]	; 0x578
    p_reg->CHENSET = mask;
   166d6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
		mode |= (CCM_MODE_DATARATE_125Kbps <<
   166da:	4c1a      	ldr	r4, [pc, #104]	; (16744 <radio_ccm_rx_pkt_set+0x98>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   166dc:	f8c1 057c 	str.w	r0, [r1, #1404]	; 0x57c
    p_reg->CHENSET = mask;
   166e0:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   166e4:	4918      	ldr	r1, [pc, #96]	; (16748 <radio_ccm_rx_pkt_set+0x9c>)
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   166e6:	4b13      	ldr	r3, [pc, #76]	; (16734 <radio_ccm_rx_pkt_set+0x88>)
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   166e8:	f8d1 1518 	ldr.w	r1, [r1, #1304]	; 0x518
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   166ec:	4817      	ldr	r0, [pc, #92]	; (1674c <radio_ccm_rx_pkt_set+0xa0>)
   166ee:	4d12      	ldr	r5, [pc, #72]	; (16738 <radio_ccm_rx_pkt_set+0x8c>)
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   166f0:	4f17      	ldr	r7, [pc, #92]	; (16750 <radio_ccm_rx_pkt_set+0xa4>)
   166f2:	b2c9      	uxtb	r1, r1
	NRF_CCM->MAXPACKETSIZE = max_len;
   166f4:	f8c3 1518 	str.w	r1, [r3, #1304]	; 0x518
	NRF_CCM->MODE = mode;
   166f8:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->SHORTS = 0;
   166fc:	2100      	movs	r1, #0
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   166fe:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
   16702:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   16706:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1670a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1670e:	2201      	movs	r2, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   16710:	f8c3 7514 	str.w	r7, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
   16714:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   16718:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1671c:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   16720:	f8c5 4504 	str.w	r4, [r5, #1284]	; 0x504
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   16724:	bcf0      	pop	{r4, r5, r6, r7}
   16726:	601a      	str	r2, [r3, #0]
   16728:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
   1672a:	4c0a      	ldr	r4, [pc, #40]	; (16754 <radio_ccm_rx_pkt_set+0xa8>)
   1672c:	e7da      	b.n	166e4 <radio_ccm_rx_pkt_set+0x38>
	switch (phy) {
   1672e:	4c0a      	ldr	r4, [pc, #40]	; (16758 <radio_ccm_rx_pkt_set+0xac>)
   16730:	e7d8      	b.n	166e4 <radio_ccm_rx_pkt_set+0x38>
   16732:	bf00      	nop
   16734:	4000f000 	.word	0x4000f000
   16738:	4001f000 	.word	0x4001f000
   1673c:	40001150 	.word	0x40001150
   16740:	4000f00c 	.word	0x4000f00c
   16744:	01020001 	.word	0x01020001
   16748:	40001000 	.word	0x40001000
   1674c:	20002660 	.word	0x20002660
   16750:	20002550 	.word	0x20002550
   16754:	01000001 	.word	0x01000001
   16758:	01010001 	.word	0x01010001

0001675c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
   1675c:	b470      	push	{r4, r5, r6}
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1675e:	4b10      	ldr	r3, [pc, #64]	; (167a0 <radio_ccm_tx_pkt_set+0x44>)
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   16760:	4d10      	ldr	r5, [pc, #64]	; (167a4 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->MODE = mode;
   16762:	4e11      	ldr	r6, [pc, #68]	; (167a8 <radio_ccm_tx_pkt_set+0x4c>)
{
   16764:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   16766:	2200      	movs	r2, #0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   16768:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1676a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1676e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	NRF_CCM->MODE = mode;
   16772:	f8c3 6504 	str.w	r6, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   16776:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1677a:	4e0c      	ldr	r6, [pc, #48]	; (167ac <radio_ccm_tx_pkt_set+0x50>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1677c:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   16780:	2401      	movs	r4, #1
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   16782:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   16786:	4628      	mov	r0, r5
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   16788:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1678c:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   16790:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   16794:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   16798:	601c      	str	r4, [r3, #0]
}
   1679a:	bc70      	pop	{r4, r5, r6}
   1679c:	4770      	bx	lr
   1679e:	bf00      	nop
   167a0:	4000f000 	.word	0x4000f000
   167a4:	20002660 	.word	0x20002660
   167a8:	01010000 	.word	0x01010000
   167ac:	20002550 	.word	0x20002550

000167b0 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   167b0:	4a0e      	ldr	r2, [pc, #56]	; (167ec <radio_ccm_is_done+0x3c>)
   167b2:	2302      	movs	r3, #2
   167b4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   167b8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   167bc:	b933      	cbnz	r3, 167cc <radio_ccm_is_done+0x1c>
		__WFE();
   167be:	bf20      	wfe
		__SEV();
   167c0:	bf40      	sev
		__WFE();
   167c2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   167c4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   167c8:	2b00      	cmp	r3, #0
   167ca:	d0f8      	beq.n	167be <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   167cc:	4b07      	ldr	r3, [pc, #28]	; (167ec <radio_ccm_is_done+0x3c>)
   167ce:	4a08      	ldr	r2, [pc, #32]	; (167f0 <radio_ccm_is_done+0x40>)
   167d0:	2002      	movs	r0, #2
   167d2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   167d6:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   167da:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   167de:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   167e2:	fab0 f080 	clz	r0, r0
   167e6:	0940      	lsrs	r0, r0, #5
   167e8:	4770      	bx	lr
   167ea:	bf00      	nop
   167ec:	4000f000 	.word	0x4000f000
   167f0:	e000e100 	.word	0xe000e100

000167f4 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   167f4:	4b03      	ldr	r3, [pc, #12]	; (16804 <radio_ccm_mic_is_valid+0x10>)
   167f6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   167fa:	3800      	subs	r0, #0
   167fc:	bf18      	it	ne
   167fe:	2001      	movne	r0, #1
   16800:	4770      	bx	lr
   16802:	bf00      	nop
   16804:	4000f000 	.word	0x4000f000

00016808 <radio_ar_configure>:

static uint8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(uint32_t nirk, void *irk)
{
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   16808:	4b15      	ldr	r3, [pc, #84]	; (16860 <radio_ar_configure+0x58>)
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1680a:	4a16      	ldr	r2, [pc, #88]	; (16864 <radio_ar_configure+0x5c>)
{
   1680c:	b430      	push	{r4, r5}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1680e:	2403      	movs	r4, #3
   16810:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_AAR->NIRK = nirk;
   16814:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_AAR->IRKPTR = (uint32_t)irk;
   16818:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   1681c:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   16820:	4d11      	ldr	r5, [pc, #68]	; (16868 <radio_ar_configure+0x60>)
   16822:	4c12      	ldr	r4, [pc, #72]	; (1686c <radio_ar_configure+0x64>)
	NRF_AAR->ADDRPTR = (uint32_t)NRF_RADIO->PACKETPTR - 1;
   16824:	3801      	subs	r0, #1
   16826:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510

	NRF_AAR->EVENTS_END = 0;
   1682a:	2100      	movs	r1, #0
    p_reg->BCC = radio_bcc;
   1682c:	2040      	movs	r0, #64	; 0x40
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1682e:	f8c3 5514 	str.w	r5, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   16832:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   16836:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1683a:	f8c3 1108 	str.w	r1, [r3, #264]	; 0x108
   1683e:	f8c2 0560 	str.w	r0, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   16842:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   16846:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1684a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1684e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   16852:	f8c2 1128 	str.w	r1, [r2, #296]	; 0x128
   16856:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	radio_bc_configure(64);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1685a:	bc30      	pop	{r4, r5}
   1685c:	4770      	bx	lr
   1685e:	bf00      	nop
   16860:	4000f000 	.word	0x4000f000
   16864:	40001000 	.word	0x40001000
   16868:	2000254c 	.word	0x2000254c
   1686c:	4001f000 	.word	0x4001f000

00016870 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   16870:	4b01      	ldr	r3, [pc, #4]	; (16878 <radio_ar_match_get+0x8>)
   16872:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   16876:	4770      	bx	lr
   16878:	4000f000 	.word	0x4000f000

0001687c <radio_ar_status_reset>:
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1687c:	4903      	ldr	r1, [pc, #12]	; (1688c <radio_ar_status_reset+0x10>)

void radio_ar_status_reset(void)
{
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1687e:	4a04      	ldr	r2, [pc, #16]	; (16890 <radio_ar_status_reset+0x14>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   16880:	2300      	movs	r3, #0
   16882:	f8c1 3128 	str.w	r3, [r1, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   16886:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
}
   1688a:	4770      	bx	lr
   1688c:	40001000 	.word	0x40001000
   16890:	4000f000 	.word	0x4000f000

00016894 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   16894:	4b08      	ldr	r3, [pc, #32]	; (168b8 <radio_ar_has_match+0x24>)
   16896:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1689a:	b160      	cbz	r0, 168b6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1689c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   168a0:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   168a4:	b138      	cbz	r0, 168b6 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   168a6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   168aa:	b120      	cbz	r0, 168b6 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   168ac:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   168b0:	fab0 f080 	clz	r0, r0
   168b4:	0940      	lsrs	r0, r0, #5
}
   168b6:	4770      	bx	lr
   168b8:	40001000 	.word	0x40001000

000168bc <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   168bc:	2902      	cmp	r1, #2
{
   168be:	b510      	push	{r4, lr}
   168c0:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   168c2:	d00b      	beq.n	168dc <mayfly_enable_cb+0x20>
   168c4:	4a0a      	ldr	r2, [pc, #40]	; (168f0 <mayfly_enable_cb+0x34>)
   168c6:	490b      	ldr	r1, [pc, #44]	; (168f4 <mayfly_enable_cb+0x38>)
   168c8:	480b      	ldr	r0, [pc, #44]	; (168f8 <mayfly_enable_cb+0x3c>)
   168ca:	231f      	movs	r3, #31
   168cc:	f003 fa93 	bl	19df6 <printk>
   168d0:	4040      	eors	r0, r0
   168d2:	f380 8811 	msr	BASEPRI, r0
   168d6:	f04f 0003 	mov.w	r0, #3
   168da:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   168dc:	200b      	movs	r0, #11
	if (enable) {
   168de:	b11c      	cbz	r4, 168e8 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   168e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   168e4:	f7ee bdb2 	b.w	544c <arch_irq_enable>
}
   168e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   168ec:	f7ee bdbe 	b.w	546c <arch_irq_disable>
   168f0:	00020740 	.word	0x00020740
   168f4:	00020790 	.word	0x00020790
   168f8:	0001fcdc 	.word	0x0001fcdc

000168fc <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   168fc:	b129      	cbz	r1, 1690a <mayfly_is_enabled+0xe>
   168fe:	3901      	subs	r1, #1
   16900:	2901      	cmp	r1, #1
   16902:	d805      	bhi.n	16910 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   16904:	200b      	movs	r0, #11
   16906:	f7ee bdc5 	b.w	5494 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1690a:	2018      	movs	r0, #24
   1690c:	f7ee bdc2 	b.w	5494 <arch_irq_is_enabled>
{
   16910:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   16912:	4a07      	ldr	r2, [pc, #28]	; (16930 <mayfly_is_enabled+0x34>)
   16914:	4907      	ldr	r1, [pc, #28]	; (16934 <mayfly_is_enabled+0x38>)
   16916:	4808      	ldr	r0, [pc, #32]	; (16938 <mayfly_is_enabled+0x3c>)
   16918:	2337      	movs	r3, #55	; 0x37
   1691a:	f003 fa6c 	bl	19df6 <printk>
   1691e:	4040      	eors	r0, r0
   16920:	f380 8811 	msr	BASEPRI, r0
   16924:	f04f 0003 	mov.w	r0, #3
   16928:	df02      	svc	2
		break;
	}

	return 0;
}
   1692a:	2000      	movs	r0, #0
   1692c:	bd08      	pop	{r3, pc}
   1692e:	bf00      	nop
   16930:	00020740 	.word	0x00020740
   16934:	0001fd3c 	.word	0x0001fd3c
   16938:	0001fcdc 	.word	0x0001fcdc

0001693c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1693c:	4288      	cmp	r0, r1
   1693e:	d013      	beq.n	16968 <mayfly_prio_is_equal+0x2c>
	return (caller_id == callee_id) ||
   16940:	b928      	cbnz	r0, 1694e <mayfly_prio_is_equal+0x12>
	       ((caller_id == MAYFLY_CALL_ID_LLL) &&
   16942:	1e48      	subs	r0, r1, #1
   16944:	2801      	cmp	r0, #1
   16946:	bf8c      	ite	hi
   16948:	2000      	movhi	r0, #0
   1694a:	2001      	movls	r0, #1
   1694c:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1694e:	2801      	cmp	r0, #1
   16950:	d106      	bne.n	16960 <mayfly_prio_is_equal+0x24>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   16952:	b159      	cbz	r1, 1696c <mayfly_prio_is_equal+0x30>
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   16954:	f1a1 0002 	sub.w	r0, r1, #2
   16958:	fab0 f080 	clz	r0, r0
   1695c:	0940      	lsrs	r0, r0, #5
   1695e:	4770      	bx	lr
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
   16960:	2802      	cmp	r0, #2
   16962:	d004      	beq.n	1696e <mayfly_prio_is_equal+0x32>
   16964:	2000      	movs	r0, #0
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   16966:	4770      	bx	lr
   16968:	2001      	movs	r0, #1
   1696a:	4770      	bx	lr
#endif
	       0;
}
   1696c:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1696e:	2901      	cmp	r1, #1
   16970:	bf8c      	ite	hi
   16972:	2000      	movhi	r0, #0
   16974:	2001      	movls	r0, #1
   16976:	4770      	bx	lr

00016978 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   16978:	2901      	cmp	r1, #1
{
   1697a:	b508      	push	{r3, lr}
	switch (callee_id) {
   1697c:	d00f      	beq.n	1699e <mayfly_pend+0x26>
   1697e:	2902      	cmp	r1, #2
   16980:	d00d      	beq.n	1699e <mayfly_pend+0x26>
   16982:	b191      	cbz	r1, 169aa <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   16984:	4a0c      	ldr	r2, [pc, #48]	; (169b8 <mayfly_pend+0x40>)
   16986:	490d      	ldr	r1, [pc, #52]	; (169bc <mayfly_pend+0x44>)
   16988:	480d      	ldr	r0, [pc, #52]	; (169c0 <mayfly_pend+0x48>)
   1698a:	2368      	movs	r3, #104	; 0x68
   1698c:	f003 fa33 	bl	19df6 <printk>
   16990:	4040      	eors	r0, r0
   16992:	f380 8811 	msr	BASEPRI, r0
   16996:	f04f 0003 	mov.w	r0, #3
   1699a:	df02      	svc	2
		break;
	}
}
   1699c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1699e:	4b09      	ldr	r3, [pc, #36]	; (169c4 <mayfly_pend+0x4c>)
   169a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
   169a4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   169a8:	bd08      	pop	{r3, pc}
   169aa:	4b06      	ldr	r3, [pc, #24]	; (169c4 <mayfly_pend+0x4c>)
   169ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   169b0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   169b4:	bd08      	pop	{r3, pc}
   169b6:	bf00      	nop
   169b8:	00020740 	.word	0x00020740
   169bc:	0001fd3c 	.word	0x0001fd3c
   169c0:	0001fcdc 	.word	0x0001fcdc
   169c4:	e000e100 	.word	0xe000e100

000169c8 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   169c8:	2803      	cmp	r0, #3
{
   169ca:	b510      	push	{r4, lr}
   169cc:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   169ce:	d804      	bhi.n	169da <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   169d0:	4b11      	ldr	r3, [pc, #68]	; (16a18 <hal_ticker_instance0_caller_id_get+0x50>)
   169d2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   169d4:	b18c      	cbz	r4, 169fa <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   169d6:	4620      	mov	r0, r4
   169d8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   169da:	4a10      	ldr	r2, [pc, #64]	; (16a1c <hal_ticker_instance0_caller_id_get+0x54>)
   169dc:	4910      	ldr	r1, [pc, #64]	; (16a20 <hal_ticker_instance0_caller_id_get+0x58>)
   169de:	4811      	ldr	r0, [pc, #68]	; (16a24 <hal_ticker_instance0_caller_id_get+0x5c>)
   169e0:	232b      	movs	r3, #43	; 0x2b
   169e2:	f003 fa08 	bl	19df6 <printk>
   169e6:	4040      	eors	r0, r0
   169e8:	f380 8811 	msr	BASEPRI, r0
   169ec:	f04f 0003 	mov.w	r0, #3
   169f0:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   169f2:	4b09      	ldr	r3, [pc, #36]	; (16a18 <hal_ticker_instance0_caller_id_get+0x50>)
   169f4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   169f6:	2c00      	cmp	r4, #0
   169f8:	d1ed      	bne.n	169d6 <hal_ticker_instance0_caller_id_get+0xe>
   169fa:	4a08      	ldr	r2, [pc, #32]	; (16a1c <hal_ticker_instance0_caller_id_get+0x54>)
   169fc:	490a      	ldr	r1, [pc, #40]	; (16a28 <hal_ticker_instance0_caller_id_get+0x60>)
   169fe:	4809      	ldr	r0, [pc, #36]	; (16a24 <hal_ticker_instance0_caller_id_get+0x5c>)
   16a00:	232e      	movs	r3, #46	; 0x2e
   16a02:	f003 f9f8 	bl	19df6 <printk>
   16a06:	4040      	eors	r0, r0
   16a08:	f380 8811 	msr	BASEPRI, r0
   16a0c:	f04f 0003 	mov.w	r0, #3
   16a10:	df02      	svc	2
}
   16a12:	4620      	mov	r0, r4
   16a14:	bd10      	pop	{r4, pc}
   16a16:	bf00      	nop
   16a18:	00020820 	.word	0x00020820
   16a1c:	000207a0 	.word	0x000207a0
   16a20:	000207f0 	.word	0x000207f0
   16a24:	0001fcdc 	.word	0x0001fcdc
   16a28:	00020810 	.word	0x00020810

00016a2c <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   16a2c:	3801      	subs	r0, #1
{
   16a2e:	b510      	push	{r4, lr}
   16a30:	461c      	mov	r4, r3
   16a32:	2804      	cmp	r0, #4
   16a34:	d855      	bhi.n	16ae2 <hal_ticker_instance0_sched+0xb6>
   16a36:	e8df f000 	tbb	[pc, r0]
   16a3a:	1a12      	.short	0x1a12
   16a3c:	1e16      	.short	0x1e16
   16a3e:	03          	.byte	0x03
   16a3f:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   16a40:	2904      	cmp	r1, #4
   16a42:	d01e      	beq.n	16a82 <hal_ticker_instance0_sched+0x56>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   16a44:	23ba      	movs	r3, #186	; 0xba
			break;
		}
		break;

	default:
		LL_ASSERT(0);
   16a46:	4a28      	ldr	r2, [pc, #160]	; (16ae8 <hal_ticker_instance0_sched+0xbc>)
   16a48:	4928      	ldr	r1, [pc, #160]	; (16aec <hal_ticker_instance0_sched+0xc0>)
   16a4a:	4829      	ldr	r0, [pc, #164]	; (16af0 <hal_ticker_instance0_sched+0xc4>)
   16a4c:	f003 f9d3 	bl	19df6 <printk>
   16a50:	4040      	eors	r0, r0
   16a52:	f380 8811 	msr	BASEPRI, r0
   16a56:	f04f 0003 	mov.w	r0, #3
   16a5a:	df02      	svc	2
		break;
	}
}
   16a5c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   16a5e:	2904      	cmp	r1, #4
   16a60:	d01f      	beq.n	16aa2 <hal_ticker_instance0_sched+0x76>
			LL_ASSERT(0);
   16a62:	234e      	movs	r3, #78	; 0x4e
   16a64:	e7ef      	b.n	16a46 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   16a66:	2904      	cmp	r1, #4
   16a68:	d013      	beq.n	16a92 <hal_ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   16a6a:	237c      	movs	r3, #124	; 0x7c
   16a6c:	e7eb      	b.n	16a46 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   16a6e:	2903      	cmp	r1, #3
   16a70:	d01f      	beq.n	16ab2 <hal_ticker_instance0_sched+0x86>
			LL_ASSERT(0);
   16a72:	2365      	movs	r3, #101	; 0x65
   16a74:	e7e7      	b.n	16a46 <hal_ticker_instance0_sched+0x1a>
		switch (callee_id) {
   16a76:	2903      	cmp	r1, #3
   16a78:	d02b      	beq.n	16ad2 <hal_ticker_instance0_sched+0xa6>
   16a7a:	2904      	cmp	r1, #4
   16a7c:	d021      	beq.n	16ac2 <hal_ticker_instance0_sched+0x96>
			LL_ASSERT(0);
   16a7e:	23a2      	movs	r3, #162	; 0xa2
   16a80:	e7e1      	b.n	16a46 <hal_ticker_instance0_sched+0x1a>
			m.param = instance;
   16a82:	4b1c      	ldr	r3, [pc, #112]	; (16af4 <hal_ticker_instance0_sched+0xc8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16a84:	2102      	movs	r1, #2
			m.param = instance;
   16a86:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16a88:	2003      	movs	r0, #3
}
   16a8a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   16a8e:	f7f4 bc8f 	b.w	b3b0 <mayfly_enqueue>
			m.param = instance;
   16a92:	4b19      	ldr	r3, [pc, #100]	; (16af8 <hal_ticker_instance0_sched+0xcc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16a94:	2102      	movs	r1, #2
			m.param = instance;
   16a96:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16a98:	2001      	movs	r0, #1
}
   16a9a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   16a9e:	f7f4 bc87 	b.w	b3b0 <mayfly_enqueue>
			m.param = instance;
   16aa2:	4b16      	ldr	r3, [pc, #88]	; (16afc <hal_ticker_instance0_sched+0xd0>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16aa4:	2102      	movs	r1, #2
			m.param = instance;
   16aa6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16aa8:	2000      	movs	r0, #0
}
   16aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   16aae:	f7f4 bc7f 	b.w	b3b0 <mayfly_enqueue>
			m.param = instance;
   16ab2:	4b13      	ldr	r3, [pc, #76]	; (16b00 <hal_ticker_instance0_sched+0xd4>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16ab4:	2101      	movs	r1, #1
			m.param = instance;
   16ab6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16ab8:	4608      	mov	r0, r1
}
   16aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   16abe:	f7f4 bc77 	b.w	b3b0 <mayfly_enqueue>
			m.param = instance;
   16ac2:	4b10      	ldr	r3, [pc, #64]	; (16b04 <hal_ticker_instance0_sched+0xd8>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ac4:	2102      	movs	r1, #2
			m.param = instance;
   16ac6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ac8:	4608      	mov	r0, r1
}
   16aca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ace:	f7f4 bc6f 	b.w	b3b0 <mayfly_enqueue>
			m.param = instance;
   16ad2:	4b0d      	ldr	r3, [pc, #52]	; (16b08 <hal_ticker_instance0_sched+0xdc>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ad4:	2101      	movs	r1, #1
			m.param = instance;
   16ad6:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ad8:	2002      	movs	r0, #2
}
   16ada:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   16ade:	f7f4 bc67 	b.w	b3b0 <mayfly_enqueue>
		LL_ASSERT(0);
   16ae2:	23c0      	movs	r3, #192	; 0xc0
   16ae4:	e7af      	b.n	16a46 <hal_ticker_instance0_sched+0x1a>
   16ae6:	bf00      	nop
   16ae8:	000207a0 	.word	0x000207a0
   16aec:	0001fd3c 	.word	0x0001fd3c
   16af0:	0001fcdc 	.word	0x0001fcdc
   16af4:	200008a4 	.word	0x200008a4
   16af8:	20000874 	.word	0x20000874
   16afc:	20000854 	.word	0x20000854
   16b00:	20000864 	.word	0x20000864
   16b04:	20000894 	.word	0x20000894
   16b08:	20000884 	.word	0x20000884

00016b0c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   16b0c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   16b0e:	2000      	movs	r0, #0
   16b10:	f7ff b922 	b.w	15d58 <cntr_cmp_set>

00016b14 <hci_vendor_read_static_addr>:
				 uint8_t size)
{
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   16b14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16b18:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   16b1c:	3201      	adds	r2, #1
   16b1e:	d008      	beq.n	16b32 <hci_vendor_read_static_addr+0x1e>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   16b20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16b24:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   16b28:	f013 0301 	ands.w	r3, r3, #1
   16b2c:	d10f      	bne.n	16b4e <hci_vendor_read_static_addr+0x3a>
		}

		return 1;
	}

	return 0;
   16b2e:	2000      	movs	r0, #0
   16b30:	4770      	bx	lr
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   16b32:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   16b36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   16b3a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   16b3c:	4293      	cmp	r3, r2
   16b3e:	d0f6      	beq.n	16b2e <hci_vendor_read_static_addr+0x1a>
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   16b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   16b44:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   16b48:	f013 0301 	ands.w	r3, r3, #1
   16b4c:	d0ef      	beq.n	16b2e <hci_vendor_read_static_addr+0x1a>
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   16b4e:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	sys_put_le16(val >> 16, &dst[2]);
   16b52:	0c19      	lsrs	r1, r3, #16
{
   16b54:	b510      	push	{r4, lr}
	dst[0] = val;
   16b56:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   16b58:	0a0c      	lsrs	r4, r1, #8
   16b5a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16b5e:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   16b60:	70c4      	strb	r4, [r0, #3]
   16b62:	7043      	strb	r3, [r0, #1]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   16b64:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   16b68:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   16b6a:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   16b6e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   16b72:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   16b74:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   16b78:	3301      	adds	r3, #1
   16b7a:	d035      	beq.n	16be8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   16b7c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   16b80:	3301      	adds	r3, #1
   16b82:	d031      	beq.n	16be8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   16b84:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   16b88:	3301      	adds	r3, #1
   16b8a:	d02d      	beq.n	16be8 <hci_vendor_read_static_addr+0xd4>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   16b8c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   16b90:	3301      	adds	r3, #1
   16b92:	d029      	beq.n	16be8 <hci_vendor_read_static_addr+0xd4>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   16b94:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   16b98:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   16b9a:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   16b9c:	0a0c      	lsrs	r4, r1, #8
   16b9e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16ba2:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   16ba4:	7244      	strb	r4, [r0, #9]
   16ba6:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   16ba8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   16bac:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   16bae:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   16bb0:	0a0c      	lsrs	r4, r1, #8
   16bb2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16bb6:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   16bb8:	7344      	strb	r4, [r0, #13]
   16bba:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   16bbc:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   16bc0:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   16bc2:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   16bc4:	0a0c      	lsrs	r4, r1, #8
   16bc6:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16bca:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   16bcc:	7444      	strb	r4, [r0, #17]
   16bce:	73c3      	strb	r3, [r0, #15]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   16bd0:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   16bd4:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   16bd6:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   16bd8:	0a11      	lsrs	r1, r2, #8
   16bda:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16bde:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   16be0:	7541      	strb	r1, [r0, #21]
   16be2:	74c3      	strb	r3, [r0, #19]
		return 1;
   16be4:	2001      	movs	r0, #1
}
   16be6:	bd10      	pop	{r4, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   16be8:	2210      	movs	r2, #16
   16bea:	2100      	movs	r1, #0
   16bec:	3006      	adds	r0, #6
   16bee:	f004 ff47 	bl	1ba80 <memset>
		return 1;
   16bf2:	2001      	movs	r0, #1
}
   16bf4:	bd10      	pop	{r4, pc}
   16bf6:	bf00      	nop

00016bf8 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   16bf8:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   16bfa:	2210      	movs	r2, #16
{
   16bfc:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   16bfe:	2100      	movs	r1, #0
   16c00:	f004 ff3e 	bl	1ba80 <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   16c04:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   16c08:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   16c0c:	3201      	adds	r2, #1
   16c0e:	d034      	beq.n	16c7a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   16c10:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   16c14:	3201      	adds	r2, #1
   16c16:	d030      	beq.n	16c7a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   16c18:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   16c1c:	3201      	adds	r2, #1
   16c1e:	d02c      	beq.n	16c7a <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   16c20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   16c24:	3201      	adds	r2, #1
   16c26:	d028      	beq.n	16c7a <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   16c28:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   16c2c:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   16c2e:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   16c30:	0a08      	lsrs	r0, r1, #8
   16c32:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   16c36:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   16c38:	70e0      	strb	r0, [r4, #3]
   16c3a:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   16c3c:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   16c40:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   16c42:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   16c44:	0a08      	lsrs	r0, r1, #8
   16c46:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   16c4a:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   16c4c:	71e0      	strb	r0, [r4, #7]
   16c4e:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   16c50:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   16c54:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   16c56:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   16c58:	0a08      	lsrs	r0, r1, #8
   16c5a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   16c5e:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   16c60:	7262      	strb	r2, [r4, #9]
   16c62:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   16c64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   16c68:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   16c6a:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   16c6c:	0a11      	lsrs	r1, r2, #8
   16c6e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   16c72:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   16c74:	73e1      	strb	r1, [r4, #15]
   16c76:	7363      	strb	r3, [r4, #13]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   16c78:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   16c7a:	4620      	mov	r0, r4
   16c7c:	2210      	movs	r2, #16
}
   16c7e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   16c82:	2100      	movs	r1, #0
   16c84:	f004 befc 	b.w	1ba80 <memset>

00016c88 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   16c88:	4b02      	ldr	r3, [pc, #8]	; (16c94 <net_buf_pool_get+0xc>)
   16c8a:	2228      	movs	r2, #40	; 0x28
   16c8c:	fb02 3000 	mla	r0, r2, r0, r3
   16c90:	4770      	bx	lr
   16c92:	bf00      	nop
   16c94:	20000b54 	.word	0x20000b54

00016c98 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16c98:	7983      	ldrb	r3, [r0, #6]

	return buf - pool->__bufs;
   16c9a:	4a05      	ldr	r2, [pc, #20]	; (16cb0 <net_buf_id+0x18>)
   16c9c:	2128      	movs	r1, #40	; 0x28
   16c9e:	fb01 2303 	mla	r3, r1, r3, r2
   16ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   16ca4:	1ac0      	subs	r0, r0, r3
}
   16ca6:	4b03      	ldr	r3, [pc, #12]	; (16cb4 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   16ca8:	10c0      	asrs	r0, r0, #3
}
   16caa:	4358      	muls	r0, r3
   16cac:	4770      	bx	lr
   16cae:	bf00      	nop
   16cb0:	20000b54 	.word	0x20000b54
   16cb4:	aaaaaaab 	.word	0xaaaaaaab

00016cb8 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   16cb8:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16cba:	4a0a      	ldr	r2, [pc, #40]	; (16ce4 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16cbc:	7983      	ldrb	r3, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16cbe:	2428      	movs	r4, #40	; 0x28
   16cc0:	fb04 2303 	mla	r3, r4, r3, r2

	*size = MIN(fixed->data_size, *size);
   16cc4:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   16cc6:	6a1b      	ldr	r3, [r3, #32]
   16cc8:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   16cca:	6823      	ldr	r3, [r4, #0]
   16ccc:	429a      	cmp	r2, r3
   16cce:	bf94      	ite	ls
   16cd0:	600a      	strls	r2, [r1, #0]
   16cd2:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   16cd4:	f7ff ffe0 	bl	16c98 <net_buf_id>
   16cd8:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   16cdc:	fb02 3000 	mla	r0, r2, r0, r3
   16ce0:	bd10      	pop	{r4, pc}
   16ce2:	bf00      	nop
   16ce4:	20000b54 	.word	0x20000b54

00016ce8 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   16ce8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   16cec:	4605      	mov	r5, r0
   16cee:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   16cf0:	4610      	mov	r0, r2
   16cf2:	4619      	mov	r1, r3
{
   16cf4:	4616      	mov	r6, r2
   16cf6:	461f      	mov	r7, r3
	uint64_t end = z_timeout_end_calc(timeout);
   16cf8:	f008 f9c3 	bl	1f082 <z_timeout_end_calc>
   16cfc:	4680      	mov	r8, r0
   16cfe:	4689      	mov	r9, r1
	__asm__ volatile(
   16d00:	f04f 0320 	mov.w	r3, #32
   16d04:	f3ef 8a11 	mrs	sl, BASEPRI
   16d08:	f383 8811 	msr	BASEPRI, r3
   16d0c:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   16d10:	8b6b      	ldrh	r3, [r5, #26]
   16d12:	2b00      	cmp	r3, #0
   16d14:	d054      	beq.n	16dc0 <net_buf_alloc_len+0xd8>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   16d16:	8b2a      	ldrh	r2, [r5, #24]
   16d18:	429a      	cmp	r2, r3
   16d1a:	d93d      	bls.n	16d98 <net_buf_alloc_len+0xb0>
	return z_impl_k_queue_get(queue, timeout);
   16d1c:	2200      	movs	r2, #0
   16d1e:	2300      	movs	r3, #0
   16d20:	4628      	mov	r0, r5
   16d22:	f001 ff83 	bl	18c2c <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   16d26:	4604      	mov	r4, r0
   16d28:	2800      	cmp	r0, #0
   16d2a:	d035      	beq.n	16d98 <net_buf_alloc_len+0xb0>
	__asm__ volatile(
   16d2c:	f38a 8811 	msr	BASEPRI, sl
   16d30:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   16d34:	9b01      	ldr	r3, [sp, #4]
   16d36:	2b00      	cmp	r3, #0
   16d38:	d052      	beq.n	16de0 <net_buf_alloc_len+0xf8>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   16d3a:	ea56 0307 	orrs.w	r3, r6, r7
   16d3e:	d010      	beq.n	16d62 <net_buf_alloc_len+0x7a>
   16d40:	1c7b      	adds	r3, r7, #1
   16d42:	bf08      	it	eq
   16d44:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   16d48:	d00b      	beq.n	16d62 <net_buf_alloc_len+0x7a>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   16d4a:	f002 fdfd 	bl	19948 <z_tick_get>
   16d4e:	ebb8 0600 	subs.w	r6, r8, r0
   16d52:	eb69 0701 	sbc.w	r7, r9, r1
   16d56:	2e00      	cmp	r6, #0
   16d58:	f177 0300 	sbcs.w	r3, r7, #0
   16d5c:	bfbc      	itt	lt
   16d5e:	2600      	movlt	r6, #0
   16d60:	2700      	movlt	r7, #0
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   16d62:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   16d64:	f8df 8090 	ldr.w	r8, [pc, #144]	; 16df8 <net_buf_alloc_len+0x110>
   16d68:	2228      	movs	r2, #40	; 0x28
   16d6a:	fb02 8303 	mla	r3, r2, r3, r8
   16d6e:	a901      	add	r1, sp, #4
   16d70:	6a1b      	ldr	r3, [r3, #32]
   16d72:	681b      	ldr	r3, [r3, #0]
   16d74:	4632      	mov	r2, r6
   16d76:	681d      	ldr	r5, [r3, #0]
   16d78:	4620      	mov	r0, r4
   16d7a:	463b      	mov	r3, r7
   16d7c:	47a8      	blx	r5
   16d7e:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   16d80:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   16d82:	bb70      	cbnz	r0, 16de2 <net_buf_alloc_len+0xfa>
 */
static inline void net_buf_destroy(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);

	k_lifo_put(&pool->free, buf);
   16d84:	79a0      	ldrb	r0, [r4, #6]
   16d86:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16d8a:	4621      	mov	r1, r4
   16d8c:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   16d90:	f007 ff61 	bl	1ec56 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   16d94:	462c      	mov	r4, r5
}
   16d96:	e01f      	b.n	16dd8 <net_buf_alloc_len+0xf0>
		uninit_count = pool->uninit_count--;
   16d98:	8b68      	ldrh	r0, [r5, #26]
   16d9a:	1e43      	subs	r3, r0, #1
   16d9c:	836b      	strh	r3, [r5, #26]
   16d9e:	f38a 8811 	msr	BASEPRI, sl
   16da2:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   16da6:	8b2c      	ldrh	r4, [r5, #24]
   16da8:	1a24      	subs	r4, r4, r0
   16daa:	6a68      	ldr	r0, [r5, #36]	; 0x24
   16dac:	2318      	movs	r3, #24
   16dae:	fb03 0404 	mla	r4, r3, r4, r0
	return pool - _net_buf_pool_list;
   16db2:	4811      	ldr	r0, [pc, #68]	; (16df8 <net_buf_alloc_len+0x110>)
   16db4:	4b11      	ldr	r3, [pc, #68]	; (16dfc <net_buf_alloc_len+0x114>)
   16db6:	1a2d      	subs	r5, r5, r0
   16db8:	10ed      	asrs	r5, r5, #3
   16dba:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   16dbc:	71a5      	strb	r5, [r4, #6]
		goto success;
   16dbe:	e7b9      	b.n	16d34 <net_buf_alloc_len+0x4c>
   16dc0:	f38a 8811 	msr	BASEPRI, sl
   16dc4:	f3bf 8f6f 	isb	sy
   16dc8:	4632      	mov	r2, r6
   16dca:	463b      	mov	r3, r7
   16dcc:	4628      	mov	r0, r5
   16dce:	f001 ff2d 	bl	18c2c <z_impl_k_queue_get>
	if (!buf) {
   16dd2:	4604      	mov	r4, r0
   16dd4:	2800      	cmp	r0, #0
   16dd6:	d1ad      	bne.n	16d34 <net_buf_alloc_len+0x4c>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	pool->avail_count--;
	__ASSERT_NO_MSG(pool->avail_count >= 0);
#endif
	return buf;
}
   16dd8:	4620      	mov	r0, r4
   16dda:	b002      	add	sp, #8
   16ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		buf->__buf = NULL;
   16de0:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   16de2:	2300      	movs	r3, #0
	buf->ref   = 1U;
   16de4:	2201      	movs	r2, #1
	buf->frags = NULL;
   16de6:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   16de8:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   16dea:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   16dec:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   16dee:	6923      	ldr	r3, [r4, #16]
   16df0:	81e2      	strh	r2, [r4, #14]
   16df2:	60a3      	str	r3, [r4, #8]
	return buf;
   16df4:	e7f0      	b.n	16dd8 <net_buf_alloc_len+0xf0>
   16df6:	bf00      	nop
   16df8:	20000b54 	.word	0x20000b54
   16dfc:	cccccccd 	.word	0xcccccccd

00016e00 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   16e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   16e04:	4d17      	ldr	r5, [pc, #92]	; (16e64 <net_buf_unref+0x64>)
   16e06:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   16e08:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   16e0a:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   16e0c:	b90c      	cbnz	r4, 16e12 <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   16e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   16e12:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   16e14:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   16e18:	3b01      	subs	r3, #1
   16e1a:	b2db      	uxtb	r3, r3
   16e1c:	7123      	strb	r3, [r4, #4]
   16e1e:	2b00      	cmp	r3, #0
   16e20:	d1f5      	bne.n	16e0e <net_buf_unref+0xe>
		if (buf->__buf) {
   16e22:	6921      	ldr	r1, [r4, #16]
   16e24:	b159      	cbz	r1, 16e3e <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   16e26:	7963      	ldrb	r3, [r4, #5]
   16e28:	079b      	lsls	r3, r3, #30
   16e2a:	d407      	bmi.n	16e3c <net_buf_unref+0x3c>
	pool->alloc->cb->unref(buf, data);
   16e2c:	79a3      	ldrb	r3, [r4, #6]
   16e2e:	fb07 5303 	mla	r3, r7, r3, r5
   16e32:	4620      	mov	r0, r4
   16e34:	6a1b      	ldr	r3, [r3, #32]
   16e36:	681b      	ldr	r3, [r3, #0]
   16e38:	689b      	ldr	r3, [r3, #8]
   16e3a:	4798      	blx	r3
			buf->__buf = NULL;
   16e3c:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   16e3e:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   16e40:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   16e42:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   16e46:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   16e48:	69db      	ldr	r3, [r3, #28]
   16e4a:	b11b      	cbz	r3, 16e54 <net_buf_unref+0x54>
			pool->destroy(buf);
   16e4c:	4620      	mov	r0, r4
   16e4e:	4798      	blx	r3
{
   16e50:	4644      	mov	r4, r8
   16e52:	e7db      	b.n	16e0c <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   16e54:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   16e58:	4621      	mov	r1, r4
   16e5a:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   16e5e:	f007 fefa 	bl	1ec56 <k_queue_prepend>
}
   16e62:	e7f5      	b.n	16e50 <net_buf_unref+0x50>
   16e64:	20000b54 	.word	0x20000b54

00016e68 <adc_gain_invert>:
		[ADC_GAIN_64] = {.mul = 1, .div = 64},
		[ADC_GAIN_128] = {.mul = 1, .div = 128},
	};
	int rv = -EINVAL;

	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   16e68:	280e      	cmp	r0, #14
{
   16e6a:	b510      	push	{r4, lr}
	if ((uint8_t)gain < ARRAY_SIZE(gains)) {
   16e6c:	d80e      	bhi.n	16e8c <adc_gain_invert+0x24>
		const struct gain_desc *gdp = &gains[gain];

		if ((gdp->mul != 0) && (gdp->div != 0)) {
   16e6e:	4a09      	ldr	r2, [pc, #36]	; (16e94 <adc_gain_invert+0x2c>)
   16e70:	f812 4010 	ldrb.w	r4, [r2, r0, lsl #1]
   16e74:	b154      	cbz	r4, 16e8c <adc_gain_invert+0x24>
   16e76:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   16e7a:	7842      	ldrb	r2, [r0, #1]
   16e7c:	b132      	cbz	r2, 16e8c <adc_gain_invert+0x24>
			*value = (gdp->mul * *value) / gdp->div;
   16e7e:	680b      	ldr	r3, [r1, #0]
			rv = 0;
   16e80:	2000      	movs	r0, #0
			*value = (gdp->mul * *value) / gdp->div;
   16e82:	4363      	muls	r3, r4
   16e84:	fb93 f3f2 	sdiv	r3, r3, r2
   16e88:	600b      	str	r3, [r1, #0]
		}
	}

	return rv;
}
   16e8a:	bd10      	pop	{r4, pc}
	int rv = -EINVAL;
   16e8c:	f06f 0015 	mvn.w	r0, #21
	return rv;
   16e90:	e7fb      	b.n	16e8a <adc_gain_invert+0x22>
   16e92:	bf00      	nop
   16e94:	00020dcd 	.word	0x00020dcd

00016e98 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
   16e98:	4a05      	ldr	r2, [pc, #20]	; (16eb0 <adc_context_start_sampling.isra.0+0x18>)
   16e9a:	2301      	movs	r3, #1
   16e9c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
   16ea0:	b108      	cbz	r0, 16ea6 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ea2:	60d3      	str	r3, [r2, #12]
}
   16ea4:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16ea6:	6013      	str	r3, [r2, #0]
   16ea8:	4a02      	ldr	r2, [pc, #8]	; (16eb4 <adc_context_start_sampling.isra.0+0x1c>)
   16eaa:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   16eac:	4770      	bx	lr
   16eae:	bf00      	nop
   16eb0:	40007000 	.word	0x40007000
   16eb4:	40007004 	.word	0x40007004

00016eb8 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
   16eb8:	7908      	ldrb	r0, [r1, #4]
{
   16eba:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
   16ebc:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
   16ec0:	2c07      	cmp	r4, #7
   16ec2:	d81f      	bhi.n	16f04 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
   16ec4:	780b      	ldrb	r3, [r1, #0]
   16ec6:	2b09      	cmp	r3, #9
   16ec8:	d81c      	bhi.n	16f04 <adc_nrfx_channel_setup+0x4c>
   16eca:	e8df f003 	tbb	[pc, r3]
   16ece:	0606      	.short	0x0606
   16ed0:	1b060606 	.word	0x1b060606
   16ed4:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
   16ed8:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
   16eda:	784a      	ldrb	r2, [r1, #1]
   16edc:	2a03      	cmp	r2, #3
   16ede:	d018      	beq.n	16f12 <adc_nrfx_channel_setup+0x5a>
   16ee0:	2a04      	cmp	r2, #4
   16ee2:	d10f      	bne.n	16f04 <adc_nrfx_channel_setup+0x4c>
   16ee4:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
   16ee6:	884a      	ldrh	r2, [r1, #2]
   16ee8:	f244 060a 	movw	r6, #16394	; 0x400a
   16eec:	42b2      	cmp	r2, r6
   16eee:	d044      	beq.n	16f7a <adc_nrfx_channel_setup+0xc2>
   16ef0:	d811      	bhi.n	16f16 <adc_nrfx_channel_setup+0x5e>
   16ef2:	f244 0603 	movw	r6, #16387	; 0x4003
   16ef6:	42b2      	cmp	r2, r6
   16ef8:	d03b      	beq.n	16f72 <adc_nrfx_channel_setup+0xba>
   16efa:	f244 0605 	movw	r6, #16389	; 0x4005
   16efe:	42b2      	cmp	r2, r6
   16f00:	d039      	beq.n	16f76 <adc_nrfx_channel_setup+0xbe>
   16f02:	b3d2      	cbz	r2, 16f7a <adc_nrfx_channel_setup+0xc2>
   16f04:	f06f 0015 	mvn.w	r0, #21
   16f08:	e032      	b.n	16f70 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
   16f0a:	2306      	movs	r3, #6
		break;
   16f0c:	e7e5      	b.n	16eda <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
   16f0e:	2307      	movs	r3, #7
		break;
   16f10:	e7e3      	b.n	16eda <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
   16f12:	2501      	movs	r5, #1
   16f14:	e7e7      	b.n	16ee6 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
   16f16:	f244 0614 	movw	r6, #16404	; 0x4014
   16f1a:	42b2      	cmp	r2, r6
   16f1c:	d02f      	beq.n	16f7e <adc_nrfx_channel_setup+0xc6>
   16f1e:	f244 0628 	movw	r6, #16424	; 0x4028
   16f22:	42b2      	cmp	r2, r6
   16f24:	d02d      	beq.n	16f82 <adc_nrfx_channel_setup+0xca>
   16f26:	f244 060f 	movw	r6, #16399	; 0x400f
   16f2a:	42b2      	cmp	r2, r6
   16f2c:	d1ea      	bne.n	16f04 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
   16f2e:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   16f30:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
   16f34:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
   16f36:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
   16f3a:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
   16f3e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
   16f42:	0122      	lsls	r2, r4, #4
   16f44:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   16f48:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
   16f4c:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
   16f4e:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
   16f52:	0123      	lsls	r3, r4, #4
   16f54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   16f58:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
   16f5c:	798a      	ldrb	r2, [r1, #6]
   16f5e:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
   16f62:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
   16f66:	4b08      	ldr	r3, [pc, #32]	; (16f88 <adc_nrfx_channel_setup+0xd0>)
   16f68:	441c      	add	r4, r3
   16f6a:	794b      	ldrb	r3, [r1, #5]
   16f6c:	f884 3098 	strb.w	r3, [r4, #152]	; 0x98
}
   16f70:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
   16f72:	2200      	movs	r2, #0
   16f74:	e7dc      	b.n	16f30 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
   16f76:	2201      	movs	r2, #1
   16f78:	e7da      	b.n	16f30 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
   16f7a:	2202      	movs	r2, #2
   16f7c:	e7d8      	b.n	16f30 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
   16f7e:	2204      	movs	r2, #4
   16f80:	e7d6      	b.n	16f30 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
   16f82:	2205      	movs	r2, #5
   16f84:	e7d4      	b.n	16f30 <adc_nrfx_channel_setup+0x78>
   16f86:	bf00      	nop
   16f88:	20000178 	.word	0x20000178

00016f8c <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   16f8c:	4b2f      	ldr	r3, [pc, #188]	; (1704c <saadc_irq_handler+0xc0>)
   16f8e:	681a      	ldr	r2, [r3, #0]
	return error;
}
#endif /* CONFIG_ADC_ASYNC */

static void saadc_irq_handler(const struct device *dev)
{
   16f90:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
   16f92:	2a00      	cmp	r2, #0
   16f94:	d04b      	beq.n	1702e <saadc_irq_handler+0xa2>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   16f96:	2200      	movs	r2, #0
   16f98:	601a      	str	r2, [r3, #0]
   16f9a:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
   16f9c:	4c2c      	ldr	r4, [pc, #176]	; (17050 <saadc_irq_handler+0xc4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   16f9e:	4b2d      	ldr	r3, [pc, #180]	; (17054 <saadc_irq_handler+0xc8>)
   16fa0:	2101      	movs	r1, #1
   16fa2:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
   16fa4:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
   16fa8:	6f63      	ldr	r3, [r4, #116]	; 0x74
   16faa:	b3db      	cbz	r3, 17024 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
   16fac:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
   16fb0:	b143      	cbz	r3, 16fc4 <saadc_irq_handler+0x38>
			action = callback(dev,
   16fb2:	f8b4 2094 	ldrh.w	r2, [r4, #148]	; 0x94
   16fb6:	f104 0174 	add.w	r1, r4, #116	; 0x74
   16fba:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
   16fbc:	2801      	cmp	r0, #1
   16fbe:	d014      	beq.n	16fea <saadc_irq_handler+0x5e>
   16fc0:	2802      	cmp	r0, #2
   16fc2:	d029      	beq.n	17018 <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
   16fc4:	f8b4 3094 	ldrh.w	r3, [r4, #148]	; 0x94
   16fc8:	f8b4 2090 	ldrh.w	r2, [r4, #144]	; 0x90
   16fcc:	429a      	cmp	r2, r3
   16fce:	d923      	bls.n	17018 <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
   16fd0:	3301      	adds	r3, #1
   16fd2:	f8a4 3094 	strh.w	r3, [r4, #148]	; 0x94
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
   16fd6:	4b20      	ldr	r3, [pc, #128]	; (17058 <saadc_irq_handler+0xcc>)
   16fd8:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
   16fdc:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
   16fe0:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
   16fe2:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   16fe6:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
   16fea:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   16fee:	b92b      	cbnz	r3, 16ffc <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
   16ff0:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
		 */
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_STOP);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
   16ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   16ff8:	f7ff bf4e 	b.w	16e98 <adc_context_start_sampling.isra.0>
   16ffc:	f3bf 8f5b 	dmb	ish
   17000:	e854 3f00 	ldrex	r3, [r4]
   17004:	1e5a      	subs	r2, r3, #1
   17006:	e844 2100 	strex	r1, r2, [r4]
   1700a:	2900      	cmp	r1, #0
   1700c:	d1f8      	bne.n	17000 <saadc_irq_handler+0x74>
   1700e:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
   17012:	2b01      	cmp	r3, #1
   17014:	dcec      	bgt.n	16ff0 <saadc_irq_handler+0x64>
   17016:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
   17018:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   1701c:	b113      	cbz	r3, 17024 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
   1701e:	480f      	ldr	r0, [pc, #60]	; (1705c <saadc_irq_handler+0xd0>)
   17020:	f008 f858 	bl	1f0d4 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
   17024:	480e      	ldr	r0, [pc, #56]	; (17060 <saadc_irq_handler+0xd4>)
   17026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1702a:	f002 b9b1 	b.w	19390 <z_impl_k_sem_give>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1702e:	4b0d      	ldr	r3, [pc, #52]	; (17064 <saadc_irq_handler+0xd8>)
   17030:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
   17032:	2900      	cmp	r1, #0
   17034:	d0ef      	beq.n	17016 <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   17036:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   17038:	4a06      	ldr	r2, [pc, #24]	; (17054 <saadc_irq_handler+0xc8>)
   1703a:	681b      	ldr	r3, [r3, #0]
   1703c:	2301      	movs	r3, #1
   1703e:	6013      	str	r3, [r2, #0]
   17040:	f842 3c08 	str.w	r3, [r2, #-8]
   17044:	f842 3c04 	str.w	r3, [r2, #-4]
}
   17048:	e7e5      	b.n	17016 <saadc_irq_handler+0x8a>
   1704a:	bf00      	nop
   1704c:	40007104 	.word	0x40007104
   17050:	20000178 	.word	0x20000178
   17054:	40007008 	.word	0x40007008
   17058:	40007000 	.word	0x40007000
   1705c:	20000180 	.word	0x20000180
   17060:	200001d0 	.word	0x200001d0
   17064:	40007110 	.word	0x40007110

00017068 <adc_nrfx_read>:
{
   17068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1706a:	460d      	mov	r5, r1
	return z_impl_k_sem_take(sem, timeout);
   1706c:	485d      	ldr	r0, [pc, #372]	; (171e4 <adc_nrfx_read+0x17c>)
   1706e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17072:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17076:	f002 f9b1 	bl	193dc <z_impl_k_sem_take>
	uint32_t selected_channels = sequence->channels;
   1707a:	6868      	ldr	r0, [r5, #4]
	if (!selected_channels ||
   1707c:	b910      	cbnz	r0, 17084 <adc_nrfx_read+0x1c>
	error = set_resolution(sequence);
   1707e:	f06f 0415 	mvn.w	r4, #21
   17082:	e098      	b.n	171b6 <adc_nrfx_read+0x14e>
	if (!selected_channels ||
   17084:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
   17088:	d1f9      	bne.n	1707e <adc_nrfx_read+0x16>
    p_reg->CH[channel].PSELP = pselp;
   1708a:	4c57      	ldr	r4, [pc, #348]	; (171e8 <adc_nrfx_read+0x180>)
			if (m_data.positive_inputs[channel_id] == 0U) {
   1708c:	4f57      	ldr	r7, [pc, #348]	; (171ec <adc_nrfx_read+0x184>)
	active_channels = 0U;
   1708e:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
   17090:	fa20 f302 	lsr.w	r3, r0, r2
   17094:	f013 0301 	ands.w	r3, r3, #1
   17098:	d032      	beq.n	17100 <adc_nrfx_read+0x98>
			if (m_data.positive_inputs[channel_id] == 0U) {
   1709a:	18bb      	adds	r3, r7, r2
   1709c:	f893 c098 	ldrb.w	ip, [r3, #152]	; 0x98
   170a0:	f1bc 0f00 	cmp.w	ip, #0
   170a4:	d0eb      	beq.n	1707e <adc_nrfx_read+0x16>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
   170a6:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
   170aa:	7c6e      	ldrb	r6, [r5, #17]
   170ac:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
   170b0:	3e00      	subs	r6, #0
   170b2:	bf18      	it	ne
   170b4:	2601      	movne	r6, #1
   170b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   170ba:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
   170be:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
   170c2:	f102 0351 	add.w	r3, r2, #81	; 0x51
   170c6:	011b      	lsls	r3, r3, #4
			++active_channels;
   170c8:	3101      	adds	r1, #1
   170ca:	f844 c003 	str.w	ip, [r4, r3]
   170ce:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
   170d0:	3201      	adds	r2, #1
   170d2:	2a08      	cmp	r2, #8
   170d4:	d1dc      	bne.n	17090 <adc_nrfx_read+0x28>
	switch (sequence->resolution) {
   170d6:	7c2b      	ldrb	r3, [r5, #16]
   170d8:	3b08      	subs	r3, #8
   170da:	2b06      	cmp	r3, #6
   170dc:	d8cf      	bhi.n	1707e <adc_nrfx_read+0x16>
   170de:	a201      	add	r2, pc, #4	; (adr r2, 170e4 <adc_nrfx_read+0x7c>)
   170e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   170e4:	000171cb 	.word	0x000171cb
   170e8:	0001707f 	.word	0x0001707f
   170ec:	0001710b 	.word	0x0001710b
   170f0:	0001707f 	.word	0x0001707f
   170f4:	000171c3 	.word	0x000171c3
   170f8:	0001707f 	.word	0x0001707f
   170fc:	000171c7 	.word	0x000171c7
   17100:	f102 0651 	add.w	r6, r2, #81	; 0x51
   17104:	0136      	lsls	r6, r6, #4
   17106:	51a3      	str	r3, [r4, r6]
}
   17108:	e7e2      	b.n	170d0 <adc_nrfx_read+0x68>
	error = set_resolution(sequence);
   1710a:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
   1710c:	4b36      	ldr	r3, [pc, #216]	; (171e8 <adc_nrfx_read+0x180>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   1710e:	2901      	cmp	r1, #1
   17110:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	error = set_oversampling(sequence, active_channels);
   17114:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
   17116:	d95a      	bls.n	171ce <adc_nrfx_read+0x166>
   17118:	2a00      	cmp	r2, #0
   1711a:	d1b0      	bne.n	1707e <adc_nrfx_read+0x16>
    p_reg->OVERSAMPLE = oversample;
   1711c:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
   17120:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
   17122:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
   17124:	b112      	cbz	r2, 1712c <adc_nrfx_read+0xc4>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
   17126:	8912      	ldrh	r2, [r2, #8]
   17128:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
   1712c:	68ea      	ldr	r2, [r5, #12]
   1712e:	429a      	cmp	r2, r3
   17130:	d355      	bcc.n	171de <adc_nrfx_read+0x176>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
   17132:	4b2d      	ldr	r3, [pc, #180]	; (171e8 <adc_nrfx_read+0x180>)
   17134:	68aa      	ldr	r2, [r5, #8]
   17136:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
	ctx->sequence = *sequence;
   1713a:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
   1713c:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
   17140:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   17142:	4c2a      	ldr	r4, [pc, #168]	; (171ec <adc_nrfx_read+0x184>)
   17144:	f104 0674 	add.w	r6, r4, #116	; 0x74
   17148:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1714a:	683b      	ldr	r3, [r7, #0]
   1714c:	6033      	str	r3, [r6, #0]
	if (sequence->options) {
   1714e:	682a      	ldr	r2, [r5, #0]
	ctx->status = 0;
   17150:	2600      	movs	r6, #0
   17152:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
   17154:	2a00      	cmp	r2, #0
   17156:	d03d      	beq.n	171d4 <adc_nrfx_read+0x16c>
		ctx->options = *sequence->options;
   17158:	ca07      	ldmia	r2, {r0, r1, r2}
   1715a:	f104 0388 	add.w	r3, r4, #136	; 0x88
   1715e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
		ctx->sequence.options = &ctx->options;
   17162:	6763      	str	r3, [r4, #116]	; 0x74
		ctx->sampling_index = 0U;
   17164:	f8a4 6094 	strh.w	r6, [r4, #148]	; 0x94
		if (ctx->options.interval_us != 0U) {
   17168:	b3a0      	cbz	r0, 171d4 <adc_nrfx_read+0x16c>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1716a:	f3bf 8f5b 	dmb	ish
   1716e:	e854 3f00 	ldrex	r3, [r4]
   17172:	e844 6200 	strex	r2, r6, [r4]
   17176:	2a00      	cmp	r2, #0
   17178:	d1f9      	bne.n	1716e <adc_nrfx_read+0x106>
   1717a:	f3bf 8f5b 	dmb	ish
   1717e:	481c      	ldr	r0, [pc, #112]	; (171f0 <adc_nrfx_read+0x188>)
   17180:	f8d4 6088 	ldr.w	r6, [r4, #136]	; 0x88
   17184:	4a1b      	ldr	r2, [pc, #108]	; (171f4 <adc_nrfx_read+0x18c>)
   17186:	f44f 4500 	mov.w	r5, #32768	; 0x8000
   1718a:	2100      	movs	r1, #0
   1718c:	2300      	movs	r3, #0
   1718e:	fbe5 0106 	umlal	r0, r1, r5, r6
   17192:	f7e9 fbd3 	bl	93c <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
   17196:	2200      	movs	r2, #0
   17198:	e9cd 0100 	strd	r0, r1, [sp]
   1719c:	2300      	movs	r3, #0
   1719e:	f104 0008 	add.w	r0, r4, #8
   171a2:	f002 fc11 	bl	199c8 <z_impl_k_timer_start>
	return z_impl_k_sem_take(sem, timeout);
   171a6:	4814      	ldr	r0, [pc, #80]	; (171f8 <adc_nrfx_read+0x190>)
   171a8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   171ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   171b0:	f002 f914 	bl	193dc <z_impl_k_sem_take>
	return ctx->status;
   171b4:	6f24      	ldr	r4, [r4, #112]	; 0x70
	z_impl_k_sem_give(sem);
   171b6:	480b      	ldr	r0, [pc, #44]	; (171e4 <adc_nrfx_read+0x17c>)
   171b8:	f002 f8ea 	bl	19390 <z_impl_k_sem_give>
}
   171bc:	4620      	mov	r0, r4
   171be:	b003      	add	sp, #12
   171c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
   171c2:	2202      	movs	r2, #2
		break;
   171c4:	e7a2      	b.n	1710c <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
   171c6:	2203      	movs	r2, #3
		break;
   171c8:	e7a0      	b.n	1710c <adc_nrfx_read+0xa4>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
   171ca:	2200      	movs	r2, #0
   171cc:	e79e      	b.n	1710c <adc_nrfx_read+0xa4>
	switch (sequence->oversampling) {
   171ce:	2a08      	cmp	r2, #8
   171d0:	d9a4      	bls.n	1711c <adc_nrfx_read+0xb4>
   171d2:	e754      	b.n	1707e <adc_nrfx_read+0x16>
	adc_context_start_sampling(ctx);
   171d4:	f894 0086 	ldrb.w	r0, [r4, #134]	; 0x86
   171d8:	f7ff fe5e 	bl	16e98 <adc_context_start_sampling.isra.0>
   171dc:	e7e3      	b.n	171a6 <adc_nrfx_read+0x13e>
		return -ENOMEM;
   171de:	f06f 040b 	mvn.w	r4, #11
   171e2:	e7e8      	b.n	171b6 <adc_nrfx_read+0x14e>
   171e4:	200001b8 	.word	0x200001b8
   171e8:	40007000 	.word	0x40007000
   171ec:	20000178 	.word	0x20000178
   171f0:	000f423f 	.word	0x000f423f
   171f4:	000f4240 	.word	0x000f4240
   171f8:	200001d0 	.word	0x200001d0

000171fc <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   171fc:	4b0d      	ldr	r3, [pc, #52]	; (17234 <init_saadc+0x38>)

DEVICE_DECLARE(adc_0);

static int init_saadc(const struct device *dev)
{
   171fe:	b510      	push	{r4, lr}
   17200:	2400      	movs	r4, #0
   17202:	601c      	str	r4, [r3, #0]
   17204:	681b      	ldr	r3, [r3, #0]
   17206:	4b0c      	ldr	r3, [pc, #48]	; (17238 <init_saadc+0x3c>)
   17208:	601c      	str	r4, [r3, #0]
   1720a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1720c:	4b0b      	ldr	r3, [pc, #44]	; (1723c <init_saadc+0x40>)
   1720e:	2212      	movs	r2, #18
   17210:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
   17214:	2007      	movs	r0, #7
   17216:	f7ee f919 	bl	544c <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
   1721a:	4622      	mov	r2, r4
   1721c:	2101      	movs	r1, #1
   1721e:	2007      	movs	r0, #7
   17220:	f7ee f946 	bl	54b0 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
   17224:	4806      	ldr	r0, [pc, #24]	; (17240 <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
   17226:	6c83      	ldr	r3, [r0, #72]	; 0x48
   17228:	b913      	cbnz	r3, 17230 <init_saadc+0x34>
	z_impl_k_sem_give(sem);
   1722a:	3040      	adds	r0, #64	; 0x40
   1722c:	f002 f8b0 	bl	19390 <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_GET(adc_0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
   17230:	2000      	movs	r0, #0
   17232:	bd10      	pop	{r4, pc}
   17234:	40007104 	.word	0x40007104
   17238:	40007110 	.word	0x40007110
   1723c:	40007000 	.word	0x40007000
   17240:	20000178 	.word	0x20000178

00017244 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   17244:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   17246:	4b09      	ldr	r3, [pc, #36]	; (1726c <gpio_nrfx_init+0x28>)
   17248:	781a      	ldrb	r2, [r3, #0]
   1724a:	b96a      	cbnz	r2, 17268 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1724c:	2101      	movs	r1, #1
   1724e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   17250:	2006      	movs	r0, #6
   17252:	2105      	movs	r1, #5
   17254:	f7ee f92c 	bl	54b0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   17258:	2006      	movs	r0, #6
   1725a:	f7ee f8f7 	bl	544c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1725e:	4b04      	ldr	r3, [pc, #16]	; (17270 <gpio_nrfx_init+0x2c>)
   17260:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   17264:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   17268:	2000      	movs	r0, #0
   1726a:	bd08      	pop	{r3, pc}
   1726c:	200029d5 	.word	0x200029d5
   17270:	40006000 	.word	0x40006000

00017274 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   17274:	4b2b      	ldr	r3, [pc, #172]	; (17324 <gpio_nrfx_config+0xb0>)
{
   17276:	b5f0      	push	{r4, r5, r6, r7, lr}
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   17278:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1727a:	482b      	ldr	r0, [pc, #172]	; (17328 <gpio_nrfx_config+0xb4>)
   1727c:	4013      	ands	r3, r2
   1727e:	4283      	cmp	r3, r0
   17280:	d041      	beq.n	17306 <gpio_nrfx_config+0x92>
   17282:	d80d      	bhi.n	172a0 <gpio_nrfx_config+0x2c>
   17284:	2b06      	cmp	r3, #6
   17286:	d015      	beq.n	172b4 <gpio_nrfx_config+0x40>
   17288:	d805      	bhi.n	17296 <gpio_nrfx_config+0x22>
   1728a:	b19b      	cbz	r3, 172b4 <gpio_nrfx_config+0x40>
   1728c:	2b02      	cmp	r3, #2
   1728e:	d03c      	beq.n	1730a <gpio_nrfx_config+0x96>
   17290:	f06f 0015 	mvn.w	r0, #21
   17294:	e036      	b.n	17304 <gpio_nrfx_config+0x90>
   17296:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1729a:	d1f9      	bne.n	17290 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1729c:	2301      	movs	r3, #1
   1729e:	e009      	b.n	172b4 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   172a0:	4822      	ldr	r0, [pc, #136]	; (1732c <gpio_nrfx_config+0xb8>)
   172a2:	4283      	cmp	r3, r0
   172a4:	d033      	beq.n	1730e <gpio_nrfx_config+0x9a>
   172a6:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   172aa:	d032      	beq.n	17312 <gpio_nrfx_config+0x9e>
   172ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   172b0:	d1ee      	bne.n	17290 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   172b2:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   172b4:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   172b6:	bf54      	ite	pl
   172b8:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   172bc:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   172be:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   172c2:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   172c4:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   172c8:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   172cc:	d507      	bpl.n	172de <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   172ce:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   172d2:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   172d4:	d01f      	beq.n	17316 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   172d6:	2201      	movs	r2, #1
   172d8:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   172da:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   172de:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   172e0:	4c13      	ldr	r4, [pc, #76]	; (17330 <gpio_nrfx_config+0xbc>)
   172e2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   172e4:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   172e8:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   172ec:	bf18      	it	ne
   172ee:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   172f2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   172f6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   172fa:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   172fe:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   17302:	2000      	movs	r0, #0
}
   17304:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   17306:	2307      	movs	r3, #7
   17308:	e7d4      	b.n	172b4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1730a:	2304      	movs	r3, #4
   1730c:	e7d2      	b.n	172b4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1730e:	2305      	movs	r3, #5
   17310:	e7d0      	b.n	172b4 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   17312:	2303      	movs	r3, #3
   17314:	e7ce      	b.n	172b4 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   17316:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   17318:	bf42      	ittt	mi
   1731a:	2201      	movmi	r2, #1
   1731c:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1731e:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   17322:	e7dc      	b.n	172de <gpio_nrfx_config+0x6a>
   17324:	00f00006 	.word	0x00f00006
   17328:	00100006 	.word	0x00100006
   1732c:	00400002 	.word	0x00400002
   17330:	50000300 	.word	0x50000300

00017334 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   17334:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   17338:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1733a:	4b08      	ldr	r3, [pc, #32]	; (1735c <nrf_gpio_cfg_sense_set+0x28>)
    switch (nrf_gpio_pin_port_number_extract(p_pin))
   1733c:	2801      	cmp	r0, #1
        case 1: return NRF_P1;
   1733e:	bf18      	it	ne
   17340:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   17344:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   17348:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1734c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   17350:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   17354:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   17358:	4770      	bx	lr
   1735a:	bf00      	nop
   1735c:	50000300 	.word	0x50000300

00017360 <gpio_nrfx_pin_interrupt_configure>:
{
   17360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   17362:	460d      	mov	r5, r1
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17364:	6841      	ldr	r1, [r0, #4]
	struct gpio_nrfx_data *data = get_port_data(port);
   17366:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   17368:	7a08      	ldrb	r0, [r1, #8]
   1736a:	f005 061f 	and.w	r6, r5, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1736e:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   17372:	ea46 1640 	orr.w	r6, r6, r0, lsl #5
   17376:	d110      	bne.n	1739a <gpio_nrfx_pin_interrupt_configure+0x3a>
    return pin_number >> 5;
   17378:	0970      	lsrs	r0, r6, #5
        case 1: return NRF_P1;
   1737a:	2801      	cmp	r0, #1
    *p_pin = pin_number & 0x1F;
   1737c:	f006 011f 	and.w	r1, r6, #31
        case 1: return NRF_P1;
   17380:	486b      	ldr	r0, [pc, #428]	; (17530 <gpio_nrfx_pin_interrupt_configure+0x1d0>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   17382:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
        case 1: return NRF_P1;
   17386:	bf18      	it	ne
   17388:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1738c:	f850 1021 	ldr.w	r1, [r0, r1, lsl #2]
   17390:	07cc      	lsls	r4, r1, #31
   17392:	d507      	bpl.n	173a4 <gpio_nrfx_pin_interrupt_configure+0x44>
		return -ENOTSUP;
   17394:	f06f 0022 	mvn.w	r0, #34	; 0x22
   17398:	e0bd      	b.n	17516 <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1739a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
   1739e:	68f9      	ldr	r1, [r7, #12]
   173a0:	f000 80aa 	beq.w	174f8 <gpio_nrfx_pin_interrupt_configure+0x198>
   173a4:	68f8      	ldr	r0, [r7, #12]
   173a6:	2101      	movs	r1, #1
   173a8:	40a9      	lsls	r1, r5
   173aa:	4301      	orrs	r1, r0
   173ac:	6978      	ldr	r0, [r7, #20]
   173ae:	60f9      	str	r1, [r7, #12]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   173b0:	2101      	movs	r1, #1
   173b2:	40a9      	lsls	r1, r5
   173b4:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
   173b8:	69ba      	ldr	r2, [r7, #24]
   173ba:	bf0c      	ite	eq
   173bc:	4308      	orreq	r0, r1
   173be:	4388      	bicne	r0, r1
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   173c0:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   173c4:	bf0c      	ite	eq
   173c6:	430a      	orreq	r2, r1
   173c8:	438a      	bicne	r2, r1
   173ca:	61ba      	str	r2, [r7, #24]
   173cc:	693a      	ldr	r2, [r7, #16]
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   173ce:	6178      	str	r0, [r7, #20]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   173d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   173d4:	bf0c      	ite	eq
   173d6:	4311      	orreq	r1, r2
   173d8:	ea22 0101 	bicne.w	r1, r2, r1
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   173dc:	4a55      	ldr	r2, [pc, #340]	; (17534 <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   173de:	6139      	str	r1, [r7, #16]
   173e0:	f8d2 1304 	ldr.w	r1, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   173e4:	2300      	movs	r3, #0
   173e6:	b2c9      	uxtb	r1, r1
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   173e8:	f503 70a2 	add.w	r0, r3, #324	; 0x144
   173ec:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
   173f0:	f3c0 2005 	ubfx	r0, r0, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   173f4:	4286      	cmp	r6, r0
   173f6:	f040 8084 	bne.w	17502 <gpio_nrfx_pin_interrupt_configure+0x1a2>
		    && (intenset & BIT(i))) {
   173fa:	fa21 f003 	lsr.w	r0, r1, r3
   173fe:	07c0      	lsls	r0, r0, #31
   17400:	d57f      	bpl.n	17502 <gpio_nrfx_pin_interrupt_configure+0x1a2>
			(void)atomic_and(mask, ~BIT(i));
   17402:	2101      	movs	r1, #1
   17404:	4099      	lsls	r1, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   17406:	484c      	ldr	r0, [pc, #304]	; (17538 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   17408:	f3bf 8f5b 	dmb	ish
   1740c:	43cc      	mvns	r4, r1
   1740e:	e850 cf00 	ldrex	ip, [r0]
   17412:	ea0c 0c04 	and.w	ip, ip, r4
   17416:	e840 ce00 	strex	lr, ip, [r0]
   1741a:	f1be 0f00 	cmp.w	lr, #0
   1741e:	d1f6      	bne.n	1740e <gpio_nrfx_pin_interrupt_configure+0xae>
   17420:	f3bf 8f5b 	dmb	ish
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   17424:	009b      	lsls	r3, r3, #2
   17426:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1742a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1742e:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
   17432:	f020 0001 	bic.w	r0, r0, #1
   17436:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
    p_reg->INTENCLR = mask;
   1743a:	f8c2 1308 	str.w	r1, [r2, #776]	; 0x308
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1743e:	2100      	movs	r1, #0
   17440:	4630      	mov	r0, r6
   17442:	f7ff ff77 	bl	17334 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   17446:	68fb      	ldr	r3, [r7, #12]
   17448:	40eb      	lsrs	r3, r5
   1744a:	f013 0301 	ands.w	r3, r3, #1
   1744e:	d051      	beq.n	174f4 <gpio_nrfx_pin_interrupt_configure+0x194>
		if (data->trig_edge & BIT(pin)) {
   17450:	697b      	ldr	r3, [r7, #20]
   17452:	40eb      	lsrs	r3, r5
   17454:	f013 0401 	ands.w	r4, r3, #1
   17458:	d05e      	beq.n	17518 <gpio_nrfx_pin_interrupt_configure+0x1b8>
			if (data->double_edge & BIT(pin)) {
   1745a:	69bb      	ldr	r3, [r7, #24]
   1745c:	40eb      	lsrs	r3, r5
   1745e:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   17460:	bf5f      	itttt	pl
   17462:	6939      	ldrpl	r1, [r7, #16]
   17464:	fa21 f505 	lsrpl.w	r5, r1, r5
   17468:	f005 0501 	andpl.w	r5, r5, #1
   1746c:	f1c5 0502 	rsbpl	r5, r5, #2
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   17470:	4931      	ldr	r1, [pc, #196]	; (17538 <gpio_nrfx_pin_interrupt_configure+0x1d8>)
   17472:	bf54      	ite	pl
   17474:	b2ed      	uxtbpl	r5, r5
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   17476:	2503      	movmi	r5, #3
   17478:	2200      	movs	r2, #0
		atomic_val_t prev = atomic_or(mask, BIT(channel));
   1747a:	2701      	movs	r7, #1
   1747c:	fa07 f402 	lsl.w	r4, r7, r2
   17480:	f3bf 8f5b 	dmb	ish
   17484:	e851 0f00 	ldrex	r0, [r1]
   17488:	ea40 0304 	orr.w	r3, r0, r4
   1748c:	e841 3c00 	strex	ip, r3, [r1]
   17490:	f1bc 0f00 	cmp.w	ip, #0
   17494:	d1f6      	bne.n	17484 <gpio_nrfx_pin_interrupt_configure+0x124>
   17496:	f3bf 8f5b 	dmb	ish
		if ((prev & BIT(channel)) == 0) {
   1749a:	40d0      	lsrs	r0, r2
   1749c:	f010 0301 	ands.w	r3, r0, #1
   174a0:	d134      	bne.n	1750c <gpio_nrfx_pin_interrupt_configure+0x1ac>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   174a2:	0091      	lsls	r1, r2, #2
   174a4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   174a8:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
			nrf_gpiote_event_t evt =
   174ac:	3240      	adds	r2, #64	; 0x40
   174ae:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   174b2:	f420 304f 	bic.w	r0, r0, #211968	; 0x33c00
   174b6:	f420 7040 	bic.w	r0, r0, #768	; 0x300
   174ba:	0092      	lsls	r2, r2, #2
   174bc:	f8c1 0510 	str.w	r0, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   174c0:	0236      	lsls	r6, r6, #8
    return ((uint32_t)p_reg + event);
   174c2:	b292      	uxth	r2, r2
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   174c4:	f8d1 0510 	ldr.w	r0, [r1, #1296]	; 0x510
   174c8:	f406 567c 	and.w	r6, r6, #16128	; 0x3f00
    return ((uint32_t)p_reg + event);
   174cc:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
   174d0:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   174d4:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
   174d8:	4306      	orrs	r6, r0
   174da:	f8c1 6510 	str.w	r6, [r1, #1296]	; 0x510
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   174de:	6013      	str	r3, [r2, #0]
   174e0:	6812      	ldr	r2, [r2, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   174e2:	f8d1 2510 	ldr.w	r2, [r1, #1296]	; 0x510
   174e6:	f042 0201 	orr.w	r2, r2, #1
   174ea:	f8c1 2510 	str.w	r2, [r1, #1296]	; 0x510
    p_reg->INTENSET = mask;
   174ee:	4a11      	ldr	r2, [pc, #68]	; (17534 <gpio_nrfx_pin_interrupt_configure+0x1d4>)
   174f0:	f8c2 4304 	str.w	r4, [r2, #772]	; 0x304
	int res = 0;
   174f4:	4618      	mov	r0, r3
   174f6:	e00e      	b.n	17516 <gpio_nrfx_pin_interrupt_configure+0x1b6>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   174f8:	2001      	movs	r0, #1
   174fa:	40a8      	lsls	r0, r5
   174fc:	ea21 0100 	bic.w	r1, r1, r0
   17500:	e754      	b.n	173ac <gpio_nrfx_pin_interrupt_configure+0x4c>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   17502:	3301      	adds	r3, #1
   17504:	2b08      	cmp	r3, #8
   17506:	f47f af6f 	bne.w	173e8 <gpio_nrfx_pin_interrupt_configure+0x88>
   1750a:	e798      	b.n	1743e <gpio_nrfx_pin_interrupt_configure+0xde>
	for (uint8_t channel = 0; channel < GPIOTE_CH_NUM; ++channel) {
   1750c:	3201      	adds	r2, #1
   1750e:	2a08      	cmp	r2, #8
   17510:	d1b4      	bne.n	1747c <gpio_nrfx_pin_interrupt_configure+0x11c>
	return -ENODEV;
   17512:	f06f 0012 	mvn.w	r0, #18
}
   17516:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((BIT(pin) & data->int_active_level) != 0U) {
   17518:	6939      	ldr	r1, [r7, #16]
   1751a:	40e9      	lsrs	r1, r5
   1751c:	f001 0101 	and.w	r1, r1, #1
   17520:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   17524:	4630      	mov	r0, r6
   17526:	b2c9      	uxtb	r1, r1
   17528:	f7ff ff04 	bl	17334 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1752c:	4620      	mov	r0, r4
   1752e:	e7f2      	b.n	17516 <gpio_nrfx_pin_interrupt_configure+0x1b6>
   17530:	50000300 	.word	0x50000300
   17534:	40006000 	.word	0x40006000
   17538:	200027d8 	.word	0x200027d8

0001753c <gpiote_event_handler>:
{
   1753c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1753e:	2600      	movs	r6, #0
   17540:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17544:	4d26      	ldr	r5, [pc, #152]	; (175e0 <gpiote_event_handler+0xa4>)
   17546:	682c      	ldr	r4, [r5, #0]
	if (port_event) {
   17548:	b14c      	cbz	r4, 1755e <gpiote_event_handler+0x22>
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p0));
   1754a:	4826      	ldr	r0, [pc, #152]	; (175e4 <gpiote_event_handler+0xa8>)
   1754c:	f007 f8df 	bl	1e70e <check_level_trigger_pins>
		fired_triggers[0] =
   17550:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_GET(gpio_nrfx_p1));
   17552:	4825      	ldr	r0, [pc, #148]	; (175e8 <gpiote_event_handler+0xac>)
   17554:	f007 f8db 	bl	1e70e <check_level_trigger_pins>
		fired_triggers[1] =
   17558:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1755a:	602e      	str	r6, [r5, #0]
   1755c:	682b      	ldr	r3, [r5, #0]
    return p_reg->INTENSET & mask;
   1755e:	4d23      	ldr	r5, [pc, #140]	; (175ec <gpiote_event_handler+0xb0>)
{
   17560:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   17562:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   17564:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   17566:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1756a:	fa06 f102 	lsl.w	r1, r6, r2
   1756e:	4219      	tst	r1, r3
   17570:	d01b      	beq.n	175aa <gpiote_event_handler+0x6e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   17572:	0091      	lsls	r1, r2, #2
   17574:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   17578:	f501 41c2 	add.w	r1, r1, #24832	; 0x6100
   1757c:	680b      	ldr	r3, [r1, #0]
   1757e:	b1a3      	cbz	r3, 175aa <gpiote_event_handler+0x6e>
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   17580:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   17584:	af02      	add	r7, sp, #8
   17586:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1758a:	f8c1 c000 	str.w	ip, [r1]
   1758e:	f3c3 3040 	ubfx	r0, r3, #13, #1
   17592:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   17596:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1759a:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1759e:	fa06 f303 	lsl.w	r3, r6, r3
   175a2:	433b      	orrs	r3, r7
   175a4:	f840 3c08 	str.w	r3, [r0, #-8]
   175a8:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   175aa:	3201      	adds	r2, #1
   175ac:	2a08      	cmp	r2, #8
   175ae:	d1da      	bne.n	17566 <gpiote_event_handler+0x2a>
	if (fired_triggers[0]) {
   175b0:	9a00      	ldr	r2, [sp, #0]
   175b2:	b11a      	cbz	r2, 175bc <gpiote_event_handler+0x80>
	gpio_fire_callbacks(list, port, pins);
   175b4:	490b      	ldr	r1, [pc, #44]	; (175e4 <gpiote_event_handler+0xa8>)
   175b6:	480e      	ldr	r0, [pc, #56]	; (175f0 <gpiote_event_handler+0xb4>)
   175b8:	f007 f846 	bl	1e648 <gpio_fire_callbacks>
	if (fired_triggers[1]) {
   175bc:	9a01      	ldr	r2, [sp, #4]
   175be:	b11a      	cbz	r2, 175c8 <gpiote_event_handler+0x8c>
	gpio_fire_callbacks(list, port, pins);
   175c0:	4909      	ldr	r1, [pc, #36]	; (175e8 <gpiote_event_handler+0xac>)
   175c2:	480c      	ldr	r0, [pc, #48]	; (175f4 <gpiote_event_handler+0xb8>)
   175c4:	f007 f840 	bl	1e648 <gpio_fire_callbacks>
	if (port_event) {
   175c8:	b144      	cbz	r4, 175dc <gpiote_event_handler+0xa0>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p0));
   175ca:	4806      	ldr	r0, [pc, #24]	; (175e4 <gpiote_event_handler+0xa8>)
   175cc:	f007 f8c8 	bl	1e760 <cfg_level_pins>
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   175d0:	4805      	ldr	r0, [pc, #20]	; (175e8 <gpiote_event_handler+0xac>)
}
   175d2:	b003      	add	sp, #12
   175d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_GET(gpio_nrfx_p1));
   175d8:	f007 b8c2 	b.w	1e760 <cfg_level_pins>
}
   175dc:	b003      	add	sp, #12
   175de:	bdf0      	pop	{r4, r5, r6, r7, pc}
   175e0:	4000617c 	.word	0x4000617c
   175e4:	20000a20 	.word	0x20000a20
   175e8:	20000a30 	.word	0x20000a30
   175ec:	40006000 	.word	0x40006000
   175f0:	200027a4 	.word	0x200027a4
   175f4:	200027c0 	.word	0x200027c0

000175f8 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   175f8:	b510      	push	{r4, lr}
   175fa:	4604      	mov	r4, r0
   175fc:	2200      	movs	r2, #0
   175fe:	2101      	movs	r1, #1
   17600:	2003      	movs	r0, #3
   17602:	f7ed ff55 	bl	54b0 <z_arm_irq_priority_set>
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   17606:	6860      	ldr	r0, [r4, #4]
   17608:	68e3      	ldr	r3, [r4, #12]
   1760a:	4a06      	ldr	r2, [pc, #24]	; (17624 <twi_0_init+0x2c>)
   1760c:	f100 0108 	add.w	r1, r0, #8
   17610:	f000 ff08 	bl	18424 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   17614:	4b04      	ldr	r3, [pc, #16]	; (17628 <twi_0_init+0x30>)
   17616:	4298      	cmp	r0, r3
I2C_NRFX_TWI_DEVICE(0);
   17618:	bf14      	ite	ne
   1761a:	f06f 000f 	mvnne.w	r0, #15
   1761e:	2000      	moveq	r0, #0
   17620:	bd10      	pop	{r4, pc}
   17622:	bf00      	nop
   17624:	0001762d 	.word	0x0001762d
   17628:	0bad0000 	.word	0x0bad0000

0001762c <event_handler>:
	switch (p_event->type) {
   1762c:	7803      	ldrb	r3, [r0, #0]
   1762e:	2b01      	cmp	r3, #1
   17630:	d008      	beq.n	17644 <event_handler+0x18>
   17632:	2b02      	cmp	r3, #2
   17634:	d008      	beq.n	17648 <event_handler+0x1c>
   17636:	b94b      	cbnz	r3, 1764c <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   17638:	4b05      	ldr	r3, [pc, #20]	; (17650 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1763a:	630b      	str	r3, [r1, #48]	; 0x30
   1763c:	f101 0018 	add.w	r0, r1, #24
   17640:	f001 bea6 	b.w	19390 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   17644:	4b03      	ldr	r3, [pc, #12]	; (17654 <event_handler+0x28>)
   17646:	e7f8      	b.n	1763a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   17648:	4b03      	ldr	r3, [pc, #12]	; (17658 <event_handler+0x2c>)
   1764a:	e7f6      	b.n	1763a <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1764c:	4b03      	ldr	r3, [pc, #12]	; (1765c <event_handler+0x30>)
   1764e:	e7f4      	b.n	1763a <event_handler+0xe>
   17650:	0bad0000 	.word	0x0bad0000
   17654:	0bae0001 	.word	0x0bae0001
   17658:	0bae0002 	.word	0x0bae0002
   1765c:	0bad0001 	.word	0x0bad0001

00017660 <i2c_nrfx_twi_transfer>:
{
   17660:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   17664:	4604      	mov	r4, r0
   17666:	b087      	sub	sp, #28
   17668:	460d      	mov	r5, r1
   1766a:	4617      	mov	r7, r2
   1766c:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1766e:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   17670:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17674:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17678:	f001 feb0 	bl	193dc <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1767c:	68e0      	ldr	r0, [r4, #12]
   1767e:	3018      	adds	r0, #24
   17680:	2200      	movs	r2, #0
   17682:	2300      	movs	r3, #0
   17684:	f001 feaa 	bl	193dc <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   17688:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1768a:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 17744 <i2c_nrfx_twi_transfer+0xe4>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1768e:	f000 ff25 	bl	184dc <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   17692:	f04f 0800 	mov.w	r8, #0
   17696:	45b8      	cmp	r8, r7
   17698:	d301      	bcc.n	1769e <i2c_nrfx_twi_transfer+0x3e>
   1769a:	2500      	movs	r5, #0
   1769c:	e029      	b.n	176f2 <i2c_nrfx_twi_transfer+0x92>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1769e:	f895 b008 	ldrb.w	fp, [r5, #8]
   176a2:	f01b 0608 	ands.w	r6, fp, #8
   176a6:	d144      	bne.n	17732 <i2c_nrfx_twi_transfer+0xd2>
		nrfx_twi_xfer_desc_t cur_xfer = {
   176a8:	2214      	movs	r2, #20
   176aa:	4631      	mov	r1, r6
   176ac:	a801      	add	r0, sp, #4
   176ae:	f004 f9e7 	bl	1ba80 <memset>
   176b2:	686a      	ldr	r2, [r5, #4]
   176b4:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   176b6:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   176ba:	682a      	ldr	r2, [r5, #0]
   176bc:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   176c0:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   176c4:	f88d 9005 	strb.w	r9, [sp, #5]
   176c8:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   176ca:	d11c      	bne.n	17706 <i2c_nrfx_twi_transfer+0xa6>
			if ((i < (num_msgs - 1)) &&
   176cc:	1e7a      	subs	r2, r7, #1
   176ce:	4542      	cmp	r2, r8
   176d0:	d902      	bls.n	176d8 <i2c_nrfx_twi_transfer+0x78>
   176d2:	7d2a      	ldrb	r2, [r5, #20]
   176d4:	0752      	lsls	r2, r2, #29
   176d6:	d518      	bpl.n	1770a <i2c_nrfx_twi_transfer+0xaa>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   176d8:	bb5b      	cbnz	r3, 17732 <i2c_nrfx_twi_transfer+0xd2>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   176da:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   176dc:	6860      	ldr	r0, [r4, #4]
   176de:	a901      	add	r1, sp, #4
   176e0:	f000 ff26 	bl	18530 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   176e4:	4550      	cmp	r0, sl
   176e6:	d012      	beq.n	1770e <i2c_nrfx_twi_transfer+0xae>
			if (res == NRFX_ERROR_BUSY) {
   176e8:	4b15      	ldr	r3, [pc, #84]	; (17740 <i2c_nrfx_twi_transfer+0xe0>)
   176ea:	4298      	cmp	r0, r3
   176ec:	d024      	beq.n	17738 <i2c_nrfx_twi_transfer+0xd8>
				ret = -EIO;
   176ee:	f06f 0504 	mvn.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   176f2:	6860      	ldr	r0, [r4, #4]
   176f4:	f000 ff02 	bl	184fc <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   176f8:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   176fa:	f001 fe49 	bl	19390 <z_impl_k_sem_give>
}
   176fe:	4628      	mov	r0, r5
   17700:	b007      	add	sp, #28
   17702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   17706:	4632      	mov	r2, r6
   17708:	e7e8      	b.n	176dc <i2c_nrfx_twi_transfer+0x7c>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1770a:	2240      	movs	r2, #64	; 0x40
   1770c:	e7e6      	b.n	176dc <i2c_nrfx_twi_transfer+0x7c>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1770e:	68e0      	ldr	r0, [r4, #12]
   17710:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   17712:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   17716:	2300      	movs	r3, #0
   17718:	f001 fe60 	bl	193dc <z_impl_k_sem_take>
		if (ret != 0) {
   1771c:	2800      	cmp	r0, #0
   1771e:	d1e6      	bne.n	176ee <i2c_nrfx_twi_transfer+0x8e>
		res = get_dev_data(dev)->res;
   17720:	68e3      	ldr	r3, [r4, #12]
   17722:	6b1b      	ldr	r3, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   17724:	4553      	cmp	r3, sl
   17726:	f105 050c 	add.w	r5, r5, #12
   1772a:	d1e0      	bne.n	176ee <i2c_nrfx_twi_transfer+0x8e>
	for (size_t i = 0; i < num_msgs; i++) {
   1772c:	f108 0801 	add.w	r8, r8, #1
   17730:	e7b1      	b.n	17696 <i2c_nrfx_twi_transfer+0x36>
			ret = -ENOTSUP;
   17732:	f06f 0522 	mvn.w	r5, #34	; 0x22
   17736:	e7dc      	b.n	176f2 <i2c_nrfx_twi_transfer+0x92>
				ret = -EBUSY;
   17738:	f06f 050f 	mvn.w	r5, #15
   1773c:	e7d9      	b.n	176f2 <i2c_nrfx_twi_transfer+0x92>
   1773e:	bf00      	nop
   17740:	0bad000b 	.word	0x0bad000b
   17744:	0bad0000 	.word	0x0bad0000

00017748 <bme680_sample_fetch>:
	return durval;
}

static int bme680_sample_fetch(const struct device *dev,
			       enum sensor_channel chan)
{
   17748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bme680_data *data = dev->data;
   1774c:	68c4      	ldr	r4, [r0, #12]
{
   1774e:	b087      	sub	sp, #28
	uint8_t buff[BME680_LEN_FIELD] = { 0 };
   17750:	2300      	movs	r3, #0
   17752:	9304      	str	r3, [sp, #16]
   17754:	e9cd 3302 	strd	r3, r3, [sp, #8]
   17758:	f8cd 3013 	str.w	r3, [sp, #19]
	int size = BME680_LEN_FIELD;
	int ret;

	__ASSERT_NO_MSG(chan == SENSOR_CHAN_ALL);

	ret = bme680_reg_read(data, BME680_REG_FIELD0, buff, size);
   1775c:	aa02      	add	r2, sp, #8
   1775e:	230f      	movs	r3, #15
   17760:	211d      	movs	r1, #29
   17762:	4620      	mov	r0, r4
   17764:	f007 f865 	bl	1e832 <bme680_reg_read>
	if (ret < 0) {
   17768:	2800      	cmp	r0, #0
   1776a:	f2c0 813e 	blt.w	179ea <bme680_sample_fetch+0x2a2>
		return ret;
	}

	data->new_data = buff[0] & BME680_MSK_NEW_DATA;
   1776e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17772:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
   17776:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   1777a:	f89d 2016 	ldrb.w	r2, [sp, #22]
			   | ((uint32_t)buff[7] >> 4));
	adc_hum = (uint16_t)(((uint32_t)buff[8] << 8) | (uint32_t)buff[9]);
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
	gas_range = buff[14] & BME680_MSK_GAS_RANGE;

	if (data->new_data) {
   1777e:	061b      	lsls	r3, r3, #24
	data->heatr_stab = buff[14] & BME680_MSK_HEATR_STAB;
   17780:	f002 0110 	and.w	r1, r2, #16
   17784:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
	if (data->new_data) {
   17788:	f140 8128 	bpl.w	179dc <bme680_sample_fetch+0x294>
			   | ((uint32_t)buff[7] >> 4));
   1778c:	f89d 600f 	ldrb.w	r6, [sp, #15]
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   17790:	f89d 100e 	ldrb.w	r1, [sp, #14]
			    | ((uint32_t)buff[4] >> 4));
   17794:	f89d 300c 	ldrb.w	r3, [sp, #12]
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   17798:	f89d c00b 	ldrb.w	ip, [sp, #11]
   1779c:	f89d 500a 	ldrb.w	r5, [sp, #10]
   177a0:	f8bd e010 	ldrh.w	lr, [sp, #16]
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   177a4:	f89d a015 	ldrb.w	sl, [sp, #21]
			   | ((uint32_t)buff[7] >> 4));
   177a8:	0936      	lsrs	r6, r6, #4
	adc_temp = (uint32_t)(((uint32_t)buff[5] << 12) | ((uint32_t)buff[6] << 4)
   177aa:	ea46 1601 	orr.w	r6, r6, r1, lsl #4
   177ae:	f89d 100d 	ldrb.w	r1, [sp, #13]
   177b2:	ea46 3101 	orr.w	r1, r6, r1, lsl #12
	var1 = ((int32_t)adc_temp >> 3) - ((int32_t)data->par_t1 << 1);
   177b6:	8aa6      	ldrh	r6, [r4, #20]
   177b8:	0076      	lsls	r6, r6, #1
   177ba:	ebc6 06d1 	rsb	r6, r6, r1, lsr #3
   177be:	ea4f 79e6 	mov.w	r9, r6, asr #31
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   177c2:	0870      	lsrs	r0, r6, #1
   177c4:	ea40 70c9 	orr.w	r0, r0, r9, lsl #31
   177c8:	ea4f 0769 	mov.w	r7, r9, asr #1
   177cc:	4347      	muls	r7, r0
   177ce:	fba0 0100 	umull	r0, r1, r0, r0
   177d2:	eb01 0147 	add.w	r1, r1, r7, lsl #1
   177d6:	0b07      	lsrs	r7, r0, #12
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   177d8:	f994 0018 	ldrsb.w	r0, [r4, #24]
	var3 = ((var1 >> 1) * (var1 >> 1)) >> 12;
   177dc:	ea47 5701 	orr.w	r7, r7, r1, lsl #20
   177e0:	ea4f 3b21 	mov.w	fp, r1, asr #12
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   177e4:	0101      	lsls	r1, r0, #4
   177e6:	ea4f 79e1 	mov.w	r9, r1, asr #31
   177ea:	fb07 f809 	mul.w	r8, r7, r9
   177ee:	fb01 880b 	mla	r8, r1, fp, r8
   177f2:	fba7 0101 	umull	r0, r1, r7, r1
   177f6:	e9cd 0100 	strd	r0, r1, [sp]
   177fa:	9901      	ldr	r1, [sp, #4]
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   177fc:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   17800:	4441      	add	r1, r8
   17802:	9101      	str	r1, [sp, #4]
	var2 = (var1 * (int32_t)data->par_t2) >> 11;
   17804:	fb87 0106 	smull	r0, r1, r7, r6
   17808:	0ac6      	lsrs	r6, r0, #11
   1780a:	ea46 5641 	orr.w	r6, r6, r1, lsl #21
	var3 = ((var3) * ((int32_t)data->par_t3 << 4)) >> 14;
   1780e:	9900      	ldr	r1, [sp, #0]
   17810:	0b88      	lsrs	r0, r1, #14
   17812:	9901      	ldr	r1, [sp, #4]
   17814:	ea40 4081 	orr.w	r0, r0, r1, lsl #18
	data->t_fine = var2 + var3;
   17818:	4430      	add	r0, r6
   1781a:	6460      	str	r0, [r4, #68]	; 0x44
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   1781c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
	var1 = (((int32_t)data->t_fine) >> 1) - 64000;
   17820:	1040      	asrs	r0, r0, #1
   17822:	f5a0 477a 	sub.w	r7, r0, #64000	; 0xfa00
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   17826:	10b8      	asrs	r0, r7, #2
		(int32_t)data->par_p6) >> 2;
   17828:	f994 6024 	ldrsb.w	r6, [r4, #36]	; 0x24
	var2 = ((((var1 >> 2) * (var1 >> 2)) >> 11) *
   1782c:	4340      	muls	r0, r0
   1782e:	ea4f 28e0 	mov.w	r8, r0, asr #11
   17832:	fb06 f808 	mul.w	r8, r6, r8
	var2 = var2 + ((var1 * (int32_t)data->par_p5) << 1);
   17836:	f9b4 6022 	ldrsh.w	r6, [r4, #34]	; 0x22
   1783a:	437e      	muls	r6, r7
   1783c:	0076      	lsls	r6, r6, #1
   1783e:	eb06 06a8 	add.w	r6, r6, r8, asr #2
	       + (((int32_t)data->par_p2 * var1) >> 1);
   17842:	f9b4 801c 	ldrsh.w	r8, [r4, #28]
   17846:	fb07 f708 	mul.w	r7, r7, r8
		 ((int32_t)data->par_p3 << 5)) >> 3)
   1784a:	f994 801e 	ldrsb.w	r8, [r4, #30]
			    | ((uint32_t)buff[4] >> 4));
   1784e:	091b      	lsrs	r3, r3, #4
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   17850:	ea43 1c0c 	orr.w	ip, r3, ip, lsl #4
		 ((int32_t)data->par_p3 << 5)) >> 3)
   17854:	ea4f 1848 	mov.w	r8, r8, lsl #5
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   17858:	f9b4 3020 	ldrsh.w	r3, [r4, #32]
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1785c:	1340      	asrs	r0, r0, #13
   1785e:	fb00 f008 	mul.w	r0, r0, r8
	adc_press = (uint32_t)(((uint32_t)buff[2] << 12) | ((uint32_t)buff[3] << 4)
   17862:	ea4c 3505 	orr.w	r5, ip, r5, lsl #12
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   17866:	041b      	lsls	r3, r3, #16
		 ((int32_t)data->par_p3 << 5)) >> 3)
   17868:	10c0      	asrs	r0, r0, #3
	var1 = (((((var1 >> 2) * (var1 >> 2)) >> 13) *
   1786a:	eb00 0067 	add.w	r0, r0, r7, asr #1
	calc_press = 1048576 - adc_press;
   1786e:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
	var2 = (var2 >> 2) + ((int32_t)data->par_p4 << 16);
   17872:	eb03 06a6 	add.w	r6, r3, r6, asr #2
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   17876:	8b67      	ldrh	r7, [r4, #26]
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   17878:	f640 4335 	movw	r3, #3125	; 0xc35
   1787c:	eba5 3626 	sub.w	r6, r5, r6, asr #12
	var1 = var1 >> 18;
   17880:	1480      	asrs	r0, r0, #18
	calc_press = (calc_press - (var2 >> 12)) * ((uint32_t)3125);
   17882:	435e      	muls	r6, r3
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   17884:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
	if (calc_press >= (int32_t)0x40000000) {
   17888:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   1788c:	fb07 f000 	mul.w	r0, r7, r0
		calc_press = ((calc_press << 1) / var1);
   17890:	bfb8      	it	lt
   17892:	0076      	lsllt	r6, r6, #1
	var1 = ((32768 + var1) * (int32_t)data->par_p1) >> 15;
   17894:	ea4f 30e0 	mov.w	r0, r0, asr #15
		calc_press = ((calc_press / var1) << 1);
   17898:	bfaa      	itet	ge
   1789a:	fb96 f3f0 	sdivge	r3, r6, r0
		calc_press = ((calc_press << 1) / var1);
   1789e:	fb96 f3f0 	sdivlt	r3, r6, r0
		calc_press = ((calc_press / var1) << 1);
   178a2:	005b      	lslge	r3, r3, #1
	var2 = ((int32_t)(calc_press >> 2) * (int32_t)data->par_p8) >> 13;
   178a4:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
   178a8:	109f      	asrs	r7, r3, #2
   178aa:	4347      	muls	r7, r0
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   178ac:	f994 0025 	ldrsb.w	r0, [r4, #37]	; 0x25
		(int32_t)(((calc_press >> 3)
   178b0:	10dd      	asrs	r5, r3, #3
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   178b2:	01c0      	lsls	r0, r0, #7
   178b4:	eb00 3067 	add.w	r0, r0, r7, asr #13
			 * (calc_press >> 3)) >> 13)) >> 12;
   178b8:	436d      	muls	r5, r5
	var1 = ((int32_t)data->par_p9 *
   178ba:	f9b4 7028 	ldrsh.w	r7, [r4, #40]	; 0x28
			 * (calc_press >> 3)) >> 13)) >> 12;
   178be:	136d      	asrs	r5, r5, #13
	var1 = ((int32_t)data->par_p9 *
   178c0:	437d      	muls	r5, r7
	var3 = ((int32_t)(calc_press >> 8) * (int32_t)(calc_press >> 8)
   178c2:	121e      	asrs	r6, r3, #8
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   178c4:	eb00 3025 	add.w	r0, r0, r5, asr #12
		* (int32_t)data->par_p10) >> 17;
   178c8:	f894 502a 	ldrb.w	r5, [r4, #42]	; 0x2a
	var3 = ((int32_t)(calc_press >> 8) * (int32_t)(calc_press >> 8)
   178cc:	fb06 f706 	mul.w	r7, r6, r6
		* (int32_t)data->par_p10) >> 17;
   178d0:	437d      	muls	r5, r7
   178d2:	4375      	muls	r5, r6
			       + ((int32_t)data->par_p7 << 7)) >> 4);
   178d4:	eb00 4065 	add.w	r0, r0, r5, asr #17
			   + ((var1 + var2 + var3
   178d8:	eb03 1320 	add.w	r3, r3, r0, asr #4
	data->calc_press = calc_press
   178dc:	6363      	str	r3, [r4, #52]	; 0x34
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   178de:	f994 000c 	ldrsb.w	r0, [r4, #12]
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   178e2:	f994 300b 	ldrsb.w	r3, [r4, #11]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   178e6:	3180      	adds	r1, #128	; 0x80
   178e8:	1209      	asrs	r1, r1, #8
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   178ea:	2564      	movs	r5, #100	; 0x64
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   178ec:	4348      	muls	r0, r1
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   178ee:	434b      	muls	r3, r1
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   178f0:	fb90 f0f5 	sdiv	r0, r0, r5
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   178f4:	fb93 f3f5 	sdiv	r3, r3, r5
		 + (((temp_scaled * ((temp_scaled * (int32_t)data->par_h5)
   178f8:	4348      	muls	r0, r1
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   178fa:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
				     / ((int32_t)100))) >> 6) / ((int32_t)100))
   178fe:	1180      	asrs	r0, r0, #6
   17900:	fb90 f0f5 	sdiv	r0, r0, r5
	var2_2 = ((temp_scaled * (int32_t)data->par_h4) / (int32_t)100)
   17904:	4418      	add	r0, r3
	var2_1 = (int32_t)data->par_h2;
   17906:	8923      	ldrh	r3, [r4, #8]
	data->calc_temp = ((data->t_fine * 5) + 128) >> 8;
   17908:	6321      	str	r1, [r4, #48]	; 0x30
	var2 = (var2_1 * var2_2) >> 10;
   1790a:	4358      	muls	r0, r3
   1790c:	1283      	asrs	r3, r0, #10
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   1790e:	fa9e fe9e 	rev16.w	lr, lr
   17912:	88e0      	ldrh	r0, [r4, #6]
   17914:	fa1f fe8e 	uxth.w	lr, lr
   17918:	f06f 060f 	mvn.w	r6, #15
   1791c:	fb06 e000 	mla	r0, r6, r0, lr
	       (((temp_scaled * (int32_t)data->par_h3)
   17920:	f994 e00a 	ldrsb.w	lr, [r4, #10]
   17924:	fb01 fe0e 	mul.w	lr, r1, lr
		 / ((int32_t)100)) >> 1);
   17928:	fb9e fef5 	sdiv	lr, lr, r5
	var1 = (int32_t)(adc_humidity - ((int32_t)((int32_t)data->par_h1 * 16))) -
   1792c:	eba0 006e 	sub.w	r0, r0, lr, asr #1
	var3 = var1 * var2;
   17930:	4358      	muls	r0, r3
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   17932:	f994 300e 	ldrsb.w	r3, [r4, #14]
   17936:	434b      	muls	r3, r1
	var4 = (int32_t)data->par_h6 << 7;
   17938:	7b61      	ldrb	r1, [r4, #13]
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   1793a:	fb93 f3f5 	sdiv	r3, r3, r5
   1793e:	eb03 13c1 	add.w	r3, r3, r1, lsl #7
	var5 = ((var3 >> 14) * (var3 >> 14)) >> 10;
   17942:	1381      	asrs	r1, r0, #14
   17944:	4349      	muls	r1, r1
   17946:	1289      	asrs	r1, r1, #10
	var4 = ((var4) + ((temp_scaled * (int32_t)data->par_h7) /
   17948:	111b      	asrs	r3, r3, #4
	var6 = (var4 * var5) >> 1;
   1794a:	434b      	muls	r3, r1
	calc_hum = (((var3 + var6) >> 10) * ((int32_t)1000)) >> 12;
   1794c:	eb00 0363 	add.w	r3, r0, r3, asr #1
   17950:	1298      	asrs	r0, r3, #10
   17952:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   17956:	4343      	muls	r3, r0
   17958:	131b      	asrs	r3, r3, #12
	data->calc_humidity = calc_hum;
   1795a:	4925      	ldr	r1, [pc, #148]	; (179f0 <bme680_sample_fetch+0x2a8>)
   1795c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   17960:	428b      	cmp	r3, r1
   17962:	bfd4      	ite	le
   17964:	63a3      	strle	r3, [r4, #56]	; 0x38
   17966:	63a1      	strgt	r1, [r4, #56]	; 0x38
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   17968:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   1796c:	2605      	movs	r6, #5
   1796e:	f240 503c 	movw	r0, #1340	; 0x53c
   17972:	2100      	movs	r1, #0
   17974:	fbc3 0106 	smlal	r0, r1, r3, r6
		       ((int64_t)look_up1[gas_range])) >> 16;
   17978:	f002 050f 	and.w	r5, r2, #15
   1797c:	4b1d      	ldr	r3, [pc, #116]	; (179f4 <bme680_sample_fetch+0x2ac>)
   1797e:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   17982:	0992      	lsrs	r2, r2, #6
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   17984:	fba0 6703 	umull	r6, r7, r0, r3
	adc_gas_res = (uint16_t)((uint32_t)buff[13] << 2 | (((uint32_t)buff[14]) >> 6));
   17988:	ea42 0a8a 	orr.w	sl, r2, sl, lsl #2
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   1798c:	fb03 7701 	mla	r7, r3, r1, r7
   17990:	0c31      	lsrs	r1, r6, #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   17992:	ea4f 33ca 	mov.w	r3, sl, lsl #15
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   17996:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   1799a:	f113 437f 	adds.w	r3, r3, #4278190080	; 0xff000000
   1799e:	f04f 0600 	mov.w	r6, #0
	var1 = (int64_t)((1340 + (5 * (int64_t)data->range_sw_err)) *
   179a2:	ea4f 4027 	mov.w	r0, r7, asr #16
	var2 = (((int64_t)((int64_t)adc_gas_res << 15) - (int64_t)(16777216)) + var1);
   179a6:	f146 36ff 	adc.w	r6, r6, #4294967295	; 0xffffffff
   179aa:	185a      	adds	r2, r3, r1
   179ac:	eb46 0300 	adc.w	r3, r6, r0
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   179b0:	4e11      	ldr	r6, [pc, #68]	; (179f8 <bme680_sample_fetch+0x2b0>)
   179b2:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
   179b6:	fba5 6701 	umull	r6, r7, r5, r1
   179ba:	fb05 7700 	mla	r7, r5, r0, r7
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   179be:	0855      	lsrs	r5, r2, #1
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   179c0:	0a70      	lsrs	r0, r6, #9
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   179c2:	ea45 75c3 	orr.w	r5, r5, r3, lsl #31
	var3 = (((int64_t)look_up2[gas_range] * (int64_t)var1) >> 9);
   179c6:	ea40 50c7 	orr.w	r0, r0, r7, lsl #23
   179ca:	ea4f 2c67 	mov.w	ip, r7, asr #9
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   179ce:	1059      	asrs	r1, r3, #1
					    / (int64_t)var2);
   179d0:	1940      	adds	r0, r0, r5
   179d2:	eb4c 0101 	adc.w	r1, ip, r1
   179d6:	f7e8 ff61 	bl	89c <__aeabi_ldivmod>
	data->calc_gas_resistance = (uint32_t)((var3 + ((int64_t)var2 >> 1))
   179da:	63e0      	str	r0, [r4, #60]	; 0x3c
		bme680_calc_humidity(data, adc_hum);
		bme680_calc_gas_resistance(data, gas_range, adc_gas_res);
	}

	/* Trigger the next measurement */
	ret = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
   179dc:	2255      	movs	r2, #85	; 0x55
   179de:	2174      	movs	r1, #116	; 0x74
   179e0:	4620      	mov	r0, r4
   179e2:	f006 ff42 	bl	1e86a <bme680_reg_write>
			       BME680_CTRL_MEAS_VAL);
	if (ret < 0) {
   179e6:	ea00 70e0 	and.w	r0, r0, r0, asr #31
		return ret;
	}

	return 0;
}
   179ea:	b007      	add	sp, #28
   179ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   179f0:	000186a0 	.word	0x000186a0
   179f4:	000208b8 	.word	0x000208b8
   179f8:	000208f8 	.word	0x000208f8

000179fc <bme680_init>:

	return 0;
}

static int bme680_init(const struct device *dev)
{
   179fc:	b530      	push	{r4, r5, lr}
	struct bme680_data *data = dev->data;
   179fe:	68c5      	ldr	r5, [r0, #12]
{
   17a00:	b08d      	sub	sp, #52	; 0x34
   17a02:	4604      	mov	r4, r0
   17a04:	488d      	ldr	r0, [pc, #564]	; (17c3c <bme680_init+0x240>)
   17a06:	f000 fe9b 	bl	18740 <z_impl_device_get_binding>

	data->i2c_master = device_get_binding(
   17a0a:	6028      	str	r0, [r5, #0]
		DT_INST_BUS_LABEL(0));
	if (!data->i2c_master) {
   17a0c:	2800      	cmp	r0, #0
   17a0e:	f000 810f 	beq.w	17c30 <bme680_init+0x234>
		return -EINVAL;
	}

	data->i2c_slave_addr = DT_INST_REG_ADDR(0);

	if (bme680_chip_init(dev) < 0) {
   17a12:	68e4      	ldr	r4, [r4, #12]
	data->i2c_slave_addr = DT_INST_REG_ADDR(0);
   17a14:	2377      	movs	r3, #119	; 0x77
   17a16:	80ab      	strh	r3, [r5, #4]
	err = bme680_reg_read(data, BME680_REG_CHIP_ID, &data->chip_id, 1);
   17a18:	f104 0248 	add.w	r2, r4, #72	; 0x48
   17a1c:	2301      	movs	r3, #1
   17a1e:	21d0      	movs	r1, #208	; 0xd0
   17a20:	4620      	mov	r0, r4
   17a22:	f006 ff06 	bl	1e832 <bme680_reg_read>
	if (err < 0) {
   17a26:	2800      	cmp	r0, #0
   17a28:	f2c0 8102 	blt.w	17c30 <bme680_init+0x234>
	if (data->chip_id == BME680_CHIP_ID) {
   17a2c:	f894 3048 	ldrb.w	r3, [r4, #72]	; 0x48
   17a30:	2b61      	cmp	r3, #97	; 0x61
   17a32:	f040 80fd 	bne.w	17c30 <bme680_init+0x234>
	err = bme680_reg_read(data, BME680_REG_COEFF1, buff, BME680_LEN_COEFF1);
   17a36:	2317      	movs	r3, #23
   17a38:	aa01      	add	r2, sp, #4
   17a3a:	218a      	movs	r1, #138	; 0x8a
   17a3c:	4620      	mov	r0, r4
   17a3e:	f006 fef8 	bl	1e832 <bme680_reg_read>
	if (err < 0) {
   17a42:	2800      	cmp	r0, #0
   17a44:	f2c0 80f4 	blt.w	17c30 <bme680_init+0x234>
	err = bme680_reg_read(data, BME680_REG_COEFF2, &buff[BME680_LEN_COEFF1],
   17a48:	2310      	movs	r3, #16
   17a4a:	f10d 021b 	add.w	r2, sp, #27
   17a4e:	21e1      	movs	r1, #225	; 0xe1
   17a50:	4620      	mov	r0, r4
   17a52:	f006 feee 	bl	1e832 <bme680_reg_read>
	if (err < 0) {
   17a56:	2800      	cmp	r0, #0
   17a58:	f2c0 80ea 	blt.w	17c30 <bme680_init+0x234>
	err = bme680_reg_read(data, BME680_REG_COEFF3,
   17a5c:	2305      	movs	r3, #5
   17a5e:	f10d 0229 	add.w	r2, sp, #41	; 0x29
   17a62:	2100      	movs	r1, #0
   17a64:	4620      	mov	r0, r4
   17a66:	f006 fee4 	bl	1e832 <bme680_reg_read>
	if (err < 0) {
   17a6a:	2800      	cmp	r0, #0
   17a6c:	f2c0 80e0 	blt.w	17c30 <bme680_init+0x234>
	data->par_t1 = (uint16_t)(BME680_CONCAT_BYTES(buff[32], buff[31]));
   17a70:	f89d 2024 	ldrb.w	r2, [sp, #36]	; 0x24
   17a74:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   17a78:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17a7c:	82a3      	strh	r3, [r4, #20]
	data->par_t2 = (int16_t)(BME680_CONCAT_BYTES(buff[1], buff[0]));
   17a7e:	f89d 2005 	ldrb.w	r2, [sp, #5]
   17a82:	f89d 3004 	ldrb.w	r3, [sp, #4]
   17a86:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17a8a:	82e3      	strh	r3, [r4, #22]
	data->par_t3 = (uint8_t)(buff[2]);
   17a8c:	f89d 3006 	ldrb.w	r3, [sp, #6]
   17a90:	7623      	strb	r3, [r4, #24]
	data->par_p1 = (uint16_t)(BME680_CONCAT_BYTES(buff[5], buff[4]));
   17a92:	f89d 2009 	ldrb.w	r2, [sp, #9]
   17a96:	f89d 3008 	ldrb.w	r3, [sp, #8]
   17a9a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17a9e:	8363      	strh	r3, [r4, #26]
	data->par_p2 = (int16_t)(BME680_CONCAT_BYTES(buff[7], buff[6]));
   17aa0:	f89d 200b 	ldrb.w	r2, [sp, #11]
   17aa4:	f89d 300a 	ldrb.w	r3, [sp, #10]
   17aa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17aac:	83a3      	strh	r3, [r4, #28]
	data->par_p3 = (int8_t)buff[8];
   17aae:	f89d 300c 	ldrb.w	r3, [sp, #12]
   17ab2:	77a3      	strb	r3, [r4, #30]
	data->par_p4 = (int16_t)(BME680_CONCAT_BYTES(buff[11], buff[10]));
   17ab4:	f89d 200f 	ldrb.w	r2, [sp, #15]
   17ab8:	f89d 300e 	ldrb.w	r3, [sp, #14]
   17abc:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17ac0:	8423      	strh	r3, [r4, #32]
	data->par_p5 = (int16_t)(BME680_CONCAT_BYTES(buff[13], buff[12]));
   17ac2:	f89d 2011 	ldrb.w	r2, [sp, #17]
   17ac6:	f89d 3010 	ldrb.w	r3, [sp, #16]
   17aca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17ace:	8463      	strh	r3, [r4, #34]	; 0x22
	data->par_p6 = (int8_t)(buff[15]);
   17ad0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
   17ad4:	ba5b      	rev16	r3, r3
   17ad6:	84a3      	strh	r3, [r4, #36]	; 0x24
	data->par_p8 = (int16_t)(BME680_CONCAT_BYTES(buff[19], buff[18]));
   17ad8:	f89d 2017 	ldrb.w	r2, [sp, #23]
   17adc:	f89d 3016 	ldrb.w	r3, [sp, #22]
   17ae0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17ae4:	84e3      	strh	r3, [r4, #38]	; 0x26
	data->par_p9 = (int16_t)(BME680_CONCAT_BYTES(buff[21], buff[20]));
   17ae6:	f89d 2019 	ldrb.w	r2, [sp, #25]
   17aea:	f89d 3018 	ldrb.w	r3, [sp, #24]
   17aee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17af2:	8523      	strh	r3, [r4, #40]	; 0x28
	data->par_p10 = (uint8_t)(buff[22]);
   17af4:	f89d 301a 	ldrb.w	r3, [sp, #26]
   17af8:	f884 302a 	strb.w	r3, [r4, #42]	; 0x2a
	data->par_h1 = (uint16_t)(((uint16_t)buff[25] << 4) | (buff[24] & 0x0f));
   17afc:	f89d 301c 	ldrb.w	r3, [sp, #28]
   17b00:	f89d 101d 	ldrb.w	r1, [sp, #29]
   17b04:	f003 020f 	and.w	r2, r3, #15
   17b08:	ea42 1201 	orr.w	r2, r2, r1, lsl #4
   17b0c:	80e2      	strh	r2, [r4, #6]
	data->par_h2 = (uint16_t)(((uint16_t)buff[23] << 4) | ((buff[24]) >> 4));
   17b0e:	f89d 201b 	ldrb.w	r2, [sp, #27]
   17b12:	091b      	lsrs	r3, r3, #4
   17b14:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   17b18:	8123      	strh	r3, [r4, #8]
	data->par_h3 = (int8_t)buff[26];
   17b1a:	f89d 301e 	ldrb.w	r3, [sp, #30]
   17b1e:	72a3      	strb	r3, [r4, #10]
	data->par_h4 = (int8_t)buff[27];
   17b20:	f89d 301f 	ldrb.w	r3, [sp, #31]
   17b24:	72e3      	strb	r3, [r4, #11]
	data->par_h5 = (int8_t)buff[28];
   17b26:	f89d 3020 	ldrb.w	r3, [sp, #32]
   17b2a:	7323      	strb	r3, [r4, #12]
	data->par_h6 = (uint8_t)buff[29];
   17b2c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   17b30:	7363      	strb	r3, [r4, #13]
	data->par_h7 = (int8_t)buff[30];
   17b32:	f89d 3022 	ldrb.w	r3, [sp, #34]	; 0x22
   17b36:	73a3      	strb	r3, [r4, #14]
	data->par_gh1 = (int8_t)buff[35];
   17b38:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   17b3c:	73e3      	strb	r3, [r4, #15]
	data->par_gh2 = (int16_t)(BME680_CONCAT_BYTES(buff[34], buff[33]));
   17b3e:	f89d 2026 	ldrb.w	r2, [sp, #38]	; 0x26
   17b42:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
   17b46:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   17b4a:	8223      	strh	r3, [r4, #16]
	data->par_gh3 = (int8_t)buff[36];
   17b4c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   17b50:	74a3      	strb	r3, [r4, #18]
	data->res_heat_val = (int8_t)buff[37];
   17b52:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
   17b56:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	data->res_heat_range = ((buff[39] & BME680_MSK_RH_RANGE) >> 4);
   17b5a:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
   17b5e:	f3c3 1301 	ubfx	r3, r3, #4, #2
   17b62:	f884 302b 	strb.w	r3, [r4, #43]	; 0x2b
	data->range_sw_err = ((int8_t)(buff[41] & BME680_MSK_RANGE_SW_ERR)) / 16;
   17b66:	f99d 302d 	ldrsb.w	r3, [sp, #45]	; 0x2d
   17b6a:	111b      	asrs	r3, r3, #4
   17b6c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	err = bme680_reg_write(data, BME680_REG_CTRL_HUM, BME680_HUMIDITY_OVER);
   17b70:	2201      	movs	r2, #1
   17b72:	2172      	movs	r1, #114	; 0x72
   17b74:	4620      	mov	r0, r4
   17b76:	f006 fe78 	bl	1e86a <bme680_reg_write>
	if (err < 0) {
   17b7a:	2800      	cmp	r0, #0
   17b7c:	db58      	blt.n	17c30 <bme680_init+0x234>
	err = bme680_reg_write(data, BME680_REG_CONFIG, BME680_CONFIG_VAL);
   17b7e:	2200      	movs	r2, #0
   17b80:	2175      	movs	r1, #117	; 0x75
   17b82:	4620      	mov	r0, r4
   17b84:	f006 fe71 	bl	1e86a <bme680_reg_write>
	if (err < 0) {
   17b88:	2800      	cmp	r0, #0
   17b8a:	db51      	blt.n	17c30 <bme680_init+0x234>
	err = bme680_reg_write(data, BME680_REG_CTRL_GAS_1,
   17b8c:	2210      	movs	r2, #16
   17b8e:	2171      	movs	r1, #113	; 0x71
   17b90:	4620      	mov	r0, r4
   17b92:	f006 fe6a 	bl	1e86a <bme680_reg_write>
	if (err < 0) {
   17b96:	2800      	cmp	r0, #0
   17b98:	db4a      	blt.n	17c30 <bme680_init+0x234>
					   * heatr_temp * 5) / 100)
   17b9a:	8a21      	ldrh	r1, [r4, #16]
   17b9c:	4b28      	ldr	r3, [pc, #160]	; (17c40 <bme680_init+0x244>)
   17b9e:	2205      	movs	r2, #5
   17ba0:	fb11 3302 	smlabb	r3, r1, r2, r3
   17ba4:	f44f 71a0 	mov.w	r1, #320	; 0x140
   17ba8:	2064      	movs	r0, #100	; 0x64
   17baa:	4359      	muls	r1, r3
					 + 3276800) / 10);
   17bac:	230a      	movs	r3, #10
					   * heatr_temp * 5) / 100)
   17bae:	fbb1 f1f0 	udiv	r1, r1, r0
					 + 3276800) / 10);
   17bb2:	f501 1148 	add.w	r1, r1, #3276800	; 0x320000
   17bb6:	fbb1 f1f3 	udiv	r1, r1, r3
	var2 = (data->par_gh1 + 784) * (((((data->par_gh2 + 154009)
   17bba:	f994 300f 	ldrsb.w	r3, [r4, #15]
   17bbe:	f503 7344 	add.w	r3, r3, #784	; 0x310
   17bc2:	4359      	muls	r1, r3
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   17bc4:	f994 3012 	ldrsb.w	r3, [r4, #18]
   17bc8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17bcc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17bd0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   17bd4:	fb93 f3f2 	sdiv	r3, r3, r2
	var4 = (var3 / (data->res_heat_range + 4));
   17bd8:	f894 202b 	ldrb.w	r2, [r4, #43]	; 0x2b
	var1 = ((amb_temp * data->par_gh3) / 1000) * 256;
   17bdc:	021b      	lsls	r3, r3, #8
	var3 = var1 + (var2 / 2);
   17bde:	eb03 0361 	add.w	r3, r3, r1, asr #1
	var5 = (131 * data->res_heat_val) + 65536;
   17be2:	f994 102c 	ldrsb.w	r1, [r4, #44]	; 0x2c
	var4 = (var3 / (data->res_heat_range + 4));
   17be6:	3204      	adds	r2, #4
   17be8:	fbb3 f3f2 	udiv	r3, r3, r2
	var5 = (131 * data->res_heat_val) + 65536;
   17bec:	2283      	movs	r2, #131	; 0x83
   17bee:	434a      	muls	r2, r1
   17bf0:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
	heatr_res_x100 = ((var4 / var5) - 250) * 34;
   17bf4:	fbb3 f3f2 	udiv	r3, r3, r2
   17bf8:	2222      	movs	r2, #34	; 0x22
   17bfa:	4353      	muls	r3, r2
	heatr_res = (heatr_res_x100 + 50) / 100;
   17bfc:	f5a3 5304 	sub.w	r3, r3, #8448	; 0x2100
   17c00:	3b02      	subs	r3, #2
	err = bme680_reg_write(data, BME680_REG_RES_HEAT0,
   17c02:	215a      	movs	r1, #90	; 0x5a
	heatr_res = (heatr_res_x100 + 50) / 100;
   17c04:	fb93 f3f0 	sdiv	r3, r3, r0
	err = bme680_reg_write(data, BME680_REG_RES_HEAT0,
   17c08:	4620      	mov	r0, r4
   17c0a:	b2da      	uxtb	r2, r3
   17c0c:	f006 fe2d 	bl	1e86a <bme680_reg_write>
	if (err < 0) {
   17c10:	2800      	cmp	r0, #0
   17c12:	db0d      	blt.n	17c30 <bme680_init+0x234>
	err = bme680_reg_write(data, BME680_REG_GAS_WAIT0,
   17c14:	2271      	movs	r2, #113	; 0x71
   17c16:	2164      	movs	r1, #100	; 0x64
   17c18:	4620      	mov	r0, r4
   17c1a:	f006 fe26 	bl	1e86a <bme680_reg_write>
	if (err < 0) {
   17c1e:	2800      	cmp	r0, #0
   17c20:	db06      	blt.n	17c30 <bme680_init+0x234>
	err = bme680_reg_write(data, BME680_REG_CTRL_MEAS,
   17c22:	2255      	movs	r2, #85	; 0x55
   17c24:	2174      	movs	r1, #116	; 0x74
   17c26:	4620      	mov	r0, r4
   17c28:	f006 fe1f 	bl	1e86a <bme680_reg_write>
	if (bme680_chip_init(dev) < 0) {
   17c2c:	2800      	cmp	r0, #0
   17c2e:	da02      	bge.n	17c36 <bme680_init+0x23a>
		return -EINVAL;
   17c30:	f06f 0015 	mvn.w	r0, #21
   17c34:	e000      	b.n	17c38 <bme680_init+0x23c>
	}

	return 0;
   17c36:	2000      	movs	r0, #0
}
   17c38:	b00d      	add	sp, #52	; 0x34
   17c3a:	bd30      	pop	{r4, r5, pc}
   17c3c:	00020df2 	.word	0x00020df2
   17c40:	000bbffd 	.word	0x000bbffd

00017c44 <random_byte_get>:
	__asm__ volatile(
   17c44:	f04f 0320 	mov.w	r3, #32
   17c48:	f3ef 8211 	mrs	r2, BASEPRI
   17c4c:	f383 8811 	msr	BASEPRI, r3
   17c50:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17c54:	4b08      	ldr	r3, [pc, #32]	; (17c78 <random_byte_get+0x34>)
   17c56:	6819      	ldr	r1, [r3, #0]
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   17c58:	b159      	cbz	r1, 17c72 <random_byte_get+0x2e>
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   17c5a:	4908      	ldr	r1, [pc, #32]	; (17c7c <random_byte_get+0x38>)
   17c5c:	f8d1 0508 	ldr.w	r0, [r1, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17c60:	2100      	movs	r1, #0
   17c62:	6019      	str	r1, [r3, #0]
   17c64:	681b      	ldr	r3, [r3, #0]
		retval = nrf_rng_random_value_get(NRF_RNG);
   17c66:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   17c68:	f382 8811 	msr	BASEPRI, r2
   17c6c:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   17c70:	4770      	bx	lr
	int retval = -EAGAIN;
   17c72:	f06f 000a 	mvn.w	r0, #10
   17c76:	e7f7      	b.n	17c68 <random_byte_get+0x24>
   17c78:	4000d100 	.word	0x4000d100
   17c7c:	4000d000 	.word	0x4000d000

00017c80 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   17c80:	b5f0      	push	{r4, r5, r6, r7, lr}
   17c82:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   17c84:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   17c86:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   17c88:	f04f 0520 	mov.w	r5, #32
   17c8c:	f3ef 8011 	mrs	r0, BASEPRI
   17c90:	f385 8811 	msr	BASEPRI, r5
   17c94:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   17c98:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   17c9a:	f893 e001 	ldrb.w	lr, [r3, #1]

	available = (last - first) & mask;
   17c9e:	1ba4      	subs	r4, r4, r6
   17ca0:	403c      	ands	r4, r7
	if (available < len) {
   17ca2:	42a2      	cmp	r2, r4
		len = available;
   17ca4:	bf88      	it	hi
   17ca6:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   17ca8:	eb06 0c02 	add.w	ip, r6, r2
   17cac:	ea07 0c0c 	and.w	ip, r7, ip
	first = rngp->first_alloc;
   17cb0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   17cb2:	f883 c000 	strb.w	ip, [r3]
	__asm__ volatile(
   17cb6:	f380 8811 	msr	BASEPRI, r0
   17cba:	f3bf 8f6f 	isb	sy
   17cbe:	440a      	add	r2, r1
	uint8_t *dst   = buf;
   17cc0:	4608      	mov	r0, r1
	irq_unlock(key);

	while (likely(len--)) {
   17cc2:	4282      	cmp	r2, r0
   17cc4:	d119      	bne.n	17cfa <rng_pool_get+0x7a>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   17cc6:	4576      	cmp	r6, lr
   17cc8:	d10d      	bne.n	17ce6 <rng_pool_get+0x66>
	__asm__ volatile(
   17cca:	f04f 0520 	mov.w	r5, #32
   17cce:	f3ef 8211 	mrs	r2, BASEPRI
   17cd2:	f385 8811 	msr	BASEPRI, r5
   17cd6:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   17cda:	781d      	ldrb	r5, [r3, #0]
   17cdc:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   17cde:	f382 8811 	msr	BASEPRI, r2
   17ce2:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   17ce6:	1a41      	subs	r1, r0, r1
	available = available - len;
	if (available <= rngp->threshold) {
   17ce8:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   17cea:	b288      	uxth	r0, r1
	available = available - len;
   17cec:	1a21      	subs	r1, r4, r0
	if (available <= rngp->threshold) {
   17cee:	428b      	cmp	r3, r1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17cf0:	bf22      	ittt	cs
   17cf2:	4b06      	ldrcs	r3, [pc, #24]	; (17d0c <rng_pool_get+0x8c>)
   17cf4:	2201      	movcs	r2, #1
   17cf6:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   17cf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   17cfa:	eb03 0c05 	add.w	ip, r3, r5
		first = (first + 1) & mask;
   17cfe:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   17d00:	f89c c005 	ldrb.w	ip, [ip, #5]
   17d04:	f800 cb01 	strb.w	ip, [r0], #1
		first = (first + 1) & mask;
   17d08:	403d      	ands	r5, r7
   17d0a:	e7da      	b.n	17cc2 <rng_pool_get+0x42>
   17d0c:	4000d000 	.word	0x4000d000

00017d10 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17d10:	43db      	mvns	r3, r3
{
   17d12:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17d16:	f013 0501 	ands.w	r5, r3, #1
{
   17d1a:	460e      	mov	r6, r1
   17d1c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   17d1e:	d004      	beq.n	17d2a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   17d20:	4821      	ldr	r0, [pc, #132]	; (17da8 <entropy_nrf5_get_entropy_isr+0x98>)
   17d22:	f7ff ffad 	bl	17c80 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   17d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   17d2a:	2a00      	cmp	r2, #0
   17d2c:	d033      	beq.n	17d96 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   17d2e:	f04f 0320 	mov.w	r3, #32
   17d32:	f3ef 8811 	mrs	r8, BASEPRI
   17d36:	f383 8811 	msr	BASEPRI, r3
   17d3a:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   17d3e:	200d      	movs	r0, #13
   17d40:	f7ed fba8 	bl	5494 <arch_irq_is_enabled>
   17d44:	4607      	mov	r7, r0
		irq_disable(IRQN);
   17d46:	200d      	movs	r0, #13
   17d48:	f7ed fb90 	bl	546c <arch_irq_disable>
	__asm__ volatile(
   17d4c:	f388 8811 	msr	BASEPRI, r8
   17d50:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17d54:	4a15      	ldr	r2, [pc, #84]	; (17dac <entropy_nrf5_get_entropy_isr+0x9c>)
   17d56:	6015      	str	r5, [r2, #0]
   17d58:	6813      	ldr	r3, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17d5a:	4b15      	ldr	r3, [pc, #84]	; (17db0 <entropy_nrf5_get_entropy_isr+0xa0>)
   17d5c:	2101      	movs	r1, #1
   17d5e:	6019      	str	r1, [r3, #0]
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   17d60:	4914      	ldr	r1, [pc, #80]	; (17db4 <entropy_nrf5_get_entropy_isr+0xa4>)
   17d62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   17d66:	f8c1 3180 	str.w	r3, [r1, #384]	; 0x180
   17d6a:	4625      	mov	r5, r4
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   17d6c:	4691      	mov	r9, r2
   17d6e:	468a      	mov	sl, r1
   17d70:	4698      	mov	r8, r3
   17d72:	f8d9 3000 	ldr.w	r3, [r9]
			while (!nrf_rng_event_check(NRF_RNG,
   17d76:	b183      	cbz	r3, 17d9a <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   17d78:	f7ff ff64 	bl	17c44 <random_byte_get>
			if (byte < 0) {
   17d7c:	1e03      	subs	r3, r0, #0
   17d7e:	f8ca 8180 	str.w	r8, [sl, #384]	; 0x180
   17d82:	dbf6      	blt.n	17d72 <entropy_nrf5_get_entropy_isr+0x62>
   17d84:	3d01      	subs	r5, #1
   17d86:	b2ad      	uxth	r5, r5
			buf[--len] = byte;
   17d88:	5573      	strb	r3, [r6, r5]
		} while (len);
   17d8a:	2d00      	cmp	r5, #0
   17d8c:	d1f1      	bne.n	17d72 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   17d8e:	b117      	cbz	r7, 17d96 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   17d90:	200d      	movs	r0, #13
   17d92:	f7ed fb5b 	bl	544c <arch_irq_enable>
	return cnt;
   17d96:	4620      	mov	r0, r4
   17d98:	e7c5      	b.n	17d26 <entropy_nrf5_get_entropy_isr+0x16>
   17d9a:	f3bf 8f4f 	dsb	sy
				__WFE();
   17d9e:	bf20      	wfe
				__SEV();
   17da0:	bf40      	sev
				__WFE();
   17da2:	bf20      	wfe
   17da4:	e7e5      	b.n	17d72 <entropy_nrf5_get_entropy_isr+0x62>
   17da6:	bf00      	nop
   17da8:	20002858 	.word	0x20002858
   17dac:	4000d100 	.word	0x4000d100
   17db0:	4000d000 	.word	0x4000d000
   17db4:	e000e100 	.word	0xe000e100

00017db8 <entropy_nrf5_get_entropy>:
{
   17db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   17dbc:	4f13      	ldr	r7, [pc, #76]	; (17e0c <entropy_nrf5_get_entropy+0x54>)
   17dbe:	460d      	mov	r5, r1
   17dc0:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17dc2:	f107 0845 	add.w	r8, r7, #69	; 0x45
   17dc6:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   17dca:	b914      	cbnz	r4, 17dd2 <entropy_nrf5_get_entropy+0x1a>
}
   17dcc:	4620      	mov	r0, r4
   17dce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   17dd2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17dd6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17dda:	4638      	mov	r0, r7
   17ddc:	f001 fafe 	bl	193dc <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   17de0:	4622      	mov	r2, r4
   17de2:	4629      	mov	r1, r5
   17de4:	4640      	mov	r0, r8
   17de6:	f7ff ff4b 	bl	17c80 <rng_pool_get>
   17dea:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   17dec:	4638      	mov	r0, r7
   17dee:	f001 facf 	bl	19390 <z_impl_k_sem_give>
		if (bytes == 0U) {
   17df2:	b93e      	cbnz	r6, 17e04 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   17df4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   17df8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   17dfc:	4648      	mov	r0, r9
   17dfe:	f001 faed 	bl	193dc <z_impl_k_sem_take>
			continue;
   17e02:	e7e2      	b.n	17dca <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   17e04:	1ba4      	subs	r4, r4, r6
   17e06:	b2a4      	uxth	r4, r4
		buf += bytes;
   17e08:	4435      	add	r5, r6
   17e0a:	e7de      	b.n	17dca <entropy_nrf5_get_entropy+0x12>
   17e0c:	20002828 	.word	0x20002828

00017e10 <entropy_nrf5_init>:
		    entropy_nrf5_init, &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   17e10:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   17e12:	4c19      	ldr	r4, [pc, #100]	; (17e78 <entropy_nrf5_init+0x68>)
   17e14:	2201      	movs	r2, #1
   17e16:	4611      	mov	r1, r2
   17e18:	4620      	mov	r0, r4
   17e1a:	f007 f851 	bl	1eec0 <z_impl_k_sem_init>
   17e1e:	2201      	movs	r2, #1
   17e20:	2100      	movs	r1, #0
   17e22:	f104 0018 	add.w	r0, r4, #24
   17e26:	f007 f84b 	bl	1eec0 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   17e2a:	f240 4307 	movw	r3, #1031	; 0x407
   17e2e:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   17e32:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   17e36:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   17e38:	230c      	movs	r3, #12
   17e3a:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   17e3e:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   17e40:	4b0e      	ldr	r3, [pc, #56]	; (17e7c <entropy_nrf5_init+0x6c>)
   17e42:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   17e46:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   17e4a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   17e4e:	f042 0201 	orr.w	r2, r2, #1
   17e52:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17e56:	4a0a      	ldr	r2, [pc, #40]	; (17e80 <entropy_nrf5_init+0x70>)
    p_reg->INTENSET = mask;
   17e58:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   17e5a:	6015      	str	r5, [r2, #0]
   17e5c:	6812      	ldr	r2, [r2, #0]
    p_reg->INTENSET = mask;
   17e5e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   17e62:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   17e64:	6019      	str	r1, [r3, #0]
   17e66:	200d      	movs	r0, #13
   17e68:	f7ed fb22 	bl	54b0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   17e6c:	200d      	movs	r0, #13
   17e6e:	f7ed faed 	bl	544c <arch_irq_enable>

	return 0;
}
   17e72:	4628      	mov	r0, r5
   17e74:	bd38      	pop	{r3, r4, r5, pc}
   17e76:	bf00      	nop
   17e78:	20002828 	.word	0x20002828
   17e7c:	4000d000 	.word	0x4000d000
   17e80:	4000d100 	.word	0x4000d100

00017e84 <isr>:
{
   17e84:	b510      	push	{r4, lr}
	byte = random_byte_get();
   17e86:	f7ff fedd 	bl	17c44 <random_byte_get>
	if (byte < 0) {
   17e8a:	2800      	cmp	r0, #0
   17e8c:	db20      	blt.n	17ed0 <isr+0x4c>
	uint8_t last  = rngp->last;
   17e8e:	4b17      	ldr	r3, [pc, #92]	; (17eec <isr+0x68>)
   17e90:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   17e94:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   17e98:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   17e9c:	1a51      	subs	r1, r2, r1
   17e9e:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   17ea2:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   17ea4:	d10d      	bne.n	17ec2 <isr+0x3e>
	uint8_t last  = rngp->last;
   17ea6:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   17eaa:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   17eae:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   17eb2:	1a51      	subs	r1, r2, r1
   17eb4:	ea34 0101 	bics.w	r1, r4, r1
   17eb8:	d10b      	bne.n	17ed2 <isr+0x4e>
   17eba:	4b0d      	ldr	r3, [pc, #52]	; (17ef0 <isr+0x6c>)
   17ebc:	2201      	movs	r2, #1
   17ebe:	601a      	str	r2, [r3, #0]
}
   17ec0:	e00e      	b.n	17ee0 <isr+0x5c>
	rngp->buffer[last] = byte;
   17ec2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17ec4:	3201      	adds	r2, #1
   17ec6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17ec8:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   17ecc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   17ed0:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   17ed2:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   17ed4:	3201      	adds	r2, #1
   17ed6:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   17ed8:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   17edc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   17ee0:	4804      	ldr	r0, [pc, #16]	; (17ef4 <isr+0x70>)
}
   17ee2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   17ee6:	f001 ba53 	b.w	19390 <z_impl_k_sem_give>
   17eea:	bf00      	nop
   17eec:	20002828 	.word	0x20002828
   17ef0:	4000d004 	.word	0x4000d004
   17ef4:	20002840 	.word	0x20002840

00017ef8 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17ef8:	4b03      	ldr	r3, [pc, #12]	; (17f08 <nrf52_errata_136+0x10>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17efa:	6818      	ldr	r0, [r3, #0]
                }
            }
        #endif
        return false;
    #endif
}
   17efc:	f1a0 0308 	sub.w	r3, r0, #8
   17f00:	4258      	negs	r0, r3
   17f02:	4158      	adcs	r0, r3
   17f04:	4770      	bx	lr
   17f06:	bf00      	nop
   17f08:	10000130 	.word	0x10000130

00017f0c <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   17f0c:	4b06      	ldr	r3, [pc, #24]	; (17f28 <nrf52_errata_103+0x1c>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   17f0e:	681b      	ldr	r3, [r3, #0]
   17f10:	2b08      	cmp	r3, #8
   17f12:	d106      	bne.n	17f22 <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   17f14:	4b05      	ldr	r3, [pc, #20]	; (17f2c <nrf52_errata_103+0x20>)
   17f16:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
   17f18:	2b03      	cmp	r3, #3
   17f1a:	d802      	bhi.n	17f22 <nrf52_errata_103+0x16>
   17f1c:	4a04      	ldr	r2, [pc, #16]	; (17f30 <nrf52_errata_103+0x24>)
   17f1e:	5cd0      	ldrb	r0, [r2, r3]
   17f20:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   17f22:	2000      	movs	r0, #0
    #endif
}
   17f24:	4770      	bx	lr
   17f26:	bf00      	nop
   17f28:	10000130 	.word	0x10000130
   17f2c:	10000134 	.word	0x10000134
   17f30:	00020dfc 	.word	0x00020dfc

00017f34 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   17f34:	b508      	push	{r3, lr}
        NRF_P1->PIN_CNF[9]  = (GPIO_PIN_CNF_DRIVE_H0H1 << GPIO_PIN_CNF_DRIVE_Pos) | (GPIO_PIN_CNF_INPUT_Connect << GPIO_PIN_CNF_INPUT_Pos) | (GPIO_PIN_CNF_DIR_Output << GPIO_PIN_CNF_DIR_Pos);
    #endif
    
    /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_36()){
   17f36:	f7ff ffdf 	bl	17ef8 <nrf52_errata_136>
   17f3a:	b140      	cbz	r0, 17f4e <SystemInit+0x1a>
        NRF_CLOCK->EVENTS_DONE = 0;
   17f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   17f40:	2200      	movs	r2, #0
   17f42:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
        NRF_CLOCK->EVENTS_CTTO = 0;
   17f46:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
        NRF_CLOCK->CTIV = 0;
   17f4a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    }
    
    /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_66()){
   17f4e:	f7ff ffd3 	bl	17ef8 <nrf52_errata_136>
   17f52:	2800      	cmp	r0, #0
   17f54:	d046      	beq.n	17fe4 <SystemInit+0xb0>
        NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   17f56:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   17f5a:	4b58      	ldr	r3, [pc, #352]	; (180bc <SystemInit+0x188>)
   17f5c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   17f60:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
        NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   17f64:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   17f68:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
        NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   17f6c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   17f70:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
        NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   17f74:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   17f78:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
        NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   17f7c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   17f80:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
        NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   17f84:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   17f88:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
        NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   17f8c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   17f90:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
        NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   17f94:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   17f98:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
        NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   17f9c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   17fa0:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
        NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   17fa4:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   17fa8:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
        NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   17fac:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   17fb0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
        NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   17fb4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   17fb8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
        NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   17fbc:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   17fc0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
        NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   17fc4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   17fc8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
        NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   17fcc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   17fd0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
        NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   17fd4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   17fd8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
        NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   17fdc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   17fe0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    }
    
    /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_98()){
   17fe4:	f7ff ff92 	bl	17f0c <nrf52_errata_103>
   17fe8:	b110      	cbz	r0, 17ff0 <SystemInit+0xbc>
        *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   17fea:	4b35      	ldr	r3, [pc, #212]	; (180c0 <SystemInit+0x18c>)
   17fec:	4a35      	ldr	r2, [pc, #212]	; (180c4 <SystemInit+0x190>)
   17fee:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_103()){
   17ff0:	f7ff ff8c 	bl	17f0c <nrf52_errata_103>
   17ff4:	b118      	cbz	r0, 17ffe <SystemInit+0xca>
        NRF_CCM->MAXPACKETSIZE = 0xFBul;
   17ff6:	4b34      	ldr	r3, [pc, #208]	; (180c8 <SystemInit+0x194>)
   17ff8:	22fb      	movs	r2, #251	; 0xfb
   17ffa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    }
    
    /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_115()){
   17ffe:	f7ff ff85 	bl	17f0c <nrf52_errata_103>
   18002:	b148      	cbz	r0, 18018 <SystemInit+0xe4>
        *(volatile uint32_t *)0x40000EE4ul = (*(volatile uint32_t *)0x40000EE4ul & 0xFFFFFFF0ul) | (*(uint32_t *)0x10000258ul & 0x0000000Ful);
   18004:	4931      	ldr	r1, [pc, #196]	; (180cc <SystemInit+0x198>)
   18006:	4b32      	ldr	r3, [pc, #200]	; (180d0 <SystemInit+0x19c>)
   18008:	680a      	ldr	r2, [r1, #0]
   1800a:	681b      	ldr	r3, [r3, #0]
   1800c:	f022 020f 	bic.w	r2, r2, #15
   18010:	f003 030f 	and.w	r3, r3, #15
   18014:	4313      	orrs	r3, r2
   18016:	600b      	str	r3, [r1, #0]
    }
    
    /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_120()){
   18018:	f7ff ff78 	bl	17f0c <nrf52_errata_103>
   1801c:	b118      	cbz	r0, 18026 <SystemInit+0xf2>
        *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1801e:	4b2d      	ldr	r3, [pc, #180]	; (180d4 <SystemInit+0x1a0>)
   18020:	f44f 7200 	mov.w	r2, #512	; 0x200
   18024:	601a      	str	r2, [r3, #0]
    }
    
    /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
       for your device located at https://infocenter.nordicsemi.com/index.jsp  */
    if (nrf52_errata_136()){
   18026:	f7ff ff67 	bl	17ef8 <nrf52_errata_136>
   1802a:	b148      	cbz	r0, 18040 <SystemInit+0x10c>
        if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1802c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18030:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18034:	07d2      	lsls	r2, r2, #31
            NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   18036:	bf44      	itt	mi
   18038:	f06f 0201 	mvnmi.w	r2, #1
   1803c:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18040:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   18044:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   18048:	2a00      	cmp	r2, #0
   1804a:	db03      	blt.n	18054 <SystemInit+0x120>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1804c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   18050:	2b00      	cmp	r3, #0
   18052:	da2f      	bge.n	180b4 <SystemInit+0x180>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   18054:	4b20      	ldr	r3, [pc, #128]	; (180d8 <SystemInit+0x1a4>)
   18056:	2201      	movs	r2, #1
   18058:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1805c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18060:	2a00      	cmp	r2, #0
   18062:	d0fb      	beq.n	1805c <SystemInit+0x128>
            NRF_UICR->PSELRESET[0] = 18;
   18064:	f04f 2210 	mov.w	r2, #268439552	; 0x10001000
   18068:	2112      	movs	r1, #18
   1806a:	f8c2 1200 	str.w	r1, [r2, #512]	; 0x200
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1806e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   18072:	2a00      	cmp	r2, #0
   18074:	d0fb      	beq.n	1806e <SystemInit+0x13a>
            NRF_UICR->PSELRESET[1] = 18;
   18076:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1807a:	2212      	movs	r2, #18
   1807c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18080:	4b15      	ldr	r3, [pc, #84]	; (180d8 <SystemInit+0x1a4>)
   18082:	461a      	mov	r2, r3
   18084:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
   18088:	2900      	cmp	r1, #0
   1808a:	d0fb      	beq.n	18084 <SystemInit+0x150>
            NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   1808c:	2100      	movs	r1, #0
   1808e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
            while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   18092:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   18096:	2b00      	cmp	r3, #0
   18098:	d0fb      	beq.n	18092 <SystemInit+0x15e>
   1809a:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1809e:	490f      	ldr	r1, [pc, #60]	; (180dc <SystemInit+0x1a8>)
   180a0:	4b0f      	ldr	r3, [pc, #60]	; (180e0 <SystemInit+0x1ac>)
   180a2:	68ca      	ldr	r2, [r1, #12]
   180a4:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   180a8:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   180aa:	60cb      	str	r3, [r1, #12]
   180ac:	f3bf 8f4f 	dsb	sy
    __NOP();
   180b0:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   180b2:	e7fd      	b.n	180b0 <SystemInit+0x17c>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   180b4:	4b0b      	ldr	r3, [pc, #44]	; (180e4 <SystemInit+0x1b0>)
   180b6:	4a0c      	ldr	r2, [pc, #48]	; (180e8 <SystemInit+0x1b4>)
   180b8:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   180ba:	bd08      	pop	{r3, pc}
   180bc:	4000c000 	.word	0x4000c000
   180c0:	4000568c 	.word	0x4000568c
   180c4:	00038148 	.word	0x00038148
   180c8:	4000f000 	.word	0x4000f000
   180cc:	40000ee4 	.word	0x40000ee4
   180d0:	10000258 	.word	0x10000258
   180d4:	40029640 	.word	0x40029640
   180d8:	4001e000 	.word	0x4001e000
   180dc:	e000ed00 	.word	0xe000ed00
   180e0:	05fa0004 	.word	0x05fa0004
   180e4:	200008ec 	.word	0x200008ec
   180e8:	03d09000 	.word	0x03d09000

000180ec <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   180ec:	4b04      	ldr	r3, [pc, #16]	; (18100 <nrfx_clock_init+0x14>)
   180ee:	791a      	ldrb	r2, [r3, #4]
   180f0:	b922      	cbnz	r2, 180fc <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   180f2:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   180f4:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   180f6:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   180f8:	4802      	ldr	r0, [pc, #8]	; (18104 <nrfx_clock_init+0x18>)
   180fa:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   180fc:	4802      	ldr	r0, [pc, #8]	; (18108 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   180fe:	4770      	bx	lr
   18100:	2000287c 	.word	0x2000287c
   18104:	0bad0000 	.word	0x0bad0000
   18108:	0bad000c 	.word	0x0bad000c

0001810c <nrfx_clock_start>:
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1810c:	b110      	cbz	r0, 18114 <nrfx_clock_start+0x8>
   1810e:	2801      	cmp	r0, #1
   18110:	d020      	beq.n	18154 <nrfx_clock_start+0x48>
   18112:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   18114:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18118:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1811c:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   18120:	f411 3f80 	tst.w	r1, #65536	; 0x10000
   18124:	4619      	mov	r1, r3
   18126:	d011      	beq.n	1814c <nrfx_clock_start+0x40>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   18128:	f002 0203 	and.w	r2, r2, #3
    {
        case NRF_CLOCK_DOMAIN_LFCLK:
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
            {
                nrf_clock_lfclk_t lfclksrc;
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   1812c:	2a01      	cmp	r2, #1
   1812e:	d10d      	bne.n	1814c <nrfx_clock_start+0x40>
    p_reg->LFCLKSRC = (uint32_t)(source);
   18130:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18134:	4b0c      	ldr	r3, [pc, #48]	; (18168 <nrfx_clock_start+0x5c>)
   18136:	2200      	movs	r2, #0
   18138:	601a      	str	r2, [r3, #0]
   1813a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1813c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18140:	2202      	movs	r2, #2
   18142:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18146:	2201      	movs	r2, #1
   18148:	609a      	str	r2, [r3, #8]
}
   1814a:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   1814c:	2300      	movs	r3, #0
   1814e:	f8c1 3518 	str.w	r3, [r1, #1304]	; 0x518
}
   18152:	e7ef      	b.n	18134 <nrfx_clock_start+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18154:	4b05      	ldr	r3, [pc, #20]	; (1816c <nrfx_clock_start+0x60>)
   18156:	2200      	movs	r2, #0
   18158:	601a      	str	r2, [r3, #0]
   1815a:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
   1815c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18160:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18164:	6018      	str	r0, [r3, #0]
#endif
        default:
            NRFX_ASSERT(0);
            break;
    }
}
   18166:	4770      	bx	lr
   18168:	40000104 	.word	0x40000104
   1816c:	40000100 	.word	0x40000100

00018170 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   18170:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   18172:	b110      	cbz	r0, 1817a <nrfx_clock_stop+0xa>
   18174:	2801      	cmp	r0, #1
   18176:	d018      	beq.n	181aa <nrfx_clock_stop+0x3a>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   18178:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1817a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1817e:	2202      	movs	r2, #2
   18180:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18184:	4a18      	ldr	r2, [pc, #96]	; (181e8 <nrfx_clock_stop+0x78>)
   18186:	6010      	str	r0, [r2, #0]
   18188:	6812      	ldr	r2, [r2, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1818a:	4a18      	ldr	r2, [pc, #96]	; (181ec <nrfx_clock_stop+0x7c>)
   1818c:	2101      	movs	r1, #1
   1818e:	6011      	str	r1, [r2, #0]
   18190:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18194:	461c      	mov	r4, r3
   18196:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1819a:	03db      	lsls	r3, r3, #15
   1819c:	d5ec      	bpl.n	18178 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1819e:	2001      	movs	r0, #1
   181a0:	f006 fb79 	bl	1e896 <nrfx_busy_wait>
   181a4:	3d01      	subs	r5, #1
   181a6:	d1f6      	bne.n	18196 <nrfx_clock_stop+0x26>
   181a8:	e7e6      	b.n	18178 <nrfx_clock_stop+0x8>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   181aa:	4b11      	ldr	r3, [pc, #68]	; (181f0 <nrfx_clock_stop+0x80>)
    p_reg->INTENCLR = mask;
   181ac:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   181b0:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
   181b2:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   181b6:	601a      	str	r2, [r3, #0]
   181b8:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   181ba:	4b0e      	ldr	r3, [pc, #56]	; (181f4 <nrfx_clock_stop+0x84>)
   181bc:	f242 7510 	movw	r5, #10000	; 0x2710
   181c0:	6018      	str	r0, [r3, #0]
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   181c2:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   181c6:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   181ca:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   181cc:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   181d0:	d505      	bpl.n	181de <nrfx_clock_stop+0x6e>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   181d2:	b123      	cbz	r3, 181de <nrfx_clock_stop+0x6e>
   181d4:	2001      	movs	r0, #1
   181d6:	f006 fb5e 	bl	1e896 <nrfx_busy_wait>
   181da:	3d01      	subs	r5, #1
   181dc:	d1f1      	bne.n	181c2 <nrfx_clock_stop+0x52>
            m_clock_cb.hfclk_started = false;
   181de:	4b06      	ldr	r3, [pc, #24]	; (181f8 <nrfx_clock_stop+0x88>)
   181e0:	2200      	movs	r2, #0
   181e2:	715a      	strb	r2, [r3, #5]
   181e4:	e7c8      	b.n	18178 <nrfx_clock_stop+0x8>
   181e6:	bf00      	nop
   181e8:	40000104 	.word	0x40000104
   181ec:	4000000c 	.word	0x4000000c
   181f0:	40000100 	.word	0x40000100
   181f4:	40000004 	.word	0x40000004
   181f8:	2000287c 	.word	0x2000287c

000181fc <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   181fc:	4b16      	ldr	r3, [pc, #88]	; (18258 <nrfx_power_clock_irq_handler+0x5c>)
   181fe:	681a      	ldr	r2, [r3, #0]
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   18200:	b510      	push	{r4, lr}
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   18202:	b16a      	cbz	r2, 18220 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18204:	2200      	movs	r2, #0
   18206:	601a      	str	r2, [r3, #0]
   18208:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
   1820a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1820e:	2201      	movs	r2, #1
   18210:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   18214:	4b11      	ldr	r3, [pc, #68]	; (1825c <nrfx_power_clock_irq_handler+0x60>)
   18216:	7958      	ldrb	r0, [r3, #5]
   18218:	b910      	cbnz	r0, 18220 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
   1821a:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1821c:	681b      	ldr	r3, [r3, #0]
   1821e:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   18220:	4b0f      	ldr	r3, [pc, #60]	; (18260 <nrfx_power_clock_irq_handler+0x64>)
   18222:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   18224:	b172      	cbz	r2, 18244 <nrfx_power_clock_irq_handler+0x48>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18226:	2200      	movs	r2, #0
   18228:	601a      	str	r2, [r3, #0]
   1822a:	681b      	ldr	r3, [r3, #0]
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1822c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   18230:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   18234:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   18238:	0792      	lsls	r2, r2, #30
   1823a:	d104      	bne.n	18246 <nrfx_power_clock_irq_handler+0x4a>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1823c:	2201      	movs	r2, #1
   1823e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   18242:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   18244:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   18246:	2202      	movs	r2, #2
   18248:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1824c:	4b03      	ldr	r3, [pc, #12]	; (1825c <nrfx_power_clock_irq_handler+0x60>)
}
   1824e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   18252:	681b      	ldr	r3, [r3, #0]
   18254:	2001      	movs	r0, #1
   18256:	4718      	bx	r3
   18258:	40000100 	.word	0x40000100
   1825c:	2000287c 	.word	0x2000287c
   18260:	40000104 	.word	0x40000104

00018264 <twi_rx_start_transfer>:
    return ret_code;
}

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   18264:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   18266:	4b34      	ldr	r3, [pc, #208]	; (18338 <twi_rx_start_transfer+0xd4>)
   18268:	9301      	str	r3, [sp, #4]
}

NRF_STATIC_INLINE void nrf_twi_event_clear(NRF_TWI_Type  * p_reg,
                                           nrf_twi_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1826a:	2300      	movs	r3, #0
   1826c:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   18270:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   18274:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   18278:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1827c:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   18280:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   18284:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   18288:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1828c:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1828e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   18292:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   18294:	2b01      	cmp	r3, #1
{
   18296:	4604      	mov	r4, r0
   18298:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1829a:	d117      	bne.n	182cc <twi_rx_start_transfer+0x68>
   1829c:	6a0b      	ldr	r3, [r1, #32]
   1829e:	065b      	lsls	r3, r3, #25
   182a0:	d414      	bmi.n	182cc <twi_rx_start_transfer+0x68>
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   182a2:	2302      	movs	r3, #2
   182a4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   182a8:	2301      	movs	r3, #1
   182aa:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   182ac:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   182b0:	2a02      	cmp	r2, #2
   182b2:	bf18      	it	ne
   182b4:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   182b6:	682b      	ldr	r3, [r5, #0]
   182b8:	b193      	cbz	r3, 182e0 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   182ba:	f240 2386 	movw	r3, #646	; 0x286
   182be:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   182c0:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   182c2:	481e      	ldr	r0, [pc, #120]	; (1833c <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   182c4:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   182c8:	b003      	add	sp, #12
   182ca:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   182cc:	2301      	movs	r3, #1
   182ce:	e7e9      	b.n	182a4 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   182d0:	4629      	mov	r1, r5
   182d2:	4620      	mov	r0, r4
   182d4:	f006 fb08 	bl	1e8e8 <twi_transfer>
        while ((hw_timeout > 0) &&
   182d8:	b128      	cbz	r0, 182e6 <twi_rx_start_transfer+0x82>
               hw_timeout--;
   182da:	9b01      	ldr	r3, [sp, #4]
   182dc:	3b01      	subs	r3, #1
   182de:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   182e0:	9b01      	ldr	r3, [sp, #4]
   182e2:	2b00      	cmp	r3, #0
   182e4:	dcf4      	bgt.n	182d0 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   182e6:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   182ea:	b95b      	cbnz	r3, 18304 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   182ec:	4813      	ldr	r0, [pc, #76]	; (1833c <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   182ee:	9b01      	ldr	r3, [sp, #4]
   182f0:	2b00      	cmp	r3, #0
   182f2:	dce9      	bgt.n	182c8 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   182f4:	2300      	movs	r3, #0
   182f6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   182fa:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   182fc:	4810      	ldr	r0, [pc, #64]	; (18340 <twi_rx_start_transfer+0xdc>)
   182fe:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   18302:	e7e1      	b.n	182c8 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   18304:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   18308:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1830c:	b18b      	cbz	r3, 18332 <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1830e:	4a0d      	ldr	r2, [pc, #52]	; (18344 <twi_rx_start_transfer+0xe0>)
   18310:	480b      	ldr	r0, [pc, #44]	; (18340 <twi_rx_start_transfer+0xdc>)
   18312:	f013 0f01 	tst.w	r3, #1
   18316:	bf18      	it	ne
   18318:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1831a:	f013 0f02 	tst.w	r3, #2
   1831e:	f102 0201 	add.w	r2, r2, #1
   18322:	bf18      	it	ne
   18324:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   18326:	f013 0f04 	tst.w	r3, #4
   1832a:	4b07      	ldr	r3, [pc, #28]	; (18348 <twi_rx_start_transfer+0xe4>)
   1832c:	bf18      	it	ne
   1832e:	4618      	movne	r0, r3
   18330:	e7dd      	b.n	182ee <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   18332:	4803      	ldr	r0, [pc, #12]	; (18340 <twi_rx_start_transfer+0xdc>)
   18334:	e7db      	b.n	182ee <twi_rx_start_transfer+0x8a>
   18336:	bf00      	nop
   18338:	000186a0 	.word	0x000186a0
   1833c:	0bad0000 	.word	0x0bad0000
   18340:	0bad0001 	.word	0x0bad0001
   18344:	0bae0000 	.word	0x0bae0000
   18348:	0bae0002 	.word	0x0bae0002

0001834c <twi_tx_start_transfer>:
{
   1834c:	b537      	push	{r0, r1, r2, r4, r5, lr}
    hw_timeout = HW_TIMEOUT;
   1834e:	4b30      	ldr	r3, [pc, #192]	; (18410 <twi_tx_start_transfer+0xc4>)
   18350:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   18352:	2300      	movs	r3, #0
   18354:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   18358:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1835c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   18360:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   18364:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   18368:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1836c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   18370:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    p_reg->SHORTS = mask;
   18374:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_cb->bytes_transferred = 0;
   18378:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1837a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1837e:	2301      	movs	r3, #1
   18380:	6203      	str	r3, [r0, #32]
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   18382:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   18386:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   18388:	429a      	cmp	r2, r3
   1838a:	bf18      	it	ne
   1838c:	6083      	strne	r3, [r0, #8]
{
   1838e:	4604      	mov	r4, r0
    (void)twi_send_byte(p_twi, p_cb);
   18390:	f006 fa8d 	bl	1e8ae <twi_send_byte>
    if (p_cb->handler)
   18394:	682b      	ldr	r3, [r5, #0]
   18396:	b183      	cbz	r3, 183ba <twi_tx_start_transfer+0x6e>
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   18398:	f240 2386 	movw	r3, #646	; 0x286
   1839c:	60ab      	str	r3, [r5, #8]
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1839e:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   183a0:	481c      	ldr	r0, [pc, #112]	; (18414 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   183a2:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
}
   183a6:	b003      	add	sp, #12
   183a8:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   183aa:	4629      	mov	r1, r5
   183ac:	4620      	mov	r0, r4
   183ae:	f006 fa9b 	bl	1e8e8 <twi_transfer>
        while ((hw_timeout > 0) &&
   183b2:	b128      	cbz	r0, 183c0 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   183b4:	9b01      	ldr	r3, [sp, #4]
   183b6:	3b01      	subs	r3, #1
   183b8:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   183ba:	9b01      	ldr	r3, [sp, #4]
   183bc:	2b00      	cmp	r3, #0
   183be:	dcf4      	bgt.n	183aa <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   183c0:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   183c4:	b95b      	cbnz	r3, 183de <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   183c6:	4813      	ldr	r0, [pc, #76]	; (18414 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   183c8:	9b01      	ldr	r3, [sp, #4]
   183ca:	2b00      	cmp	r3, #0
   183cc:	dceb      	bgt.n	183a6 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   183ce:	2300      	movs	r3, #0
   183d0:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   183d4:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   183d6:	4810      	ldr	r0, [pc, #64]	; (18418 <twi_tx_start_transfer+0xcc>)
   183d8:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   183dc:	e7e3      	b.n	183a6 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   183de:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   183e2:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   183e6:	b18b      	cbz	r3, 1840c <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   183e8:	4a0c      	ldr	r2, [pc, #48]	; (1841c <twi_tx_start_transfer+0xd0>)
   183ea:	480b      	ldr	r0, [pc, #44]	; (18418 <twi_tx_start_transfer+0xcc>)
   183ec:	f013 0f01 	tst.w	r3, #1
   183f0:	bf18      	it	ne
   183f2:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   183f4:	f013 0f02 	tst.w	r3, #2
   183f8:	f102 0201 	add.w	r2, r2, #1
   183fc:	bf18      	it	ne
   183fe:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   18400:	f013 0f04 	tst.w	r3, #4
   18404:	4b06      	ldr	r3, [pc, #24]	; (18420 <twi_tx_start_transfer+0xd4>)
   18406:	bf18      	it	ne
   18408:	4618      	movne	r0, r3
   1840a:	e7dd      	b.n	183c8 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1840c:	4802      	ldr	r0, [pc, #8]	; (18418 <twi_tx_start_transfer+0xcc>)
   1840e:	e7db      	b.n	183c8 <twi_tx_start_transfer+0x7c>
   18410:	000186a0 	.word	0x000186a0
   18414:	0bad0000 	.word	0x0bad0000
   18418:	0bad0001 	.word	0x0bad0001
   1841c:	0bae0000 	.word	0x0bae0000
   18420:	0bae0002 	.word	0x0bae0002

00018424 <nrfx_twi_init>:
{
   18424:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   18428:	7907      	ldrb	r7, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1842a:	4d28      	ldr	r5, [pc, #160]	; (184cc <nrfx_twi_init+0xa8>)
   1842c:	f04f 0c3c 	mov.w	ip, #60	; 0x3c
   18430:	fb0c fc07 	mul.w	ip, ip, r7
   18434:	eb05 040c 	add.w	r4, r5, ip
   18438:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1843c:	2e00      	cmp	r6, #0
   1843e:	d142      	bne.n	184c6 <nrfx_twi_init+0xa2>
    p_cb->int_mask        = 0;
   18440:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   18442:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   18446:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   1844a:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
   1844e:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
   18450:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   18452:	7b4b      	ldrb	r3, [r1, #13]
   18454:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->handler         = event_handler;
   18458:	f845 200c 	str.w	r2, [r5, ip]
        case 1: return NRF_P1;
   1845c:	4b1c      	ldr	r3, [pc, #112]	; (184d0 <nrfx_twi_init+0xac>)
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1845e:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   18460:	ea4f 1c56 	mov.w	ip, r6, lsr #5
        case 1: return NRF_P1;
   18464:	f1bc 0f01 	cmp.w	ip, #1
    *p_pin = pin_number & 0x1F;
   18468:	f006 041f 	and.w	r4, r6, #31
        case 1: return NRF_P1;
   1846c:	bf0c      	ite	eq
   1846e:	469c      	moveq	ip, r3
   18470:	f04f 4ca0 	movne.w	ip, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18474:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   18478:	f240 6e0c 	movw	lr, #1548	; 0x60c
   1847c:	f84c e024 	str.w	lr, [ip, r4, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   18480:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   18482:	ea4f 1854 	mov.w	r8, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   18486:	f004 0c1f 	and.w	ip, r4, #31
        case 1: return NRF_P1;
   1848a:	f1b8 0f01 	cmp.w	r8, #1
   1848e:	bf18      	it	ne
   18490:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   18494:	f50c 7ce0 	add.w	ip, ip, #448	; 0x1c0
   18498:	f843 e02c 	str.w	lr, [r3, ip, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
   1849c:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   1849e:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   184a2:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   184a6:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   184aa:	b11a      	cbz	r2, 184b4 <nrfx_twi_init+0x90>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   184ac:	f340 3007 	sbfx	r0, r0, #12, #8
   184b0:	f7ec ffcc 	bl	544c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   184b4:	233c      	movs	r3, #60	; 0x3c
   184b6:	fb03 5507 	mla	r5, r3, r7, r5
    return err_code;
   184ba:	4806      	ldr	r0, [pc, #24]	; (184d4 <nrfx_twi_init+0xb0>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   184bc:	2301      	movs	r3, #1
   184be:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   184c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   184c6:	4804      	ldr	r0, [pc, #16]	; (184d8 <nrfx_twi_init+0xb4>)
   184c8:	e7fb      	b.n	184c2 <nrfx_twi_init+0x9e>
   184ca:	bf00      	nop
   184cc:	20002884 	.word	0x20002884
   184d0:	50000300 	.word	0x50000300
   184d4:	0bad0000 	.word	0x0bad0000
   184d8:	0bad0005 	.word	0x0bad0005

000184dc <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   184dc:	6802      	ldr	r2, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   184de:	7903      	ldrb	r3, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   184e0:	2105      	movs	r1, #5
   184e2:	f8c2 1500 	str.w	r1, [r2, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   184e6:	4a04      	ldr	r2, [pc, #16]	; (184f8 <nrfx_twi_enable+0x1c>)
   184e8:	213c      	movs	r1, #60	; 0x3c
   184ea:	fb01 2303 	mla	r3, r1, r3, r2
   184ee:	2202      	movs	r2, #2
   184f0:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   184f4:	4770      	bx	lr
   184f6:	bf00      	nop
   184f8:	20002884 	.word	0x20002884

000184fc <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   184fc:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   184fe:	490a      	ldr	r1, [pc, #40]	; (18528 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18500:	7902      	ldrb	r2, [r0, #4]
   18502:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   18506:	f8d3 1200 	ldr.w	r1, [r3, #512]	; 0x200
   1850a:	f021 0103 	bic.w	r1, r1, #3
   1850e:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   18512:	2100      	movs	r1, #0
   18514:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   18518:	4b04      	ldr	r3, [pc, #16]	; (1852c <nrfx_twi_disable+0x30>)
   1851a:	213c      	movs	r1, #60	; 0x3c
   1851c:	fb01 3302 	mla	r3, r1, r2, r3
   18520:	2201      	movs	r2, #1
   18522:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   18526:	4770      	bx	lr
   18528:	00044286 	.word	0x00044286
   1852c:	20002884 	.word	0x20002884

00018530 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   18530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   18534:	4e32      	ldr	r6, [pc, #200]	; (18600 <nrfx_twi_xfer+0xd0>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   18536:	f890 8004 	ldrb.w	r8, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1853a:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1853e:	233c      	movs	r3, #60	; 0x3c
   18540:	fb03 6308 	mla	r3, r3, r8, r6
{
   18544:	460c      	mov	r4, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   18546:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1854a:	2b01      	cmp	r3, #1
{
   1854c:	4617      	mov	r7, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1854e:	d104      	bne.n	1855a <nrfx_twi_xfer+0x2a>
   18550:	780b      	ldrb	r3, [r1, #0]
   18552:	2b01      	cmp	r3, #1
   18554:	d106      	bne.n	18564 <nrfx_twi_xfer+0x34>
        return NRFX_ERROR_INVALID_STATE;
   18556:	482b      	ldr	r0, [pc, #172]	; (18604 <nrfx_twi_xfer+0xd4>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   18558:	e011      	b.n	1857e <nrfx_twi_xfer+0x4e>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1855a:	2b02      	cmp	r3, #2
   1855c:	d102      	bne.n	18564 <nrfx_twi_xfer+0x34>
   1855e:	780b      	ldrb	r3, [r1, #0]
   18560:	2b01      	cmp	r3, #1
   18562:	d1f8      	bne.n	18556 <nrfx_twi_xfer+0x26>
    if (p_cb->busy)
   18564:	253c      	movs	r5, #60	; 0x3c
    p_reg->INTENCLR = mask;
   18566:	4b28      	ldr	r3, [pc, #160]	; (18608 <nrfx_twi_xfer+0xd8>)
   18568:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1856c:	fb05 6508 	mla	r5, r5, r8, r6
   18570:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18574:	b12b      	cbz	r3, 18582 <nrfx_twi_xfer+0x52>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   18576:	68ab      	ldr	r3, [r5, #8]
        return err_code;
   18578:	4824      	ldr	r0, [pc, #144]	; (1860c <nrfx_twi_xfer+0xdc>)
    p_reg->INTENSET = mask;
   1857a:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1857e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   18582:	f087 0304 	eor.w	r3, r7, #4
   18586:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1858a:	f885 3030 	strb.w	r3, [r5, #48]	; 0x30
    p_cb->flags       = flags;
   1858e:	622f      	str	r7, [r5, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   18590:	46a6      	mov	lr, r4
   18592:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
   18596:	f105 0c0c 	add.w	ip, r5, #12
   1859a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1859e:	f8de 3000 	ldr.w	r3, [lr]
   185a2:	f8cc 3000 	str.w	r3, [ip]
    p_cb->curr_length = p_xfer_desc->primary_length;
   185a6:	6863      	ldr	r3, [r4, #4]
   185a8:	62ab      	str	r3, [r5, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   185aa:	68e3      	ldr	r3, [r4, #12]
   185ac:	626b      	str	r3, [r5, #36]	; 0x24
    p_reg->ADDRESS = address;
   185ae:	7863      	ldrb	r3, [r4, #1]
   185b0:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   185b4:	7823      	ldrb	r3, [r4, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   185b6:	ebc8 1a08 	rsb	sl, r8, r8, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   185ba:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   185bc:	eb06 0a8a 	add.w	sl, r6, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   185c0:	d019      	beq.n	185f6 <nrfx_twi_xfer+0xc6>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   185c2:	b9b3      	cbnz	r3, 185f2 <nrfx_twi_xfer+0xc2>
   185c4:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   185c8:	233c      	movs	r3, #60	; 0x3c
   185ca:	fb03 6308 	mla	r3, r3, r8, r6
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   185ce:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   185d0:	f883 702c 	strb.w	r7, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   185d4:	4648      	mov	r0, r9
   185d6:	f7ff feb9 	bl	1834c <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   185da:	233c      	movs	r3, #60	; 0x3c
   185dc:	fb03 f808 	mul.w	r8, r3, r8
   185e0:	eb06 0208 	add.w	r2, r6, r8
   185e4:	f856 3008 	ldr.w	r3, [r6, r8]
   185e8:	2b00      	cmp	r3, #0
   185ea:	d1c8      	bne.n	1857e <nrfx_twi_xfer+0x4e>
        p_cb->busy = false;
   185ec:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   185f0:	e7c5      	b.n	1857e <nrfx_twi_xfer+0x4e>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   185f2:	2701      	movs	r7, #1
   185f4:	e7e8      	b.n	185c8 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   185f6:	4651      	mov	r1, sl
   185f8:	4648      	mov	r0, r9
   185fa:	f7ff fe33 	bl	18264 <twi_rx_start_transfer>
   185fe:	e7ec      	b.n	185da <nrfx_twi_xfer+0xaa>
   18600:	20002884 	.word	0x20002884
   18604:	0bad0005 	.word	0x0bad0005
   18608:	00044286 	.word	0x00044286
   1860c:	0bad000b 	.word	0x0bad000b

00018610 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   18610:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   18612:	4c29      	ldr	r4, [pc, #164]	; (186b8 <nrfx_twi_0_irq_handler+0xa8>)
   18614:	4829      	ldr	r0, [pc, #164]	; (186bc <nrfx_twi_0_irq_handler+0xac>)
{
   18616:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   18618:	4621      	mov	r1, r4
   1861a:	f006 f965 	bl	1e8e8 <twi_transfer>
   1861e:	46a4      	mov	ip, r4
   18620:	b9d8      	cbnz	r0, 1865a <nrfx_twi_0_irq_handler+0x4a>
    if (!p_cb->error &&
   18622:	f894 602f 	ldrb.w	r6, [r4, #47]	; 0x2f
   18626:	6a27      	ldr	r7, [r4, #32]
   18628:	b9e6      	cbnz	r6, 18664 <nrfx_twi_0_irq_handler+0x54>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1862a:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   1862c:	1e9a      	subs	r2, r3, #2
   1862e:	2a01      	cmp	r2, #1
   18630:	d818      	bhi.n	18664 <nrfx_twi_0_irq_handler+0x54>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   18632:	6a61      	ldr	r1, [r4, #36]	; 0x24
   18634:	69a2      	ldr	r2, [r4, #24]
   18636:	4291      	cmp	r1, r2
   18638:	d114      	bne.n	18664 <nrfx_twi_0_irq_handler+0x54>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1863a:	69e2      	ldr	r2, [r4, #28]
   1863c:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1863e:	f3c7 1740 	ubfx	r7, r7, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   18642:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   18644:	481d      	ldr	r0, [pc, #116]	; (186bc <nrfx_twi_0_irq_handler+0xac>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   18646:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   18648:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1864a:	f884 702c 	strb.w	r7, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1864e:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   18652:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   18654:	d103      	bne.n	1865e <nrfx_twi_0_irq_handler+0x4e>
            (void)twi_tx_start_transfer(p_twi, p_cb);
   18656:	f7ff fe79 	bl	1834c <twi_tx_start_transfer>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1865a:	b007      	add	sp, #28
   1865c:	bdf0      	pop	{r4, r5, r6, r7, pc}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1865e:	f7ff fe01 	bl	18264 <twi_rx_start_transfer>
   18662:	e7fa      	b.n	1865a <nrfx_twi_0_irq_handler+0x4a>
        event.xfer_desc = p_cb->xfer_desc;
   18664:	4d16      	ldr	r5, [pc, #88]	; (186c0 <nrfx_twi_0_irq_handler+0xb0>)
   18666:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   18668:	ac01      	add	r4, sp, #4
   1866a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1866c:	682b      	ldr	r3, [r5, #0]
   1866e:	6023      	str	r3, [r4, #0]
        if (p_cb->error)
   18670:	b1f6      	cbz	r6, 186b0 <nrfx_twi_0_irq_handler+0xa0>
    uint32_t error_source = p_reg->ERRORSRC;
   18672:	4a12      	ldr	r2, [pc, #72]	; (186bc <nrfx_twi_0_irq_handler+0xac>)
   18674:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   18678:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1867c:	0798      	lsls	r0, r3, #30
   1867e:	d50e      	bpl.n	1869e <nrfx_twi_0_irq_handler+0x8e>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   18680:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   18682:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   18686:	2300      	movs	r3, #0
   18688:	f88c 3030 	strb.w	r3, [ip, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1868c:	077b      	lsls	r3, r7, #29
   1868e:	d501      	bpl.n	18694 <nrfx_twi_0_irq_handler+0x84>
   18690:	2e00      	cmp	r6, #0
   18692:	d0e2      	beq.n	1865a <nrfx_twi_0_irq_handler+0x4a>
            p_cb->handler(&event, p_cb->p_context);
   18694:	e9dc 3100 	ldrd	r3, r1, [ip]
   18698:	4668      	mov	r0, sp
   1869a:	4798      	blx	r3
}
   1869c:	e7dd      	b.n	1865a <nrfx_twi_0_irq_handler+0x4a>
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1869e:	0759      	lsls	r1, r3, #29
   186a0:	d501      	bpl.n	186a6 <nrfx_twi_0_irq_handler+0x96>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   186a2:	2302      	movs	r3, #2
   186a4:	e7ed      	b.n	18682 <nrfx_twi_0_irq_handler+0x72>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   186a6:	07da      	lsls	r2, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   186a8:	bf4c      	ite	mi
   186aa:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   186ac:	2304      	movpl	r3, #4
   186ae:	e7e8      	b.n	18682 <nrfx_twi_0_irq_handler+0x72>
            event.type = NRFX_TWI_EVT_DONE;
   186b0:	f88d 6000 	strb.w	r6, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   186b4:	e7e7      	b.n	18686 <nrfx_twi_0_irq_handler+0x76>
   186b6:	bf00      	nop
   186b8:	20002884 	.word	0x20002884
   186bc:	40003000 	.word	0x40003000
   186c0:	20002890 	.word	0x20002890

000186c4 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   186c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   186c6:	4b10      	ldr	r3, [pc, #64]	; (18708 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   186c8:	4f10      	ldr	r7, [pc, #64]	; (1870c <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   186ca:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   186ce:	3001      	adds	r0, #1
   186d0:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   186d4:	42ae      	cmp	r6, r5
   186d6:	d800      	bhi.n	186da <z_sys_init_run_level+0x16>
		}
	}
}
   186d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   186da:	e9d5 3400 	ldrd	r3, r4, [r5]
   186de:	4620      	mov	r0, r4
   186e0:	4798      	blx	r3
   186e2:	b170      	cbz	r0, 18702 <z_sys_init_run_level+0x3e>
   186e4:	b16c      	cbz	r4, 18702 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   186e6:	1be4      	subs	r4, r4, r7
   186e8:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   186ea:	0961      	lsrs	r1, r4, #5
   186ec:	4a08      	ldr	r2, [pc, #32]	; (18710 <z_sys_init_run_level+0x4c>)
   186ee:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   186f2:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   186f6:	2301      	movs	r3, #1
   186f8:	fa03 f404 	lsl.w	r4, r3, r4
   186fc:	4304      	orrs	r4, r0
   186fe:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   18702:	3508      	adds	r5, #8
   18704:	e7e6      	b.n	186d4 <z_sys_init_run_level+0x10>
   18706:	bf00      	nop
   18708:	00020940 	.word	0x00020940
   1870c:	200009f0 	.word	0x200009f0
   18710:	20000a70 	.word	0x20000a70

00018714 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   18714:	4b08      	ldr	r3, [pc, #32]	; (18738 <z_device_ready+0x24>)
   18716:	1ac0      	subs	r0, r0, r3
   18718:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1871a:	4b08      	ldr	r3, [pc, #32]	; (1873c <z_device_ready+0x28>)
   1871c:	0942      	lsrs	r2, r0, #5
   1871e:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   18722:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   18726:	2301      	movs	r3, #1
   18728:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1872c:	4210      	tst	r0, r2
}
   1872e:	bf0c      	ite	eq
   18730:	4618      	moveq	r0, r3
   18732:	2000      	movne	r0, #0
   18734:	4770      	bx	lr
   18736:	bf00      	nop
   18738:	200009f0 	.word	0x200009f0
   1873c:	20000a70 	.word	0x20000a70

00018740 <z_impl_device_get_binding>:
	for (dev = __device_start; dev != __device_end; dev++) {
   18740:	4911      	ldr	r1, [pc, #68]	; (18788 <z_impl_device_get_binding+0x48>)
{
   18742:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   18744:	4c11      	ldr	r4, [pc, #68]	; (1878c <z_impl_device_get_binding+0x4c>)
{
   18746:	4605      	mov	r5, r0
   18748:	460e      	mov	r6, r1
	for (dev = __device_start; dev != __device_end; dev++) {
   1874a:	428c      	cmp	r4, r1
   1874c:	d104      	bne.n	18758 <z_impl_device_get_binding+0x18>
	for (dev = __device_start; dev != __device_end; dev++) {
   1874e:	4c0f      	ldr	r4, [pc, #60]	; (1878c <z_impl_device_get_binding+0x4c>)
   18750:	42b4      	cmp	r4, r6
   18752:	d10a      	bne.n	1876a <z_impl_device_get_binding+0x2a>
	return NULL;
   18754:	2400      	movs	r4, #0
   18756:	e014      	b.n	18782 <z_impl_device_get_binding+0x42>
		if (z_device_ready(dev) && (dev->name == name)) {
   18758:	4620      	mov	r0, r4
   1875a:	f7ff ffdb 	bl	18714 <z_device_ready>
   1875e:	b110      	cbz	r0, 18766 <z_impl_device_get_binding+0x26>
   18760:	6823      	ldr	r3, [r4, #0]
   18762:	42ab      	cmp	r3, r5
   18764:	d00d      	beq.n	18782 <z_impl_device_get_binding+0x42>
	for (dev = __device_start; dev != __device_end; dev++) {
   18766:	3410      	adds	r4, #16
   18768:	e7ef      	b.n	1874a <z_impl_device_get_binding+0xa>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1876a:	4620      	mov	r0, r4
   1876c:	f7ff ffd2 	bl	18714 <z_device_ready>
   18770:	b908      	cbnz	r0, 18776 <z_impl_device_get_binding+0x36>
	for (dev = __device_start; dev != __device_end; dev++) {
   18772:	3410      	adds	r4, #16
   18774:	e7ec      	b.n	18750 <z_impl_device_get_binding+0x10>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   18776:	6821      	ldr	r1, [r4, #0]
   18778:	4628      	mov	r0, r5
   1877a:	f003 f92b 	bl	1b9d4 <strcmp>
   1877e:	2800      	cmp	r0, #0
   18780:	d1f7      	bne.n	18772 <z_impl_device_get_binding+0x32>
}
   18782:	4620      	mov	r0, r4
   18784:	bd70      	pop	{r4, r5, r6, pc}
   18786:	bf00      	nop
   18788:	20000a70 	.word	0x20000a70
   1878c:	200009f0 	.word	0x200009f0

00018790 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   18790:	4b01      	ldr	r3, [pc, #4]	; (18798 <z_impl_z_errno+0x8>)
   18792:	6898      	ldr	r0, [r3, #8]
}
   18794:	3064      	adds	r0, #100	; 0x64
   18796:	4770      	bx	lr
   18798:	200028c0 	.word	0x200028c0

0001879c <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1879c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	_kernel.idle = ticks;
   1879e:	4e1c      	ldr	r6, [pc, #112]	; (18810 <idle+0x74>)
{
   187a0:	4605      	mov	r5, r0
		 */
		int key = arch_irq_lock();
		struct k_thread *to_abort = cpu->pending_abort;

		if (to_abort) {
			cpu->pending_abort = NULL;
   187a2:	2700      	movs	r7, #0
	__asm__ volatile(
   187a4:	f04f 0220 	mov.w	r2, #32
   187a8:	f3ef 8311 	mrs	r3, BASEPRI
   187ac:	f382 8811 	msr	BASEPRI, r2
   187b0:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   187b4:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   187b6:	b188      	cbz	r0, 187dc <idle+0x40>
			cpu->pending_abort = NULL;
   187b8:	612f      	str	r7, [r5, #16]
	__asm__ volatile(
   187ba:	f383 8811 	msr	BASEPRI, r3
   187be:	f3bf 8f6f 	isb	sy
			 * is continued below.
			 */
			LOG_DBG("idle %p aborting thread %p",
				_current, to_abort);

			z_thread_single_abort(to_abort);
   187c2:	f000 fc25 	bl	19010 <z_thread_single_abort>
	__asm__ volatile(
   187c6:	f04f 0320 	mov.w	r3, #32
   187ca:	f3ef 8011 	mrs	r0, BASEPRI
   187ce:	f383 8811 	msr	BASEPRI, r3
   187d2:	f3bf 8f6f 	isb	sy
   187d6:	f006 faa8 	bl	1ed2a <z_reschedule_irqlock>
			 * in order to abort the thread, and we now need to
			 * figure out what to do next, it's not necessarily
			 * the case that there are no other runnable threads.
			 */
			z_reschedule_unlocked();
			continue;
   187da:	e7e3      	b.n	187a4 <idle+0x8>
	__asm__ volatile(
   187dc:	f383 8811 	msr	BASEPRI, r3
   187e0:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   187e4:	f04f 0220 	mov.w	r2, #32
   187e8:	f3ef 8311 	mrs	r3, BASEPRI
   187ec:	f382 8811 	msr	BASEPRI, r2
   187f0:	f3bf 8f6f 	isb	sy
	int32_t ticks = z_get_next_timeout_expiry();
   187f4:	f006 fc15 	bl	1f022 <z_get_next_timeout_expiry>
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   187f8:	2101      	movs	r1, #1
   187fa:	2802      	cmp	r0, #2
	int32_t ticks = z_get_next_timeout_expiry();
   187fc:	4604      	mov	r4, r0
	z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   187fe:	bfd8      	it	le
   18800:	4608      	movle	r0, r1
   18802:	f006 fc1e 	bl	1f042 <z_set_timeout_expiry>
	_kernel.idle = ticks;
   18806:	6274      	str	r4, [r6, #36]	; 0x24
	arch_cpu_idle();
   18808:	f7ec feb2 	bl	5570 <arch_cpu_idle>
}
   1880c:	e7ca      	b.n	187a4 <idle+0x8>
   1880e:	bf00      	nop
   18810:	200028c0 	.word	0x200028c0

00018814 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   18814:	4802      	ldr	r0, [pc, #8]	; (18820 <z_bss_zero+0xc>)
   18816:	4a03      	ldr	r2, [pc, #12]	; (18824 <z_bss_zero+0x10>)
   18818:	2100      	movs	r1, #0
   1881a:	1a12      	subs	r2, r2, r0
   1881c:	f003 b930 	b.w	1ba80 <memset>
   18820:	20000c70 	.word	0x20000c70
   18824:	200029d8 	.word	0x200029d8

00018828 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   18828:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   1882a:	4806      	ldr	r0, [pc, #24]	; (18844 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   1882c:	4a06      	ldr	r2, [pc, #24]	; (18848 <z_data_copy+0x20>)
   1882e:	4907      	ldr	r1, [pc, #28]	; (1884c <z_data_copy+0x24>)
   18830:	1a12      	subs	r2, r2, r0
   18832:	f003 f8fa 	bl	1ba2a <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   18836:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   1883a:	4a05      	ldr	r2, [pc, #20]	; (18850 <z_data_copy+0x28>)
   1883c:	4905      	ldr	r1, [pc, #20]	; (18854 <z_data_copy+0x2c>)
   1883e:	4806      	ldr	r0, [pc, #24]	; (18858 <z_data_copy+0x30>)
   18840:	f003 b8f3 	b.w	1ba2a <memcpy>
   18844:	20000000 	.word	0x20000000
   18848:	20000c6c 	.word	0x20000c6c
   1884c:	00020e18 	.word	0x00020e18
   18850:	00000000 	.word	0x00000000
   18854:	00020e18 	.word	0x00020e18
   18858:	20000000 	.word	0x20000000

0001885c <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1885c:	b508      	push	{r3, lr}
	static const unsigned int boot_delay = CONFIG_BOOT_DELAY;
#else
	static const unsigned int boot_delay;
#endif

	z_sys_post_kernel = true;
   1885e:	4b09      	ldr	r3, [pc, #36]	; (18884 <bg_thread_main+0x28>)
   18860:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18862:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   18864:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   18866:	f7ff ff2d 	bl	186c4 <z_sys_init_run_level>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1886a:	2003      	movs	r0, #3
   1886c:	f7ff ff2a 	bl	186c4 <z_sys_init_run_level>

	z_init_static_threads();
   18870:	f000 fe52 	bl	19518 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   18874:	f7eb f826 	bl	38c4 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   18878:	4a03      	ldr	r2, [pc, #12]	; (18888 <bg_thread_main+0x2c>)
   1887a:	7b13      	ldrb	r3, [r2, #12]
   1887c:	f023 0301 	bic.w	r3, r3, #1
   18880:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   18882:	bd08      	pop	{r3, pc}
   18884:	200029d6 	.word	0x200029d6
   18888:	200012c8 	.word	0x200012c8

0001888c <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1888c:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   18890:	f8df 90f4 	ldr.w	r9, [pc, #244]	; 18988 <z_cstart+0xfc>
   18894:	b0a7      	sub	sp, #156	; 0x9c
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   18896:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1889a:	4d33      	ldr	r5, [pc, #204]	; (18968 <z_cstart+0xdc>)
	_kernel.ready_q.cache = &z_main_thread;
   1889c:	4e33      	ldr	r6, [pc, #204]	; (1896c <z_cstart+0xe0>)
   1889e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   188a0:	f8df a0e8 	ldr.w	sl, [pc, #232]	; 1898c <z_cstart+0x100>
	z_setup_new_thread(thread, stack,
   188a4:	4f32      	ldr	r7, [pc, #200]	; (18970 <z_cstart+0xe4>)
   188a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   188aa:	2400      	movs	r4, #0
   188ac:	616b      	str	r3, [r5, #20]
   188ae:	23e0      	movs	r3, #224	; 0xe0
   188b0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   188b4:	77ec      	strb	r4, [r5, #31]
   188b6:	762c      	strb	r4, [r5, #24]
   188b8:	766c      	strb	r4, [r5, #25]
   188ba:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   188bc:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   188be:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   188c2:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   188c4:	f7ec ff94 	bl	57f0 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   188c8:	f7ec fe4c 	bl	5564 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   188cc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   188d0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   188d2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   188d4:	4d27      	ldr	r5, [pc, #156]	; (18974 <z_cstart+0xe8>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   188d6:	f240 1301 	movw	r3, #257	; 0x101
   188da:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   188de:	ab06      	add	r3, sp, #24
   188e0:	60ab      	str	r3, [r5, #8]

	z_dummy_thread_init(&dummy_thread);
#endif

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   188e2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   188e4:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
   188e8:	f7ff feec 	bl	186c4 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   188ec:	2001      	movs	r0, #1
   188ee:	f7ff fee9 	bl	186c4 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   188f2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   188f6:	f000 fccd 	bl	19294 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   188fa:	4b1f      	ldr	r3, [pc, #124]	; (18978 <z_cstart+0xec>)
	_kernel.ready_q.cache = &z_main_thread;
   188fc:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   188fe:	491f      	ldr	r1, [pc, #124]	; (1897c <z_cstart+0xf0>)
   18900:	9305      	str	r3, [sp, #20]
   18902:	f44f 6280 	mov.w	r2, #1024	; 0x400
   18906:	4653      	mov	r3, sl
   18908:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1890c:	e9cd 4401 	strd	r4, r4, [sp, #4]
   18910:	9400      	str	r4, [sp, #0]
   18912:	4630      	mov	r0, r6
   18914:	f000 fda4 	bl	19460 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18918:	7b73      	ldrb	r3, [r6, #13]
   1891a:	4680      	mov	r8, r0
   1891c:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   18920:	4630      	mov	r0, r6
   18922:	7373      	strb	r3, [r6, #13]
   18924:	f006 fa3f 	bl	1eda6 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   18928:	230f      	movs	r3, #15
   1892a:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1892e:	4914      	ldr	r1, [pc, #80]	; (18980 <z_cstart+0xf4>)
   18930:	4b14      	ldr	r3, [pc, #80]	; (18984 <z_cstart+0xf8>)
   18932:	f44f 72a0 	mov.w	r2, #320	; 0x140
   18936:	e9cd b404 	strd	fp, r4, [sp, #16]
   1893a:	e9cd 5400 	strd	r5, r4, [sp]
   1893e:	4638      	mov	r0, r7
   18940:	f000 fd8e 	bl	19460 <z_setup_new_thread>
   18944:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   18946:	60ef      	str	r7, [r5, #12]
   18948:	f023 0304 	bic.w	r3, r3, #4
   1894c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1894e:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   18952:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   18956:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   18958:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1895c:	4652      	mov	r2, sl
   1895e:	4641      	mov	r1, r8
   18960:	4630      	mov	r0, r6
   18962:	f7ec fde7 	bl	5534 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   18966:	bf00      	nop
   18968:	e000ed00 	.word	0xe000ed00
   1896c:	200012c8 	.word	0x200012c8
   18970:	20001248 	.word	0x20001248
   18974:	200028c0 	.word	0x200028c0
   18978:	00020e00 	.word	0x00020e00
   1897c:	20003ce8 	.word	0x20003ce8
   18980:	200040e8 	.word	0x200040e8
   18984:	0001879d 	.word	0x0001879d
   18988:	20004a28 	.word	0x20004a28
   1898c:	0001885d 	.word	0x0001885d

00018990 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   18990:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   18992:	4c06      	ldr	r4, [pc, #24]	; (189ac <statics_init+0x1c>)
   18994:	4d06      	ldr	r5, [pc, #24]	; (189b0 <statics_init+0x20>)
   18996:	42ac      	cmp	r4, r5
   18998:	d301      	bcc.n	1899e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1899a:	2000      	movs	r0, #0
   1899c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1899e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   189a2:	4620      	mov	r0, r4
   189a4:	f006 f855 	bl	1ea52 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   189a8:	3414      	adds	r4, #20
   189aa:	e7f4      	b.n	18996 <statics_init+0x6>
   189ac:	20000ac8 	.word	0x20000ac8
   189b0:	20000ac8 	.word	0x20000ac8

000189b4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   189b4:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   189b6:	4b0e      	ldr	r3, [pc, #56]	; (189f0 <init_mem_slab_module+0x3c>)
   189b8:	4c0e      	ldr	r4, [pc, #56]	; (189f4 <init_mem_slab_module+0x40>)
   189ba:	42a3      	cmp	r3, r4
   189bc:	d301      	bcc.n	189c2 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   189be:	2000      	movs	r0, #0
	return rc;
}
   189c0:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   189c2:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   189c6:	ea41 0200 	orr.w	r2, r1, r0
   189ca:	f012 0203 	ands.w	r2, r2, #3
   189ce:	d10b      	bne.n	189e8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   189d0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   189d2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   189d4:	42aa      	cmp	r2, r5
   189d6:	d101      	bne.n	189dc <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   189d8:	331c      	adds	r3, #28
   189da:	e7ee      	b.n	189ba <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   189dc:	695e      	ldr	r6, [r3, #20]
   189de:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   189e0:	3201      	adds	r2, #1
		slab->free_list = p;
   189e2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   189e4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   189e6:	e7f5      	b.n	189d4 <init_mem_slab_module+0x20>
		return -EINVAL;
   189e8:	f06f 0015 	mvn.w	r0, #21
	return rc;
   189ec:	e7e8      	b.n	189c0 <init_mem_slab_module+0xc>
   189ee:	bf00      	nop
   189f0:	20000a74 	.word	0x20000a74
   189f4:	20000ac8 	.word	0x20000ac8

000189f8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   189f8:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
   189fa:	460c      	mov	r4, r1
   189fc:	4616      	mov	r6, r2
   189fe:	461f      	mov	r7, r3
   18a00:	f04f 0320 	mov.w	r3, #32
   18a04:	f3ef 8111 	mrs	r1, BASEPRI
   18a08:	f383 8811 	msr	BASEPRI, r3
   18a0c:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   18a10:	6943      	ldr	r3, [r0, #20]
   18a12:	b15b      	cbz	r3, 18a2c <k_mem_slab_alloc+0x34>
		/* take a free block */
		*mem = slab->free_list;
   18a14:	6023      	str	r3, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   18a16:	681b      	ldr	r3, [r3, #0]
   18a18:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   18a1a:	6983      	ldr	r3, [r0, #24]
   18a1c:	3301      	adds	r3, #1
   18a1e:	6183      	str	r3, [r0, #24]
		result = 0;
   18a20:	2000      	movs	r0, #0
	__asm__ volatile(
   18a22:	f381 8811 	msr	BASEPRI, r1
   18a26:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   18a2a:	e011      	b.n	18a50 <k_mem_slab_alloc+0x58>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18a2c:	ea56 0207 	orrs.w	r2, r6, r7
   18a30:	d103      	bne.n	18a3a <k_mem_slab_alloc+0x42>
		*mem = NULL;
   18a32:	6023      	str	r3, [r4, #0]
		result = -ENOMEM;
   18a34:	f06f 000b 	mvn.w	r0, #11
   18a38:	e7f3      	b.n	18a22 <k_mem_slab_alloc+0x2a>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   18a3a:	4602      	mov	r2, r0
   18a3c:	e9cd 6700 	strd	r6, r7, [sp]
   18a40:	4804      	ldr	r0, [pc, #16]	; (18a54 <k_mem_slab_alloc+0x5c>)
   18a42:	f000 fba5 	bl	19190 <z_pend_curr>
		if (result == 0) {
   18a46:	b918      	cbnz	r0, 18a50 <k_mem_slab_alloc+0x58>
			*mem = _current->base.swap_data;
   18a48:	4b03      	ldr	r3, [pc, #12]	; (18a58 <k_mem_slab_alloc+0x60>)
   18a4a:	689b      	ldr	r3, [r3, #8]
   18a4c:	695b      	ldr	r3, [r3, #20]
   18a4e:	6023      	str	r3, [r4, #0]
}
   18a50:	b002      	add	sp, #8
   18a52:	bdd0      	pop	{r4, r6, r7, pc}
   18a54:	200029d7 	.word	0x200029d7
   18a58:	200028c0 	.word	0x200028c0

00018a5c <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   18a5c:	b570      	push	{r4, r5, r6, lr}
   18a5e:	4604      	mov	r4, r0
   18a60:	460d      	mov	r5, r1
	__asm__ volatile(
   18a62:	f04f 0320 	mov.w	r3, #32
   18a66:	f3ef 8611 	mrs	r6, BASEPRI
   18a6a:	f383 8811 	msr	BASEPRI, r3
   18a6e:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   18a72:	f006 f9f0 	bl	1ee56 <z_unpend_first_thread>

	if (pending_thread != NULL) {
   18a76:	b158      	cbz	r0, 18a90 <k_mem_slab_free+0x34>
		z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   18a78:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   18a7a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   18a7c:	2100      	movs	r1, #0
   18a7e:	67c1      	str	r1, [r0, #124]	; 0x7c
		z_ready_thread(pending_thread);
   18a80:	f006 f991 	bl	1eda6 <z_ready_thread>
		z_reschedule(&lock, key);
   18a84:	4631      	mov	r1, r6
   18a86:	4809      	ldr	r0, [pc, #36]	; (18aac <k_mem_slab_free+0x50>)
		**(char ***)mem = slab->free_list;
		slab->free_list = *(char **)mem;
		slab->num_used--;
		k_spin_unlock(&lock, key);
	}
}
   18a88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule(&lock, key);
   18a8c:	f000 b944 	b.w	18d18 <z_reschedule>
		**(char ***)mem = slab->free_list;
   18a90:	682b      	ldr	r3, [r5, #0]
   18a92:	6962      	ldr	r2, [r4, #20]
   18a94:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   18a96:	682b      	ldr	r3, [r5, #0]
   18a98:	6163      	str	r3, [r4, #20]
		slab->num_used--;
   18a9a:	69a3      	ldr	r3, [r4, #24]
   18a9c:	3b01      	subs	r3, #1
   18a9e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   18aa0:	f386 8811 	msr	BASEPRI, r6
   18aa4:	f3bf 8f6f 	isb	sy
}
   18aa8:	bd70      	pop	{r4, r5, r6, pc}
   18aaa:	bf00      	nop
   18aac:	200029d7 	.word	0x200029d7

00018ab0 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   18ab0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   18ab4:	4604      	mov	r4, r0
   18ab6:	4616      	mov	r6, r2
   18ab8:	461f      	mov	r7, r3
	__asm__ volatile(
   18aba:	f04f 0320 	mov.w	r3, #32
   18abe:	f3ef 8811 	mrs	r8, BASEPRI
   18ac2:	f383 8811 	msr	BASEPRI, r3
   18ac6:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   18aca:	68c3      	ldr	r3, [r0, #12]
   18acc:	4a32      	ldr	r2, [pc, #200]	; (18b98 <z_impl_k_mutex_lock+0xe8>)
   18ace:	b16b      	cbz	r3, 18aec <z_impl_k_mutex_lock+0x3c>
   18ad0:	6880      	ldr	r0, [r0, #8]
   18ad2:	6891      	ldr	r1, [r2, #8]
   18ad4:	4288      	cmp	r0, r1
   18ad6:	d019      	beq.n	18b0c <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   18ad8:	ea56 0307 	orrs.w	r3, r6, r7
   18adc:	d118      	bne.n	18b10 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   18ade:	f388 8811 	msr	BASEPRI, r8
   18ae2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   18ae6:	f06f 000f 	mvn.w	r0, #15
   18aea:	e00c      	b.n	18b06 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   18aec:	6891      	ldr	r1, [r2, #8]
   18aee:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   18af2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   18af4:	3301      	adds	r3, #1
   18af6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   18af8:	6893      	ldr	r3, [r2, #8]
   18afa:	60a3      	str	r3, [r4, #8]
   18afc:	f388 8811 	msr	BASEPRI, r8
   18b00:	f3bf 8f6f 	isb	sy
		return 0;
   18b04:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   18b06:	b002      	add	sp, #8
   18b08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   18b0c:	6921      	ldr	r1, [r4, #16]
   18b0e:	e7f0      	b.n	18af2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   18b10:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18b14:	f991 100e 	ldrsb.w	r1, [r1, #14]
   18b18:	4299      	cmp	r1, r3
   18b1a:	bfa8      	it	ge
   18b1c:	4619      	movge	r1, r3
   18b1e:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   18b22:	4299      	cmp	r1, r3
   18b24:	da2c      	bge.n	18b80 <z_impl_k_mutex_lock+0xd0>
		return z_set_prio(mutex->owner, new_prio);
   18b26:	f000 fb75 	bl	19214 <z_set_prio>
   18b2a:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   18b2c:	e9cd 6700 	strd	r6, r7, [sp]
   18b30:	481a      	ldr	r0, [pc, #104]	; (18b9c <z_impl_k_mutex_lock+0xec>)
   18b32:	4622      	mov	r2, r4
   18b34:	4641      	mov	r1, r8
   18b36:	f000 fb2b 	bl	19190 <z_pend_curr>
	if (got_mutex == 0) {
   18b3a:	2800      	cmp	r0, #0
   18b3c:	d0e3      	beq.n	18b06 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   18b3e:	f04f 0320 	mov.w	r3, #32
   18b42:	f3ef 8611 	mrs	r6, BASEPRI
   18b46:	f383 8811 	msr	BASEPRI, r3
   18b4a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   18b4e:	6823      	ldr	r3, [r4, #0]
   18b50:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18b52:	42a3      	cmp	r3, r4
   18b54:	d007      	beq.n	18b66 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   18b56:	b133      	cbz	r3, 18b66 <z_impl_k_mutex_lock+0xb6>
   18b58:	f993 300e 	ldrsb.w	r3, [r3, #14]
   18b5c:	4299      	cmp	r1, r3
   18b5e:	bfa8      	it	ge
   18b60:	4619      	movge	r1, r3
   18b62:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18b66:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
   18b68:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18b6c:	4299      	cmp	r1, r3
   18b6e:	d109      	bne.n	18b84 <z_impl_k_mutex_lock+0xd4>
	if (resched) {
   18b70:	b16d      	cbz	r5, 18b8e <z_impl_k_mutex_lock+0xde>
		z_reschedule(&lock, key);
   18b72:	480a      	ldr	r0, [pc, #40]	; (18b9c <z_impl_k_mutex_lock+0xec>)
   18b74:	4631      	mov	r1, r6
   18b76:	f000 f8cf 	bl	18d18 <z_reschedule>
	return -EAGAIN;
   18b7a:	f06f 000a 	mvn.w	r0, #10
   18b7e:	e7c2      	b.n	18b06 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   18b80:	2500      	movs	r5, #0
   18b82:	e7d3      	b.n	18b2c <z_impl_k_mutex_lock+0x7c>
		return z_set_prio(mutex->owner, new_prio);
   18b84:	f000 fb46 	bl	19214 <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   18b88:	2800      	cmp	r0, #0
   18b8a:	d1f2      	bne.n	18b72 <z_impl_k_mutex_lock+0xc2>
   18b8c:	e7f0      	b.n	18b70 <z_impl_k_mutex_lock+0xc0>
	__asm__ volatile(
   18b8e:	f386 8811 	msr	BASEPRI, r6
   18b92:	f3bf 8f6f 	isb	sy
   18b96:	e7f0      	b.n	18b7a <z_impl_k_mutex_lock+0xca>
   18b98:	200028c0 	.word	0x200028c0
   18b9c:	200029d7 	.word	0x200029d7

00018ba0 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   18ba0:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   18ba2:	6883      	ldr	r3, [r0, #8]
{
   18ba4:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   18ba6:	2b00      	cmp	r3, #0
   18ba8:	d036      	beq.n	18c18 <z_impl_k_mutex_unlock+0x78>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   18baa:	4a1e      	ldr	r2, [pc, #120]	; (18c24 <z_impl_k_mutex_unlock+0x84>)
   18bac:	6892      	ldr	r2, [r2, #8]
   18bae:	4293      	cmp	r3, r2
   18bb0:	d135      	bne.n	18c1e <z_impl_k_mutex_unlock+0x7e>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   18bb2:	7bda      	ldrb	r2, [r3, #15]
   18bb4:	3a01      	subs	r2, #1
   18bb6:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   18bb8:	68c3      	ldr	r3, [r0, #12]
   18bba:	2b01      	cmp	r3, #1
   18bbc:	d005      	beq.n	18bca <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   18bbe:	3b01      	subs	r3, #1
   18bc0:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   18bc2:	f000 f90d 	bl	18de0 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   18bc6:	2000      	movs	r0, #0
}
   18bc8:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   18bca:	f04f 0320 	mov.w	r3, #32
   18bce:	f3ef 8511 	mrs	r5, BASEPRI
   18bd2:	f383 8811 	msr	BASEPRI, r3
   18bd6:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   18bda:	6901      	ldr	r1, [r0, #16]
   18bdc:	6880      	ldr	r0, [r0, #8]
	if (mutex->owner->base.prio != new_prio) {
   18bde:	f990 300e 	ldrsb.w	r3, [r0, #14]
   18be2:	4299      	cmp	r1, r3
   18be4:	d001      	beq.n	18bea <z_impl_k_mutex_unlock+0x4a>
		return z_set_prio(mutex->owner, new_prio);
   18be6:	f000 fb15 	bl	19214 <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   18bea:	4620      	mov	r0, r4
   18bec:	f006 f933 	bl	1ee56 <z_unpend_first_thread>
	mutex->owner = new_owner;
   18bf0:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   18bf2:	b158      	cbz	r0, 18c0c <z_impl_k_mutex_unlock+0x6c>
		mutex->owner_orig_prio = new_owner->base.prio;
   18bf4:	f990 200e 	ldrsb.w	r2, [r0, #14]
   18bf8:	6122      	str	r2, [r4, #16]
   18bfa:	2200      	movs	r2, #0
   18bfc:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
   18bfe:	f006 f8d2 	bl	1eda6 <z_ready_thread>
		z_reschedule(&lock, key);
   18c02:	4809      	ldr	r0, [pc, #36]	; (18c28 <z_impl_k_mutex_unlock+0x88>)
   18c04:	4629      	mov	r1, r5
   18c06:	f000 f887 	bl	18d18 <z_reschedule>
   18c0a:	e7da      	b.n	18bc2 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   18c0c:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   18c0e:	f385 8811 	msr	BASEPRI, r5
   18c12:	f3bf 8f6f 	isb	sy
   18c16:	e7d4      	b.n	18bc2 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   18c18:	f06f 0015 	mvn.w	r0, #21
   18c1c:	e7d4      	b.n	18bc8 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   18c1e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18c22:	e7d1      	b.n	18bc8 <z_impl_k_mutex_unlock+0x28>
   18c24:	200028c0 	.word	0x200028c0
   18c28:	200029d7 	.word	0x200029d7

00018c2c <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   18c2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   18c2e:	4616      	mov	r6, r2
   18c30:	461f      	mov	r7, r3
	__asm__ volatile(
   18c32:	f04f 0320 	mov.w	r3, #32
   18c36:	f3ef 8511 	mrs	r5, BASEPRI
   18c3a:	f383 8811 	msr	BASEPRI, r3
   18c3e:	f3bf 8f6f 	isb	sy
 *
 * @return a boolean, true if it's empty, false otherwise
 */
static inline bool sys_sflist_is_empty(sys_sflist_t *list);

Z_GENLIST_IS_EMPTY(sflist)
   18c42:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   18c44:	b19c      	cbz	r4, 18c6e <z_impl_k_queue_get+0x42>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18c46:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18c48:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   18c4a:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   18c4e:	4294      	cmp	r4, r2
	list->head = node;
   18c50:	6003      	str	r3, [r0, #0]
	list->tail = node;
   18c52:	bf08      	it	eq
   18c54:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   18c56:	2101      	movs	r1, #1
   18c58:	4620      	mov	r0, r4
   18c5a:	f005 ffdf 	bl	1ec1c <z_queue_node_peek>
   18c5e:	4604      	mov	r4, r0
	__asm__ volatile(
   18c60:	f385 8811 	msr	BASEPRI, r5
   18c64:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   18c68:	4620      	mov	r0, r4
   18c6a:	b003      	add	sp, #12
   18c6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   18c6e:	ea56 0307 	orrs.w	r3, r6, r7
   18c72:	d0f5      	beq.n	18c60 <z_impl_k_queue_get+0x34>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   18c74:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   18c78:	e9cd 6700 	strd	r6, r7, [sp]
   18c7c:	4629      	mov	r1, r5
   18c7e:	4610      	mov	r0, r2
   18c80:	f000 fa86 	bl	19190 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   18c84:	2800      	cmp	r0, #0
   18c86:	d1ef      	bne.n	18c68 <z_impl_k_queue_get+0x3c>
   18c88:	4b01      	ldr	r3, [pc, #4]	; (18c90 <z_impl_k_queue_get+0x64>)
   18c8a:	689b      	ldr	r3, [r3, #8]
   18c8c:	695c      	ldr	r4, [r3, #20]
   18c8e:	e7eb      	b.n	18c68 <z_impl_k_queue_get+0x3c>
   18c90:	200028c0 	.word	0x200028c0

00018c94 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   18c94:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   18c96:	4c08      	ldr	r4, [pc, #32]	; (18cb8 <z_reset_time_slice+0x24>)
   18c98:	6823      	ldr	r3, [r4, #0]
   18c9a:	b15b      	cbz	r3, 18cb4 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18c9c:	f7ec f9dc 	bl	5058 <z_clock_elapsed>
   18ca0:	4603      	mov	r3, r0
   18ca2:	6820      	ldr	r0, [r4, #0]
   18ca4:	4a05      	ldr	r2, [pc, #20]	; (18cbc <z_reset_time_slice+0x28>)
   18ca6:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   18ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   18cac:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   18cae:	2100      	movs	r1, #0
   18cb0:	f006 b9c7 	b.w	1f042 <z_set_timeout_expiry>
}
   18cb4:	bd10      	pop	{r4, pc}
   18cb6:	bf00      	nop
   18cb8:	200028fc 	.word	0x200028fc
   18cbc:	200028c0 	.word	0x200028c0

00018cc0 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   18cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18cc2:	4605      	mov	r5, r0
   18cc4:	460c      	mov	r4, r1
	__asm__ volatile(
   18cc6:	f04f 0320 	mov.w	r3, #32
   18cca:	f3ef 8611 	mrs	r6, BASEPRI
   18cce:	f383 8811 	msr	BASEPRI, r3
   18cd2:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   18cd6:	4b0d      	ldr	r3, [pc, #52]	; (18d0c <k_sched_time_slice_set+0x4c>)
   18cd8:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   18cda:	f44f 4700 	mov.w	r7, #32768	; 0x8000
   18cde:	f240 30e7 	movw	r0, #999	; 0x3e7
   18ce2:	2100      	movs	r1, #0
   18ce4:	615a      	str	r2, [r3, #20]
   18ce6:	fbe7 0105 	umlal	r0, r1, r7, r5
   18cea:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   18cee:	2300      	movs	r3, #0
   18cf0:	f7e7 fe24 	bl	93c <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   18cf4:	4b06      	ldr	r3, [pc, #24]	; (18d10 <k_sched_time_slice_set+0x50>)
   18cf6:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   18cf8:	4b06      	ldr	r3, [pc, #24]	; (18d14 <k_sched_time_slice_set+0x54>)
   18cfa:	601c      	str	r4, [r3, #0]
		z_reset_time_slice();
   18cfc:	f7ff ffca 	bl	18c94 <z_reset_time_slice>
	__asm__ volatile(
   18d00:	f386 8811 	msr	BASEPRI, r6
   18d04:	f3bf 8f6f 	isb	sy
	}
}
   18d08:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d0a:	bf00      	nop
   18d0c:	200028c0 	.word	0x200028c0
   18d10:	200028fc 	.word	0x200028fc
   18d14:	200028f8 	.word	0x200028f8

00018d18 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   18d18:	b949      	cbnz	r1, 18d2e <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   18d1a:	f3ef 8005 	mrs	r0, IPSR
   18d1e:	b930      	cbnz	r0, 18d2e <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   18d20:	4b05      	ldr	r3, [pc, #20]	; (18d38 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   18d22:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   18d24:	689b      	ldr	r3, [r3, #8]
   18d26:	429a      	cmp	r2, r3
   18d28:	d001      	beq.n	18d2e <z_reschedule+0x16>
	ret = arch_swap(key);
   18d2a:	f7ec bb41 	b.w	53b0 <arch_swap>
   18d2e:	f381 8811 	msr	BASEPRI, r1
   18d32:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   18d36:	4770      	bx	lr
   18d38:	200028c0 	.word	0x200028c0

00018d3c <k_sched_lock>:
	__asm__ volatile(
   18d3c:	f04f 0320 	mov.w	r3, #32
   18d40:	f3ef 8111 	mrs	r1, BASEPRI
   18d44:	f383 8811 	msr	BASEPRI, r3
   18d48:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   18d4c:	4b04      	ldr	r3, [pc, #16]	; (18d60 <k_sched_lock+0x24>)
   18d4e:	689a      	ldr	r2, [r3, #8]
   18d50:	7bd3      	ldrb	r3, [r2, #15]
   18d52:	3b01      	subs	r3, #1
   18d54:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   18d56:	f381 8811 	msr	BASEPRI, r1
   18d5a:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   18d5e:	4770      	bx	lr
   18d60:	200028c0 	.word	0x200028c0

00018d64 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   18d64:	4b09      	ldr	r3, [pc, #36]	; (18d8c <z_priq_dumb_remove+0x28>)
   18d66:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   18d6a:	4282      	cmp	r2, r0
   18d6c:	d105      	bne.n	18d7a <z_priq_dumb_remove+0x16>
   18d6e:	689b      	ldr	r3, [r3, #8]
   18d70:	428b      	cmp	r3, r1
   18d72:	d102      	bne.n	18d7a <z_priq_dumb_remove+0x16>
   18d74:	7b4b      	ldrb	r3, [r1, #13]
   18d76:	06db      	lsls	r3, r3, #27
   18d78:	d106      	bne.n	18d88 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   18d7a:	e9d1 3200 	ldrd	r3, r2, [r1]
   18d7e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   18d80:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   18d82:	2300      	movs	r3, #0
	node->prev = NULL;
   18d84:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   18d88:	4770      	bx	lr
   18d8a:	bf00      	nop
   18d8c:	200028c0 	.word	0x200028c0

00018d90 <update_cache>:
{
   18d90:	b538      	push	{r3, r4, r5, lr}
   18d92:	4c12      	ldr	r4, [pc, #72]	; (18ddc <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   18d94:	6923      	ldr	r3, [r4, #16]
   18d96:	68a2      	ldr	r2, [r4, #8]
{
   18d98:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   18d9a:	b10b      	cbz	r3, 18da0 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   18d9c:	68e5      	ldr	r5, [r4, #12]
   18d9e:	e00c      	b.n	18dba <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   18da0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   18da4:	f005 fff9 	bl	1ed9a <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   18da8:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   18daa:	4605      	mov	r5, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   18dac:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   18dae:	bf44      	itt	mi
   18db0:	f043 0308 	orrmi.w	r3, r3, #8
   18db4:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   18db6:	2d00      	cmp	r5, #0
   18db8:	d0f0      	beq.n	18d9c <update_cache+0xc>
	if (preempt_ok != 0) {
   18dba:	b949      	cbnz	r1, 18dd0 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   18dbc:	7b53      	ldrb	r3, [r2, #13]
   18dbe:	06db      	lsls	r3, r3, #27
   18dc0:	d106      	bne.n	18dd0 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   18dc2:	69ab      	ldr	r3, [r5, #24]
   18dc4:	b923      	cbnz	r3, 18dd0 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   18dc6:	89d3      	ldrh	r3, [r2, #14]
   18dc8:	2b7f      	cmp	r3, #127	; 0x7f
   18dca:	d901      	bls.n	18dd0 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   18dcc:	62a2      	str	r2, [r4, #40]	; 0x28
}
   18dce:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   18dd0:	4295      	cmp	r5, r2
   18dd2:	d001      	beq.n	18dd8 <update_cache+0x48>
			z_reset_time_slice();
   18dd4:	f7ff ff5e 	bl	18c94 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   18dd8:	62a5      	str	r5, [r4, #40]	; 0x28
}
   18dda:	e7f8      	b.n	18dce <update_cache+0x3e>
   18ddc:	200028c0 	.word	0x200028c0

00018de0 <k_sched_unlock>:
{
   18de0:	b510      	push	{r4, lr}
	__asm__ volatile(
   18de2:	f04f 0320 	mov.w	r3, #32
   18de6:	f3ef 8411 	mrs	r4, BASEPRI
   18dea:	f383 8811 	msr	BASEPRI, r3
   18dee:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   18df2:	4b08      	ldr	r3, [pc, #32]	; (18e14 <k_sched_unlock+0x34>)
   18df4:	689a      	ldr	r2, [r3, #8]
   18df6:	7bd3      	ldrb	r3, [r2, #15]
   18df8:	3301      	adds	r3, #1
   18dfa:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   18dfc:	2000      	movs	r0, #0
   18dfe:	f7ff ffc7 	bl	18d90 <update_cache>
	__asm__ volatile(
   18e02:	f384 8811 	msr	BASEPRI, r4
   18e06:	f3bf 8f6f 	isb	sy
}
   18e0a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   18e0e:	f005 bf98 	b.w	1ed42 <z_reschedule_unlocked>
   18e12:	bf00      	nop
   18e14:	200028c0 	.word	0x200028c0

00018e18 <ready_thread>:
{
   18e18:	b470      	push	{r4, r5, r6}
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   18e1a:	7b43      	ldrb	r3, [r0, #13]
   18e1c:	06db      	lsls	r3, r3, #27
   18e1e:	d127      	bne.n	18e70 <ready_thread+0x58>
	if (z_is_thread_ready(thread)) {
   18e20:	6983      	ldr	r3, [r0, #24]
   18e22:	bb2b      	cbnz	r3, 18e70 <ready_thread+0x58>
	return list->head == list;
   18e24:	4a13      	ldr	r2, [pc, #76]	; (18e74 <ready_thread+0x5c>)
   18e26:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18e2a:	f102 012c 	add.w	r1, r2, #44	; 0x2c
   18e2e:	428b      	cmp	r3, r1
   18e30:	d018      	beq.n	18e64 <ready_thread+0x4c>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e32:	b1bb      	cbz	r3, 18e64 <ready_thread+0x4c>
	if (thread_1->base.prio < thread_2->base.prio) {
   18e34:	f990 500e 	ldrsb.w	r5, [r0, #14]
   18e38:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18e3c:	42ae      	cmp	r6, r5
   18e3e:	dd0c      	ble.n	18e5a <ready_thread+0x42>
	node->prev = successor->prev;
   18e40:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   18e42:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   18e46:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   18e48:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   18e4a:	7b43      	ldrb	r3, [r0, #13]
   18e4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18e50:	7343      	strb	r3, [r0, #13]
}
   18e52:	bc70      	pop	{r4, r5, r6}
		update_cache(0);
   18e54:	2000      	movs	r0, #0
   18e56:	f7ff bf9b 	b.w	18d90 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18e5a:	429c      	cmp	r4, r3
   18e5c:	d002      	beq.n	18e64 <ready_thread+0x4c>
   18e5e:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18e60:	2b00      	cmp	r3, #0
   18e62:	d1e9      	bne.n	18e38 <ready_thread+0x20>
	node->prev = list->tail;
   18e64:	e9c0 1400 	strd	r1, r4, [r0]
	list->tail->next = node;
   18e68:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18e6a:	6018      	str	r0, [r3, #0]
	list->tail = node;
   18e6c:	6310      	str	r0, [r2, #48]	; 0x30
}
   18e6e:	e7ec      	b.n	18e4a <ready_thread+0x32>
}
   18e70:	bc70      	pop	{r4, r5, r6}
   18e72:	4770      	bx	lr
   18e74:	200028c0 	.word	0x200028c0

00018e78 <z_sched_start>:
{
   18e78:	b510      	push	{r4, lr}
	__asm__ volatile(
   18e7a:	f04f 0220 	mov.w	r2, #32
   18e7e:	f3ef 8411 	mrs	r4, BASEPRI
   18e82:	f382 8811 	msr	BASEPRI, r2
   18e86:	f3bf 8f6f 	isb	sy
	if (z_has_thread_started(thread)) {
   18e8a:	7b42      	ldrb	r2, [r0, #13]
   18e8c:	0751      	lsls	r1, r2, #29
   18e8e:	d404      	bmi.n	18e9a <z_sched_start+0x22>
	__asm__ volatile(
   18e90:	f384 8811 	msr	BASEPRI, r4
   18e94:	f3bf 8f6f 	isb	sy
}
   18e98:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   18e9a:	f022 0204 	bic.w	r2, r2, #4
   18e9e:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   18ea0:	f7ff ffba 	bl	18e18 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   18ea4:	4621      	mov	r1, r4
   18ea6:	4802      	ldr	r0, [pc, #8]	; (18eb0 <z_sched_start+0x38>)
}
   18ea8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   18eac:	f7ff bf34 	b.w	18d18 <z_reschedule>
   18eb0:	200029d7 	.word	0x200029d7

00018eb4 <move_thread_to_end_of_prio_q>:
{
   18eb4:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   18eb6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   18eba:	2b00      	cmp	r3, #0
{
   18ebc:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   18ebe:	da02      	bge.n	18ec6 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   18ec0:	4816      	ldr	r0, [pc, #88]	; (18f1c <move_thread_to_end_of_prio_q+0x68>)
   18ec2:	f7ff ff4f 	bl	18d64 <z_priq_dumb_remove>
	return list->head == list;
   18ec6:	4a16      	ldr	r2, [pc, #88]	; (18f20 <move_thread_to_end_of_prio_q+0x6c>)
   18ec8:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   18ecc:	f102 002c 	add.w	r0, r2, #44	; 0x2c
   18ed0:	4283      	cmp	r3, r0
   18ed2:	d01c      	beq.n	18f0e <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18ed4:	b1db      	cbz	r3, 18f0e <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   18ed6:	f991 500e 	ldrsb.w	r5, [r1, #14]
   18eda:	f993 600e 	ldrsb.w	r6, [r3, #14]
   18ede:	42ae      	cmp	r6, r5
   18ee0:	dd10      	ble.n	18f04 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   18ee2:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   18ee4:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   18ee8:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   18eea:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   18eec:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   18eee:	6890      	ldr	r0, [r2, #8]
   18ef0:	f063 037f 	orn	r3, r3, #127	; 0x7f
   18ef4:	734b      	strb	r3, [r1, #13]
   18ef6:	1a43      	subs	r3, r0, r1
   18ef8:	4258      	negs	r0, r3
}
   18efa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   18efe:	4158      	adcs	r0, r3
   18f00:	f7ff bf46 	b.w	18d90 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   18f04:	429c      	cmp	r4, r3
   18f06:	d002      	beq.n	18f0e <move_thread_to_end_of_prio_q+0x5a>
   18f08:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   18f0a:	2b00      	cmp	r3, #0
   18f0c:	d1e5      	bne.n	18eda <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   18f0e:	e9c1 0400 	strd	r0, r4, [r1]
	list->tail->next = node;
   18f12:	6b13      	ldr	r3, [r2, #48]	; 0x30
   18f14:	6019      	str	r1, [r3, #0]
	list->tail = node;
   18f16:	6311      	str	r1, [r2, #48]	; 0x30
}
   18f18:	e7e8      	b.n	18eec <move_thread_to_end_of_prio_q+0x38>
   18f1a:	bf00      	nop
   18f1c:	200028ec 	.word	0x200028ec
   18f20:	200028c0 	.word	0x200028c0

00018f24 <z_time_slice>:
{
   18f24:	b570      	push	{r4, r5, r6, lr}
   18f26:	4601      	mov	r1, r0
	__asm__ volatile(
   18f28:	f04f 0320 	mov.w	r3, #32
   18f2c:	f3ef 8411 	mrs	r4, BASEPRI
   18f30:	f383 8811 	msr	BASEPRI, r3
   18f34:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   18f38:	4b16      	ldr	r3, [pc, #88]	; (18f94 <z_time_slice+0x70>)
   18f3a:	4a17      	ldr	r2, [pc, #92]	; (18f98 <z_time_slice+0x74>)
   18f3c:	6898      	ldr	r0, [r3, #8]
   18f3e:	6815      	ldr	r5, [r2, #0]
   18f40:	42a8      	cmp	r0, r5
   18f42:	461d      	mov	r5, r3
   18f44:	d106      	bne.n	18f54 <z_time_slice+0x30>
			z_reset_time_slice();
   18f46:	f7ff fea5 	bl	18c94 <z_reset_time_slice>
	__asm__ volatile(
   18f4a:	f384 8811 	msr	BASEPRI, r4
   18f4e:	f3bf 8f6f 	isb	sy
}
   18f52:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
   18f54:	2600      	movs	r6, #0
   18f56:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
   18f58:	4a10      	ldr	r2, [pc, #64]	; (18f9c <z_time_slice+0x78>)
   18f5a:	6812      	ldr	r2, [r2, #0]
   18f5c:	b1ba      	cbz	r2, 18f8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18f5e:	89c2      	ldrh	r2, [r0, #14]
   18f60:	2a7f      	cmp	r2, #127	; 0x7f
   18f62:	d814      	bhi.n	18f8e <z_time_slice+0x6a>
		&& !z_is_thread_prevented_from_running(thread)
   18f64:	7b42      	ldrb	r2, [r0, #13]
   18f66:	06d2      	lsls	r2, r2, #27
   18f68:	d111      	bne.n	18f8e <z_time_slice+0x6a>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   18f6a:	4a0d      	ldr	r2, [pc, #52]	; (18fa0 <z_time_slice+0x7c>)
   18f6c:	f990 600e 	ldrsb.w	r6, [r0, #14]
   18f70:	6812      	ldr	r2, [r2, #0]
   18f72:	4296      	cmp	r6, r2
   18f74:	db0b      	blt.n	18f8e <z_time_slice+0x6a>
		&& !z_is_idle_thread_object(thread);
   18f76:	4a0b      	ldr	r2, [pc, #44]	; (18fa4 <z_time_slice+0x80>)
   18f78:	4290      	cmp	r0, r2
   18f7a:	d008      	beq.n	18f8e <z_time_slice+0x6a>
		if (ticks >= _current_cpu->slice_ticks) {
   18f7c:	695a      	ldr	r2, [r3, #20]
   18f7e:	428a      	cmp	r2, r1
   18f80:	dc02      	bgt.n	18f88 <z_time_slice+0x64>
			move_thread_to_end_of_prio_q(_current);
   18f82:	f7ff ff97 	bl	18eb4 <move_thread_to_end_of_prio_q>
   18f86:	e7de      	b.n	18f46 <z_time_slice+0x22>
			_current_cpu->slice_ticks -= ticks;
   18f88:	1a52      	subs	r2, r2, r1
   18f8a:	615a      	str	r2, [r3, #20]
   18f8c:	e7dd      	b.n	18f4a <z_time_slice+0x26>
		_current_cpu->slice_ticks = 0;
   18f8e:	2300      	movs	r3, #0
   18f90:	616b      	str	r3, [r5, #20]
   18f92:	e7da      	b.n	18f4a <z_time_slice+0x26>
   18f94:	200028c0 	.word	0x200028c0
   18f98:	200028f4 	.word	0x200028f4
   18f9c:	200028fc 	.word	0x200028fc
   18fa0:	200028f8 	.word	0x200028f8
   18fa4:	20001248 	.word	0x20001248

00018fa8 <z_impl_k_thread_suspend>:
{
   18fa8:	b570      	push	{r4, r5, r6, lr}
   18faa:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   18fac:	3018      	adds	r0, #24
   18fae:	f006 f822 	bl	1eff6 <z_abort_timeout>
	__asm__ volatile(
   18fb2:	f04f 0320 	mov.w	r3, #32
   18fb6:	f3ef 8611 	mrs	r6, BASEPRI
   18fba:	f383 8811 	msr	BASEPRI, r3
   18fbe:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   18fc2:	f994 300d 	ldrsb.w	r3, [r4, #13]
   18fc6:	2b00      	cmp	r3, #0
   18fc8:	da07      	bge.n	18fda <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   18fca:	480f      	ldr	r0, [pc, #60]	; (19008 <z_impl_k_thread_suspend+0x60>)
   18fcc:	4621      	mov	r1, r4
   18fce:	f7ff fec9 	bl	18d64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   18fd2:	7b63      	ldrb	r3, [r4, #13]
   18fd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   18fd8:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   18fda:	4d0c      	ldr	r5, [pc, #48]	; (1900c <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   18fdc:	7b63      	ldrb	r3, [r4, #13]
   18fde:	68a8      	ldr	r0, [r5, #8]
   18fe0:	f043 0310 	orr.w	r3, r3, #16
   18fe4:	7363      	strb	r3, [r4, #13]
   18fe6:	1b03      	subs	r3, r0, r4
   18fe8:	4258      	negs	r0, r3
   18fea:	4158      	adcs	r0, r3
   18fec:	f7ff fed0 	bl	18d90 <update_cache>
	__asm__ volatile(
   18ff0:	f386 8811 	msr	BASEPRI, r6
   18ff4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   18ff8:	68ab      	ldr	r3, [r5, #8]
   18ffa:	42a3      	cmp	r3, r4
   18ffc:	d103      	bne.n	19006 <z_impl_k_thread_suspend+0x5e>
}
   18ffe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   19002:	f005 be9e 	b.w	1ed42 <z_reschedule_unlocked>
}
   19006:	bd70      	pop	{r4, r5, r6, pc}
   19008:	200028ec 	.word	0x200028ec
   1900c:	200028c0 	.word	0x200028c0

00019010 <z_thread_single_abort>:
{
   19010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19014:	4604      	mov	r4, r0
	__asm__ volatile(
   19016:	f04f 0320 	mov.w	r3, #32
   1901a:	f3ef 8211 	mrs	r2, BASEPRI
   1901e:	f383 8811 	msr	BASEPRI, r3
   19022:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   19026:	7b43      	ldrb	r3, [r0, #13]
   19028:	f013 0f28 	tst.w	r3, #40	; 0x28
   1902c:	d005      	beq.n	1903a <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1902e:	f382 8811 	msr	BASEPRI, r2
   19032:	f3bf 8f6f 	isb	sy
}
   19036:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1903a:	f043 0320 	orr.w	r3, r3, #32
   1903e:	7343      	strb	r3, [r0, #13]
   19040:	f382 8811 	msr	BASEPRI, r2
   19044:	f3bf 8f6f 	isb	sy
   19048:	3018      	adds	r0, #24
   1904a:	f005 ffd4 	bl	1eff6 <z_abort_timeout>
	__asm__ volatile(
   1904e:	f04f 0320 	mov.w	r3, #32
   19052:	f3ef 8611 	mrs	r6, BASEPRI
   19056:	f383 8811 	msr	BASEPRI, r3
   1905a:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1905e:	7b63      	ldrb	r3, [r4, #13]
   19060:	06d8      	lsls	r0, r3, #27
   19062:	d116      	bne.n	19092 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   19064:	69a2      	ldr	r2, [r4, #24]
   19066:	b9a2      	cbnz	r2, 19092 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   19068:	0619      	lsls	r1, r3, #24
   1906a:	d507      	bpl.n	1907c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1906c:	4825      	ldr	r0, [pc, #148]	; (19104 <z_thread_single_abort+0xf4>)
   1906e:	4621      	mov	r1, r4
   19070:	f7ff fe78 	bl	18d64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   19074:	7b63      	ldrb	r3, [r4, #13]
   19076:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1907a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1907c:	4b22      	ldr	r3, [pc, #136]	; (19108 <z_thread_single_abort+0xf8>)
   1907e:	6898      	ldr	r0, [r3, #8]
   19080:	1b02      	subs	r2, r0, r4
   19082:	4250      	negs	r0, r2
   19084:	4150      	adcs	r0, r2
   19086:	f7ff fe83 	bl	18d90 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1908a:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1908e:	2700      	movs	r7, #0
   19090:	e01d      	b.n	190ce <z_thread_single_abort+0xbe>
			if (z_is_thread_pending(thread)) {
   19092:	079b      	lsls	r3, r3, #30
   19094:	d5f9      	bpl.n	1908a <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   19096:	68a0      	ldr	r0, [r4, #8]
   19098:	4621      	mov	r1, r4
   1909a:	f7ff fe63 	bl	18d64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1909e:	7b63      	ldrb	r3, [r4, #13]
   190a0:	f023 0302 	bic.w	r3, r3, #2
   190a4:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   190a6:	2300      	movs	r3, #0
   190a8:	60a3      	str	r3, [r4, #8]
   190aa:	e7ee      	b.n	1908a <z_thread_single_abort+0x7a>
   190ac:	f105 0018 	add.w	r0, r5, #24
   190b0:	f005 ffa1 	bl	1eff6 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   190b4:	68a8      	ldr	r0, [r5, #8]
   190b6:	4629      	mov	r1, r5
   190b8:	f7ff fe54 	bl	18d64 <z_priq_dumb_remove>
   190bc:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   190be:	60af      	str	r7, [r5, #8]
   190c0:	f023 0302 	bic.w	r3, r3, #2
   190c4:	736b      	strb	r3, [r5, #13]
   190c6:	67ef      	str	r7, [r5, #124]	; 0x7c
			ready_thread(waiter);
   190c8:	4628      	mov	r0, r5
   190ca:	f7ff fea5 	bl	18e18 <ready_thread>
	return list->head == list;
   190ce:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   190d0:	4545      	cmp	r5, r8
   190d2:	d001      	beq.n	190d8 <z_thread_single_abort+0xc8>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   190d4:	2d00      	cmp	r5, #0
   190d6:	d1e9      	bne.n	190ac <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   190d8:	4b0b      	ldr	r3, [pc, #44]	; (19108 <z_thread_single_abort+0xf8>)
   190da:	689a      	ldr	r2, [r3, #8]
   190dc:	4b0b      	ldr	r3, [pc, #44]	; (1910c <z_thread_single_abort+0xfc>)
   190de:	429a      	cmp	r2, r3
   190e0:	d102      	bne.n	190e8 <z_thread_single_abort+0xd8>
			update_cache(1);
   190e2:	2001      	movs	r0, #1
   190e4:	f7ff fe54 	bl	18d90 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   190e8:	7b63      	ldrb	r3, [r4, #13]
   190ea:	f043 0308 	orr.w	r3, r3, #8
   190ee:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   190f0:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   190f2:	f386 8811 	msr	BASEPRI, r6
   190f6:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   190fa:	2b00      	cmp	r3, #0
   190fc:	d09b      	beq.n	19036 <z_thread_single_abort+0x26>
}
   190fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort();
   19102:	4718      	bx	r3
   19104:	200028ec 	.word	0x200028ec
   19108:	200028c0 	.word	0x200028c0
   1910c:	20001248 	.word	0x20001248

00019110 <unready_thread>:
{
   19110:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   19112:	f990 300d 	ldrsb.w	r3, [r0, #13]
   19116:	2b00      	cmp	r3, #0
{
   19118:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1911a:	da06      	bge.n	1912a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1911c:	4807      	ldr	r0, [pc, #28]	; (1913c <unready_thread+0x2c>)
   1911e:	f7ff fe21 	bl	18d64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   19122:	7b4b      	ldrb	r3, [r1, #13]
   19124:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   19128:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   1912a:	4b05      	ldr	r3, [pc, #20]	; (19140 <unready_thread+0x30>)
   1912c:	6898      	ldr	r0, [r3, #8]
   1912e:	1a43      	subs	r3, r0, r1
   19130:	4258      	negs	r0, r3
   19132:	4158      	adcs	r0, r3
}
   19134:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   19138:	f7ff be2a 	b.w	18d90 <update_cache>
   1913c:	200028ec 	.word	0x200028ec
   19140:	200028c0 	.word	0x200028c0

00019144 <pend>:
{
   19144:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19148:	4606      	mov	r6, r0
   1914a:	4614      	mov	r4, r2
   1914c:	461d      	mov	r5, r3
	__asm__ volatile(
   1914e:	f04f 0320 	mov.w	r3, #32
   19152:	f3ef 8711 	mrs	r7, BASEPRI
   19156:	f383 8811 	msr	BASEPRI, r3
   1915a:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   1915e:	f005 fe52 	bl	1ee06 <add_to_waitq_locked>
	__asm__ volatile(
   19162:	f387 8811 	msr	BASEPRI, r7
   19166:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1916a:	1c6b      	adds	r3, r5, #1
   1916c:	bf08      	it	eq
   1916e:	f1b4 3fff 	cmpeq.w	r4, #4294967295	; 0xffffffff
   19172:	d008      	beq.n	19186 <pend+0x42>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   19174:	4622      	mov	r2, r4
   19176:	462b      	mov	r3, r5
   19178:	f106 0018 	add.w	r0, r6, #24
   1917c:	4903      	ldr	r1, [pc, #12]	; (1918c <pend+0x48>)
}
   1917e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   19182:	f000 baed 	b.w	19760 <z_add_timeout>
   19186:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1918a:	bf00      	nop
   1918c:	0001edc7 	.word	0x0001edc7

00019190 <z_pend_curr>:
{
   19190:	b510      	push	{r4, lr}
	pending_current = _current;
   19192:	4b07      	ldr	r3, [pc, #28]	; (191b0 <z_pend_curr+0x20>)
   19194:	6898      	ldr	r0, [r3, #8]
   19196:	4b07      	ldr	r3, [pc, #28]	; (191b4 <z_pend_curr+0x24>)
{
   19198:	460c      	mov	r4, r1
	pending_current = _current;
   1919a:	6018      	str	r0, [r3, #0]
{
   1919c:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   1919e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   191a2:	f7ff ffcf 	bl	19144 <pend>
   191a6:	4620      	mov	r0, r4
}
   191a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   191ac:	f7ec b900 	b.w	53b0 <arch_swap>
   191b0:	200028c0 	.word	0x200028c0
   191b4:	200028f4 	.word	0x200028f4

000191b8 <z_tick_sleep.part.0>:
	z_impl_k_yield();
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(int32_t ticks)
   191b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   191ba:	4605      	mov	r5, r0
#else
	ticks += _TICK_ALIGN;
	timeout = (k_ticks_t) ticks;
#endif

	expected_wakeup_time = ticks + z_tick_get_32();
   191bc:	f005 ff5b 	bl	1f076 <z_tick_get_32>
   191c0:	182c      	adds	r4, r5, r0
	__asm__ volatile(
   191c2:	f04f 0320 	mov.w	r3, #32
   191c6:	f3ef 8711 	mrs	r7, BASEPRI
   191ca:	f383 8811 	msr	BASEPRI, r3
   191ce:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

#if defined(CONFIG_TIMESLICING) && defined(CONFIG_SWAP_NONATOMIC)
	pending_current = _current;
   191d2:	4e0d      	ldr	r6, [pc, #52]	; (19208 <z_tick_sleep.part.0+0x50>)
   191d4:	4b0d      	ldr	r3, [pc, #52]	; (1920c <z_tick_sleep.part.0+0x54>)
   191d6:	68b0      	ldr	r0, [r6, #8]
   191d8:	6018      	str	r0, [r3, #0]
#endif
	unready_thread(_current);
   191da:	f7ff ff99 	bl	19110 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   191de:	68b0      	ldr	r0, [r6, #8]
   191e0:	490b      	ldr	r1, [pc, #44]	; (19210 <z_tick_sleep.part.0+0x58>)
   191e2:	462a      	mov	r2, r5
   191e4:	17eb      	asrs	r3, r5, #31
   191e6:	3018      	adds	r0, #24
   191e8:	f000 faba 	bl	19760 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   191ec:	68b2      	ldr	r2, [r6, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   191ee:	7b53      	ldrb	r3, [r2, #13]
   191f0:	f043 0310 	orr.w	r3, r3, #16
   191f4:	7353      	strb	r3, [r2, #13]
   191f6:	4638      	mov	r0, r7
   191f8:	f7ec f8da 	bl	53b0 <arch_swap>

	(void)z_swap(&sched_spinlock, key);

	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");

	ticks = expected_wakeup_time - z_tick_get_32();
   191fc:	f005 ff3b 	bl	1f076 <z_tick_get_32>
   19200:	1a20      	subs	r0, r4, r0
		return ticks;
	}
#endif

	return 0;
}
   19202:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   19206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19208:	200028c0 	.word	0x200028c0
   1920c:	200028f4 	.word	0x200028f4
   19210:	0001edc7 	.word	0x0001edc7

00019214 <z_set_prio>:
{
   19214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19216:	4604      	mov	r4, r0
   19218:	f04f 0320 	mov.w	r3, #32
   1921c:	f3ef 8711 	mrs	r7, BASEPRI
   19220:	f383 8811 	msr	BASEPRI, r3
   19224:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   19228:	7b43      	ldrb	r3, [r0, #13]
   1922a:	06db      	lsls	r3, r3, #27
   1922c:	b24e      	sxtb	r6, r1
   1922e:	d12c      	bne.n	1928a <z_set_prio+0x76>
		if (need_sched) {
   19230:	6983      	ldr	r3, [r0, #24]
   19232:	bb53      	cbnz	r3, 1928a <z_set_prio+0x76>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   19234:	4d16      	ldr	r5, [pc, #88]	; (19290 <z_set_prio+0x7c>)
   19236:	4621      	mov	r1, r4
   19238:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1923c:	f7ff fd92 	bl	18d64 <z_priq_dumb_remove>
	return list->head == list;
   19240:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
				thread->base.prio = prio;
   19242:	73a6      	strb	r6, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19244:	4283      	cmp	r3, r0
   19246:	462a      	mov	r2, r5
   19248:	d018      	beq.n	1927c <z_set_prio+0x68>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1924a:	b1bb      	cbz	r3, 1927c <z_set_prio+0x68>
   1924c:	6b29      	ldr	r1, [r5, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   1924e:	f993 500e 	ldrsb.w	r5, [r3, #14]
   19252:	42b5      	cmp	r5, r6
   19254:	dd0d      	ble.n	19272 <z_set_prio+0x5e>
	node->prev = successor->prev;
   19256:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   19258:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1925c:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1925e:	605c      	str	r4, [r3, #4]
			update_cache(1);
   19260:	2001      	movs	r0, #1
   19262:	f7ff fd95 	bl	18d90 <update_cache>
   19266:	2001      	movs	r0, #1
	__asm__ volatile(
   19268:	f387 8811 	msr	BASEPRI, r7
   1926c:	f3bf 8f6f 	isb	sy
}
   19270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   19272:	428b      	cmp	r3, r1
   19274:	d002      	beq.n	1927c <z_set_prio+0x68>
   19276:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19278:	2b00      	cmp	r3, #0
   1927a:	d1e8      	bne.n	1924e <z_set_prio+0x3a>
	node->prev = list->tail;
   1927c:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1927e:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   19280:	6b13      	ldr	r3, [r2, #48]	; 0x30
	node->next = list;
   19282:	6020      	str	r0, [r4, #0]
	list->tail->next = node;
   19284:	601c      	str	r4, [r3, #0]
	list->tail = node;
   19286:	6314      	str	r4, [r2, #48]	; 0x30
}
   19288:	e7ea      	b.n	19260 <z_set_prio+0x4c>
			thread->base.prio = prio;
   1928a:	73a6      	strb	r6, [r4, #14]
   1928c:	2000      	movs	r0, #0
   1928e:	e7eb      	b.n	19268 <z_set_prio+0x54>
   19290:	200028c0 	.word	0x200028c0

00019294 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   19294:	4b04      	ldr	r3, [pc, #16]	; (192a8 <z_sched_init+0x14>)
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   19296:	2100      	movs	r1, #0
   19298:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   1929c:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   192a0:	4608      	mov	r0, r1
   192a2:	f7ff bd0d 	b.w	18cc0 <k_sched_time_slice_set>
   192a6:	bf00      	nop
   192a8:	200028c0 	.word	0x200028c0

000192ac <z_impl_k_yield>:
{
   192ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!z_is_idle_thread_object(_current)) {
   192ae:	4c23      	ldr	r4, [pc, #140]	; (1933c <z_impl_k_yield+0x90>)
   192b0:	4b23      	ldr	r3, [pc, #140]	; (19340 <z_impl_k_yield+0x94>)
   192b2:	68a2      	ldr	r2, [r4, #8]
   192b4:	429a      	cmp	r2, r3
   192b6:	d028      	beq.n	1930a <z_impl_k_yield+0x5e>
	__asm__ volatile(
   192b8:	f04f 0320 	mov.w	r3, #32
   192bc:	f3ef 8511 	mrs	r5, BASEPRI
   192c0:	f383 8811 	msr	BASEPRI, r3
   192c4:	f3bf 8f6f 	isb	sy
				_priq_run_remove(&_kernel.ready_q.runq,
   192c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   192cc:	68a1      	ldr	r1, [r4, #8]
   192ce:	f7ff fd49 	bl	18d64 <z_priq_dumb_remove>
	return list->head == list;
   192d2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
			_priq_run_add(&_kernel.ready_q.runq, _current);
   192d4:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   192d6:	4282      	cmp	r2, r0
   192d8:	d028      	beq.n	1932c <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   192da:	b33a      	cbz	r2, 1932c <z_impl_k_yield+0x80>
   192dc:	6b26      	ldr	r6, [r4, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   192de:	f993 100e 	ldrsb.w	r1, [r3, #14]
   192e2:	f992 700e 	ldrsb.w	r7, [r2, #14]
   192e6:	428f      	cmp	r7, r1
   192e8:	dd1b      	ble.n	19322 <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   192ea:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   192ec:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   192f0:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   192f2:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   192f4:	7b5a      	ldrb	r2, [r3, #13]
   192f6:	f062 027f 	orn	r2, r2, #127	; 0x7f
   192fa:	735a      	strb	r2, [r3, #13]
			update_cache(1);
   192fc:	2001      	movs	r0, #1
   192fe:	f7ff fd47 	bl	18d90 <update_cache>
	__asm__ volatile(
   19302:	f385 8811 	msr	BASEPRI, r5
   19306:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1930a:	f04f 0320 	mov.w	r3, #32
   1930e:	f3ef 8011 	mrs	r0, BASEPRI
   19312:	f383 8811 	msr	BASEPRI, r3
   19316:	f3bf 8f6f 	isb	sy
}
   1931a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1931e:	f7ec b847 	b.w	53b0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   19322:	4296      	cmp	r6, r2
   19324:	d002      	beq.n	1932c <z_impl_k_yield+0x80>
   19326:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   19328:	2a00      	cmp	r2, #0
   1932a:	d1da      	bne.n	192e2 <z_impl_k_yield+0x36>
	node->prev = list->tail;
   1932c:	6b22      	ldr	r2, [r4, #48]	; 0x30
   1932e:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   19330:	6b22      	ldr	r2, [r4, #48]	; 0x30
	node->next = list;
   19332:	6018      	str	r0, [r3, #0]
	list->tail->next = node;
   19334:	6013      	str	r3, [r2, #0]
	list->tail = node;
   19336:	6323      	str	r3, [r4, #48]	; 0x30
}
   19338:	e7dc      	b.n	192f4 <z_impl_k_yield+0x48>
   1933a:	bf00      	nop
   1933c:	200028c0 	.word	0x200028c0
   19340:	20001248 	.word	0x20001248

00019344 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
   19344:	460b      	mov	r3, r1
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19346:	3301      	adds	r3, #1
   19348:	bf08      	it	eq
   1934a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1934e:	b510      	push	{r4, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19350:	d106      	bne.n	19360 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   19352:	4b0b      	ldr	r3, [pc, #44]	; (19380 <z_impl_k_sleep+0x3c>)
   19354:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   19356:	f7ff fe27 	bl	18fa8 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   1935a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
#endif

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   1935e:	bd10      	pop	{r4, pc}
	ticks = z_tick_sleep(ticks);
   19360:	4604      	mov	r4, r0
	if (ticks == 0) {
   19362:	b948      	cbnz	r0, 19378 <z_impl_k_sleep+0x34>
	z_impl_k_yield();
   19364:	f7ff ffa2 	bl	192ac <z_impl_k_yield>
			return (t * to_hz + off) / from_hz;
   19368:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   1936c:	fb84 3400 	smull	r3, r4, r4, r0
   19370:	0bd8      	lsrs	r0, r3, #15
   19372:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   19376:	e7f2      	b.n	1935e <z_impl_k_sleep+0x1a>
   19378:	f7ff ff1e 	bl	191b8 <z_tick_sleep.part.0>
   1937c:	4604      	mov	r4, r0
   1937e:	e7f3      	b.n	19368 <z_impl_k_sleep+0x24>
   19380:	200028c0 	.word	0x200028c0

00019384 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   19384:	4b01      	ldr	r3, [pc, #4]	; (1938c <z_impl_k_current_get+0x8>)
   19386:	6898      	ldr	r0, [r3, #8]
   19388:	4770      	bx	lr
   1938a:	bf00      	nop
   1938c:	200028c0 	.word	0x200028c0

00019390 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   19390:	b538      	push	{r3, r4, r5, lr}
   19392:	4604      	mov	r4, r0
   19394:	f04f 0320 	mov.w	r3, #32
   19398:	f3ef 8511 	mrs	r5, BASEPRI
   1939c:	f383 8811 	msr	BASEPRI, r3
   193a0:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   193a4:	f005 fd57 	bl	1ee56 <z_unpend_first_thread>

	if (thread != NULL) {
   193a8:	b148      	cbz	r0, 193be <z_impl_k_sem_give+0x2e>
   193aa:	2200      	movs	r2, #0
   193ac:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   193ae:	f005 fcfa 	bl	1eda6 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   193b2:	4629      	mov	r1, r5
   193b4:	4808      	ldr	r0, [pc, #32]	; (193d8 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   193b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   193ba:	f7ff bcad 	b.w	18d18 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   193be:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   193c2:	429a      	cmp	r2, r3
   193c4:	bf18      	it	ne
   193c6:	3301      	addne	r3, #1
   193c8:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   193ca:	2102      	movs	r1, #2
   193cc:	f104 0010 	add.w	r0, r4, #16
   193d0:	f005 ffaf 	bl	1f332 <z_handle_obj_poll_events>
}
   193d4:	e7ed      	b.n	193b2 <z_impl_k_sem_give+0x22>
   193d6:	bf00      	nop
   193d8:	200029d7 	.word	0x200029d7

000193dc <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   193dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   193de:	4614      	mov	r4, r2
   193e0:	461d      	mov	r5, r3
   193e2:	f04f 0320 	mov.w	r3, #32
   193e6:	f3ef 8111 	mrs	r1, BASEPRI
   193ea:	f383 8811 	msr	BASEPRI, r3
   193ee:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   193f2:	6883      	ldr	r3, [r0, #8]
   193f4:	b143      	cbz	r3, 19408 <z_impl_k_sem_take+0x2c>
		sem->count--;
   193f6:	3b01      	subs	r3, #1
   193f8:	6083      	str	r3, [r0, #8]
	__asm__ volatile(
   193fa:	f381 8811 	msr	BASEPRI, r1
   193fe:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   19402:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   19404:	b003      	add	sp, #12
   19406:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19408:	ea54 0305 	orrs.w	r3, r4, r5
   1940c:	d106      	bne.n	1941c <z_impl_k_sem_take+0x40>
   1940e:	f381 8811 	msr	BASEPRI, r1
   19412:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   19416:	f06f 000f 	mvn.w	r0, #15
   1941a:	e7f3      	b.n	19404 <z_impl_k_sem_take+0x28>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   1941c:	4602      	mov	r2, r0
   1941e:	e9cd 4500 	strd	r4, r5, [sp]
   19422:	4802      	ldr	r0, [pc, #8]	; (1942c <z_impl_k_sem_take+0x50>)
   19424:	f7ff feb4 	bl	19190 <z_pend_curr>
	return ret;
   19428:	e7ec      	b.n	19404 <z_impl_k_sem_take+0x28>
   1942a:	bf00      	nop
   1942c:	200029d7 	.word	0x200029d7

00019430 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   19430:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   19432:	4c08      	ldr	r4, [pc, #32]	; (19454 <k_sys_work_q_init+0x24>)
   19434:	4908      	ldr	r1, [pc, #32]	; (19458 <k_sys_work_q_init+0x28>)
   19436:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1943a:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1943e:	4620      	mov	r0, r4
   19440:	f000 f8dc 	bl	195fc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   19444:	4905      	ldr	r1, [pc, #20]	; (1945c <k_sys_work_q_init+0x2c>)
   19446:	f104 0018 	add.w	r0, r4, #24
   1944a:	f005 fd51 	bl	1eef0 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   1944e:	2000      	movs	r0, #0
   19450:	bd10      	pop	{r4, pc}
   19452:	bf00      	nop
   19454:	20001348 	.word	0x20001348
   19458:	20004a28 	.word	0x20004a28
   1945c:	00020e05 	.word	0x00020e05

00019460 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   19460:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   19464:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   19468:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   1946c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   1946e:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   19470:	2504      	movs	r5, #4
   19472:	7345      	strb	r5, [r0, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   19474:	1dd6      	adds	r6, r2, #7

	thread_base->prio = priority;
   19476:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   19478:	7385      	strb	r5, [r0, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1947a:	9a0c      	ldr	r2, [sp, #48]	; 0x30

	thread_base->sched_locked = 0U;
   1947c:	2500      	movs	r5, #0
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   1947e:	f026 0607 	bic.w	r6, r6, #7
	node->prev = NULL;
   19482:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   19486:	e9c0 161a 	strd	r1, r6, [r0, #104]	; 0x68
	thread_base->sched_locked = 0U;
   1948a:	73c5      	strb	r5, [r0, #15]
	new_thread->stack_info.delta = delta;
   1948c:	6705      	str	r5, [r0, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   1948e:	9202      	str	r2, [sp, #8]
   19490:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   19492:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   19494:	eb01 0806 	add.w	r8, r1, r6
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   19498:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   1949a:	9200      	str	r2, [sp, #0]
   1949c:	4642      	mov	r2, r8
{
   1949e:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   194a0:	f7ec f82c 	bl	54fc <arch_new_thread>
	if (!_current) {
   194a4:	4b05      	ldr	r3, [pc, #20]	; (194bc <z_setup_new_thread+0x5c>)
   194a6:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   194a8:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   194ac:	b103      	cbz	r3, 194b0 <z_setup_new_thread+0x50>
	new_thread->resource_pool = _current->resource_pool;
   194ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
   194b0:	6763      	str	r3, [r4, #116]	; 0x74
}
   194b2:	4640      	mov	r0, r8
   194b4:	b004      	add	sp, #16
   194b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   194ba:	bf00      	nop
   194bc:	200028c0 	.word	0x200028c0

000194c0 <z_impl_k_thread_create>:
{
   194c0:	b5f0      	push	{r4, r5, r6, r7, lr}
   194c2:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   194c4:	2500      	movs	r5, #0
   194c6:	9505      	str	r5, [sp, #20]
   194c8:	9d10      	ldr	r5, [sp, #64]	; 0x40
   194ca:	9504      	str	r5, [sp, #16]
   194cc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   194ce:	9503      	str	r5, [sp, #12]
   194d0:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   194d2:	9502      	str	r5, [sp, #8]
{
   194d4:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   194d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   194da:	9501      	str	r5, [sp, #4]
   194dc:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   194de:	9500      	str	r5, [sp, #0]
{
   194e0:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   194e2:	f7ff ffbd 	bl	19460 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   194e6:	1c7b      	adds	r3, r7, #1
   194e8:	bf08      	it	eq
   194ea:	f1b6 3fff 	cmpeq.w	r6, #4294967295	; 0xffffffff
   194ee:	d005      	beq.n	194fc <z_impl_k_thread_create+0x3c>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   194f0:	ea56 0307 	orrs.w	r3, r6, r7
   194f4:	d105      	bne.n	19502 <z_impl_k_thread_create+0x42>
	z_sched_start(thread);
   194f6:	4620      	mov	r0, r4
   194f8:	f7ff fcbe 	bl	18e78 <z_sched_start>
}
   194fc:	4620      	mov	r0, r4
   194fe:	b007      	add	sp, #28
   19500:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19502:	4904      	ldr	r1, [pc, #16]	; (19514 <z_impl_k_thread_create+0x54>)
   19504:	4632      	mov	r2, r6
   19506:	463b      	mov	r3, r7
   19508:	f104 0018 	add.w	r0, r4, #24
   1950c:	f000 f928 	bl	19760 <z_add_timeout>
   19510:	e7f4      	b.n	194fc <z_impl_k_thread_create+0x3c>
   19512:	bf00      	nop
   19514:	0001edc7 	.word	0x0001edc7

00019518 <z_init_static_threads>:
{
   19518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
   1951c:	4e2a      	ldr	r6, [pc, #168]	; (195c8 <z_init_static_threads+0xb0>)
   1951e:	4d2b      	ldr	r5, [pc, #172]	; (195cc <z_init_static_threads+0xb4>)
{
   19520:	b086      	sub	sp, #24
   19522:	46b0      	mov	r8, r6
	_FOREACH_STATIC_THREAD(thread_data) {
   19524:	42b5      	cmp	r5, r6
   19526:	f105 0430 	add.w	r4, r5, #48	; 0x30
   1952a:	d310      	bcc.n	1954e <z_init_static_threads+0x36>
	k_sched_lock();
   1952c:	f7ff fc06 	bl	18d3c <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   19530:	4c26      	ldr	r4, [pc, #152]	; (195cc <z_init_static_threads+0xb4>)
   19532:	f8df a09c 	ldr.w	sl, [pc, #156]	; 195d0 <z_init_static_threads+0xb8>
   19536:	f44f 4900 	mov.w	r9, #32768	; 0x8000
   1953a:	f240 36e7 	movw	r6, #999	; 0x3e7
   1953e:	2700      	movs	r7, #0
   19540:	4544      	cmp	r4, r8
   19542:	d321      	bcc.n	19588 <z_init_static_threads+0x70>
}
   19544:	b006      	add	sp, #24
   19546:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	k_sched_unlock();
   1954a:	f7ff bc49 	b.w	18de0 <k_sched_unlock>
		z_setup_new_thread(
   1954e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   19552:	9305      	str	r3, [sp, #20]
   19554:	f854 3c10 	ldr.w	r3, [r4, #-16]
   19558:	9304      	str	r3, [sp, #16]
   1955a:	f854 3c14 	ldr.w	r3, [r4, #-20]
   1955e:	9303      	str	r3, [sp, #12]
   19560:	f854 3c18 	ldr.w	r3, [r4, #-24]
   19564:	9302      	str	r3, [sp, #8]
   19566:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   1956a:	9301      	str	r3, [sp, #4]
   1956c:	f854 3c20 	ldr.w	r3, [r4, #-32]
   19570:	9300      	str	r3, [sp, #0]
   19572:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   19576:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   1957a:	f7ff ff71 	bl	19460 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   1957e:	f854 3c30 	ldr.w	r3, [r4, #-48]
   19582:	65dd      	str	r5, [r3, #92]	; 0x5c
   19584:	4625      	mov	r5, r4
   19586:	e7cd      	b.n	19524 <z_init_static_threads+0xc>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   19588:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1958a:	1c5a      	adds	r2, r3, #1
   1958c:	d00d      	beq.n	195aa <z_init_static_threads+0x92>
					    K_MSEC(thread_data->init_delay));
   1958e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   19592:	4630      	mov	r0, r6
   19594:	4639      	mov	r1, r7
   19596:	fbc9 0103 	smlal	r0, r1, r9, r3
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1959a:	42b9      	cmp	r1, r7
   1959c:	bf08      	it	eq
   1959e:	42b0      	cmpeq	r0, r6
			schedule_new_thread(thread_data->init_thread,
   195a0:	6825      	ldr	r5, [r4, #0]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   195a2:	d104      	bne.n	195ae <z_init_static_threads+0x96>
	z_sched_start(thread);
   195a4:	4628      	mov	r0, r5
   195a6:	f7ff fc67 	bl	18e78 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   195aa:	3430      	adds	r4, #48	; 0x30
   195ac:	e7c8      	b.n	19540 <z_init_static_threads+0x28>
   195ae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   195b2:	2300      	movs	r3, #0
   195b4:	f7e7 f9c2 	bl	93c <__aeabi_uldivmod>
   195b8:	4602      	mov	r2, r0
   195ba:	460b      	mov	r3, r1
   195bc:	f105 0018 	add.w	r0, r5, #24
   195c0:	4651      	mov	r1, sl
   195c2:	f000 f8cd 	bl	19760 <z_add_timeout>
   195c6:	e7f0      	b.n	195aa <z_init_static_threads+0x92>
   195c8:	20000a74 	.word	0x20000a74
   195cc:	20000a74 	.word	0x20000a74
   195d0:	0001edc7 	.word	0x0001edc7

000195d4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os);

FUNC_NORETURN void z_self_abort(void)
{
   195d4:	b508      	push	{r3, lr}
	__asm__ volatile(
   195d6:	f04f 0320 	mov.w	r3, #32
   195da:	f3ef 8411 	mrs	r4, BASEPRI
   195de:	f383 8811 	msr	BASEPRI, r3
   195e2:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   195e6:	4b04      	ldr	r3, [pc, #16]	; (195f8 <z_self_abort+0x24>)
   195e8:	6898      	ldr	r0, [r3, #8]
   195ea:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   195ec:	f7ff fcdc 	bl	18fa8 <z_impl_k_thread_suspend>
   195f0:	4620      	mov	r0, r4
   195f2:	f7eb fedd 	bl	53b0 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE;
   195f6:	bf00      	nop
   195f8:	200028c0 	.word	0x200028c0

000195fc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   195fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19600:	4604      	mov	r4, r0
   19602:	b088      	sub	sp, #32
   19604:	460d      	mov	r5, r1
   19606:	4616      	mov	r6, r2
   19608:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   1960a:	f005 fb13 	bl	1ec34 <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   1960e:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   19612:	2200      	movs	r2, #0
   19614:	2300      	movs	r3, #0
   19616:	e9cd 2306 	strd	r2, r3, [sp, #24]
   1961a:	e9cd 7203 	strd	r7, r2, [sp, #12]
   1961e:	e9cd 2201 	strd	r2, r2, [sp, #4]
   19622:	4b07      	ldr	r3, [pc, #28]	; (19640 <k_work_q_start+0x44>)
   19624:	9400      	str	r4, [sp, #0]
   19626:	4632      	mov	r2, r6
   19628:	4629      	mov	r1, r5
   1962a:	4640      	mov	r0, r8
   1962c:	f7ff ff48 	bl	194c0 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   19630:	4904      	ldr	r1, [pc, #16]	; (19644 <k_work_q_start+0x48>)
   19632:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   19634:	b008      	add	sp, #32
   19636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1963a:	f005 bc59 	b.w	1eef0 <z_impl_k_thread_name_set>
   1963e:	bf00      	nop
   19640:	00019f95 	.word	0x00019f95
   19644:	00020e0e 	.word	0x00020e0e

00019648 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   19648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1964c:	4606      	mov	r6, r0
   1964e:	460d      	mov	r5, r1
   19650:	4690      	mov	r8, r2
   19652:	4699      	mov	r9, r3
   19654:	f04f 0320 	mov.w	r3, #32
   19658:	f3ef 8711 	mrs	r7, BASEPRI
   1965c:	f383 8811 	msr	BASEPRI, r3
   19660:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   19664:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   19666:	b17b      	cbz	r3, 19688 <k_delayed_work_submit_to_queue+0x40>
   19668:	4283      	cmp	r3, r0
   1966a:	d128      	bne.n	196be <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   1966c:	4628      	mov	r0, r5
   1966e:	f005 fc5f 	bl	1ef30 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   19672:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   19676:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   19678:	d008      	beq.n	1968c <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   1967a:	2800      	cmp	r0, #0
   1967c:	da07      	bge.n	1968e <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   1967e:	f387 8811 	msr	BASEPRI, r7
   19682:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   19686:	e00f      	b.n	196a8 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   19688:	2800      	cmp	r0, #0
   1968a:	d0ef      	beq.n	1966c <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   1968c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   1968e:	ea58 0309 	orrs.w	r3, r8, r9
	work->work_q = work_q;
   19692:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   19694:	d10b      	bne.n	196ae <k_delayed_work_submit_to_queue+0x66>
   19696:	f387 8811 	msr	BASEPRI, r7
   1969a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   1969e:	4629      	mov	r1, r5
   196a0:	4630      	mov	r0, r6
   196a2:	f005 fc28 	bl	1eef6 <k_work_submit_to_queue>
		return 0;
   196a6:	2400      	movs	r4, #0
}
   196a8:	4620      	mov	r0, r4
   196aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   196ae:	4905      	ldr	r1, [pc, #20]	; (196c4 <k_delayed_work_submit_to_queue+0x7c>)
   196b0:	4642      	mov	r2, r8
   196b2:	464b      	mov	r3, r9
   196b4:	f105 0010 	add.w	r0, r5, #16
   196b8:	f000 f852 	bl	19760 <z_add_timeout>
   196bc:	e7df      	b.n	1967e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   196be:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   196c2:	e7dc      	b.n	1967e <k_delayed_work_submit_to_queue+0x36>
   196c4:	0001ef27 	.word	0x0001ef27

000196c8 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   196c8:	4b03      	ldr	r3, [pc, #12]	; (196d8 <elapsed+0x10>)
   196ca:	681b      	ldr	r3, [r3, #0]
   196cc:	b90b      	cbnz	r3, 196d2 <elapsed+0xa>
   196ce:	f7eb bcc3 	b.w	5058 <z_clock_elapsed>
}
   196d2:	2000      	movs	r0, #0
   196d4:	4770      	bx	lr
   196d6:	bf00      	nop
   196d8:	20002900 	.word	0x20002900

000196dc <remove_timeout>:
{
   196dc:	b530      	push	{r4, r5, lr}
   196de:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   196e0:	b168      	cbz	r0, 196fe <remove_timeout+0x22>
   196e2:	4a0a      	ldr	r2, [pc, #40]	; (1970c <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
   196e4:	6852      	ldr	r2, [r2, #4]
   196e6:	4290      	cmp	r0, r2
   196e8:	d009      	beq.n	196fe <remove_timeout+0x22>
	if (next(t) != NULL) {
   196ea:	b143      	cbz	r3, 196fe <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   196ec:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   196f0:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   196f4:	1912      	adds	r2, r2, r4
   196f6:	eb45 0101 	adc.w	r1, r5, r1
   196fa:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   196fe:	6842      	ldr	r2, [r0, #4]
   19700:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19702:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19704:	2300      	movs	r3, #0
	node->prev = NULL;
   19706:	e9c0 3300 	strd	r3, r3, [r0]
}
   1970a:	bd30      	pop	{r4, r5, pc}
   1970c:	200008f0 	.word	0x200008f0

00019710 <next_timeout>:

static int32_t next_timeout(void)
{
   19710:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
   19712:	4b11      	ldr	r3, [pc, #68]	; (19758 <next_timeout+0x48>)
   19714:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19716:	429c      	cmp	r4, r3
   19718:	bf08      	it	eq
   1971a:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   1971c:	f7ff ffd4 	bl	196c8 <elapsed>
   19720:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
   19722:	b1ac      	cbz	r4, 19750 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   19724:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
   19728:	1b40      	subs	r0, r0, r5
   1972a:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   1972e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   19732:	f171 0300 	sbcs.w	r3, r1, #0
   19736:	da0b      	bge.n	19750 <next_timeout+0x40>
		: MIN(MAX_WAIT, MAX(0, to->dticks - ticks_elapsed));
   19738:	2800      	cmp	r0, #0
   1973a:	f171 0300 	sbcs.w	r3, r1, #0
   1973e:	da00      	bge.n	19742 <next_timeout+0x32>
   19740:	2000      	movs	r0, #0

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   19742:	4b06      	ldr	r3, [pc, #24]	; (1975c <next_timeout+0x4c>)
   19744:	695b      	ldr	r3, [r3, #20]
   19746:	b113      	cbz	r3, 1974e <next_timeout+0x3e>
   19748:	4298      	cmp	r0, r3
   1974a:	bfa8      	it	ge
   1974c:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   1974e:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   19750:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
   19754:	e7f5      	b.n	19742 <next_timeout+0x32>
   19756:	bf00      	nop
   19758:	200008f0 	.word	0x200008f0
   1975c:	200028c0 	.word	0x200028c0

00019760 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
   19760:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19764:	9101      	str	r1, [sp, #4]
   19766:	4619      	mov	r1, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19768:	1c4b      	adds	r3, r1, #1
   1976a:	bf08      	it	eq
   1976c:	f1b2 3fff 	cmpeq.w	r2, #4294967295	; 0xffffffff
{
   19770:	4682      	mov	sl, r0
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   19772:	d06c      	beq.n	1984e <z_add_timeout+0xee>
	}

#ifdef CONFIG_LEGACY_TIMEOUT_API
	k_ticks_t ticks = timeout;
#else
	k_ticks_t ticks = timeout.ticks + 1;
   19774:	1c54      	adds	r4, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   19776:	f06f 0301 	mvn.w	r3, #1
	k_ticks_t ticks = timeout.ticks + 1;
   1977a:	f141 0500 	adc.w	r5, r1, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   1977e:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
   19782:	ebb3 0804 	subs.w	r8, r3, r4
   19786:	eb6b 0905 	sbc.w	r9, fp, r5
   1978a:	f1b8 0f00 	cmp.w	r8, #0
   1978e:	f179 0300 	sbcs.w	r3, r9, #0
   19792:	db0f      	blt.n	197b4 <z_add_timeout+0x54>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   19794:	f7ff ff98 	bl	196c8 <elapsed>
   19798:	4a33      	ldr	r2, [pc, #204]	; (19868 <z_add_timeout+0x108>)
   1979a:	e9d2 1c00 	ldrd	r1, ip, [r2]
   1979e:	f06f 0301 	mvn.w	r3, #1
   197a2:	1a5b      	subs	r3, r3, r1
   197a4:	eb6b 020c 	sbc.w	r2, fp, ip
   197a8:	1b1e      	subs	r6, r3, r4
   197aa:	eb62 0705 	sbc.w	r7, r2, r5
   197ae:	1a34      	subs	r4, r6, r0
   197b0:	eb67 75e0 	sbc.w	r5, r7, r0, asr #31
	}
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   197b4:	9b01      	ldr	r3, [sp, #4]
   197b6:	f8ca 3008 	str.w	r3, [sl, #8]
	__asm__ volatile(
   197ba:	f04f 0320 	mov.w	r3, #32
   197be:	f3ef 8611 	mrs	r6, BASEPRI
   197c2:	f383 8811 	msr	BASEPRI, r3
   197c6:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   197ca:	f7ff ff7d 	bl	196c8 <elapsed>
	ticks = MAX(1, ticks);
   197ce:	2c01      	cmp	r4, #1
   197d0:	f175 0300 	sbcs.w	r3, r5, #0
	return list->head == list;
   197d4:	4b25      	ldr	r3, [pc, #148]	; (1986c <z_add_timeout+0x10c>)
   197d6:	bfb8      	it	lt
   197d8:	2401      	movlt	r4, #1
   197da:	681a      	ldr	r2, [r3, #0]
   197dc:	bfb8      	it	lt
   197de:	2500      	movlt	r5, #0
		to->dticks = ticks + elapsed();
   197e0:	1824      	adds	r4, r4, r0
   197e2:	eb45 75e0 	adc.w	r5, r5, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   197e6:	429a      	cmp	r2, r3
   197e8:	e9ca 4504 	strd	r4, r5, [sl, #16]
   197ec:	d001      	beq.n	197f2 <z_add_timeout+0x92>
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   197ee:	685f      	ldr	r7, [r3, #4]
		for (t = first(); t != NULL; t = next(t)) {
   197f0:	b952      	cbnz	r2, 19808 <z_add_timeout+0xa8>
	node->prev = list->tail;
   197f2:	685a      	ldr	r2, [r3, #4]
   197f4:	f8ca 2004 	str.w	r2, [sl, #4]
	list->tail->next = node;
   197f8:	685a      	ldr	r2, [r3, #4]
	node->next = list;
   197fa:	f8ca 3000 	str.w	r3, [sl]
	list->tail->next = node;
   197fe:	f8c2 a000 	str.w	sl, [r2]
	list->tail = node;
   19802:	f8c3 a004 	str.w	sl, [r3, #4]
}
   19806:	e014      	b.n	19832 <z_add_timeout+0xd2>
			if (t->dticks > to->dticks) {
   19808:	e9d2 8904 	ldrd	r8, r9, [r2, #16]
   1980c:	e9da 4504 	ldrd	r4, r5, [sl, #16]
   19810:	4544      	cmp	r4, r8
   19812:	eb75 0109 	sbcs.w	r1, r5, r9
   19816:	da1d      	bge.n	19854 <z_add_timeout+0xf4>
				t->dticks -= to->dticks;
   19818:	ebb8 0004 	subs.w	r0, r8, r4
   1981c:	eb69 0105 	sbc.w	r1, r9, r5
   19820:	e9c2 0104 	strd	r0, r1, [r2, #16]
	node->prev = successor->prev;
   19824:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   19826:	e9ca 2100 	strd	r2, r1, [sl]
	successor->prev->next = node;
   1982a:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
   1982e:	f8c2 a004 	str.w	sl, [r2, #4]
	return list->head == list;
   19832:	681a      	ldr	r2, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   19834:	429a      	cmp	r2, r3
   19836:	d006      	beq.n	19846 <z_add_timeout+0xe6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   19838:	4592      	cmp	sl, r2
   1983a:	d104      	bne.n	19846 <z_add_timeout+0xe6>
			z_clock_set_timeout(next_timeout(), false);
   1983c:	f7ff ff68 	bl	19710 <next_timeout>
   19840:	2100      	movs	r1, #0
   19842:	f7eb fba7 	bl	4f94 <z_clock_set_timeout>
	__asm__ volatile(
   19846:	f386 8811 	msr	BASEPRI, r6
   1984a:	f3bf 8f6f 	isb	sy
		}
	}
}
   1984e:	b003      	add	sp, #12
   19850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			to->dticks -= t->dticks;
   19854:	ebb4 0008 	subs.w	r0, r4, r8
   19858:	eb65 0109 	sbc.w	r1, r5, r9
	return (node == list->tail) ? NULL : node->next;
   1985c:	42ba      	cmp	r2, r7
   1985e:	e9ca 0104 	strd	r0, r1, [sl, #16]
   19862:	d0c6      	beq.n	197f2 <z_add_timeout+0x92>
   19864:	6812      	ldr	r2, [r2, #0]
   19866:	e7c3      	b.n	197f0 <z_add_timeout+0x90>
   19868:	200013e0 	.word	0x200013e0
   1986c:	200008f0 	.word	0x200008f0

00019870 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   19870:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19874:	4606      	mov	r6, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   19876:	f7ff fb55 	bl	18f24 <z_time_slice>
	__asm__ volatile(
   1987a:	f04f 0320 	mov.w	r3, #32
   1987e:	f3ef 8411 	mrs	r4, BASEPRI
   19882:	f383 8811 	msr	BASEPRI, r3
   19886:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   1988a:	4d2c      	ldr	r5, [pc, #176]	; (1993c <z_clock_announce+0xcc>)
   1988c:	f8df a0b0 	ldr.w	sl, [pc, #176]	; 19940 <z_clock_announce+0xd0>
	return list->head == list;
   19890:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 19944 <z_clock_announce+0xd4>
   19894:	602e      	str	r6, [r5, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
   19896:	4651      	mov	r1, sl
   19898:	f8d5 c000 	ldr.w	ip, [r5]
   1989c:	f8db 0000 	ldr.w	r0, [fp]
   198a0:	4662      	mov	r2, ip
   198a2:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   198a4:	4558      	cmp	r0, fp
   198a6:	e9da 8900 	ldrd	r8, r9, [sl]
   198aa:	e9cd 2300 	strd	r2, r3, [sp]
   198ae:	d00d      	beq.n	198cc <z_clock_announce+0x5c>
   198b0:	b160      	cbz	r0, 198cc <z_clock_announce+0x5c>
   198b2:	e9d0 6704 	ldrd	r6, r7, [r0, #16]
   198b6:	45b4      	cmp	ip, r6
   198b8:	41bb      	sbcs	r3, r7
   198ba:	da1e      	bge.n	198fa <z_clock_announce+0x8a>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   198bc:	9b00      	ldr	r3, [sp, #0]
   198be:	ebb6 0c03 	subs.w	ip, r6, r3
   198c2:	9b01      	ldr	r3, [sp, #4]
   198c4:	eb67 0603 	sbc.w	r6, r7, r3
   198c8:	e9c0 c604 	strd	ip, r6, [r0, #16]
	}

	curr_tick += announce_remaining;
   198cc:	9b00      	ldr	r3, [sp, #0]
   198ce:	eb13 0208 	adds.w	r2, r3, r8
   198d2:	9b01      	ldr	r3, [sp, #4]
	announce_remaining = 0;
   198d4:	f04f 0600 	mov.w	r6, #0
	curr_tick += announce_remaining;
   198d8:	eb43 0309 	adc.w	r3, r3, r9
   198dc:	e9c1 2300 	strd	r2, r3, [r1]
	announce_remaining = 0;
   198e0:	602e      	str	r6, [r5, #0]

	z_clock_set_timeout(next_timeout(), false);
   198e2:	f7ff ff15 	bl	19710 <next_timeout>
   198e6:	4631      	mov	r1, r6
   198e8:	f7eb fb54 	bl	4f94 <z_clock_set_timeout>
	__asm__ volatile(
   198ec:	f384 8811 	msr	BASEPRI, r4
   198f0:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   198f4:	b003      	add	sp, #12
   198f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
   198fa:	eb18 0806 	adds.w	r8, r8, r6
		t->dticks = 0;
   198fe:	f04f 0200 	mov.w	r2, #0
   19902:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
   19906:	eb49 79e6 	adc.w	r9, r9, r6, asr #31
		t->dticks = 0;
   1990a:	e9c0 2304 	strd	r2, r3, [r0, #16]
		announce_remaining -= dt;
   1990e:	ebac 0606 	sub.w	r6, ip, r6
		curr_tick += dt;
   19912:	e9ca 8900 	strd	r8, r9, [sl]
		announce_remaining -= dt;
   19916:	602e      	str	r6, [r5, #0]
		remove_timeout(t);
   19918:	f7ff fee0 	bl	196dc <remove_timeout>
   1991c:	f384 8811 	msr	BASEPRI, r4
   19920:	f3bf 8f6f 	isb	sy
		t->fn(t);
   19924:	6883      	ldr	r3, [r0, #8]
   19926:	4798      	blx	r3
	__asm__ volatile(
   19928:	f04f 0320 	mov.w	r3, #32
   1992c:	f3ef 8411 	mrs	r4, BASEPRI
   19930:	f383 8811 	msr	BASEPRI, r3
   19934:	f3bf 8f6f 	isb	sy

	/* Note that we need to use the underlying arch-specific lock
	 * implementation.  The "irq_lock()" API in SMP context is
	 * actually a wrapper for a global spinlock!
	 */
	k.key = arch_irq_lock();
   19938:	4901      	ldr	r1, [pc, #4]	; (19940 <z_clock_announce+0xd0>)
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   1993a:	e7ad      	b.n	19898 <z_clock_announce+0x28>
   1993c:	20002900 	.word	0x20002900
   19940:	200013e0 	.word	0x200013e0
   19944:	200008f0 	.word	0x200008f0

00019948 <z_tick_get>:

int64_t z_tick_get(void)
{
   19948:	b510      	push	{r4, lr}
   1994a:	f04f 0320 	mov.w	r3, #32
   1994e:	f3ef 8411 	mrs	r4, BASEPRI
   19952:	f383 8811 	msr	BASEPRI, r3
   19956:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   1995a:	f7eb fb7d 	bl	5058 <z_clock_elapsed>
   1995e:	4b06      	ldr	r3, [pc, #24]	; (19978 <z_tick_get+0x30>)
   19960:	e9d3 2300 	ldrd	r2, r3, [r3]
   19964:	1812      	adds	r2, r2, r0
   19966:	f143 0300 	adc.w	r3, r3, #0
	__asm__ volatile(
   1996a:	f384 8811 	msr	BASEPRI, r4
   1996e:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   19972:	4610      	mov	r0, r2
   19974:	4619      	mov	r1, r3
   19976:	bd10      	pop	{r4, pc}
   19978:	200013e0 	.word	0x200013e0

0001997c <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   1997c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   1997e:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   19982:	1c56      	adds	r6, r2, #1
   19984:	f143 0700 	adc.w	r7, r3, #0
   19988:	2f00      	cmp	r7, #0
   1998a:	bf08      	it	eq
   1998c:	2e02      	cmpeq	r6, #2
{
   1998e:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   19990:	d302      	bcc.n	19998 <z_timer_expiration_handler+0x1c>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19992:	490c      	ldr	r1, [pc, #48]	; (199c4 <z_timer_expiration_handler+0x48>)
   19994:	f7ff fee4 	bl	19760 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   19998:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1999a:	3301      	adds	r3, #1
   1999c:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   1999e:	6a23      	ldr	r3, [r4, #32]
   199a0:	b10b      	cbz	r3, 199a6 <z_timer_expiration_handler+0x2a>
		timer->expiry_fn(timer);
   199a2:	4620      	mov	r0, r4
   199a4:	4798      	blx	r3
	return list->head == list;
   199a6:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   199aa:	42a5      	cmp	r5, r4
   199ac:	d008      	beq.n	199c0 <z_timer_expiration_handler+0x44>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   199ae:	b13d      	cbz	r5, 199c0 <z_timer_expiration_handler+0x44>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   199b0:	4628      	mov	r0, r5
   199b2:	f005 f9aa 	bl	1ed0a <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   199b6:	4628      	mov	r0, r5
   199b8:	f005 f9f5 	bl	1eda6 <z_ready_thread>
   199bc:	2300      	movs	r3, #0
   199be:	67eb      	str	r3, [r5, #124]	; 0x7c

	arch_thread_return_value_set(thread, 0);
}
   199c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   199c2:	bf00      	nop
   199c4:	0001997d 	.word	0x0001997d

000199c8 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   199c8:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
   199cc:	4619      	mov	r1, r3
   199ce:	4606      	mov	r6, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   199d0:	1c4c      	adds	r4, r1, #1
{
   199d2:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   199d4:	bf08      	it	eq
   199d6:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   199da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
   199de:	4680      	mov	r8, r0
   199e0:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   199e2:	d047      	beq.n	19a74 <z_impl_k_timer_start+0xac>
   199e4:	4614      	mov	r4, r2
   199e6:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   199e8:	ea54 0305 	orrs.w	r3, r4, r5
   199ec:	d016      	beq.n	19a1c <z_impl_k_timer_start+0x54>
   199ee:	f06f 0301 	mvn.w	r3, #1
   199f2:	ebb3 0a02 	subs.w	sl, r3, r2
   199f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   199fa:	eb63 0b05 	sbc.w	fp, r3, r5
   199fe:	f1ba 0f00 	cmp.w	sl, #0
   19a02:	f17b 0300 	sbcs.w	r3, fp, #0
   19a06:	da09      	bge.n	19a1c <z_impl_k_timer_start+0x54>
		period.ticks = MAX(period.ticks - 1, 1);
   19a08:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
   19a0c:	f145 35ff 	adc.w	r5, r5, #4294967295	; 0xffffffff
   19a10:	2c01      	cmp	r4, #1
   19a12:	f175 0300 	sbcs.w	r3, r5, #0
   19a16:	bfbc      	itt	lt
   19a18:	2401      	movlt	r4, #1
   19a1a:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   19a1c:	f06f 0301 	mvn.w	r3, #1
   19a20:	1a1b      	subs	r3, r3, r0
   19a22:	9300      	str	r3, [sp, #0]
   19a24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19a28:	eb63 0301 	sbc.w	r3, r3, r1
   19a2c:	9301      	str	r3, [sp, #4]
   19a2e:	e9dd 2300 	ldrd	r2, r3, [sp]
   19a32:	2a00      	cmp	r2, #0
   19a34:	f173 0300 	sbcs.w	r3, r3, #0
   19a38:	da0c      	bge.n	19a54 <z_impl_k_timer_start+0x8c>
		duration.ticks = MAX(duration.ticks - 1, 0);
   19a3a:	f110 38ff 	adds.w	r8, r0, #4294967295	; 0xffffffff
   19a3e:	f141 39ff 	adc.w	r9, r1, #4294967295	; 0xffffffff
   19a42:	f1b8 0f00 	cmp.w	r8, #0
   19a46:	f179 0300 	sbcs.w	r3, r9, #0
   19a4a:	bfbc      	itt	lt
   19a4c:	f04f 0800 	movlt.w	r8, #0
   19a50:	f04f 0900 	movlt.w	r9, #0
	}
#endif

	(void)z_abort_timeout(&timer->timeout);
   19a54:	4630      	mov	r0, r6
   19a56:	f005 face 	bl	1eff6 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   19a5a:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19a5c:	4907      	ldr	r1, [pc, #28]	; (19a7c <z_impl_k_timer_start+0xb4>)
	timer->status = 0U;
   19a5e:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19a60:	4642      	mov	r2, r8
   19a62:	464b      	mov	r3, r9
   19a64:	4630      	mov	r0, r6
	timer->period = period;
   19a66:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
   19a6a:	b002      	add	sp, #8
   19a6c:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   19a70:	f7ff be76 	b.w	19760 <z_add_timeout>
}
   19a74:	b002      	add	sp, #8
   19a76:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
   19a7a:	bf00      	nop
   19a7c:	0001997d 	.word	0x0001997d

00019a80 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   19a80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   19a84:	b089      	sub	sp, #36	; 0x24
   19a86:	461f      	mov	r7, r3
	int events_registered;
	k_spinlock_key_t key;
	struct _poller poller = { .is_polling = true,
   19a88:	2301      	movs	r3, #1
   19a8a:	f88d 3014 	strb.w	r3, [sp, #20]
				  .thread     = _current,
   19a8e:	4b29      	ldr	r3, [pc, #164]	; (19b34 <z_impl_k_poll+0xb4>)
	struct _poller poller = { .is_polling = true,
   19a90:	689b      	ldr	r3, [r3, #8]
   19a92:	9306      	str	r3, [sp, #24]
   19a94:	4b28      	ldr	r3, [pc, #160]	; (19b38 <z_impl_k_poll+0xb8>)
   19a96:	9307      	str	r3, [sp, #28]

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, &poller,
   19a98:	ea52 0307 	orrs.w	r3, r2, r7
{
   19a9c:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, &poller,
   19a9e:	bf0c      	ite	eq
   19aa0:	2301      	moveq	r3, #1
   19aa2:	2300      	movne	r3, #0
   19aa4:	aa05      	add	r2, sp, #20
{
   19aa6:	4605      	mov	r5, r0
	events_registered = register_events(events, num_events, &poller,
   19aa8:	f005 fbd3 	bl	1f252 <register_events>
   19aac:	4680      	mov	r8, r0
	__asm__ volatile(
   19aae:	f04f 0320 	mov.w	r3, #32
   19ab2:	f3ef 8911 	mrs	r9, BASEPRI
   19ab6:	f383 8811 	msr	BASEPRI, r3
   19aba:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller.is_polling) {
   19abe:	f89d 3014 	ldrb.w	r3, [sp, #20]
   19ac2:	f003 04ff 	and.w	r4, r3, #255	; 0xff
   19ac6:	b963      	cbnz	r3, 19ae2 <z_impl_k_poll+0x62>
		clear_event_registrations(events, events_registered, key);
   19ac8:	4601      	mov	r1, r0
   19aca:	464a      	mov	r2, r9
   19acc:	4628      	mov	r0, r5
   19ace:	f005 fb23 	bl	1f118 <clear_event_registrations>
	__asm__ volatile(
   19ad2:	f389 8811 	msr	BASEPRI, r9
   19ad6:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   19ada:	4620      	mov	r0, r4
   19adc:	b009      	add	sp, #36	; 0x24
   19ade:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	poller.is_polling = false;
   19ae2:	2300      	movs	r3, #0
   19ae4:	f88d 3014 	strb.w	r3, [sp, #20]
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   19ae8:	ea56 0307 	orrs.w	r3, r6, r7
   19aec:	d106      	bne.n	19afc <z_impl_k_poll+0x7c>
   19aee:	f389 8811 	msr	BASEPRI, r9
   19af2:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   19af6:	f06f 040a 	mvn.w	r4, #10
   19afa:	e7ee      	b.n	19ada <z_impl_k_poll+0x5a>
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19afc:	aa03      	add	r2, sp, #12
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19afe:	e9cd 6700 	strd	r6, r7, [sp]
   19b02:	4649      	mov	r1, r9
   19b04:	480d      	ldr	r0, [pc, #52]	; (19b3c <z_impl_k_poll+0xbc>)
	_wait_q_t wait_q = Z_WAIT_Q_INIT(&wait_q);
   19b06:	e9cd 2203 	strd	r2, r2, [sp, #12]
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   19b0a:	f7ff fb41 	bl	19190 <z_pend_curr>
   19b0e:	4604      	mov	r4, r0
	__asm__ volatile(
   19b10:	f04f 0320 	mov.w	r3, #32
   19b14:	f3ef 8611 	mrs	r6, BASEPRI
   19b18:	f383 8811 	msr	BASEPRI, r3
   19b1c:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   19b20:	4632      	mov	r2, r6
   19b22:	4641      	mov	r1, r8
   19b24:	4628      	mov	r0, r5
   19b26:	f005 faf7 	bl	1f118 <clear_event_registrations>
	__asm__ volatile(
   19b2a:	f386 8811 	msr	BASEPRI, r6
   19b2e:	f3bf 8f6f 	isb	sy
	return swap_rc;
   19b32:	e7d2      	b.n	19ada <z_impl_k_poll+0x5a>
   19b34:	200028c0 	.word	0x200028c0
   19b38:	0001f1a5 	.word	0x0001f1a5
   19b3c:	200029d7 	.word	0x200029d7

00019b40 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   19b40:	b538      	push	{r3, r4, r5, lr}
   19b42:	4603      	mov	r3, r0
	__asm__ volatile(
   19b44:	f04f 0220 	mov.w	r2, #32
   19b48:	f3ef 8511 	mrs	r5, BASEPRI
   19b4c:	f382 8811 	msr	BASEPRI, r2
   19b50:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   19b54:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   19b56:	2101      	movs	r1, #1
   19b58:	6081      	str	r1, [r0, #8]
	return list->head == list;
   19b5a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   19b5c:	4283      	cmp	r3, r0
   19b5e:	d106      	bne.n	19b6e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   19b60:	f385 8811 	msr	BASEPRI, r5
   19b64:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   19b68:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   19b6a:	4620      	mov	r0, r4
   19b6c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   19b6e:	e9d0 3200 	ldrd	r3, r2, [r0]
   19b72:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   19b74:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   19b76:	2300      	movs	r3, #0
	node->prev = NULL;
   19b78:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19b7c:	f005 faf7 	bl	1f16e <signal_poll_event>
	z_reschedule(&lock, key);
   19b80:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   19b82:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   19b84:	4801      	ldr	r0, [pc, #4]	; (19b8c <z_impl_k_poll_signal_raise+0x4c>)
   19b86:	f7ff f8c7 	bl	18d18 <z_reschedule>
	return rc;
   19b8a:	e7ee      	b.n	19b6a <z_impl_k_poll_signal_raise+0x2a>
   19b8c:	200029d7 	.word	0x200029d7

00019b90 <z_thread_malloc>:
#else
#define _HEAP_MEM_POOL	NULL
#endif

void *z_thread_malloc(size_t size)
{
   19b90:	b510      	push	{r4, lr}
   19b92:	4604      	mov	r4, r0
	void *ret;
	struct k_mem_pool *pool;

	if (k_is_in_isr()) {
   19b94:	f005 f9a4 	bl	1eee0 <k_is_in_isr>
   19b98:	b940      	cbnz	r0, 19bac <z_thread_malloc+0x1c>
		pool = _HEAP_MEM_POOL;
	} else {
		pool = _current->resource_pool;
   19b9a:	4b05      	ldr	r3, [pc, #20]	; (19bb0 <z_thread_malloc+0x20>)
   19b9c:	689b      	ldr	r3, [r3, #8]
   19b9e:	6f58      	ldr	r0, [r3, #116]	; 0x74
	}

	if (pool) {
   19ba0:	b120      	cbz	r0, 19bac <z_thread_malloc+0x1c>
		ret = k_mem_pool_malloc(pool, size);
   19ba2:	4621      	mov	r1, r4
	} else {
		ret = NULL;
	}

	return ret;
}
   19ba4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ret = k_mem_pool_malloc(pool, size);
   19ba8:	f005 bbd1 	b.w	1f34e <k_mem_pool_malloc>
}
   19bac:	2000      	movs	r0, #0
   19bae:	bd10      	pop	{r4, pc}
   19bb0:	200028c0 	.word	0x200028c0

00019bb4 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   19bb4:	b510      	push	{r4, lr}
   19bb6:	460a      	mov	r2, r1
	struct gpio_driver_data *data =
   19bb8:	68c4      	ldr	r4, [r0, #12]
	return api->pin_configure(port, pin, flags);
   19bba:	6883      	ldr	r3, [r0, #8]
   19bbc:	2104      	movs	r1, #4
   19bbe:	681b      	ldr	r3, [r3, #0]
   19bc0:	4798      	blx	r3
	if (ret != 0) {
   19bc2:	b918      	cbnz	r0, 19bcc <gpio_pin_configure.constprop.0+0x18>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   19bc4:	6823      	ldr	r3, [r4, #0]
   19bc6:	f023 0310 	bic.w	r3, r3, #16
   19bca:	6023      	str	r3, [r4, #0]
}
   19bcc:	bd10      	pop	{r4, pc}

00019bce <sensor_channel_get>:
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
   19bce:	6883      	ldr	r3, [r0, #8]
   19bd0:	691b      	ldr	r3, [r3, #16]
   19bd2:	4718      	bx	r3

00019bd4 <T_ccc_cfg_changed>:
}
   19bd4:	4770      	bx	lr

00019bd6 <H_ccc_cfg_changed>:
}
   19bd6:	4770      	bx	lr

00019bd8 <P_ccc_cfg_changed>:
}
   19bd8:	4770      	bx	lr

00019bda <G_ccc_cfg_changed>:
}
   19bda:	4770      	bx	lr

00019bdc <B_ccc_cfg_changed>:
}
   19bdc:	4770      	bx	lr

00019bde <A_ccc_cfg_changed>:
}
   19bde:	4770      	bx	lr

00019be0 <connected>:
}
   19be0:	4770      	bx	lr

00019be2 <write_A>:
{
   19be2:	b510      	push	{r4, lr}
   19be4:	f8bd 4008 	ldrh.w	r4, [sp, #8]
    if (offset) {
   19be8:	b934      	cbnz	r4, 19bf8 <write_A+0x16>
    if (!len || len > sizeof(uint16_t)) {
   19bea:	3b01      	subs	r3, #1
   19bec:	2b01      	cmp	r3, #1
   19bee:	d806      	bhi.n	19bfe <write_A+0x1c>
    sleep_now();
   19bf0:	f7e9 fe5e 	bl	38b0 <sleep_now>
    return 0;
   19bf4:	4620      	mov	r0, r4
}
   19bf6:	bd10      	pop	{r4, pc}
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   19bf8:	f06f 0006 	mvn.w	r0, #6
   19bfc:	e7fb      	b.n	19bf6 <write_A+0x14>
        return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   19bfe:	f06f 000c 	mvn.w	r0, #12
   19c02:	e7f8      	b.n	19bf6 <write_A+0x14>

00019c04 <read_T>:
{
   19c04:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   19c06:	2404      	movs	r4, #4
   19c08:	9402      	str	r4, [sp, #8]
   19c0a:	68cc      	ldr	r4, [r1, #12]
   19c0c:	9401      	str	r4, [sp, #4]
   19c0e:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   19c12:	9400      	str	r4, [sp, #0]
   19c14:	f003 fda6 	bl	1d764 <bt_gatt_attr_read>
}
   19c18:	b004      	add	sp, #16
   19c1a:	bd10      	pop	{r4, pc}

00019c1c <read_H>:
   19c1c:	b410      	push	{r4}
   19c1e:	f8bd 4004 	ldrh.w	r4, [sp, #4]
   19c22:	9401      	str	r4, [sp, #4]
   19c24:	bc10      	pop	{r4}
   19c26:	f7ff bfed 	b.w	19c04 <read_T>

00019c2a <read_P>:
   19c2a:	b410      	push	{r4}
   19c2c:	f8bd 4004 	ldrh.w	r4, [sp, #4]
   19c30:	9401      	str	r4, [sp, #4]
   19c32:	bc10      	pop	{r4}
   19c34:	f7ff bfe6 	b.w	19c04 <read_T>

00019c38 <read_G>:
   19c38:	b410      	push	{r4}
   19c3a:	f8bd 4004 	ldrh.w	r4, [sp, #4]
   19c3e:	9401      	str	r4, [sp, #4]
   19c40:	bc10      	pop	{r4}
   19c42:	f7ff bfdf 	b.w	19c04 <read_T>

00019c46 <read_B>:
   19c46:	b410      	push	{r4}
   19c48:	f8bd 4004 	ldrh.w	r4, [sp, #4]
   19c4c:	9401      	str	r4, [sp, #4]
   19c4e:	bc10      	pop	{r4}
   19c50:	f7ff bfd8 	b.w	19c04 <read_T>

00019c54 <read_A>:
   19c54:	b410      	push	{r4}
   19c56:	f8bd 4004 	ldrh.w	r4, [sp, #4]
   19c5a:	9401      	str	r4, [sp, #4]
   19c5c:	bc10      	pop	{r4}
   19c5e:	f7ff bfd1 	b.w	19c04 <read_T>

00019c62 <bt_gatt_notify.constprop.0>:
 *  @param data Pointer to Attribute data.
 *  @param len Attribute value length.
 *
 *  @return 0 in case of success or negative value in case of error.
 */
static inline int bt_gatt_notify(struct bt_conn *conn,
   19c62:	b530      	push	{r4, r5, lr}
   19c64:	b087      	sub	sp, #28
   19c66:	4605      	mov	r5, r0
   19c68:	460c      	mov	r4, r1
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
   19c6a:	2218      	movs	r2, #24
   19c6c:	2100      	movs	r1, #0
   19c6e:	4668      	mov	r0, sp
   19c70:	f001 ff06 	bl	1ba80 <memset>

	params.attr = attr;
	params.data = data;
	params.len = len;
   19c74:	2304      	movs	r3, #4

	return bt_gatt_notify_cb(conn, &params);
   19c76:	4669      	mov	r1, sp
   19c78:	2000      	movs	r0, #0
	params.data = data;
   19c7a:	e9cd 5401 	strd	r5, r4, [sp, #4]
	params.len = len;
   19c7e:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
   19c82:	f7ef fed1 	bl	9a28 <bt_gatt_notify_cb>
}
   19c86:	b007      	add	sp, #28
   19c88:	bd30      	pop	{r4, r5, pc}

00019c8a <disconnected>:
   19c8a:	4770      	bx	lr

00019c8c <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   19c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   19c8e:	f04f 0c0a 	mov.w	ip, #10
{
   19c92:	4605      	mov	r5, r0
	while (buflen > 0 && divisor > 0) {
   19c94:	2604      	movs	r6, #4
	uint8_t num_digits = 0;
   19c96:	2000      	movs	r0, #0
	uint8_t divisor = 100;
   19c98:	2464      	movs	r4, #100	; 0x64
	while (buflen > 0 && divisor > 0) {
   19c9a:	b111      	cbz	r1, 19ca2 <u8_to_dec+0x16>
   19c9c:	3e01      	subs	r6, #1
   19c9e:	d101      	bne.n	19ca4 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   19ca0:	702e      	strb	r6, [r5, #0]
	}

	return num_digits;
}
   19ca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   19ca4:	42a2      	cmp	r2, r4
		digit = value / divisor;
   19ca6:	fbb2 f7f4 	udiv	r7, r2, r4
   19caa:	b2fb      	uxtb	r3, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   19cac:	d202      	bcs.n	19cb4 <u8_to_dec+0x28>
   19cae:	2c01      	cmp	r4, #1
   19cb0:	d000      	beq.n	19cb4 <u8_to_dec+0x28>
   19cb2:	b130      	cbz	r0, 19cc2 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   19cb4:	3330      	adds	r3, #48	; 0x30
   19cb6:	f805 3b01 	strb.w	r3, [r5], #1
			buflen--;
   19cba:	3901      	subs	r1, #1
			num_digits++;
   19cbc:	1c43      	adds	r3, r0, #1
			buflen--;
   19cbe:	b2c9      	uxtb	r1, r1
			num_digits++;
   19cc0:	b2d8      	uxtb	r0, r3
		value -= digit * divisor;
   19cc2:	fb04 2217 	mls	r2, r4, r7, r2
   19cc6:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   19cc8:	fbb4 f4fc 	udiv	r4, r4, ip
   19ccc:	e7e5      	b.n	19c9a <u8_to_dec+0xe>

00019cce <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   19cce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   19cd2:	b2db      	uxtb	r3, r3
   19cd4:	2b09      	cmp	r3, #9
   19cd6:	d802      	bhi.n	19cde <char2hex+0x10>
		*x = c - '0';
   19cd8:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   19cda:	2000      	movs	r0, #0
   19cdc:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   19cde:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   19ce2:	2b05      	cmp	r3, #5
   19ce4:	d802      	bhi.n	19cec <char2hex+0x1e>
		*x = c - 'a' + 10;
   19ce6:	3857      	subs	r0, #87	; 0x57
   19ce8:	7008      	strb	r0, [r1, #0]
   19cea:	e7f6      	b.n	19cda <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   19cec:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   19cf0:	2b05      	cmp	r3, #5
   19cf2:	d801      	bhi.n	19cf8 <char2hex+0x2a>
		*x = c - 'A' + 10;
   19cf4:	3837      	subs	r0, #55	; 0x37
   19cf6:	e7f7      	b.n	19ce8 <char2hex+0x1a>
		return -EINVAL;
   19cf8:	f06f 0015 	mvn.w	r0, #21
}
   19cfc:	4770      	bx	lr

00019cfe <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   19cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   19d00:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   19d02:	f001 0001 	and.w	r0, r1, #1
   19d06:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   19d0a:	429d      	cmp	r5, r3
   19d0c:	ea4f 0651 	mov.w	r6, r1, lsr #1
   19d10:	d903      	bls.n	19d1a <hex2bin+0x1c>
		return 0;
   19d12:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   19d14:	4628      	mov	r0, r5
   19d16:	b003      	add	sp, #12
   19d18:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   19d1a:	b158      	cbz	r0, 19d34 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   19d1c:	7820      	ldrb	r0, [r4, #0]
   19d1e:	f10d 0107 	add.w	r1, sp, #7
   19d22:	f7ff ffd4 	bl	19cce <char2hex>
   19d26:	2800      	cmp	r0, #0
   19d28:	dbf3      	blt.n	19d12 <hex2bin+0x14>
		buf[0] = dec;
   19d2a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19d2e:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   19d32:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   19d34:	3401      	adds	r4, #1
   19d36:	4416      	add	r6, r2
   19d38:	42b2      	cmp	r2, r6
   19d3a:	d0eb      	beq.n	19d14 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   19d3c:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   19d40:	f10d 0107 	add.w	r1, sp, #7
   19d44:	f7ff ffc3 	bl	19cce <char2hex>
   19d48:	2800      	cmp	r0, #0
   19d4a:	dbe2      	blt.n	19d12 <hex2bin+0x14>
		buf[i] = dec << 4;
   19d4c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   19d50:	011b      	lsls	r3, r3, #4
   19d52:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   19d54:	f814 0b02 	ldrb.w	r0, [r4], #2
   19d58:	f10d 0107 	add.w	r1, sp, #7
   19d5c:	f7ff ffb7 	bl	19cce <char2hex>
   19d60:	2800      	cmp	r0, #0
   19d62:	dbd6      	blt.n	19d12 <hex2bin+0x14>
		buf[i] += dec;
   19d64:	7813      	ldrb	r3, [r2, #0]
   19d66:	f89d 1007 	ldrb.w	r1, [sp, #7]
   19d6a:	440b      	add	r3, r1
   19d6c:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   19d70:	e7e2      	b.n	19d38 <hex2bin+0x3a>

00019d72 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   19d72:	4603      	mov	r3, r0
   19d74:	b140      	cbz	r0, 19d88 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19d76:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19d78:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   19d7c:	2a02      	cmp	r2, #2
   19d7e:	d006      	beq.n	19d8e <sys_notify_validate+0x1c>
   19d80:	2a03      	cmp	r2, #3
   19d82:	d004      	beq.n	19d8e <sys_notify_validate+0x1c>
   19d84:	2a01      	cmp	r2, #1
   19d86:	d005      	beq.n	19d94 <sys_notify_validate+0x22>
		return -EINVAL;
   19d88:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   19d8c:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   19d8e:	681a      	ldr	r2, [r3, #0]
   19d90:	2a00      	cmp	r2, #0
   19d92:	d0f9      	beq.n	19d88 <sys_notify_validate+0x16>
		notify->result = 0;
   19d94:	2000      	movs	r0, #0
   19d96:	6098      	str	r0, [r3, #8]
   19d98:	4770      	bx	lr

00019d9a <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   19d9a:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   19d9c:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   19da0:	2a02      	cmp	r2, #2
{
   19da2:	b510      	push	{r4, lr}
   19da4:	4603      	mov	r3, r0
	notify->result = res;
   19da6:	6081      	str	r1, [r0, #8]
	switch (method) {
   19da8:	d00a      	beq.n	19dc0 <sys_notify_finalize+0x26>
   19daa:	2a03      	cmp	r2, #3
   19dac:	d10b      	bne.n	19dc6 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   19dae:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   19db0:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   19db2:	2200      	movs	r2, #0
   19db4:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   19db6:	b108      	cbz	r0, 19dbc <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   19db8:	f7ff fec2 	bl	19b40 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   19dbc:	4620      	mov	r0, r4
   19dbe:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   19dc0:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   19dc2:	2400      	movs	r4, #0
		break;
   19dc4:	e7f5      	b.n	19db2 <sys_notify_finalize+0x18>
	switch (method) {
   19dc6:	2400      	movs	r4, #0
   19dc8:	4620      	mov	r0, r4
   19dca:	e7f2      	b.n	19db2 <sys_notify_finalize+0x18>

00019dcc <arch_printk_char_out>:
}
   19dcc:	2000      	movs	r0, #0
   19dce:	4770      	bx	lr

00019dd0 <str_out>:
{
   19dd0:	b530      	push	{r4, r5, lr}
   19dd2:	688a      	ldr	r2, [r1, #8]
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   19dd4:	680c      	ldr	r4, [r1, #0]
   19dd6:	1c55      	adds	r5, r2, #1
   19dd8:	b114      	cbz	r4, 19de0 <str_out+0x10>
   19dda:	684b      	ldr	r3, [r1, #4]
   19ddc:	4293      	cmp	r3, r2
   19dde:	dc01      	bgt.n	19de4 <str_out+0x14>
		ctx->count++;
   19de0:	608d      	str	r5, [r1, #8]
}
   19de2:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   19de4:	3b01      	subs	r3, #1
   19de6:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   19de8:	bf08      	it	eq
   19dea:	2200      	moveq	r2, #0
   19dec:	608d      	str	r5, [r1, #8]
   19dee:	bf0c      	ite	eq
   19df0:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   19df2:	54a0      	strbne	r0, [r4, r2]
   19df4:	e7f5      	b.n	19de2 <str_out+0x12>

00019df6 <printk>:
{
   19df6:	b40f      	push	{r0, r1, r2, r3}
   19df8:	b507      	push	{r0, r1, r2, lr}
   19dfa:	a904      	add	r1, sp, #16
   19dfc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   19e00:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   19e02:	f7e9 ffc9 	bl	3d98 <vprintk>
}
   19e06:	b003      	add	sp, #12
   19e08:	f85d eb04 	ldr.w	lr, [sp], #4
   19e0c:	b004      	add	sp, #16
   19e0e:	4770      	bx	lr

00019e10 <snprintk>:
{
   19e10:	b40c      	push	{r2, r3}
   19e12:	b507      	push	{r0, r1, r2, lr}
   19e14:	ab04      	add	r3, sp, #16
   19e16:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   19e1a:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   19e1c:	f7e9 ffca 	bl	3db4 <vsnprintk>
}
   19e20:	b003      	add	sp, #12
   19e22:	f85d eb04 	ldr.w	lr, [sp], #4
   19e26:	b002      	add	sp, #8
   19e28:	4770      	bx	lr

00019e2a <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19e2a:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   19e2c:	f013 0307 	ands.w	r3, r3, #7
   19e30:	d105      	bne.n	19e3e <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   19e32:	6803      	ldr	r3, [r0, #0]
   19e34:	2b00      	cmp	r3, #0
		evt = EVT_START;
   19e36:	bf0c      	ite	eq
   19e38:	2000      	moveq	r0, #0
   19e3a:	2003      	movne	r0, #3
   19e3c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   19e3e:	2b02      	cmp	r3, #2
   19e40:	d105      	bne.n	19e4e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   19e42:	8b43      	ldrh	r3, [r0, #26]
   19e44:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
   19e46:	bf14      	ite	ne
   19e48:	2000      	movne	r0, #0
   19e4a:	2004      	moveq	r0, #4
   19e4c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   19e4e:	2b01      	cmp	r3, #1
   19e50:	d105      	bne.n	19e5e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   19e52:	6803      	ldr	r3, [r0, #0]
   19e54:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
   19e56:	bf0c      	ite	eq
   19e58:	2000      	moveq	r0, #0
   19e5a:	2005      	movne	r0, #5
   19e5c:	4770      	bx	lr
	int evt = EVT_NOP;
   19e5e:	2000      	movs	r0, #0
}
   19e60:	4770      	bx	lr

00019e62 <notify_one>:
{
   19e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19e66:	460d      	mov	r5, r1
   19e68:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19e6a:	4619      	mov	r1, r3
   19e6c:	1d28      	adds	r0, r5, #4
{
   19e6e:	4690      	mov	r8, r2
   19e70:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   19e72:	f7ff ff92 	bl	19d9a <sys_notify_finalize>
	if (cb) {
   19e76:	4604      	mov	r4, r0
   19e78:	b138      	cbz	r0, 19e8a <notify_one+0x28>
		cb(mgr, cli, state, res);
   19e7a:	4633      	mov	r3, r6
   19e7c:	4642      	mov	r2, r8
   19e7e:	4629      	mov	r1, r5
   19e80:	4638      	mov	r0, r7
   19e82:	46a4      	mov	ip, r4
}
   19e84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   19e88:	4760      	bx	ip
}
   19e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00019e8e <transition_complete>:
{
   19e8e:	b410      	push	{r4}
	__asm__ volatile(
   19e90:	f04f 0420 	mov.w	r4, #32
   19e94:	f3ef 8211 	mrs	r2, BASEPRI
   19e98:	f384 8811 	msr	BASEPRI, r4
   19e9c:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   19ea0:	6141      	str	r1, [r0, #20]
}
   19ea2:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   19ea4:	2101      	movs	r1, #1
   19ea6:	f7e9 bf99 	b.w	3ddc <process_event>

00019eaa <validate_args>:
{
   19eaa:	b510      	push	{r4, lr}
   19eac:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   19eae:	b140      	cbz	r0, 19ec2 <validate_args+0x18>
   19eb0:	b139      	cbz	r1, 19ec2 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   19eb2:	1d08      	adds	r0, r1, #4
   19eb4:	f7ff ff5d 	bl	19d72 <sys_notify_validate>
	if ((rv == 0)
   19eb8:	b928      	cbnz	r0, 19ec6 <validate_args+0x1c>
	    && ((cli->notify.flags
   19eba:	68a3      	ldr	r3, [r4, #8]
   19ebc:	f033 0303 	bics.w	r3, r3, #3
   19ec0:	d001      	beq.n	19ec6 <validate_args+0x1c>
		rv = -EINVAL;
   19ec2:	f06f 0015 	mvn.w	r0, #21
}
   19ec6:	bd10      	pop	{r4, pc}

00019ec8 <onoff_manager_init>:
{
   19ec8:	b538      	push	{r3, r4, r5, lr}
   19eca:	460c      	mov	r4, r1
	if ((mgr == NULL)
   19ecc:	4605      	mov	r5, r0
   19ece:	b158      	cbz	r0, 19ee8 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   19ed0:	b151      	cbz	r1, 19ee8 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   19ed2:	680b      	ldr	r3, [r1, #0]
   19ed4:	b143      	cbz	r3, 19ee8 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   19ed6:	684b      	ldr	r3, [r1, #4]
   19ed8:	b133      	cbz	r3, 19ee8 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   19eda:	221c      	movs	r2, #28
   19edc:	2100      	movs	r1, #0
   19ede:	f001 fdcf 	bl	1ba80 <memset>
   19ee2:	612c      	str	r4, [r5, #16]
	return 0;
   19ee4:	2000      	movs	r0, #0
}
   19ee6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   19ee8:	f06f 0015 	mvn.w	r0, #21
   19eec:	e7fb      	b.n	19ee6 <onoff_manager_init+0x1e>

00019eee <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   19eee:	b570      	push	{r4, r5, r6, lr}
   19ef0:	4604      	mov	r4, r0
   19ef2:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   19ef4:	f7ff ffd9 	bl	19eaa <validate_args>

	if (rv < 0) {
   19ef8:	1e05      	subs	r5, r0, #0
   19efa:	db31      	blt.n	19f60 <onoff_request+0x72>
   19efc:	f04f 0320 	mov.w	r3, #32
   19f00:	f3ef 8111 	mrs	r1, BASEPRI
   19f04:	f383 8811 	msr	BASEPRI, r3
   19f08:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   19f0c:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   19f0e:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   19f10:	f64f 75ff 	movw	r5, #65535	; 0xffff
   19f14:	42ab      	cmp	r3, r5
   19f16:	f000 0207 	and.w	r2, r0, #7
   19f1a:	d02e      	beq.n	19f7a <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   19f1c:	2a02      	cmp	r2, #2
   19f1e:	d10e      	bne.n	19f3e <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   19f20:	3301      	adds	r3, #1
   19f22:	8363      	strh	r3, [r4, #26]
	rv = state;
   19f24:	4615      	mov	r5, r2
		notify = true;
   19f26:	2301      	movs	r3, #1
	__asm__ volatile(
   19f28:	f381 8811 	msr	BASEPRI, r1
   19f2c:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   19f30:	b1b3      	cbz	r3, 19f60 <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   19f32:	2300      	movs	r3, #0
   19f34:	4631      	mov	r1, r6
   19f36:	4620      	mov	r0, r4
   19f38:	f7ff ff93 	bl	19e62 <notify_one>
   19f3c:	e010      	b.n	19f60 <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   19f3e:	0783      	lsls	r3, r0, #30
   19f40:	d001      	beq.n	19f46 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   19f42:	2a06      	cmp	r2, #6
   19f44:	d10e      	bne.n	19f64 <onoff_request+0x76>
	parent->next = child;
   19f46:	2300      	movs	r3, #0
   19f48:	6033      	str	r3, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   19f4a:	6863      	ldr	r3, [r4, #4]
   19f4c:	b993      	cbnz	r3, 19f74 <onoff_request+0x86>
	list->head = node;
   19f4e:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   19f52:	4615      	mov	r5, r2
   19f54:	b962      	cbnz	r2, 19f70 <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   19f56:	460a      	mov	r2, r1
   19f58:	4620      	mov	r0, r4
   19f5a:	2102      	movs	r1, #2
   19f5c:	f7e9 ff3e 	bl	3ddc <process_event>
		}
	}

	return rv;
}
   19f60:	4628      	mov	r0, r5
   19f62:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   19f64:	2a05      	cmp	r2, #5
   19f66:	bf0c      	ite	eq
   19f68:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   19f6c:	f06f 0504 	mvnne.w	r5, #4
   19f70:	2300      	movs	r3, #0
   19f72:	e7d9      	b.n	19f28 <onoff_request+0x3a>
	parent->next = child;
   19f74:	601e      	str	r6, [r3, #0]
	list->tail = node;
   19f76:	6066      	str	r6, [r4, #4]
}
   19f78:	e7eb      	b.n	19f52 <onoff_request+0x64>
		rv = -EAGAIN;
   19f7a:	f06f 050a 	mvn.w	r5, #10
   19f7e:	e7f7      	b.n	19f70 <onoff_request+0x82>

00019f80 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   19f80:	4604      	mov	r4, r0
   19f82:	b508      	push	{r3, lr}
   19f84:	4608      	mov	r0, r1
   19f86:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   19f88:	461a      	mov	r2, r3
   19f8a:	47a0      	blx	r4
	return z_impl_k_current_get();
   19f8c:	f7ff f9fa 	bl	19384 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   19f90:	f7eb fc50 	bl	5834 <z_impl_k_thread_abort>

00019f94 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   19f94:	b510      	push	{r4, lr}
   19f96:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   19f98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   19f9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   19fa0:	4620      	mov	r0, r4
   19fa2:	f7fe fe43 	bl	18c2c <z_impl_k_queue_get>
   19fa6:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   19fa8:	2800      	cmp	r0, #0
   19faa:	d0f5      	beq.n	19f98 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   19fac:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   19fae:	6842      	ldr	r2, [r0, #4]
   19fb0:	f3bf 8f5b 	dmb	ish
   19fb4:	e853 1f00 	ldrex	r1, [r3]
   19fb8:	f021 0c01 	bic.w	ip, r1, #1
   19fbc:	e843 ce00 	strex	lr, ip, [r3]
   19fc0:	f1be 0f00 	cmp.w	lr, #0
   19fc4:	d1f6      	bne.n	19fb4 <z_work_q_main+0x20>
   19fc6:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   19fca:	07cb      	lsls	r3, r1, #31
   19fcc:	d500      	bpl.n	19fd0 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   19fce:	4790      	blx	r2
	z_impl_k_yield();
   19fd0:	f7ff f96c 	bl	192ac <z_impl_k_yield>
   19fd4:	e7e0      	b.n	19f98 <z_work_q_main+0x4>

00019fd6 <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   19fd6:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   19fd8:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   19fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   19fe0:	bf2c      	ite	cs
   19fe2:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   19fe6:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   19fea:	4770      	bx	lr

00019fec <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   19fec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   19ff0:	6880      	ldr	r0, [r0, #8]
   19ff2:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   19ff6:	bf2c      	ite	cs
   19ff8:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   19ffc:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   1a000:	4770      	bx	lr

0001a002 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   1a002:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   1a004:	2201      	movs	r2, #1
   1a006:	f7ff ffe6 	bl	19fd6 <chunk_field>
}
   1a00a:	0840      	lsrs	r0, r0, #1
   1a00c:	bd08      	pop	{r3, pc}

0001a00e <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   1a00e:	6883      	ldr	r3, [r0, #8]
   1a010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   1a014:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   1a018:	d308      	bcc.n	1a02c <set_chunk_used+0x1e>
		if (used) {
   1a01a:	684b      	ldr	r3, [r1, #4]
   1a01c:	b11a      	cbz	r2, 1a026 <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a01e:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a022:	604b      	str	r3, [r1, #4]
   1a024:	4770      	bx	lr
   1a026:	f023 0301 	bic.w	r3, r3, #1
   1a02a:	e7fa      	b.n	1a022 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
   1a02c:	884b      	ldrh	r3, [r1, #2]
   1a02e:	b11a      	cbz	r2, 1a038 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   1a030:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a034:	804b      	strh	r3, [r1, #2]
		}
	}
}
   1a036:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   1a038:	f023 0301 	bic.w	r3, r3, #1
   1a03c:	e7fa      	b.n	1a034 <set_chunk_used+0x26>

0001a03e <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   1a03e:	0053      	lsls	r3, r2, #1
   1a040:	2201      	movs	r2, #1
   1a042:	f7ff bfd3 	b.w	19fec <chunk_set>

0001a046 <bucket_idx>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   1a046:	6880      	ldr	r0, [r0, #8]
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1a048:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a04a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   1a04e:	bf2c      	ite	cs
   1a050:	2002      	movcs	r0, #2
   1a052:	2001      	movcc	r0, #1
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   1a054:	1a08      	subs	r0, r1, r0
	return 31 - __builtin_clz(usable_sz);
   1a056:	fab0 f080 	clz	r0, r0
}
   1a05a:	f1c0 001f 	rsb	r0, r0, #31
   1a05e:	4770      	bx	lr

0001a060 <merge_chunks>:
	set_left_chunk_size(h, right_chunk(h, rc), rsz);
}

/* Does not modify free list */
static void merge_chunks(struct z_heap *h, chunkid_t lc, chunkid_t rc)
{
   1a060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a064:	4616      	mov	r6, r2
   1a066:	4604      	mov	r4, r0
   1a068:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   1a06a:	f7ff ffca 	bl	1a002 <chunk_size>
   1a06e:	4631      	mov	r1, r6
   1a070:	4605      	mov	r5, r0
   1a072:	4620      	mov	r0, r4
   1a074:	f7ff ffc5 	bl	1a002 <chunk_size>
   1a078:	4405      	add	r5, r0

	set_chunk_size(h, lc, newsz);
   1a07a:	462a      	mov	r2, r5
   1a07c:	4639      	mov	r1, r7
   1a07e:	4620      	mov	r0, r4
   1a080:	f7ff ffdd 	bl	1a03e <set_chunk_size>
	return c + chunk_size(h, c);
   1a084:	4631      	mov	r1, r6
   1a086:	4620      	mov	r0, r4
   1a088:	f7ff ffbb 	bl	1a002 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a08c:	462b      	mov	r3, r5
   1a08e:	1831      	adds	r1, r6, r0
   1a090:	2200      	movs	r2, #0
   1a092:	4620      	mov	r0, r4
	set_left_chunk_size(h, right_chunk(h, rc), newsz);
}
   1a094:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a098:	f7ff bfa8 	b.w	19fec <chunk_set>

0001a09c <split_chunks>:
{
   1a09c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0a0:	4614      	mov	r4, r2
   1a0a2:	4605      	mov	r5, r0
   1a0a4:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   1a0a6:	f7ff ffac 	bl	1a002 <chunk_size>
	size_t lsz = rc - lc;
   1a0aa:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   1a0ae:	1b37      	subs	r7, r6, r4
   1a0b0:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   1a0b2:	4642      	mov	r2, r8
   1a0b4:	4631      	mov	r1, r6
   1a0b6:	4628      	mov	r0, r5
   1a0b8:	f7ff ffc1 	bl	1a03e <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   1a0bc:	463a      	mov	r2, r7
   1a0be:	4621      	mov	r1, r4
   1a0c0:	4628      	mov	r0, r5
   1a0c2:	f7ff ffbc 	bl	1a03e <set_chunk_size>
   1a0c6:	4643      	mov	r3, r8
   1a0c8:	2200      	movs	r2, #0
   1a0ca:	4621      	mov	r1, r4
   1a0cc:	4628      	mov	r0, r5
   1a0ce:	f7ff ff8d 	bl	19fec <chunk_set>
	return c + chunk_size(h, c);
   1a0d2:	4621      	mov	r1, r4
   1a0d4:	4628      	mov	r0, r5
   1a0d6:	f7ff ff94 	bl	1a002 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a0da:	463b      	mov	r3, r7
   1a0dc:	1821      	adds	r1, r4, r0
   1a0de:	2200      	movs	r2, #0
   1a0e0:	4628      	mov	r0, r5
}
   1a0e2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a0e6:	f7ff bf81 	b.w	19fec <chunk_set>

0001a0ea <free_list_remove_bidx>:
{
   1a0ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a0ee:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   1a0f0:	2203      	movs	r2, #3
   1a0f2:	460e      	mov	r6, r1
   1a0f4:	4604      	mov	r4, r0
   1a0f6:	f7ff ff6e 	bl	19fd6 <chunk_field>
	if (next_free_chunk(h, c) == c) {
   1a0fa:	4286      	cmp	r6, r0
   1a0fc:	4605      	mov	r5, r0
   1a0fe:	f107 0804 	add.w	r8, r7, #4
   1a102:	d10b      	bne.n	1a11c <free_list_remove_bidx+0x32>
		h->avail_buckets &= ~(1 << bidx);
   1a104:	2301      	movs	r3, #1
   1a106:	fa03 f707 	lsl.w	r7, r3, r7
   1a10a:	68e3      	ldr	r3, [r4, #12]
   1a10c:	ea23 0307 	bic.w	r3, r3, r7
   1a110:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   1a112:	2300      	movs	r3, #0
   1a114:	f844 3028 	str.w	r3, [r4, r8, lsl #2]
}
   1a118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   1a11c:	4631      	mov	r1, r6
   1a11e:	2202      	movs	r2, #2
   1a120:	4620      	mov	r0, r4
   1a122:	f7ff ff58 	bl	19fd6 <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   1a126:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   1a128:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   1a12a:	4601      	mov	r1, r0
		b->next = second;
   1a12c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   1a130:	4620      	mov	r0, r4
   1a132:	2203      	movs	r2, #3
   1a134:	f7ff ff5a 	bl	19fec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1a138:	4633      	mov	r3, r6
   1a13a:	4629      	mov	r1, r5
   1a13c:	4620      	mov	r0, r4
   1a13e:	2202      	movs	r2, #2
}
   1a140:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a144:	f7ff bf52 	b.w	19fec <chunk_set>

0001a148 <free_list_remove>:
{
   1a148:	b538      	push	{r3, r4, r5, lr}
   1a14a:	4604      	mov	r4, r0
   1a14c:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1a14e:	f7ff ff58 	bl	1a002 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a152:	68a3      	ldr	r3, [r4, #8]
   1a154:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a158:	4601      	mov	r1, r0
   1a15a:	d301      	bcc.n	1a160 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   1a15c:	2801      	cmp	r0, #1
   1a15e:	d009      	beq.n	1a174 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a160:	4620      	mov	r0, r4
   1a162:	f7ff ff70 	bl	1a046 <bucket_idx>
		free_list_remove_bidx(h, c, bidx);
   1a166:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a168:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   1a16a:	4620      	mov	r0, r4
}
   1a16c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		free_list_remove_bidx(h, c, bidx);
   1a170:	f7ff bfbb 	b.w	1a0ea <free_list_remove_bidx>
}
   1a174:	bd38      	pop	{r3, r4, r5, pc}

0001a176 <alloc_chunk>:
	set_chunk_used(h, c, false);
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
   1a176:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a17a:	4604      	mov	r4, r0
   1a17c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   1a17e:	f7ff ff62 	bl	1a046 <bucket_idx>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   1a182:	68a1      	ldr	r1, [r4, #8]
	int bi = bucket_idx(h, sz);
   1a184:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   1a186:	4620      	mov	r0, r4
   1a188:	f7ff ff5d 	bl	1a046 <bucket_idx>
   1a18c:	42a8      	cmp	r0, r5
   1a18e:	da03      	bge.n	1a198 <alloc_chunk+0x22>
		return 0;
   1a190:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   1a192:	4630      	mov	r0, r6
   1a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   1a198:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   1a19c:	f8da 9010 	ldr.w	r9, [sl, #16]
   1a1a0:	f1b9 0f00 	cmp.w	r9, #0
   1a1a4:	d019      	beq.n	1a1da <alloc_chunk+0x64>
   1a1a6:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   1a1a8:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   1a1ac:	4620      	mov	r0, r4
   1a1ae:	4631      	mov	r1, r6
   1a1b0:	f7ff ff27 	bl	1a002 <chunk_size>
   1a1b4:	4540      	cmp	r0, r8
   1a1b6:	d305      	bcc.n	1a1c4 <alloc_chunk+0x4e>
				free_list_remove_bidx(h, c, bi);
   1a1b8:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   1a1ba:	4631      	mov	r1, r6
   1a1bc:	4620      	mov	r0, r4
   1a1be:	f7ff ff94 	bl	1a0ea <free_list_remove_bidx>
		return c;
   1a1c2:	e7e6      	b.n	1a192 <alloc_chunk+0x1c>
	return chunk_field(h, c, FREE_NEXT);
   1a1c4:	2203      	movs	r2, #3
   1a1c6:	4631      	mov	r1, r6
   1a1c8:	4620      	mov	r0, r4
   1a1ca:	f7ff ff04 	bl	19fd6 <chunk_field>
		} while (--i && b->next != first);
   1a1ce:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   1a1d0:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   1a1d4:	d001      	beq.n	1a1da <alloc_chunk+0x64>
   1a1d6:	4581      	cmp	r9, r0
   1a1d8:	d1e6      	bne.n	1a1a8 <alloc_chunk+0x32>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   1a1da:	68e3      	ldr	r3, [r4, #12]
   1a1dc:	3501      	adds	r5, #1
   1a1de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1a1e2:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   1a1e4:	401a      	ands	r2, r3
   1a1e6:	d0d3      	beq.n	1a190 <alloc_chunk+0x1a>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   1a1e8:	fa92 f2a2 	rbit	r2, r2
   1a1ec:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   1a1f0:	1d13      	adds	r3, r2, #4
   1a1f2:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   1a1f6:	e7e0      	b.n	1a1ba <alloc_chunk+0x44>

0001a1f8 <free_list_add>:
{
   1a1f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a1fc:	4604      	mov	r4, r0
   1a1fe:	460d      	mov	r5, r1
	return sizeof(void *) > 4U || chunks > 0x7fffU;
   1a200:	f7ff feff 	bl	1a002 <chunk_size>
	return big_heap(h) && chunk_size(h, c) == 1U;
   1a204:	68a3      	ldr	r3, [r4, #8]
   1a206:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a20a:	4601      	mov	r1, r0
   1a20c:	d301      	bcc.n	1a212 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   1a20e:	2801      	cmp	r0, #1
   1a210:	d035      	beq.n	1a27e <free_list_add+0x86>
		int bidx = bucket_idx(h, chunk_size(h, c));
   1a212:	4620      	mov	r0, r4
   1a214:	f7ff ff17 	bl	1a046 <bucket_idx>
	if (b->next == 0U) {
   1a218:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   1a21c:	6916      	ldr	r6, [r2, #16]
   1a21e:	b99e      	cbnz	r6, 1a248 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   1a220:	2301      	movs	r3, #1
   1a222:	fa03 f000 	lsl.w	r0, r3, r0
   1a226:	68e3      	ldr	r3, [r4, #12]
   1a228:	4303      	orrs	r3, r0
   1a22a:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   1a22c:	4629      	mov	r1, r5
		b->next = c;
   1a22e:	6115      	str	r5, [r2, #16]
   1a230:	462b      	mov	r3, r5
   1a232:	2202      	movs	r2, #2
   1a234:	4620      	mov	r0, r4
   1a236:	f7ff fed9 	bl	19fec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a23a:	2203      	movs	r2, #3
   1a23c:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   1a23e:	4620      	mov	r0, r4
}
   1a240:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1a244:	f7ff bed2 	b.w	19fec <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   1a248:	2202      	movs	r2, #2
   1a24a:	4631      	mov	r1, r6
   1a24c:	4620      	mov	r0, r4
   1a24e:	f7ff fec2 	bl	19fd6 <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   1a252:	2202      	movs	r2, #2
   1a254:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   1a256:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   1a258:	4629      	mov	r1, r5
   1a25a:	4620      	mov	r0, r4
   1a25c:	f7ff fec6 	bl	19fec <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   1a260:	4633      	mov	r3, r6
   1a262:	2203      	movs	r2, #3
   1a264:	4629      	mov	r1, r5
   1a266:	4620      	mov	r0, r4
   1a268:	f7ff fec0 	bl	19fec <chunk_set>
   1a26c:	2203      	movs	r2, #3
   1a26e:	4639      	mov	r1, r7
   1a270:	462b      	mov	r3, r5
   1a272:	4620      	mov	r0, r4
   1a274:	f7ff feba 	bl	19fec <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   1a278:	2202      	movs	r2, #2
   1a27a:	4631      	mov	r1, r6
   1a27c:	e7df      	b.n	1a23e <free_list_add+0x46>
   1a27e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a282 <sys_heap_free>:
{
   1a282:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (mem == NULL) {
   1a284:	2900      	cmp	r1, #0
   1a286:	d04e      	beq.n	1a326 <sys_heap_free+0xa4>
	struct z_heap *h = heap->heap;
   1a288:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1a28a:	68ab      	ldr	r3, [r5, #8]
   1a28c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a290:	bf2c      	ite	cs
   1a292:	2408      	movcs	r4, #8
   1a294:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   1a296:	1b0c      	subs	r4, r1, r4
   1a298:	1b64      	subs	r4, r4, r5
   1a29a:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   1a29c:	2200      	movs	r2, #0
   1a29e:	4621      	mov	r1, r4
   1a2a0:	4628      	mov	r0, r5
   1a2a2:	f7ff feb4 	bl	1a00e <set_chunk_used>
	return c + chunk_size(h, c);
   1a2a6:	4621      	mov	r1, r4
   1a2a8:	f7ff feab 	bl	1a002 <chunk_size>
   1a2ac:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a2ae:	2201      	movs	r2, #1
   1a2b0:	4631      	mov	r1, r6
   1a2b2:	4628      	mov	r0, r5
   1a2b4:	f7ff fe8f 	bl	19fd6 <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   1a2b8:	07c3      	lsls	r3, r0, #31
   1a2ba:	d40c      	bmi.n	1a2d6 <sys_heap_free+0x54>
		free_list_remove(h, right_chunk(h, c));
   1a2bc:	4631      	mov	r1, r6
   1a2be:	4628      	mov	r0, r5
   1a2c0:	f7ff ff42 	bl	1a148 <free_list_remove>
	return c + chunk_size(h, c);
   1a2c4:	4621      	mov	r1, r4
   1a2c6:	4628      	mov	r0, r5
   1a2c8:	f7ff fe9b 	bl	1a002 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   1a2cc:	4621      	mov	r1, r4
   1a2ce:	1822      	adds	r2, r4, r0
   1a2d0:	4628      	mov	r0, r5
   1a2d2:	f7ff fec5 	bl	1a060 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   1a2d6:	2200      	movs	r2, #0
   1a2d8:	4621      	mov	r1, r4
   1a2da:	4628      	mov	r0, r5
   1a2dc:	f7ff fe7b 	bl	19fd6 <chunk_field>
   1a2e0:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   1a2e2:	2201      	movs	r2, #1
   1a2e4:	4639      	mov	r1, r7
   1a2e6:	4628      	mov	r0, r5
   1a2e8:	f7ff fe75 	bl	19fd6 <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   1a2ec:	f010 0601 	ands.w	r6, r0, #1
   1a2f0:	d113      	bne.n	1a31a <sys_heap_free+0x98>
		free_list_remove(h, left_chunk(h, c));
   1a2f2:	4639      	mov	r1, r7
   1a2f4:	4628      	mov	r0, r5
   1a2f6:	f7ff ff27 	bl	1a148 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   1a2fa:	4621      	mov	r1, r4
   1a2fc:	4632      	mov	r2, r6
   1a2fe:	4628      	mov	r0, r5
   1a300:	f7ff fe69 	bl	19fd6 <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   1a304:	4622      	mov	r2, r4
   1a306:	1a21      	subs	r1, r4, r0
   1a308:	4628      	mov	r0, r5
   1a30a:	f7ff fea9 	bl	1a060 <merge_chunks>
   1a30e:	4621      	mov	r1, r4
   1a310:	4632      	mov	r2, r6
   1a312:	4628      	mov	r0, r5
   1a314:	f7ff fe5f 	bl	19fd6 <chunk_field>
   1a318:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   1a31a:	4621      	mov	r1, r4
   1a31c:	4628      	mov	r0, r5
}
   1a31e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   1a322:	f7ff bf69 	b.w	1a1f8 <free_list_add>
}
   1a326:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001a328 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   1a328:	b570      	push	{r4, r5, r6, lr}
	if (bytes == 0U) {
   1a32a:	b909      	cbnz	r1, 1a330 <sys_heap_alloc+0x8>
		return NULL;
   1a32c:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   1a32e:	bd70      	pop	{r4, r5, r6, pc}
	struct z_heap *h = heap->heap;
   1a330:	6805      	ldr	r5, [r0, #0]
	return big_heap(h) ? 8 : 4;
   1a332:	68ab      	ldr	r3, [r5, #8]
   1a334:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a338:	bf2c      	ite	cs
   1a33a:	2208      	movcs	r2, #8
   1a33c:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a33e:	1dcc      	adds	r4, r1, #7
   1a340:	4414      	add	r4, r2
   1a342:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   1a344:	4621      	mov	r1, r4
   1a346:	4628      	mov	r0, r5
   1a348:	f7ff ff15 	bl	1a176 <alloc_chunk>
	if (c == 0U) {
   1a34c:	4606      	mov	r6, r0
   1a34e:	2800      	cmp	r0, #0
   1a350:	d0ec      	beq.n	1a32c <sys_heap_alloc+0x4>
	if (chunk_size(h, c) > chunk_sz) {
   1a352:	4601      	mov	r1, r0
   1a354:	4628      	mov	r0, r5
   1a356:	f7ff fe54 	bl	1a002 <chunk_size>
   1a35a:	42a0      	cmp	r0, r4
   1a35c:	d909      	bls.n	1a372 <sys_heap_alloc+0x4a>
		split_chunks(h, c, c + chunk_sz);
   1a35e:	4434      	add	r4, r6
   1a360:	4631      	mov	r1, r6
   1a362:	4628      	mov	r0, r5
   1a364:	4622      	mov	r2, r4
   1a366:	f7ff fe99 	bl	1a09c <split_chunks>
		free_list_add(h, c + chunk_sz);
   1a36a:	4621      	mov	r1, r4
   1a36c:	4628      	mov	r0, r5
   1a36e:	f7ff ff43 	bl	1a1f8 <free_list_add>
	set_chunk_used(h, c, true);
   1a372:	4628      	mov	r0, r5
   1a374:	2201      	movs	r2, #1
   1a376:	4631      	mov	r1, r6
   1a378:	f7ff fe49 	bl	1a00e <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   1a37c:	68ab      	ldr	r3, [r5, #8]
   1a37e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1a382:	bf2c      	ite	cs
   1a384:	2008      	movcs	r0, #8
   1a386:	2004      	movcc	r0, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   1a388:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
   1a38c:	4428      	add	r0, r5
	return chunk_mem(h, c);
   1a38e:	e7ce      	b.n	1a32e <sys_heap_alloc+0x6>

0001a390 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   1a390:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	set_chunk_used(h, c, true);
	return mem;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   1a394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a396:	bf2c      	ite	cs
   1a398:	2508      	movcs	r5, #8
   1a39a:	2504      	movcc	r5, #4
	/* Must fit in a 32 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0xffffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   1a39c:	1b55      	subs	r5, r2, r5

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1a39e:	1dcc      	adds	r4, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1a3a0:	440d      	add	r5, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   1a3a2:	f024 0407 	bic.w	r4, r4, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   1a3a6:	f025 0507 	bic.w	r5, r5, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   1a3aa:	2200      	movs	r2, #0
   1a3ac:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1a3ae:	1b2d      	subs	r5, r5, r4
	heap->heap = h;
   1a3b0:	6004      	str	r4, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   1a3b2:	08ed      	lsrs	r5, r5, #3
	h->chunk0_hdr_area = 0;
   1a3b4:	e9c4 2300 	strd	r2, r3, [r4]
	h->len = buf_sz;
	h->avail_buckets = 0;
   1a3b8:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1a3ba:	4629      	mov	r1, r5
	h->len = buf_sz;
   1a3bc:	60a5      	str	r5, [r4, #8]
	h->avail_buckets = 0;
   1a3be:	60e3      	str	r3, [r4, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1a3c0:	4620      	mov	r0, r4
   1a3c2:	f7ff fe40 	bl	1a046 <bucket_idx>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   1a3c6:	0086      	lsls	r6, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   1a3c8:	361b      	adds	r6, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   1a3ca:	1c41      	adds	r1, r0, #1
   1a3cc:	08f6      	lsrs	r6, r6, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   1a3ce:	f104 0210 	add.w	r2, r4, #16
		h->buckets[i].next = 0;
   1a3d2:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   1a3d4:	428b      	cmp	r3, r1
   1a3d6:	db29      	blt.n	1a42c <sys_heap_init+0x9c>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   1a3d8:	4632      	mov	r2, r6
   1a3da:	4620      	mov	r0, r4
   1a3dc:	2100      	movs	r1, #0
   1a3de:	f7ff fe2e 	bl	1a03e <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1a3e2:	1baf      	subs	r7, r5, r6
	set_chunk_used(h, 0, true);
   1a3e4:	4620      	mov	r0, r4
   1a3e6:	2201      	movs	r2, #1
   1a3e8:	2100      	movs	r1, #0
   1a3ea:	f7ff fe10 	bl	1a00e <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   1a3ee:	463a      	mov	r2, r7
   1a3f0:	4631      	mov	r1, r6
   1a3f2:	f7ff fe24 	bl	1a03e <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   1a3f6:	4633      	mov	r3, r6
   1a3f8:	4631      	mov	r1, r6
   1a3fa:	4620      	mov	r0, r4
   1a3fc:	2200      	movs	r2, #0
   1a3fe:	f7ff fdf5 	bl	19fec <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   1a402:	4629      	mov	r1, r5
   1a404:	4620      	mov	r0, r4
   1a406:	2200      	movs	r2, #0
   1a408:	f7ff fe19 	bl	1a03e <set_chunk_size>
   1a40c:	463b      	mov	r3, r7
   1a40e:	4629      	mov	r1, r5
   1a410:	4620      	mov	r0, r4
   1a412:	2200      	movs	r2, #0
   1a414:	f7ff fdea 	bl	19fec <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   1a418:	4629      	mov	r1, r5
   1a41a:	4620      	mov	r0, r4
   1a41c:	2201      	movs	r2, #1
   1a41e:	f7ff fdf6 	bl	1a00e <set_chunk_used>

	free_list_add(h, chunk0_size);
   1a422:	4631      	mov	r1, r6
}
   1a424:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   1a428:	f7ff bee6 	b.w	1a1f8 <free_list_add>
		h->buckets[i].next = 0;
   1a42c:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   1a430:	3301      	adds	r3, #1
   1a432:	e7cf      	b.n	1a3d4 <sys_heap_init+0x44>

0001a434 <_to_x>:
{
   1a434:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a436:	4603      	mov	r3, r0
   1a438:	4614      	mov	r4, r2
   1a43a:	4602      	mov	r2, r0
		unsigned int d = n % base;
   1a43c:	fbb1 f0f4 	udiv	r0, r1, r4
   1a440:	fb04 1510 	mls	r5, r4, r0, r1
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1a444:	2d09      	cmp	r5, #9
   1a446:	460f      	mov	r7, r1
   1a448:	bf8c      	ite	hi
   1a44a:	2627      	movhi	r6, #39	; 0x27
   1a44c:	2600      	movls	r6, #0
		n /= base;
   1a44e:	4601      	mov	r1, r0
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1a450:	3530      	adds	r5, #48	; 0x30
   1a452:	4610      	mov	r0, r2
   1a454:	4435      	add	r5, r6
	} while (n);
   1a456:	42a7      	cmp	r7, r4
		*buf++ = '0' + d + (d > 9 ? ('a' - '0' - 10) : 0);
   1a458:	f800 5b01 	strb.w	r5, [r0], #1
	} while (n);
   1a45c:	d205      	bcs.n	1a46a <_to_x+0x36>
	*buf = 0;
   1a45e:	2100      	movs	r1, #0
   1a460:	7001      	strb	r1, [r0, #0]
	len = buf - start;
   1a462:	1ac0      	subs	r0, r0, r3
	for (buf--; buf > start; buf--, start++) {
   1a464:	429a      	cmp	r2, r3
   1a466:	d802      	bhi.n	1a46e <_to_x+0x3a>
}
   1a468:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1a46a:	4602      	mov	r2, r0
   1a46c:	e7e6      	b.n	1a43c <_to_x+0x8>
		char tmp = *buf;
   1a46e:	7811      	ldrb	r1, [r2, #0]
		*buf = *start;
   1a470:	781c      	ldrb	r4, [r3, #0]
   1a472:	f802 4901 	strb.w	r4, [r2], #-1
		*start = tmp;
   1a476:	f803 1b01 	strb.w	r1, [r3], #1
	for (buf--; buf > start; buf--, start++) {
   1a47a:	e7f3      	b.n	1a464 <_to_x+0x30>

0001a47c <_rlrshift>:
{
   1a47c:	b570      	push	{r4, r5, r6, lr}
	*v = (*v & 1) + (*v >> 1);
   1a47e:	e9d0 6500 	ldrd	r6, r5, [r0]
   1a482:	0872      	lsrs	r2, r6, #1
   1a484:	f006 0301 	and.w	r3, r6, #1
   1a488:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
   1a48c:	189b      	adds	r3, r3, r2
   1a48e:	f04f 0100 	mov.w	r1, #0
   1a492:	ea4f 0455 	mov.w	r4, r5, lsr #1
   1a496:	eb44 0101 	adc.w	r1, r4, r1
   1a49a:	e9c0 3100 	strd	r3, r1, [r0]
}
   1a49e:	bd70      	pop	{r4, r5, r6, pc}

0001a4a0 <_ldiv5>:
	uint64_t rem = *v, quot = 0U, q;
   1a4a0:	e9d0 3200 	ldrd	r3, r2, [r0]
{
   1a4a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	rem += 2U;
   1a4a6:	3302      	adds	r3, #2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a4a8:	f04f 0705 	mov.w	r7, #5
   1a4ac:	f04f 0c00 	mov.w	ip, #0
	rem += 2U;
   1a4b0:	f142 0200 	adc.w	r2, r2, #0
		rem -= q * 5U;
   1a4b4:	ebb3 060c 	subs.w	r6, r3, ip
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a4b8:	fbb2 fef7 	udiv	lr, r2, r7
		rem -= q * 5U;
   1a4bc:	fb07 f10e 	mul.w	r1, r7, lr
   1a4c0:	eb62 0101 	sbc.w	r1, r2, r1
		hi = rem >> shifts[i];
   1a4c4:	08f2      	lsrs	r2, r6, #3
   1a4c6:	ea42 7241 	orr.w	r2, r2, r1, lsl #29
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a4ca:	fbb2 f1f7 	udiv	r1, r2, r7
   1a4ce:	00ca      	lsls	r2, r1, #3
		quot += q;
   1a4d0:	eb1c 0402 	adds.w	r4, ip, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a4d4:	ea4f 7351 	mov.w	r3, r1, lsr #29
		quot += q;
   1a4d8:	eb4e 0503 	adc.w	r5, lr, r3
		rem -= q * 5U;
   1a4dc:	fba2 2307 	umull	r2, r3, r2, r7
   1a4e0:	1ab3      	subs	r3, r6, r2
		q = (uint64_t)(hi / 5U) << shifts[i];
   1a4e2:	fbb3 f3f7 	udiv	r3, r3, r7
		quot += q;
   1a4e6:	18e4      	adds	r4, r4, r3
   1a4e8:	f145 0500 	adc.w	r5, r5, #0
	*v = quot;
   1a4ec:	e9c0 4500 	strd	r4, r5, [r0]
}
   1a4f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001a4f2 <_get_digit>:
	if (*digit_count > 0) {
   1a4f2:	680b      	ldr	r3, [r1, #0]
   1a4f4:	2b00      	cmp	r3, #0
{
   1a4f6:	b570      	push	{r4, r5, r6, lr}
   1a4f8:	4604      	mov	r4, r0
	if (*digit_count > 0) {
   1a4fa:	dd0f      	ble.n	1a51c <_get_digit+0x2a>
		*fr = *fr * 10U;
   1a4fc:	6822      	ldr	r2, [r4, #0]
   1a4fe:	6840      	ldr	r0, [r0, #4]
		*digit_count -= 1;
   1a500:	3b01      	subs	r3, #1
   1a502:	600b      	str	r3, [r1, #0]
		*fr = *fr * 10U;
   1a504:	210a      	movs	r1, #10
   1a506:	fba2 5601 	umull	r5, r6, r2, r1
   1a50a:	fb01 6600 	mla	r6, r1, r0, r6
		*fr &= 0x0FFFFFFFFFFFFFFFull;
   1a50e:	f026 4370 	bic.w	r3, r6, #4026531840	; 0xf0000000
   1a512:	e9c4 5300 	strd	r5, r3, [r4]
		rval = ((*fr >> 60) & 0xF) + '0';
   1a516:	0f30      	lsrs	r0, r6, #28
   1a518:	3030      	adds	r0, #48	; 0x30
}
   1a51a:	bd70      	pop	{r4, r5, r6, pc}
		rval = '0';
   1a51c:	2030      	movs	r0, #48	; 0x30
   1a51e:	e7fc      	b.n	1a51a <_get_digit+0x28>

0001a520 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM(CONFIG_REBOOT, 1);
GEN_ABSOLUTE_SYM(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   1a520:	4770      	bx	lr

0001a522 <read_str>:
{
   1a522:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1a526:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1a52a:	4605      	mov	r5, r0
				 strlen(attr->user_data));
   1a52c:	4640      	mov	r0, r8
{
   1a52e:	461f      	mov	r7, r3
   1a530:	460c      	mov	r4, r1
   1a532:	4616      	mov	r6, r2
				 strlen(attr->user_data));
   1a534:	f001 fa47 	bl	1b9c6 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, attr->user_data,
   1a538:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1a53c:	9300      	str	r3, [sp, #0]
   1a53e:	b280      	uxth	r0, r0
   1a540:	e9cd 8001 	strd	r8, r0, [sp, #4]
   1a544:	463b      	mov	r3, r7
   1a546:	4632      	mov	r2, r6
   1a548:	4621      	mov	r1, r4
   1a54a:	4628      	mov	r0, r5
   1a54c:	f003 f90a 	bl	1d764 <bt_gatt_attr_read>
}
   1a550:	b004      	add	sp, #16
   1a552:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a556 <settings_load>:
	return settings_load_subtree(NULL);
   1a556:	2000      	movs	r0, #0
   1a558:	f7ea ba44 	b.w	49e4 <settings_load_subtree>

0001a55c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   1a55c:	2200      	movs	r2, #0
   1a55e:	4611      	mov	r1, r2
   1a560:	f7ea ba1a 	b.w	4998 <settings_save_one>

0001a564 <settings_name_steq>:
{
   1a564:	4603      	mov	r3, r0
   1a566:	b530      	push	{r4, r5, lr}
   1a568:	4608      	mov	r0, r1
	if (next) {
   1a56a:	b10a      	cbz	r2, 1a570 <settings_name_steq+0xc>
		*next = NULL;
   1a56c:	2100      	movs	r1, #0
   1a56e:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   1a570:	b163      	cbz	r3, 1a58c <settings_name_steq+0x28>
   1a572:	b190      	cbz	r0, 1a59a <settings_name_steq+0x36>
   1a574:	1e41      	subs	r1, r0, #1
   1a576:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   1a578:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   1a57c:	4604      	mov	r4, r0
   1a57e:	f810 3b01 	ldrb.w	r3, [r0], #1
   1a582:	b15d      	cbz	r5, 1a59c <settings_name_steq+0x38>
   1a584:	429d      	cmp	r5, r3
   1a586:	d101      	bne.n	1a58c <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   1a588:	2d3d      	cmp	r5, #61	; 0x3d
   1a58a:	d1f5      	bne.n	1a578 <settings_name_steq+0x14>
	return 0;
   1a58c:	2000      	movs	r0, #0
   1a58e:	e004      	b.n	1a59a <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   1a590:	2b3d      	cmp	r3, #61	; 0x3d
   1a592:	d008      	beq.n	1a5a6 <settings_name_steq+0x42>
   1a594:	fab3 f083 	clz	r0, r3
   1a598:	0940      	lsrs	r0, r0, #5
}
   1a59a:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   1a59c:	2b2f      	cmp	r3, #47	; 0x2f
   1a59e:	d1f7      	bne.n	1a590 <settings_name_steq+0x2c>
		if (next) {
   1a5a0:	b10a      	cbz	r2, 1a5a6 <settings_name_steq+0x42>
			*next = name + 1;
   1a5a2:	3401      	adds	r4, #1
   1a5a4:	6014      	str	r4, [r2, #0]
		return 1;
   1a5a6:	2001      	movs	r0, #1
   1a5a8:	e7f7      	b.n	1a59a <settings_name_steq+0x36>

0001a5aa <settings_name_next>:
{
   1a5aa:	b530      	push	{r4, r5, lr}
   1a5ac:	4603      	mov	r3, r0
	if (next) {
   1a5ae:	b109      	cbz	r1, 1a5b4 <settings_name_next+0xa>
		*next = NULL;
   1a5b0:	2200      	movs	r2, #0
   1a5b2:	600a      	str	r2, [r1, #0]
	if (!name) {
   1a5b4:	b16b      	cbz	r3, 1a5d2 <settings_name_next+0x28>
   1a5b6:	461a      	mov	r2, r3
   1a5b8:	4614      	mov	r4, r2
   1a5ba:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   1a5bc:	f812 5b01 	ldrb.w	r5, [r2], #1
   1a5c0:	b135      	cbz	r5, 1a5d0 <settings_name_next+0x26>
   1a5c2:	2d3d      	cmp	r5, #61	; 0x3d
   1a5c4:	d004      	beq.n	1a5d0 <settings_name_next+0x26>
   1a5c6:	2d2f      	cmp	r5, #47	; 0x2f
   1a5c8:	d1f6      	bne.n	1a5b8 <settings_name_next+0xe>
		if (next) {
   1a5ca:	b109      	cbz	r1, 1a5d0 <settings_name_next+0x26>
			*next = name + 1;
   1a5cc:	3401      	adds	r4, #1
   1a5ce:	600c      	str	r4, [r1, #0]
}
   1a5d0:	bd30      	pop	{r4, r5, pc}
		return 0;
   1a5d2:	4618      	mov	r0, r3
   1a5d4:	e7fc      	b.n	1a5d0 <settings_name_next+0x26>

0001a5d6 <settings_backend_init>:
 */

int settings_backend_init(void)
{
	return 0;
}
   1a5d6:	2000      	movs	r0, #0
   1a5d8:	4770      	bx	lr

0001a5da <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   1a5da:	68c2      	ldr	r2, [r0, #12]
   1a5dc:	b2cb      	uxtb	r3, r1
   1a5de:	210c      	movs	r1, #12
   1a5e0:	fb03 2101 	mla	r1, r3, r1, r2
   1a5e4:	6c08      	ldr	r0, [r1, #64]	; 0x40
}
   1a5e6:	f000 0007 	and.w	r0, r0, #7
   1a5ea:	4770      	bx	lr

0001a5ec <set_off_state>:
	__asm__ volatile(
   1a5ec:	f04f 0320 	mov.w	r3, #32
   1a5f0:	f3ef 8211 	mrs	r2, BASEPRI
   1a5f4:	f383 8811 	msr	BASEPRI, r3
   1a5f8:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a5fc:	6803      	ldr	r3, [r0, #0]
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   1a5fe:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
   1a602:	d001      	beq.n	1a608 <set_off_state+0x1c>
   1a604:	428b      	cmp	r3, r1
   1a606:	d107      	bne.n	1a618 <set_off_state+0x2c>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   1a608:	2301      	movs	r3, #1
   1a60a:	6003      	str	r3, [r0, #0]
	int err = 0;
   1a60c:	2000      	movs	r0, #0
	__asm__ volatile(
   1a60e:	f382 8811 	msr	BASEPRI, r2
   1a612:	f3bf 8f6f 	isb	sy
}
   1a616:	4770      	bx	lr
		err = -EPERM;
   1a618:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a61c:	e7f7      	b.n	1a60e <set_off_state+0x22>

0001a61e <set_starting_state>:
{
   1a61e:	b510      	push	{r4, lr}
	__asm__ volatile(
   1a620:	f04f 0320 	mov.w	r3, #32
   1a624:	f3ef 8211 	mrs	r2, BASEPRI
   1a628:	f383 8811 	msr	BASEPRI, r3
   1a62c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   1a630:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   1a632:	f003 0407 	and.w	r4, r3, #7
   1a636:	2c01      	cmp	r4, #1
   1a638:	d106      	bne.n	1a648 <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   1a63a:	6001      	str	r1, [r0, #0]
	int err = 0;
   1a63c:	2000      	movs	r0, #0
	__asm__ volatile(
   1a63e:	f382 8811 	msr	BASEPRI, r2
   1a642:	f3bf 8f6f 	isb	sy
}
   1a646:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   1a648:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
   1a64c:	428b      	cmp	r3, r1
		err = -EBUSY;
   1a64e:	bf14      	ite	ne
   1a650:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
   1a654:	f06f 000f 	mvneq.w	r0, #15
   1a658:	e7f1      	b.n	1a63e <set_starting_state+0x20>

0001a65a <set_on_state>:
	__asm__ volatile(
   1a65a:	f04f 0320 	mov.w	r3, #32
   1a65e:	f3ef 8211 	mrs	r2, BASEPRI
   1a662:	f383 8811 	msr	BASEPRI, r3
   1a666:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   1a66a:	6803      	ldr	r3, [r0, #0]
   1a66c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a670:	f043 0302 	orr.w	r3, r3, #2
   1a674:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   1a676:	f382 8811 	msr	BASEPRI, r2
   1a67a:	f3bf 8f6f 	isb	sy
}
   1a67e:	4770      	bx	lr

0001a680 <onoff_started_callback>:
	return &data->mgr[type];
   1a680:	68c0      	ldr	r0, [r0, #12]
{
   1a682:	b410      	push	{r4}
	return &data->mgr[type];
   1a684:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   1a686:	241c      	movs	r4, #28
   1a688:	fb03 0004 	mla	r0, r3, r4, r0
   1a68c:	2100      	movs	r1, #0
}
   1a68e:	bc10      	pop	{r4}
	notify(mgr, 0);
   1a690:	4710      	bx	r2

0001a692 <blocking_start_callback>:
{
   1a692:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   1a694:	f7fe be7c 	b.w	19390 <z_impl_k_sem_give>

0001a698 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   1a698:	2000      	movs	r0, #0
   1a69a:	f7fd bd69 	b.w	18170 <nrfx_clock_stop>

0001a69e <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   1a69e:	2000      	movs	r0, #0
   1a6a0:	f7fd bd34 	b.w	1810c <nrfx_clock_start>

0001a6a4 <api_stop>:
{
   1a6a4:	b538      	push	{r3, r4, r5, lr}
   1a6a6:	b2cc      	uxtb	r4, r1
	err = set_off_state(&subdata->flags, ctx);
   1a6a8:	230c      	movs	r3, #12
{
   1a6aa:	4605      	mov	r5, r0
	err = set_off_state(&subdata->flags, ctx);
   1a6ac:	4363      	muls	r3, r4
   1a6ae:	68c0      	ldr	r0, [r0, #12]
   1a6b0:	3340      	adds	r3, #64	; 0x40
   1a6b2:	2180      	movs	r1, #128	; 0x80
   1a6b4:	4418      	add	r0, r3
   1a6b6:	f7ff ff99 	bl	1a5ec <set_off_state>
	if (err < 0) {
   1a6ba:	2800      	cmp	r0, #0
   1a6bc:	db05      	blt.n	1a6ca <api_stop+0x26>
	get_sub_config(dev, type)->stop();
   1a6be:	6869      	ldr	r1, [r5, #4]
   1a6c0:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
   1a6c4:	6863      	ldr	r3, [r4, #4]
   1a6c6:	4798      	blx	r3
	return 0;
   1a6c8:	2000      	movs	r0, #0
}
   1a6ca:	bd38      	pop	{r3, r4, r5, pc}

0001a6cc <api_start>:
{
   1a6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a6d0:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
   1a6d2:	f04f 080c 	mov.w	r8, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
   1a6d6:	68c4      	ldr	r4, [r0, #12]
	err = set_starting_state(&subdata->flags, ctx);
   1a6d8:	fb08 f805 	mul.w	r8, r8, r5
{
   1a6dc:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
   1a6de:	f108 0040 	add.w	r0, r8, #64	; 0x40
   1a6e2:	2180      	movs	r1, #128	; 0x80
   1a6e4:	4420      	add	r0, r4
{
   1a6e6:	4617      	mov	r7, r2
	err = set_starting_state(&subdata->flags, ctx);
   1a6e8:	f7ff ff99 	bl	1a61e <set_starting_state>
	if (err < 0) {
   1a6ec:	2800      	cmp	r0, #0
   1a6ee:	db09      	blt.n	1a704 <api_start+0x38>
	subdata->cb = data->cb;
   1a6f0:	4444      	add	r4, r8
   1a6f2:	687b      	ldr	r3, [r7, #4]
   1a6f4:	63a3      	str	r3, [r4, #56]	; 0x38
	subdata->user_data = data->user_data;
   1a6f6:	68bb      	ldr	r3, [r7, #8]
   1a6f8:	63e3      	str	r3, [r4, #60]	; 0x3c
	 get_sub_config(dev, type)->start();
   1a6fa:	6873      	ldr	r3, [r6, #4]
   1a6fc:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
   1a700:	4798      	blx	r3
	return 0;
   1a702:	2000      	movs	r0, #0
}
   1a704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001a708 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   1a708:	4770      	bx	lr

0001a70a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   1a70a:	4770      	bx	lr

0001a70c <sys_clock_disable>:
   1a70c:	4770      	bx	lr

0001a70e <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   1a70e:	b538      	push	{r3, r4, r5, lr}
   1a710:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   1a712:	42ab      	cmp	r3, r5
{
   1a714:	4611      	mov	r1, r2
   1a716:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   1a718:	d804      	bhi.n	1a724 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   1a71a:	461a      	mov	r2, r3
   1a71c:	f001 f985 	bl	1ba2a <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   1a720:	4620      	mov	r0, r4
   1a722:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   1a724:	2400      	movs	r4, #0
   1a726:	e7fb      	b.n	1a720 <_copy+0x12>

0001a728 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   1a728:	f001 b9aa 	b.w	1ba80 <memset>

0001a72c <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   1a72c:	09c3      	lsrs	r3, r0, #7
   1a72e:	005a      	lsls	r2, r3, #1
   1a730:	4413      	add	r3, r2
   1a732:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1a736:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   1a73a:	b2c0      	uxtb	r0, r0
   1a73c:	4770      	bx	lr

0001a73e <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   1a73e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a742:	4606      	mov	r6, r0
   1a744:	b0a9      	sub	sp, #164	; 0xa4
   1a746:	4688      	mov	r8, r1
   1a748:	4614      	mov	r4, r2
   1a74a:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1a74c:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   1a750:	f7ea fc9c 	bl	508c <uECC_get_rng>
		if (!rng_function ||
   1a754:	4603      	mov	r3, r0
   1a756:	2800      	cmp	r0, #0
   1a758:	d03e      	beq.n	1a7d8 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   1a75a:	2140      	movs	r1, #64	; 0x40
   1a75c:	a808      	add	r0, sp, #32
   1a75e:	4798      	blx	r3
		if (!rng_function ||
   1a760:	b3d0      	cbz	r0, 1a7d8 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   1a762:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   1a766:	f112 031f 	adds.w	r3, r2, #31
   1a76a:	bf48      	it	mi
   1a76c:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   1a770:	466d      	mov	r5, sp
   1a772:	464a      	mov	r2, r9
   1a774:	a908      	add	r1, sp, #32
   1a776:	4628      	mov	r0, r5
   1a778:	f343 1347 	sbfx	r3, r3, #5, #8
   1a77c:	f000 fa03 	bl	1ab86 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   1a780:	4622      	mov	r2, r4
   1a782:	4629      	mov	r1, r5
   1a784:	a818      	add	r0, sp, #96	; 0x60
   1a786:	f000 fe19 	bl	1b3bc <EccPoint_compute_public_key>
   1a78a:	b318      	cbz	r0, 1a7d4 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   1a78c:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   1a790:	1dd9      	adds	r1, r3, #7
   1a792:	bf48      	it	mi
   1a794:	f103 010e 	addmi.w	r1, r3, #14
   1a798:	462a      	mov	r2, r5
   1a79a:	4640      	mov	r0, r8
   1a79c:	10c9      	asrs	r1, r1, #3
   1a79e:	f000 fe35 	bl	1b40c <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   1a7a2:	f994 1001 	ldrsb.w	r1, [r4, #1]
   1a7a6:	aa18      	add	r2, sp, #96	; 0x60
   1a7a8:	4630      	mov	r0, r6
   1a7aa:	f000 fe2f 	bl	1b40c <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1a7ae:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   1a7b2:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   1a7b6:	ab18      	add	r3, sp, #96	; 0x60
   1a7b8:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1a7bc:	1870      	adds	r0, r6, r1
   1a7be:	f000 fe25 	bl	1b40c <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   1a7c2:	2220      	movs	r2, #32
   1a7c4:	2100      	movs	r1, #0
   1a7c6:	4628      	mov	r0, r5
   1a7c8:	f001 f95a 	bl	1ba80 <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   1a7cc:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   1a7ce:	b029      	add	sp, #164	; 0xa4
   1a7d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   1a7d4:	3f01      	subs	r7, #1
   1a7d6:	d1bb      	bne.n	1a750 <uECC_make_key+0x12>
        		return 0;
   1a7d8:	2000      	movs	r0, #0
   1a7da:	e7f8      	b.n	1a7ce <uECC_make_key+0x90>

0001a7dc <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   1a7dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a7e0:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   1a7e2:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   1a7e6:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   1a7ea:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   1a7ee:	b0a4      	sub	sp, #144	; 0x90
   1a7f0:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   1a7f2:	1dda      	adds	r2, r3, #7
   1a7f4:	bf48      	it	mi
   1a7f6:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   1a7fa:	ad04      	add	r5, sp, #16
{
   1a7fc:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   1a7fe:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   1a800:	4628      	mov	r0, r5
   1a802:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   1a804:	9502      	str	r5, [sp, #8]
   1a806:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   1a808:	f000 fe14 	bl	1b434 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   1a80c:	463a      	mov	r2, r7
   1a80e:	4649      	mov	r1, r9
   1a810:	a814      	add	r0, sp, #80	; 0x50
   1a812:	f000 fe0f 	bl	1b434 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   1a816:	ab14      	add	r3, sp, #80	; 0x50
   1a818:	eb09 0107 	add.w	r1, r9, r7
   1a81c:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   1a820:	463a      	mov	r2, r7
   1a822:	f000 fe07 	bl	1b434 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   1a826:	4623      	mov	r3, r4
   1a828:	4632      	mov	r2, r6
   1a82a:	4629      	mov	r1, r5
   1a82c:	4628      	mov	r0, r5
   1a82e:	f000 fd99 	bl	1b364 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   1a832:	fab0 f080 	clz	r0, r0
   1a836:	9401      	str	r4, [sp, #4]
   1a838:	ab24      	add	r3, sp, #144	; 0x90
   1a83a:	0940      	lsrs	r0, r0, #5
   1a83c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1a840:	8863      	ldrh	r3, [r4, #2]
   1a842:	3301      	adds	r3, #1
   1a844:	b21b      	sxth	r3, r3
   1a846:	9300      	str	r3, [sp, #0]
   1a848:	a914      	add	r1, sp, #80	; 0x50
   1a84a:	2300      	movs	r3, #0
   1a84c:	f850 2c88 	ldr.w	r2, [r0, #-136]
   1a850:	4608      	mov	r0, r1
   1a852:	f000 fcb8 	bl	1b1c6 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   1a856:	aa14      	add	r2, sp, #80	; 0x50
   1a858:	4639      	mov	r1, r7
   1a85a:	4640      	mov	r0, r8
   1a85c:	f000 fdd6 	bl	1b40c <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   1a860:	4621      	mov	r1, r4
   1a862:	a814      	add	r0, sp, #80	; 0x50
   1a864:	f000 fc24 	bl	1b0b0 <EccPoint_isZero>
   1a868:	af02      	add	r7, sp, #8
   1a86a:	4604      	mov	r4, r0
   1a86c:	2208      	movs	r2, #8
   1a86e:	2100      	movs	r1, #0
   1a870:	4638      	mov	r0, r7
   1a872:	f001 f905 	bl	1ba80 <memset>
   1a876:	2220      	movs	r2, #32
   1a878:	2100      	movs	r1, #0
   1a87a:	4630      	mov	r0, r6
   1a87c:	f001 f900 	bl	1ba80 <memset>
   1a880:	2220      	movs	r2, #32
   1a882:	2100      	movs	r1, #0
   1a884:	4628      	mov	r0, r5
   1a886:	f001 f8fb 	bl	1ba80 <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   1a88a:	fab4 f084 	clz	r0, r4
   1a88e:	0940      	lsrs	r0, r0, #5
   1a890:	b024      	add	sp, #144	; 0x90
   1a892:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001a896 <uECC_vli_add>:
{
   1a896:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1a898:	2400      	movs	r4, #0
{
   1a89a:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   1a89c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1a89e:	b265      	sxtb	r5, r4
   1a8a0:	42ab      	cmp	r3, r5
   1a8a2:	dc00      	bgt.n	1a8a6 <uECC_vli_add+0x10>
}
   1a8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   1a8a6:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1a8aa:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   1a8ae:	443d      	add	r5, r7
   1a8b0:	4405      	add	r5, r0
		carry = cond_set(val, carry, (sum != left[i]));
   1a8b2:	42af      	cmp	r7, r5
		uECC_word_t val = (sum < left[i]);
   1a8b4:	bf8c      	ite	hi
   1a8b6:	2701      	movhi	r7, #1
   1a8b8:	2700      	movls	r7, #0
		result[i] = sum;
   1a8ba:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1a8be:	bf18      	it	ne
   1a8c0:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1a8c2:	3401      	adds	r4, #1
   1a8c4:	e7eb      	b.n	1a89e <uECC_vli_add+0x8>

0001a8c6 <uECC_vli_rshift1>:
	vli += num_words;
   1a8c6:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   1a8ca:	2300      	movs	r3, #0
	while (vli-- > end) {
   1a8cc:	4288      	cmp	r0, r1
   1a8ce:	d300      	bcc.n	1a8d2 <uECC_vli_rshift1+0xc>
}
   1a8d0:	4770      	bx	lr
		uECC_word_t temp = *vli;
   1a8d2:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   1a8d6:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   1a8da:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   1a8dc:	07d3      	lsls	r3, r2, #31
   1a8de:	e7f5      	b.n	1a8cc <uECC_vli_rshift1+0x6>

0001a8e0 <vli_modInv_update>:
	if (!EVEN(uv)) {
   1a8e0:	6803      	ldr	r3, [r0, #0]
{
   1a8e2:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   1a8e4:	f013 0601 	ands.w	r6, r3, #1
{
   1a8e8:	4605      	mov	r5, r0
   1a8ea:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   1a8ec:	d005      	beq.n	1a8fa <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   1a8ee:	4613      	mov	r3, r2
   1a8f0:	460a      	mov	r2, r1
   1a8f2:	4601      	mov	r1, r0
   1a8f4:	f7ff ffcf 	bl	1a896 <uECC_vli_add>
   1a8f8:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   1a8fa:	4621      	mov	r1, r4
   1a8fc:	4628      	mov	r0, r5
   1a8fe:	f7ff ffe2 	bl	1a8c6 <uECC_vli_rshift1>
	if (carry) {
   1a902:	b146      	cbz	r6, 1a916 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   1a904:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   1a908:	3a01      	subs	r2, #1
   1a90a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   1a90e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1a912:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   1a916:	bd70      	pop	{r4, r5, r6, pc}

0001a918 <uECC_vli_mult>:
{
   1a918:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (k = 0; k < num_words; ++k) {
   1a91c:	2500      	movs	r5, #0
{
   1a91e:	b087      	sub	sp, #28
   1a920:	e9cd 1200 	strd	r1, r2, [sp]
	uECC_word_t r1 = 0;
   1a924:	462c      	mov	r4, r5
	uECC_word_t r0 = 0;
   1a926:	462a      	mov	r2, r5
	for (k = 0; k < num_words; ++k) {
   1a928:	fa4f f885 	sxtb.w	r8, r5
   1a92c:	4543      	cmp	r3, r8
   1a92e:	dc16      	bgt.n	1a95e <uECC_vli_mult+0x46>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1a930:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1a934:	eb05 0543 	add.w	r5, r5, r3, lsl #1
   1a938:	9502      	str	r5, [sp, #8]
   1a93a:	f04f 0a00 	mov.w	sl, #0
   1a93e:	9e02      	ldr	r6, [sp, #8]
   1a940:	fa53 fe8a 	uxtab	lr, r3, sl
   1a944:	fa4f fe8e 	sxtb.w	lr, lr
   1a948:	45b6      	cmp	lr, r6
   1a94a:	fa5f f58a 	uxtb.w	r5, sl
   1a94e:	db2d      	blt.n	1a9ac <uECC_vli_mult+0x94>
	result[num_words * 2 - 1] = r0;
   1a950:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1a954:	f840 2c04 	str.w	r2, [r0, #-4]
}
   1a958:	b007      	add	sp, #28
   1a95a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a95e:	9e01      	ldr	r6, [sp, #4]
	for (k = 0; k < num_words; ++k) {
   1a960:	f04f 0c00 	mov.w	ip, #0
   1a964:	eb06 0985 	add.w	r9, r6, r5, lsl #2
   1a968:	46e6      	mov	lr, ip
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1a96a:	e9cd 2402 	strd	r2, r4, [sp, #8]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1a96e:	9900      	ldr	r1, [sp, #0]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1a970:	f859 7904 	ldr.w	r7, [r9], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   1a974:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
   1a978:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
   1a97c:	fba7 ab06 	umull	sl, fp, r7, r6
   1a980:	eb1a 0601 	adds.w	r6, sl, r1
   1a984:	f10c 0c01 	add.w	ip, ip, #1
   1a988:	eb5b 0702 	adcs.w	r7, fp, r2
		for (i = 0; i <= k; ++i) {
   1a98c:	fa4f fa8c 	sxtb.w	sl, ip
   1a990:	bf2c      	ite	cs
   1a992:	2201      	movcs	r2, #1
   1a994:	2200      	movcc	r2, #0
   1a996:	45c2      	cmp	sl, r8
	*r2 += (r01 < p);
   1a998:	4496      	add	lr, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1a99a:	463c      	mov	r4, r7
	*r0 = (uECC_word_t)r01;
   1a99c:	4632      	mov	r2, r6
		for (i = 0; i <= k; ++i) {
   1a99e:	dde4      	ble.n	1a96a <uECC_vli_mult+0x52>
		result[k] = r0;
   1a9a0:	f840 6025 	str.w	r6, [r0, r5, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   1a9a4:	463a      	mov	r2, r7
   1a9a6:	3501      	adds	r5, #1
	*r2 += (r01 < p);
   1a9a8:	4674      	mov	r4, lr
   1a9aa:	e7bd      	b.n	1a928 <uECC_vli_mult+0x10>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1a9ac:	3501      	adds	r5, #1
   1a9ae:	9900      	ldr	r1, [sp, #0]
   1a9b0:	9e01      	ldr	r6, [sp, #4]
   1a9b2:	fa4f fc85 	sxtb.w	ip, r5
   1a9b6:	ebae 0b0c 	sub.w	fp, lr, ip
   1a9ba:	eb01 058c 	add.w	r5, r1, ip, lsl #2
   1a9be:	eb06 0b8b 	add.w	fp, r6, fp, lsl #2
   1a9c2:	4621      	mov	r1, r4
   1a9c4:	2400      	movs	r4, #0
   1a9c6:	459c      	cmp	ip, r3
   1a9c8:	db05      	blt.n	1a9d6 <uECC_vli_mult+0xbe>
		result[k] = r0;
   1a9ca:	f840 202e 	str.w	r2, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   1a9ce:	f10a 0a01 	add.w	sl, sl, #1
		result[k] = r0;
   1a9d2:	460a      	mov	r2, r1
   1a9d4:	e7b3      	b.n	1a93e <uECC_vli_mult+0x26>
	uECC_dword_t r01 = ((uECC_dword_t)(*r1) << uECC_WORD_BITS) | *r0;
   1a9d6:	e9cd 2104 	strd	r2, r1, [sp, #16]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   1a9da:	f855 7b04 	ldr.w	r7, [r5], #4
   1a9de:	f85b 6904 	ldr.w	r6, [fp], #-4
	r01 += p;
   1a9e2:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
	uECC_dword_t p = (uECC_dword_t)a * b;
   1a9e6:	fba7 6706 	umull	r6, r7, r7, r6
   1a9ea:	eb16 0801 	adds.w	r8, r6, r1
   1a9ee:	eb57 0902 	adcs.w	r9, r7, r2
   1a9f2:	bf2c      	ite	cs
   1a9f4:	2201      	movcs	r2, #1
   1a9f6:	2200      	movcc	r2, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1a9f8:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   1a9fc:	4414      	add	r4, r2
	*r1 = r01 >> uECC_WORD_BITS;
   1a9fe:	4649      	mov	r1, r9
	*r0 = (uECC_word_t)r01;
   1aa00:	4642      	mov	r2, r8
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   1aa02:	fa4f fc8c 	sxtb.w	ip, ip
   1aa06:	e7de      	b.n	1a9c6 <uECC_vli_mult+0xae>

0001aa08 <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   1aa08:	2300      	movs	r3, #0
{
   1aa0a:	b510      	push	{r4, lr}
		 vli[i] = 0;
   1aa0c:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   1aa0e:	b25a      	sxtb	r2, r3
   1aa10:	4291      	cmp	r1, r2
   1aa12:	dc00      	bgt.n	1aa16 <uECC_vli_clear+0xe>
}
   1aa14:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   1aa16:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1aa1a:	3301      	adds	r3, #1
   1aa1c:	e7f7      	b.n	1aa0e <uECC_vli_clear+0x6>

0001aa1e <uECC_vli_isZero>:
{
   1aa1e:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1aa20:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   1aa22:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   1aa24:	b25c      	sxtb	r4, r3
   1aa26:	42a1      	cmp	r1, r4
   1aa28:	dc03      	bgt.n	1aa32 <uECC_vli_isZero+0x14>
}
   1aa2a:	fab2 f082 	clz	r0, r2
   1aa2e:	0940      	lsrs	r0, r0, #5
   1aa30:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   1aa32:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   1aa36:	3301      	adds	r3, #1
   1aa38:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   1aa3a:	e7f3      	b.n	1aa24 <uECC_vli_isZero+0x6>

0001aa3c <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1aa3c:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1aa3e:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1aa40:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   1aa44:	f001 011f 	and.w	r1, r1, #31
   1aa48:	fa03 f101 	lsl.w	r1, r3, r1
}
   1aa4c:	4008      	ands	r0, r1
   1aa4e:	4770      	bx	lr

0001aa50 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1aa50:	3901      	subs	r1, #1
   1aa52:	b24b      	sxtb	r3, r1
{
   1aa54:	4602      	mov	r2, r0
   1aa56:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1aa5a:	2b00      	cmp	r3, #0
   1aa5c:	da03      	bge.n	1aa66 <uECC_vli_numBits+0x16>
	return (i + 1);
   1aa5e:	3301      	adds	r3, #1
   1aa60:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   1aa62:	b938      	cbnz	r0, 1aa74 <uECC_vli_numBits+0x24>
   1aa64:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   1aa66:	f851 0904 	ldr.w	r0, [r1], #-4
   1aa6a:	2800      	cmp	r0, #0
   1aa6c:	d1f7      	bne.n	1aa5e <uECC_vli_numBits+0xe>
   1aa6e:	3b01      	subs	r3, #1
   1aa70:	b25b      	sxtb	r3, r3
   1aa72:	e7f2      	b.n	1aa5a <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   1aa74:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   1aa78:	3b01      	subs	r3, #1
   1aa7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   1aa7e:	2300      	movs	r3, #0
   1aa80:	b922      	cbnz	r2, 1aa8c <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   1aa82:	3801      	subs	r0, #1
   1aa84:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1aa88:	b200      	sxth	r0, r0
}
   1aa8a:	4770      	bx	lr
		digit >>= 1;
   1aa8c:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   1aa8e:	3301      	adds	r3, #1
   1aa90:	e7f6      	b.n	1aa80 <uECC_vli_numBits+0x30>

0001aa92 <uECC_vli_set>:
{
   1aa92:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   1aa94:	2300      	movs	r3, #0
   1aa96:	b25c      	sxtb	r4, r3
   1aa98:	42a2      	cmp	r2, r4
   1aa9a:	dc00      	bgt.n	1aa9e <uECC_vli_set+0xc>
}
   1aa9c:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   1aa9e:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   1aaa2:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   1aaa6:	3301      	adds	r3, #1
   1aaa8:	e7f5      	b.n	1aa96 <uECC_vli_set+0x4>

0001aaaa <uECC_vli_cmp_unsafe>:
{
   1aaaa:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   1aaac:	3a01      	subs	r2, #1
   1aaae:	b253      	sxtb	r3, r2
   1aab0:	009a      	lsls	r2, r3, #2
   1aab2:	2b00      	cmp	r3, #0
   1aab4:	da01      	bge.n	1aaba <uECC_vli_cmp_unsafe+0x10>
	return 0;
   1aab6:	2000      	movs	r0, #0
}
   1aab8:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   1aaba:	5885      	ldr	r5, [r0, r2]
   1aabc:	588c      	ldr	r4, [r1, r2]
   1aabe:	42a5      	cmp	r5, r4
   1aac0:	d805      	bhi.n	1aace <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   1aac2:	f1a2 0204 	sub.w	r2, r2, #4
   1aac6:	d304      	bcc.n	1aad2 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   1aac8:	3b01      	subs	r3, #1
   1aaca:	b25b      	sxtb	r3, r3
   1aacc:	e7f1      	b.n	1aab2 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   1aace:	2001      	movs	r0, #1
   1aad0:	e7f2      	b.n	1aab8 <uECC_vli_cmp_unsafe+0xe>
			return -1;
   1aad2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1aad6:	e7ef      	b.n	1aab8 <uECC_vli_cmp_unsafe+0xe>

0001aad8 <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   1aad8:	3a01      	subs	r2, #1
   1aada:	b253      	sxtb	r3, r2
{
   1aadc:	b570      	push	{r4, r5, r6, lr}
   1aade:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   1aae0:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   1aae2:	2b00      	cmp	r3, #0
   1aae4:	da03      	bge.n	1aaee <uECC_vli_equal+0x16>
}
   1aae6:	1e20      	subs	r0, r4, #0
   1aae8:	bf18      	it	ne
   1aaea:	2001      	movne	r0, #1
   1aaec:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   1aaee:	5885      	ldr	r5, [r0, r2]
   1aaf0:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   1aaf2:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   1aaf4:	4075      	eors	r5, r6
   1aaf6:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   1aaf8:	b25b      	sxtb	r3, r3
   1aafa:	3a04      	subs	r2, #4
   1aafc:	e7f1      	b.n	1aae2 <uECC_vli_equal+0xa>

0001aafe <uECC_vli_sub>:
{
   1aafe:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   1ab00:	2400      	movs	r4, #0
{
   1ab02:	4606      	mov	r6, r0
   1ab04:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   1ab06:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   1ab08:	b265      	sxtb	r5, r4
   1ab0a:	45ac      	cmp	ip, r5
   1ab0c:	dc00      	bgt.n	1ab10 <uECC_vli_sub+0x12>
}
   1ab0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   1ab10:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   1ab14:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   1ab18:	1a3d      	subs	r5, r7, r0
   1ab1a:	1aed      	subs	r5, r5, r3
		borrow = cond_set(val, borrow, (diff != left[i]));
   1ab1c:	42af      	cmp	r7, r5
		uECC_word_t val = (diff > left[i]);
   1ab1e:	bf34      	ite	cc
   1ab20:	2701      	movcc	r7, #1
   1ab22:	2700      	movcs	r7, #0
		result[i] = diff;
   1ab24:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   1ab28:	bf18      	it	ne
   1ab2a:	4638      	movne	r0, r7
	for (i = 0; i < num_words; ++i) {
   1ab2c:	3401      	adds	r4, #1
   1ab2e:	e7eb      	b.n	1ab08 <uECC_vli_sub+0xa>

0001ab30 <uECC_vli_modAdd>:
{
   1ab30:	b570      	push	{r4, r5, r6, lr}
   1ab32:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1ab36:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1ab38:	4633      	mov	r3, r6
{
   1ab3a:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   1ab3c:	f7ff feab 	bl	1a896 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   1ab40:	b930      	cbnz	r0, 1ab50 <uECC_vli_modAdd+0x20>
   1ab42:	4632      	mov	r2, r6
   1ab44:	4621      	mov	r1, r4
   1ab46:	4628      	mov	r0, r5
   1ab48:	f7ff ffaf 	bl	1aaaa <uECC_vli_cmp_unsafe>
   1ab4c:	2801      	cmp	r0, #1
   1ab4e:	d007      	beq.n	1ab60 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   1ab50:	4633      	mov	r3, r6
   1ab52:	462a      	mov	r2, r5
   1ab54:	4621      	mov	r1, r4
   1ab56:	4620      	mov	r0, r4
}
   1ab58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   1ab5c:	f7ff bfcf 	b.w	1aafe <uECC_vli_sub>
}
   1ab60:	bd70      	pop	{r4, r5, r6, pc}

0001ab62 <uECC_vli_modSub>:
{
   1ab62:	b570      	push	{r4, r5, r6, lr}
   1ab64:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   1ab68:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1ab6a:	4633      	mov	r3, r6
{
   1ab6c:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   1ab6e:	f7ff ffc6 	bl	1aafe <uECC_vli_sub>
	if (l_borrow) {
   1ab72:	b138      	cbz	r0, 1ab84 <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   1ab74:	4633      	mov	r3, r6
   1ab76:	462a      	mov	r2, r5
   1ab78:	4621      	mov	r1, r4
   1ab7a:	4620      	mov	r0, r4
}
   1ab7c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   1ab80:	f7ff be89 	b.w	1a896 <uECC_vli_add>
}
   1ab84:	bd70      	pop	{r4, r5, r6, pc}

0001ab86 <uECC_vli_mmod>:
{
   1ab86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ab8a:	b0a5      	sub	sp, #148	; 0x94
   1ab8c:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   1ab8e:	ab14      	add	r3, sp, #80	; 0x50
   1ab90:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   1ab94:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   1ab96:	4629      	mov	r1, r5
   1ab98:	4610      	mov	r0, r2
{
   1ab9a:	4616      	mov	r6, r2
			   uECC_vli_numBits(mod, num_words);
   1ab9c:	f7ff ff58 	bl	1aa50 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   1aba0:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   1aba4:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1aba6:	2c00      	cmp	r4, #0
   1aba8:	4621      	mov	r1, r4
   1abaa:	bfb8      	it	lt
   1abac:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1abb0:	4263      	negs	r3, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   1abb2:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1abb6:	f003 031f 	and.w	r3, r3, #31
	uECC_vli_clear(mod_multiple, word_shift);
   1abba:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   1abbc:	f004 071f 	and.w	r7, r4, #31
   1abc0:	bf58      	it	pl
   1abc2:	425f      	negpl	r7, r3
	uECC_vli_clear(mod_multiple, word_shift);
   1abc4:	f7ff ff20 	bl	1aa08 <uECC_vli_clear>
	if (bit_shift > 0) {
   1abc8:	2f00      	cmp	r7, #0
   1abca:	b208      	sxth	r0, r1
   1abcc:	dd2b      	ble.n	1ac26 <uECC_vli_mmod+0xa0>
   1abce:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   1abd0:	2200      	movs	r2, #0
   1abd2:	eb03 0180 	add.w	r1, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1abd6:	f1c7 0e20 	rsb	lr, r7, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1abda:	4613      	mov	r3, r2
   1abdc:	429d      	cmp	r5, r3
   1abde:	d817      	bhi.n	1ac10 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   1abe0:	006b      	lsls	r3, r5, #1
   1abe2:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1abe4:	ab04      	add	r3, sp, #16
   1abe6:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1abea:	1e6f      	subs	r7, r5, #1
   1abec:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1abee:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1abf0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   1abf4:	2c00      	cmp	r4, #0
   1abf6:	da54      	bge.n	1aca2 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   1abf8:	ab24      	add	r3, sp, #144	; 0x90
   1abfa:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   1abfe:	462a      	mov	r2, r5
   1ac00:	f856 1c88 	ldr.w	r1, [r6, #-136]
   1ac04:	4640      	mov	r0, r8
   1ac06:	f7ff ff44 	bl	1aa92 <uECC_vli_set>
}
   1ac0a:	b025      	add	sp, #148	; 0x94
   1ac0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   1ac10:	f856 c023 	ldr.w	ip, [r6, r3, lsl #2]
   1ac14:	fa0c f007 	lsl.w	r0, ip, r7
   1ac18:	4302      	orrs	r2, r0
   1ac1a:	f841 2b04 	str.w	r2, [r1], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ac1e:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   1ac20:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   1ac24:	e7da      	b.n	1abdc <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   1ac26:	ab04      	add	r3, sp, #16
   1ac28:	462a      	mov	r2, r5
   1ac2a:	4631      	mov	r1, r6
   1ac2c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   1ac30:	f7ff ff2f 	bl	1aa92 <uECC_vli_set>
   1ac34:	e7d4      	b.n	1abe0 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1ac36:	fa0f fe82 	sxth.w	lr, r2
   1ac3a:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   1ac3e:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   1ac42:	ab24      	add	r3, sp, #144	; 0x90
   1ac44:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   1ac48:	3001      	adds	r0, #1
   1ac4a:	f852 3c80 	ldr.w	r3, [r2, #-128]
   1ac4e:	440b      	add	r3, r1
   1ac50:	ebbb 0303 	subs.w	r3, fp, r3
   1ac54:	bf34      	ite	cc
   1ac56:	2201      	movcc	r2, #1
   1ac58:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   1ac5a:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   1ac5c:	bf18      	it	ne
   1ac5e:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   1ac60:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   1ac64:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   1ac68:	9b01      	ldr	r3, [sp, #4]
   1ac6a:	b242      	sxtb	r2, r0
   1ac6c:	429a      	cmp	r2, r3
   1ac6e:	dbe2      	blt.n	1ac36 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   1ac70:	1a73      	subs	r3, r6, r1
   1ac72:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ac74:	4629      	mov	r1, r5
   1ac76:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   1ac78:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   1ac7a:	f7ff fe24 	bl	1a8c6 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ac7e:	ab24      	add	r3, sp, #144	; 0x90
   1ac80:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ac84:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ac86:	f853 2c80 	ldr.w	r2, [r3, #-128]
   1ac8a:	f857 3c80 	ldr.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ac8e:	4648      	mov	r0, r9
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ac90:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
	for (index = 1; shift >= 0; --shift) {
   1ac94:	3c01      	subs	r4, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   1ac96:	f847 3c80 	str.w	r3, [r7, #-128]
	for (index = 1; shift >= 0; --shift) {
   1ac9a:	b224      	sxth	r4, r4
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   1ac9c:	f7ff fe13 	bl	1a8c6 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   1aca0:	e7a8      	b.n	1abf4 <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1aca2:	ab24      	add	r3, sp, #144	; 0x90
   1aca4:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   1aca6:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   1acaa:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   1acac:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   1acb0:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   1acb4:	e7d8      	b.n	1ac68 <uECC_vli_mmod+0xe2>

0001acb6 <uECC_vli_modMult_fast>:
{
   1acb6:	b530      	push	{r4, r5, lr}
   1acb8:	461c      	mov	r4, r3
   1acba:	b091      	sub	sp, #68	; 0x44
   1acbc:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   1acbe:	f993 3000 	ldrsb.w	r3, [r3]
   1acc2:	4668      	mov	r0, sp
   1acc4:	f7ff fe28 	bl	1a918 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   1acc8:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   1accc:	4669      	mov	r1, sp
   1acce:	4628      	mov	r0, r5
   1acd0:	4798      	blx	r3
}
   1acd2:	b011      	add	sp, #68	; 0x44
   1acd4:	bd30      	pop	{r4, r5, pc}

0001acd6 <uECC_vli_modSquare_fast>:
{
   1acd6:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   1acd8:	460a      	mov	r2, r1
   1acda:	f7ff bfec 	b.w	1acb6 <uECC_vli_modMult_fast>

0001acde <double_jacobian_default>:
{
   1acde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   1ace2:	f993 6000 	ldrsb.w	r6, [r3]
{
   1ace6:	b092      	sub	sp, #72	; 0x48
   1ace8:	4604      	mov	r4, r0
   1acea:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   1acec:	4610      	mov	r0, r2
   1acee:	4631      	mov	r1, r6
{
   1acf0:	4615      	mov	r5, r2
   1acf2:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   1acf4:	f7ff fe93 	bl	1aa1e <uECC_vli_isZero>
   1acf8:	2800      	cmp	r0, #0
   1acfa:	f040 8091 	bne.w	1ae20 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   1acfe:	463a      	mov	r2, r7
   1ad00:	4649      	mov	r1, r9
   1ad02:	a802      	add	r0, sp, #8
   1ad04:	f7ff ffe7 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   1ad08:	463b      	mov	r3, r7
   1ad0a:	aa02      	add	r2, sp, #8
   1ad0c:	4621      	mov	r1, r4
   1ad0e:	a80a      	add	r0, sp, #40	; 0x28
   1ad10:	f7ff ffd1 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   1ad14:	a902      	add	r1, sp, #8
   1ad16:	4608      	mov	r0, r1
   1ad18:	463a      	mov	r2, r7
   1ad1a:	f7ff ffdc 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   1ad1e:	463b      	mov	r3, r7
   1ad20:	462a      	mov	r2, r5
   1ad22:	4649      	mov	r1, r9
   1ad24:	4648      	mov	r0, r9
   1ad26:	f7ff ffc6 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1ad2a:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   1ad2e:	463a      	mov	r2, r7
   1ad30:	4629      	mov	r1, r5
   1ad32:	4628      	mov	r0, r5
   1ad34:	f7ff ffcf 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   1ad38:	4643      	mov	r3, r8
   1ad3a:	462a      	mov	r2, r5
   1ad3c:	4621      	mov	r1, r4
   1ad3e:	4620      	mov	r0, r4
   1ad40:	9600      	str	r6, [sp, #0]
   1ad42:	f7ff fef5 	bl	1ab30 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   1ad46:	4643      	mov	r3, r8
   1ad48:	462a      	mov	r2, r5
   1ad4a:	4629      	mov	r1, r5
   1ad4c:	4628      	mov	r0, r5
   1ad4e:	9600      	str	r6, [sp, #0]
   1ad50:	f7ff feee 	bl	1ab30 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   1ad54:	4643      	mov	r3, r8
   1ad56:	462a      	mov	r2, r5
   1ad58:	4621      	mov	r1, r4
   1ad5a:	4628      	mov	r0, r5
   1ad5c:	9600      	str	r6, [sp, #0]
   1ad5e:	f7ff ff00 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   1ad62:	463b      	mov	r3, r7
   1ad64:	462a      	mov	r2, r5
   1ad66:	4621      	mov	r1, r4
   1ad68:	4620      	mov	r0, r4
   1ad6a:	f7ff ffa4 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   1ad6e:	4643      	mov	r3, r8
   1ad70:	4622      	mov	r2, r4
   1ad72:	4621      	mov	r1, r4
   1ad74:	4628      	mov	r0, r5
   1ad76:	9600      	str	r6, [sp, #0]
   1ad78:	f7ff feda 	bl	1ab30 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   1ad7c:	4643      	mov	r3, r8
   1ad7e:	9600      	str	r6, [sp, #0]
   1ad80:	462a      	mov	r2, r5
   1ad82:	4621      	mov	r1, r4
   1ad84:	4620      	mov	r0, r4
   1ad86:	f7ff fed3 	bl	1ab30 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1ad8a:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   1ad8c:	07db      	lsls	r3, r3, #31
   1ad8e:	d54a      	bpl.n	1ae26 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1ad90:	4633      	mov	r3, r6
   1ad92:	4642      	mov	r2, r8
   1ad94:	4621      	mov	r1, r4
   1ad96:	4620      	mov	r0, r4
   1ad98:	f7ff fd7d 	bl	1a896 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   1ad9c:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   1ad9e:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   1ada0:	4620      	mov	r0, r4
   1ada2:	f7ff fd90 	bl	1a8c6 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   1ada6:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   1adaa:	3b01      	subs	r3, #1
   1adac:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   1adb0:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   1adb4:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   1adb8:	463a      	mov	r2, r7
   1adba:	4621      	mov	r1, r4
   1adbc:	4628      	mov	r0, r5
   1adbe:	f7ff ff8a 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   1adc2:	4643      	mov	r3, r8
   1adc4:	aa0a      	add	r2, sp, #40	; 0x28
   1adc6:	4629      	mov	r1, r5
   1adc8:	4628      	mov	r0, r5
   1adca:	9600      	str	r6, [sp, #0]
   1adcc:	f7ff fec9 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   1add0:	4643      	mov	r3, r8
   1add2:	aa0a      	add	r2, sp, #40	; 0x28
   1add4:	4629      	mov	r1, r5
   1add6:	4628      	mov	r0, r5
   1add8:	9600      	str	r6, [sp, #0]
   1adda:	f7ff fec2 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   1adde:	a90a      	add	r1, sp, #40	; 0x28
   1ade0:	4608      	mov	r0, r1
   1ade2:	4643      	mov	r3, r8
   1ade4:	462a      	mov	r2, r5
   1ade6:	9600      	str	r6, [sp, #0]
   1ade8:	f7ff febb 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   1adec:	463b      	mov	r3, r7
   1adee:	aa0a      	add	r2, sp, #40	; 0x28
   1adf0:	4621      	mov	r1, r4
   1adf2:	4620      	mov	r0, r4
   1adf4:	f7ff ff5f 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   1adf8:	aa02      	add	r2, sp, #8
   1adfa:	4643      	mov	r3, r8
   1adfc:	4610      	mov	r0, r2
   1adfe:	4621      	mov	r1, r4
   1ae00:	9600      	str	r6, [sp, #0]
   1ae02:	f7ff feae 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   1ae06:	4632      	mov	r2, r6
   1ae08:	4629      	mov	r1, r5
   1ae0a:	4620      	mov	r0, r4
   1ae0c:	f7ff fe41 	bl	1aa92 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   1ae10:	4649      	mov	r1, r9
   1ae12:	4628      	mov	r0, r5
   1ae14:	f7ff fe3d 	bl	1aa92 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   1ae18:	a902      	add	r1, sp, #8
   1ae1a:	4648      	mov	r0, r9
   1ae1c:	f7ff fe39 	bl	1aa92 <uECC_vli_set>
}
   1ae20:	b012      	add	sp, #72	; 0x48
   1ae22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   1ae26:	4631      	mov	r1, r6
   1ae28:	4620      	mov	r0, r4
   1ae2a:	f7ff fd4c 	bl	1a8c6 <uECC_vli_rshift1>
   1ae2e:	e7c3      	b.n	1adb8 <double_jacobian_default+0xda>

0001ae30 <x_side_default>:
{
   1ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae34:	4615      	mov	r5, r2
   1ae36:	b08a      	sub	sp, #40	; 0x28
   1ae38:	4604      	mov	r4, r0
   1ae3a:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ae3c:	221c      	movs	r2, #28
   1ae3e:	2100      	movs	r1, #0
   1ae40:	a803      	add	r0, sp, #12
   1ae42:	f000 fe1d 	bl	1ba80 <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1ae46:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   1ae48:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ae4c:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1ae4e:	462a      	mov	r2, r5
   1ae50:	4631      	mov	r1, r6
   1ae52:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   1ae54:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   1ae56:	f7ff ff3e 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   1ae5a:	463b      	mov	r3, r7
   1ae5c:	aa02      	add	r2, sp, #8
   1ae5e:	4621      	mov	r1, r4
   1ae60:	4620      	mov	r0, r4
   1ae62:	f8cd 8000 	str.w	r8, [sp]
   1ae66:	f7ff fe7c 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   1ae6a:	462b      	mov	r3, r5
   1ae6c:	4632      	mov	r2, r6
   1ae6e:	4621      	mov	r1, r4
   1ae70:	4620      	mov	r0, r4
   1ae72:	f7ff ff20 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   1ae76:	f8cd 8000 	str.w	r8, [sp]
   1ae7a:	463b      	mov	r3, r7
   1ae7c:	f105 0284 	add.w	r2, r5, #132	; 0x84
   1ae80:	4621      	mov	r1, r4
   1ae82:	4620      	mov	r0, r4
   1ae84:	f7ff fe54 	bl	1ab30 <uECC_vli_modAdd>
}
   1ae88:	b00a      	add	sp, #40	; 0x28
   1ae8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ae8e <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   1ae8e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ae92:	b09a      	sub	sp, #104	; 0x68
   1ae94:	4616      	mov	r6, r2
   1ae96:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1ae9a:	4644      	mov	r4, r8
{
   1ae9c:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   1ae9e:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1aea2:	9500      	str	r5, [sp, #0]
{
   1aea4:	4607      	mov	r7, r0
   1aea6:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1aea8:	4623      	mov	r3, r4
   1aeaa:	4602      	mov	r2, r0
   1aeac:	4631      	mov	r1, r6
   1aeae:	a802      	add	r0, sp, #8
   1aeb0:	f7ff fe57 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1aeb4:	a902      	add	r1, sp, #8
   1aeb6:	4642      	mov	r2, r8
   1aeb8:	4608      	mov	r0, r1
   1aeba:	f7ff ff0c 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1aebe:	4643      	mov	r3, r8
   1aec0:	aa02      	add	r2, sp, #8
   1aec2:	4639      	mov	r1, r7
   1aec4:	4638      	mov	r0, r7
   1aec6:	f7ff fef6 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1aeca:	4643      	mov	r3, r8
   1aecc:	aa02      	add	r2, sp, #8
   1aece:	4631      	mov	r1, r6
   1aed0:	4630      	mov	r0, r6
   1aed2:	f7ff fef0 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   1aed6:	4623      	mov	r3, r4
   1aed8:	4652      	mov	r2, sl
   1aeda:	4649      	mov	r1, r9
   1aedc:	a802      	add	r0, sp, #8
   1aede:	9500      	str	r5, [sp, #0]
   1aee0:	f7ff fe26 	bl	1ab30 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1aee4:	4623      	mov	r3, r4
   1aee6:	4652      	mov	r2, sl
   1aee8:	4649      	mov	r1, r9
   1aeea:	4648      	mov	r0, r9
   1aeec:	9500      	str	r5, [sp, #0]
   1aeee:	f7ff fe38 	bl	1ab62 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   1aef2:	4623      	mov	r3, r4
   1aef4:	463a      	mov	r2, r7
   1aef6:	4631      	mov	r1, r6
   1aef8:	a80a      	add	r0, sp, #40	; 0x28
   1aefa:	9500      	str	r5, [sp, #0]
   1aefc:	f7ff fe31 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   1af00:	4643      	mov	r3, r8
   1af02:	aa0a      	add	r2, sp, #40	; 0x28
   1af04:	4651      	mov	r1, sl
   1af06:	4650      	mov	r0, sl
   1af08:	f7ff fed5 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   1af0c:	4623      	mov	r3, r4
   1af0e:	4632      	mov	r2, r6
   1af10:	4639      	mov	r1, r7
   1af12:	a80a      	add	r0, sp, #40	; 0x28
   1af14:	9500      	str	r5, [sp, #0]
   1af16:	f7ff fe0b 	bl	1ab30 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   1af1a:	4642      	mov	r2, r8
   1af1c:	4649      	mov	r1, r9
   1af1e:	4630      	mov	r0, r6
   1af20:	f7ff fed9 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   1af24:	4623      	mov	r3, r4
   1af26:	aa0a      	add	r2, sp, #40	; 0x28
   1af28:	4631      	mov	r1, r6
   1af2a:	4630      	mov	r0, r6
   1af2c:	9500      	str	r5, [sp, #0]
   1af2e:	f7ff fe18 	bl	1ab62 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   1af32:	4623      	mov	r3, r4
   1af34:	4632      	mov	r2, r6
   1af36:	4639      	mov	r1, r7
   1af38:	a812      	add	r0, sp, #72	; 0x48
   1af3a:	9500      	str	r5, [sp, #0]
   1af3c:	f7ff fe11 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   1af40:	4643      	mov	r3, r8
   1af42:	aa12      	add	r2, sp, #72	; 0x48
   1af44:	4649      	mov	r1, r9
   1af46:	4648      	mov	r0, r9
   1af48:	f7ff feb5 	bl	1acb6 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   1af4c:	4623      	mov	r3, r4
   1af4e:	4652      	mov	r2, sl
   1af50:	4649      	mov	r1, r9
   1af52:	4648      	mov	r0, r9
   1af54:	9500      	str	r5, [sp, #0]
   1af56:	f7ff fe04 	bl	1ab62 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   1af5a:	4642      	mov	r2, r8
   1af5c:	a902      	add	r1, sp, #8
   1af5e:	a812      	add	r0, sp, #72	; 0x48
   1af60:	f7ff feb9 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   1af64:	a912      	add	r1, sp, #72	; 0x48
   1af66:	4623      	mov	r3, r4
   1af68:	aa0a      	add	r2, sp, #40	; 0x28
   1af6a:	4608      	mov	r0, r1
   1af6c:	9500      	str	r5, [sp, #0]
   1af6e:	f7ff fdf8 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   1af72:	4623      	mov	r3, r4
   1af74:	463a      	mov	r2, r7
   1af76:	a912      	add	r1, sp, #72	; 0x48
   1af78:	a80a      	add	r0, sp, #40	; 0x28
   1af7a:	9500      	str	r5, [sp, #0]
   1af7c:	f7ff fdf1 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   1af80:	a90a      	add	r1, sp, #40	; 0x28
   1af82:	4643      	mov	r3, r8
   1af84:	aa02      	add	r2, sp, #8
   1af86:	4608      	mov	r0, r1
   1af88:	f7ff fe95 	bl	1acb6 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   1af8c:	4623      	mov	r3, r4
   1af8e:	4652      	mov	r2, sl
   1af90:	a90a      	add	r1, sp, #40	; 0x28
   1af92:	4650      	mov	r0, sl
   1af94:	9500      	str	r5, [sp, #0]
   1af96:	f7ff fde4 	bl	1ab62 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   1af9a:	462a      	mov	r2, r5
   1af9c:	a912      	add	r1, sp, #72	; 0x48
   1af9e:	4638      	mov	r0, r7
   1afa0:	f7ff fd77 	bl	1aa92 <uECC_vli_set>
}
   1afa4:	b01a      	add	sp, #104	; 0x68
   1afa6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001afaa <uECC_vli_modInv>:
{
   1afaa:	b5f0      	push	{r4, r5, r6, r7, lr}
   1afac:	460f      	mov	r7, r1
   1afae:	b0a1      	sub	sp, #132	; 0x84
   1afb0:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   1afb2:	4619      	mov	r1, r3
   1afb4:	4638      	mov	r0, r7
{
   1afb6:	4615      	mov	r5, r2
   1afb8:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   1afba:	f7ff fd30 	bl	1aa1e <uECC_vli_isZero>
   1afbe:	b120      	cbz	r0, 1afca <uECC_vli_modInv+0x20>
		uECC_vli_clear(result, num_words);
   1afc0:	4630      	mov	r0, r6
   1afc2:	f7ff fd21 	bl	1aa08 <uECC_vli_clear>
}
   1afc6:	b021      	add	sp, #132	; 0x84
   1afc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	uECC_vli_set(a, input, num_words);
   1afca:	4622      	mov	r2, r4
   1afcc:	4639      	mov	r1, r7
   1afce:	4668      	mov	r0, sp
   1afd0:	f7ff fd5f 	bl	1aa92 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   1afd4:	4629      	mov	r1, r5
   1afd6:	a808      	add	r0, sp, #32
   1afd8:	f7ff fd5b 	bl	1aa92 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   1afdc:	a810      	add	r0, sp, #64	; 0x40
   1afde:	4621      	mov	r1, r4
   1afe0:	f7ff fd12 	bl	1aa08 <uECC_vli_clear>
	u[0] = 1;
   1afe4:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   1afe6:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   1afe8:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   1afea:	f7ff fd0d 	bl	1aa08 <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   1afee:	4622      	mov	r2, r4
   1aff0:	a908      	add	r1, sp, #32
   1aff2:	4668      	mov	r0, sp
   1aff4:	f7ff fd59 	bl	1aaaa <uECC_vli_cmp_unsafe>
   1aff8:	b928      	cbnz	r0, 1b006 <uECC_vli_modInv+0x5c>
  	uECC_vli_set(result, u, num_words);
   1affa:	4622      	mov	r2, r4
   1affc:	a910      	add	r1, sp, #64	; 0x40
   1affe:	4630      	mov	r0, r6
   1b000:	f7ff fd47 	bl	1aa92 <uECC_vli_set>
   1b004:	e7df      	b.n	1afc6 <uECC_vli_modInv+0x1c>
		if (EVEN(a)) {
   1b006:	9b00      	ldr	r3, [sp, #0]
   1b008:	07da      	lsls	r2, r3, #31
   1b00a:	d409      	bmi.n	1b020 <uECC_vli_modInv+0x76>
			uECC_vli_rshift1(a, num_words);
   1b00c:	4621      	mov	r1, r4
   1b00e:	4668      	mov	r0, sp
   1b010:	f7ff fc59 	bl	1a8c6 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   1b014:	4622      	mov	r2, r4
   1b016:	4629      	mov	r1, r5
   1b018:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   1b01a:	f7ff fc61 	bl	1a8e0 <vli_modInv_update>
   1b01e:	e7e6      	b.n	1afee <uECC_vli_modInv+0x44>
    		} else if (EVEN(b)) {
   1b020:	9b08      	ldr	r3, [sp, #32]
   1b022:	07db      	lsls	r3, r3, #31
   1b024:	d407      	bmi.n	1b036 <uECC_vli_modInv+0x8c>
			uECC_vli_rshift1(b, num_words);
   1b026:	4621      	mov	r1, r4
   1b028:	a808      	add	r0, sp, #32
   1b02a:	f7ff fc4c 	bl	1a8c6 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   1b02e:	4622      	mov	r2, r4
   1b030:	4629      	mov	r1, r5
   1b032:	a818      	add	r0, sp, #96	; 0x60
   1b034:	e7f1      	b.n	1b01a <uECC_vli_modInv+0x70>
		} else if (cmpResult > 0) {
   1b036:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   1b038:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   1b03a:	dd1c      	ble.n	1b076 <uECC_vli_modInv+0xcc>
			uECC_vli_sub(a, a, b, num_words);
   1b03c:	aa08      	add	r2, sp, #32
   1b03e:	4669      	mov	r1, sp
   1b040:	4668      	mov	r0, sp
   1b042:	f7ff fd5c 	bl	1aafe <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   1b046:	4621      	mov	r1, r4
   1b048:	4668      	mov	r0, sp
   1b04a:	f7ff fc3c 	bl	1a8c6 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   1b04e:	4622      	mov	r2, r4
   1b050:	a918      	add	r1, sp, #96	; 0x60
   1b052:	a810      	add	r0, sp, #64	; 0x40
   1b054:	f7ff fd29 	bl	1aaaa <uECC_vli_cmp_unsafe>
   1b058:	2800      	cmp	r0, #0
   1b05a:	da05      	bge.n	1b068 <uECC_vli_modInv+0xbe>
        			uECC_vli_add(u, u, mod, num_words);
   1b05c:	a910      	add	r1, sp, #64	; 0x40
   1b05e:	4623      	mov	r3, r4
   1b060:	462a      	mov	r2, r5
   1b062:	4608      	mov	r0, r1
   1b064:	f7ff fc17 	bl	1a896 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   1b068:	a910      	add	r1, sp, #64	; 0x40
   1b06a:	4623      	mov	r3, r4
   1b06c:	aa18      	add	r2, sp, #96	; 0x60
   1b06e:	4608      	mov	r0, r1
   1b070:	f7ff fd45 	bl	1aafe <uECC_vli_sub>
   1b074:	e7ce      	b.n	1b014 <uECC_vli_modInv+0x6a>
      			uECC_vli_sub(b, b, a, num_words);
   1b076:	a908      	add	r1, sp, #32
   1b078:	466a      	mov	r2, sp
   1b07a:	4608      	mov	r0, r1
   1b07c:	f7ff fd3f 	bl	1aafe <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   1b080:	4621      	mov	r1, r4
   1b082:	a808      	add	r0, sp, #32
   1b084:	f7ff fc1f 	bl	1a8c6 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   1b088:	4622      	mov	r2, r4
   1b08a:	a910      	add	r1, sp, #64	; 0x40
   1b08c:	a818      	add	r0, sp, #96	; 0x60
   1b08e:	f7ff fd0c 	bl	1aaaa <uECC_vli_cmp_unsafe>
   1b092:	2800      	cmp	r0, #0
   1b094:	da05      	bge.n	1b0a2 <uECC_vli_modInv+0xf8>
        			uECC_vli_add(v, v, mod, num_words);
   1b096:	a918      	add	r1, sp, #96	; 0x60
   1b098:	4623      	mov	r3, r4
   1b09a:	462a      	mov	r2, r5
   1b09c:	4608      	mov	r0, r1
   1b09e:	f7ff fbfa 	bl	1a896 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   1b0a2:	a918      	add	r1, sp, #96	; 0x60
   1b0a4:	4623      	mov	r3, r4
   1b0a6:	aa10      	add	r2, sp, #64	; 0x40
   1b0a8:	4608      	mov	r0, r1
   1b0aa:	f7ff fd28 	bl	1aafe <uECC_vli_sub>
   1b0ae:	e7be      	b.n	1b02e <uECC_vli_modInv+0x84>

0001b0b0 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   1b0b0:	7809      	ldrb	r1, [r1, #0]
   1b0b2:	0049      	lsls	r1, r1, #1
   1b0b4:	b249      	sxtb	r1, r1
   1b0b6:	f7ff bcb2 	b.w	1aa1e <uECC_vli_isZero>

0001b0ba <apply_z>:
{
   1b0ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b0bc:	4615      	mov	r5, r2
   1b0be:	b089      	sub	sp, #36	; 0x24
   1b0c0:	461c      	mov	r4, r3
   1b0c2:	4607      	mov	r7, r0
   1b0c4:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   1b0c6:	461a      	mov	r2, r3
   1b0c8:	4629      	mov	r1, r5
   1b0ca:	4668      	mov	r0, sp
   1b0cc:	f7ff fe03 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   1b0d0:	4623      	mov	r3, r4
   1b0d2:	466a      	mov	r2, sp
   1b0d4:	4639      	mov	r1, r7
   1b0d6:	4638      	mov	r0, r7
   1b0d8:	f7ff fded 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   1b0dc:	4623      	mov	r3, r4
   1b0de:	462a      	mov	r2, r5
   1b0e0:	4669      	mov	r1, sp
   1b0e2:	4668      	mov	r0, sp
   1b0e4:	f7ff fde7 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   1b0e8:	4623      	mov	r3, r4
   1b0ea:	466a      	mov	r2, sp
   1b0ec:	4631      	mov	r1, r6
   1b0ee:	4630      	mov	r0, r6
   1b0f0:	f7ff fde1 	bl	1acb6 <uECC_vli_modMult_fast>
}
   1b0f4:	b009      	add	sp, #36	; 0x24
   1b0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001b0f8 <XYcZ_add>:
{
   1b0f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b0fc:	b08a      	sub	sp, #40	; 0x28
   1b0fe:	4614      	mov	r4, r2
   1b100:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   1b104:	4655      	mov	r5, sl
{
   1b106:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   1b108:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1b10c:	9600      	str	r6, [sp, #0]
{
   1b10e:	4680      	mov	r8, r0
   1b110:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   1b112:	462b      	mov	r3, r5
   1b114:	4602      	mov	r2, r0
   1b116:	4621      	mov	r1, r4
   1b118:	a802      	add	r0, sp, #8
   1b11a:	f7ff fd22 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   1b11e:	a902      	add	r1, sp, #8
   1b120:	4652      	mov	r2, sl
   1b122:	4608      	mov	r0, r1
   1b124:	f7ff fdd7 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   1b128:	4653      	mov	r3, sl
   1b12a:	aa02      	add	r2, sp, #8
   1b12c:	4641      	mov	r1, r8
   1b12e:	4640      	mov	r0, r8
   1b130:	f7ff fdc1 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   1b134:	4653      	mov	r3, sl
   1b136:	aa02      	add	r2, sp, #8
   1b138:	4621      	mov	r1, r4
   1b13a:	4620      	mov	r0, r4
   1b13c:	f7ff fdbb 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   1b140:	462b      	mov	r3, r5
   1b142:	464a      	mov	r2, r9
   1b144:	4639      	mov	r1, r7
   1b146:	4638      	mov	r0, r7
   1b148:	9600      	str	r6, [sp, #0]
   1b14a:	f7ff fd0a 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   1b14e:	4652      	mov	r2, sl
   1b150:	4639      	mov	r1, r7
   1b152:	a802      	add	r0, sp, #8
   1b154:	f7ff fdbf 	bl	1acd6 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   1b158:	a902      	add	r1, sp, #8
   1b15a:	462b      	mov	r3, r5
   1b15c:	4642      	mov	r2, r8
   1b15e:	4608      	mov	r0, r1
   1b160:	9600      	str	r6, [sp, #0]
   1b162:	f7ff fcfe 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   1b166:	a902      	add	r1, sp, #8
   1b168:	462b      	mov	r3, r5
   1b16a:	4622      	mov	r2, r4
   1b16c:	4608      	mov	r0, r1
   1b16e:	9600      	str	r6, [sp, #0]
   1b170:	f7ff fcf7 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   1b174:	462b      	mov	r3, r5
   1b176:	4642      	mov	r2, r8
   1b178:	4621      	mov	r1, r4
   1b17a:	4620      	mov	r0, r4
   1b17c:	9600      	str	r6, [sp, #0]
   1b17e:	f7ff fcf0 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   1b182:	4653      	mov	r3, sl
   1b184:	4622      	mov	r2, r4
   1b186:	4649      	mov	r1, r9
   1b188:	4648      	mov	r0, r9
   1b18a:	f7ff fd94 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   1b18e:	462b      	mov	r3, r5
   1b190:	aa02      	add	r2, sp, #8
   1b192:	4641      	mov	r1, r8
   1b194:	4620      	mov	r0, r4
   1b196:	9600      	str	r6, [sp, #0]
   1b198:	f7ff fce3 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   1b19c:	4653      	mov	r3, sl
   1b19e:	4622      	mov	r2, r4
   1b1a0:	4639      	mov	r1, r7
   1b1a2:	4638      	mov	r0, r7
   1b1a4:	f7ff fd87 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   1b1a8:	462b      	mov	r3, r5
   1b1aa:	464a      	mov	r2, r9
   1b1ac:	4639      	mov	r1, r7
   1b1ae:	4638      	mov	r0, r7
   1b1b0:	9600      	str	r6, [sp, #0]
   1b1b2:	f7ff fcd6 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   1b1b6:	4632      	mov	r2, r6
   1b1b8:	a902      	add	r1, sp, #8
   1b1ba:	4620      	mov	r0, r4
   1b1bc:	f7ff fc69 	bl	1aa92 <uECC_vli_set>
}
   1b1c0:	b00a      	add	sp, #40	; 0x28
   1b1c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001b1c6 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   1b1c6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b1ca:	b0b1      	sub	sp, #196	; 0xc4
   1b1cc:	e9cd 0103 	strd	r0, r1, [sp, #12]
   1b1d0:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   1b1d2:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   1b1d6:	a818      	add	r0, sp, #96	; 0x60
{
   1b1d8:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   1b1da:	463a      	mov	r2, r7
{
   1b1dc:	461e      	mov	r6, r3
	uECC_vli_set(Rx[1], point, num_words);
   1b1de:	f7ff fc58 	bl	1aa92 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   1b1e2:	00bb      	lsls	r3, r7, #2
   1b1e4:	9305      	str	r3, [sp, #20]
   1b1e6:	9b04      	ldr	r3, [sp, #16]
   1b1e8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   1b1ec:	4619      	mov	r1, r3
   1b1ee:	a828      	add	r0, sp, #160	; 0xa0
   1b1f0:	9302      	str	r3, [sp, #8]
   1b1f2:	f7ff fc4e 	bl	1aa92 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   1b1f6:	f994 5000 	ldrsb.w	r5, [r4]
	if (initial_Z) {
   1b1fa:	2e00      	cmp	r6, #0
   1b1fc:	f000 8088 	beq.w	1b310 <EccPoint_mult+0x14a>
		uECC_vli_set(z, initial_Z, num_words);
   1b200:	462a      	mov	r2, r5
   1b202:	4631      	mov	r1, r6
   1b204:	a808      	add	r0, sp, #32
   1b206:	f7ff fc44 	bl	1aa92 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   1b20a:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   1b20e:	462a      	mov	r2, r5
   1b210:	a918      	add	r1, sp, #96	; 0x60
   1b212:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   1b214:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   1b218:	f7ff fc3b 	bl	1aa92 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   1b21c:	a928      	add	r1, sp, #160	; 0xa0
   1b21e:	4648      	mov	r0, r9
   1b220:	f7ff fc37 	bl	1aa92 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   1b224:	4623      	mov	r3, r4
   1b226:	aa08      	add	r2, sp, #32
   1b228:	a928      	add	r1, sp, #160	; 0xa0
   1b22a:	a818      	add	r0, sp, #96	; 0x60
   1b22c:	f7ff ff45 	bl	1b0ba <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   1b230:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   1b234:	4623      	mov	r3, r4
   1b236:	aa08      	add	r2, sp, #32
   1b238:	a928      	add	r1, sp, #160	; 0xa0
   1b23a:	a818      	add	r0, sp, #96	; 0x60
   1b23c:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   1b23e:	4623      	mov	r3, r4
   1b240:	aa08      	add	r2, sp, #32
   1b242:	4649      	mov	r1, r9
   1b244:	4640      	mov	r0, r8
   1b246:	f7ff ff38 	bl	1b0ba <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   1b24a:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   1b24e:	3d02      	subs	r5, #2
   1b250:	b22d      	sxth	r5, r5
   1b252:	2d00      	cmp	r5, #0
   1b254:	dc63      	bgt.n	1b31e <EccPoint_mult+0x158>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1b256:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1b25a:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   1b25c:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1b260:	ab10      	add	r3, sp, #64	; 0x40
   1b262:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   1b266:	43ed      	mvns	r5, r5
   1b268:	ab20      	add	r3, sp, #128	; 0x80
   1b26a:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   1b26e:	f005 0501 	and.w	r5, r5, #1
   1b272:	ab10      	add	r3, sp, #64	; 0x40
   1b274:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   1b278:	ab20      	add	r3, sp, #128	; 0x80
   1b27a:	eb03 1545 	add.w	r5, r3, r5, lsl #5

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1b27e:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1b282:	462b      	mov	r3, r5
   1b284:	464a      	mov	r2, r9
   1b286:	4631      	mov	r1, r6
   1b288:	4640      	mov	r0, r8
   1b28a:	f7ff fe00 	bl	1ae8e <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   1b28e:	4653      	mov	r3, sl
   1b290:	aa10      	add	r2, sp, #64	; 0x40
   1b292:	a918      	add	r1, sp, #96	; 0x60
   1b294:	a808      	add	r0, sp, #32
   1b296:	9700      	str	r7, [sp, #0]
   1b298:	f7ff fc63 	bl	1ab62 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   1b29c:	a908      	add	r1, sp, #32
   1b29e:	4623      	mov	r3, r4
   1b2a0:	4632      	mov	r2, r6
   1b2a2:	4608      	mov	r0, r1
   1b2a4:	f7ff fd07 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   1b2a8:	a908      	add	r1, sp, #32
   1b2aa:	9a04      	ldr	r2, [sp, #16]
   1b2ac:	4623      	mov	r3, r4
   1b2ae:	4608      	mov	r0, r1
   1b2b0:	f7ff fd01 	bl	1acb6 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   1b2b4:	a908      	add	r1, sp, #32
   1b2b6:	463b      	mov	r3, r7
   1b2b8:	4652      	mov	r2, sl
   1b2ba:	4608      	mov	r0, r1
   1b2bc:	f7ff fe75 	bl	1afaa <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   1b2c0:	a908      	add	r1, sp, #32
   1b2c2:	9a02      	ldr	r2, [sp, #8]
   1b2c4:	4623      	mov	r3, r4
   1b2c6:	4608      	mov	r0, r1
   1b2c8:	f7ff fcf5 	bl	1acb6 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   1b2cc:	a908      	add	r1, sp, #32
   1b2ce:	4623      	mov	r3, r4
   1b2d0:	4642      	mov	r2, r8
   1b2d2:	4608      	mov	r0, r1
   1b2d4:	f7ff fcef 	bl	1acb6 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1b2d8:	9400      	str	r4, [sp, #0]
   1b2da:	4633      	mov	r3, r6
   1b2dc:	4642      	mov	r2, r8
   1b2de:	4629      	mov	r1, r5
   1b2e0:	4648      	mov	r0, r9
   1b2e2:	f7ff ff09 	bl	1b0f8 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   1b2e6:	4623      	mov	r3, r4
   1b2e8:	aa08      	add	r2, sp, #32
   1b2ea:	a920      	add	r1, sp, #128	; 0x80
   1b2ec:	a810      	add	r0, sp, #64	; 0x40
   1b2ee:	f7ff fee4 	bl	1b0ba <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   1b2f2:	9803      	ldr	r0, [sp, #12]
   1b2f4:	463a      	mov	r2, r7
   1b2f6:	a910      	add	r1, sp, #64	; 0x40
   1b2f8:	f7ff fbcb 	bl	1aa92 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   1b2fc:	9b03      	ldr	r3, [sp, #12]
   1b2fe:	9c05      	ldr	r4, [sp, #20]
   1b300:	4423      	add	r3, r4
   1b302:	a920      	add	r1, sp, #128	; 0x80
   1b304:	4618      	mov	r0, r3
   1b306:	f7ff fbc4 	bl	1aa92 <uECC_vli_set>
}
   1b30a:	b031      	add	sp, #196	; 0xc4
   1b30c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   1b310:	4629      	mov	r1, r5
   1b312:	a808      	add	r0, sp, #32
   1b314:	f7ff fb78 	bl	1aa08 <uECC_vli_clear>
		z[0] = 1;
   1b318:	2301      	movs	r3, #1
   1b31a:	9308      	str	r3, [sp, #32]
   1b31c:	e775      	b.n	1b20a <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   1b31e:	4629      	mov	r1, r5
   1b320:	4650      	mov	r0, sl
   1b322:	f7ff fb8b 	bl	1aa3c <uECC_vli_testBit>
   1b326:	fab0 f680 	clz	r6, r0
   1b32a:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   1b32c:	f1c6 0101 	rsb	r1, r6, #1
   1b330:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   1b334:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   1b338:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   1b33c:	4633      	mov	r3, r6
   1b33e:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   1b342:	465a      	mov	r2, fp
   1b344:	9400      	str	r4, [sp, #0]
   1b346:	e9cd 0106 	strd	r0, r1, [sp, #24]
   1b34a:	f7ff fda0 	bl	1ae8e <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   1b34e:	9907      	ldr	r1, [sp, #28]
   1b350:	9806      	ldr	r0, [sp, #24]
   1b352:	9400      	str	r4, [sp, #0]
   1b354:	460b      	mov	r3, r1
   1b356:	4602      	mov	r2, r0
   1b358:	4631      	mov	r1, r6
   1b35a:	4658      	mov	r0, fp
   1b35c:	f7ff fecc 	bl	1b0f8 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   1b360:	3d01      	subs	r5, #1
   1b362:	e775      	b.n	1b250 <EccPoint_mult+0x8a>

0001b364 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   1b364:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1b368:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   1b36c:	f119 081f 	adds.w	r8, r9, #31
{
   1b370:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1b372:	bf48      	it	mi
   1b374:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   1b378:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   1b37a:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1b37e:	3524      	adds	r5, #36	; 0x24
   1b380:	4601      	mov	r1, r0
{
   1b382:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1b384:	4643      	mov	r3, r8
   1b386:	462a      	mov	r2, r5
   1b388:	4630      	mov	r0, r6
   1b38a:	f7ff fa84 	bl	1a896 <uECC_vli_add>
   1b38e:	4604      	mov	r4, r0
   1b390:	b990      	cbnz	r0, 1b3b8 <regularize_k+0x54>
   1b392:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   1b396:	da06      	bge.n	1b3a6 <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   1b398:	4649      	mov	r1, r9
   1b39a:	4630      	mov	r0, r6
   1b39c:	f7ff fb4e 	bl	1aa3c <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   1b3a0:	1e04      	subs	r4, r0, #0
   1b3a2:	bf18      	it	ne
   1b3a4:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   1b3a6:	4643      	mov	r3, r8
   1b3a8:	462a      	mov	r2, r5
   1b3aa:	4631      	mov	r1, r6
   1b3ac:	4638      	mov	r0, r7
   1b3ae:	f7ff fa72 	bl	1a896 <uECC_vli_add>

	return carry;
}
   1b3b2:	4620      	mov	r0, r4
   1b3b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   1b3b8:	2401      	movs	r4, #1
   1b3ba:	e7f4      	b.n	1b3a6 <regularize_k+0x42>

0001b3bc <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   1b3bc:	b530      	push	{r4, r5, lr}
   1b3be:	4614      	mov	r4, r2
   1b3c0:	b095      	sub	sp, #84	; 0x54
   1b3c2:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1b3c4:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1b3c6:	4623      	mov	r3, r4
{
   1b3c8:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   1b3ca:	a904      	add	r1, sp, #16
   1b3cc:	9102      	str	r1, [sp, #8]
   1b3ce:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   1b3d0:	f7ff ffc8 	bl	1b364 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   1b3d4:	fab0 f380 	clz	r3, r0
   1b3d8:	095b      	lsrs	r3, r3, #5
   1b3da:	aa14      	add	r2, sp, #80	; 0x50
   1b3dc:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   1b3e0:	8863      	ldrh	r3, [r4, #2]
   1b3e2:	9401      	str	r4, [sp, #4]
   1b3e4:	3301      	adds	r3, #1
   1b3e6:	b21b      	sxth	r3, r3
   1b3e8:	9300      	str	r3, [sp, #0]
   1b3ea:	f852 2c48 	ldr.w	r2, [r2, #-72]
   1b3ee:	2300      	movs	r3, #0
   1b3f0:	f104 0144 	add.w	r1, r4, #68	; 0x44
   1b3f4:	4628      	mov	r0, r5
   1b3f6:	f7ff fee6 	bl	1b1c6 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   1b3fa:	4621      	mov	r1, r4
   1b3fc:	4628      	mov	r0, r5
   1b3fe:	f7ff fe57 	bl	1b0b0 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   1b402:	fab0 f080 	clz	r0, r0
   1b406:	0940      	lsrs	r0, r0, #5
   1b408:	b015      	add	sp, #84	; 0x54
   1b40a:	bd30      	pop	{r4, r5, pc}

0001b40c <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   1b40c:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   1b40e:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1b410:	1e4f      	subs	r7, r1, #1
   1b412:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   1b414:	428c      	cmp	r4, r1
   1b416:	f105 0501 	add.w	r5, r5, #1
   1b41a:	db00      	blt.n	1b41e <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   1b41c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1b41e:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   1b420:	f023 0603 	bic.w	r6, r3, #3
   1b424:	f003 0303 	and.w	r3, r3, #3
   1b428:	5996      	ldr	r6, [r2, r6]
   1b42a:	00db      	lsls	r3, r3, #3
   1b42c:	fa26 f303 	lsr.w	r3, r6, r3
   1b430:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   1b432:	e7ee      	b.n	1b412 <uECC_vli_nativeToBytes+0x6>

0001b434 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   1b434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b436:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1b438:	1cd1      	adds	r1, r2, #3
   1b43a:	bf48      	it	mi
   1b43c:	1d91      	addmi	r1, r2, #6
   1b43e:	f341 0187 	sbfx	r1, r1, #2, #8
{
   1b442:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   1b444:	f7ff fae0 	bl	1aa08 <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   1b448:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   1b44a:	1e67      	subs	r7, r4, #1
   1b44c:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   1b44e:	42a2      	cmp	r2, r4
   1b450:	f105 0501 	add.w	r5, r5, #1
   1b454:	db00      	blt.n	1b458 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   1b456:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   1b458:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   1b45a:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   1b45e:	5cb2      	ldrb	r2, [r6, r2]
   1b460:	f003 0303 	and.w	r3, r3, #3
   1b464:	00db      	lsls	r3, r3, #3
   1b466:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   1b46a:	5842      	ldr	r2, [r0, r1]
   1b46c:	431a      	orrs	r2, r3
   1b46e:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   1b470:	e7ec      	b.n	1b44c <uECC_vli_bytesToNative+0x18>

0001b472 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   1b472:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b474:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   1b476:	f991 6000 	ldrsb.w	r6, [r1]
{
   1b47a:	4605      	mov	r5, r0
   1b47c:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   1b47e:	f7ff fe17 	bl	1b0b0 <EccPoint_isZero>
   1b482:	bb28      	cbnz	r0, 1b4d0 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1b484:	1d27      	adds	r7, r4, #4
   1b486:	4632      	mov	r2, r6
   1b488:	4629      	mov	r1, r5
   1b48a:	4638      	mov	r0, r7
   1b48c:	f7ff fb0d 	bl	1aaaa <uECC_vli_cmp_unsafe>
   1b490:	2801      	cmp	r0, #1
   1b492:	d120      	bne.n	1b4d6 <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   1b494:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   1b498:	4632      	mov	r2, r6
   1b49a:	4638      	mov	r0, r7
   1b49c:	f7ff fb05 	bl	1aaaa <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   1b4a0:	2801      	cmp	r0, #1
   1b4a2:	d118      	bne.n	1b4d6 <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   1b4a4:	4622      	mov	r2, r4
   1b4a6:	4668      	mov	r0, sp
   1b4a8:	f7ff fc15 	bl	1acd6 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   1b4ac:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1b4b0:	4622      	mov	r2, r4
   1b4b2:	4629      	mov	r1, r5
   1b4b4:	a808      	add	r0, sp, #32
   1b4b6:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   1b4b8:	4632      	mov	r2, r6
   1b4ba:	a908      	add	r1, sp, #32
   1b4bc:	4668      	mov	r0, sp
   1b4be:	f7ff fb0b 	bl	1aad8 <uECC_vli_equal>
   1b4c2:	2800      	cmp	r0, #0
		return -3;
   1b4c4:	bf0c      	ite	eq
   1b4c6:	2000      	moveq	r0, #0
   1b4c8:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   1b4cc:	b011      	add	sp, #68	; 0x44
   1b4ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   1b4d0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1b4d4:	e7fa      	b.n	1b4cc <uECC_valid_point+0x5a>
		return -2;
   1b4d6:	f06f 0001 	mvn.w	r0, #1
   1b4da:	e7f7      	b.n	1b4cc <uECC_valid_point+0x5a>

0001b4dc <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   1b4dc:	b570      	push	{r4, r5, r6, lr}
   1b4de:	460c      	mov	r4, r1
   1b4e0:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   1b4e2:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1b4e4:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   1b4e8:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   1b4ea:	4601      	mov	r1, r0
   1b4ec:	4668      	mov	r0, sp
   1b4ee:	f7ff ffa1 	bl	1b434 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   1b4f2:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   1b4f6:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   1b4fa:	18a9      	adds	r1, r5, r2
   1b4fc:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   1b500:	f7ff ff98 	bl	1b434 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   1b504:	2210      	movs	r2, #16
   1b506:	4631      	mov	r1, r6
   1b508:	4668      	mov	r0, sp
   1b50a:	f7ff face 	bl	1aaaa <uECC_vli_cmp_unsafe>
   1b50e:	b128      	cbz	r0, 1b51c <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   1b510:	4621      	mov	r1, r4
   1b512:	4668      	mov	r0, sp
   1b514:	f7ff ffad 	bl	1b472 <uECC_valid_point>
}
   1b518:	b010      	add	sp, #64	; 0x40
   1b51a:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   1b51c:	f06f 0003 	mvn.w	r0, #3
   1b520:	e7fa      	b.n	1b518 <uECC_valid_public_key+0x3c>

0001b522 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   1b522:	78cb      	ldrb	r3, [r1, #3]
   1b524:	7802      	ldrb	r2, [r0, #0]
   1b526:	4053      	eors	r3, r2
   1b528:	7003      	strb	r3, [r0, #0]
   1b52a:	884b      	ldrh	r3, [r1, #2]
   1b52c:	7842      	ldrb	r2, [r0, #1]
   1b52e:	4053      	eors	r3, r2
   1b530:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   1b532:	680a      	ldr	r2, [r1, #0]
   1b534:	7883      	ldrb	r3, [r0, #2]
   1b536:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b53a:	7083      	strb	r3, [r0, #2]
   1b53c:	680a      	ldr	r2, [r1, #0]
   1b53e:	78c3      	ldrb	r3, [r0, #3]
   1b540:	4053      	eors	r3, r2
   1b542:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   1b544:	79cb      	ldrb	r3, [r1, #7]
   1b546:	7902      	ldrb	r2, [r0, #4]
   1b548:	4053      	eors	r3, r2
   1b54a:	7103      	strb	r3, [r0, #4]
   1b54c:	88cb      	ldrh	r3, [r1, #6]
   1b54e:	7942      	ldrb	r2, [r0, #5]
   1b550:	4053      	eors	r3, r2
   1b552:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   1b554:	684a      	ldr	r2, [r1, #4]
   1b556:	7983      	ldrb	r3, [r0, #6]
   1b558:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b55c:	7183      	strb	r3, [r0, #6]
   1b55e:	684a      	ldr	r2, [r1, #4]
   1b560:	79c3      	ldrb	r3, [r0, #7]
   1b562:	4053      	eors	r3, r2
   1b564:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   1b566:	7acb      	ldrb	r3, [r1, #11]
   1b568:	7a02      	ldrb	r2, [r0, #8]
   1b56a:	4053      	eors	r3, r2
   1b56c:	7203      	strb	r3, [r0, #8]
   1b56e:	7a42      	ldrb	r2, [r0, #9]
   1b570:	894b      	ldrh	r3, [r1, #10]
   1b572:	4053      	eors	r3, r2
   1b574:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   1b576:	688a      	ldr	r2, [r1, #8]
   1b578:	7a83      	ldrb	r3, [r0, #10]
   1b57a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b57e:	7283      	strb	r3, [r0, #10]
   1b580:	688a      	ldr	r2, [r1, #8]
   1b582:	7ac3      	ldrb	r3, [r0, #11]
   1b584:	4053      	eors	r3, r2
   1b586:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   1b588:	7bcb      	ldrb	r3, [r1, #15]
   1b58a:	7b02      	ldrb	r2, [r0, #12]
   1b58c:	4053      	eors	r3, r2
   1b58e:	7303      	strb	r3, [r0, #12]
   1b590:	89cb      	ldrh	r3, [r1, #14]
   1b592:	7b42      	ldrb	r2, [r0, #13]
   1b594:	4053      	eors	r3, r2
   1b596:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   1b598:	68ca      	ldr	r2, [r1, #12]
   1b59a:	7b83      	ldrb	r3, [r0, #14]
   1b59c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   1b5a0:	7383      	strb	r3, [r0, #14]
   1b5a2:	68ca      	ldr	r2, [r1, #12]
   1b5a4:	7bc3      	ldrb	r3, [r0, #15]
   1b5a6:	4053      	eors	r3, r2
   1b5a8:	73c3      	strb	r3, [r0, #15]
}
   1b5aa:	4770      	bx	lr

0001b5ac <shift_rows>:
{
   1b5ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   1b5ae:	7802      	ldrb	r2, [r0, #0]
   1b5b0:	f88d 2000 	strb.w	r2, [sp]
   1b5b4:	7942      	ldrb	r2, [r0, #5]
   1b5b6:	f88d 2001 	strb.w	r2, [sp, #1]
   1b5ba:	7a82      	ldrb	r2, [r0, #10]
   1b5bc:	f88d 2002 	strb.w	r2, [sp, #2]
   1b5c0:	7bc2      	ldrb	r2, [r0, #15]
   1b5c2:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   1b5c6:	7902      	ldrb	r2, [r0, #4]
   1b5c8:	f88d 2004 	strb.w	r2, [sp, #4]
   1b5cc:	7a42      	ldrb	r2, [r0, #9]
   1b5ce:	f88d 2005 	strb.w	r2, [sp, #5]
   1b5d2:	7b82      	ldrb	r2, [r0, #14]
   1b5d4:	f88d 2006 	strb.w	r2, [sp, #6]
   1b5d8:	78c2      	ldrb	r2, [r0, #3]
   1b5da:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   1b5de:	7a02      	ldrb	r2, [r0, #8]
   1b5e0:	f88d 2008 	strb.w	r2, [sp, #8]
   1b5e4:	7b42      	ldrb	r2, [r0, #13]
   1b5e6:	f88d 2009 	strb.w	r2, [sp, #9]
   1b5ea:	7882      	ldrb	r2, [r0, #2]
   1b5ec:	f88d 200a 	strb.w	r2, [sp, #10]
   1b5f0:	79c2      	ldrb	r2, [r0, #7]
   1b5f2:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   1b5f6:	7b02      	ldrb	r2, [r0, #12]
   1b5f8:	f88d 200c 	strb.w	r2, [sp, #12]
   1b5fc:	7842      	ldrb	r2, [r0, #1]
   1b5fe:	7ac3      	ldrb	r3, [r0, #11]
   1b600:	f88d 200d 	strb.w	r2, [sp, #13]
   1b604:	7982      	ldrb	r2, [r0, #6]
   1b606:	f88d 200e 	strb.w	r2, [sp, #14]
   1b60a:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   1b60e:	2310      	movs	r3, #16
   1b610:	466a      	mov	r2, sp
   1b612:	4619      	mov	r1, r3
   1b614:	f7ff f87b 	bl	1a70e <_copy>
}
   1b618:	b005      	add	sp, #20
   1b61a:	f85d fb04 	ldr.w	pc, [sp], #4

0001b61e <mult_row_column>:
{
   1b61e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b620:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b622:	7808      	ldrb	r0, [r1, #0]
{
   1b624:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   1b626:	f7ff f881 	bl	1a72c <_double_byte>
   1b62a:	4605      	mov	r5, r0
   1b62c:	7860      	ldrb	r0, [r4, #1]
   1b62e:	f7ff f87d 	bl	1a72c <_double_byte>
   1b632:	78a2      	ldrb	r2, [r4, #2]
   1b634:	7863      	ldrb	r3, [r4, #1]
   1b636:	4053      	eors	r3, r2
   1b638:	78e2      	ldrb	r2, [r4, #3]
   1b63a:	4053      	eors	r3, r2
   1b63c:	405d      	eors	r5, r3
   1b63e:	4045      	eors	r5, r0
   1b640:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   1b642:	7860      	ldrb	r0, [r4, #1]
   1b644:	7827      	ldrb	r7, [r4, #0]
   1b646:	f7ff f871 	bl	1a72c <_double_byte>
   1b64a:	4605      	mov	r5, r0
   1b64c:	78a0      	ldrb	r0, [r4, #2]
   1b64e:	f7ff f86d 	bl	1a72c <_double_byte>
   1b652:	78a3      	ldrb	r3, [r4, #2]
   1b654:	405f      	eors	r7, r3
   1b656:	78e3      	ldrb	r3, [r4, #3]
   1b658:	405f      	eors	r7, r3
   1b65a:	407d      	eors	r5, r7
   1b65c:	4045      	eors	r5, r0
   1b65e:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   1b660:	78a0      	ldrb	r0, [r4, #2]
   1b662:	7865      	ldrb	r5, [r4, #1]
   1b664:	7827      	ldrb	r7, [r4, #0]
   1b666:	f7ff f861 	bl	1a72c <_double_byte>
   1b66a:	406f      	eors	r7, r5
   1b66c:	4605      	mov	r5, r0
   1b66e:	78e0      	ldrb	r0, [r4, #3]
   1b670:	f7ff f85c 	bl	1a72c <_double_byte>
   1b674:	78e3      	ldrb	r3, [r4, #3]
   1b676:	405f      	eors	r7, r3
   1b678:	407d      	eors	r5, r7
   1b67a:	4045      	eors	r5, r0
   1b67c:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   1b67e:	7820      	ldrb	r0, [r4, #0]
   1b680:	f7ff f854 	bl	1a72c <_double_byte>
   1b684:	7863      	ldrb	r3, [r4, #1]
   1b686:	7825      	ldrb	r5, [r4, #0]
   1b688:	405d      	eors	r5, r3
   1b68a:	78a3      	ldrb	r3, [r4, #2]
   1b68c:	405d      	eors	r5, r3
   1b68e:	4045      	eors	r5, r0
   1b690:	78e0      	ldrb	r0, [r4, #3]
   1b692:	f7ff f84b 	bl	1a72c <_double_byte>
   1b696:	b2ed      	uxtb	r5, r5
   1b698:	4045      	eors	r5, r0
   1b69a:	70f5      	strb	r5, [r6, #3]
}
   1b69c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001b69e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   1b69e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b6a0:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   1b6a2:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   1b6a4:	f912 3b10 	ldrsb.w	r3, [r2], #16
   1b6a8:	2b00      	cmp	r3, #0
   1b6aa:	bfb4      	ite	lt
   1b6ac:	2387      	movlt	r3, #135	; 0x87
   1b6ae:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   1b6b0:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   1b6b4:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   1b6b8:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   1b6ba:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   1b6be:	d002      	beq.n	1b6c6 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   1b6c0:	7813      	ldrb	r3, [r2, #0]
   1b6c2:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   1b6c4:	e7f4      	b.n	1b6b0 <gf_double+0x12>
	}
}
   1b6c6:	bd10      	pop	{r4, pc}

0001b6c8 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   1b6c8:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   1b6ca:	b120      	cbz	r0, 1b6d6 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   1b6cc:	2258      	movs	r2, #88	; 0x58
   1b6ce:	2100      	movs	r1, #0
   1b6d0:	f7ff f82a 	bl	1a728 <_set>
   1b6d4:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b6d6:	bd08      	pop	{r3, pc}

0001b6d8 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   1b6d8:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b6da:	4604      	mov	r4, r0
   1b6dc:	b188      	cbz	r0, 1b702 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b6de:	2210      	movs	r2, #16
   1b6e0:	2100      	movs	r1, #0
   1b6e2:	f7ff f821 	bl	1a728 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   1b6e6:	2210      	movs	r2, #16
   1b6e8:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b6ec:	2100      	movs	r1, #0
   1b6ee:	f7ff f81b 	bl	1a728 <_set>
	s->leftover_offset = 0;
   1b6f2:	2300      	movs	r3, #0
   1b6f4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   1b6f6:	2200      	movs	r2, #0
   1b6f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   1b6fc:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   1b700:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   1b702:	bd10      	pop	{r4, pc}

0001b704 <tc_cmac_setup>:
{
   1b704:	b570      	push	{r4, r5, r6, lr}
   1b706:	460d      	mov	r5, r1
   1b708:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   1b70a:	4604      	mov	r4, r0
   1b70c:	b310      	cbz	r0, 1b754 <tc_cmac_setup+0x50>
   1b70e:	b311      	cbz	r1, 1b756 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   1b710:	2258      	movs	r2, #88	; 0x58
   1b712:	2100      	movs	r1, #0
   1b714:	f7ff f808 	bl	1a728 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   1b718:	4629      	mov	r1, r5
	s->sched = sched;
   1b71a:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   1b71c:	4630      	mov	r0, r6
   1b71e:	f7e9 fd8b 	bl	5238 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   1b722:	2210      	movs	r2, #16
   1b724:	2100      	movs	r1, #0
   1b726:	4620      	mov	r0, r4
   1b728:	f7fe fffe 	bl	1a728 <_set>
	gf_double (s->K1, s->iv);
   1b72c:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b730:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b732:	4621      	mov	r1, r4
   1b734:	4620      	mov	r0, r4
   1b736:	f7e9 fdd1 	bl	52dc <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   1b73a:	4621      	mov	r1, r4
   1b73c:	4628      	mov	r0, r5
   1b73e:	f7ff ffae 	bl	1b69e <gf_double>
	gf_double (s->K2, s->K1);
   1b742:	4629      	mov	r1, r5
   1b744:	f104 0020 	add.w	r0, r4, #32
   1b748:	f7ff ffa9 	bl	1b69e <gf_double>
	tc_cmac_init(s);
   1b74c:	4620      	mov	r0, r4
   1b74e:	f7ff ffc3 	bl	1b6d8 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   1b752:	2001      	movs	r0, #1
}
   1b754:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   1b756:	4608      	mov	r0, r1
   1b758:	e7fc      	b.n	1b754 <tc_cmac_setup+0x50>

0001b75a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   1b75a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b75e:	460d      	mov	r5, r1
   1b760:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   1b762:	4604      	mov	r4, r0
   1b764:	2800      	cmp	r0, #0
   1b766:	d062      	beq.n	1b82e <tc_cmac_update+0xd4>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   1b768:	b912      	cbnz	r2, 1b770 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   1b76a:	2001      	movs	r0, #1
}
   1b76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   1b770:	2900      	cmp	r1, #0
   1b772:	d05c      	beq.n	1b82e <tc_cmac_update+0xd4>
	if (s->countdown == 0) {
   1b774:	e9d0 0114 	ldrd	r0, r1, [r0, #80]	; 0x50
   1b778:	ea50 0301 	orrs.w	r3, r0, r1
   1b77c:	d057      	beq.n	1b82e <tc_cmac_update+0xd4>
	s->countdown--;
   1b77e:	f110 32ff 	adds.w	r2, r0, #4294967295	; 0xffffffff
	if (s->leftover_offset > 0) {
   1b782:	f8d4 8044 	ldr.w	r8, [r4, #68]	; 0x44
	s->countdown--;
   1b786:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
   1b78a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
	if (s->leftover_offset > 0) {
   1b78e:	f1b8 0f00 	cmp.w	r8, #0
   1b792:	d02a      	beq.n	1b7ea <tc_cmac_update+0x90>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   1b794:	f1c8 0710 	rsb	r7, r8, #16
		if (data_length < remaining_space) {
   1b798:	f108 0030 	add.w	r0, r8, #48	; 0x30
   1b79c:	42be      	cmp	r6, r7
   1b79e:	4420      	add	r0, r4
   1b7a0:	d208      	bcs.n	1b7b4 <tc_cmac_update+0x5a>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   1b7a2:	462a      	mov	r2, r5
   1b7a4:	4633      	mov	r3, r6
   1b7a6:	4631      	mov	r1, r6
   1b7a8:	f7fe ffb1 	bl	1a70e <_copy>
			s->leftover_offset += data_length;
   1b7ac:	6c62      	ldr	r2, [r4, #68]	; 0x44
   1b7ae:	4432      	add	r2, r6
   1b7b0:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   1b7b2:	e7da      	b.n	1b76a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   1b7b4:	463b      	mov	r3, r7
   1b7b6:	462a      	mov	r2, r5
   1b7b8:	4639      	mov	r1, r7
   1b7ba:	f7fe ffa8 	bl	1a70e <_copy>
		data_length -= remaining_space;
   1b7be:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   1b7c0:	2300      	movs	r3, #0
   1b7c2:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   1b7c4:	4446      	add	r6, r8
		data += remaining_space;
   1b7c6:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b7c8:	1e63      	subs	r3, r4, #1
   1b7ca:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   1b7ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b7d2:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b7d6:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   1b7d8:	ea82 0200 	eor.w	r2, r2, r0
   1b7dc:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b7de:	d1f6      	bne.n	1b7ce <tc_cmac_update+0x74>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b7e0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b7e2:	4621      	mov	r1, r4
   1b7e4:	4620      	mov	r0, r4
   1b7e6:	f7e9 fd79 	bl	52dc <tc_aes_encrypt>
   1b7ea:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   1b7ee:	2e10      	cmp	r6, #16
   1b7f0:	d80a      	bhi.n	1b808 <tc_cmac_update+0xae>
	if (data_length > 0) {
   1b7f2:	2e00      	cmp	r6, #0
   1b7f4:	d0b9      	beq.n	1b76a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   1b7f6:	4633      	mov	r3, r6
   1b7f8:	462a      	mov	r2, r5
   1b7fa:	4631      	mov	r1, r6
   1b7fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   1b800:	f7fe ff85 	bl	1a70e <_copy>
		s->leftover_offset = data_length;
   1b804:	6466      	str	r6, [r4, #68]	; 0x44
   1b806:	e7b0      	b.n	1b76a <tc_cmac_update+0x10>
   1b808:	1e63      	subs	r3, r4, #1
   1b80a:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   1b80c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b810:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b814:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   1b816:	ea82 0200 	eor.w	r2, r2, r0
   1b81a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b81c:	d1f6      	bne.n	1b80c <tc_cmac_update+0xb2>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   1b81e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b820:	4621      	mov	r1, r4
   1b822:	4620      	mov	r0, r4
   1b824:	f7e9 fd5a 	bl	52dc <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   1b828:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   1b82a:	3e10      	subs	r6, #16
   1b82c:	e7df      	b.n	1b7ee <tc_cmac_update+0x94>
		return TC_CRYPTO_FAIL;
   1b82e:	2000      	movs	r0, #0
   1b830:	e79c      	b.n	1b76c <tc_cmac_update+0x12>

0001b832 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   1b832:	b570      	push	{r4, r5, r6, lr}
   1b834:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   1b836:	4605      	mov	r5, r0
   1b838:	b1e8      	cbz	r0, 1b876 <tc_cmac_final+0x44>
   1b83a:	b369      	cbz	r1, 1b898 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   1b83c:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   1b83e:	2a10      	cmp	r2, #16
   1b840:	d11a      	bne.n	1b878 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   1b842:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b844:	1e63      	subs	r3, r4, #1
   1b846:	3901      	subs	r1, #1
   1b848:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b84c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b850:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   1b854:	4072      	eors	r2, r6
   1b856:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b85a:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   1b85c:	ea82 0206 	eor.w	r2, r2, r6
   1b860:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   1b862:	d1f3      	bne.n	1b84c <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   1b864:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   1b866:	4621      	mov	r1, r4
   1b868:	4628      	mov	r0, r5
   1b86a:	f7e9 fd37 	bl	52dc <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   1b86e:	4620      	mov	r0, r4
   1b870:	f7ff ff2a 	bl	1b6c8 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   1b874:	2001      	movs	r0, #1
}
   1b876:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   1b878:	f102 0030 	add.w	r0, r2, #48	; 0x30
   1b87c:	2100      	movs	r1, #0
   1b87e:	f1c2 0210 	rsb	r2, r2, #16
   1b882:	4420      	add	r0, r4
   1b884:	f7fe ff50 	bl	1a728 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   1b888:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1b88a:	4423      	add	r3, r4
   1b88c:	2280      	movs	r2, #128	; 0x80
   1b88e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   1b892:	f104 0120 	add.w	r1, r4, #32
   1b896:	e7d5      	b.n	1b844 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   1b898:	4608      	mov	r0, r1
   1b89a:	e7ec      	b.n	1b876 <tc_cmac_final+0x44>

0001b89c <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   1b89c:	2100      	movs	r1, #0
   1b89e:	2001      	movs	r0, #1
   1b8a0:	f000 b800 	b.w	1b8a4 <z_arm_fatal_error>

0001b8a4 <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
   1b8a4:	f003 b8b8 	b.w	1ea18 <z_fatal_error>

0001b8a8 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   1b8a8:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
   1b8aa:	6800      	ldr	r0, [r0, #0]
   1b8ac:	f003 b8b4 	b.w	1ea18 <z_fatal_error>

0001b8b0 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   1b8b0:	b508      	push	{r3, lr}
	handler();
   1b8b2:	f7e9 fe75 	bl	55a0 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   1b8b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   1b8ba:	f7e9 bfa1 	b.w	5800 <z_arm_exc_exit>

0001b8be <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   1b8be:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b8c2:	4684      	mov	ip, r0
   1b8c4:	4688      	mov	r8, r1
	register const char *s = nptr;
   1b8c6:	4601      	mov	r1, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   1b8c8:	460c      	mov	r4, r1
   1b8ca:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   1b8ce:	2b20      	cmp	r3, #32
   1b8d0:	d033      	beq.n	1b93a <strtol+0x7c>
   1b8d2:	f1a3 0009 	sub.w	r0, r3, #9
   1b8d6:	2804      	cmp	r0, #4
   1b8d8:	d92f      	bls.n	1b93a <strtol+0x7c>
	} while (isspace(c));
	if (c == '-') {
   1b8da:	2b2d      	cmp	r3, #45	; 0x2d
   1b8dc:	d12f      	bne.n	1b93e <strtol+0x80>
		neg = 1;
		c = *s++;
   1b8de:	784b      	ldrb	r3, [r1, #1]
   1b8e0:	1c8c      	adds	r4, r1, #2
		neg = 1;
   1b8e2:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   1b8e4:	2a00      	cmp	r2, #0
   1b8e6:	d05c      	beq.n	1b9a2 <strtol+0xe4>
   1b8e8:	2a10      	cmp	r2, #16
   1b8ea:	d109      	bne.n	1b900 <strtol+0x42>
   1b8ec:	2b30      	cmp	r3, #48	; 0x30
   1b8ee:	d107      	bne.n	1b900 <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   1b8f0:	7823      	ldrb	r3, [r4, #0]
   1b8f2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   1b8f6:	2b58      	cmp	r3, #88	; 0x58
   1b8f8:	d14e      	bne.n	1b998 <strtol+0xda>
		c = s[1];
   1b8fa:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   1b8fc:	2210      	movs	r2, #16
		s += 2;
   1b8fe:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   1b900:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   1b904:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   1b906:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   1b908:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   1b90c:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   1b90e:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   1b912:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   1b916:	2d09      	cmp	r5, #9
   1b918:	d817      	bhi.n	1b94a <strtol+0x8c>
			c -= '0';
   1b91a:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   1b91c:	429a      	cmp	r2, r3
   1b91e:	dd24      	ble.n	1b96a <strtol+0xac>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   1b920:	1c75      	adds	r5, r6, #1
   1b922:	d007      	beq.n	1b934 <strtol+0x76>
   1b924:	4570      	cmp	r0, lr
   1b926:	d81d      	bhi.n	1b964 <strtol+0xa6>
   1b928:	d101      	bne.n	1b92e <strtol+0x70>
   1b92a:	454b      	cmp	r3, r9
   1b92c:	dc1a      	bgt.n	1b964 <strtol+0xa6>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   1b92e:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   1b932:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   1b934:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   1b938:	e7eb      	b.n	1b912 <strtol+0x54>
{
   1b93a:	4621      	mov	r1, r4
   1b93c:	e7c4      	b.n	1b8c8 <strtol+0xa>
	} else if (c == '+') {
   1b93e:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   1b940:	bf04      	itt	eq
   1b942:	784b      	ldrbeq	r3, [r1, #1]
   1b944:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   1b946:	2100      	movs	r1, #0
   1b948:	e7cc      	b.n	1b8e4 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   1b94a:	f043 0520 	orr.w	r5, r3, #32
   1b94e:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   1b950:	2d19      	cmp	r5, #25
   1b952:	d80a      	bhi.n	1b96a <strtol+0xac>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   1b954:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   1b958:	2d1a      	cmp	r5, #26
   1b95a:	bf34      	ite	cc
   1b95c:	2537      	movcc	r5, #55	; 0x37
   1b95e:	2557      	movcs	r5, #87	; 0x57
   1b960:	1b5b      	subs	r3, r3, r5
   1b962:	e7db      	b.n	1b91c <strtol+0x5e>
			any = -1;
   1b964:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   1b968:	e7e4      	b.n	1b934 <strtol+0x76>
		}
	}

	if (any < 0) {
   1b96a:	1c73      	adds	r3, r6, #1
   1b96c:	d109      	bne.n	1b982 <strtol+0xc4>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   1b96e:	f7fc ff0f 	bl	18790 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   1b972:	2326      	movs	r3, #38	; 0x26
   1b974:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   1b976:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   1b978:	f1b8 0f00 	cmp.w	r8, #0
   1b97c:	d107      	bne.n	1b98e <strtol+0xd0>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   1b97e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   1b982:	b101      	cbz	r1, 1b986 <strtol+0xc8>
		acc = -acc;
   1b984:	4240      	negs	r0, r0
	if (endptr != NULL) {
   1b986:	f1b8 0f00 	cmp.w	r8, #0
   1b98a:	d0f8      	beq.n	1b97e <strtol+0xc0>
		*endptr = (char *)(any ? s - 1 : nptr);
   1b98c:	b10e      	cbz	r6, 1b992 <strtol+0xd4>
   1b98e:	f104 3cff 	add.w	ip, r4, #4294967295	; 0xffffffff
   1b992:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   1b996:	e7f2      	b.n	1b97e <strtol+0xc0>
	if (base == 0) {
   1b998:	2330      	movs	r3, #48	; 0x30
   1b99a:	2a00      	cmp	r2, #0
   1b99c:	d1b0      	bne.n	1b900 <strtol+0x42>
		base = c == '0' ? 8 : 10;
   1b99e:	2208      	movs	r2, #8
   1b9a0:	e7ae      	b.n	1b900 <strtol+0x42>
	if ((base == 0 || base == 16) &&
   1b9a2:	2b30      	cmp	r3, #48	; 0x30
   1b9a4:	d0a4      	beq.n	1b8f0 <strtol+0x32>
		base = c == '0' ? 8 : 10;
   1b9a6:	220a      	movs	r2, #10
   1b9a8:	e7aa      	b.n	1b900 <strtol+0x42>

0001b9aa <strchr>:
 * @return pointer to 1st instance of found byte, or NULL if not found
 */

char *strchr(const char *s, int c)
{
	char tmp = (char) c;
   1b9aa:	b2c9      	uxtb	r1, r1

	while ((*s != tmp) && (*s != '\0')) {
   1b9ac:	4603      	mov	r3, r0
   1b9ae:	781a      	ldrb	r2, [r3, #0]
   1b9b0:	428a      	cmp	r2, r1
   1b9b2:	4618      	mov	r0, r3
   1b9b4:	f103 0301 	add.w	r3, r3, #1
   1b9b8:	d004      	beq.n	1b9c4 <strchr+0x1a>
   1b9ba:	2a00      	cmp	r2, #0
   1b9bc:	d1f7      	bne.n	1b9ae <strchr+0x4>
		s++;
	}

	return (*s == tmp) ? (char *) s : NULL;
   1b9be:	2900      	cmp	r1, #0
   1b9c0:	bf18      	it	ne
   1b9c2:	2000      	movne	r0, #0
}
   1b9c4:	4770      	bx	lr

0001b9c6 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   1b9c6:	4603      	mov	r3, r0
	size_t n = 0;
   1b9c8:	2000      	movs	r0, #0

	while (*s != '\0') {
   1b9ca:	5c1a      	ldrb	r2, [r3, r0]
   1b9cc:	b902      	cbnz	r2, 1b9d0 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   1b9ce:	4770      	bx	lr
		n++;
   1b9d0:	3001      	adds	r0, #1
   1b9d2:	e7fa      	b.n	1b9ca <strlen+0x4>

0001b9d4 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   1b9d4:	1e43      	subs	r3, r0, #1
   1b9d6:	3901      	subs	r1, #1
   1b9d8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   1b9dc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   1b9e0:	4282      	cmp	r2, r0
   1b9e2:	d101      	bne.n	1b9e8 <strcmp+0x14>
   1b9e4:	2a00      	cmp	r2, #0
   1b9e6:	d1f7      	bne.n	1b9d8 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   1b9e8:	1a10      	subs	r0, r2, r0
   1b9ea:	4770      	bx	lr

0001b9ec <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   1b9ec:	b530      	push	{r4, r5, lr}
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   1b9ee:	2400      	movs	r4, #0
   1b9f0:	42a2      	cmp	r2, r4
   1b9f2:	d008      	beq.n	1ba06 <strncmp+0x1a>
   1b9f4:	5d03      	ldrb	r3, [r0, r4]
   1b9f6:	5d0d      	ldrb	r5, [r1, r4]
   1b9f8:	42ab      	cmp	r3, r5
   1b9fa:	d102      	bne.n	1ba02 <strncmp+0x16>
   1b9fc:	3401      	adds	r4, #1
   1b9fe:	2b00      	cmp	r3, #0
   1ba00:	d1f6      	bne.n	1b9f0 <strncmp+0x4>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   1ba02:	1b58      	subs	r0, r3, r5
   1ba04:	e000      	b.n	1ba08 <strncmp+0x1c>
   1ba06:	2000      	movs	r0, #0
}
   1ba08:	bd30      	pop	{r4, r5, pc}

0001ba0a <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   1ba0a:	b510      	push	{r4, lr}
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   1ba0c:	b15a      	cbz	r2, 1ba26 <memcmp+0x1c>
   1ba0e:	3901      	subs	r1, #1
   1ba10:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   1ba12:	f810 2b01 	ldrb.w	r2, [r0], #1
   1ba16:	f811 3f01 	ldrb.w	r3, [r1, #1]!
   1ba1a:	42a0      	cmp	r0, r4
   1ba1c:	d001      	beq.n	1ba22 <memcmp+0x18>
   1ba1e:	429a      	cmp	r2, r3
   1ba20:	d0f7      	beq.n	1ba12 <memcmp+0x8>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   1ba22:	1ad0      	subs	r0, r2, r3
}
   1ba24:	bd10      	pop	{r4, pc}
		return 0;
   1ba26:	4610      	mov	r0, r2
   1ba28:	e7fc      	b.n	1ba24 <memcmp+0x1a>

0001ba2a <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   1ba2a:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   1ba2c:	ea81 0400 	eor.w	r4, r1, r0
   1ba30:	07a5      	lsls	r5, r4, #30
   1ba32:	4603      	mov	r3, r0
   1ba34:	d00b      	beq.n	1ba4e <memcpy+0x24>
   1ba36:	3b01      	subs	r3, #1
   1ba38:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   1ba3a:	4291      	cmp	r1, r2
   1ba3c:	d11b      	bne.n	1ba76 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   1ba3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   1ba40:	2a00      	cmp	r2, #0
   1ba42:	d0fc      	beq.n	1ba3e <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   1ba44:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ba48:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   1ba4c:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   1ba4e:	079c      	lsls	r4, r3, #30
   1ba50:	d1f6      	bne.n	1ba40 <memcpy+0x16>
   1ba52:	f022 0403 	bic.w	r4, r2, #3
   1ba56:	1f1d      	subs	r5, r3, #4
   1ba58:	0896      	lsrs	r6, r2, #2
   1ba5a:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   1ba5c:	42b9      	cmp	r1, r7
   1ba5e:	d105      	bne.n	1ba6c <memcpy+0x42>
   1ba60:	f06f 0503 	mvn.w	r5, #3
   1ba64:	fb05 2206 	mla	r2, r5, r6, r2
   1ba68:	4423      	add	r3, r4
   1ba6a:	e7e4      	b.n	1ba36 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   1ba6c:	f851 cb04 	ldr.w	ip, [r1], #4
   1ba70:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   1ba74:	e7f2      	b.n	1ba5c <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   1ba76:	f811 4b01 	ldrb.w	r4, [r1], #1
   1ba7a:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   1ba7e:	e7dc      	b.n	1ba3a <memcpy+0x10>

0001ba80 <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   1ba80:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   1ba82:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   1ba84:	4603      	mov	r3, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   1ba86:	079c      	lsls	r4, r3, #30
   1ba88:	d111      	bne.n	1baae <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   1ba8a:	ea41 2401 	orr.w	r4, r1, r1, lsl #8
	c_word |= c_word << 16;
   1ba8e:	f022 0603 	bic.w	r6, r2, #3
   1ba92:	ea44 4504 	orr.w	r5, r4, r4, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   1ba96:	441e      	add	r6, r3
   1ba98:	0894      	lsrs	r4, r2, #2
   1ba9a:	42b3      	cmp	r3, r6
   1ba9c:	d10d      	bne.n	1baba <memset+0x3a>
   1ba9e:	f06f 0503 	mvn.w	r5, #3
   1baa2:	fb05 2204 	mla	r2, r5, r4, r2
   1baa6:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   1baa8:	4293      	cmp	r3, r2
   1baaa:	d109      	bne.n	1bac0 <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   1baac:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   1baae:	2a00      	cmp	r2, #0
   1bab0:	d0fc      	beq.n	1baac <memset+0x2c>
		*(d_byte++) = c_byte;
   1bab2:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bab6:	3a01      	subs	r2, #1
   1bab8:	e7e5      	b.n	1ba86 <memset+0x6>
		*(d_word++) = c_word;
   1baba:	f843 5b04 	str.w	r5, [r3], #4
		n -= sizeof(mem_word_t);
   1babe:	e7ec      	b.n	1ba9a <memset+0x1a>
		*(d_byte++) = c_byte;
   1bac0:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   1bac4:	e7f0      	b.n	1baa8 <memset+0x28>

0001bac6 <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   1bac6:	684b      	ldr	r3, [r1, #4]
   1bac8:	2b01      	cmp	r3, #1
   1baca:	dd07      	ble.n	1badc <sprintf_out+0x16>
		*(p->ptr) = c;
   1bacc:	680b      	ldr	r3, [r1, #0]
   1bace:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   1bad0:	680b      	ldr	r3, [r1, #0]
   1bad2:	3301      	adds	r3, #1
   1bad4:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   1bad6:	684b      	ldr	r3, [r1, #4]
   1bad8:	3b01      	subs	r3, #1
   1bada:	604b      	str	r3, [r1, #4]
}
   1badc:	2000      	movs	r0, #0
   1bade:	4770      	bx	lr

0001bae0 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   1bae0:	f7fc ba28 	b.w	17f34 <SystemInit>

0001bae4 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   1bae4:	b530      	push	{r4, r5, lr}
   1bae6:	b085      	sub	sp, #20
   1bae8:	4604      	mov	r4, r0
   1baea:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   1baec:	4668      	mov	r0, sp
   1baee:	2203      	movs	r2, #3
   1baf0:	f7ff ff9b 	bl	1ba2a <memcpy>
	(void)memset(res + 3, 0, 13);
   1baf4:	220d      	movs	r2, #13
   1baf6:	2100      	movs	r1, #0
   1baf8:	f10d 0003 	add.w	r0, sp, #3
   1bafc:	f7ff ffc0 	bl	1ba80 <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   1bb00:	4620      	mov	r0, r4
   1bb02:	466a      	mov	r2, sp
   1bb04:	4669      	mov	r1, sp
   1bb06:	f7f2 f9d1 	bl	deac <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   1bb0a:	4604      	mov	r4, r0
   1bb0c:	b920      	cbnz	r0, 1bb18 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   1bb0e:	2203      	movs	r2, #3
   1bb10:	4669      	mov	r1, sp
   1bb12:	4628      	mov	r0, r5
   1bb14:	f7ff ff89 	bl	1ba2a <memcpy>

	return 0;
}
   1bb18:	4620      	mov	r0, r4
   1bb1a:	b005      	add	sp, #20
   1bb1c:	bd30      	pop	{r4, r5, pc}

0001bb1e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   1bb1e:	b513      	push	{r0, r1, r4, lr}
   1bb20:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   1bb22:	aa01      	add	r2, sp, #4
   1bb24:	3103      	adds	r1, #3
   1bb26:	f7ff ffdd 	bl	1bae4 <ah>
	if (err) {
   1bb2a:	b948      	cbnz	r0, 1bb40 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   1bb2c:	2203      	movs	r2, #3
   1bb2e:	a901      	add	r1, sp, #4
   1bb30:	4620      	mov	r0, r4
   1bb32:	f7ff ff6a 	bl	1ba0a <memcmp>
   1bb36:	fab0 f080 	clz	r0, r0
   1bb3a:	0940      	lsrs	r0, r0, #5
}
   1bb3c:	b002      	add	sp, #8
   1bb3e:	bd10      	pop	{r4, pc}
		return false;
   1bb40:	2000      	movs	r0, #0
   1bb42:	e7fb      	b.n	1bb3c <bt_rpa_irk_matches+0x1e>

0001bb44 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   1bb44:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   1bb46:	1cce      	adds	r6, r1, #3
{
   1bb48:	4605      	mov	r5, r0
   1bb4a:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   1bb4c:	4630      	mov	r0, r6
   1bb4e:	2103      	movs	r1, #3
   1bb50:	f7f2 f9aa 	bl	dea8 <bt_rand>
	if (err) {
   1bb54:	b960      	cbnz	r0, 1bb70 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   1bb56:	7963      	ldrb	r3, [r4, #5]
   1bb58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1bb5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1bb60:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   1bb62:	4622      	mov	r2, r4
   1bb64:	4631      	mov	r1, r6
   1bb66:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   1bb68:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   1bb6c:	f7ff bfba 	b.w	1bae4 <ah>
}
   1bb70:	bd70      	pop	{r4, r5, r6, pc}

0001bb72 <send_cmd_status>:
{
   1bb72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1bb76:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1bb7a:	4606      	mov	r6, r0
   1bb7c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1bb7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1bb82:	2100      	movs	r1, #0
   1bb84:	200f      	movs	r0, #15
   1bb86:	f7eb fea9 	bl	78dc <bt_buf_get_evt>
	*(uint8_t *)net_buf_user_data(buf) = type;
   1bb8a:	2701      	movs	r7, #1
	hdr = net_buf_add(buf, sizeof(*hdr));
   1bb8c:	f100 0808 	add.w	r8, r0, #8
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   1bb90:	4604      	mov	r4, r0
   1bb92:	7507      	strb	r7, [r0, #20]
	hdr = net_buf_add(buf, sizeof(*hdr));
   1bb94:	2102      	movs	r1, #2
   1bb96:	4640      	mov	r0, r8
   1bb98:	f002 fcfc 	bl	1e594 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1bb9c:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   1bb9e:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   1bba0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   1bba2:	7041      	strb	r1, [r0, #1]
	evt = net_buf_add(buf, sizeof(*evt));
   1bba4:	4640      	mov	r0, r8
   1bba6:	f002 fcf5 	bl	1e594 <net_buf_simple_add>
	evt->ncmd = 1U;
   1bbaa:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   1bbac:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   1bbae:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   1bbb0:	4620      	mov	r0, r4
}
   1bbb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   1bbb6:	f7eb b9f7 	b.w	6fa8 <bt_recv_prio>

0001bbba <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   1bbba:	f101 0320 	add.w	r3, r1, #32
   1bbbe:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   1bbc0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   1bbc4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   1bbc8:	428b      	cmp	r3, r1
   1bbca:	d1f9      	bne.n	1bbc0 <sys_memcpy_swap.constprop.0+0x6>
	}
}
   1bbcc:	4770      	bx	lr

0001bbce <default_CSPRNG>:
{
   1bbce:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   1bbd0:	f7f2 f96a 	bl	dea8 <bt_rand>
}
   1bbd4:	fab0 f080 	clz	r0, r0
   1bbd8:	0940      	lsrs	r0, r0, #5
   1bbda:	bd08      	pop	{r3, pc}

0001bbdc <bt_settings_decode_key>:
{
   1bbdc:	b570      	push	{r4, r5, r6, lr}
   1bbde:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   1bbe0:	2100      	movs	r1, #0
{
   1bbe2:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   1bbe4:	f7fe fce1 	bl	1a5aa <settings_name_next>
   1bbe8:	280d      	cmp	r0, #13
   1bbea:	d118      	bne.n	1bc1e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   1bbec:	7b23      	ldrb	r3, [r4, #12]
   1bbee:	2b30      	cmp	r3, #48	; 0x30
   1bbf0:	d111      	bne.n	1bc16 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   1bbf2:	2300      	movs	r3, #0
   1bbf4:	702b      	strb	r3, [r5, #0]
   1bbf6:	f104 060c 	add.w	r6, r4, #12
   1bbfa:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   1bbfc:	462a      	mov	r2, r5
   1bbfe:	4620      	mov	r0, r4
   1bc00:	2301      	movs	r3, #1
   1bc02:	2102      	movs	r1, #2
   1bc04:	3402      	adds	r4, #2
   1bc06:	f7fe f87a 	bl	19cfe <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   1bc0a:	42b4      	cmp	r4, r6
   1bc0c:	f105 35ff 	add.w	r5, r5, #4294967295	; 0xffffffff
   1bc10:	d1f4      	bne.n	1bbfc <bt_settings_decode_key+0x20>
	return 0;
   1bc12:	2000      	movs	r0, #0
}
   1bc14:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   1bc16:	2b31      	cmp	r3, #49	; 0x31
   1bc18:	d101      	bne.n	1bc1e <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   1bc1a:	2301      	movs	r3, #1
   1bc1c:	e7ea      	b.n	1bbf4 <bt_settings_decode_key+0x18>
		return -EINVAL;
   1bc1e:	f06f 0015 	mvn.w	r0, #21
   1bc22:	e7f7      	b.n	1bc14 <bt_settings_decode_key+0x38>

0001bc24 <bt_settings_init>:
{
	int err;

	BT_DBG("");

	err = settings_subsys_init();
   1bc24:	f7e8 bf70 	b.w	4b08 <settings_subsys_init>

0001bc28 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   1bc28:	b510      	push	{r4, lr}
   1bc2a:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   1bc2c:	7801      	ldrb	r1, [r0, #0]
   1bc2e:	7822      	ldrb	r2, [r4, #0]
   1bc30:	428a      	cmp	r2, r1
{
   1bc32:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   1bc34:	d00e      	beq.n	1bc54 <bt_uuid_cmp+0x2c>
	uuid_to_uuid128(u1, &uuid1);
   1bc36:	4669      	mov	r1, sp
   1bc38:	f7ea f96e 	bl	5f18 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   1bc3c:	a905      	add	r1, sp, #20
   1bc3e:	4620      	mov	r0, r4
   1bc40:	f7ea f96a 	bl	5f18 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   1bc44:	2210      	movs	r2, #16
   1bc46:	f10d 0115 	add.w	r1, sp, #21
   1bc4a:	f10d 0001 	add.w	r0, sp, #1
	case BT_UUID_TYPE_16:
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
	case BT_UUID_TYPE_32:
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1bc4e:	f7ff fedc 	bl	1ba0a <memcmp>
   1bc52:	e007      	b.n	1bc64 <bt_uuid_cmp+0x3c>
	switch (u1->type) {
   1bc54:	2a01      	cmp	r2, #1
   1bc56:	d007      	beq.n	1bc68 <bt_uuid_cmp+0x40>
   1bc58:	2a02      	cmp	r2, #2
   1bc5a:	d008      	beq.n	1bc6e <bt_uuid_cmp+0x46>
   1bc5c:	b95a      	cbnz	r2, 1bc76 <bt_uuid_cmp+0x4e>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   1bc5e:	8840      	ldrh	r0, [r0, #2]
   1bc60:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1bc62:	1ac0      	subs	r0, r0, r3
	}

	return -EINVAL;
}
   1bc64:	b00a      	add	sp, #40	; 0x28
   1bc66:	bd10      	pop	{r4, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   1bc68:	6840      	ldr	r0, [r0, #4]
   1bc6a:	6863      	ldr	r3, [r4, #4]
   1bc6c:	e7f9      	b.n	1bc62 <bt_uuid_cmp+0x3a>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   1bc6e:	2210      	movs	r2, #16
   1bc70:	1c61      	adds	r1, r4, #1
   1bc72:	3001      	adds	r0, #1
   1bc74:	e7eb      	b.n	1bc4e <bt_uuid_cmp+0x26>
	switch (u1->type) {
   1bc76:	f06f 0015 	mvn.w	r0, #21
   1bc7a:	e7f3      	b.n	1bc64 <bt_uuid_cmp+0x3c>

0001bc7c <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   1bc7c:	2a04      	cmp	r2, #4
{
   1bc7e:	b538      	push	{r3, r4, r5, lr}
   1bc80:	460c      	mov	r4, r1
	switch (data_len) {
   1bc82:	d00d      	beq.n	1bca0 <bt_uuid_create+0x24>
   1bc84:	2a10      	cmp	r2, #16
   1bc86:	d019      	beq.n	1bcbc <bt_uuid_create+0x40>
   1bc88:	2a02      	cmp	r2, #2
   1bc8a:	f04f 0300 	mov.w	r3, #0
   1bc8e:	d11b      	bne.n	1bcc8 <bt_uuid_create+0x4c>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   1bc90:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   1bc92:	784a      	ldrb	r2, [r1, #1]
   1bc94:	780b      	ldrb	r3, [r1, #0]
   1bc96:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   1bc9a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   1bc9c:	2001      	movs	r0, #1
}
   1bc9e:	bd38      	pop	{r3, r4, r5, pc}
		uuid->type = BT_UUID_TYPE_32;
   1bca0:	2301      	movs	r3, #1
   1bca2:	7003      	strb	r3, [r0, #0]
   1bca4:	78a2      	ldrb	r2, [r4, #2]
   1bca6:	78c9      	ldrb	r1, [r1, #3]
   1bca8:	7865      	ldrb	r5, [r4, #1]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1bcaa:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
	return ((uint16_t)src[1] << 8) | src[0];
   1bcae:	7822      	ldrb	r2, [r4, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   1bcb0:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
   1bcb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   1bcb8:	6042      	str	r2, [r0, #4]
		break;
   1bcba:	e7ef      	b.n	1bc9c <bt_uuid_create+0x20>
		uuid->type = BT_UUID_TYPE_128;
   1bcbc:	2302      	movs	r3, #2
   1bcbe:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   1bcc2:	f7ff feb2 	bl	1ba2a <memcpy>
		break;
   1bcc6:	e7e9      	b.n	1bc9c <bt_uuid_create+0x20>
	switch (data_len) {
   1bcc8:	4618      	mov	r0, r3
   1bcca:	e7e8      	b.n	1bc9e <bt_uuid_create+0x22>

0001bccc <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   1bccc:	280f      	cmp	r0, #15
   1bcce:	d806      	bhi.n	1bcde <bt_hci_evt_get_flags+0x12>
   1bcd0:	280d      	cmp	r0, #13
   1bcd2:	d80b      	bhi.n	1bcec <bt_hci_evt_get_flags+0x20>
   1bcd4:	2805      	cmp	r0, #5
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   1bcd6:	bf14      	ite	ne
   1bcd8:	2002      	movne	r0, #2
   1bcda:	2003      	moveq	r0, #3
   1bcdc:	4770      	bx	lr
	switch (evt) {
   1bcde:	2813      	cmp	r0, #19
   1bce0:	d004      	beq.n	1bcec <bt_hci_evt_get_flags+0x20>
   1bce2:	281a      	cmp	r0, #26
   1bce4:	bf14      	ite	ne
   1bce6:	2002      	movne	r0, #2
   1bce8:	2001      	moveq	r0, #1
   1bcea:	4770      	bx	lr
   1bcec:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   1bcee:	4770      	bx	lr

0001bcf0 <handle_event>:
{
   1bcf0:	b410      	push	{r4}
   1bcf2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   1bcf6:	4604      	mov	r4, r0
   1bcf8:	4608      	mov	r0, r1
		if (handler->event != event) {
   1bcfa:	7811      	ldrb	r1, [r2, #0]
   1bcfc:	42a1      	cmp	r1, r4
   1bcfe:	d004      	beq.n	1bd0a <handle_event+0x1a>
	for (i = 0; i < num_handlers; i++) {
   1bd00:	3208      	adds	r2, #8
   1bd02:	429a      	cmp	r2, r3
   1bd04:	d1f9      	bne.n	1bcfa <handle_event+0xa>
}
   1bd06:	bc10      	pop	{r4}
   1bd08:	4770      	bx	lr
		if (buf->len < handler->min_len) {
   1bd0a:	8981      	ldrh	r1, [r0, #12]
   1bd0c:	7853      	ldrb	r3, [r2, #1]
   1bd0e:	4299      	cmp	r1, r3
   1bd10:	d3f9      	bcc.n	1bd06 <handle_event+0x16>
		handler->handler(buf);
   1bd12:	6853      	ldr	r3, [r2, #4]
}
   1bd14:	bc10      	pop	{r4}
		handler->handler(buf);
   1bd16:	4718      	bx	r3

0001bd18 <hci_data_buf_overflow>:
}
   1bd18:	4770      	bx	lr

0001bd1a <atomic_and>:
{
   1bd1a:	4603      	mov	r3, r0
}
   1bd1c:	f3bf 8f5b 	dmb	ish
   1bd20:	e853 0f00 	ldrex	r0, [r3]
   1bd24:	ea00 0201 	and.w	r2, r0, r1
   1bd28:	e843 2c00 	strex	ip, r2, [r3]
   1bd2c:	f1bc 0f00 	cmp.w	ip, #0
   1bd30:	d1f6      	bne.n	1bd20 <atomic_and+0x6>
   1bd32:	f3bf 8f5b 	dmb	ish
   1bd36:	4770      	bx	lr

0001bd38 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1bd38:	f3bf 8f5b 	dmb	ish
   1bd3c:	6800      	ldr	r0, [r0, #0]
   1bd3e:	f3bf 8f5b 	dmb	ish
}
   1bd42:	4770      	bx	lr

0001bd44 <atomic_test_bit>:
{
   1bd44:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   1bd46:	f7ff fff7 	bl	1bd38 <atomic_get>
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1bd4a:	4108      	asrs	r0, r1
}
   1bd4c:	f000 0001 	and.w	r0, r0, #1
   1bd50:	bd08      	pop	{r3, pc}

0001bd52 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   1bd52:	2207      	movs	r2, #7
   1bd54:	f7ff be59 	b.w	1ba0a <memcmp>

0001bd58 <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bd58:	2206      	movs	r2, #6
   1bd5a:	f7ff be66 	b.w	1ba2a <memcpy>

0001bd5e <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   1bd5e:	2207      	movs	r2, #7
   1bd60:	f7ff be63 	b.w	1ba2a <memcpy>

0001bd64 <set_data_add>:
{
   1bd64:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bd68:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
   1bd6c:	4607      	mov	r7, r0
   1bd6e:	4689      	mov	r9, r1
   1bd70:	4614      	mov	r4, r2
	uint8_t set_data_len = 0;
   1bd72:	2500      	movs	r5, #0
				ssize_t shortened_len = set_data_len_max -
   1bd74:	1e8b      	subs	r3, r1, #2
		for (size_t j = 0; j < ad[i].len; j++) {
   1bd76:	f8d4 8000 	ldr.w	r8, [r4]
   1bd7a:	f04f 0b00 	mov.w	fp, #0
   1bd7e:	6862      	ldr	r2, [r4, #4]
   1bd80:	455a      	cmp	r2, fp
   1bd82:	d808      	bhi.n	1bd96 <set_data_add+0x32>
	for (size_t i = 0; i < ad_len; i++) {
   1bd84:	3408      	adds	r4, #8
   1bd86:	45a2      	cmp	sl, r4
   1bd88:	d1f5      	bne.n	1bd76 <set_data_add+0x12>
	*data_len = set_data_len;
   1bd8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	return 0;
   1bd8c:	2000      	movs	r0, #0
	*data_len = set_data_len;
   1bd8e:	701d      	strb	r5, [r3, #0]
}
   1bd90:	b003      	add	sp, #12
   1bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			size_t len = data[j].data_len;
   1bd96:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
   1bd9a:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
   1bd9e:	1ca8      	adds	r0, r5, #2
   1bda0:	1881      	adds	r1, r0, r2
   1bda2:	4549      	cmp	r1, r9
   1bda4:	d908      	bls.n	1bdb8 <set_data_add+0x54>
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1bda6:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
   1bdaa:	eba3 0205 	sub.w	r2, r3, r5
				if (!(type == BT_DATA_NAME_COMPLETE &&
   1bdae:	d11a      	bne.n	1bde6 <set_data_add+0x82>
   1bdb0:	2a00      	cmp	r2, #0
   1bdb2:	dd18      	ble.n	1bde6 <set_data_add+0x82>
				type = BT_DATA_NAME_SHORTENED;
   1bdb4:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
   1bdb8:	b2d6      	uxtb	r6, r2
   1bdba:	1c71      	adds	r1, r6, #1
   1bdbc:	5579      	strb	r1, [r7, r5]
   1bdbe:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
   1bdc0:	b2c9      	uxtb	r1, r1
			set_data_len += len;
   1bdc2:	3602      	adds	r6, #2
			set_data[set_data_len++] = type;
   1bdc4:	f807 c001 	strb.w	ip, [r7, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
   1bdc8:	fa57 f080 	uxtab	r0, r7, r0
   1bdcc:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1bdd0:	9301      	str	r3, [sp, #4]
			set_data_len += len;
   1bdd2:	4435      	add	r5, r6
			memcpy(&set_data[set_data_len], data[j].data, len);
   1bdd4:	f7ff fe29 	bl	1ba2a <memcpy>
			set_data_len += len;
   1bdd8:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
   1bdda:	9b01      	ldr	r3, [sp, #4]
   1bddc:	f10b 0b01 	add.w	fp, fp, #1
   1bde0:	f108 0808 	add.w	r8, r8, #8
   1bde4:	e7cb      	b.n	1bd7e <set_data_add+0x1a>
					return -EINVAL;
   1bde6:	f06f 0015 	mvn.w	r0, #21
   1bdea:	e7d1      	b.n	1bd90 <set_data_add+0x2c>

0001bdec <atomic_or>:
{
   1bdec:	4603      	mov	r3, r0
}
   1bdee:	f3bf 8f5b 	dmb	ish
   1bdf2:	e853 0f00 	ldrex	r0, [r3]
   1bdf6:	ea40 0201 	orr.w	r2, r0, r1
   1bdfa:	e843 2c00 	strex	ip, r2, [r3]
   1bdfe:	f1bc 0f00 	cmp.w	ip, #0
   1be02:	d1f6      	bne.n	1bdf2 <atomic_or+0x6>
   1be04:	f3bf 8f5b 	dmb	ish
   1be08:	4770      	bx	lr

0001be0a <atomic_test_and_set_bit>:
{
   1be0a:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be0c:	2301      	movs	r3, #1
   1be0e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   1be12:	f7ff ffeb 	bl	1bdec <atomic_or>
	return (old & mask) != 0;
   1be16:	4201      	tst	r1, r0
}
   1be18:	bf14      	ite	ne
   1be1a:	2001      	movne	r0, #1
   1be1c:	2000      	moveq	r0, #0
   1be1e:	bd08      	pop	{r3, pc}

0001be20 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   1be20:	460b      	mov	r3, r1
   1be22:	b410      	push	{r4}
   1be24:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   1be26:	f001 041f 	and.w	r4, r1, #31
   1be2a:	2101      	movs	r1, #1
   1be2c:	40a1      	lsls	r1, r4

	if (val) {
   1be2e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   1be32:	b112      	cbz	r2, 1be3a <atomic_set_bit_to+0x1a>
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   1be34:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1be36:	f7ff bfd9 	b.w	1bdec <atomic_or>
}
   1be3a:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1be3c:	43c9      	mvns	r1, r1
   1be3e:	f7ff bf6c 	b.w	1bd1a <atomic_and>

0001be42 <hci_hardware_error>:
	evt = net_buf_pull_mem(buf, sizeof(*evt));
   1be42:	2101      	movs	r1, #1
   1be44:	3008      	adds	r0, #8
   1be46:	f002 bbcc 	b.w	1e5e2 <net_buf_simple_pull_mem>

0001be4a <le_data_len_change>:
{
   1be4a:	b508      	push	{r3, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1be4c:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1be4e:	8818      	ldrh	r0, [r3, #0]
   1be50:	f7eb fff2 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1be54:	b118      	cbz	r0, 1be5e <le_data_len_change+0x14>
}
   1be56:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_conn_unref(conn);
   1be5a:	f000 bc18 	b.w	1c68e <bt_conn_unref>
}
   1be5e:	bd08      	pop	{r3, pc}

0001be60 <hci_disconn_complete_prio>:
{
   1be60:	b510      	push	{r4, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1be62:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
   1be64:	781a      	ldrb	r2, [r3, #0]
   1be66:	b96a      	cbnz	r2, 1be84 <hci_disconn_complete_prio+0x24>
	conn = bt_conn_lookup_handle(handle);
   1be68:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1be6c:	f7eb ffe4 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1be70:	4604      	mov	r4, r0
   1be72:	b138      	cbz	r0, 1be84 <hci_disconn_complete_prio+0x24>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
   1be74:	2101      	movs	r1, #1
   1be76:	f7ec f829 	bl	7ecc <bt_conn_set_state>
	bt_conn_unref(conn);
   1be7a:	4620      	mov	r0, r4
}
   1be7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
   1be80:	f000 bc05 	b.w	1c68e <bt_conn_unref>
}
   1be84:	bd10      	pop	{r4, pc}

0001be86 <hci_disconn_complete>:
{
   1be86:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
   1be88:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
   1be8a:	7835      	ldrb	r5, [r6, #0]
   1be8c:	b985      	cbnz	r5, 1beb0 <hci_disconn_complete+0x2a>
	conn = bt_conn_lookup_handle(handle);
   1be8e:	f8b6 0001 	ldrh.w	r0, [r6, #1]
   1be92:	f7eb ffd1 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1be96:	4604      	mov	r4, r0
   1be98:	b150      	cbz	r0, 1beb0 <hci_disconn_complete+0x2a>
	conn->err = evt->reason;
   1be9a:	78f3      	ldrb	r3, [r6, #3]
   1be9c:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1be9e:	4629      	mov	r1, r5
   1bea0:	f7ec f814 	bl	7ecc <bt_conn_set_state>
	conn->handle = 0U;
   1bea4:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
   1bea6:	4620      	mov	r0, r4
}
   1bea8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
   1beac:	f000 bbef 	b.w	1c68e <bt_conn_unref>
}
   1beb0:	bd70      	pop	{r4, r5, r6, pc}

0001beb2 <le_conn_update_complete>:
{
   1beb2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
   1beb4:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1beb6:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1beba:	f7eb ffbd 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1bebe:	4604      	mov	r4, r0
   1bec0:	b1c0      	cbz	r0, 1bef4 <le_conn_update_complete+0x42>
	if (!evt->status) {
   1bec2:	782b      	ldrb	r3, [r5, #0]
   1bec4:	b9c3      	cbnz	r3, 1bef8 <le_conn_update_complete+0x46>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
   1bec6:	792a      	ldrb	r2, [r5, #4]
   1bec8:	78eb      	ldrb	r3, [r5, #3]
   1beca:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bece:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
   1bed2:	79aa      	ldrb	r2, [r5, #6]
   1bed4:	796b      	ldrb	r3, [r5, #5]
   1bed6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1beda:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
   1bede:	79eb      	ldrb	r3, [r5, #7]
   1bee0:	7a2a      	ldrb	r2, [r5, #8]
   1bee2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bee6:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
   1beea:	f7eb fe4b 	bl	7b84 <notify_le_param_updated>
	bt_conn_unref(conn);
   1beee:	4620      	mov	r0, r4
   1bef0:	f000 fbcd 	bl	1c68e <bt_conn_unref>
}
   1bef4:	b003      	add	sp, #12
   1bef6:	bd30      	pop	{r4, r5, pc}
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
   1bef8:	2b1a      	cmp	r3, #26
   1befa:	d1f8      	bne.n	1beee <le_conn_update_complete+0x3c>
   1befc:	78c3      	ldrb	r3, [r0, #3]
   1befe:	2b01      	cmp	r3, #1
   1bf00:	d1f5      	bne.n	1beee <le_conn_update_complete+0x3c>
		   !atomic_test_and_set_bit(conn->flags,
   1bf02:	210a      	movs	r1, #10
   1bf04:	3004      	adds	r0, #4
   1bf06:	f7ff ff80 	bl	1be0a <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
   1bf0a:	2800      	cmp	r0, #0
   1bf0c:	d1ef      	bne.n	1beee <le_conn_update_complete+0x3c>
		param.interval_min = conn->le.interval_min;
   1bf0e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   1bf12:	9300      	str	r3, [sp, #0]
		bt_l2cap_update_conn_param(conn, &param);
   1bf14:	4669      	mov	r1, sp
		param.latency = conn->le.pending_latency;
   1bf16:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   1bf1a:	9301      	str	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
   1bf1c:	4620      	mov	r0, r4
   1bf1e:	f7ec fa3f 	bl	83a0 <bt_l2cap_update_conn_param>
   1bf22:	e7e4      	b.n	1beee <le_conn_update_complete+0x3c>

0001bf24 <update_sec_level>:
	if (!conn->encrypt) {
   1bf24:	7ac3      	ldrb	r3, [r0, #11]
   1bf26:	b913      	cbnz	r3, 1bf2e <update_sec_level+0xa>
		conn->sec_level = BT_SECURITY_L1;
   1bf28:	2301      	movs	r3, #1
   1bf2a:	7243      	strb	r3, [r0, #9]
		return;
   1bf2c:	4770      	bx	lr
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   1bf2e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   1bf32:	b193      	cbz	r3, 1bf5a <update_sec_level+0x36>
   1bf34:	7b5a      	ldrb	r2, [r3, #13]
   1bf36:	07d1      	lsls	r1, r2, #31
   1bf38:	d50f      	bpl.n	1bf5a <update_sec_level+0x36>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   1bf3a:	06d2      	lsls	r2, r2, #27
   1bf3c:	d50b      	bpl.n	1bf56 <update_sec_level+0x32>
   1bf3e:	7b1b      	ldrb	r3, [r3, #12]
   1bf40:	2b10      	cmp	r3, #16
   1bf42:	d108      	bne.n	1bf56 <update_sec_level+0x32>
			conn->sec_level = BT_SECURITY_L4;
   1bf44:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   1bf46:	7243      	strb	r3, [r0, #9]
	if (conn->required_sec_level > conn->sec_level) {
   1bf48:	7a82      	ldrb	r2, [r0, #10]
   1bf4a:	7a43      	ldrb	r3, [r0, #9]
   1bf4c:	429a      	cmp	r2, r3
   1bf4e:	d906      	bls.n	1bf5e <update_sec_level+0x3a>
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTH_FAIL);
   1bf50:	2105      	movs	r1, #5
   1bf52:	f000 bbb9 	b.w	1c6c8 <bt_conn_disconnect>
			conn->sec_level = BT_SECURITY_L3;
   1bf56:	2303      	movs	r3, #3
   1bf58:	e7f5      	b.n	1bf46 <update_sec_level+0x22>
		conn->sec_level = BT_SECURITY_L2;
   1bf5a:	2302      	movs	r3, #2
   1bf5c:	e7f3      	b.n	1bf46 <update_sec_level+0x22>
}
   1bf5e:	4770      	bx	lr

0001bf60 <hci_vendor_event>:
   1bf60:	4770      	bx	lr

0001bf62 <sys_put_le64>:
	dst[1] = val >> 8;
   1bf62:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   1bf66:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   1bf68:	0e00      	lsrs	r0, r0, #24
   1bf6a:	7053      	strb	r3, [r2, #1]
   1bf6c:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   1bf6e:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1bf70:	f3c1 2007 	ubfx	r0, r1, #8, #8
   1bf74:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   1bf76:	7093      	strb	r3, [r2, #2]
   1bf78:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   1bf7a:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   1bf7c:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   1bf7e:	71d1      	strb	r1, [r2, #7]
}
   1bf80:	4770      	bx	lr

0001bf82 <le_ltk_request>:
{
   1bf82:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
   1bf84:	6884      	ldr	r4, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
   1bf86:	8826      	ldrh	r6, [r4, #0]
{
   1bf88:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
   1bf8a:	b2b0      	uxth	r0, r6
   1bf8c:	f7eb ff54 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1bf90:	4605      	mov	r5, r0
   1bf92:	b318      	cbz	r0, 1bfdc <le_ltk_request+0x5a>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
   1bf94:	af02      	add	r7, sp, #8
   1bf96:	f8d4 2002 	ldr.w	r2, [r4, #2]
   1bf9a:	f8d4 3006 	ldr.w	r3, [r4, #6]
   1bf9e:	9701      	str	r7, [sp, #4]
   1bfa0:	8961      	ldrh	r1, [r4, #10]
   1bfa2:	9100      	str	r1, [sp, #0]
   1bfa4:	f002 f899 	bl	1e0da <bt_smp_request_ltk>
   1bfa8:	b1d0      	cbz	r0, 1bfe0 <le_ltk_request+0x5e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
   1bfaa:	2112      	movs	r1, #18
   1bfac:	f242 001a 	movw	r0, #8218	; 0x201a
   1bfb0:	f7ea fadc 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1bfb4:	4604      	mov	r4, r0
   1bfb6:	b170      	cbz	r0, 1bfd6 <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   1bfb8:	2112      	movs	r1, #18
   1bfba:	3008      	adds	r0, #8
   1bfbc:	f002 faea 	bl	1e594 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1bfc0:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
   1bfc2:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
   1bfc6:	2210      	movs	r2, #16
   1bfc8:	f7ff fd2f 	bl	1ba2a <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
   1bfcc:	4621      	mov	r1, r4
   1bfce:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1bfd2:	f7ea fb03 	bl	65dc <bt_hci_cmd_send>
	bt_conn_unref(conn);
   1bfd6:	4628      	mov	r0, r5
   1bfd8:	f000 fb59 	bl	1c68e <bt_conn_unref>
}
   1bfdc:	b007      	add	sp, #28
   1bfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
   1bfe0:	2102      	movs	r1, #2
   1bfe2:	f242 001b 	movw	r0, #8219	; 0x201b
   1bfe6:	f7ea fac1 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1bfea:	4604      	mov	r4, r0
   1bfec:	2800      	cmp	r0, #0
   1bfee:	d0f2      	beq.n	1bfd6 <le_ltk_request+0x54>
	cp = net_buf_add(buf, sizeof(*cp));
   1bff0:	2102      	movs	r1, #2
   1bff2:	3008      	adds	r0, #8
   1bff4:	f002 face 	bl	1e594 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1bff8:	4621      	mov	r1, r4
	cp->handle = sys_cpu_to_le16(handle);
   1bffa:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
   1bffc:	f242 001b 	movw	r0, #8219	; 0x201b
   1c000:	e7e7      	b.n	1bfd2 <le_ltk_request+0x50>

0001c002 <le_conn_param_neg_reply>:
{
   1c002:	b570      	push	{r4, r5, r6, lr}
   1c004:	4606      	mov	r6, r0
   1c006:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
   1c008:	f242 0021 	movw	r0, #8225	; 0x2021
   1c00c:	2103      	movs	r1, #3
   1c00e:	f7ea faad 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c012:	4604      	mov	r4, r0
   1c014:	b160      	cbz	r0, 1c030 <le_conn_param_neg_reply+0x2e>
	cp = net_buf_add(buf, sizeof(*cp));
   1c016:	2103      	movs	r1, #3
   1c018:	3008      	adds	r0, #8
   1c01a:	f002 fabb 	bl	1e594 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
   1c01e:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
   1c020:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1c022:	4621      	mov	r1, r4
   1c024:	f242 0021 	movw	r0, #8225	; 0x2021
}
   1c028:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
   1c02c:	f7ea bad6 	b.w	65dc <bt_hci_cmd_send>
}
   1c030:	bd70      	pop	{r4, r5, r6, pc}

0001c032 <le_conn_param_req>:
{
   1c032:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
   1c034:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1c036:	78d9      	ldrb	r1, [r3, #3]
   1c038:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
   1c03a:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
   1c03c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c040:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
   1c044:	7959      	ldrb	r1, [r3, #5]
   1c046:	791a      	ldrb	r2, [r3, #4]
   1c048:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c04c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
   1c050:	799a      	ldrb	r2, [r3, #6]
   1c052:	79d9      	ldrb	r1, [r3, #7]
   1c054:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1c058:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1c05c:	7a1a      	ldrb	r2, [r3, #8]
   1c05e:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
   1c060:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1c062:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
   1c066:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
   1c068:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
   1c06c:	f7eb fee4 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1c070:	4606      	mov	r6, r0
   1c072:	b928      	cbnz	r0, 1c080 <le_conn_param_req+0x4e>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
   1c074:	2102      	movs	r1, #2
   1c076:	4620      	mov	r0, r4
   1c078:	f7ff ffc3 	bl	1c002 <le_conn_param_neg_reply>
}
   1c07c:	b003      	add	sp, #12
   1c07e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
   1c080:	4669      	mov	r1, sp
   1c082:	f7eb fdb3 	bl	7bec <le_param_req>
   1c086:	b938      	cbnz	r0, 1c098 <le_conn_param_req+0x66>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
   1c088:	211e      	movs	r1, #30
   1c08a:	4620      	mov	r0, r4
   1c08c:	f7ff ffb9 	bl	1c002 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
   1c090:	4630      	mov	r0, r6
   1c092:	f000 fafc 	bl	1c68e <bt_conn_unref>
   1c096:	e7f1      	b.n	1c07c <le_conn_param_req+0x4a>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
   1c098:	210e      	movs	r1, #14
   1c09a:	f242 0020 	movw	r0, #8224	; 0x2020
   1c09e:	f7ea fa65 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c0a2:	4605      	mov	r5, r0
   1c0a4:	2800      	cmp	r0, #0
   1c0a6:	d0f3      	beq.n	1c090 <le_conn_param_req+0x5e>
	cp = net_buf_add(buf, sizeof(*cp));
   1c0a8:	210e      	movs	r1, #14
   1c0aa:	3008      	adds	r0, #8
   1c0ac:	f002 fa72 	bl	1e594 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
   1c0b0:	220e      	movs	r2, #14
	cp = net_buf_add(buf, sizeof(*cp));
   1c0b2:	4604      	mov	r4, r0
	(void)memset(cp, 0, sizeof(*cp));
   1c0b4:	2100      	movs	r1, #0
   1c0b6:	f7ff fce3 	bl	1ba80 <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
   1c0ba:	f8bd 3000 	ldrh.w	r3, [sp]
   1c0be:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
   1c0c0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
   1c0c4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
   1c0c6:	f8bd 3004 	ldrh.w	r3, [sp, #4]
   1c0ca:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1c0cc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
   1c0d0:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
   1c0d2:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
   1c0d4:	4629      	mov	r1, r5
   1c0d6:	f242 0020 	movw	r0, #8224	; 0x2020
   1c0da:	f7ea fa7f 	bl	65dc <bt_hci_cmd_send>
   1c0de:	e7d7      	b.n	1c090 <le_conn_param_req+0x5e>

0001c0e0 <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1c0e0:	f100 0214 	add.w	r2, r0, #20
{
   1c0e4:	b510      	push	{r4, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1c0e6:	2106      	movs	r1, #6
{
   1c0e8:	4604      	mov	r4, r0
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   1c0ea:	4610      	mov	r0, r2
   1c0ec:	f7ff fe2a 	bl	1bd44 <atomic_test_bit>
   1c0f0:	b150      	cbz	r0, 1c108 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c0f2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1c0f6:	4610      	mov	r0, r2
   1c0f8:	f7ff fe78 	bl	1bdec <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   1c0fc:	4620      	mov	r0, r4
   1c0fe:	2100      	movs	r1, #0
}
   1c100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1c104:	f7ea bb94 	b.w	6830 <set_le_adv_enable_legacy>
}
   1c108:	bd10      	pop	{r4, pc}

0001c10a <adv_unpause_enabled>:
{
   1c10a:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1c10c:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   1c110:	4604      	mov	r4, r0
   1c112:	3014      	adds	r0, #20
   1c114:	f7ff fe01 	bl	1bd1a <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   1c118:	0483      	lsls	r3, r0, #18
   1c11a:	d505      	bpl.n	1c128 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   1c11c:	4620      	mov	r0, r4
   1c11e:	2101      	movs	r1, #1
}
   1c120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   1c124:	f7ea bb84 	b.w	6830 <set_le_adv_enable_legacy>
}
   1c128:	bd10      	pop	{r4, pc}

0001c12a <hci_le_read_max_data_len>:
{
   1c12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1c12c:	4606      	mov	r6, r0
   1c12e:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
   1c130:	aa01      	add	r2, sp, #4
   1c132:	2100      	movs	r1, #0
   1c134:	f242 002f 	movw	r0, #8239	; 0x202f
   1c138:	f7ea fa72 	bl	6620 <bt_hci_cmd_send_sync>
	if (err) {
   1c13c:	4604      	mov	r4, r0
   1c13e:	b948      	cbnz	r0, 1c154 <hci_le_read_max_data_len+0x2a>
	rp = (void *)rsp->data;
   1c140:	9801      	ldr	r0, [sp, #4]
   1c142:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
   1c144:	f8b3 2001 	ldrh.w	r2, [r3, #1]
   1c148:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
   1c14a:	f8b3 3003 	ldrh.w	r3, [r3, #3]
   1c14e:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
   1c150:	f7fa fe56 	bl	16e00 <net_buf_unref>
}
   1c154:	4620      	mov	r0, r4
   1c156:	b002      	add	sp, #8
   1c158:	bd70      	pop	{r4, r5, r6, pc}

0001c15a <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c15a:	7a03      	ldrb	r3, [r0, #8]
   1c15c:	075b      	lsls	r3, r3, #29
{
   1c15e:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   1c160:	d505      	bpl.n	1c16e <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   1c162:	4601      	mov	r1, r0
   1c164:	322a      	adds	r2, #42	; 0x2a
   1c166:	f811 0b01 	ldrb.w	r0, [r1], #1
   1c16a:	f7ea bbdf 	b.w	692c <hci_id_add>
}
   1c16e:	4770      	bx	lr

0001c170 <addr_res_enable>:
{
   1c170:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1c172:	2101      	movs	r1, #1
{
   1c174:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   1c176:	f242 002d 	movw	r0, #8237	; 0x202d
   1c17a:	f7ea f9f7 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c17e:	4604      	mov	r4, r0
   1c180:	b158      	cbz	r0, 1c19a <addr_res_enable+0x2a>
	net_buf_add_u8(buf, enable);
   1c182:	4629      	mov	r1, r5
   1c184:	3008      	adds	r0, #8
   1c186:	f002 fa14 	bl	1e5b2 <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1c18a:	4621      	mov	r1, r4
   1c18c:	2200      	movs	r2, #0
}
   1c18e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   1c192:	f242 002d 	movw	r0, #8237	; 0x202d
   1c196:	f7ea ba43 	b.w	6620 <bt_hci_cmd_send_sync>
}
   1c19a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c19e:	bd38      	pop	{r3, r4, r5, pc}

0001c1a0 <hci_set_ad>:
{
   1c1a0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1c1a4:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1c1a6:	2120      	movs	r1, #32
{
   1c1a8:	4606      	mov	r6, r0
   1c1aa:	4690      	mov	r8, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
   1c1ac:	f7ea f9de 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c1b0:	4605      	mov	r5, r0
   1c1b2:	b300      	cbz	r0, 1c1f6 <hci_set_ad+0x56>
	set_data = net_buf_add(buf, sizeof(*set_data));
   1c1b4:	2120      	movs	r1, #32
   1c1b6:	3008      	adds	r0, #8
   1c1b8:	f002 f9ec 	bl	1e594 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
   1c1bc:	2220      	movs	r2, #32
	set_data = net_buf_add(buf, sizeof(*set_data));
   1c1be:	4604      	mov	r4, r0
	(void)memset(set_data, 0, sizeof(*set_data));
   1c1c0:	2100      	movs	r1, #0
   1c1c2:	f7ff fc5d 	bl	1ba80 <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
   1c1c6:	9400      	str	r4, [sp, #0]
   1c1c8:	1c60      	adds	r0, r4, #1
   1c1ca:	4643      	mov	r3, r8
   1c1cc:	463a      	mov	r2, r7
   1c1ce:	211f      	movs	r1, #31
   1c1d0:	f7ff fdc8 	bl	1bd64 <set_data_add>
	if (err) {
   1c1d4:	4604      	mov	r4, r0
   1c1d6:	b130      	cbz	r0, 1c1e6 <hci_set_ad+0x46>
		net_buf_unref(buf);
   1c1d8:	4628      	mov	r0, r5
   1c1da:	f7fa fe11 	bl	16e00 <net_buf_unref>
}
   1c1de:	4620      	mov	r0, r4
   1c1e0:	b002      	add	sp, #8
   1c1e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1c1e6:	4602      	mov	r2, r0
   1c1e8:	4629      	mov	r1, r5
   1c1ea:	4630      	mov	r0, r6
}
   1c1ec:	b002      	add	sp, #8
   1c1ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
   1c1f2:	f7ea ba15 	b.w	6620 <bt_hci_cmd_send_sync>
		return -ENOBUFS;
   1c1f6:	f06f 0436 	mvn.w	r4, #54	; 0x36
   1c1fa:	e7f0      	b.n	1c1de <hci_set_ad+0x3e>

0001c1fc <bt_lookup_id_addr>:
{
   1c1fc:	b510      	push	{r4, lr}
   1c1fe:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   1c200:	f7ee ff40 	bl	b084 <bt_keys_find_irk>
		if (keys) {
   1c204:	b100      	cbz	r0, 1c208 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   1c206:	1c44      	adds	r4, r0, #1
}
   1c208:	4620      	mov	r0, r4
   1c20a:	bd10      	pop	{r4, pc}

0001c20c <bt_hci_disconnect>:
{
   1c20c:	b570      	push	{r4, r5, r6, lr}
   1c20e:	4606      	mov	r6, r0
   1c210:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   1c212:	f240 4006 	movw	r0, #1030	; 0x406
   1c216:	2103      	movs	r1, #3
   1c218:	f7ea f9a8 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c21c:	4604      	mov	r4, r0
   1c21e:	b160      	cbz	r0, 1c23a <bt_hci_disconnect+0x2e>
	disconn = net_buf_add(buf, sizeof(*disconn));
   1c220:	2103      	movs	r1, #3
   1c222:	3008      	adds	r0, #8
   1c224:	f002 f9b6 	bl	1e594 <net_buf_simple_add>
	disconn->reason = reason;
   1c228:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   1c22a:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1c22c:	4621      	mov	r1, r4
   1c22e:	f240 4006 	movw	r0, #1030	; 0x406
}
   1c232:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
   1c236:	f7ea b9d1 	b.w	65dc <bt_hci_cmd_send>
}
   1c23a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c23e:	bd70      	pop	{r4, r5, r6, pc}

0001c240 <bt_le_set_data_len>:
{
   1c240:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c242:	4607      	mov	r7, r0
   1c244:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c246:	f242 0022 	movw	r0, #8226	; 0x2022
   1c24a:	2106      	movs	r1, #6
{
   1c24c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   1c24e:	f7ea f98d 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c252:	4604      	mov	r4, r0
   1c254:	b170      	cbz	r0, 1c274 <bt_le_set_data_len+0x34>
	cp = net_buf_add(buf, sizeof(*cp));
   1c256:	2106      	movs	r1, #6
   1c258:	3008      	adds	r0, #8
   1c25a:	f002 f99b 	bl	1e594 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c25e:	883b      	ldrh	r3, [r7, #0]
   1c260:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   1c262:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   1c264:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c266:	4621      	mov	r1, r4
   1c268:	f242 0022 	movw	r0, #8226	; 0x2022
}
   1c26c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   1c270:	f7ea b9b4 	b.w	65dc <bt_hci_cmd_send>
}
   1c274:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c27a <bt_le_set_phy>:
{
   1c27a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1c27e:	4680      	mov	r8, r0
   1c280:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c282:	f242 0032 	movw	r0, #8242	; 0x2032
   1c286:	2107      	movs	r1, #7
{
   1c288:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1c28c:	4616      	mov	r6, r2
   1c28e:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   1c290:	f7ea f96c 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c294:	4604      	mov	r4, r0
   1c296:	b190      	cbz	r0, 1c2be <bt_le_set_phy+0x44>
	cp = net_buf_add(buf, sizeof(*cp));
   1c298:	2107      	movs	r1, #7
   1c29a:	3008      	adds	r0, #8
   1c29c:	f002 f97a 	bl	1e594 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c2a0:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   1c2a4:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   1c2a6:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   1c2a8:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   1c2aa:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   1c2ac:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c2b0:	4621      	mov	r1, r4
   1c2b2:	f242 0032 	movw	r0, #8242	; 0x2032
}
   1c2b6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   1c2ba:	f7ea b98f 	b.w	65dc <bt_hci_cmd_send>
}
   1c2be:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c2c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001c2c6 <le_phy_update_complete>:
{
   1c2c6:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
   1c2c8:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1c2ca:	f8b3 0001 	ldrh.w	r0, [r3, #1]
   1c2ce:	f7eb fdb3 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1c2d2:	4604      	mov	r4, r0
   1c2d4:	b1a0      	cbz	r0, 1c300 <le_phy_update_complete+0x3a>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
   1c2d6:	1d05      	adds	r5, r0, #4
   1c2d8:	f06f 0180 	mvn.w	r1, #128	; 0x80
   1c2dc:	4628      	mov	r0, r5
   1c2de:	f7ff fd1c 	bl	1bd1a <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
   1c2e2:	0603      	lsls	r3, r0, #24
   1c2e4:	d507      	bpl.n	1c2f6 <le_phy_update_complete+0x30>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   1c2e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   1c2ea:	4628      	mov	r0, r5
   1c2ec:	f7ff fd7e 	bl	1bdec <atomic_or>
		conn_auto_initiate(conn);
   1c2f0:	4620      	mov	r0, r4
   1c2f2:	f7ea fbc1 	bl	6a78 <conn_auto_initiate>
	bt_conn_unref(conn);
   1c2f6:	4620      	mov	r0, r4
}
   1c2f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1c2fc:	f000 b9c7 	b.w	1c68e <bt_conn_unref>
}
   1c300:	bd38      	pop	{r3, r4, r5, pc}

0001c302 <le_remote_feat_complete>:
{
   1c302:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
   1c304:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
   1c306:	f8b5 0001 	ldrh.w	r0, [r5, #1]
   1c30a:	f7eb fd95 	bl	7e38 <bt_conn_lookup_handle>
	if (!conn) {
   1c30e:	4604      	mov	r4, r0
   1c310:	b198      	cbz	r0, 1c33a <le_remote_feat_complete+0x38>
	if (!evt->status) {
   1c312:	782b      	ldrb	r3, [r5, #0]
   1c314:	b923      	cbnz	r3, 1c320 <le_remote_feat_complete+0x1e>
		memcpy(conn->le.features, evt->features,
   1c316:	2208      	movs	r2, #8
   1c318:	1ce9      	adds	r1, r5, #3
   1c31a:	30ac      	adds	r0, #172	; 0xac
   1c31c:	f7ff fb85 	bl	1ba2a <memcpy>
   1c320:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   1c324:	1d20      	adds	r0, r4, #4
   1c326:	f7ff fd61 	bl	1bdec <atomic_or>
	conn_auto_initiate(conn);
   1c32a:	4620      	mov	r0, r4
   1c32c:	f7ea fba4 	bl	6a78 <conn_auto_initiate>
	bt_conn_unref(conn);
   1c330:	4620      	mov	r0, r4
}
   1c332:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
   1c336:	f000 b9aa 	b.w	1c68e <bt_conn_unref>
}
   1c33a:	bd38      	pop	{r3, r4, r5, pc}

0001c33c <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   1c33c:	8802      	ldrh	r2, [r0, #0]
   1c33e:	8843      	ldrh	r3, [r0, #2]
   1c340:	429a      	cmp	r2, r3
{
   1c342:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   1c344:	d818      	bhi.n	1c378 <bt_le_conn_params_valid+0x3c>
   1c346:	2a05      	cmp	r2, #5
   1c348:	d916      	bls.n	1c378 <bt_le_conn_params_valid+0x3c>
	    param->interval_min < 6 || param->interval_max > 3200) {
   1c34a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   1c34e:	d813      	bhi.n	1c378 <bt_le_conn_params_valid+0x3c>
	if (param->latency > 499) {
   1c350:	8884      	ldrh	r4, [r0, #4]
   1c352:	f5b4 7ffa 	cmp.w	r4, #500	; 0x1f4
   1c356:	d20f      	bcs.n	1c378 <bt_le_conn_params_valid+0x3c>
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c358:	88c1      	ldrh	r1, [r0, #6]
   1c35a:	f1a1 020a 	sub.w	r2, r1, #10
   1c35e:	b292      	uxth	r2, r2
   1c360:	f640 4076 	movw	r0, #3190	; 0xc76
   1c364:	4282      	cmp	r2, r0
   1c366:	d807      	bhi.n	1c378 <bt_le_conn_params_valid+0x3c>
	     ((1U + param->latency) * param->interval_max))) {
   1c368:	fb04 3303 	mla	r3, r4, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
   1c36c:	ebb3 0f81 	cmp.w	r3, r1, lsl #2
   1c370:	bf34      	ite	cc
   1c372:	2001      	movcc	r0, #1
   1c374:	2000      	movcs	r0, #0
}
   1c376:	bd10      	pop	{r4, pc}
		return false;
   1c378:	2000      	movs	r0, #0
   1c37a:	e7fc      	b.n	1c376 <bt_le_conn_params_valid+0x3a>

0001c37c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   1c37c:	7a03      	ldrb	r3, [r0, #8]
   1c37e:	07d9      	lsls	r1, r3, #31
   1c380:	d504      	bpl.n	1c38c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   1c382:	f023 0301 	bic.w	r3, r3, #1
   1c386:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   1c388:	f7ea bbe0 	b.w	6b4c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   1c38c:	0799      	lsls	r1, r3, #30
   1c38e:	d504      	bpl.n	1c39a <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   1c390:	f023 0302 	bic.w	r3, r3, #2
   1c394:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   1c396:	f7ea bc65 	b.w	6c64 <bt_id_del>
}
   1c39a:	4770      	bx	lr

0001c39c <bt_addr_le_create_static>:
	addr->type = BT_ADDR_LE_RANDOM;
   1c39c:	2301      	movs	r3, #1
{
   1c39e:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   1c3a0:	2106      	movs	r1, #6
{
   1c3a2:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   1c3a4:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   1c3a8:	f7f1 fd7e 	bl	dea8 <bt_rand>
	if (err) {
   1c3ac:	b918      	cbnz	r0, 1c3b6 <bt_addr_le_create_static+0x1a>
	BT_ADDR_SET_STATIC(&addr->a);
   1c3ae:	79a3      	ldrb	r3, [r4, #6]
   1c3b0:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1c3b4:	71a3      	strb	r3, [r4, #6]
}
   1c3b6:	bd10      	pop	{r4, pc}

0001c3b8 <bt_send>:
		return bt_hci_ecc_send(buf);
   1c3b8:	f7e9 bc22 	b.w	5c00 <bt_hci_ecc_send>

0001c3bc <bt_addr_le_is_bonded>:
{
   1c3bc:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1c3be:	f7ee fe9b 	bl	b0f8 <bt_keys_find_addr>
		return keys && keys->keys;
   1c3c2:	b118      	cbz	r0, 1c3cc <bt_addr_le_is_bonded+0x10>
   1c3c4:	89c0      	ldrh	r0, [r0, #14]
   1c3c6:	3800      	subs	r0, #0
   1c3c8:	bf18      	it	ne
   1c3ca:	2001      	movne	r0, #1
}
   1c3cc:	bd08      	pop	{r3, pc}

0001c3ce <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   1c3ce:	6880      	ldr	r0, [r0, #8]
   1c3d0:	f7eb b948 	b.w	7664 <enh_conn_complete>

0001c3d4 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   1c3d4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1c3d6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
{
   1c3da:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1c3dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1c3e0:	2100      	movs	r1, #0
{
   1c3e2:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1c3e4:	f7eb fa7a 	bl	78dc <bt_buf_get_evt>

	hdr = net_buf_add(buf, sizeof(*hdr));
   1c3e8:	2102      	movs	r1, #2
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   1c3ea:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
   1c3ec:	3008      	adds	r0, #8
   1c3ee:	f002 f8d1 	bl	1e594 <net_buf_simple_add>
	hdr->evt = evt;
   1c3f2:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   1c3f4:	7045      	strb	r5, [r0, #1]

	return buf;
}
   1c3f6:	4620      	mov	r0, r4
   1c3f8:	bd70      	pop	{r4, r5, r6, pc}

0001c3fa <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1c3fa:	3103      	adds	r1, #3
{
   1c3fc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1c3fe:	b2c9      	uxtb	r1, r1
{
   1c400:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1c402:	200e      	movs	r0, #14
   1c404:	f7ff ffe6 	bl	1c3d4 <bt_hci_evt_create>

	cc = net_buf_add(buf, sizeof(*cc));
   1c408:	2103      	movs	r1, #3
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   1c40a:	4604      	mov	r4, r0
	cc = net_buf_add(buf, sizeof(*cc));
   1c40c:	3008      	adds	r0, #8
   1c40e:	f002 f8c1 	bl	1e594 <net_buf_simple_add>
	cc->ncmd = 1U;
   1c412:	2301      	movs	r3, #1
   1c414:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   1c416:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   1c41a:	4620      	mov	r0, r4
   1c41c:	bd38      	pop	{r3, r4, r5, pc}

0001c41e <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   1c41e:	b570      	push	{r4, r5, r6, lr}
   1c420:	4605      	mov	r5, r0
   1c422:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1c424:	200f      	movs	r0, #15
   1c426:	2104      	movs	r1, #4
   1c428:	f7ff ffd4 	bl	1c3d4 <bt_hci_evt_create>

	cs = net_buf_add(buf, sizeof(*cs));
   1c42c:	2104      	movs	r1, #4
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   1c42e:	4604      	mov	r4, r0
	cs = net_buf_add(buf, sizeof(*cs));
   1c430:	3008      	adds	r0, #8
   1c432:	f002 f8af 	bl	1e594 <net_buf_simple_add>
	cs->status = status;
	cs->ncmd = 1U;
   1c436:	2201      	movs	r2, #1
	cs->status = status;
   1c438:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   1c43a:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   1c43c:	8045      	strh	r5, [r0, #2]

	return buf;
}
   1c43e:	4620      	mov	r0, r4
   1c440:	bd70      	pop	{r4, r5, r6, pc}

0001c442 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1c442:	f3bf 8f5b 	dmb	ish
   1c446:	6800      	ldr	r0, [r0, #0]
   1c448:	f3bf 8f5b 	dmb	ish
}
   1c44c:	4770      	bx	lr

0001c44e <atomic_inc>:
{
   1c44e:	4603      	mov	r3, r0
}
   1c450:	f3bf 8f5b 	dmb	ish
   1c454:	e853 0f00 	ldrex	r0, [r3]
   1c458:	1c42      	adds	r2, r0, #1
   1c45a:	e843 2100 	strex	r1, r2, [r3]
   1c45e:	2900      	cmp	r1, #0
   1c460:	d1f8      	bne.n	1c454 <atomic_inc+0x6>
   1c462:	f3bf 8f5b 	dmb	ish
   1c466:	4770      	bx	lr

0001c468 <tx_notify>:
{
   1c468:	b570      	push	{r4, r5, r6, lr}
   1c46a:	4604      	mov	r4, r0
	__asm__ volatile(
   1c46c:	f04f 0220 	mov.w	r2, #32
   1c470:	f3ef 8311 	mrs	r3, BASEPRI
   1c474:	f382 8811 	msr	BASEPRI, r2
   1c478:	f3bf 8f6f 	isb	sy
Z_GENLIST_IS_EMPTY(slist)
   1c47c:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   1c47e:	b920      	cbnz	r0, 1c48a <tx_notify+0x22>
	__asm__ volatile(
   1c480:	f383 8811 	msr	BASEPRI, r3
   1c484:	f3bf 8f6f 	isb	sy
}
   1c488:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c48a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1c48c:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1c48e:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c490:	4288      	cmp	r0, r1
	list->tail = node;
   1c492:	bf08      	it	eq
   1c494:	6262      	streq	r2, [r4, #36]	; 0x24
   1c496:	f383 8811 	msr	BASEPRI, r3
   1c49a:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   1c49e:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   1c4a2:	f7eb fac1 	bl	7a28 <tx_free>
		cb(conn, user_data);
   1c4a6:	4631      	mov	r1, r6
   1c4a8:	4620      	mov	r0, r4
   1c4aa:	47a8      	blx	r5
	while (1) {
   1c4ac:	e7de      	b.n	1c46c <tx_notify+0x4>

0001c4ae <tx_complete_work>:
	tx_notify(conn);
   1c4ae:	3828      	subs	r0, #40	; 0x28
   1c4b0:	f7ff bfda 	b.w	1c468 <tx_notify>

0001c4b4 <bt_conn_new>:
{
   1c4b4:	b570      	push	{r4, r5, r6, lr}
   1c4b6:	460a      	mov	r2, r1
   1c4b8:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   1c4ba:	2600      	movs	r6, #0
   1c4bc:	4296      	cmp	r6, r2
   1c4be:	d102      	bne.n	1c4c6 <bt_conn_new+0x12>
		return NULL;
   1c4c0:	2400      	movs	r4, #0
}
   1c4c2:	4620      	mov	r0, r4
   1c4c4:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
   1c4c6:	f104 0554 	add.w	r5, r4, #84	; 0x54
   1c4ca:	4628      	mov	r0, r5
   1c4cc:	f7ff ffb9 	bl	1c442 <atomic_get>
   1c4d0:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1c4d4:	4601      	mov	r1, r0
   1c4d6:	b110      	cbz	r0, 1c4de <bt_conn_new+0x2a>
	for (i = 0; i < size; i++) {
   1c4d8:	3601      	adds	r6, #1
   1c4da:	461c      	mov	r4, r3
   1c4dc:	e7ee      	b.n	1c4bc <bt_conn_new+0x8>
	if (!conn) {
   1c4de:	2c00      	cmp	r4, #0
   1c4e0:	d0ef      	beq.n	1c4c2 <bt_conn_new+0xe>
	(void)memset(conn, 0, sizeof(*conn));
   1c4e2:	22b8      	movs	r2, #184	; 0xb8
   1c4e4:	4620      	mov	r0, r4
   1c4e6:	f7ff facb 	bl	1ba80 <memset>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c4ea:	f3bf 8f5b 	dmb	ish
   1c4ee:	2301      	movs	r3, #1
   1c4f0:	e855 2f00 	ldrex	r2, [r5]
   1c4f4:	e845 3100 	strex	r1, r3, [r5]
   1c4f8:	2900      	cmp	r1, #0
   1c4fa:	d1f9      	bne.n	1c4f0 <bt_conn_new+0x3c>
   1c4fc:	f3bf 8f5b 	dmb	ish
   1c500:	e7df      	b.n	1c4c2 <bt_conn_new+0xe>

0001c502 <bt_conn_set_security>:
{
   1c502:	b510      	push	{r4, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1c504:	7b43      	ldrb	r3, [r0, #13]
   1c506:	2b07      	cmp	r3, #7
{
   1c508:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
   1c50a:	d128      	bne.n	1c55e <bt_conn_set_security+0x5c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   1c50c:	7a43      	ldrb	r3, [r0, #9]
   1c50e:	428b      	cmp	r3, r1
   1c510:	d228      	bcs.n	1c564 <bt_conn_set_security+0x62>
   1c512:	7a83      	ldrb	r3, [r0, #10]
   1c514:	428b      	cmp	r3, r1
   1c516:	d225      	bcs.n	1c564 <bt_conn_set_security+0x62>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c518:	f3bf 8f5b 	dmb	ish
	if (val) {
   1c51c:	060a      	lsls	r2, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   1c51e:	f100 0304 	add.w	r3, r0, #4
   1c522:	d513      	bpl.n	1c54c <bt_conn_set_security+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c524:	e853 2f00 	ldrex	r2, [r3]
   1c528:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
   1c52c:	e843 2000 	strex	r0, r2, [r3]
   1c530:	2800      	cmp	r0, #0
   1c532:	d1f7      	bne.n	1c524 <bt_conn_set_security+0x22>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c534:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   1c538:	f001 017f 	and.w	r1, r1, #127	; 0x7f
   1c53c:	72a1      	strb	r1, [r4, #10]
		return bt_smp_start_security(conn);
   1c53e:	4620      	mov	r0, r4
   1c540:	f7ee fc78 	bl	ae34 <bt_smp_start_security>
	if (err) {
   1c544:	b108      	cbz	r0, 1c54a <bt_conn_set_security+0x48>
		conn->required_sec_level = conn->sec_level;
   1c546:	7a63      	ldrb	r3, [r4, #9]
   1c548:	72a3      	strb	r3, [r4, #10]
}
   1c54a:	bd10      	pop	{r4, pc}
   1c54c:	e853 2f00 	ldrex	r2, [r3]
   1c550:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   1c554:	e843 2000 	strex	r0, r2, [r3]
   1c558:	2800      	cmp	r0, #0
   1c55a:	d0eb      	beq.n	1c534 <bt_conn_set_security+0x32>
   1c55c:	e7f6      	b.n	1c54c <bt_conn_set_security+0x4a>
		return -ENOTCONN;
   1c55e:	f06f 0038 	mvn.w	r0, #56	; 0x38
   1c562:	e7f2      	b.n	1c54a <bt_conn_set_security+0x48>
		return 0;
   1c564:	2000      	movs	r0, #0
   1c566:	e7f0      	b.n	1c54a <bt_conn_set_security+0x48>

0001c568 <bt_conn_get_security>:
}
   1c568:	7a40      	ldrb	r0, [r0, #9]
   1c56a:	4770      	bx	lr

0001c56c <bt_conn_reset_rx_state>:
{
   1c56c:	b510      	push	{r4, lr}
   1c56e:	4604      	mov	r4, r0
	if (!conn->rx) {
   1c570:	6900      	ldr	r0, [r0, #16]
   1c572:	b118      	cbz	r0, 1c57c <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   1c574:	f7fa fc44 	bl	16e00 <net_buf_unref>
	conn->rx = NULL;
   1c578:	2300      	movs	r3, #0
   1c57a:	6123      	str	r3, [r4, #16]
}
   1c57c:	bd10      	pop	{r4, pc}

0001c57e <bt_conn_recv>:
{
   1c57e:	b570      	push	{r4, r5, r6, lr}
   1c580:	4616      	mov	r6, r2
   1c582:	4604      	mov	r4, r0
   1c584:	460d      	mov	r5, r1
	tx_notify(conn);
   1c586:	f7ff ff6f 	bl	1c468 <tx_notify>
	switch (flags) {
   1c58a:	2e01      	cmp	r6, #1
   1c58c:	d01a      	beq.n	1c5c4 <bt_conn_recv+0x46>
   1c58e:	2e02      	cmp	r6, #2
   1c590:	d11a      	bne.n	1c5c8 <bt_conn_recv+0x4a>
		if (conn->rx) {
   1c592:	6923      	ldr	r3, [r4, #16]
   1c594:	b113      	cbz	r3, 1c59c <bt_conn_recv+0x1e>
			bt_conn_reset_rx_state(conn);
   1c596:	4620      	mov	r0, r4
   1c598:	f7ff ffe8 	bl	1c56c <bt_conn_reset_rx_state>
		conn->rx = buf;
   1c59c:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
   1c59e:	6921      	ldr	r1, [r4, #16]
   1c5a0:	898a      	ldrh	r2, [r1, #12]
   1c5a2:	2a01      	cmp	r2, #1
   1c5a4:	d931      	bls.n	1c60a <bt_conn_recv+0x8c>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
   1c5a6:	6888      	ldr	r0, [r1, #8]
	return ((uint16_t)src[1] << 8) | src[0];
   1c5a8:	7845      	ldrb	r5, [r0, #1]
   1c5aa:	7803      	ldrb	r3, [r0, #0]
   1c5ac:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
   1c5b0:	3304      	adds	r3, #4
   1c5b2:	b29b      	uxth	r3, r3
	if (conn->rx->len < acl_total_len) {
   1c5b4:	429a      	cmp	r2, r3
   1c5b6:	d328      	bcc.n	1c60a <bt_conn_recv+0x8c>
	if (conn->rx->len > acl_total_len) {
   1c5b8:	d920      	bls.n	1c5fc <bt_conn_recv+0x7e>
		bt_conn_reset_rx_state(conn);
   1c5ba:	4620      	mov	r0, r4
}
   1c5bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
   1c5c0:	f7ff bfd4 	b.w	1c56c <bt_conn_reset_rx_state>
		if (!conn->rx) {
   1c5c4:	6920      	ldr	r0, [r4, #16]
   1c5c6:	b918      	cbnz	r0, 1c5d0 <bt_conn_recv+0x52>
		bt_conn_reset_rx_state(conn);
   1c5c8:	4620      	mov	r0, r4
   1c5ca:	f7ff ffcf 	bl	1c56c <bt_conn_reset_rx_state>
   1c5ce:	e001      	b.n	1c5d4 <bt_conn_recv+0x56>
		if (!buf->len) {
   1c5d0:	89ae      	ldrh	r6, [r5, #12]
   1c5d2:	b926      	cbnz	r6, 1c5de <bt_conn_recv+0x60>
		net_buf_unref(buf);
   1c5d4:	4628      	mov	r0, r5
}
   1c5d6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
   1c5da:	f7fa bc11 	b.w	16e00 <net_buf_unref>
		if (buf->len > net_buf_tailroom(conn->rx)) {
   1c5de:	3008      	adds	r0, #8
   1c5e0:	f002 f813 	bl	1e60a <net_buf_simple_tailroom>
   1c5e4:	4286      	cmp	r6, r0
   1c5e6:	d8ef      	bhi.n	1c5c8 <bt_conn_recv+0x4a>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
   1c5e8:	6920      	ldr	r0, [r4, #16]
   1c5ea:	89aa      	ldrh	r2, [r5, #12]
   1c5ec:	68a9      	ldr	r1, [r5, #8]
   1c5ee:	3008      	adds	r0, #8
   1c5f0:	f001 ffd6 	bl	1e5a0 <net_buf_simple_add_mem>
		net_buf_unref(buf);
   1c5f4:	4628      	mov	r0, r5
   1c5f6:	f7fa fc03 	bl	16e00 <net_buf_unref>
		break;
   1c5fa:	e7d0      	b.n	1c59e <bt_conn_recv+0x20>
	conn->rx = NULL;
   1c5fc:	2300      	movs	r3, #0
   1c5fe:	6123      	str	r3, [r4, #16]
	bt_l2cap_recv(conn, buf);
   1c600:	4620      	mov	r0, r4
}
   1c602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
   1c606:	f000 b9a4 	b.w	1c952 <bt_l2cap_recv>
}
   1c60a:	bd70      	pop	{r4, r5, r6, pc}

0001c60c <conn_lookup_handle>:
{
   1c60c:	b538      	push	{r3, r4, r5, lr}
   1c60e:	f100 0354 	add.w	r3, r0, #84	; 0x54
	for (i = 0; i < size; i++) {
   1c612:	2400      	movs	r4, #0
   1c614:	428c      	cmp	r4, r1
   1c616:	d101      	bne.n	1c61c <conn_lookup_handle+0x10>
	return NULL;
   1c618:	2500      	movs	r5, #0
   1c61a:	e013      	b.n	1c644 <conn_lookup_handle+0x38>
		if (!atomic_get(&conns[i].ref)) {
   1c61c:	4618      	mov	r0, r3
   1c61e:	f1a3 0554 	sub.w	r5, r3, #84	; 0x54
   1c622:	f7ff ff0e 	bl	1c442 <atomic_get>
   1c626:	b178      	cbz	r0, 1c648 <conn_lookup_handle+0x3c>
		if (!bt_conn_is_handle_valid(&conns[i])) {
   1c628:	f813 0c47 	ldrb.w	r0, [r3, #-71]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   1c62c:	2801      	cmp	r0, #1
   1c62e:	d002      	beq.n	1c636 <conn_lookup_handle+0x2a>
   1c630:	3807      	subs	r0, #7
   1c632:	2801      	cmp	r0, #1
   1c634:	d808      	bhi.n	1c648 <conn_lookup_handle+0x3c>
		if (conns[i].handle == handle) {
   1c636:	f833 0c54 	ldrh.w	r0, [r3, #-84]
   1c63a:	4290      	cmp	r0, r2
   1c63c:	d104      	bne.n	1c648 <conn_lookup_handle+0x3c>
	atomic_val_t old = atomic_inc(&conn->ref);
   1c63e:	4618      	mov	r0, r3
   1c640:	f7ff ff05 	bl	1c44e <atomic_inc>
}
   1c644:	4628      	mov	r0, r5
   1c646:	bd38      	pop	{r3, r4, r5, pc}
	for (i = 0; i < size; i++) {
   1c648:	3401      	adds	r4, #1
   1c64a:	33b8      	adds	r3, #184	; 0xb8
   1c64c:	e7e2      	b.n	1c614 <conn_lookup_handle+0x8>

0001c64e <bt_conn_is_peer_addr_le>:
{
   1c64e:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   1c650:	7a03      	ldrb	r3, [r0, #8]
   1c652:	428b      	cmp	r3, r1
{
   1c654:	4604      	mov	r4, r0
   1c656:	4615      	mov	r5, r2
	if (id != conn->id) {
   1c658:	d115      	bne.n	1c686 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   1c65a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1c65e:	2207      	movs	r2, #7
   1c660:	4628      	mov	r0, r5
   1c662:	f7ff f9d2 	bl	1ba0a <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   1c666:	b180      	cbz	r0, 1c68a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   1c668:	78e3      	ldrb	r3, [r4, #3]
   1c66a:	2207      	movs	r2, #7
   1c66c:	b943      	cbnz	r3, 1c680 <bt_conn_is_peer_addr_le+0x32>
   1c66e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   1c672:	4628      	mov	r0, r5
   1c674:	f7ff f9c9 	bl	1ba0a <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   1c678:	fab0 f080 	clz	r0, r0
   1c67c:	0940      	lsrs	r0, r0, #5
}
   1c67e:	bd38      	pop	{r3, r4, r5, pc}
   1c680:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1c684:	e7f5      	b.n	1c672 <bt_conn_is_peer_addr_le+0x24>
		return false;
   1c686:	2000      	movs	r0, #0
   1c688:	e7f9      	b.n	1c67e <bt_conn_is_peer_addr_le+0x30>
		return true;
   1c68a:	2001      	movs	r0, #1
   1c68c:	e7f7      	b.n	1c67e <bt_conn_is_peer_addr_le+0x30>

0001c68e <bt_conn_unref>:
{
   1c68e:	b508      	push	{r3, lr}
	atomic_val_t old = atomic_dec(&conn->ref);
   1c690:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c692:	f3bf 8f5b 	dmb	ish
   1c696:	e850 3f00 	ldrex	r3, [r0]
   1c69a:	3b01      	subs	r3, #1
   1c69c:	e840 3200 	strex	r2, r3, [r0]
   1c6a0:	2a00      	cmp	r2, #0
   1c6a2:	d1f8      	bne.n	1c696 <bt_conn_unref+0x8>
   1c6a4:	f3bf 8f5b 	dmb	ish
	    atomic_get(&conn->ref) == 0) {
   1c6a8:	f7ff fecb 	bl	1c442 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   1c6ac:	b918      	cbnz	r0, 1c6b6 <bt_conn_unref+0x28>
}
   1c6ae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		bt_le_adv_resume();
   1c6b2:	f7ea bf91 	b.w	75d8 <bt_le_adv_resume>
}
   1c6b6:	bd08      	pop	{r3, pc}

0001c6b8 <bt_conn_exists_le>:
{
   1c6b8:	b508      	push	{r3, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
   1c6ba:	f7eb fbc5 	bl	7e48 <bt_conn_lookup_addr_le>
	if (conn) {
   1c6be:	b110      	cbz	r0, 1c6c6 <bt_conn_exists_le+0xe>
		bt_conn_unref(conn);
   1c6c0:	f7ff ffe5 	bl	1c68e <bt_conn_unref>
		return true;
   1c6c4:	2001      	movs	r0, #1
}
   1c6c6:	bd08      	pop	{r3, pc}

0001c6c8 <bt_conn_disconnect>:
{
   1c6c8:	b538      	push	{r3, r4, r5, lr}
   1c6ca:	7b43      	ldrb	r3, [r0, #13]
   1c6cc:	3b02      	subs	r3, #2
   1c6ce:	4604      	mov	r4, r0
   1c6d0:	2b06      	cmp	r3, #6
   1c6d2:	d805      	bhi.n	1c6e0 <bt_conn_disconnect+0x18>
   1c6d4:	e8df f003 	tbb	[pc, r3]
   1c6d8:	0e040408 	.word	0x0e040408
   1c6dc:	160c      	.short	0x160c
   1c6de:	0c          	.byte	0x0c
   1c6df:	00          	.byte	0x00
	switch (conn->state) {
   1c6e0:	f06f 0538 	mvn.w	r5, #56	; 0x38
}
   1c6e4:	4628      	mov	r0, r5
   1c6e6:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   1c6e8:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c6ea:	2100      	movs	r1, #0
   1c6ec:	f7eb fbee 	bl	7ecc <bt_conn_set_state>
		return 0;
   1c6f0:	2500      	movs	r5, #0
   1c6f2:	e7f7      	b.n	1c6e4 <bt_conn_disconnect+0x1c>
		conn->err = reason;
   1c6f4:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   1c6f6:	2100      	movs	r1, #0
   1c6f8:	f7eb fbe8 	bl	7ecc <bt_conn_set_state>
}
   1c6fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			return bt_le_adv_stop();
   1c700:	f7ea bf1e 	b.w	7540 <bt_le_adv_stop>
	err = bt_hci_disconnect(conn->handle, reason);
   1c704:	8800      	ldrh	r0, [r0, #0]
   1c706:	f7ff fd81 	bl	1c20c <bt_hci_disconnect>
	if (err) {
   1c70a:	4605      	mov	r5, r0
   1c70c:	2800      	cmp	r0, #0
   1c70e:	d1e9      	bne.n	1c6e4 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   1c710:	2108      	movs	r1, #8
   1c712:	4620      	mov	r0, r4
   1c714:	f7eb fbda 	bl	7ecc <bt_conn_set_state>
	return 0;
   1c718:	e7e4      	b.n	1c6e4 <bt_conn_disconnect+0x1c>

0001c71a <bt_conn_le_conn_update>:
{
   1c71a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c71c:	4607      	mov	r7, r0
   1c71e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   1c720:	f242 0013 	movw	r0, #8211	; 0x2013
   1c724:	210e      	movs	r1, #14
   1c726:	f7e9 ff21 	bl	656c <bt_hci_cmd_create>
	if (!buf) {
   1c72a:	4606      	mov	r6, r0
   1c72c:	b1d0      	cbz	r0, 1c764 <bt_conn_le_conn_update+0x4a>
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1c72e:	210e      	movs	r1, #14
   1c730:	3008      	adds	r0, #8
   1c732:	f001 ff2f 	bl	1e594 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c736:	220e      	movs	r2, #14
	conn_update = net_buf_add(buf, sizeof(*conn_update));
   1c738:	4604      	mov	r4, r0
	(void)memset(conn_update, 0, sizeof(*conn_update));
   1c73a:	2100      	movs	r1, #0
   1c73c:	f7ff f9a0 	bl	1ba80 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   1c740:	883b      	ldrh	r3, [r7, #0]
   1c742:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   1c744:	882b      	ldrh	r3, [r5, #0]
   1c746:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   1c748:	886b      	ldrh	r3, [r5, #2]
   1c74a:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   1c74c:	88ab      	ldrh	r3, [r5, #4]
   1c74e:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   1c750:	88eb      	ldrh	r3, [r5, #6]
   1c752:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c754:	4631      	mov	r1, r6
   1c756:	2200      	movs	r2, #0
}
   1c758:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   1c75c:	f242 0013 	movw	r0, #8211	; 0x2013
   1c760:	f7e9 bf5e 	b.w	6620 <bt_hci_cmd_send_sync>
}
   1c764:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1c768:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c76a <l2cap_connected>:
}
   1c76a:	4770      	bx	lr

0001c76c <l2cap_create_le_sig_pdu.isra.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
   1c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c76e:	4607      	mov	r7, r0
   1c770:	460e      	mov	r6, r1
   1c772:	4615      	mov	r5, r2
	return bt_conn_create_pdu_timeout(pool,
   1c774:	2300      	movs	r3, #0
   1c776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c77a:	2104      	movs	r1, #4
   1c77c:	2000      	movs	r0, #0
   1c77e:	f7eb fcc3 	bl	8108 <bt_conn_create_pdu_timeout>
	if (!buf) {
   1c782:	4604      	mov	r4, r0
   1c784:	b130      	cbz	r0, 1c794 <l2cap_create_le_sig_pdu.isra.0+0x28>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1c786:	2104      	movs	r1, #4
   1c788:	3008      	adds	r0, #8
   1c78a:	f001 ff03 	bl	1e594 <net_buf_simple_add>
	hdr->code = code;
   1c78e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
   1c790:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
   1c792:	8045      	strh	r5, [r0, #2]
}
   1c794:	4620      	mov	r0, r4
   1c796:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001c798 <l2cap_disconnected>:
   1c798:	4770      	bx	lr

0001c79a <bt_l2cap_chan_remove>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c79a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1c79c:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c79e:	b17b      	cbz	r3, 1c7c0 <bt_l2cap_chan_remove+0x26>
   1c7a0:	3b08      	subs	r3, #8
   1c7a2:	2200      	movs	r2, #0
   1c7a4:	b163      	cbz	r3, 1c7c0 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   1c7a6:	428b      	cmp	r3, r1
   1c7a8:	f103 0408 	add.w	r4, r3, #8
   1c7ac:	d10f      	bne.n	1c7ce <bt_l2cap_chan_remove+0x34>
Z_GENLIST_REMOVE(slist, snode)
   1c7ae:	688b      	ldr	r3, [r1, #8]
   1c7b0:	b93a      	cbnz	r2, 1c7c2 <bt_l2cap_chan_remove+0x28>
   1c7b2:	6d02      	ldr	r2, [r0, #80]	; 0x50
	list->head = node;
   1c7b4:	64c3      	str	r3, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   1c7b6:	4294      	cmp	r4, r2
   1c7b8:	d100      	bne.n	1c7bc <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   1c7ba:	6503      	str	r3, [r0, #80]	; 0x50
	parent->next = child;
   1c7bc:	2300      	movs	r3, #0
   1c7be:	608b      	str	r3, [r1, #8]
}
   1c7c0:	bd10      	pop	{r4, pc}
   1c7c2:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c7c4:	6d03      	ldr	r3, [r0, #80]	; 0x50
   1c7c6:	429c      	cmp	r4, r3
	list->tail = node;
   1c7c8:	bf08      	it	eq
   1c7ca:	6502      	streq	r2, [r0, #80]	; 0x50
}
   1c7cc:	e7f6      	b.n	1c7bc <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c7ce:	2c00      	cmp	r4, #0
   1c7d0:	d0f6      	beq.n	1c7c0 <bt_l2cap_chan_remove+0x26>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c7d2:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c7d4:	2b00      	cmp	r3, #0
   1c7d6:	d0f3      	beq.n	1c7c0 <bt_l2cap_chan_remove+0x26>
   1c7d8:	3b08      	subs	r3, #8
   1c7da:	4622      	mov	r2, r4
   1c7dc:	e7e2      	b.n	1c7a4 <bt_l2cap_chan_remove+0xa>

0001c7de <bt_l2cap_chan_del>:
{
   1c7de:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   1c7e0:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   1c7e4:	4604      	mov	r4, r0
	if (!chan->conn) {
   1c7e6:	b123      	cbz	r3, 1c7f2 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   1c7e8:	686b      	ldr	r3, [r5, #4]
   1c7ea:	b103      	cbz	r3, 1c7ee <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   1c7ec:	4798      	blx	r3
	chan->conn = NULL;
   1c7ee:	2300      	movs	r3, #0
   1c7f0:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   1c7f2:	68e3      	ldr	r3, [r4, #12]
   1c7f4:	b10b      	cbz	r3, 1c7fa <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   1c7f6:	4620      	mov	r0, r4
   1c7f8:	4798      	blx	r3
	if (ops->released) {
   1c7fa:	69eb      	ldr	r3, [r5, #28]
   1c7fc:	b11b      	cbz	r3, 1c806 <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   1c7fe:	4620      	mov	r0, r4
}
   1c800:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   1c804:	4718      	bx	r3
}
   1c806:	bd70      	pop	{r4, r5, r6, pc}

0001c808 <l2cap_rtx_timeout>:
{
   1c808:	b508      	push	{r3, lr}
	bt_l2cap_chan_remove(conn, &chan->chan);
   1c80a:	f1a0 0110 	sub.w	r1, r0, #16
   1c80e:	f850 0c10 	ldr.w	r0, [r0, #-16]
   1c812:	f7ff ffc2 	bl	1c79a <bt_l2cap_chan_remove>
}
   1c816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	bt_l2cap_chan_del(&chan->chan);
   1c81a:	4608      	mov	r0, r1
   1c81c:	f7ff bfdf 	b.w	1c7de <bt_l2cap_chan_del>

0001c820 <bt_l2cap_disconnected>:
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c820:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1c822:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c824:	b18b      	cbz	r3, 1c84a <bt_l2cap_disconnected+0x2a>
   1c826:	f1b3 0008 	subs.w	r0, r3, #8
   1c82a:	d00e      	beq.n	1c84a <bt_l2cap_disconnected+0x2a>
   1c82c:	681c      	ldr	r4, [r3, #0]
   1c82e:	b104      	cbz	r4, 1c832 <bt_l2cap_disconnected+0x12>
   1c830:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   1c832:	f7ff ffd4 	bl	1c7de <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c836:	b144      	cbz	r4, 1c84a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c838:	f114 0308 	adds.w	r3, r4, #8
   1c83c:	d002      	beq.n	1c844 <bt_l2cap_disconnected+0x24>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c83e:	68a3      	ldr	r3, [r4, #8]
   1c840:	b103      	cbz	r3, 1c844 <bt_l2cap_disconnected+0x24>
   1c842:	3b08      	subs	r3, #8
{
   1c844:	4620      	mov	r0, r4
   1c846:	461c      	mov	r4, r3
   1c848:	e7f3      	b.n	1c832 <bt_l2cap_disconnected+0x12>
}
   1c84a:	bd10      	pop	{r4, pc}

0001c84c <bt_l2cap_security_changed>:
{
   1c84c:	b538      	push	{r3, r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c84e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   1c850:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c852:	b1a3      	cbz	r3, 1c87e <bt_l2cap_security_changed+0x32>
   1c854:	f1b3 0008 	subs.w	r0, r3, #8
   1c858:	d011      	beq.n	1c87e <bt_l2cap_security_changed+0x32>
   1c85a:	681c      	ldr	r4, [r3, #0]
   1c85c:	b104      	cbz	r4, 1c860 <bt_l2cap_security_changed+0x14>
   1c85e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   1c860:	6843      	ldr	r3, [r0, #4]
   1c862:	689b      	ldr	r3, [r3, #8]
   1c864:	b10b      	cbz	r3, 1c86a <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   1c866:	4629      	mov	r1, r5
   1c868:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   1c86a:	b144      	cbz	r4, 1c87e <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c86c:	f114 0308 	adds.w	r3, r4, #8
   1c870:	d002      	beq.n	1c878 <bt_l2cap_security_changed+0x2c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c872:	68a3      	ldr	r3, [r4, #8]
   1c874:	b103      	cbz	r3, 1c878 <bt_l2cap_security_changed+0x2c>
   1c876:	3b08      	subs	r3, #8
{
   1c878:	4620      	mov	r0, r4
   1c87a:	461c      	mov	r4, r3
   1c87c:	e7f0      	b.n	1c860 <bt_l2cap_security_changed+0x14>
}
   1c87e:	bd38      	pop	{r3, r4, r5, pc}

0001c880 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   1c880:	3104      	adds	r1, #4
   1c882:	f7eb bc41 	b.w	8108 <bt_conn_create_pdu_timeout>

0001c886 <bt_l2cap_send_cb>:
{
   1c886:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c88a:	4614      	mov	r4, r2
   1c88c:	4605      	mov	r5, r0
   1c88e:	460f      	mov	r7, r1
	hdr = net_buf_push(buf, sizeof(*hdr));
   1c890:	f102 0008 	add.w	r0, r2, #8
   1c894:	2104      	movs	r1, #4
{
   1c896:	461e      	mov	r6, r3
   1c898:	f8dd 8018 	ldr.w	r8, [sp, #24]
	hdr = net_buf_push(buf, sizeof(*hdr));
   1c89c:	f001 fe91 	bl	1e5c2 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c8a0:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   1c8a2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   1c8a4:	3a04      	subs	r2, #4
   1c8a6:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c8a8:	4643      	mov	r3, r8
   1c8aa:	4632      	mov	r2, r6
   1c8ac:	4621      	mov	r1, r4
   1c8ae:	4628      	mov	r0, r5
}
   1c8b0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   1c8b4:	f7eb ba14 	b.w	7ce0 <bt_conn_send_cb>

0001c8b8 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
   1c8b8:	898b      	ldrh	r3, [r1, #12]
   1c8ba:	2b03      	cmp	r3, #3
{
   1c8bc:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1c8be:	4605      	mov	r5, r0
   1c8c0:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1c8c2:	d923      	bls.n	1c90c <l2cap_recv+0x54>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1c8c4:	2104      	movs	r1, #4
   1c8c6:	f104 0008 	add.w	r0, r4, #8
   1c8ca:	f001 fe8a 	bl	1e5e2 <net_buf_simple_pull_mem>
	if (buf->len != len) {
   1c8ce:	89a3      	ldrh	r3, [r4, #12]
   1c8d0:	8842      	ldrh	r2, [r0, #2]
   1c8d2:	429a      	cmp	r2, r3
   1c8d4:	d11a      	bne.n	1c90c <l2cap_recv+0x54>
	if (!hdr->ident) {
   1c8d6:	7841      	ldrb	r1, [r0, #1]
   1c8d8:	b1c1      	cbz	r1, 1c90c <l2cap_recv+0x54>
	switch (hdr->code) {
   1c8da:	7803      	ldrb	r3, [r0, #0]
   1c8dc:	2b01      	cmp	r3, #1
   1c8de:	d015      	beq.n	1c90c <l2cap_recv+0x54>
   1c8e0:	2b13      	cmp	r3, #19
   1c8e2:	d013      	beq.n	1c90c <l2cap_recv+0x54>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c8e4:	2202      	movs	r2, #2
   1c8e6:	2001      	movs	r0, #1
		l2cap_send_reject(chan->conn, hdr->ident,
   1c8e8:	682d      	ldr	r5, [r5, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
   1c8ea:	f7ff ff3f 	bl	1c76c <l2cap_create_le_sig_pdu.isra.0>
	if (!buf) {
   1c8ee:	4604      	mov	r4, r0
   1c8f0:	b160      	cbz	r0, 1c90c <l2cap_recv+0x54>
	rej = net_buf_add(buf, sizeof(*rej));
   1c8f2:	2102      	movs	r1, #2
   1c8f4:	3008      	adds	r0, #8
   1c8f6:	f001 fe4d 	bl	1e594 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
   1c8fa:	2300      	movs	r3, #0
   1c8fc:	7003      	strb	r3, [r0, #0]
   1c8fe:	7043      	strb	r3, [r0, #1]
   1c900:	4622      	mov	r2, r4
   1c902:	9300      	str	r3, [sp, #0]
   1c904:	2105      	movs	r1, #5
   1c906:	4628      	mov	r0, r5
   1c908:	f7ff ffbd 	bl	1c886 <bt_l2cap_send_cb>
}
   1c90c:	2000      	movs	r0, #0
   1c90e:	b003      	add	sp, #12
   1c910:	bd30      	pop	{r4, r5, pc}

0001c912 <bt_l2cap_le_lookup_tx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c912:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1c914:	b160      	cbz	r0, 1c930 <bt_l2cap_le_lookup_tx_cid+0x1e>
   1c916:	3808      	subs	r0, #8
   1c918:	b900      	cbnz	r0, 1c91c <bt_l2cap_le_lookup_tx_cid+0xa>
   1c91a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   1c91c:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   1c920:	428b      	cmp	r3, r1
   1c922:	d005      	beq.n	1c930 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c924:	f110 0308 	adds.w	r3, r0, #8
   1c928:	d001      	beq.n	1c92e <bt_l2cap_le_lookup_tx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c92a:	6880      	ldr	r0, [r0, #8]
   1c92c:	e7f2      	b.n	1c914 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   1c92e:	4618      	mov	r0, r3
}
   1c930:	4770      	bx	lr

0001c932 <bt_l2cap_le_lookup_rx_cid>:
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   1c932:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
   1c934:	b160      	cbz	r0, 1c950 <bt_l2cap_le_lookup_rx_cid+0x1e>
   1c936:	3808      	subs	r0, #8
   1c938:	b900      	cbnz	r0, 1c93c <bt_l2cap_le_lookup_rx_cid+0xa>
   1c93a:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   1c93c:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   1c940:	428b      	cmp	r3, r1
   1c942:	d005      	beq.n	1c950 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1c944:	f110 0308 	adds.w	r3, r0, #8
   1c948:	d001      	beq.n	1c94e <bt_l2cap_le_lookup_rx_cid+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c94a:	6880      	ldr	r0, [r0, #8]
   1c94c:	e7f2      	b.n	1c934 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   1c94e:	4618      	mov	r0, r3
}
   1c950:	4770      	bx	lr

0001c952 <bt_l2cap_recv>:
{
   1c952:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
   1c954:	898b      	ldrh	r3, [r1, #12]
   1c956:	2b03      	cmp	r3, #3
{
   1c958:	4605      	mov	r5, r0
   1c95a:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
   1c95c:	d804      	bhi.n	1c968 <bt_l2cap_recv+0x16>
	net_buf_unref(buf);
   1c95e:	4620      	mov	r0, r4
}
   1c960:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
   1c964:	f7fa ba4c 	b.w	16e00 <net_buf_unref>
	hdr = net_buf_pull_mem(buf, sizeof(*hdr));
   1c968:	2104      	movs	r1, #4
   1c96a:	f104 0008 	add.w	r0, r4, #8
   1c96e:	f001 fe38 	bl	1e5e2 <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
   1c972:	8841      	ldrh	r1, [r0, #2]
   1c974:	4628      	mov	r0, r5
   1c976:	f7ff ffdc 	bl	1c932 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1c97a:	2800      	cmp	r0, #0
   1c97c:	d0ef      	beq.n	1c95e <bt_l2cap_recv+0xc>
	chan->ops->recv(chan, buf);
   1c97e:	6843      	ldr	r3, [r0, #4]
   1c980:	4621      	mov	r1, r4
   1c982:	691b      	ldr	r3, [r3, #16]
   1c984:	4798      	blx	r3
   1c986:	e7ea      	b.n	1c95e <bt_l2cap_recv+0xc>

0001c988 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   1c988:	4770      	bx	lr

0001c98a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   1c98a:	4603      	mov	r3, r0
Z_GENLIST_IS_EMPTY(slist)
   1c98c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   1c98e:	b128      	cbz	r0, 1c99c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c990:	6859      	ldr	r1, [r3, #4]
   1c992:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   1c994:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   1c996:	4288      	cmp	r0, r1
	list->tail = node;
   1c998:	bf08      	it	eq
   1c99a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   1c99c:	4770      	bx	lr

0001c99e <sys_slist_find_and_remove>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c99e:	4603      	mov	r3, r0
   1c9a0:	6800      	ldr	r0, [r0, #0]
   1c9a2:	2200      	movs	r2, #0
   1c9a4:	b900      	cbnz	r0, 1c9a8 <sys_slist_find_and_remove+0xa>
   1c9a6:	4770      	bx	lr
   1c9a8:	4288      	cmp	r0, r1
   1c9aa:	d110      	bne.n	1c9ce <sys_slist_find_and_remove+0x30>
Z_GENLIST_REMOVE(slist, snode)
   1c9ac:	6808      	ldr	r0, [r1, #0]
   1c9ae:	b942      	cbnz	r2, 1c9c2 <sys_slist_find_and_remove+0x24>
   1c9b0:	685a      	ldr	r2, [r3, #4]
	list->head = node;
   1c9b2:	6018      	str	r0, [r3, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c9b4:	4291      	cmp	r1, r2
   1c9b6:	d100      	bne.n	1c9ba <sys_slist_find_and_remove+0x1c>
	list->tail = node;
   1c9b8:	6058      	str	r0, [r3, #4]
	parent->next = child;
   1c9ba:	2300      	movs	r3, #0
   1c9bc:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9be:	2001      	movs	r0, #1
Z_GENLIST_REMOVE(slist, snode)
   1c9c0:	4770      	bx	lr
	parent->next = child;
   1c9c2:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
   1c9c4:	6858      	ldr	r0, [r3, #4]
   1c9c6:	4281      	cmp	r1, r0
	list->tail = node;
   1c9c8:	bf08      	it	eq
   1c9ca:	605a      	streq	r2, [r3, #4]
}
   1c9cc:	e7f5      	b.n	1c9ba <sys_slist_find_and_remove+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1c9ce:	4602      	mov	r2, r0
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1c9d0:	6800      	ldr	r0, [r0, #0]
   1c9d2:	e7e7      	b.n	1c9a4 <sys_slist_find_and_remove+0x6>

0001c9d4 <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   1c9d4:	4603      	mov	r3, r0
	size_t bytes = 0;
   1c9d6:	2000      	movs	r0, #0

	while (buf) {
   1c9d8:	b903      	cbnz	r3, 1c9dc <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   1c9da:	4770      	bx	lr
		bytes += buf->len;
   1c9dc:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   1c9de:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   1c9e0:	4410      	add	r0, r2
		buf = buf->frags;
   1c9e2:	e7f9      	b.n	1c9d8 <net_buf_frags_len+0x4>

0001c9e4 <att_sent>:
	if (chan->ops->sent) {
   1c9e4:	684b      	ldr	r3, [r1, #4]
   1c9e6:	695b      	ldr	r3, [r3, #20]
{
   1c9e8:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   1c9ea:	b103      	cbz	r3, 1c9ee <att_sent+0xa>
		chan->ops->sent(chan);
   1c9ec:	4718      	bx	r3
}
   1c9ee:	4770      	bx	lr

0001c9f0 <attr_read_type_cb>:
{
   1c9f0:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   1c9f2:	68d4      	ldr	r4, [r2, #12]
   1c9f4:	7823      	ldrb	r3, [r4, #0]
   1c9f6:	3102      	adds	r1, #2
   1c9f8:	b913      	cbnz	r3, 1ca00 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   1c9fa:	7021      	strb	r1, [r4, #0]
	return true;
   1c9fc:	2001      	movs	r0, #1
   1c9fe:	e006      	b.n	1ca0e <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   1ca00:	428b      	cmp	r3, r1
   1ca02:	d0fb      	beq.n	1c9fc <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   1ca04:	8983      	ldrh	r3, [r0, #12]
   1ca06:	3b02      	subs	r3, #2
   1ca08:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   1ca0a:	2000      	movs	r0, #0
   1ca0c:	6110      	str	r0, [r2, #16]
}
   1ca0e:	bd10      	pop	{r4, pc}

0001ca10 <att_op_get_type>:
	switch (op) {
   1ca10:	281e      	cmp	r0, #30
   1ca12:	d816      	bhi.n	1ca42 <att_op_get_type+0x32>
   1ca14:	b308      	cbz	r0, 1ca5a <att_op_get_type+0x4a>
   1ca16:	1e43      	subs	r3, r0, #1
   1ca18:	2b1d      	cmp	r3, #29
   1ca1a:	d81e      	bhi.n	1ca5a <att_op_get_type+0x4a>
   1ca1c:	e8df f003 	tbb	[pc, r3]
   1ca20:	23172317 	.word	0x23172317
   1ca24:	23172317 	.word	0x23172317
   1ca28:	23172317 	.word	0x23172317
   1ca2c:	23172317 	.word	0x23172317
   1ca30:	1d172317 	.word	0x1d172317
   1ca34:	2317231d 	.word	0x2317231d
   1ca38:	1d191d17 	.word	0x1d191d17
   1ca3c:	0f1b      	.short	0x0f1b
   1ca3e:	2004      	movs	r0, #4
   1ca40:	4770      	bx	lr
   1ca42:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   1ca46:	2b52      	cmp	r3, #82	; 0x52
   1ca48:	d107      	bne.n	1ca5a <att_op_get_type+0x4a>
		return ATT_COMMAND;
   1ca4a:	2000      	movs	r0, #0
}
   1ca4c:	4770      	bx	lr
		return ATT_RESPONSE;
   1ca4e:	2002      	movs	r0, #2
   1ca50:	4770      	bx	lr
		return ATT_NOTIFICATION;
   1ca52:	2003      	movs	r0, #3
   1ca54:	4770      	bx	lr
		return ATT_INDICATION;
   1ca56:	2005      	movs	r0, #5
   1ca58:	4770      	bx	lr
		return ATT_COMMAND;
   1ca5a:	f010 0f40 	tst.w	r0, #64	; 0x40
   1ca5e:	bf0c      	ite	eq
   1ca60:	2006      	moveq	r0, #6
   1ca62:	2000      	movne	r0, #0
   1ca64:	4770      	bx	lr
		return ATT_REQUEST;
   1ca66:	2001      	movs	r0, #1
   1ca68:	4770      	bx	lr

0001ca6a <bt_gatt_foreach_attr>:
{
   1ca6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1ca6c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1ca70:	2300      	movs	r3, #0
   1ca72:	9300      	str	r3, [sp, #0]
   1ca74:	461a      	mov	r2, r3
   1ca76:	f7ec fe7d 	bl	9774 <bt_gatt_foreach_attr_type>
}
   1ca7a:	b005      	add	sp, #20
   1ca7c:	f85d fb04 	ldr.w	pc, [sp], #4

0001ca80 <find_info_cb>:
{
   1ca80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   1ca82:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   1ca84:	6817      	ldr	r7, [r2, #0]
{
   1ca86:	4605      	mov	r5, r0
   1ca88:	460e      	mov	r6, r1
   1ca8a:	4614      	mov	r4, r2
	if (!data->rsp) {
   1ca8c:	b963      	cbnz	r3, 1caa8 <find_info_cb+0x28>
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ca8e:	6850      	ldr	r0, [r2, #4]
   1ca90:	2101      	movs	r1, #1
   1ca92:	3008      	adds	r0, #8
   1ca94:	f001 fd7e 	bl	1e594 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ca98:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   1ca9a:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   1ca9c:	781b      	ldrb	r3, [r3, #0]
   1ca9e:	2b00      	cmp	r3, #0
   1caa0:	bf0c      	ite	eq
   1caa2:	2301      	moveq	r3, #1
   1caa4:	2302      	movne	r3, #2
   1caa6:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   1caa8:	68a3      	ldr	r3, [r4, #8]
   1caaa:	781b      	ldrb	r3, [r3, #0]
   1caac:	2b01      	cmp	r3, #1
   1caae:	d003      	beq.n	1cab8 <find_info_cb+0x38>
   1cab0:	2b02      	cmp	r3, #2
   1cab2:	d019      	beq.n	1cae8 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   1cab4:	2000      	movs	r0, #0
   1cab6:	e016      	b.n	1cae6 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   1cab8:	682b      	ldr	r3, [r5, #0]
   1caba:	781b      	ldrb	r3, [r3, #0]
   1cabc:	2b00      	cmp	r3, #0
   1cabe:	d1f9      	bne.n	1cab4 <find_info_cb+0x34>
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1cac0:	6860      	ldr	r0, [r4, #4]
   1cac2:	2104      	movs	r1, #4
   1cac4:	3008      	adds	r0, #8
   1cac6:	f001 fd65 	bl	1e594 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1caca:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   1cacc:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   1cace:	885b      	ldrh	r3, [r3, #2]
   1cad0:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   1cad2:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   1cad4:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   1cad6:	899b      	ldrh	r3, [r3, #12]
   1cad8:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1cadc:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1cade:	2804      	cmp	r0, #4
   1cae0:	bf94      	ite	ls
   1cae2:	2000      	movls	r0, #0
   1cae4:	2001      	movhi	r0, #1
}
   1cae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   1cae8:	682b      	ldr	r3, [r5, #0]
   1caea:	781b      	ldrb	r3, [r3, #0]
   1caec:	2b02      	cmp	r3, #2
   1caee:	d1e1      	bne.n	1cab4 <find_info_cb+0x34>
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1caf0:	6860      	ldr	r0, [r4, #4]
   1caf2:	2112      	movs	r1, #18
   1caf4:	3008      	adds	r0, #8
   1caf6:	f001 fd4d 	bl	1e594 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1cafa:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   1cafc:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1cafe:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   1cb00:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   1cb04:	3101      	adds	r1, #1
   1cb06:	f7fe ff90 	bl	1ba2a <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   1cb0a:	6863      	ldr	r3, [r4, #4]
   1cb0c:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   1cb10:	899b      	ldrh	r3, [r3, #12]
   1cb12:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   1cb14:	2812      	cmp	r0, #18
   1cb16:	e7e3      	b.n	1cae0 <find_info_cb+0x60>

0001cb18 <att_chan_read>:
{
   1cb18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cb1c:	4680      	mov	r8, r0
   1cb1e:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb20:	4610      	mov	r0, r2
{
   1cb22:	4699      	mov	r9, r3
   1cb24:	468b      	mov	fp, r1
   1cb26:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   1cb28:	f7ff ff54 	bl	1c9d4 <net_buf_frags_len>
   1cb2c:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   1cb30:	4283      	cmp	r3, r0
   1cb32:	d97a      	bls.n	1cc2a <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   1cb34:	f8d8 3008 	ldr.w	r3, [r8, #8]
   1cb38:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   1cb3a:	4630      	mov	r0, r6
   1cb3c:	f001 fd08 	bl	1e550 <net_buf_frag_last>
	size_t len, total = 0;
   1cb40:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   1cb44:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cb46:	4630      	mov	r0, r6
   1cb48:	f7ff ff44 	bl	1c9d4 <net_buf_frags_len>
   1cb4c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1cb50:	f105 0708 	add.w	r7, r5, #8
   1cb54:	1a24      	subs	r4, r4, r0
   1cb56:	4638      	mov	r0, r7
   1cb58:	f001 fd57 	bl	1e60a <net_buf_simple_tailroom>
   1cb5c:	4284      	cmp	r4, r0
   1cb5e:	d211      	bcs.n	1cb84 <att_chan_read+0x6c>
   1cb60:	4630      	mov	r0, r6
   1cb62:	f7ff ff37 	bl	1c9d4 <net_buf_frags_len>
   1cb66:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1cb6a:	1a24      	subs	r4, r4, r0
		if (!len) {
   1cb6c:	bb34      	cbnz	r4, 1cbbc <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   1cb6e:	79b0      	ldrb	r0, [r6, #6]
   1cb70:	f7fa f88a 	bl	16c88 <net_buf_pool_get>
   1cb74:	2200      	movs	r2, #0
   1cb76:	2300      	movs	r3, #0
   1cb78:	f001 fcb6 	bl	1e4e8 <net_buf_alloc_fixed>
			if (!frag) {
   1cb7c:	4605      	mov	r5, r0
   1cb7e:	b930      	cbnz	r0, 1cb8e <att_chan_read+0x76>
	return total;
   1cb80:	4657      	mov	r7, sl
   1cb82:	e02c      	b.n	1cbde <att_chan_read+0xc6>
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cb84:	4638      	mov	r0, r7
   1cb86:	f001 fd40 	bl	1e60a <net_buf_simple_tailroom>
   1cb8a:	4604      	mov	r4, r0
   1cb8c:	e7ee      	b.n	1cb6c <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   1cb8e:	4601      	mov	r1, r0
   1cb90:	4630      	mov	r0, r6
   1cb92:	f001 fcee 	bl	1e572 <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cb96:	4630      	mov	r0, r6
   1cb98:	f7ff ff1c 	bl	1c9d4 <net_buf_frags_len>
   1cb9c:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1cba0:	f105 0708 	add.w	r7, r5, #8
   1cba4:	1a24      	subs	r4, r4, r0
   1cba6:	4638      	mov	r0, r7
   1cba8:	f001 fd2f 	bl	1e60a <net_buf_simple_tailroom>
   1cbac:	4284      	cmp	r4, r0
   1cbae:	d21a      	bcs.n	1cbe6 <att_chan_read+0xce>
   1cbb0:	4630      	mov	r0, r6
   1cbb2:	f7ff ff0f 	bl	1c9d4 <net_buf_frags_len>
   1cbb6:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   1cbba:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   1cbbc:	68a9      	ldr	r1, [r5, #8]
   1cbbe:	89aa      	ldrh	r2, [r5, #12]
   1cbc0:	f8db 7004 	ldr.w	r7, [fp, #4]
   1cbc4:	9803      	ldr	r0, [sp, #12]
   1cbc6:	f8cd 9000 	str.w	r9, [sp]
   1cbca:	440a      	add	r2, r1
   1cbcc:	b2a3      	uxth	r3, r4
   1cbce:	4659      	mov	r1, fp
   1cbd0:	47b8      	blx	r7
		if (read < 0) {
   1cbd2:	1e07      	subs	r7, r0, #0
   1cbd4:	da0c      	bge.n	1cbf0 <att_chan_read+0xd8>
				return total;
   1cbd6:	f1ba 0f00 	cmp.w	sl, #0
   1cbda:	bf18      	it	ne
   1cbdc:	4657      	movne	r7, sl
}
   1cbde:	4638      	mov	r0, r7
   1cbe0:	b005      	add	sp, #20
   1cbe2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   1cbe6:	4638      	mov	r0, r7
   1cbe8:	f001 fd0f 	bl	1e60a <net_buf_simple_tailroom>
   1cbec:	4604      	mov	r4, r0
   1cbee:	e7e5      	b.n	1cbbc <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   1cbf0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cbf2:	b993      	cbnz	r3, 1cc1a <att_chan_read+0x102>
		net_buf_add(frag, read);
   1cbf4:	4639      	mov	r1, r7
   1cbf6:	f105 0008 	add.w	r0, r5, #8
   1cbfa:	f001 fccb 	bl	1e594 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cbfe:	4630      	mov	r0, r6
   1cc00:	f7ff fee8 	bl	1c9d4 <net_buf_frags_len>
   1cc04:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   1cc08:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cc0a:	4283      	cmp	r3, r0
		total += read;
   1cc0c:	44ba      	add	sl, r7
		offset += read;
   1cc0e:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   1cc12:	d9b5      	bls.n	1cb80 <att_chan_read+0x68>
   1cc14:	42a7      	cmp	r7, r4
   1cc16:	d096      	beq.n	1cb46 <att_chan_read+0x2e>
   1cc18:	e7b2      	b.n	1cb80 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   1cc1a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   1cc1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   1cc1e:	4639      	mov	r1, r7
   1cc20:	4628      	mov	r0, r5
   1cc22:	4798      	blx	r3
   1cc24:	2800      	cmp	r0, #0
   1cc26:	d1e5      	bne.n	1cbf4 <att_chan_read+0xdc>
   1cc28:	e7aa      	b.n	1cb80 <att_chan_read+0x68>
		return 0;
   1cc2a:	2700      	movs	r7, #0
   1cc2c:	e7d7      	b.n	1cbde <att_chan_read+0xc6>

0001cc2e <find_type_cb>:
{
   1cc2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
   1cc32:	f8d2 9000 	ldr.w	r9, [r2]
{
   1cc36:	b091      	sub	sp, #68	; 0x44
   1cc38:	4607      	mov	r7, r0
   1cc3a:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cc3c:	2400      	movs	r4, #0
   1cc3e:	f642 0301 	movw	r3, #10241	; 0x2801
   1cc42:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
   1cc44:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cc48:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1cc4c:	a90b      	add	r1, sp, #44	; 0x2c
{
   1cc4e:	4615      	mov	r5, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
   1cc50:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1cc54:	f7fe ffe8 	bl	1bc28 <bt_uuid_cmp>
   1cc58:	2800      	cmp	r0, #0
   1cc5a:	d079      	beq.n	1cd50 <find_type_cb+0x122>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
   1cc5c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
   1cc60:	6838      	ldr	r0, [r7, #0]
   1cc62:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
   1cc66:	a90b      	add	r1, sp, #44	; 0x2c
   1cc68:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
   1cc6c:	f7fe ffdc 	bl	1bc28 <bt_uuid_cmp>
   1cc70:	4604      	mov	r4, r0
   1cc72:	b148      	cbz	r0, 1cc88 <find_type_cb+0x5a>
		if (data->group &&
   1cc74:	68ab      	ldr	r3, [r5, #8]
   1cc76:	b11b      	cbz	r3, 1cc80 <find_type_cb+0x52>
   1cc78:	885a      	ldrh	r2, [r3, #2]
   1cc7a:	42b2      	cmp	r2, r6
   1cc7c:	d200      	bcs.n	1cc80 <find_type_cb+0x52>
			data->group->end_handle = sys_cpu_to_le16(handle);
   1cc7e:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
   1cc80:	2001      	movs	r0, #1
}
   1cc82:	b011      	add	sp, #68	; 0x44
   1cc84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
   1cc88:	6869      	ldr	r1, [r5, #4]
   1cc8a:	4608      	mov	r0, r1
   1cc8c:	f7ff fea2 	bl	1c9d4 <net_buf_frags_len>
   1cc90:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1cc94:	1a1b      	subs	r3, r3, r0
   1cc96:	2b03      	cmp	r3, #3
   1cc98:	d922      	bls.n	1cce0 <find_type_cb+0xb2>
	frag = net_buf_frag_last(data->buf);
   1cc9a:	4608      	mov	r0, r1
   1cc9c:	f001 fc58 	bl	1e550 <net_buf_frag_last>
   1cca0:	4604      	mov	r4, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1cca2:	6868      	ldr	r0, [r5, #4]
   1cca4:	f7ff fe96 	bl	1c9d4 <net_buf_frags_len>
   1cca8:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
   1ccac:	f104 0b08 	add.w	fp, r4, #8
   1ccb0:	ebaa 0a00 	sub.w	sl, sl, r0
   1ccb4:	4658      	mov	r0, fp
   1ccb6:	f001 fca8 	bl	1e60a <net_buf_simple_tailroom>
   1ccba:	4582      	cmp	sl, r0
   1ccbc:	d212      	bcs.n	1cce4 <find_type_cb+0xb6>
   1ccbe:	6868      	ldr	r0, [r5, #4]
   1ccc0:	f7ff fe88 	bl	1c9d4 <net_buf_frags_len>
   1ccc4:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
   1ccc8:	1a18      	subs	r0, r3, r0
	if (!len) {
   1ccca:	b998      	cbnz	r0, 1ccf4 <find_type_cb+0xc6>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
   1cccc:	686b      	ldr	r3, [r5, #4]
   1ccce:	7998      	ldrb	r0, [r3, #6]
   1ccd0:	f7f9 ffda 	bl	16c88 <net_buf_pool_get>
   1ccd4:	2200      	movs	r2, #0
   1ccd6:	2300      	movs	r3, #0
   1ccd8:	f001 fc06 	bl	1e4e8 <net_buf_alloc_fixed>
		if (!frag) {
   1ccdc:	4604      	mov	r4, r0
   1ccde:	b928      	cbnz	r0, 1ccec <find_type_cb+0xbe>
		return BT_GATT_ITER_STOP;
   1cce0:	4620      	mov	r0, r4
   1cce2:	e7ce      	b.n	1cc82 <find_type_cb+0x54>
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
   1cce4:	4658      	mov	r0, fp
   1cce6:	f001 fc90 	bl	1e60a <net_buf_simple_tailroom>
   1ccea:	e7ee      	b.n	1ccca <find_type_cb+0x9c>
		net_buf_frag_add(data->buf, frag);
   1ccec:	4601      	mov	r1, r0
   1ccee:	6868      	ldr	r0, [r5, #4]
   1ccf0:	f001 fc3f 	bl	1e572 <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
   1ccf4:	2300      	movs	r3, #0
   1ccf6:	9300      	str	r3, [sp, #0]
   1ccf8:	f8d7 9004 	ldr.w	r9, [r7, #4]
   1ccfc:	4639      	mov	r1, r7
   1ccfe:	2310      	movs	r3, #16
   1cd00:	aa02      	add	r2, sp, #8
   1cd02:	4640      	mov	r0, r8
   1cd04:	47c8      	blx	r9
	if (read < 0) {
   1cd06:	1e07      	subs	r7, r0, #0
   1cd08:	db22      	blt.n	1cd50 <find_type_cb+0x122>
	if (read != data->value_len) {
   1cd0a:	7c2a      	ldrb	r2, [r5, #16]
   1cd0c:	68e8      	ldr	r0, [r5, #12]
   1cd0e:	42ba      	cmp	r2, r7
   1cd10:	d01a      	beq.n	1cd48 <find_type_cb+0x11a>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
   1cd12:	4601      	mov	r1, r0
   1cd14:	a80b      	add	r0, sp, #44	; 0x2c
   1cd16:	f7fe ffb1 	bl	1bc7c <bt_uuid_create>
   1cd1a:	b1c8      	cbz	r0, 1cd50 <find_type_cb+0x122>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
   1cd1c:	b2fa      	uxtb	r2, r7
   1cd1e:	a902      	add	r1, sp, #8
   1cd20:	a806      	add	r0, sp, #24
   1cd22:	f7fe ffab 	bl	1bc7c <bt_uuid_create>
   1cd26:	b198      	cbz	r0, 1cd50 <find_type_cb+0x122>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
   1cd28:	a906      	add	r1, sp, #24
   1cd2a:	a80b      	add	r0, sp, #44	; 0x2c
   1cd2c:	f7fe ff7c 	bl	1bc28 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
   1cd30:	b970      	cbnz	r0, 1cd50 <find_type_cb+0x122>
	data->err = 0x00;
   1cd32:	2300      	movs	r3, #0
   1cd34:	746b      	strb	r3, [r5, #17]
	data->group = net_buf_add(frag, sizeof(*data->group));
   1cd36:	2104      	movs	r1, #4
   1cd38:	f104 0008 	add.w	r0, r4, #8
   1cd3c:	f001 fc2a 	bl	1e594 <net_buf_simple_add>
   1cd40:	60a8      	str	r0, [r5, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
   1cd42:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
   1cd44:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
   1cd46:	e79b      	b.n	1cc80 <find_type_cb+0x52>
	} else if (memcmp(data->value, uuid, read)) {
   1cd48:	a902      	add	r1, sp, #8
   1cd4a:	f7fe fe5e 	bl	1ba0a <memcmp>
   1cd4e:	e7ef      	b.n	1cd30 <find_type_cb+0x102>
	data->group = NULL;
   1cd50:	2300      	movs	r3, #0
   1cd52:	60ab      	str	r3, [r5, #8]
   1cd54:	e794      	b.n	1cc80 <find_type_cb+0x52>

0001cd56 <attr_read_group_cb>:
	if (!data->rsp->len) {
   1cd56:	68d0      	ldr	r0, [r2, #12]
   1cd58:	7803      	ldrb	r3, [r0, #0]
   1cd5a:	3104      	adds	r1, #4
   1cd5c:	b913      	cbnz	r3, 1cd64 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   1cd5e:	7001      	strb	r1, [r0, #0]
	return true;
   1cd60:	2001      	movs	r0, #1
}
   1cd62:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   1cd64:	428b      	cmp	r3, r1
   1cd66:	d0fb      	beq.n	1cd60 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   1cd68:	6891      	ldr	r1, [r2, #8]
   1cd6a:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   1cd6c:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   1cd6e:	3b04      	subs	r3, #4
   1cd70:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   1cd72:	6110      	str	r0, [r2, #16]
		return false;
   1cd74:	4770      	bx	lr

0001cd76 <chan_rsp_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cd76:	30c0      	adds	r0, #192	; 0xc0
   1cd78:	f3bf 8f5b 	dmb	ish
   1cd7c:	e850 3f00 	ldrex	r3, [r0]
   1cd80:	f023 0301 	bic.w	r3, r3, #1
   1cd84:	e840 3200 	strex	r2, r3, [r0]
   1cd88:	2a00      	cmp	r2, #0
   1cd8a:	d1f7      	bne.n	1cd7c <chan_rsp_sent+0x6>
   1cd8c:	f3bf 8f5b 	dmb	ish
}
   1cd90:	4770      	bx	lr

0001cd92 <chan_cfm_sent>:
   1cd92:	30c0      	adds	r0, #192	; 0xc0
   1cd94:	f3bf 8f5b 	dmb	ish
   1cd98:	e850 3f00 	ldrex	r3, [r0]
   1cd9c:	f023 0302 	bic.w	r3, r3, #2
   1cda0:	e840 3200 	strex	r2, r3, [r0]
   1cda4:	2a00      	cmp	r2, #0
   1cda6:	d1f7      	bne.n	1cd98 <chan_cfm_sent+0x6>
   1cda8:	f3bf 8f5b 	dmb	ish
}
   1cdac:	4770      	bx	lr

0001cdae <att_get>:
{
   1cdae:	b508      	push	{r3, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   1cdb0:	7b43      	ldrb	r3, [r0, #13]
   1cdb2:	2b07      	cmp	r3, #7
   1cdb4:	d001      	beq.n	1cdba <att_get+0xc>
		return NULL;
   1cdb6:	2000      	movs	r0, #0
}
   1cdb8:	bd08      	pop	{r3, pc}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
   1cdba:	2104      	movs	r1, #4
   1cdbc:	f7ff fdb9 	bl	1c932 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
   1cdc0:	2800      	cmp	r0, #0
   1cdc2:	d0f8      	beq.n	1cdb6 <att_get+0x8>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1cdc4:	f3bf 8f5b 	dmb	ish
   1cdc8:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   1cdcc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
   1cdd0:	075b      	lsls	r3, r3, #29
   1cdd2:	d4f0      	bmi.n	1cdb6 <att_get+0x8>
	return att_chan->att;
   1cdd4:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1cdd8:	e7ee      	b.n	1cdb8 <att_get+0xa>

0001cdda <write_cb>:
{
   1cdda:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1cddc:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   1cdde:	4601      	mov	r1, r0
{
   1cde0:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   1cde2:	222a      	movs	r2, #42	; 0x2a
   1cde4:	6820      	ldr	r0, [r4, #0]
   1cde6:	f000 fd44 	bl	1d872 <bt_gatt_check_perm>
   1cdea:	4605      	mov	r5, r0
   1cdec:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   1cdee:	bb00      	cbnz	r0, 1ce32 <write_cb+0x58>
	if (!data->req) {
   1cdf0:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   1cdf2:	68b7      	ldr	r7, [r6, #8]
   1cdf4:	68e2      	ldr	r2, [r4, #12]
   1cdf6:	6820      	ldr	r0, [r4, #0]
	if (!data->req) {
   1cdf8:	2b00      	cmp	r3, #0
		flags |= BT_GATT_WRITE_FLAG_CMD;
   1cdfa:	bf14      	ite	ne
   1cdfc:	2300      	movne	r3, #0
   1cdfe:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   1ce00:	9301      	str	r3, [sp, #4]
   1ce02:	8a63      	ldrh	r3, [r4, #18]
   1ce04:	9300      	str	r3, [sp, #0]
   1ce06:	4631      	mov	r1, r6
   1ce08:	8a23      	ldrh	r3, [r4, #16]
   1ce0a:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   1ce0c:	1e03      	subs	r3, r0, #0
   1ce0e:	db05      	blt.n	1ce1c <write_cb+0x42>
   1ce10:	8a22      	ldrh	r2, [r4, #16]
   1ce12:	4293      	cmp	r3, r2
   1ce14:	d10b      	bne.n	1ce2e <write_cb+0x54>
	data->err = 0U;
   1ce16:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   1ce18:	2501      	movs	r5, #1
   1ce1a:	e005      	b.n	1ce28 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   1ce1c:	f113 0fff 	cmn.w	r3, #255	; 0xff
   1ce20:	d305      	bcc.n	1ce2e <write_cb+0x54>
		return -err;
   1ce22:	425b      	negs	r3, r3
   1ce24:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   1ce26:	7523      	strb	r3, [r4, #20]
}
   1ce28:	4628      	mov	r0, r5
   1ce2a:	b003      	add	sp, #12
   1ce2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   1ce2e:	230e      	movs	r3, #14
   1ce30:	e7f9      	b.n	1ce26 <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   1ce32:	2500      	movs	r5, #0
   1ce34:	e7f8      	b.n	1ce28 <write_cb+0x4e>

0001ce36 <read_cb>:
{
   1ce36:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   1ce3a:	f8d2 8000 	ldr.w	r8, [r2]
{
   1ce3e:	4606      	mov	r6, r0
	data->err = 0x00;
   1ce40:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   1ce42:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   1ce46:	7317      	strb	r7, [r2, #12]
{
   1ce48:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   1ce4a:	4631      	mov	r1, r6
   1ce4c:	2215      	movs	r2, #21
   1ce4e:	f000 fd10 	bl	1d872 <bt_gatt_check_perm>
   1ce52:	4604      	mov	r4, r0
   1ce54:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   1ce56:	b9a0      	cbnz	r0, 1ce82 <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   1ce58:	e9cd 0000 	strd	r0, r0, [sp]
   1ce5c:	88ab      	ldrh	r3, [r5, #4]
   1ce5e:	68aa      	ldr	r2, [r5, #8]
   1ce60:	4631      	mov	r1, r6
   1ce62:	4640      	mov	r0, r8
   1ce64:	f7ff fe58 	bl	1cb18 <att_chan_read>
	if (ret < 0) {
   1ce68:	1e03      	subs	r3, r0, #0
   1ce6a:	da0c      	bge.n	1ce86 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   1ce6c:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   1ce70:	bf26      	itte	cs
   1ce72:	425b      	negcs	r3, r3
   1ce74:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   1ce76:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   1ce78:	732b      	strb	r3, [r5, #12]
}
   1ce7a:	4620      	mov	r0, r4
   1ce7c:	b002      	add	sp, #8
   1ce7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   1ce82:	463c      	mov	r4, r7
   1ce84:	e7f9      	b.n	1ce7a <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   1ce86:	2401      	movs	r4, #1
   1ce88:	e7f7      	b.n	1ce7a <read_cb+0x44>

0001ce8a <chan_req_send>:
{
   1ce8a:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ce8c:	690e      	ldr	r6, [r1, #16]
{
   1ce8e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ce90:	4630      	mov	r0, r6
{
   1ce92:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   1ce94:	f7ff fd9e 	bl	1c9d4 <net_buf_frags_len>
   1ce98:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   1ce9c:	4283      	cmp	r3, r0
   1ce9e:	d317      	bcc.n	1ced0 <chan_req_send+0x46>
	chan->req = req;
   1cea0:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	state->offset = net_buf_simple_headroom(buf);
   1cea4:	f106 0008 	add.w	r0, r6, #8
   1cea8:	f001 fbab 	bl	1e602 <net_buf_simple_headroom>
	state->len = buf->len;
   1ceac:	89b3      	ldrh	r3, [r6, #12]
	state->offset = net_buf_simple_headroom(buf);
   1ceae:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
   1ceb0:	81e3      	strh	r3, [r4, #14]
	err = chan_send(chan, net_buf_ref(req->buf), NULL);
   1ceb2:	6920      	ldr	r0, [r4, #16]
   1ceb4:	f001 fb48 	bl	1e548 <net_buf_ref>
   1ceb8:	2200      	movs	r2, #0
   1ceba:	4601      	mov	r1, r0
   1cebc:	4628      	mov	r0, r5
   1cebe:	f7eb fc3d 	bl	873c <chan_send>
	if (err) {
   1cec2:	4605      	mov	r5, r0
   1cec4:	b110      	cbz	r0, 1cecc <chan_req_send+0x42>
		net_buf_unref(req->buf);
   1cec6:	6920      	ldr	r0, [r4, #16]
   1cec8:	f7f9 ff9a 	bl	16e00 <net_buf_unref>
}
   1cecc:	4628      	mov	r0, r5
   1cece:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   1ced0:	f06f 0523 	mvn.w	r5, #35	; 0x23
   1ced4:	e7fa      	b.n	1cecc <chan_req_send+0x42>

0001ced6 <bt_att_chan_req_send>:
{
   1ced6:	b570      	push	{r4, r5, r6, lr}
   1ced8:	4604      	mov	r4, r0
   1ceda:	460d      	mov	r5, r1
	if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1cedc:	f500 7688 	add.w	r6, r0, #272	; 0x110
	return z_impl_k_sem_take(sem, timeout);
   1cee0:	2200      	movs	r2, #0
   1cee2:	2300      	movs	r3, #0
   1cee4:	4630      	mov	r0, r6
   1cee6:	f7fc fa79 	bl	193dc <z_impl_k_sem_take>
   1ceea:	2800      	cmp	r0, #0
   1ceec:	db0a      	blt.n	1cf04 <bt_att_chan_req_send+0x2e>
	err = chan_req_send(chan, req);
   1ceee:	4620      	mov	r0, r4
   1cef0:	4629      	mov	r1, r5
   1cef2:	f7ff ffca 	bl	1ce8a <chan_req_send>
	if (err < 0) {
   1cef6:	1e04      	subs	r4, r0, #0
   1cef8:	da02      	bge.n	1cf00 <bt_att_chan_req_send+0x2a>
	z_impl_k_sem_give(sem);
   1cefa:	4630      	mov	r0, r6
   1cefc:	f7fc fa48 	bl	19390 <z_impl_k_sem_give>
}
   1cf00:	4620      	mov	r0, r4
   1cf02:	bd70      	pop	{r4, r5, r6, pc}
		return -EAGAIN;
   1cf04:	f06f 040a 	mvn.w	r4, #10
   1cf08:	e7fa      	b.n	1cf00 <bt_att_chan_req_send+0x2a>

0001cf0a <bt_att_status>:
{
   1cf0a:	b538      	push	{r3, r4, r5, lr}
   1cf0c:	f3bf 8f5b 	dmb	ish
   1cf10:	680b      	ldr	r3, [r1, #0]
   1cf12:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1cf16:	07db      	lsls	r3, r3, #31
{
   1cf18:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   1cf1a:	d518      	bpl.n	1cf4e <bt_att_status+0x44>
	if (chan->req) {
   1cf1c:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   1cf20:	b9ab      	cbnz	r3, 1cf4e <bt_att_status+0x44>
	node = sys_slist_get(&chan->att->reqs);
   1cf22:	f850 0c08 	ldr.w	r0, [r0, #-8]
   1cf26:	3004      	adds	r0, #4
   1cf28:	f7ff fd2f 	bl	1c98a <sys_slist_get>
	if (!node) {
   1cf2c:	4604      	mov	r4, r0
   1cf2e:	b170      	cbz	r0, 1cf4e <bt_att_status+0x44>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1cf30:	4601      	mov	r1, r0
   1cf32:	f1a5 0008 	sub.w	r0, r5, #8
   1cf36:	f7ff ffce 	bl	1ced6 <bt_att_chan_req_send>
   1cf3a:	2800      	cmp	r0, #0
   1cf3c:	da07      	bge.n	1cf4e <bt_att_status+0x44>
	sys_slist_prepend(&chan->att->reqs, node);
   1cf3e:	f855 3c08 	ldr.w	r3, [r5, #-8]
Z_GENLIST_PREPEND(slist, snode)
   1cf42:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1cf44:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   1cf46:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   1cf48:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1cf4a:	b902      	cbnz	r2, 1cf4e <bt_att_status+0x44>
	list->tail = node;
   1cf4c:	609c      	str	r4, [r3, #8]
}
   1cf4e:	bd38      	pop	{r3, r4, r5, pc}

0001cf50 <bt_att_chan_send>:
{
   1cf50:	b570      	push	{r4, r5, r6, lr}
   1cf52:	4604      	mov	r4, r0
   1cf54:	460e      	mov	r6, r1
	if (!cb) {
   1cf56:	4615      	mov	r5, r2
   1cf58:	b132      	cbz	r2, 1cf68 <bt_att_chan_send+0x18>
	return chan_send(chan, buf, cb);
   1cf5a:	462a      	mov	r2, r5
   1cf5c:	4631      	mov	r1, r6
   1cf5e:	4620      	mov	r0, r4
}
   1cf60:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return chan_send(chan, buf, cb);
   1cf64:	f7eb bbea 	b.w	873c <chan_send>
	return z_impl_k_sem_take(sem, timeout);
   1cf68:	2200      	movs	r2, #0
   1cf6a:	2300      	movs	r3, #0
   1cf6c:	f500 7088 	add.w	r0, r0, #272	; 0x110
   1cf70:	f7fc fa34 	bl	193dc <z_impl_k_sem_take>
		if (k_sem_take(&chan->tx_sem, K_NO_WAIT) < 0) {
   1cf74:	2800      	cmp	r0, #0
   1cf76:	daf0      	bge.n	1cf5a <bt_att_chan_send+0xa>
}
   1cf78:	f06f 000a 	mvn.w	r0, #10
   1cf7c:	bd70      	pop	{r4, r5, r6, pc}

0001cf7e <bt_att_chan_send_rsp>:
{
   1cf7e:	b538      	push	{r3, r4, r5, lr}
   1cf80:	4604      	mov	r4, r0
   1cf82:	460d      	mov	r5, r1
	err = bt_att_chan_send(chan, buf, cb);
   1cf84:	f7ff ffe4 	bl	1cf50 <bt_att_chan_send>
	if (err) {
   1cf88:	b130      	cbz	r0, 1cf98 <bt_att_chan_send_rsp+0x1a>
		net_buf_put(&chan->tx_queue, buf);
   1cf8a:	4629      	mov	r1, r5
   1cf8c:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
   1cf90:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
   1cf94:	f001 bacb 	b.w	1e52e <net_buf_put>
}
   1cf98:	bd38      	pop	{r3, r4, r5, pc}

0001cf9a <process_queue>:
{
   1cf9a:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   1cf9c:	2200      	movs	r2, #0
{
   1cf9e:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   1cfa0:	2300      	movs	r3, #0
   1cfa2:	4608      	mov	r0, r1
{
   1cfa4:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   1cfa6:	f001 faa4 	bl	1e4f2 <net_buf_get>
	if (buf) {
   1cfaa:	4605      	mov	r5, r0
   1cfac:	b160      	cbz	r0, 1cfc8 <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   1cfae:	4601      	mov	r1, r0
   1cfb0:	2200      	movs	r2, #0
   1cfb2:	4620      	mov	r0, r4
   1cfb4:	f7eb fbc2 	bl	873c <chan_send>
		if (err) {
   1cfb8:	4604      	mov	r4, r0
   1cfba:	b118      	cbz	r0, 1cfc4 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   1cfbc:	4629      	mov	r1, r5
   1cfbe:	4630      	mov	r0, r6
   1cfc0:	f001 fe49 	bl	1ec56 <k_queue_prepend>
}
   1cfc4:	4620      	mov	r0, r4
   1cfc6:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   1cfc8:	f06f 0401 	mvn.w	r4, #1
   1cfcc:	e7fa      	b.n	1cfc4 <process_queue+0x2a>

0001cfce <bt_att_sent>:
{
   1cfce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   1cfd0:	f8d0 3120 	ldr.w	r3, [r0, #288]	; 0x120
	struct bt_att *att = chan->att;
   1cfd4:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
   1cfd8:	4604      	mov	r4, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   1cfda:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   1cfde:	b10b      	cbz	r3, 1cfe4 <bt_att_sent+0x16>
		chan->sent(chan);
   1cfe0:	4638      	mov	r0, r7
   1cfe2:	4798      	blx	r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1cfe4:	f3bf 8f5b 	dmb	ish
   1cfe8:	f104 03b8 	add.w	r3, r4, #184	; 0xb8
   1cfec:	e853 2f00 	ldrex	r2, [r3]
   1cff0:	f022 0210 	bic.w	r2, r2, #16
   1cff4:	e843 2100 	strex	r1, r2, [r3]
   1cff8:	2900      	cmp	r1, #0
   1cffa:	d1f7      	bne.n	1cfec <bt_att_sent+0x1e>
   1cffc:	f3bf 8f5b 	dmb	ish
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   1d000:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
   1d004:	b98b      	cbnz	r3, 1d02a <bt_att_sent+0x5c>
   1d006:	686b      	ldr	r3, [r5, #4]
   1d008:	b17b      	cbz	r3, 1d02a <bt_att_sent+0x5c>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1d00a:	1d28      	adds	r0, r5, #4
   1d00c:	f7ff fcbd 	bl	1c98a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d010:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   1d012:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   1d014:	4638      	mov	r0, r7
   1d016:	f7ff ff38 	bl	1ce8a <chan_req_send>
   1d01a:	2800      	cmp	r0, #0
   1d01c:	da17      	bge.n	1d04e <bt_att_sent+0x80>
Z_GENLIST_PREPEND(slist, snode)
   1d01e:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
   1d020:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   1d022:	68ab      	ldr	r3, [r5, #8]
	list->head = node;
   1d024:	606e      	str	r6, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
   1d026:	b903      	cbnz	r3, 1d02a <bt_att_sent+0x5c>
	list->tail = node;
   1d028:	60ae      	str	r6, [r5, #8]
	err = process_queue(chan, &chan->tx_queue);
   1d02a:	f104 01c0 	add.w	r1, r4, #192	; 0xc0
   1d02e:	4638      	mov	r0, r7
   1d030:	f7ff ffb3 	bl	1cf9a <process_queue>
	if (!err) {
   1d034:	b158      	cbz	r0, 1d04e <bt_att_sent+0x80>
	err = process_queue(chan, &att->tx_queue);
   1d036:	f105 010c 	add.w	r1, r5, #12
   1d03a:	4638      	mov	r0, r7
   1d03c:	f7ff ffad 	bl	1cf9a <process_queue>
	if (!err) {
   1d040:	b128      	cbz	r0, 1d04e <bt_att_sent+0x80>
	z_impl_k_sem_give(sem);
   1d042:	f504 7084 	add.w	r0, r4, #264	; 0x108
}
   1d046:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1d04a:	f7fc b9a1 	b.w	19390 <z_impl_k_sem_give>
   1d04e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001d050 <bt_att_chan_create_pdu>:
{
   1d050:	b538      	push	{r3, r4, r5, lr}
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d052:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
   1d056:	3201      	adds	r2, #1
   1d058:	429a      	cmp	r2, r3
{
   1d05a:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d05c:	d81b      	bhi.n	1d096 <bt_att_chan_create_pdu+0x46>
	switch (att_op_get_type(op)) {
   1d05e:	4608      	mov	r0, r1
   1d060:	f7ff fcd6 	bl	1ca10 <att_op_get_type>
   1d064:	2802      	cmp	r0, #2
   1d066:	d001      	beq.n	1d06c <bt_att_chan_create_pdu+0x1c>
   1d068:	2804      	cmp	r0, #4
   1d06a:	d10f      	bne.n	1d08c <bt_att_chan_create_pdu+0x3c>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
   1d06c:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1d070:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
   1d072:	2100      	movs	r1, #0
   1d074:	4608      	mov	r0, r1
   1d076:	f7ff fc03 	bl	1c880 <bt_l2cap_create_pdu_timeout>
   1d07a:	4604      	mov	r4, r0
	if (!buf) {
   1d07c:	b120      	cbz	r0, 1d088 <bt_att_chan_create_pdu+0x38>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1d07e:	2101      	movs	r1, #1
   1d080:	3008      	adds	r0, #8
   1d082:	f001 fa87 	bl	1e594 <net_buf_simple_add>
	hdr->code = op;
   1d086:	7005      	strb	r5, [r0, #0]
}
   1d088:	4620      	mov	r0, r4
   1d08a:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_l2cap_create_pdu(NULL, 0);
   1d08c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1d094:	e7ed      	b.n	1d072 <bt_att_chan_create_pdu+0x22>
		return NULL;
   1d096:	2400      	movs	r4, #0
   1d098:	e7f6      	b.n	1d088 <bt_att_chan_create_pdu+0x38>

0001d09a <att_signed_write_cmd>:
{
   1d09a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
   1d09e:	4688      	mov	r8, r1
	struct bt_conn *conn = chan->chan.chan.conn;
   1d0a0:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(req->handle);
   1d0a2:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
   1d0a6:	460c      	mov	r4, r1
   1d0a8:	4606      	mov	r6, r0
	net_buf_push(buf, sizeof(struct bt_att_hdr));
   1d0aa:	2101      	movs	r1, #1
   1d0ac:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
   1d0ae:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
   1d0b0:	f001 fa87 	bl	1e5c2 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
   1d0b4:	4628      	mov	r0, r5
   1d0b6:	4621      	mov	r1, r4
   1d0b8:	f001 f8ba 	bl	1e230 <bt_smp_sign_verify>
	if (err) {
   1d0bc:	4605      	mov	r5, r0
   1d0be:	b9b8      	cbnz	r0, 1d0f0 <att_signed_write_cmd+0x56>
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
   1d0c0:	2101      	movs	r1, #1
   1d0c2:	4640      	mov	r0, r8
   1d0c4:	f001 fa85 	bl	1e5d2 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
   1d0c8:	2102      	movs	r1, #2
   1d0ca:	4640      	mov	r0, r8
   1d0cc:	f001 fa81 	bl	1e5d2 <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
   1d0d0:	89a3      	ldrh	r3, [r4, #12]
   1d0d2:	3b0c      	subs	r3, #12
   1d0d4:	b29b      	uxth	r3, r3
   1d0d6:	9302      	str	r3, [sp, #8]
   1d0d8:	68a3      	ldr	r3, [r4, #8]
   1d0da:	462a      	mov	r2, r5
   1d0dc:	e9cd 5300 	strd	r5, r3, [sp]
   1d0e0:	4629      	mov	r1, r5
   1d0e2:	463b      	mov	r3, r7
   1d0e4:	4630      	mov	r0, r6
   1d0e6:	f7eb fc1b 	bl	8920 <att_write_rsp>
}
   1d0ea:	b004      	add	sp, #16
   1d0ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 0;
   1d0f0:	2000      	movs	r0, #0
   1d0f2:	e7fa      	b.n	1d0ea <att_signed_write_cmd+0x50>

0001d0f4 <att_write_cmd>:
{
   1d0f4:	b530      	push	{r4, r5, lr}
   1d0f6:	460c      	mov	r4, r1
   1d0f8:	b085      	sub	sp, #20
   1d0fa:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   1d0fc:	f101 0008 	add.w	r0, r1, #8
   1d100:	f001 fa77 	bl	1e5f2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1d104:	89a2      	ldrh	r2, [r4, #12]
   1d106:	9202      	str	r2, [sp, #8]
   1d108:	68a2      	ldr	r2, [r4, #8]
   1d10a:	9201      	str	r2, [sp, #4]
   1d10c:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1d10e:	4603      	mov	r3, r0
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   1d110:	9200      	str	r2, [sp, #0]
   1d112:	4611      	mov	r1, r2
   1d114:	4628      	mov	r0, r5
   1d116:	f7eb fc03 	bl	8920 <att_write_rsp>
}
   1d11a:	b005      	add	sp, #20
   1d11c:	bd30      	pop	{r4, r5, pc}

0001d11e <att_write_req>:
{
   1d11e:	b530      	push	{r4, r5, lr}
   1d120:	460c      	mov	r4, r1
   1d122:	b085      	sub	sp, #20
   1d124:	4605      	mov	r5, r0
	handle = net_buf_pull_le16(buf);
   1d126:	f101 0008 	add.w	r0, r1, #8
   1d12a:	f001 fa62 	bl	1e5f2 <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1d12e:	89a2      	ldrh	r2, [r4, #12]
   1d130:	9202      	str	r2, [sp, #8]
   1d132:	68a2      	ldr	r2, [r4, #8]
   1d134:	9201      	str	r2, [sp, #4]
   1d136:	2200      	movs	r2, #0
	handle = net_buf_pull_le16(buf);
   1d138:	4603      	mov	r3, r0
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   1d13a:	9200      	str	r2, [sp, #0]
   1d13c:	2112      	movs	r1, #18
   1d13e:	2213      	movs	r2, #19
   1d140:	4628      	mov	r0, r5
   1d142:	f7eb fbed 	bl	8920 <att_write_rsp>
}
   1d146:	b005      	add	sp, #20
   1d148:	bd30      	pop	{r4, r5, pc}

0001d14a <bt_att_create_pdu>:
{
   1d14a:	b570      	push	{r4, r5, r6, lr}
   1d14c:	460e      	mov	r6, r1
   1d14e:	4615      	mov	r5, r2
	att = att_get(conn);
   1d150:	f7ff fe2d 	bl	1cdae <att_get>
	if (!att) {
   1d154:	b170      	cbz	r0, 1d174 <bt_att_create_pdu+0x2a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d156:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d158:	b163      	cbz	r3, 1d174 <bt_att_create_pdu+0x2a>
   1d15a:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1d15e:	d009      	beq.n	1d174 <bt_att_create_pdu+0x2a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d160:	681b      	ldr	r3, [r3, #0]
   1d162:	b10b      	cbz	r3, 1d168 <bt_att_create_pdu+0x1e>
   1d164:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
		if (len + sizeof(op) > chan->chan.tx.mtu) {
   1d168:	1c6a      	adds	r2, r5, #1
   1d16a:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
   1d16e:	428a      	cmp	r2, r1
   1d170:	d902      	bls.n	1d178 <bt_att_create_pdu+0x2e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d172:	b93b      	cbnz	r3, 1d184 <bt_att_create_pdu+0x3a>
}
   1d174:	2000      	movs	r0, #0
   1d176:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
   1d178:	462a      	mov	r2, r5
   1d17a:	4631      	mov	r1, r6
}
   1d17c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
   1d180:	f7ff bf66 	b.w	1d050 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d184:	f513 7496 	adds.w	r4, r3, #300	; 0x12c
   1d188:	d004      	beq.n	1d194 <bt_att_create_pdu+0x4a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d18a:	f8d3 412c 	ldr.w	r4, [r3, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d18e:	b10c      	cbz	r4, 1d194 <bt_att_create_pdu+0x4a>
   1d190:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
{
   1d194:	4618      	mov	r0, r3
   1d196:	4623      	mov	r3, r4
   1d198:	e7e7      	b.n	1d16a <bt_att_create_pdu+0x20>

0001d19a <att_read_blob_req>:
{
   1d19a:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   1d19c:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   1d19e:	8813      	ldrh	r3, [r2, #0]
   1d1a0:	8852      	ldrh	r2, [r2, #2]
   1d1a2:	9200      	str	r2, [sp, #0]
   1d1a4:	210c      	movs	r1, #12
   1d1a6:	220d      	movs	r2, #13
   1d1a8:	f7eb fda0 	bl	8cec <att_read_rsp>
}
   1d1ac:	b003      	add	sp, #12
   1d1ae:	f85d fb04 	ldr.w	pc, [sp], #4

0001d1b2 <att_read_req>:
{
   1d1b2:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   1d1b4:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   1d1b6:	2200      	movs	r2, #0
   1d1b8:	881b      	ldrh	r3, [r3, #0]
   1d1ba:	9200      	str	r2, [sp, #0]
   1d1bc:	210a      	movs	r1, #10
   1d1be:	220b      	movs	r2, #11
   1d1c0:	f7eb fd94 	bl	8cec <att_read_rsp>
}
   1d1c4:	b003      	add	sp, #12
   1d1c6:	f85d fb04 	ldr.w	pc, [sp], #4

0001d1ca <bt_att_init>:
	bt_gatt_init();
   1d1ca:	f7ec ba4f 	b.w	966c <bt_gatt_init>

0001d1ce <att_req_destroy>:
{
   1d1ce:	b510      	push	{r4, lr}
   1d1d0:	4604      	mov	r4, r0
	if (req->buf) {
   1d1d2:	6900      	ldr	r0, [r0, #16]
   1d1d4:	b108      	cbz	r0, 1d1da <att_req_destroy+0xc>
		net_buf_unref(req->buf);
   1d1d6:	f7f9 fe13 	bl	16e00 <net_buf_unref>
	if (req->destroy) {
   1d1da:	68a3      	ldr	r3, [r4, #8]
   1d1dc:	b10b      	cbz	r3, 1d1e2 <att_req_destroy+0x14>
		req->destroy(req);
   1d1de:	4620      	mov	r0, r4
   1d1e0:	4798      	blx	r3
	bt_att_req_free(req);
   1d1e2:	4620      	mov	r0, r4
}
   1d1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_req_free(req);
   1d1e8:	f7eb bf24 	b.w	9034 <bt_att_req_free>

0001d1ec <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   1d1ec:	898a      	ldrh	r2, [r1, #12]
   1d1ee:	6889      	ldr	r1, [r1, #8]
   1d1f0:	2300      	movs	r3, #0
   1d1f2:	f7eb bf2b 	b.w	904c <att_handle_rsp>

0001d1f6 <att_chan_detach>:
{
   1d1f6:	b538      	push	{r3, r4, r5, lr}
   1d1f8:	4604      	mov	r4, r0
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
   1d1fa:	6800      	ldr	r0, [r0, #0]
   1d1fc:	f504 7196 	add.w	r1, r4, #300	; 0x12c
   1d200:	303c      	adds	r0, #60	; 0x3c
   1d202:	f7ff fbcc 	bl	1c99e <sys_slist_find_and_remove>
		k_sem_give(&chan->tx_sem);
   1d206:	f504 7588 	add.w	r5, r4, #272	; 0x110
   1d20a:	4628      	mov	r0, r5
   1d20c:	f7fc f8c0 	bl	19390 <z_impl_k_sem_give>
   1d210:	4628      	mov	r0, r5
   1d212:	f7fc f8bd 	bl	19390 <z_impl_k_sem_give>
   1d216:	4628      	mov	r0, r5
   1d218:	f7fc f8ba 	bl	19390 <z_impl_k_sem_give>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
   1d21c:	f104 05c8 	add.w	r5, r4, #200	; 0xc8
   1d220:	2200      	movs	r2, #0
   1d222:	2300      	movs	r3, #0
   1d224:	4628      	mov	r0, r5
   1d226:	f001 f964 	bl	1e4f2 <net_buf_get>
   1d22a:	4602      	mov	r2, r0
   1d22c:	b950      	cbnz	r0, 1d244 <att_chan_detach+0x4e>
	if (chan->req) {
   1d22e:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   1d232:	b123      	cbz	r3, 1d23e <att_chan_detach+0x48>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
   1d234:	4601      	mov	r1, r0
   1d236:	230e      	movs	r3, #14
   1d238:	4620      	mov	r0, r4
   1d23a:	f7eb ff07 	bl	904c <att_handle_rsp>
	chan->att = NULL;
   1d23e:	2300      	movs	r3, #0
   1d240:	6023      	str	r3, [r4, #0]
}
   1d242:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_unref(buf);
   1d244:	f7f9 fddc 	bl	16e00 <net_buf_unref>
   1d248:	e7ea      	b.n	1d220 <att_chan_detach+0x2a>

0001d24a <bt_att_disconnected>:
{
   1d24a:	b538      	push	{r3, r4, r5, lr}
   1d24c:	4604      	mov	r4, r0
	struct bt_att *att = att_chan->att;
   1d24e:	f850 5d08 	ldr.w	r5, [r0, #-8]!
	att_chan_detach(att_chan);
   1d252:	f7ff ffd0 	bl	1d1f6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1d256:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   1d258:	b93b      	cbnz	r3, 1d26a <bt_att_disconnected+0x20>
	att_reset(att);
   1d25a:	4628      	mov	r0, r5
   1d25c:	f7eb ff94 	bl	9188 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1d260:	6820      	ldr	r0, [r4, #0]
}
   1d262:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_gatt_disconnected(ch->chan.conn);
   1d266:	f7ec bdf7 	b.w	9e58 <bt_gatt_disconnected>
}
   1d26a:	bd38      	pop	{r3, r4, r5, pc}

0001d26c <att_timeout>:
{
   1d26c:	b570      	push	{r4, r5, r6, lr}
   1d26e:	4604      	mov	r4, r0
	struct bt_att *att = chan->att;
   1d270:	f850 6de0 	ldr.w	r6, [r0, #-224]!
	att_chan_detach(chan);
   1d274:	f7ff ffbf 	bl	1d1f6 <att_chan_detach>
	if (!sys_slist_is_empty(&att->chans)) {
   1d278:	6bf5      	ldr	r5, [r6, #60]	; 0x3c
   1d27a:	b945      	cbnz	r5, 1d28e <att_timeout+0x22>
	att_reset(att);
   1d27c:	4630      	mov	r0, r6
   1d27e:	f7eb ff83 	bl	9188 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
   1d282:	f854 0cd8 	ldr.w	r0, [r4, #-216]
   1d286:	f7ec fde7 	bl	9e58 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
   1d28a:	f844 5cd8 	str.w	r5, [r4, #-216]
}
   1d28e:	bd70      	pop	{r4, r5, r6, pc}

0001d290 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   1d290:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d294:	4605      	mov	r5, r0
   1d296:	460e      	mov	r6, r1
   1d298:	4614      	mov	r4, r2
   1d29a:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   1d29c:	f7ff fd87 	bl	1cdae <att_get>
	if (!att) {
   1d2a0:	4607      	mov	r7, r0
   1d2a2:	b938      	cbnz	r0, 1d2b4 <bt_att_send+0x24>
		net_buf_unref(buf);
   1d2a4:	4630      	mov	r0, r6
   1d2a6:	f7f9 fdab 	bl	16e00 <net_buf_unref>
		return -ENOTCONN;
   1d2aa:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   1d2ae:	b002      	add	sp, #8
   1d2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   1d2b4:	b144      	cbz	r4, 1d2c8 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   1d2b6:	f8cd 8000 	str.w	r8, [sp]
   1d2ba:	4623      	mov	r3, r4
   1d2bc:	4632      	mov	r2, r6
   1d2be:	2104      	movs	r1, #4
   1d2c0:	4628      	mov	r0, r5
   1d2c2:	f7ff fae0 	bl	1c886 <bt_l2cap_send_cb>
   1d2c6:	e7f2      	b.n	1d2ae <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d2c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
   1d2ca:	b184      	cbz	r4, 1d2ee <bt_att_send+0x5e>
   1d2cc:	f5b4 7596 	subs.w	r5, r4, #300	; 0x12c
   1d2d0:	d00f      	beq.n	1d2f2 <bt_att_send+0x62>
   1d2d2:	6824      	ldr	r4, [r4, #0]
   1d2d4:	b10c      	cbz	r4, 1d2da <bt_att_send+0x4a>
   1d2d6:	f5a4 7496 	sub.w	r4, r4, #300	; 0x12c
   1d2da:	2000      	movs	r0, #0
   1d2dc:	b95d      	cbnz	r5, 1d2f6 <bt_att_send+0x66>
	if (ret < 0) {
   1d2de:	b188      	cbz	r0, 1d304 <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   1d2e0:	f107 000c 	add.w	r0, r7, #12
   1d2e4:	4631      	mov	r1, r6
   1d2e6:	f001 f922 	bl	1e52e <net_buf_put>
	return 0;
   1d2ea:	4628      	mov	r0, r5
   1d2ec:	e7df      	b.n	1d2ae <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d2ee:	4625      	mov	r5, r4
   1d2f0:	e7f3      	b.n	1d2da <bt_att_send+0x4a>
   1d2f2:	462c      	mov	r4, r5
   1d2f4:	e7f1      	b.n	1d2da <bt_att_send+0x4a>
		ret = bt_att_chan_send(chan, buf, NULL);
   1d2f6:	2200      	movs	r2, #0
   1d2f8:	4631      	mov	r1, r6
   1d2fa:	4628      	mov	r0, r5
   1d2fc:	f7ff fe28 	bl	1cf50 <bt_att_chan_send>
		if (ret >= 0) {
   1d300:	2800      	cmp	r0, #0
   1d302:	db01      	blt.n	1d308 <bt_att_send+0x78>
	return 0;
   1d304:	2000      	movs	r0, #0
   1d306:	e7d2      	b.n	1d2ae <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d308:	b154      	cbz	r4, 1d320 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d30a:	f514 7396 	adds.w	r3, r4, #300	; 0x12c
   1d30e:	d004      	beq.n	1d31a <bt_att_send+0x8a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d310:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
   1d314:	b10b      	cbz	r3, 1d31a <bt_att_send+0x8a>
   1d316:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
   1d31a:	4625      	mov	r5, r4
   1d31c:	461c      	mov	r4, r3
   1d31e:	e7dd      	b.n	1d2dc <bt_att_send+0x4c>
   1d320:	4623      	mov	r3, r4
   1d322:	e7fa      	b.n	1d31a <bt_att_send+0x8a>

0001d324 <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   1d324:	b570      	push	{r4, r5, r6, lr}
   1d326:	460c      	mov	r4, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   1d328:	f7ff fd41 	bl	1cdae <att_get>
	if (!att) {
   1d32c:	4605      	mov	r5, r0
   1d32e:	b930      	cbnz	r0, 1d33e <bt_att_req_send+0x1a>
		net_buf_unref(req->buf);
   1d330:	6920      	ldr	r0, [r4, #16]
   1d332:	f7f9 fd65 	bl	16e00 <net_buf_unref>
		req->buf = NULL;
   1d336:	6125      	str	r5, [r4, #16]
		return -ENOTCONN;
   1d338:	f06f 0038 	mvn.w	r0, #56	; 0x38
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
}
   1d33c:	bd70      	pop	{r4, r5, r6, pc}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d33e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d340:	b153      	cbz	r3, 1d358 <bt_att_req_send+0x34>
   1d342:	f5b3 7096 	subs.w	r0, r3, #300	; 0x12c
   1d346:	d007      	beq.n	1d358 <bt_att_req_send+0x34>
   1d348:	681e      	ldr	r6, [r3, #0]
   1d34a:	b10e      	cbz	r6, 1d350 <bt_att_req_send+0x2c>
   1d34c:	f5a6 7696 	sub.w	r6, r6, #300	; 0x12c
		if (!chan->req) {
   1d350:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   1d354:	b143      	cbz	r3, 1d368 <bt_att_req_send+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d356:	b96e      	cbnz	r6, 1d374 <bt_att_req_send+0x50>
	parent->next = child;
   1d358:	2000      	movs	r0, #0
   1d35a:	6020      	str	r0, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
   1d35c:	68ab      	ldr	r3, [r5, #8]
   1d35e:	b9a3      	cbnz	r3, 1d38a <bt_att_req_send+0x66>
	list->head = node;
   1d360:	e9c5 4401 	strd	r4, r4, [r5, #4]
	return 0;
   1d364:	4618      	mov	r0, r3
}
   1d366:	e7e9      	b.n	1d33c <bt_att_req_send+0x18>
			ret = bt_att_chan_req_send(chan, req);
   1d368:	4621      	mov	r1, r4
   1d36a:	f7ff fdb4 	bl	1ced6 <bt_att_chan_req_send>
			if (ret >= 0) {
   1d36e:	2800      	cmp	r0, #0
   1d370:	dbf1      	blt.n	1d356 <bt_att_req_send+0x32>
   1d372:	e7e3      	b.n	1d33c <bt_att_req_send+0x18>
Z_GENLIST_PEEK_NEXT(slist, snode)
   1d374:	f516 7396 	adds.w	r3, r6, #300	; 0x12c
   1d378:	d004      	beq.n	1d384 <bt_att_req_send+0x60>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1d37a:	f8d6 312c 	ldr.w	r3, [r6, #300]	; 0x12c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   1d37e:	b10b      	cbz	r3, 1d384 <bt_att_req_send+0x60>
   1d380:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
{
   1d384:	4630      	mov	r0, r6
   1d386:	461e      	mov	r6, r3
   1d388:	e7e2      	b.n	1d350 <bt_att_req_send+0x2c>
	parent->next = child;
   1d38a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1d38c:	60ac      	str	r4, [r5, #8]
}
   1d38e:	e7d5      	b.n	1d33c <bt_att_req_send+0x18>

0001d390 <found_attr>:
	*found = attr;
   1d390:	6010      	str	r0, [r2, #0]
}
   1d392:	2000      	movs	r0, #0
   1d394:	4770      	bx	lr

0001d396 <gatt_ccc_changed>:
{
   1d396:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   1d398:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   1d39a:	895a      	ldrh	r2, [r3, #10]
   1d39c:	428a      	cmp	r2, r1
   1d39e:	d003      	beq.n	1d3a8 <gatt_ccc_changed+0x12>
		ccc->value = value;
   1d3a0:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   1d3a2:	68db      	ldr	r3, [r3, #12]
   1d3a4:	b103      	cbz	r3, 1d3a8 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   1d3a6:	4718      	bx	r3
}
   1d3a8:	4770      	bx	lr

0001d3aa <gatt_indicate_rsp>:
{
   1d3aa:	b410      	push	{r4}
   1d3ac:	9b01      	ldr	r3, [sp, #4]
   1d3ae:	460a      	mov	r2, r1
	params->func(conn, params->attr, err);
   1d3b0:	e9d3 1401 	ldrd	r1, r4, [r3, #4]
   1d3b4:	4623      	mov	r3, r4
}
   1d3b6:	bc10      	pop	{r4}
	params->func(conn, params->attr, err);
   1d3b8:	4718      	bx	r3

0001d3ba <match_uuid>:
	data->attr = attr;
   1d3ba:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   1d3bc:	8091      	strh	r1, [r2, #4]
}
   1d3be:	2000      	movs	r0, #0
   1d3c0:	4770      	bx	lr

0001d3c2 <sc_restore_rsp>:
}
   1d3c2:	4770      	bx	lr

0001d3c4 <ccc_set>:
}
   1d3c4:	2000      	movs	r0, #0
   1d3c6:	4770      	bx	lr

0001d3c8 <gatt_notify>:
{
   1d3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1d3cc:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
   1d3ce:	8992      	ldrh	r2, [r2, #12]
{
   1d3d0:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d3d2:	3202      	adds	r2, #2
   1d3d4:	211b      	movs	r1, #27
{
   1d3d6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
   1d3d8:	f7ff feb7 	bl	1d14a <bt_att_create_pdu>
	if (!buf) {
   1d3dc:	4605      	mov	r5, r0
   1d3de:	b1c8      	cbz	r0, 1d414 <gatt_notify+0x4c>
	nfy = net_buf_add(buf, sizeof(*nfy));
   1d3e0:	f100 0908 	add.w	r9, r0, #8
   1d3e4:	2102      	movs	r1, #2
   1d3e6:	4648      	mov	r0, r9
   1d3e8:	f001 f8d4 	bl	1e594 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
   1d3ec:	4606      	mov	r6, r0
	net_buf_add(buf, params->len);
   1d3ee:	89a1      	ldrh	r1, [r4, #12]
	nfy->handle = sys_cpu_to_le16(handle);
   1d3f0:	f826 8b02 	strh.w	r8, [r6], #2
	net_buf_add(buf, params->len);
   1d3f4:	4648      	mov	r0, r9
   1d3f6:	f001 f8cd 	bl	1e594 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
   1d3fa:	89a2      	ldrh	r2, [r4, #12]
   1d3fc:	68a1      	ldr	r1, [r4, #8]
   1d3fe:	4630      	mov	r0, r6
   1d400:	f7fe fb13 	bl	1ba2a <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
   1d404:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
   1d408:	4629      	mov	r1, r5
   1d40a:	4638      	mov	r0, r7
}
   1d40c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
   1d410:	f7ff bf3e 	b.w	1d290 <bt_att_send>
}
   1d414:	f06f 000b 	mvn.w	r0, #11
   1d418:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0001d41c <find_ccc_cfg>:
{
   1d41c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1d41e:	460c      	mov	r4, r1
   1d420:	1c4d      	adds	r5, r1, #1
		if (conn) {
   1d422:	b148      	cbz	r0, 1d438 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   1d424:	7809      	ldrb	r1, [r1, #0]
   1d426:	462a      	mov	r2, r5
   1d428:	f7ff f911 	bl	1c64e <bt_conn_is_peer_addr_le>
   1d42c:	2800      	cmp	r0, #0
	return NULL;
   1d42e:	bf08      	it	eq
   1d430:	2400      	moveq	r4, #0
}
   1d432:	4620      	mov	r0, r4
   1d434:	b003      	add	sp, #12
   1d436:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   1d438:	9000      	str	r0, [sp, #0]
   1d43a:	2207      	movs	r2, #7
   1d43c:	f8cd 0003 	str.w	r0, [sp, #3]
   1d440:	4669      	mov	r1, sp
   1d442:	4628      	mov	r0, r5
   1d444:	f7fe fae1 	bl	1ba0a <memcmp>
   1d448:	2800      	cmp	r0, #0
	return NULL;
   1d44a:	bf18      	it	ne
   1d44c:	2400      	movne	r4, #0
   1d44e:	e7f0      	b.n	1d432 <find_ccc_cfg+0x16>

0001d450 <clear_ccc_cfg>:
{
   1d450:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d452:	2500      	movs	r5, #0
{
   1d454:	4604      	mov	r4, r0
	memcpy(dst, src, sizeof(*dst));
   1d456:	2207      	movs	r2, #7
   1d458:	4669      	mov	r1, sp
   1d45a:	3001      	adds	r0, #1
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   1d45c:	9500      	str	r5, [sp, #0]
   1d45e:	f8cd 5003 	str.w	r5, [sp, #3]
   1d462:	f7fe fae2 	bl	1ba2a <memcpy>
	cfg->id = 0U;
   1d466:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   1d468:	8125      	strh	r5, [r4, #8]
}
   1d46a:	b003      	add	sp, #12
   1d46c:	bd30      	pop	{r4, r5, pc}

0001d46e <sc_set>:
{
   1d46e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1d472:	460e      	mov	r6, r1
   1d474:	b087      	sub	sp, #28
   1d476:	4690      	mov	r8, r2
   1d478:	4699      	mov	r9, r3
	if (!name) {
   1d47a:	4605      	mov	r5, r0
   1d47c:	b928      	cbnz	r0, 1d48a <sc_set+0x1c>
		return -EINVAL;
   1d47e:	f06f 0415 	mvn.w	r4, #21
}
   1d482:	4620      	mov	r0, r4
   1d484:	b007      	add	sp, #28
   1d486:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
   1d48a:	a902      	add	r1, sp, #8
   1d48c:	f7fe fba6 	bl	1bbdc <bt_settings_decode_key>
	if (err) {
   1d490:	4604      	mov	r4, r0
   1d492:	2800      	cmp	r0, #0
   1d494:	d1f3      	bne.n	1d47e <sc_set+0x10>
	settings_name_next(name, &next);
   1d496:	a901      	add	r1, sp, #4
   1d498:	4628      	mov	r0, r5
   1d49a:	f7fd f886 	bl	1a5aa <settings_name_next>
	if (!next) {
   1d49e:	9801      	ldr	r0, [sp, #4]
   1d4a0:	b1b8      	cbz	r0, 1d4d2 <sc_set+0x64>
		id = strtol(next, NULL, 10);
   1d4a2:	220a      	movs	r2, #10
   1d4a4:	4621      	mov	r1, r4
   1d4a6:	f7fe fa0a 	bl	1b8be <strtol>
   1d4aa:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
   1d4ac:	a902      	add	r1, sp, #8
   1d4ae:	4638      	mov	r0, r7
   1d4b0:	f7eb ff3a 	bl	9328 <find_sc_cfg>
	if (!cfg && len_rd) {
   1d4b4:	4605      	mov	r5, r0
   1d4b6:	b9e0      	cbnz	r0, 1d4f2 <sc_set+0x84>
   1d4b8:	2e00      	cmp	r6, #0
   1d4ba:	d0e2      	beq.n	1d482 <sc_set+0x14>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1d4bc:	a904      	add	r1, sp, #16
   1d4be:	9004      	str	r0, [sp, #16]
   1d4c0:	f8cd 0013 	str.w	r0, [sp, #19]
   1d4c4:	f7eb ff30 	bl	9328 <find_sc_cfg>
		if (!cfg) {
   1d4c8:	4605      	mov	r5, r0
   1d4ca:	b920      	cbnz	r0, 1d4d6 <sc_set+0x68>
			return -ENOMEM;
   1d4cc:	f06f 040b 	mvn.w	r4, #11
   1d4d0:	e7d7      	b.n	1d482 <sc_set+0x14>
		id = BT_ID_DEFAULT;
   1d4d2:	4627      	mov	r7, r4
   1d4d4:	e7ea      	b.n	1d4ac <sc_set+0x3e>
		cfg->id = id;
   1d4d6:	f800 7b01 	strb.w	r7, [r0], #1
   1d4da:	2207      	movs	r2, #7
   1d4dc:	a902      	add	r1, sp, #8
   1d4de:	f7fe faa4 	bl	1ba2a <memcpy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
   1d4e2:	2204      	movs	r2, #4
   1d4e4:	f105 0108 	add.w	r1, r5, #8
   1d4e8:	4648      	mov	r0, r9
   1d4ea:	47c0      	blx	r8
		if (len < 0) {
   1d4ec:	ea00 74e0 	and.w	r4, r0, r0, asr #31
   1d4f0:	e7c7      	b.n	1d482 <sc_set+0x14>
	if (len_rd) {
   1d4f2:	2e00      	cmp	r6, #0
   1d4f4:	d1f5      	bne.n	1d4e2 <sc_set+0x74>
		memset(cfg, 0, sizeof(*cfg));
   1d4f6:	220c      	movs	r2, #12
   1d4f8:	4631      	mov	r1, r6
   1d4fa:	f7fe fac1 	bl	1ba80 <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
   1d4fe:	e7c0      	b.n	1d482 <sc_set+0x14>

0001d500 <read_appearance>:
{
   1d500:	b513      	push	{r0, r1, r4, lr}
   1d502:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d506:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d508:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   1d50a:	f240 3241 	movw	r2, #833	; 0x341
   1d50e:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   1d512:	d80d      	bhi.n	1d530 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   1d514:	f1c1 0402 	rsb	r4, r1, #2
   1d518:	429c      	cmp	r4, r3
   1d51a:	bfa8      	it	ge
   1d51c:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d51e:	f10d 0306 	add.w	r3, sp, #6
   1d522:	4622      	mov	r2, r4
   1d524:	4419      	add	r1, r3
   1d526:	f7fe fa80 	bl	1ba2a <memcpy>
}
   1d52a:	4620      	mov	r0, r4
   1d52c:	b002      	add	sp, #8
   1d52e:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d530:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   1d534:	e7f9      	b.n	1d52a <read_appearance+0x2a>

0001d536 <read_name>:
{
   1d536:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d53a:	4698      	mov	r8, r3
   1d53c:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1d540:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   1d542:	f7e9 fdd1 	bl	70e8 <bt_get_name>
   1d546:	4607      	mov	r7, r0
				 strlen(name));
   1d548:	f7fe fa3d 	bl	1b9c6 <strlen>
	if (offset > value_len) {
   1d54c:	b283      	uxth	r3, r0
   1d54e:	42b3      	cmp	r3, r6
   1d550:	d30c      	bcc.n	1d56c <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   1d552:	1b9c      	subs	r4, r3, r6
   1d554:	4544      	cmp	r4, r8
   1d556:	bfa8      	it	ge
   1d558:	4644      	movge	r4, r8
   1d55a:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d55c:	4622      	mov	r2, r4
   1d55e:	19b9      	adds	r1, r7, r6
   1d560:	4628      	mov	r0, r5
   1d562:	f7fe fa62 	bl	1ba2a <memcpy>
}
   1d566:	4620      	mov	r0, r4
   1d568:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d56c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   1d570:	e7f9      	b.n	1d566 <read_name+0x30>

0001d572 <bt_gatt_attr_read_ccc>:
{
   1d572:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   1d574:	68c9      	ldr	r1, [r1, #12]
{
   1d576:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   1d57a:	4615      	mov	r5, r2
   1d57c:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   1d57e:	f7ff ff4d 	bl	1d41c <find_ccc_cfg>
	if (cfg) {
   1d582:	b100      	cbz	r0, 1d586 <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   1d584:	8900      	ldrh	r0, [r0, #8]
   1d586:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   1d58a:	2e02      	cmp	r6, #2
   1d58c:	d80e      	bhi.n	1d5ac <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   1d58e:	f1c6 0402 	rsb	r4, r6, #2
   1d592:	42bc      	cmp	r4, r7
   1d594:	bfa8      	it	ge
   1d596:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   1d598:	f10d 0306 	add.w	r3, sp, #6
   1d59c:	4622      	mov	r2, r4
   1d59e:	1999      	adds	r1, r3, r6
   1d5a0:	4628      	mov	r0, r5
   1d5a2:	f7fe fa42 	bl	1ba2a <memcpy>
}
   1d5a6:	4620      	mov	r0, r4
   1d5a8:	b003      	add	sp, #12
   1d5aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d5ac:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   1d5b0:	e7f9      	b.n	1d5a6 <bt_gatt_attr_read_ccc+0x34>

0001d5b2 <bt_gatt_attr_read_service>:
{
   1d5b2:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   1d5b4:	68c9      	ldr	r1, [r1, #12]
{
   1d5b6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   1d5ba:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   1d5bc:	780b      	ldrb	r3, [r1, #0]
{
   1d5be:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   1d5c0:	b993      	cbnz	r3, 1d5e8 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   1d5c2:	884b      	ldrh	r3, [r1, #2]
   1d5c4:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   1d5c8:	2d02      	cmp	r5, #2
   1d5ca:	d819      	bhi.n	1d600 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d5cc:	f1c5 0202 	rsb	r2, r5, #2
   1d5d0:	4294      	cmp	r4, r2
   1d5d2:	bfa8      	it	ge
   1d5d4:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d5d6:	f10d 0306 	add.w	r3, sp, #6
   1d5da:	4622      	mov	r2, r4
   1d5dc:	1959      	adds	r1, r3, r5
   1d5de:	f7fe fa24 	bl	1ba2a <memcpy>
}
   1d5e2:	4620      	mov	r0, r4
   1d5e4:	b003      	add	sp, #12
   1d5e6:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   1d5e8:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   1d5ea:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   1d5ee:	d807      	bhi.n	1d600 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   1d5f0:	f1c5 0210 	rsb	r2, r5, #16
   1d5f4:	4294      	cmp	r4, r2
   1d5f6:	bfa8      	it	ge
   1d5f8:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   1d5fa:	4622      	mov	r2, r4
   1d5fc:	4429      	add	r1, r5
   1d5fe:	e7ee      	b.n	1d5de <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d600:	f06f 0406 	mvn.w	r4, #6
   1d604:	e7ed      	b.n	1d5e2 <bt_gatt_attr_read_service+0x30>

0001d606 <sc_save>:
{
   1d606:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1d60a:	4680      	mov	r8, r0
   1d60c:	460f      	mov	r7, r1
   1d60e:	4616      	mov	r6, r2
   1d610:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
   1d612:	f7eb fe89 	bl	9328 <find_sc_cfg>
	if (!cfg) {
   1d616:	4604      	mov	r4, r0
   1d618:	b968      	cbnz	r0, 1d636 <sc_save+0x30>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
   1d61a:	4669      	mov	r1, sp
   1d61c:	9000      	str	r0, [sp, #0]
   1d61e:	f8cd 0003 	str.w	r0, [sp, #3]
   1d622:	f7eb fe81 	bl	9328 <find_sc_cfg>
		if (!cfg) {
   1d626:	4604      	mov	r4, r0
   1d628:	b1c8      	cbz	r0, 1d65e <sc_save+0x58>
		cfg->id = id;
   1d62a:	f800 8b01 	strb.w	r8, [r0], #1
   1d62e:	2207      	movs	r2, #7
   1d630:	4639      	mov	r1, r7
   1d632:	f7fe f9fa 	bl	1ba2a <memcpy>
	if (!(cfg->data.start || cfg->data.end)) {
   1d636:	8922      	ldrh	r2, [r4, #8]
   1d638:	8963      	ldrh	r3, [r4, #10]
   1d63a:	b962      	cbnz	r2, 1d656 <sc_save+0x50>
   1d63c:	b96b      	cbnz	r3, 1d65a <sc_save+0x54>
		cfg->data.start = start;
   1d63e:	8126      	strh	r6, [r4, #8]
		*end = new_end;
   1d640:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
   1d642:	4621      	mov	r1, r4
   1d644:	f811 0b01 	ldrb.w	r0, [r1], #1
   1d648:	f7fe feb8 	bl	1c3bc <bt_addr_le_is_bonded>
   1d64c:	b138      	cbz	r0, 1d65e <sc_save+0x58>
		sc_store(cfg);
   1d64e:	4620      	mov	r0, r4
   1d650:	f7eb fdce 	bl	91f0 <sc_store>
   1d654:	e003      	b.n	1d65e <sc_save+0x58>
	if (new_start >= *start && new_end <= *end) {
   1d656:	4296      	cmp	r6, r2
   1d658:	d304      	bcc.n	1d664 <sc_save+0x5e>
   1d65a:	429d      	cmp	r5, r3
   1d65c:	d8f0      	bhi.n	1d640 <sc_save+0x3a>
}
   1d65e:	b002      	add	sp, #8
   1d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (*end < new_end) {
   1d664:	429d      	cmp	r5, r3
		*start = new_start;
   1d666:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
   1d668:	d9eb      	bls.n	1d642 <sc_save+0x3c>
   1d66a:	e7e9      	b.n	1d640 <sc_save+0x3a>

0001d66c <bt_gatt_attr_write_ccc>:
{
   1d66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d670:	461f      	mov	r7, r3
   1d672:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
   1d676:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
   1d67a:	4606      	mov	r6, r0
   1d67c:	4688      	mov	r8, r1
	if (offset) {
   1d67e:	2b00      	cmp	r3, #0
   1d680:	d13e      	bne.n	1d700 <bt_gatt_attr_write_ccc+0x94>
	if (!len || len > sizeof(uint16_t)) {
   1d682:	1e7b      	subs	r3, r7, #1
   1d684:	2b01      	cmp	r3, #1
   1d686:	d83e      	bhi.n	1d706 <bt_gatt_attr_write_ccc+0x9a>
	if (len < sizeof(uint16_t)) {
   1d688:	2f01      	cmp	r7, #1
		value = *(uint8_t *)buf;
   1d68a:	7815      	ldrb	r5, [r2, #0]
   1d68c:	bf18      	it	ne
   1d68e:	7853      	ldrbne	r3, [r2, #1]
	cfg = find_ccc_cfg(conn, ccc);
   1d690:	4649      	mov	r1, r9
		value = *(uint8_t *)buf;
   1d692:	bf0c      	ite	eq
   1d694:	b2ad      	uxtheq	r5, r5
   1d696:	ea45 2503 	orrne.w	r5, r5, r3, lsl #8
	cfg = find_ccc_cfg(conn, ccc);
   1d69a:	f7ff febf 	bl	1d41c <find_ccc_cfg>
	if (!cfg) {
   1d69e:	4604      	mov	r4, r0
   1d6a0:	b980      	cbnz	r0, 1d6c4 <bt_gatt_attr_write_ccc+0x58>
		if (!value) {
   1d6a2:	b915      	cbnz	r5, 1d6aa <bt_gatt_attr_write_ccc+0x3e>
			return len;
   1d6a4:	4638      	mov	r0, r7
}
   1d6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
   1d6aa:	4649      	mov	r1, r9
   1d6ac:	f7ff feb6 	bl	1d41c <find_ccc_cfg>
		if (!cfg) {
   1d6b0:	4604      	mov	r4, r0
   1d6b2:	b358      	cbz	r0, 1d70c <bt_gatt_attr_write_ccc+0xa0>
   1d6b4:	2207      	movs	r2, #7
   1d6b6:	f106 0188 	add.w	r1, r6, #136	; 0x88
   1d6ba:	3001      	adds	r0, #1
   1d6bc:	f7fe f9b5 	bl	1ba2a <memcpy>
		cfg->id = conn->id;
   1d6c0:	7a33      	ldrb	r3, [r6, #8]
   1d6c2:	7023      	strb	r3, [r4, #0]
	if (ccc->cfg_write) {
   1d6c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
   1d6c8:	b973      	cbnz	r3, 1d6e8 <bt_gatt_attr_write_ccc+0x7c>
	if (cfg->value != ccc->value) {
   1d6ca:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
   1d6ce:	8125      	strh	r5, [r4, #8]
	if (cfg->value != ccc->value) {
   1d6d0:	42ab      	cmp	r3, r5
   1d6d2:	d003      	beq.n	1d6dc <bt_gatt_attr_write_ccc+0x70>
		gatt_ccc_changed(attr, ccc);
   1d6d4:	4649      	mov	r1, r9
   1d6d6:	4640      	mov	r0, r8
   1d6d8:	f7ff fe5d 	bl	1d396 <gatt_ccc_changed>
	if (!value) {
   1d6dc:	2d00      	cmp	r5, #0
   1d6de:	d1e1      	bne.n	1d6a4 <bt_gatt_attr_write_ccc+0x38>
		clear_ccc_cfg(cfg);
   1d6e0:	4620      	mov	r0, r4
   1d6e2:	f7ff feb5 	bl	1d450 <clear_ccc_cfg>
   1d6e6:	e7dd      	b.n	1d6a4 <bt_gatt_attr_write_ccc+0x38>
		ssize_t write = ccc->cfg_write(conn, attr, value);
   1d6e8:	462a      	mov	r2, r5
   1d6ea:	4641      	mov	r1, r8
   1d6ec:	4630      	mov	r0, r6
   1d6ee:	4798      	blx	r3
		if (write < 0) {
   1d6f0:	2800      	cmp	r0, #0
   1d6f2:	dbd8      	blt.n	1d6a6 <bt_gatt_attr_write_ccc+0x3a>
		if (write != sizeof(value) && write != 1) {
   1d6f4:	1e42      	subs	r2, r0, #1
   1d6f6:	2a01      	cmp	r2, #1
   1d6f8:	d9e7      	bls.n	1d6ca <bt_gatt_attr_write_ccc+0x5e>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
   1d6fa:	f06f 000d 	mvn.w	r0, #13
   1d6fe:	e7d2      	b.n	1d6a6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d700:	f06f 0006 	mvn.w	r0, #6
   1d704:	e7cf      	b.n	1d6a6 <bt_gatt_attr_write_ccc+0x3a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   1d706:	f06f 000c 	mvn.w	r0, #12
   1d70a:	e7cc      	b.n	1d6a6 <bt_gatt_attr_write_ccc+0x3a>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
   1d70c:	f06f 0010 	mvn.w	r0, #16
   1d710:	e7c9      	b.n	1d6a6 <bt_gatt_attr_write_ccc+0x3a>

0001d712 <sc_clear>:
{
   1d712:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d714:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
   1d718:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d71a:	4631      	mov	r1, r6
   1d71c:	7a00      	ldrb	r0, [r0, #8]
   1d71e:	f7fe fe4d 	bl	1c3bc <bt_addr_le_is_bonded>
   1d722:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1d724:	4631      	mov	r1, r6
   1d726:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
   1d728:	b11d      	cbz	r5, 1d732 <sc_clear+0x20>
}
   1d72a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
   1d72e:	f7eb be39 	b.w	93a4 <bt_gatt_clear_sc>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
   1d732:	f7eb fdf9 	bl	9328 <find_sc_cfg>
		if (cfg) {
   1d736:	b128      	cbz	r0, 1d744 <sc_clear+0x32>
	memset(cfg, 0, sizeof(*cfg));
   1d738:	4629      	mov	r1, r5
   1d73a:	220c      	movs	r2, #12
}
   1d73c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
   1d740:	f7fe b99e 	b.w	1ba80 <memset>
}
   1d744:	bd70      	pop	{r4, r5, r6, pc}

0001d746 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   1d746:	2a02      	cmp	r2, #2
{
   1d748:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   1d74a:	d108      	bne.n	1d75e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   1d74c:	2300      	movs	r3, #0
   1d74e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   1d752:	461a      	mov	r2, r3
   1d754:	7a00      	ldrb	r0, [r0, #8]
   1d756:	f7ff ff56 	bl	1d606 <sc_save>
}
   1d75a:	2002      	movs	r0, #2
   1d75c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   1d75e:	f7ff ffd8 	bl	1d712 <sc_clear>
   1d762:	e7fa      	b.n	1d75a <sc_ccc_cfg_write+0x14>

0001d764 <bt_gatt_attr_read>:
{
   1d764:	b538      	push	{r3, r4, r5, lr}
   1d766:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1d76a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   1d76e:	42a9      	cmp	r1, r5
{
   1d770:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d772:	d80b      	bhi.n	1d78c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   1d774:	1a6d      	subs	r5, r5, r1
   1d776:	429d      	cmp	r5, r3
   1d778:	bfa8      	it	ge
   1d77a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d77c:	9b05      	ldr	r3, [sp, #20]
   1d77e:	b2ad      	uxth	r5, r5
   1d780:	462a      	mov	r2, r5
   1d782:	4419      	add	r1, r3
   1d784:	f7fe f951 	bl	1ba2a <memcpy>
}
   1d788:	4628      	mov	r0, r5
   1d78a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d78c:	f06f 0506 	mvn.w	r5, #6
   1d790:	e7fa      	b.n	1d788 <bt_gatt_attr_read+0x24>

0001d792 <bt_gatt_attr_read_chrc>:
{
   1d792:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   1d794:	68cf      	ldr	r7, [r1, #12]
{
   1d796:	b087      	sub	sp, #28
   1d798:	4608      	mov	r0, r1
   1d79a:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   1d79c:	79bb      	ldrb	r3, [r7, #6]
   1d79e:	f88d 3004 	strb.w	r3, [sp, #4]
{
   1d7a2:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d7a4:	f7eb ffd2 	bl	974c <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d7a8:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   1d7aa:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d7ae:	780b      	ldrb	r3, [r1, #0]
{
   1d7b0:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   1d7b4:	b99b      	cbnz	r3, 1d7de <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   1d7b6:	884b      	ldrh	r3, [r1, #2]
   1d7b8:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   1d7bc:	2105      	movs	r1, #5
	if (offset > value_len) {
   1d7be:	42b1      	cmp	r1, r6
   1d7c0:	d315      	bcc.n	1d7ee <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   1d7c2:	1b89      	subs	r1, r1, r6
   1d7c4:	42a1      	cmp	r1, r4
   1d7c6:	bfa8      	it	ge
   1d7c8:	4621      	movge	r1, r4
   1d7ca:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   1d7cc:	ab01      	add	r3, sp, #4
   1d7ce:	4622      	mov	r2, r4
   1d7d0:	1999      	adds	r1, r3, r6
   1d7d2:	4628      	mov	r0, r5
   1d7d4:	f7fe f929 	bl	1ba2a <memcpy>
}
   1d7d8:	4620      	mov	r0, r4
   1d7da:	b007      	add	sp, #28
   1d7dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   1d7de:	3101      	adds	r1, #1
   1d7e0:	2210      	movs	r2, #16
   1d7e2:	f10d 0007 	add.w	r0, sp, #7
   1d7e6:	f7fe f920 	bl	1ba2a <memcpy>
		value_len += 16U;
   1d7ea:	2113      	movs	r1, #19
   1d7ec:	e7e7      	b.n	1d7be <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d7ee:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   1d7f2:	e7f1      	b.n	1d7d8 <bt_gatt_attr_read_chrc+0x46>

0001d7f4 <bt_gatt_foreach_attr>:
{
   1d7f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   1d7f6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   1d7fa:	2300      	movs	r3, #0
   1d7fc:	9300      	str	r3, [sp, #0]
   1d7fe:	461a      	mov	r2, r3
   1d800:	f7eb ffb8 	bl	9774 <bt_gatt_foreach_attr_type>
}
   1d804:	b005      	add	sp, #20
   1d806:	f85d fb04 	ldr.w	pc, [sp], #4

0001d80a <bt_gatt_attr_read_cud>:
{
   1d80a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   1d80e:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   1d812:	f8bd 6018 	ldrh.w	r6, [sp, #24]
				 strlen(value));
   1d816:	4640      	mov	r0, r8
{
   1d818:	461f      	mov	r7, r3
   1d81a:	4615      	mov	r5, r2
				 strlen(value));
   1d81c:	f7fe f8d3 	bl	1b9c6 <strlen>
	if (offset > value_len) {
   1d820:	b283      	uxth	r3, r0
   1d822:	42b3      	cmp	r3, r6
   1d824:	d30d      	bcc.n	1d842 <bt_gatt_attr_read_cud+0x38>
	len = MIN(buf_len, value_len - offset);
   1d826:	1b9c      	subs	r4, r3, r6
   1d828:	42bc      	cmp	r4, r7
   1d82a:	bfa8      	it	ge
   1d82c:	463c      	movge	r4, r7
   1d82e:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   1d830:	4622      	mov	r2, r4
   1d832:	eb08 0106 	add.w	r1, r8, r6
   1d836:	4628      	mov	r0, r5
   1d838:	f7fe f8f7 	bl	1ba2a <memcpy>
}
   1d83c:	4620      	mov	r0, r4
   1d83e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d842:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1d846:	e7f9      	b.n	1d83c <bt_gatt_attr_read_cud+0x32>

0001d848 <bt_gatt_attr_read_cpf>:
{
   1d848:	b538      	push	{r3, r4, r5, lr}
   1d84a:	f8bd 5010 	ldrh.w	r5, [sp, #16]
	const struct bt_gatt_cpf *value = attr->user_data;
   1d84e:	68c9      	ldr	r1, [r1, #12]
	if (offset > value_len) {
   1d850:	2d07      	cmp	r5, #7
{
   1d852:	4610      	mov	r0, r2
	if (offset > value_len) {
   1d854:	d80a      	bhi.n	1d86c <bt_gatt_attr_read_cpf+0x24>
	len = MIN(buf_len, value_len - offset);
   1d856:	f1c5 0407 	rsb	r4, r5, #7
   1d85a:	429c      	cmp	r4, r3
   1d85c:	bfa8      	it	ge
   1d85e:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   1d860:	4622      	mov	r2, r4
   1d862:	4429      	add	r1, r5
   1d864:	f7fe f8e1 	bl	1ba2a <memcpy>
}
   1d868:	4620      	mov	r0, r4
   1d86a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   1d86c:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   1d870:	e7fa      	b.n	1d868 <bt_gatt_attr_read_cpf+0x20>

0001d872 <bt_gatt_check_perm>:
{
   1d872:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   1d874:	07d4      	lsls	r4, r2, #31
{
   1d876:	4605      	mov	r5, r0
   1d878:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   1d87a:	d504      	bpl.n	1d886 <bt_gatt_check_perm+0x14>
   1d87c:	f010 0f15 	tst.w	r0, #21
   1d880:	d01e      	beq.n	1d8c0 <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   1d882:	684b      	ldr	r3, [r1, #4]
   1d884:	b1e3      	cbz	r3, 1d8c0 <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   1d886:	0793      	lsls	r3, r2, #30
   1d888:	d504      	bpl.n	1d894 <bt_gatt_check_perm+0x22>
   1d88a:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   1d88e:	d019      	beq.n	1d8c4 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   1d890:	688b      	ldr	r3, [r1, #8]
   1d892:	b1bb      	cbz	r3, 1d8c4 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   1d894:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   1d898:	f014 0f30 	tst.w	r4, #48	; 0x30
   1d89c:	d103      	bne.n	1d8a6 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   1d89e:	f014 000c 	ands.w	r0, r4, #12
   1d8a2:	d107      	bne.n	1d8b4 <bt_gatt_check_perm+0x42>
}
   1d8a4:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   1d8a6:	4628      	mov	r0, r5
   1d8a8:	f7fe fe5e 	bl	1c568 <bt_conn_get_security>
   1d8ac:	2802      	cmp	r0, #2
   1d8ae:	d8f6      	bhi.n	1d89e <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   1d8b0:	2005      	movs	r0, #5
   1d8b2:	e7f7      	b.n	1d8a4 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   1d8b4:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   1d8b6:	2b00      	cmp	r3, #0
   1d8b8:	bf14      	ite	ne
   1d8ba:	2000      	movne	r0, #0
   1d8bc:	200f      	moveq	r0, #15
   1d8be:	e7f1      	b.n	1d8a4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   1d8c0:	2002      	movs	r0, #2
   1d8c2:	e7ef      	b.n	1d8a4 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   1d8c4:	2003      	movs	r0, #3
   1d8c6:	e7ed      	b.n	1d8a4 <bt_gatt_check_perm+0x32>

0001d8c8 <bt_gatt_change_aware>:
}
   1d8c8:	2001      	movs	r0, #1
   1d8ca:	4770      	bx	lr

0001d8cc <sys_memcpy_swap>:
	psrc += length - 1;
   1d8cc:	1e53      	subs	r3, r2, #1
   1d8ce:	4419      	add	r1, r3
	for (; length > 0; length--) {
   1d8d0:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   1d8d2:	f811 3901 	ldrb.w	r3, [r1], #-1
   1d8d6:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   1d8da:	4290      	cmp	r0, r2
   1d8dc:	d1f9      	bne.n	1d8d2 <sys_memcpy_swap+0x6>
}
   1d8de:	4770      	bx	lr

0001d8e0 <sys_mem_swap>:
 *
 * @param buf A valid pointer on a memory area to swap
 * @param length Size of buf memory area
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
   1d8e0:	b510      	push	{r4, lr}
   1d8e2:	1843      	adds	r3, r0, r1
   1d8e4:	eb00 0151 	add.w	r1, r0, r1, lsr #1
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d8e8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   1d8ec:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   1d8ee:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   1d8f2:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   1d8f4:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   1d8f6:	d1f7      	bne.n	1d8e8 <sys_mem_swap+0x8>
	}
}
   1d8f8:	bd10      	pop	{r4, pc}

0001d8fa <smp_pairing_rsp>:
}
   1d8fa:	2007      	movs	r0, #7
   1d8fc:	4770      	bx	lr

0001d8fe <smp_chan_get>:
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
   1d8fe:	2106      	movs	r1, #6
   1d900:	f7ff b817 	b.w	1c932 <bt_l2cap_le_lookup_rx_cid>

0001d904 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1d904:	2301      	movs	r3, #1
   1d906:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1d908:	f3bf 8f5b 	dmb	ish
   1d90c:	e850 2f00 	ldrex	r2, [r0]
   1d910:	431a      	orrs	r2, r3
   1d912:	e840 2100 	strex	r1, r2, [r0]
   1d916:	2900      	cmp	r1, #0
   1d918:	d1f8      	bne.n	1d90c <atomic_set_bit+0x8>
   1d91a:	f3bf 8f5b 	dmb	ish
}
   1d91e:	4770      	bx	lr

0001d920 <bt_smp_aes_cmac>:
{
   1d920:	b570      	push	{r4, r5, r6, lr}
   1d922:	b0c2      	sub	sp, #264	; 0x108
   1d924:	460d      	mov	r5, r1
   1d926:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d928:	4601      	mov	r1, r0
   1d92a:	aa16      	add	r2, sp, #88	; 0x58
   1d92c:	4668      	mov	r0, sp
{
   1d92e:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   1d930:	f7fd fee8 	bl	1b704 <tc_cmac_setup>
   1d934:	b150      	cbz	r0, 1d94c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   1d936:	4632      	mov	r2, r6
   1d938:	4629      	mov	r1, r5
   1d93a:	4668      	mov	r0, sp
   1d93c:	f7fd ff0d 	bl	1b75a <tc_cmac_update>
   1d940:	b120      	cbz	r0, 1d94c <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   1d942:	4669      	mov	r1, sp
   1d944:	4620      	mov	r0, r4
   1d946:	f7fd ff74 	bl	1b832 <tc_cmac_final>
   1d94a:	b918      	cbnz	r0, 1d954 <bt_smp_aes_cmac+0x34>
		return -EIO;
   1d94c:	f06f 0004 	mvn.w	r0, #4
}
   1d950:	b042      	add	sp, #264	; 0x108
   1d952:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   1d954:	2000      	movs	r0, #0
   1d956:	e7fb      	b.n	1d950 <bt_smp_aes_cmac+0x30>

0001d958 <smp_sign_buf>:
{
   1d958:	b5f0      	push	{r4, r5, r6, r7, lr}
	sys_mem_swap(m, len + sizeof(cnt));
   1d95a:	1d14      	adds	r4, r2, #4
{
   1d95c:	b08b      	sub	sp, #44	; 0x2c
   1d95e:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1d960:	588b      	ldr	r3, [r1, r2]
   1d962:	9301      	str	r3, [sp, #4]
{
   1d964:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
   1d966:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
   1d968:	4628      	mov	r0, r5
   1d96a:	4621      	mov	r1, r4
   1d96c:	f7ff ffb8 	bl	1d8e0 <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
   1d970:	4631      	mov	r1, r6
   1d972:	2210      	movs	r2, #16
   1d974:	a802      	add	r0, sp, #8
   1d976:	f7ff ffa9 	bl	1d8cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
   1d97a:	ab06      	add	r3, sp, #24
   1d97c:	4622      	mov	r2, r4
   1d97e:	4629      	mov	r1, r5
   1d980:	a802      	add	r0, sp, #8
   1d982:	f7ff ffcd 	bl	1d920 <bt_smp_aes_cmac>
	if (err) {
   1d986:	4606      	mov	r6, r0
   1d988:	b990      	cbnz	r0, 1d9b0 <smp_sign_buf+0x58>
	sys_mem_swap(tmp, sizeof(tmp));
   1d98a:	2110      	movs	r1, #16
   1d98c:	a806      	add	r0, sp, #24
   1d98e:	f7ff ffa7 	bl	1d8e0 <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
   1d992:	2204      	movs	r2, #4
   1d994:	eb0d 0102 	add.w	r1, sp, r2
   1d998:	a807      	add	r0, sp, #28
   1d99a:	f7fe f846 	bl	1ba2a <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
   1d99e:	4621      	mov	r1, r4
   1d9a0:	4628      	mov	r0, r5
   1d9a2:	f7ff ff9d 	bl	1d8e0 <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
   1d9a6:	220c      	movs	r2, #12
   1d9a8:	a907      	add	r1, sp, #28
   1d9aa:	4638      	mov	r0, r7
   1d9ac:	f7fe f83d 	bl	1ba2a <memcpy>
}
   1d9b0:	4630      	mov	r0, r6
   1d9b2:	b00b      	add	sp, #44	; 0x2c
   1d9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001d9b6 <smp_f4>:
{
   1d9b6:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d9b8:	b097      	sub	sp, #92	; 0x5c
   1d9ba:	4614      	mov	r4, r2
   1d9bc:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   1d9be:	2220      	movs	r2, #32
   1d9c0:	4601      	mov	r1, r0
   1d9c2:	a805      	add	r0, sp, #20
{
   1d9c4:	461d      	mov	r5, r3
   1d9c6:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   1d9c8:	f7ff ff80 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   1d9cc:	2220      	movs	r2, #32
   1d9ce:	4631      	mov	r1, r6
   1d9d0:	a80d      	add	r0, sp, #52	; 0x34
   1d9d2:	f7ff ff7b 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   1d9d6:	4621      	mov	r1, r4
   1d9d8:	2210      	movs	r2, #16
   1d9da:	a801      	add	r0, sp, #4
	m[64] = z;
   1d9dc:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   1d9e0:	f7ff ff74 	bl	1d8cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   1d9e4:	463b      	mov	r3, r7
   1d9e6:	2241      	movs	r2, #65	; 0x41
   1d9e8:	a905      	add	r1, sp, #20
   1d9ea:	a801      	add	r0, sp, #4
   1d9ec:	f7ff ff98 	bl	1d920 <bt_smp_aes_cmac>
	if (err) {
   1d9f0:	4604      	mov	r4, r0
   1d9f2:	b918      	cbnz	r0, 1d9fc <smp_f4+0x46>
	sys_mem_swap(res, 16);
   1d9f4:	2110      	movs	r1, #16
   1d9f6:	4638      	mov	r0, r7
   1d9f8:	f7ff ff72 	bl	1d8e0 <sys_mem_swap>
}
   1d9fc:	4620      	mov	r0, r4
   1d9fe:	b017      	add	sp, #92	; 0x5c
   1da00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001da02 <smp_f6>:
{
   1da02:	b5f0      	push	{r4, r5, r6, r7, lr}
   1da04:	b097      	sub	sp, #92	; 0x5c
   1da06:	4605      	mov	r5, r0
   1da08:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   1da0a:	a805      	add	r0, sp, #20
   1da0c:	2210      	movs	r2, #16
{
   1da0e:	461c      	mov	r4, r3
   1da10:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   1da12:	f7ff ff5b 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   1da16:	2210      	movs	r2, #16
   1da18:	4631      	mov	r1, r6
   1da1a:	a809      	add	r0, sp, #36	; 0x24
   1da1c:	f7ff ff56 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   1da20:	4621      	mov	r1, r4
   1da22:	2210      	movs	r2, #16
   1da24:	a80d      	add	r0, sp, #52	; 0x34
   1da26:	f7ff ff51 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   1da2a:	991c      	ldr	r1, [sp, #112]	; 0x70
   1da2c:	2203      	movs	r2, #3
   1da2e:	a811      	add	r0, sp, #68	; 0x44
   1da30:	f7ff ff4c 	bl	1d8cc <sys_memcpy_swap>
	m[51] = a1->type;
   1da34:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   1da36:	f814 3b01 	ldrb.w	r3, [r4], #1
   1da3a:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   1da3e:	4621      	mov	r1, r4
   1da40:	2206      	movs	r2, #6
   1da42:	a812      	add	r0, sp, #72	; 0x48
   1da44:	f7fd fff1 	bl	1ba2a <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   1da48:	4621      	mov	r1, r4
   1da4a:	2206      	movs	r2, #6
   1da4c:	a812      	add	r0, sp, #72	; 0x48
   1da4e:	f7ff ff3d 	bl	1d8cc <sys_memcpy_swap>
	m[58] = a2->type;
   1da52:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   1da54:	f814 3b01 	ldrb.w	r3, [r4], #1
   1da58:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   1da5c:	4621      	mov	r1, r4
   1da5e:	2206      	movs	r2, #6
   1da60:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1da64:	f7fd ffe1 	bl	1ba2a <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   1da68:	4621      	mov	r1, r4
   1da6a:	2206      	movs	r2, #6
   1da6c:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   1da70:	f7ff ff2c 	bl	1d8cc <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   1da74:	2210      	movs	r2, #16
   1da76:	4629      	mov	r1, r5
   1da78:	a801      	add	r0, sp, #4
   1da7a:	f7ff ff27 	bl	1d8cc <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   1da7e:	463b      	mov	r3, r7
   1da80:	2241      	movs	r2, #65	; 0x41
   1da82:	a905      	add	r1, sp, #20
   1da84:	a801      	add	r0, sp, #4
   1da86:	f7ff ff4b 	bl	1d920 <bt_smp_aes_cmac>
	if (err) {
   1da8a:	4604      	mov	r4, r0
   1da8c:	b918      	cbnz	r0, 1da96 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   1da8e:	2110      	movs	r1, #16
   1da90:	4638      	mov	r0, r7
   1da92:	f7ff ff25 	bl	1d8e0 <sys_mem_swap>
}
   1da96:	4620      	mov	r0, r4
   1da98:	b017      	add	sp, #92	; 0x5c
   1da9a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001da9c <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   1da9c:	2301      	movs	r3, #1
   1da9e:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1daa0:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1daa2:	f3bf 8f5b 	dmb	ish
   1daa6:	e850 2f00 	ldrex	r2, [r0]
   1daaa:	401a      	ands	r2, r3
   1daac:	e840 2100 	strex	r1, r2, [r0]
   1dab0:	2900      	cmp	r1, #0
   1dab2:	d1f8      	bne.n	1daa6 <atomic_clear_bit+0xa>
   1dab4:	f3bf 8f5b 	dmb	ish
}
   1dab8:	4770      	bx	lr

0001daba <bt_smp_disconnected>:
{
   1daba:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   1dabc:	6803      	ldr	r3, [r0, #0]
   1dabe:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
{
   1dac2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   1dac4:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1dac8:	f001 fa80 	bl	1efcc <k_delayed_work_cancel>
	if (keys) {
   1dacc:	b13d      	cbz	r5, 1dade <bt_smp_disconnected+0x24>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   1dace:	89eb      	ldrh	r3, [r5, #14]
   1dad0:	b113      	cbz	r3, 1dad8 <bt_smp_disconnected+0x1e>
   1dad2:	7b6b      	ldrb	r3, [r5, #13]
   1dad4:	079b      	lsls	r3, r3, #30
   1dad6:	d502      	bpl.n	1dade <bt_smp_disconnected+0x24>
			bt_keys_clear(keys);
   1dad8:	4628      	mov	r0, r5
   1dada:	f7ed fb1d 	bl	b118 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   1dade:	4620      	mov	r0, r4
   1dae0:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   1dae4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   1dae8:	2100      	movs	r1, #0
   1daea:	f7fd bfc9 	b.w	1ba80 <memset>

0001daee <smp_security_request>:
   1daee:	2007      	movs	r0, #7
   1daf0:	4770      	bx	lr

0001daf2 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1daf2:	f3bf 8f5b 	dmb	ish
   1daf6:	6800      	ldr	r0, [r0, #0]
   1daf8:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   1dafc:	4108      	asrs	r0, r1
}
   1dafe:	f000 0001 	and.w	r0, r0, #1
   1db02:	4770      	bx	lr

0001db04 <smp_create_pdu.isra.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1db04:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1db06:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   1db0a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   1db0c:	4628      	mov	r0, r5
   1db0e:	2104      	movs	r1, #4
   1db10:	f7ff ffef 	bl	1daf2 <atomic_test_bit>
   1db14:	b168      	cbz	r0, 1db32 <smp_create_pdu.isra.0+0x2e>
		timeout = K_NO_WAIT;
   1db16:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1db18:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   1db1a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   1db1c:	4608      	mov	r0, r1
   1db1e:	f7fe feaf 	bl	1c880 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   1db22:	4604      	mov	r4, r0
   1db24:	b940      	cbnz	r0, 1db38 <smp_create_pdu.isra.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1db26:	2104      	movs	r1, #4
   1db28:	4628      	mov	r0, r5
   1db2a:	f7ff feeb 	bl	1d904 <atomic_set_bit>
}
   1db2e:	4620      	mov	r0, r4
   1db30:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   1db32:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   1db36:	e7ef      	b.n	1db18 <smp_create_pdu.isra.0+0x14>
	hdr = net_buf_add(buf, sizeof(*hdr));
   1db38:	2101      	movs	r1, #1
   1db3a:	3008      	adds	r0, #8
   1db3c:	f000 fd2a 	bl	1e594 <net_buf_simple_add>
	hdr->code = op;
   1db40:	7006      	strb	r6, [r0, #0]
	return buf;
   1db42:	e7f4      	b.n	1db2e <smp_create_pdu.isra.0+0x2a>

0001db44 <smp_send_pairing_random>:
{
   1db44:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1db46:	2104      	movs	r1, #4
{
   1db48:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   1db4a:	f7ff ffdb 	bl	1db04 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1db4e:	4604      	mov	r4, r0
   1db50:	b178      	cbz	r0, 1db72 <smp_send_pairing_random+0x2e>
	req = net_buf_add(rsp_buf, sizeof(*req));
   1db52:	2110      	movs	r1, #16
   1db54:	3008      	adds	r0, #8
   1db56:	f000 fd1d 	bl	1e594 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   1db5a:	2210      	movs	r2, #16
   1db5c:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   1db60:	f7fd ff63 	bl	1ba2a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1db64:	4628      	mov	r0, r5
   1db66:	2200      	movs	r2, #0
   1db68:	4621      	mov	r1, r4
   1db6a:	f7ec fa0f 	bl	9f8c <smp_send.isra.0>
	return 0;
   1db6e:	2000      	movs	r0, #0
}
   1db70:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1db72:	2008      	movs	r0, #8
   1db74:	e7fc      	b.n	1db70 <smp_send_pairing_random+0x2c>

0001db76 <send_pairing_rsp>:
{
   1db76:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1db78:	2102      	movs	r1, #2
{
   1db7a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   1db7c:	f7ff ffc2 	bl	1db04 <smp_create_pdu.isra.0>
	if (!rsp_buf) {
   1db80:	4604      	mov	r4, r0
   1db82:	b178      	cbz	r0, 1dba4 <send_pairing_rsp+0x2e>
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
   1db84:	2106      	movs	r1, #6
   1db86:	3008      	adds	r0, #8
   1db88:	f000 fd04 	bl	1e594 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   1db8c:	2206      	movs	r2, #6
   1db8e:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   1db92:	f7fd ff4a 	bl	1ba2a <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   1db96:	4628      	mov	r0, r5
   1db98:	2200      	movs	r2, #0
   1db9a:	4621      	mov	r1, r4
   1db9c:	f7ec f9f6 	bl	9f8c <smp_send.isra.0>
	return 0;
   1dba0:	2000      	movs	r0, #0
}
   1dba2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   1dba4:	2008      	movs	r0, #8
   1dba6:	e7fc      	b.n	1dba2 <send_pairing_rsp+0x2c>

0001dba8 <smp_dhkey_check>:
{
   1dba8:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1dbaa:	6803      	ldr	r3, [r0, #0]
   1dbac:	78db      	ldrb	r3, [r3, #3]
   1dbae:	2b01      	cmp	r3, #1
{
   1dbb0:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   1dbb2:	d115      	bne.n	1dbe0 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   1dbb4:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   1dbb6:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   1dbba:	210f      	movs	r1, #15
   1dbbc:	4628      	mov	r0, r5
   1dbbe:	f7ff ff6d 	bl	1da9c <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   1dbc2:	4631      	mov	r1, r6
   1dbc4:	2210      	movs	r2, #16
   1dbc6:	f204 106f 	addw	r0, r4, #367	; 0x16f
   1dbca:	f7fd ff2e 	bl	1ba2a <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   1dbce:	2107      	movs	r1, #7
   1dbd0:	4628      	mov	r0, r5
   1dbd2:	f7ff ff8e 	bl	1daf2 <atomic_test_bit>
   1dbd6:	b128      	cbz	r0, 1dbe4 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   1dbd8:	2108      	movs	r1, #8
   1dbda:	4628      	mov	r0, r5
   1dbdc:	f7ff fe92 	bl	1d904 <atomic_set_bit>
}
   1dbe0:	2000      	movs	r0, #0
   1dbe2:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1dbe4:	2109      	movs	r1, #9
   1dbe6:	4628      	mov	r0, r5
   1dbe8:	f7ff ff83 	bl	1daf2 <atomic_test_bit>
   1dbec:	2800      	cmp	r0, #0
   1dbee:	d1f3      	bne.n	1dbd8 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   1dbf0:	4620      	mov	r0, r4
}
   1dbf2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   1dbf6:	f7ec ba85 	b.w	a104 <compute_and_check_and_send_slave_dhcheck>

0001dbfa <smp_ident_info>:
{
   1dbfa:	b538      	push	{r3, r4, r5, lr}
   1dbfc:	4604      	mov	r4, r0
   1dbfe:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dc00:	30bc      	adds	r0, #188	; 0xbc
   1dc02:	210c      	movs	r1, #12
   1dc04:	f7ff ff75 	bl	1daf2 <atomic_test_bit>
   1dc08:	b168      	cbz	r0, 1dc26 <smp_ident_info+0x2c>
		struct bt_smp_ident_info *req = (void *)buf->data;
   1dc0a:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1dc0c:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1dc0e:	2002      	movs	r0, #2
   1dc10:	7a19      	ldrb	r1, [r3, #8]
   1dc12:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1dc16:	f000 fc11 	bl	1e43c <bt_keys_get_type>
		if (!keys) {
   1dc1a:	b158      	cbz	r0, 1dc34 <smp_ident_info+0x3a>
		memcpy(keys->irk.val, req->irk, 16);
   1dc1c:	2210      	movs	r2, #16
   1dc1e:	4629      	mov	r1, r5
   1dc20:	302a      	adds	r0, #42	; 0x2a
   1dc22:	f7fd ff02 	bl	1ba2a <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
   1dc26:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1dc2a:	2109      	movs	r1, #9
   1dc2c:	f7ff fe6a 	bl	1d904 <atomic_set_bit>
	return 0;
   1dc30:	2000      	movs	r0, #0
}
   1dc32:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1dc34:	2008      	movs	r0, #8
   1dc36:	e7fc      	b.n	1dc32 <smp_ident_info+0x38>

0001dc38 <smp_encrypt_info>:
{
   1dc38:	b538      	push	{r3, r4, r5, lr}
   1dc3a:	4604      	mov	r4, r0
   1dc3c:	460b      	mov	r3, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dc3e:	30bc      	adds	r0, #188	; 0xbc
   1dc40:	210c      	movs	r1, #12
   1dc42:	f7ff ff56 	bl	1daf2 <atomic_test_bit>
   1dc46:	b168      	cbz	r0, 1dc64 <smp_encrypt_info+0x2c>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
   1dc48:	689d      	ldr	r5, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
   1dc4a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1dc4c:	2004      	movs	r0, #4
   1dc4e:	7a19      	ldrb	r1, [r3, #8]
   1dc50:	f103 0288 	add.w	r2, r3, #136	; 0x88
   1dc54:	f000 fbf2 	bl	1e43c <bt_keys_get_type>
		if (!keys) {
   1dc58:	b158      	cbz	r0, 1dc72 <smp_encrypt_info+0x3a>
		memcpy(keys->ltk.val, req->ltk, 16);
   1dc5a:	2210      	movs	r2, #16
   1dc5c:	4629      	mov	r1, r5
   1dc5e:	301a      	adds	r0, #26
   1dc60:	f7fd fee3 	bl	1ba2a <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
   1dc64:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1dc68:	2107      	movs	r1, #7
   1dc6a:	f7ff fe4b 	bl	1d904 <atomic_set_bit>
	return 0;
   1dc6e:	2000      	movs	r0, #0
}
   1dc70:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1dc72:	2008      	movs	r0, #8
   1dc74:	e7fc      	b.n	1dc70 <smp_encrypt_info+0x38>

0001dc76 <atomic_test_and_clear_bit>:
{
   1dc76:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   1dc78:	2301      	movs	r3, #1
   1dc7a:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   1dc7e:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1dc80:	f3bf 8f5b 	dmb	ish
   1dc84:	e850 3f00 	ldrex	r3, [r0]
   1dc88:	ea03 0c02 	and.w	ip, r3, r2
   1dc8c:	e840 ce00 	strex	lr, ip, [r0]
   1dc90:	f1be 0f00 	cmp.w	lr, #0
   1dc94:	d1f6      	bne.n	1dc84 <atomic_test_and_clear_bit+0xe>
   1dc96:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   1dc9a:	420b      	tst	r3, r1
}
   1dc9c:	bf14      	ite	ne
   1dc9e:	2001      	movne	r0, #1
   1dca0:	2000      	moveq	r0, #0
   1dca2:	f85d fb04 	ldr.w	pc, [sp], #4

0001dca6 <smp_reset>:
{
   1dca6:	b538      	push	{r3, r4, r5, lr}
   1dca8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
   1dcaa:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
   1dcac:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   1dcb0:	f001 f98c 	bl	1efcc <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   1dcb4:	2300      	movs	r3, #0
   1dcb6:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   1dcba:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1dcbe:	f3bf 8f5b 	dmb	ish
   1dcc2:	e850 2f00 	ldrex	r2, [r0]
   1dcc6:	e840 3100 	strex	r1, r3, [r0]
   1dcca:	2900      	cmp	r1, #0
   1dccc:	d1f9      	bne.n	1dcc2 <smp_reset+0x1c>
   1dcce:	f3bf 8f5b 	dmb	ish
   1dcd2:	f3bf 8f5b 	dmb	ish
   1dcd6:	34bc      	adds	r4, #188	; 0xbc
   1dcd8:	e854 2f00 	ldrex	r2, [r4]
   1dcdc:	e844 3100 	strex	r1, r3, [r4]
   1dce0:	2900      	cmp	r1, #0
   1dce2:	d1f9      	bne.n	1dcd8 <smp_reset+0x32>
   1dce4:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
   1dce8:	7a6b      	ldrb	r3, [r5, #9]
   1dcea:	7aaa      	ldrb	r2, [r5, #10]
   1dcec:	429a      	cmp	r2, r3
		conn->required_sec_level = conn->sec_level;
   1dcee:	bf18      	it	ne
   1dcf0:	72ab      	strbne	r3, [r5, #10]
}
   1dcf2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   1dcf6:	2101      	movs	r1, #1
   1dcf8:	f7ff be04 	b.w	1d904 <atomic_set_bit>

0001dcfc <smp_error>:
{
   1dcfc:	b573      	push	{r0, r1, r4, r5, r6, lr}
   1dcfe:	4606      	mov	r6, r0
   1dd00:	460c      	mov	r4, r1
	smp_pairing_complete(smp, reason);
   1dd02:	f7ec fd2f 	bl	a764 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   1dd06:	2105      	movs	r1, #5
   1dd08:	4630      	mov	r0, r6
   1dd0a:	f7ff fefb 	bl	1db04 <smp_create_pdu.isra.0>
	if (!buf) {
   1dd0e:	4605      	mov	r5, r0
   1dd10:	b178      	cbz	r0, 1dd32 <smp_error+0x36>
	rsp = net_buf_add(buf, sizeof(*rsp));
   1dd12:	2101      	movs	r1, #1
   1dd14:	3008      	adds	r0, #8
   1dd16:	f000 fc3d 	bl	1e594 <net_buf_simple_add>
	rsp->reason = reason;
   1dd1a:	7004      	strb	r4, [r0, #0]
   1dd1c:	2400      	movs	r4, #0
   1dd1e:	6830      	ldr	r0, [r6, #0]
   1dd20:	9400      	str	r4, [sp, #0]
   1dd22:	4623      	mov	r3, r4
   1dd24:	462a      	mov	r2, r5
   1dd26:	2106      	movs	r1, #6
   1dd28:	f7fe fdad 	bl	1c886 <bt_l2cap_send_cb>
	return 0;
   1dd2c:	4620      	mov	r0, r4
}
   1dd2e:	b002      	add	sp, #8
   1dd30:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   1dd32:	f06f 0036 	mvn.w	r0, #54	; 0x36
   1dd36:	e7fa      	b.n	1dd2e <smp_error+0x32>

0001dd38 <smp_timeout>:
{
   1dd38:	b510      	push	{r4, lr}
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1dd3a:	2108      	movs	r1, #8
{
   1dd3c:	4604      	mov	r4, r0
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   1dd3e:	f5a0 70d4 	sub.w	r0, r0, #424	; 0x1a8
   1dd42:	f7ec fd0f 	bl	a764 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1dd46:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   1dd4a:	2104      	movs	r1, #4
}
   1dd4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1dd50:	f7ff bdd8 	b.w	1d904 <atomic_set_bit>

0001dd54 <smp_signing_info>:
{
   1dd54:	b570      	push	{r4, r5, r6, lr}
   1dd56:	460b      	mov	r3, r1
   1dd58:	4605      	mov	r5, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dd5a:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   1dd5c:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dd60:	f7ff fec7 	bl	1daf2 <atomic_test_bit>
   1dd64:	b160      	cbz	r0, 1dd80 <smp_signing_info+0x2c>
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1dd66:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
   1dd68:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
   1dd6a:	f104 0288 	add.w	r2, r4, #136	; 0x88
   1dd6e:	2010      	movs	r0, #16
   1dd70:	f000 fb64 	bl	1e43c <bt_keys_get_type>
		if (!keys) {
   1dd74:	b198      	cbz	r0, 1dd9e <smp_signing_info+0x4a>
		memcpy(keys->remote_csrk.val, req->csrk,
   1dd76:	2210      	movs	r2, #16
   1dd78:	4631      	mov	r1, r6
   1dd7a:	3054      	adds	r0, #84	; 0x54
   1dd7c:	f7fd fe55 	bl	1ba2a <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
   1dd80:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
   1dd84:	f023 0304 	bic.w	r3, r3, #4
   1dd88:	f885 31a1 	strb.w	r3, [r5, #417]	; 0x1a1
	if (!smp->local_dist && !smp->remote_dist) {
   1dd8c:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
   1dd90:	b91c      	cbnz	r4, 1dd9a <smp_signing_info+0x46>
		smp_pairing_complete(smp, 0);
   1dd92:	4621      	mov	r1, r4
   1dd94:	4628      	mov	r0, r5
   1dd96:	f7ec fce5 	bl	a764 <smp_pairing_complete>
	return 0;
   1dd9a:	2000      	movs	r0, #0
   1dd9c:	e000      	b.n	1dda0 <smp_signing_info+0x4c>
			return BT_SMP_ERR_UNSPECIFIED;
   1dd9e:	2008      	movs	r0, #8
}
   1dda0:	bd70      	pop	{r4, r5, r6, pc}

0001dda2 <smp_master_ident>:
{
   1dda2:	b570      	push	{r4, r5, r6, lr}
   1dda4:	460b      	mov	r3, r1
   1dda6:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1dda8:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   1ddaa:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1ddae:	f7ff fea0 	bl	1daf2 <atomic_test_bit>
   1ddb2:	b1c8      	cbz	r0, 1dde8 <smp_master_ident+0x46>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ddb4:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
   1ddb6:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
   1ddb8:	f105 0288 	add.w	r2, r5, #136	; 0x88
   1ddbc:	2004      	movs	r0, #4
   1ddbe:	f000 fb3d 	bl	1e43c <bt_keys_get_type>
		if (!keys) {
   1ddc2:	4605      	mov	r5, r0
   1ddc4:	b330      	cbz	r0, 1de14 <smp_master_ident+0x72>
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
   1ddc6:	2202      	movs	r2, #2
   1ddc8:	4631      	mov	r1, r6
   1ddca:	3018      	adds	r0, #24
   1ddcc:	f7fd fe2d 	bl	1ba2a <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
   1ddd0:	2208      	movs	r2, #8
   1ddd2:	1cb1      	adds	r1, r6, #2
   1ddd4:	f105 0010 	add.w	r0, r5, #16
   1ddd8:	f7fd fe27 	bl	1ba2a <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
   1dddc:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1dde0:	f023 0301 	bic.w	r3, r3, #1
   1dde4:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
   1dde8:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
   1ddec:	079a      	lsls	r2, r3, #30
   1ddee:	d50d      	bpl.n	1de0c <smp_master_ident+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
   1ddf0:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1ddf2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1ddf6:	f7ff fd85 	bl	1d904 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1ddfa:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
   1ddfe:	b91d      	cbnz	r5, 1de08 <smp_master_ident+0x66>
		smp_pairing_complete(smp, 0);
   1de00:	4629      	mov	r1, r5
   1de02:	4620      	mov	r0, r4
   1de04:	f7ec fcae 	bl	a764 <smp_pairing_complete>
	return 0;
   1de08:	2000      	movs	r0, #0
   1de0a:	e004      	b.n	1de16 <smp_master_ident+0x74>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1de0c:	075b      	lsls	r3, r3, #29
   1de0e:	d5f4      	bpl.n	1ddfa <smp_master_ident+0x58>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1de10:	210a      	movs	r1, #10
   1de12:	e7ee      	b.n	1ddf2 <smp_master_ident+0x50>
			return BT_SMP_ERR_UNSPECIFIED;
   1de14:	2008      	movs	r0, #8
}
   1de16:	bd70      	pop	{r4, r5, r6, pc}

0001de18 <smp_check_complete.part.0>:
static void smp_check_complete(struct bt_conn *conn, uint8_t dist_complete)
   1de18:	b510      	push	{r4, lr}
   1de1a:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   1de1c:	2106      	movs	r1, #6
   1de1e:	f7fe fd78 	bl	1c912 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   1de22:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   1de26:	ea22 0104 	bic.w	r1, r2, r4
   1de2a:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   1de2e:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   1de32:	b919      	cbnz	r1, 1de3c <smp_check_complete.part.0+0x24>
}
   1de34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   1de38:	f7ec bc94 	b.w	a764 <smp_pairing_complete>
}
   1de3c:	bd10      	pop	{r4, pc}

0001de3e <smp_id_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1de3e:	7883      	ldrb	r3, [r0, #2]
   1de40:	2b01      	cmp	r3, #1
   1de42:	d102      	bne.n	1de4a <smp_id_sent+0xc>
   1de44:	2102      	movs	r1, #2
   1de46:	f7ff bfe7 	b.w	1de18 <smp_check_complete.part.0>
}
   1de4a:	4770      	bx	lr

0001de4c <smp_sign_info_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1de4c:	7883      	ldrb	r3, [r0, #2]
   1de4e:	2b01      	cmp	r3, #1
   1de50:	d102      	bne.n	1de58 <smp_sign_info_sent+0xc>
   1de52:	2104      	movs	r1, #4
   1de54:	f7ff bfe0 	b.w	1de18 <smp_check_complete.part.0>
}
   1de58:	4770      	bx	lr

0001de5a <smp_ident_sent>:
	if (conn->type == BT_CONN_TYPE_LE) {
   1de5a:	7881      	ldrb	r1, [r0, #2]
   1de5c:	2901      	cmp	r1, #1
   1de5e:	d101      	bne.n	1de64 <smp_ident_sent+0xa>
   1de60:	f7ff bfda 	b.w	1de18 <smp_check_complete.part.0>
}
   1de64:	4770      	bx	lr

0001de66 <smp_c1>:
{
   1de66:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1de6a:	b089      	sub	sp, #36	; 0x24
   1de6c:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   1de70:	4699      	mov	r9, r3
	p1[0] = ia->type;
   1de72:	783b      	ldrb	r3, [r7, #0]
{
   1de74:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   1de76:	f88d 3000 	strb.w	r3, [sp]
{
   1de7a:	460c      	mov	r4, r1
	p1[1] = ra->type;
   1de7c:	f898 3000 	ldrb.w	r3, [r8]
   1de80:	f88d 3001 	strb.w	r3, [sp, #1]
{
   1de84:	4611      	mov	r1, r2
   1de86:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   1de88:	2207      	movs	r2, #7
   1de8a:	f10d 0002 	add.w	r0, sp, #2
   1de8e:	f7fd fdcc 	bl	1ba2a <memcpy>
	memcpy(p1 + 9, pres, 7);
   1de92:	2207      	movs	r2, #7
   1de94:	4649      	mov	r1, r9
   1de96:	f10d 0009 	add.w	r0, sp, #9
   1de9a:	f7fd fdc6 	bl	1ba2a <memcpy>
	while (len--) {
   1de9e:	f104 0010 	add.w	r0, r4, #16
   1dea2:	4629      	mov	r1, r5
   1dea4:	466a      	mov	r2, sp
   1dea6:	4284      	cmp	r4, r0
   1dea8:	d127      	bne.n	1defa <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   1deaa:	462a      	mov	r2, r5
   1deac:	4629      	mov	r1, r5
   1deae:	4630      	mov	r0, r6
   1deb0:	f7ef fffc 	bl	deac <bt_encrypt_le>
	if (err) {
   1deb4:	4604      	mov	r4, r0
   1deb6:	b9e0      	cbnz	r0, 1def2 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   1deb8:	2206      	movs	r2, #6
   1deba:	f108 0101 	add.w	r1, r8, #1
   1debe:	a804      	add	r0, sp, #16
   1dec0:	f7fd fdb3 	bl	1ba2a <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   1dec4:	2206      	movs	r2, #6
   1dec6:	1c79      	adds	r1, r7, #1
   1dec8:	f10d 0016 	add.w	r0, sp, #22
   1decc:	f7fd fdad 	bl	1ba2a <memcpy>
	(void)memset(p2 + 12, 0, 4);
   1ded0:	2204      	movs	r2, #4
   1ded2:	4621      	mov	r1, r4
   1ded4:	a807      	add	r0, sp, #28
   1ded6:	f7fd fdd3 	bl	1ba80 <memset>
	while (len--) {
   1deda:	f105 0010 	add.w	r0, r5, #16
   1dede:	462a      	mov	r2, r5
   1dee0:	ab04      	add	r3, sp, #16
   1dee2:	4282      	cmp	r2, r0
   1dee4:	d112      	bne.n	1df0c <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   1dee6:	462a      	mov	r2, r5
   1dee8:	4629      	mov	r1, r5
   1deea:	4630      	mov	r0, r6
   1deec:	f7ef ffde 	bl	deac <bt_encrypt_le>
   1def0:	4604      	mov	r4, r0
}
   1def2:	4620      	mov	r0, r4
   1def4:	b009      	add	sp, #36	; 0x24
   1def6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   1defa:	f814 3b01 	ldrb.w	r3, [r4], #1
   1defe:	f812 cb01 	ldrb.w	ip, [r2], #1
   1df02:	ea83 030c 	eor.w	r3, r3, ip
   1df06:	f801 3b01 	strb.w	r3, [r1], #1
   1df0a:	e7cc      	b.n	1dea6 <smp_c1+0x40>
   1df0c:	f812 1b01 	ldrb.w	r1, [r2], #1
   1df10:	f813 4b01 	ldrb.w	r4, [r3], #1
   1df14:	4061      	eors	r1, r4
   1df16:	f802 1c01 	strb.w	r1, [r2, #-1]
   1df1a:	e7e2      	b.n	1dee2 <smp_c1+0x7c>

0001df1c <legacy_pairing_confirm>:
{
   1df1c:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1df1e:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   1df22:	b085      	sub	sp, #20
   1df24:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1df26:	2109      	movs	r1, #9
   1df28:	4638      	mov	r0, r7
   1df2a:	f7ff fde2 	bl	1daf2 <atomic_test_bit>
   1df2e:	bb90      	cbnz	r0, 1df96 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   1df30:	2104      	movs	r1, #4
   1df32:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   1df36:	f7ff fce5 	bl	1d904 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1df3a:	2103      	movs	r1, #3
   1df3c:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   1df3e:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   1df40:	f7ff fde0 	bl	1db04 <smp_create_pdu.isra.0>
	if (!buf) {
   1df44:	4606      	mov	r6, r0
   1df46:	b1c0      	cbz	r0, 1df7a <legacy_pairing_confirm+0x5e>
	req = net_buf_add(buf, sizeof(*req));
   1df48:	2110      	movs	r1, #16
   1df4a:	3008      	adds	r0, #8
   1df4c:	f000 fb22 	bl	1e594 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   1df50:	f104 0396 	add.w	r3, r4, #150	; 0x96
   1df54:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   1df56:	9002      	str	r0, [sp, #8]
   1df58:	9301      	str	r3, [sp, #4]
   1df5a:	9400      	str	r4, [sp, #0]
   1df5c:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   1df60:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   1df64:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   1df68:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   1df6c:	f7ff ff7b 	bl	1de66 <smp_c1>
   1df70:	4604      	mov	r4, r0
   1df72:	b120      	cbz	r0, 1df7e <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   1df74:	4630      	mov	r0, r6
   1df76:	f7f8 ff43 	bl	16e00 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   1df7a:	2008      	movs	r0, #8
   1df7c:	e009      	b.n	1df92 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   1df7e:	4602      	mov	r2, r0
   1df80:	4631      	mov	r1, r6
   1df82:	4628      	mov	r0, r5
   1df84:	f7ec f802 	bl	9f8c <smp_send.isra.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1df88:	4621      	mov	r1, r4
   1df8a:	4638      	mov	r0, r7
   1df8c:	f7ff fd86 	bl	1da9c <atomic_clear_bit>
	return 0;
   1df90:	2000      	movs	r0, #0
}
   1df92:	b005      	add	sp, #20
   1df94:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1df96:	2100      	movs	r1, #0
   1df98:	4638      	mov	r0, r7
   1df9a:	f7ff fcb3 	bl	1d904 <atomic_set_bit>
   1df9e:	e7f7      	b.n	1df90 <legacy_pairing_confirm+0x74>

0001dfa0 <smp_pairing_confirm>:
{
   1dfa0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
   1dfa2:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1dfa4:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
   1dfa8:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
   1dfaa:	210a      	movs	r1, #10
   1dfac:	4628      	mov	r0, r5
   1dfae:	f7ff fd75 	bl	1da9c <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
   1dfb2:	4631      	mov	r1, r6
   1dfb4:	2210      	movs	r2, #16
   1dfb6:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
   1dfba:	f7fd fd36 	bl	1ba2a <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1dfbe:	2105      	movs	r1, #5
   1dfc0:	4628      	mov	r0, r5
   1dfc2:	f7ff fd96 	bl	1daf2 <atomic_test_bit>
   1dfc6:	b920      	cbnz	r0, 1dfd2 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
   1dfc8:	4620      	mov	r0, r4
}
   1dfca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
   1dfce:	f7ff bfa5 	b.w	1df1c <legacy_pairing_confirm>
	switch (smp->method) {
   1dfd2:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   1dfd6:	2b01      	cmp	r3, #1
   1dfd8:	d00b      	beq.n	1dff2 <smp_pairing_confirm+0x52>
   1dfda:	2b02      	cmp	r3, #2
   1dfdc:	d115      	bne.n	1e00a <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
   1dfde:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   1dfe2:	2104      	movs	r1, #4
   1dfe4:	f7ff fc8e 	bl	1d904 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
   1dfe8:	4620      	mov	r0, r4
}
   1dfea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
   1dfee:	f7eb bfe5 	b.w	9fbc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   1dff2:	2109      	movs	r1, #9
   1dff4:	4628      	mov	r0, r5
   1dff6:	f7ff fd7c 	bl	1daf2 <atomic_test_bit>
   1dffa:	2800      	cmp	r0, #0
   1dffc:	d0ef      	beq.n	1dfde <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   1dffe:	4628      	mov	r0, r5
   1e000:	2100      	movs	r1, #0
   1e002:	f7ff fc7f 	bl	1d904 <atomic_set_bit>
			return 0;
   1e006:	2000      	movs	r0, #0
}
   1e008:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
   1e00a:	2008      	movs	r0, #8
   1e00c:	e7fc      	b.n	1e008 <smp_pairing_confirm+0x68>

0001e00e <smp_ident_addr_info>:
{
   1e00e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
   1e012:	688f      	ldr	r7, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e014:	783b      	ldrb	r3, [r7, #0]
{
   1e016:	4605      	mov	r5, r0
   1e018:	b123      	cbz	r3, 1e024 <smp_ident_addr_info+0x16>
	if (!bt_addr_le_is_identity(&req->addr)) {
   1e01a:	79bb      	ldrb	r3, [r7, #6]
   1e01c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e020:	2bc0      	cmp	r3, #192	; 0xc0
   1e022:	d155      	bne.n	1e0d0 <smp_ident_addr_info+0xc2>
	struct bt_conn *conn = smp->chan.chan.conn;
   1e024:	4628      	mov	r0, r5
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e026:	210c      	movs	r1, #12
	struct bt_conn *conn = smp->chan.chan.conn;
   1e028:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e02c:	f7ff fd61 	bl	1daf2 <atomic_test_bit>
   1e030:	b3a8      	cbz	r0, 1e09e <smp_ident_addr_info+0x90>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
   1e032:	f104 0888 	add.w	r8, r4, #136	; 0x88
   1e036:	7a21      	ldrb	r1, [r4, #8]
   1e038:	4642      	mov	r2, r8
   1e03a:	2002      	movs	r0, #2
   1e03c:	f000 f9fe 	bl	1e43c <bt_keys_get_type>
		if (!keys) {
   1e040:	4606      	mov	r6, r0
   1e042:	2800      	cmp	r0, #0
   1e044:	d047      	beq.n	1e0d6 <smp_ident_addr_info+0xc8>
		if (conn->role == BT_HCI_ROLE_MASTER) {
   1e046:	78e3      	ldrb	r3, [r4, #3]
   1e048:	2b00      	cmp	r3, #0
   1e04a:	d13e      	bne.n	1e0ca <smp_ident_addr_info+0xbc>
			dst = &conn->le.resp_addr;
   1e04c:	f104 0196 	add.w	r1, r4, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1e050:	780b      	ldrb	r3, [r1, #0]
   1e052:	2b01      	cmp	r3, #1
   1e054:	d120      	bne.n	1e098 <smp_ident_addr_info+0x8a>
		if (bt_addr_le_is_rpa(dst)) {
   1e056:	798b      	ldrb	r3, [r1, #6]
   1e058:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e05c:	2b40      	cmp	r3, #64	; 0x40
   1e05e:	d11b      	bne.n	1e098 <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   1e060:	2206      	movs	r2, #6
   1e062:	3101      	adds	r1, #1
   1e064:	f106 003a 	add.w	r0, r6, #58	; 0x3a
   1e068:	f7fd fcdf 	bl	1ba2a <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
   1e06c:	f894 3088 	ldrb.w	r3, [r4, #136]	; 0x88
   1e070:	b193      	cbz	r3, 1e098 <smp_ident_addr_info+0x8a>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
   1e072:	f894 308e 	ldrb.w	r3, [r4, #142]	; 0x8e
   1e076:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1e07a:	2bc0      	cmp	r3, #192	; 0xc0
   1e07c:	d00c      	beq.n	1e098 <smp_ident_addr_info+0x8a>
	memcpy(dst, src, sizeof(*dst));
   1e07e:	2207      	movs	r2, #7
   1e080:	4639      	mov	r1, r7
   1e082:	1c70      	adds	r0, r6, #1
   1e084:	f7fd fcd1 	bl	1ba2a <memcpy>
   1e088:	2207      	movs	r2, #7
   1e08a:	4639      	mov	r1, r7
   1e08c:	4640      	mov	r0, r8
   1e08e:	f7fd fccc 	bl	1ba2a <memcpy>
				bt_conn_identity_resolved(conn);
   1e092:	4620      	mov	r0, r4
   1e094:	f7e9 fdca 	bl	7c2c <bt_conn_identity_resolved>
		bt_id_add(keys);
   1e098:	4630      	mov	r0, r6
   1e09a:	f7e8 fd57 	bl	6b4c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1e09e:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
   1e0a2:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e0a6:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
   1e0a8:	f885 21a1 	strb.w	r2, [r5, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
   1e0ac:	d504      	bpl.n	1e0b8 <smp_ident_addr_info+0xaa>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
   1e0ae:	210a      	movs	r1, #10
   1e0b0:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   1e0b4:	f7ff fc26 	bl	1d904 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
   1e0b8:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
   1e0bc:	b91c      	cbnz	r4, 1e0c6 <smp_ident_addr_info+0xb8>
		smp_pairing_complete(smp, 0);
   1e0be:	4621      	mov	r1, r4
   1e0c0:	4628      	mov	r0, r5
   1e0c2:	f7ec fb4f 	bl	a764 <smp_pairing_complete>
	return 0;
   1e0c6:	2000      	movs	r0, #0
   1e0c8:	e003      	b.n	1e0d2 <smp_ident_addr_info+0xc4>
			dst = &conn->le.init_addr;
   1e0ca:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   1e0ce:	e7bf      	b.n	1e050 <smp_ident_addr_info+0x42>
		return BT_SMP_ERR_INVALID_PARAMS;
   1e0d0:	200a      	movs	r0, #10
}
   1e0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return BT_SMP_ERR_UNSPECIFIED;
   1e0d6:	2008      	movs	r0, #8
   1e0d8:	e7fb      	b.n	1e0d2 <smp_ident_addr_info+0xc4>

0001e0da <bt_smp_request_ltk>:
{
   1e0da:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   1e0de:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
   1e0e0:	e9cd 2300 	strd	r2, r3, [sp]
   1e0e4:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1e0e6:	f7ff fc0a 	bl	1d8fe <smp_chan_get>
	if (!smp) {
   1e0ea:	4605      	mov	r5, r0
   1e0ec:	2800      	cmp	r0, #0
   1e0ee:	f000 809d 	beq.w	1e22c <bt_smp_request_ltk+0x152>
	if (ediv == 0U && rand == 0U &&
   1e0f2:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
   1e0f6:	f1b9 0f00 	cmp.w	r9, #0
   1e0fa:	d12d      	bne.n	1e158 <bt_smp_request_ltk+0x7e>
   1e0fc:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e100:	4313      	orrs	r3, r2
   1e102:	d129      	bne.n	1e158 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1e104:	f100 08bc 	add.w	r8, r0, #188	; 0xbc
   1e108:	2103      	movs	r1, #3
   1e10a:	4640      	mov	r0, r8
   1e10c:	f7ff fcf1 	bl	1daf2 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   1e110:	b310      	cbz	r0, 1e158 <bt_smp_request_ltk+0x7e>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   1e112:	2101      	movs	r1, #1
   1e114:	4640      	mov	r0, r8
   1e116:	f7ff fcec 	bl	1daf2 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   1e11a:	4606      	mov	r6, r0
   1e11c:	b1e0      	cbz	r0, 1e158 <bt_smp_request_ltk+0x7e>
	return MIN(req->max_key_size, rsp->max_key_size);
   1e11e:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   1e122:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   1e126:	429c      	cmp	r4, r3
   1e128:	bf28      	it	cs
   1e12a:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   1e12c:	4622      	mov	r2, r4
   1e12e:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   1e132:	4638      	mov	r0, r7
   1e134:	f7fd fc79 	bl	1ba2a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1e138:	2c0f      	cmp	r4, #15
   1e13a:	d805      	bhi.n	1e148 <bt_smp_request_ltk+0x6e>
			(void)memset(ltk + enc_size, 0,
   1e13c:	f1c4 0210 	rsb	r2, r4, #16
   1e140:	4649      	mov	r1, r9
   1e142:	1938      	adds	r0, r7, r4
   1e144:	f7fd fc9c 	bl	1ba80 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1e148:	2101      	movs	r1, #1
   1e14a:	4640      	mov	r0, r8
   1e14c:	f7ff fbda 	bl	1d904 <atomic_set_bit>
}
   1e150:	4630      	mov	r0, r6
   1e152:	b003      	add	sp, #12
   1e154:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   1e158:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   1e15c:	b983      	cbnz	r3, 1e180 <bt_smp_request_ltk+0xa6>
					     &conn->le.dst);
   1e15e:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   1e162:	7a21      	ldrb	r1, [r4, #8]
   1e164:	4632      	mov	r2, r6
   1e166:	2020      	movs	r0, #32
   1e168:	f7ec ff76 	bl	b058 <bt_keys_find>
   1e16c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   1e170:	b930      	cbnz	r0, 1e180 <bt_smp_request_ltk+0xa6>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   1e172:	7a21      	ldrb	r1, [r4, #8]
   1e174:	4632      	mov	r2, r6
   1e176:	2001      	movs	r0, #1
   1e178:	f7ec ff6e 	bl	b058 <bt_keys_find>
   1e17c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   1e180:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
   1e184:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e188:	b9ce      	cbnz	r6, 1e1be <bt_smp_request_ltk+0xe4>
   1e18a:	e9dd 2300 	ldrd	r2, r3, [sp]
   1e18e:	4313      	orrs	r3, r2
   1e190:	d115      	bne.n	1e1be <bt_smp_request_ltk+0xe4>
   1e192:	2800      	cmp	r0, #0
   1e194:	d03c      	beq.n	1e210 <bt_smp_request_ltk+0x136>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   1e196:	89c3      	ldrh	r3, [r0, #14]
   1e198:	069a      	lsls	r2, r3, #26
   1e19a:	d511      	bpl.n	1e1c0 <bt_smp_request_ltk+0xe6>
		enc_size = conn->le.keys->enc_size;
   1e19c:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   1e19e:	f100 011a 	add.w	r1, r0, #26
   1e1a2:	4622      	mov	r2, r4
   1e1a4:	4638      	mov	r0, r7
   1e1a6:	f7fd fc40 	bl	1ba2a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1e1aa:	2c0f      	cmp	r4, #15
   1e1ac:	d805      	bhi.n	1e1ba <bt_smp_request_ltk+0xe0>
			(void)memset(ltk + enc_size, 0,
   1e1ae:	f1c4 0210 	rsb	r2, r4, #16
   1e1b2:	4631      	mov	r1, r6
   1e1b4:	1938      	adds	r0, r7, r4
   1e1b6:	f7fd fc63 	bl	1ba80 <memset>
		return true;
   1e1ba:	2601      	movs	r6, #1
   1e1bc:	e7c8      	b.n	1e150 <bt_smp_request_ltk+0x76>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1e1be:	b338      	cbz	r0, 1e210 <bt_smp_request_ltk+0x136>
   1e1c0:	89c3      	ldrh	r3, [r0, #14]
   1e1c2:	07db      	lsls	r3, r3, #31
   1e1c4:	d524      	bpl.n	1e210 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1e1c6:	2208      	movs	r2, #8
   1e1c8:	4669      	mov	r1, sp
   1e1ca:	3068      	adds	r0, #104	; 0x68
   1e1cc:	f7fd fc1d 	bl	1ba0a <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   1e1d0:	b9f0      	cbnz	r0, 1e210 <bt_smp_request_ltk+0x136>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   1e1d2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e1d6:	2202      	movs	r2, #2
   1e1d8:	a90a      	add	r1, sp, #40	; 0x28
   1e1da:	3070      	adds	r0, #112	; 0x70
   1e1dc:	f7fd fc15 	bl	1ba0a <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   1e1e0:	4606      	mov	r6, r0
   1e1e2:	b9a8      	cbnz	r0, 1e210 <bt_smp_request_ltk+0x136>
		enc_size = conn->le.keys->enc_size;
   1e1e4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1e1e8:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   1e1ea:	4638      	mov	r0, r7
   1e1ec:	4622      	mov	r2, r4
   1e1ee:	3172      	adds	r1, #114	; 0x72
   1e1f0:	f7fd fc1b 	bl	1ba2a <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   1e1f4:	2c0f      	cmp	r4, #15
   1e1f6:	d805      	bhi.n	1e204 <bt_smp_request_ltk+0x12a>
			(void)memset(ltk + enc_size, 0,
   1e1f8:	f1c4 0210 	rsb	r2, r4, #16
   1e1fc:	4631      	mov	r1, r6
   1e1fe:	1938      	adds	r0, r7, r4
   1e200:	f7fd fc3e 	bl	1ba80 <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   1e204:	2101      	movs	r1, #1
   1e206:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1e20a:	f7ff fb7b 	bl	1d904 <atomic_set_bit>
		return true;
   1e20e:	e7d4      	b.n	1e1ba <bt_smp_request_ltk+0xe0>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   1e210:	210e      	movs	r1, #14
   1e212:	f105 00bc 	add.w	r0, r5, #188	; 0xbc
   1e216:	f7ff fc6c 	bl	1daf2 <atomic_test_bit>
   1e21a:	b120      	cbz	r0, 1e226 <bt_smp_request_ltk+0x14c>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   1e21c:	2202      	movs	r2, #2
   1e21e:	2106      	movs	r1, #6
   1e220:	4620      	mov	r0, r4
   1e222:	f7e9 fd1d 	bl	7c60 <bt_conn_security_changed>
	smp_reset(smp);
   1e226:	4628      	mov	r0, r5
   1e228:	f7ff fd3d 	bl	1dca6 <smp_reset>
	return false;
   1e22c:	2600      	movs	r6, #0
   1e22e:	e78f      	b.n	1e150 <bt_smp_request_ltk+0x76>

0001e230 <bt_smp_sign_verify>:
{
   1e230:	b530      	push	{r4, r5, lr}
	return buf->data + buf->len;
   1e232:	898b      	ldrh	r3, [r1, #12]
   1e234:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1e236:	6889      	ldr	r1, [r1, #8]
{
   1e238:	4605      	mov	r5, r0
   1e23a:	b085      	sub	sp, #20
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
   1e23c:	3b0c      	subs	r3, #12
   1e23e:	4419      	add	r1, r3
   1e240:	220c      	movs	r2, #12
   1e242:	a801      	add	r0, sp, #4
   1e244:	f7fd fbf1 	bl	1ba2a <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
   1e248:	7a29      	ldrb	r1, [r5, #8]
   1e24a:	f105 0288 	add.w	r2, r5, #136	; 0x88
   1e24e:	2010      	movs	r0, #16
   1e250:	f7ec ff02 	bl	b058 <bt_keys_find>
	if (!keys) {
   1e254:	4605      	mov	r5, r0
   1e256:	b300      	cbz	r0, 1e29a <bt_smp_sign_verify+0x6a>
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
   1e258:	6e43      	ldr	r3, [r0, #100]	; 0x64
   1e25a:	9300      	str	r3, [sp, #0]
   1e25c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
   1e25e:	68a0      	ldr	r0, [r4, #8]
   1e260:	3b0c      	subs	r3, #12
   1e262:	2204      	movs	r2, #4
   1e264:	4669      	mov	r1, sp
   1e266:	4418      	add	r0, r3
   1e268:	f7fd fbdf 	bl	1ba2a <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
   1e26c:	89a2      	ldrh	r2, [r4, #12]
   1e26e:	68a1      	ldr	r1, [r4, #8]
   1e270:	3a0c      	subs	r2, #12
   1e272:	b292      	uxth	r2, r2
   1e274:	f105 0054 	add.w	r0, r5, #84	; 0x54
   1e278:	f7ff fb6e 	bl	1d958 <smp_sign_buf>
	if (err) {
   1e27c:	b980      	cbnz	r0, 1e2a0 <bt_smp_sign_verify+0x70>
   1e27e:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
   1e280:	68a1      	ldr	r1, [r4, #8]
   1e282:	3b0c      	subs	r3, #12
   1e284:	220c      	movs	r2, #12
   1e286:	4419      	add	r1, r3
   1e288:	a801      	add	r0, sp, #4
   1e28a:	f7fd fbbe 	bl	1ba0a <memcmp>
   1e28e:	b950      	cbnz	r0, 1e2a6 <bt_smp_sign_verify+0x76>
	keys->remote_csrk.cnt++;
   1e290:	6e6b      	ldr	r3, [r5, #100]	; 0x64
   1e292:	3301      	adds	r3, #1
   1e294:	666b      	str	r3, [r5, #100]	; 0x64
}
   1e296:	b005      	add	sp, #20
   1e298:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
   1e29a:	f06f 0001 	mvn.w	r0, #1
   1e29e:	e7fa      	b.n	1e296 <bt_smp_sign_verify+0x66>
		return -EIO;
   1e2a0:	f06f 0004 	mvn.w	r0, #4
   1e2a4:	e7f7      	b.n	1e296 <bt_smp_sign_verify+0x66>
		return -EBADMSG;
   1e2a6:	f06f 004c 	mvn.w	r0, #76	; 0x4c
   1e2aa:	e7f4      	b.n	1e296 <bt_smp_sign_verify+0x66>

0001e2ac <bt_smp_sign>:
{
   1e2ac:	b537      	push	{r0, r1, r2, r4, r5, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1e2ae:	f100 0288 	add.w	r2, r0, #136	; 0x88
{
   1e2b2:	460d      	mov	r5, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
   1e2b4:	7a01      	ldrb	r1, [r0, #8]
   1e2b6:	2008      	movs	r0, #8
   1e2b8:	f7ec fece 	bl	b058 <bt_keys_find>
	if (!keys) {
   1e2bc:	4604      	mov	r4, r0
   1e2be:	b1e8      	cbz	r0, 1e2fc <bt_smp_sign+0x50>
	net_buf_add(buf, 12);
   1e2c0:	210c      	movs	r1, #12
   1e2c2:	f105 0008 	add.w	r0, r5, #8
   1e2c6:	f000 f965 	bl	1e594 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
   1e2ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e2cc:	9301      	str	r3, [sp, #4]
   1e2ce:	89ab      	ldrh	r3, [r5, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
   1e2d0:	68a8      	ldr	r0, [r5, #8]
   1e2d2:	2204      	movs	r2, #4
   1e2d4:	3b0c      	subs	r3, #12
   1e2d6:	eb0d 0102 	add.w	r1, sp, r2
   1e2da:	4418      	add	r0, r3
   1e2dc:	f7fd fba5 	bl	1ba2a <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
   1e2e0:	89aa      	ldrh	r2, [r5, #12]
   1e2e2:	68a9      	ldr	r1, [r5, #8]
   1e2e4:	3a0c      	subs	r2, #12
   1e2e6:	b292      	uxth	r2, r2
   1e2e8:	f104 0040 	add.w	r0, r4, #64	; 0x40
   1e2ec:	f7ff fb34 	bl	1d958 <smp_sign_buf>
	if (err) {
   1e2f0:	b938      	cbnz	r0, 1e302 <bt_smp_sign+0x56>
	keys->local_csrk.cnt++;
   1e2f2:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1e2f4:	3301      	adds	r3, #1
   1e2f6:	6523      	str	r3, [r4, #80]	; 0x50
}
   1e2f8:	b003      	add	sp, #12
   1e2fa:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
   1e2fc:	f06f 0001 	mvn.w	r0, #1
   1e300:	e7fa      	b.n	1e2f8 <bt_smp_sign+0x4c>
		return -EIO;
   1e302:	f06f 0004 	mvn.w	r0, #4
   1e306:	e7f7      	b.n	1e2f8 <bt_smp_sign+0x4c>

0001e308 <bt_smp_irk_get>:
{
   1e308:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   1e30a:	2500      	movs	r5, #0
{
   1e30c:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   1e30e:	2210      	movs	r2, #16
   1e310:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   1e312:	e9cd 5500 	strd	r5, r5, [sp]
   1e316:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   1e31a:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   1e31c:	f7fd fb75 	bl	1ba0a <memcmp>
   1e320:	b180      	cbz	r0, 1e344 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   1e322:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   1e324:	220c      	movs	r2, #12
   1e326:	4629      	mov	r1, r5
   1e328:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   1e32a:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   1e32c:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   1e32e:	70e5      	strb	r5, [r4, #3]
   1e330:	1d20      	adds	r0, r4, #4
   1e332:	f7fd fba5 	bl	1ba80 <memset>
	err = bt_encrypt_le(key, res, res);
   1e336:	4622      	mov	r2, r4
   1e338:	4621      	mov	r1, r4
   1e33a:	4630      	mov	r0, r6
   1e33c:	f7ef fdb6 	bl	deac <bt_encrypt_le>
}
   1e340:	b004      	add	sp, #16
   1e342:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   1e344:	f06f 0015 	mvn.w	r0, #21
   1e348:	e7fa      	b.n	1e340 <bt_smp_irk_get+0x38>

0001e34a <bt_smp_update_keys>:
{
   1e34a:	b570      	push	{r4, r5, r6, lr}
   1e34c:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1e34e:	f7ff fad6 	bl	1d8fe <smp_chan_get>
	if (!smp) {
   1e352:	4605      	mov	r5, r0
   1e354:	2800      	cmp	r0, #0
   1e356:	d06e      	beq.n	1e436 <bt_smp_update_keys+0xec>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   1e358:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
   1e35c:	2103      	movs	r1, #3
   1e35e:	4630      	mov	r0, r6
   1e360:	f7ff fbc7 	bl	1daf2 <atomic_test_bit>
   1e364:	2800      	cmp	r0, #0
   1e366:	d066      	beq.n	1e436 <bt_smp_update_keys+0xec>
	if (conn->le.keys) {
   1e368:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e36c:	b108      	cbz	r0, 1e372 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
   1e36e:	f7ec fed3 	bl	b118 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1e372:	7a20      	ldrb	r0, [r4, #8]
   1e374:	f104 0188 	add.w	r1, r4, #136	; 0x88
   1e378:	f7ec fe2e 	bl	afd8 <bt_keys_get_addr>
   1e37c:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1e380:	b928      	cbnz	r0, 1e38e <bt_smp_update_keys+0x44>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e382:	4628      	mov	r0, r5
   1e384:	2108      	movs	r1, #8
}
   1e386:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1e38a:	f7ff bcb7 	b.w	1dcfc <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1e38e:	210d      	movs	r1, #13
   1e390:	4630      	mov	r0, r6
   1e392:	f7ff fbae 	bl	1daf2 <atomic_test_bit>
   1e396:	b128      	cbz	r0, 1e3a4 <bt_smp_update_keys+0x5a>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   1e398:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1e39c:	7b53      	ldrb	r3, [r2, #13]
   1e39e:	f043 0302 	orr.w	r3, r3, #2
   1e3a2:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   1e3a4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
   1e3a8:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   1e3ac:	2a03      	cmp	r2, #3
   1e3ae:	7b4b      	ldrb	r3, [r1, #13]
   1e3b0:	d838      	bhi.n	1e424 <bt_smp_update_keys+0xda>
   1e3b2:	b3d2      	cbz	r2, 1e42a <bt_smp_update_keys+0xe0>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1e3b4:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e3b8:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1e3ba:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   1e3be:	f895 20cc 	ldrb.w	r2, [r5, #204]	; 0xcc
   1e3c2:	4293      	cmp	r3, r2
   1e3c4:	bf28      	it	cs
   1e3c6:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1e3c8:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e3ca:	4630      	mov	r0, r6
   1e3cc:	2105      	movs	r1, #5
   1e3ce:	f7ff fb90 	bl	1daf2 <atomic_test_bit>
   1e3d2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1e3d6:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1e3d8:	b350      	cbz	r0, 1e430 <bt_smp_update_keys+0xe6>
		conn->le.keys->flags |= BT_KEYS_SC;
   1e3da:	f042 0210 	orr.w	r2, r2, #16
   1e3de:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   1e3e0:	210c      	movs	r1, #12
   1e3e2:	4630      	mov	r0, r6
   1e3e4:	f7ff fb85 	bl	1daf2 <atomic_test_bit>
   1e3e8:	b328      	cbz	r0, 1e436 <bt_smp_update_keys+0xec>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1e3ea:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e3ee:	2120      	movs	r1, #32
   1e3f0:	f000 f834 	bl	1e45c <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   1e3f4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e3f8:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   1e3fc:	2210      	movs	r2, #16
   1e3fe:	301a      	adds	r0, #26
   1e400:	f7fd fb13 	bl	1ba2a <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   1e404:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e408:	2208      	movs	r2, #8
   1e40a:	2100      	movs	r1, #0
   1e40c:	3010      	adds	r0, #16
   1e40e:	f7fd fb37 	bl	1ba80 <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1e412:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1e416:	2202      	movs	r2, #2
}
   1e418:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   1e41c:	2100      	movs	r1, #0
   1e41e:	3018      	adds	r0, #24
   1e420:	f7fd bb2e 	b.w	1ba80 <memset>
	switch (smp->method) {
   1e424:	3a05      	subs	r2, #5
   1e426:	2a01      	cmp	r2, #1
   1e428:	d9c4      	bls.n	1e3b4 <bt_smp_update_keys+0x6a>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1e42a:	f023 0301 	bic.w	r3, r3, #1
   1e42e:	e7c3      	b.n	1e3b8 <bt_smp_update_keys+0x6e>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   1e430:	f022 0210 	bic.w	r2, r2, #16
   1e434:	735a      	strb	r2, [r3, #13]
}
   1e436:	bd70      	pop	{r4, r5, r6, pc}

0001e438 <id_add>:
	bt_id_add(keys);
   1e438:	f7e8 bb88 	b.w	6b4c <bt_id_add>

0001e43c <bt_keys_get_type>:
{
   1e43c:	b570      	push	{r4, r5, r6, lr}
   1e43e:	4604      	mov	r4, r0
   1e440:	460d      	mov	r5, r1
   1e442:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   1e444:	f7ec fe08 	bl	b058 <bt_keys_find>
	if (keys) {
   1e448:	b938      	cbnz	r0, 1e45a <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   1e44a:	4631      	mov	r1, r6
   1e44c:	4628      	mov	r0, r5
   1e44e:	f7ec fdc3 	bl	afd8 <bt_keys_get_addr>
	if (!keys) {
   1e452:	b110      	cbz	r0, 1e45a <bt_keys_get_type+0x1e>
	keys->keys |= type;
   1e454:	89c3      	ldrh	r3, [r0, #14]
   1e456:	431c      	orrs	r4, r3
   1e458:	81c4      	strh	r4, [r0, #14]
}
   1e45a:	bd70      	pop	{r4, r5, r6, pc}

0001e45c <bt_keys_add_type>:
	keys->keys |= type;
   1e45c:	89c3      	ldrh	r3, [r0, #14]
   1e45e:	4319      	orrs	r1, r3
   1e460:	81c1      	strh	r1, [r0, #14]
}
   1e462:	4770      	bx	lr

0001e464 <keys_set>:
{
   1e464:	b570      	push	{r4, r5, r6, lr}
   1e466:	4605      	mov	r5, r0
   1e468:	b0a2      	sub	sp, #136	; 0x88
   1e46a:	4614      	mov	r4, r2
   1e46c:	4618      	mov	r0, r3
	if (!name) {
   1e46e:	b915      	cbnz	r5, 1e476 <keys_set+0x12>
			return -EINVAL;
   1e470:	f06f 0415 	mvn.w	r4, #21
   1e474:	e021      	b.n	1e4ba <keys_set+0x56>
	len = read_cb(cb_arg, val, sizeof(val));
   1e476:	2278      	movs	r2, #120	; 0x78
   1e478:	a904      	add	r1, sp, #16
   1e47a:	47a0      	blx	r4
	if (len < 0) {
   1e47c:	1e04      	subs	r4, r0, #0
   1e47e:	dbf7      	blt.n	1e470 <keys_set+0xc>
	err = bt_settings_decode_key(name, &addr);
   1e480:	a902      	add	r1, sp, #8
   1e482:	4628      	mov	r0, r5
   1e484:	f7fd fbaa 	bl	1bbdc <bt_settings_decode_key>
	if (err) {
   1e488:	4606      	mov	r6, r0
   1e48a:	2800      	cmp	r0, #0
   1e48c:	d1f0      	bne.n	1e470 <keys_set+0xc>
	settings_name_next(name, &next);
   1e48e:	a901      	add	r1, sp, #4
   1e490:	4628      	mov	r0, r5
   1e492:	f7fc f88a 	bl	1a5aa <settings_name_next>
	if (!next) {
   1e496:	9801      	ldr	r0, [sp, #4]
   1e498:	b120      	cbz	r0, 1e4a4 <keys_set+0x40>
		id = strtol(next, NULL, 10);
   1e49a:	220a      	movs	r2, #10
   1e49c:	4631      	mov	r1, r6
   1e49e:	f7fd fa0e 	bl	1b8be <strtol>
   1e4a2:	b2c0      	uxtb	r0, r0
	if (!len) {
   1e4a4:	b964      	cbnz	r4, 1e4c0 <keys_set+0x5c>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   1e4a6:	4601      	mov	r1, r0
   1e4a8:	aa02      	add	r2, sp, #8
   1e4aa:	203f      	movs	r0, #63	; 0x3f
   1e4ac:	f7ec fdd4 	bl	b058 <bt_keys_find>
		if (keys) {
   1e4b0:	b118      	cbz	r0, 1e4ba <keys_set+0x56>
			(void)memset(keys, 0, sizeof(*keys));
   1e4b2:	2284      	movs	r2, #132	; 0x84
   1e4b4:	4621      	mov	r1, r4
   1e4b6:	f7fd fae3 	bl	1ba80 <memset>
}
   1e4ba:	4620      	mov	r0, r4
   1e4bc:	b022      	add	sp, #136	; 0x88
   1e4be:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(id, &addr);
   1e4c0:	a902      	add	r1, sp, #8
   1e4c2:	f7ec fd89 	bl	afd8 <bt_keys_get_addr>
	if (!keys) {
   1e4c6:	b158      	cbz	r0, 1e4e0 <keys_set+0x7c>
	if (len != BT_KEYS_STORAGE_LEN) {
   1e4c8:	2c78      	cmp	r4, #120	; 0x78
   1e4ca:	d002      	beq.n	1e4d2 <keys_set+0x6e>
			bt_keys_clear(keys);
   1e4cc:	f7ec fe24 	bl	b118 <bt_keys_clear>
   1e4d0:	e7ce      	b.n	1e470 <keys_set+0xc>
		memcpy(keys->storage_start, val, len);
   1e4d2:	4622      	mov	r2, r4
   1e4d4:	a904      	add	r1, sp, #16
   1e4d6:	300c      	adds	r0, #12
   1e4d8:	f7fd faa7 	bl	1ba2a <memcpy>
	return 0;
   1e4dc:	2400      	movs	r4, #0
   1e4de:	e7ec      	b.n	1e4ba <keys_set+0x56>
		return -ENOMEM;
   1e4e0:	f06f 040b 	mvn.w	r4, #11
   1e4e4:	e7e9      	b.n	1e4ba <keys_set+0x56>

0001e4e6 <fixed_data_unref>:
}
   1e4e6:	4770      	bx	lr

0001e4e8 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1e4e8:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   1e4ea:	6849      	ldr	r1, [r1, #4]
   1e4ec:	6809      	ldr	r1, [r1, #0]
   1e4ee:	f7f8 bbfb 	b.w	16ce8 <net_buf_alloc_len>

0001e4f2 <net_buf_get>:
{
   1e4f2:	b570      	push	{r4, r5, r6, lr}
   1e4f4:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   1e4f6:	f7fa fb99 	bl	18c2c <z_impl_k_queue_get>
	if (!buf) {
   1e4fa:	4605      	mov	r5, r0
   1e4fc:	b128      	cbz	r0, 1e50a <net_buf_get+0x18>
   1e4fe:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e500:	7963      	ldrb	r3, [r4, #5]
   1e502:	f013 0301 	ands.w	r3, r3, #1
   1e506:	d102      	bne.n	1e50e <net_buf_get+0x1c>
	frag->frags = NULL;
   1e508:	6023      	str	r3, [r4, #0]
}
   1e50a:	4628      	mov	r0, r5
   1e50c:	bd70      	pop	{r4, r5, r6, pc}
   1e50e:	2300      	movs	r3, #0
   1e510:	2200      	movs	r2, #0
   1e512:	4630      	mov	r0, r6
   1e514:	f7fa fb8a 	bl	18c2c <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   1e518:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1e51a:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   1e51c:	f023 0301 	bic.w	r3, r3, #1
   1e520:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1e522:	4604      	mov	r4, r0
   1e524:	e7ec      	b.n	1e500 <net_buf_get+0xe>

0001e526 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   1e526:	6883      	ldr	r3, [r0, #8]
   1e528:	440b      	add	r3, r1
   1e52a:	6003      	str	r3, [r0, #0]
}
   1e52c:	4770      	bx	lr

0001e52e <net_buf_put>:
{
   1e52e:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   1e530:	460a      	mov	r2, r1
   1e532:	6814      	ldr	r4, [r2, #0]
   1e534:	b914      	cbnz	r4, 1e53c <net_buf_put+0xe>
}
   1e536:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   1e538:	f000 bb92 	b.w	1ec60 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   1e53c:	7953      	ldrb	r3, [r2, #5]
   1e53e:	f043 0301 	orr.w	r3, r3, #1
   1e542:	7153      	strb	r3, [r2, #5]
   1e544:	4622      	mov	r2, r4
   1e546:	e7f4      	b.n	1e532 <net_buf_put+0x4>

0001e548 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1e548:	7902      	ldrb	r2, [r0, #4]
   1e54a:	3201      	adds	r2, #1
   1e54c:	7102      	strb	r2, [r0, #4]
	return buf;
}
   1e54e:	4770      	bx	lr

0001e550 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   1e550:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   1e552:	4618      	mov	r0, r3
   1e554:	681b      	ldr	r3, [r3, #0]
   1e556:	2b00      	cmp	r3, #0
   1e558:	d1fb      	bne.n	1e552 <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   1e55a:	4770      	bx	lr

0001e55c <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   1e55c:	6802      	ldr	r2, [r0, #0]
{
   1e55e:	b510      	push	{r4, lr}
	if (parent->frags) {
   1e560:	b12a      	cbz	r2, 1e56e <net_buf_frag_insert+0x12>
   1e562:	460b      	mov	r3, r1
	while (buf->frags) {
   1e564:	461c      	mov	r4, r3
   1e566:	681b      	ldr	r3, [r3, #0]
   1e568:	2b00      	cmp	r3, #0
   1e56a:	d1fb      	bne.n	1e564 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   1e56c:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1e56e:	6001      	str	r1, [r0, #0]
}
   1e570:	bd10      	pop	{r4, pc}

0001e572 <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1e572:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   1e574:	4604      	mov	r4, r0
   1e576:	b920      	cbnz	r0, 1e582 <net_buf_frag_add+0x10>
	buf->ref++;
   1e578:	790b      	ldrb	r3, [r1, #4]
   1e57a:	3301      	adds	r3, #1
   1e57c:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   1e57e:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   1e580:	bd10      	pop	{r4, pc}
   1e582:	4603      	mov	r3, r0
	while (buf->frags) {
   1e584:	4618      	mov	r0, r3
   1e586:	681b      	ldr	r3, [r3, #0]
   1e588:	2b00      	cmp	r3, #0
   1e58a:	d1fb      	bne.n	1e584 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1e58c:	f7ff ffe6 	bl	1e55c <net_buf_frag_insert>
   1e590:	4620      	mov	r0, r4
   1e592:	e7f5      	b.n	1e580 <net_buf_frag_add+0xe>

0001e594 <net_buf_simple_add>:
   1e594:	8883      	ldrh	r3, [r0, #4]
   1e596:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1e598:	4419      	add	r1, r3
   1e59a:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1e59c:	18d0      	adds	r0, r2, r3
   1e59e:	4770      	bx	lr

0001e5a0 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1e5a0:	b430      	push	{r4, r5}
   1e5a2:	8884      	ldrh	r4, [r0, #4]
   1e5a4:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   1e5a6:	18a3      	adds	r3, r4, r2
   1e5a8:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1e5aa:	1928      	adds	r0, r5, r4
}
   1e5ac:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1e5ae:	f7fd ba3c 	b.w	1ba2a <memcpy>

0001e5b2 <net_buf_simple_add_u8>:
   1e5b2:	8883      	ldrh	r3, [r0, #4]
   1e5b4:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   1e5b6:	b510      	push	{r4, lr}
	buf->len += len;
   1e5b8:	1c5c      	adds	r4, r3, #1
   1e5ba:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   1e5bc:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   1e5be:	18d0      	adds	r0, r2, r3
   1e5c0:	bd10      	pop	{r4, pc}

0001e5c2 <net_buf_simple_push>:

	sys_put_be64(val, net_buf_simple_add(buf, sizeof(val)));
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   1e5c2:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1e5c4:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   1e5c6:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   1e5c8:	1a40      	subs	r0, r0, r1
	buf->len += len;
   1e5ca:	4411      	add	r1, r2
	buf->data -= len;
   1e5cc:	6018      	str	r0, [r3, #0]
	buf->len += len;
   1e5ce:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   1e5d0:	4770      	bx	lr

0001e5d2 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1e5d2:	8882      	ldrh	r2, [r0, #4]
   1e5d4:	1a52      	subs	r2, r2, r1
{
   1e5d6:	4603      	mov	r3, r0
	buf->len -= len;
   1e5d8:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   1e5da:	6800      	ldr	r0, [r0, #0]
   1e5dc:	4408      	add	r0, r1
   1e5de:	6018      	str	r0, [r3, #0]
}
   1e5e0:	4770      	bx	lr

0001e5e2 <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   1e5e2:	4603      	mov	r3, r0
	void *data = buf->data;
   1e5e4:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   1e5e6:	889a      	ldrh	r2, [r3, #4]
   1e5e8:	1a52      	subs	r2, r2, r1
	buf->data += len;
   1e5ea:	4401      	add	r1, r0
	buf->len -= len;
   1e5ec:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   1e5ee:	6019      	str	r1, [r3, #0]

	return data;
}
   1e5f0:	4770      	bx	lr

0001e5f2 <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1e5f2:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   1e5f4:	6803      	ldr	r3, [r0, #0]
   1e5f6:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1e5f8:	2102      	movs	r1, #2
   1e5fa:	f7ff ffea 	bl	1e5d2 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1e5fe:	4620      	mov	r0, r4
   1e600:	bd10      	pop	{r4, pc}

0001e602 <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1e602:	6802      	ldr	r2, [r0, #0]
   1e604:	6880      	ldr	r0, [r0, #8]
}
   1e606:	1a10      	subs	r0, r2, r0
   1e608:	4770      	bx	lr

0001e60a <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1e60a:	8883      	ldrh	r3, [r0, #4]
   1e60c:	88c2      	ldrh	r2, [r0, #6]
   1e60e:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   1e610:	6803      	ldr	r3, [r0, #0]
   1e612:	6880      	ldr	r0, [r0, #8]
   1e614:	1a18      	subs	r0, r3, r0
}
   1e616:	1a10      	subs	r0, r2, r0
   1e618:	4770      	bx	lr

0001e61a <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1e61a:	f1a0 0308 	sub.w	r3, r0, #8
   1e61e:	f3bf 8f5b 	dmb	ish
   1e622:	e853 2f00 	ldrex	r2, [r3]
   1e626:	1c51      	adds	r1, r2, #1
   1e628:	e843 1c00 	strex	ip, r1, [r3]
   1e62c:	f1bc 0f00 	cmp.w	ip, #0
   1e630:	d1f7      	bne.n	1e622 <adc_context_on_timer_expired+0x8>
   1e632:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
   1e636:	b91a      	cbnz	r2, 1e640 <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
   1e638:	f890 007e 	ldrb.w	r0, [r0, #126]	; 0x7e
   1e63c:	f7f8 bc2c 	b.w	16e98 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
   1e640:	f06f 030f 	mvn.w	r3, #15
   1e644:	6683      	str	r3, [r0, #104]	; 0x68
}
   1e646:	4770      	bx	lr

0001e648 <gpio_fire_callbacks>:
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
					const struct device *port,
					uint32_t pins)
{
   1e648:	b570      	push	{r4, r5, r6, lr}
   1e64a:	460e      	mov	r6, r1
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e64c:	6801      	ldr	r1, [r0, #0]
{
   1e64e:	4615      	mov	r5, r2
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e650:	b151      	cbz	r1, 1e668 <gpio_fire_callbacks+0x20>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e652:	680c      	ldr	r4, [r1, #0]
		if (cb->pin_mask & pins) {
   1e654:	688a      	ldr	r2, [r1, #8]
   1e656:	402a      	ands	r2, r5
   1e658:	d002      	beq.n	1e660 <gpio_fire_callbacks+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   1e65a:	684b      	ldr	r3, [r1, #4]
   1e65c:	4630      	mov	r0, r6
   1e65e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   1e660:	b114      	cbz	r4, 1e668 <gpio_fire_callbacks+0x20>
   1e662:	4621      	mov	r1, r4
   1e664:	6824      	ldr	r4, [r4, #0]
   1e666:	e7f5      	b.n	1e654 <gpio_fire_callbacks+0xc>
		}
	}
}
   1e668:	bd70      	pop	{r4, r5, r6, pc}

0001e66a <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e66a:	6843      	ldr	r3, [r0, #4]
   1e66c:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   1e66e:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   1e672:	600b      	str	r3, [r1, #0]
}
   1e674:	2000      	movs	r0, #0
   1e676:	4770      	bx	lr

0001e678 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e678:	6843      	ldr	r3, [r0, #4]
   1e67a:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   1e67c:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   1e680:	4042      	eors	r2, r0
   1e682:	400a      	ands	r2, r1
   1e684:	4042      	eors	r2, r0
    p_reg->OUT = value;
   1e686:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1e68a:	2000      	movs	r0, #0
   1e68c:	4770      	bx	lr

0001e68e <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e68e:	6843      	ldr	r3, [r0, #4]
   1e690:	685b      	ldr	r3, [r3, #4]
}
   1e692:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   1e694:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1e698:	4770      	bx	lr

0001e69a <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e69a:	6843      	ldr	r3, [r0, #4]
   1e69c:	685b      	ldr	r3, [r3, #4]
}
   1e69e:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   1e6a0:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   1e6a4:	4770      	bx	lr

0001e6a6 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1e6a6:	6843      	ldr	r3, [r0, #4]
   1e6a8:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   1e6aa:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   1e6ae:	404b      	eors	r3, r1
    p_reg->OUT = value;
   1e6b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   1e6b4:	2000      	movs	r0, #0
   1e6b6:	4770      	bx	lr

0001e6b8 <gpio_nrfx_manage_callback>:
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e6b8:	68c3      	ldr	r3, [r0, #12]
Z_GENLIST_IS_EMPTY(slist)
   1e6ba:	6858      	ldr	r0, [r3, #4]
{
   1e6bc:	b530      	push	{r4, r5, lr}
	if (!sys_slist_is_empty(callbacks)) {
   1e6be:	b158      	cbz	r0, 1e6d8 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e6c0:	2400      	movs	r4, #0
   1e6c2:	4281      	cmp	r1, r0
   1e6c4:	d113      	bne.n	1e6ee <gpio_nrfx_manage_callback+0x36>
Z_GENLIST_REMOVE(slist, snode)
   1e6c6:	6808      	ldr	r0, [r1, #0]
   1e6c8:	b95c      	cbnz	r4, 1e6e2 <gpio_nrfx_manage_callback+0x2a>
   1e6ca:	689c      	ldr	r4, [r3, #8]
	list->head = node;
   1e6cc:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   1e6ce:	42a1      	cmp	r1, r4
   1e6d0:	d100      	bne.n	1e6d4 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   1e6d2:	6098      	str	r0, [r3, #8]
	parent->next = child;
   1e6d4:	2000      	movs	r0, #0
   1e6d6:	6008      	str	r0, [r1, #0]
	if (set) {
   1e6d8:	b972      	cbnz	r2, 1e6f8 <gpio_nrfx_manage_callback+0x40>
	return 0;
   1e6da:	2000      	movs	r0, #0
}
   1e6dc:	bd30      	pop	{r4, r5, pc}
   1e6de:	4628      	mov	r0, r5
   1e6e0:	e7ef      	b.n	1e6c2 <gpio_nrfx_manage_callback+0xa>
   1e6e2:	6020      	str	r0, [r4, #0]
Z_GENLIST_REMOVE(slist, snode)
   1e6e4:	6898      	ldr	r0, [r3, #8]
   1e6e6:	4281      	cmp	r1, r0
	list->tail = node;
   1e6e8:	bf08      	it	eq
   1e6ea:	609c      	streq	r4, [r3, #8]
}
   1e6ec:	e7f2      	b.n	1e6d4 <gpio_nrfx_manage_callback+0x1c>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
   1e6ee:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   1e6f0:	4604      	mov	r4, r0
   1e6f2:	2d00      	cmp	r5, #0
   1e6f4:	d1f3      	bne.n	1e6de <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   1e6f6:	b13a      	cbz	r2, 1e708 <gpio_nrfx_manage_callback+0x50>
Z_GENLIST_PREPEND(slist, snode)
   1e6f8:	685a      	ldr	r2, [r3, #4]
	parent->next = child;
   1e6fa:	600a      	str	r2, [r1, #0]
Z_GENLIST_PREPEND(slist, snode)
   1e6fc:	6898      	ldr	r0, [r3, #8]
	list->head = node;
   1e6fe:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   1e700:	2800      	cmp	r0, #0
   1e702:	d1ea      	bne.n	1e6da <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   1e704:	6099      	str	r1, [r3, #8]
}
   1e706:	e7e9      	b.n	1e6dc <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   1e708:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   1e70c:	e7e6      	b.n	1e6dc <gpio_nrfx_manage_callback+0x24>

0001e70e <check_level_trigger_pins>:
	struct gpio_nrfx_data *data = get_port_data(port);
   1e70e:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1e710:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   1e714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   1e718:	68dc      	ldr	r4, [r3, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1e71a:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1e71e:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   1e720:	430a      	orrs	r2, r1
   1e722:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   1e726:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   1e72a:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   1e72e:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   1e730:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   1e734:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1e736:	2700      	movs	r7, #0
	while (level_pins) {
   1e738:	b914      	cbnz	r4, 1e740 <check_level_trigger_pins+0x32>
}
   1e73a:	4628      	mov	r0, r5
   1e73c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1e740:	4234      	tst	r4, r6
   1e742:	d00a      	beq.n	1e75a <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e744:	f898 3008 	ldrb.w	r3, [r8, #8]
   1e748:	f007 001f 	and.w	r0, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1e74c:	2100      	movs	r1, #0
   1e74e:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1e752:	f7f8 fdef 	bl	17334 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1e756:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1e75a:	3701      	adds	r7, #1
		bit <<= 1;
   1e75c:	0076      	lsls	r6, r6, #1
   1e75e:	e7eb      	b.n	1e738 <check_level_trigger_pins+0x2a>

0001e760 <cfg_level_pins>:
{
   1e760:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	const struct gpio_nrfx_data *data = get_port_data(port);
   1e764:	68c7      	ldr	r7, [r0, #12]
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
   1e766:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   1e76a:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   1e76c:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   1e770:	4313      	orrs	r3, r2
   1e772:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   1e776:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   1e778:	2500      	movs	r5, #0
	while (level_pins) {
   1e77a:	b90c      	cbnz	r4, 1e780 <cfg_level_pins+0x20>
}
   1e77c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   1e780:	4226      	tst	r6, r4
   1e782:	d010      	beq.n	1e7a6 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1e784:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e786:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1e78a:	40e9      	lsrs	r1, r5
   1e78c:	f001 0101 	and.w	r1, r1, #1
   1e790:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   1e794:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1e798:	b2c9      	uxtb	r1, r1
   1e79a:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   1e79e:	f7f8 fdc9 	bl	17334 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   1e7a2:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   1e7a6:	3501      	adds	r5, #1
		bit <<= 1;
   1e7a8:	0076      	lsls	r6, r6, #1
   1e7aa:	e7e6      	b.n	1e77a <cfg_level_pins+0x1a>

0001e7ac <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1e7ac:	07ca      	lsls	r2, r1, #31
	nrfx_twi_t const *inst = &(get_dev_config(dev)->twi);
   1e7ae:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1e7b0:	d405      	bmi.n	1e7be <i2c_nrfx_twi_configure+0x12>
	switch (I2C_SPEED_GET(dev_config)) {
   1e7b2:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1e7b6:	2a01      	cmp	r2, #1
   1e7b8:	d004      	beq.n	1e7c4 <i2c_nrfx_twi_configure+0x18>
   1e7ba:	2a02      	cmp	r2, #2
   1e7bc:	d00b      	beq.n	1e7d6 <i2c_nrfx_twi_configure+0x2a>
		return -EINVAL;
   1e7be:	f06f 0015 	mvn.w	r0, #21
}
   1e7c2:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1e7c4:	681b      	ldr	r3, [r3, #0]
    p_reg->FREQUENCY = frequency;
   1e7c6:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1e7ca:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1e7ce:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1e7d0:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1e7d2:	6359      	str	r1, [r3, #52]	; 0x34
	return 0;
   1e7d4:	4770      	bx	lr
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1e7d6:	681b      	ldr	r3, [r3, #0]
   1e7d8:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1e7dc:	e7f5      	b.n	1e7ca <i2c_nrfx_twi_configure+0x1e>

0001e7de <bme680_channel_get>:
	switch (chan) {
   1e7de:	2910      	cmp	r1, #16
	struct bme680_data *data = dev->data;
   1e7e0:	68c3      	ldr	r3, [r0, #12]
	switch (chan) {
   1e7e2:	d024      	beq.n	1e82e <bme680_channel_get+0x50>
   1e7e4:	d806      	bhi.n	1e7f4 <bme680_channel_get+0x16>
   1e7e6:	290d      	cmp	r1, #13
   1e7e8:	d00b      	beq.n	1e802 <bme680_channel_get+0x24>
   1e7ea:	290e      	cmp	r1, #14
   1e7ec:	d016      	beq.n	1e81c <bme680_channel_get+0x3e>
   1e7ee:	f06f 0015 	mvn.w	r0, #21
   1e7f2:	4770      	bx	lr
   1e7f4:	291d      	cmp	r1, #29
   1e7f6:	d1fa      	bne.n	1e7ee <bme680_channel_get+0x10>
		val->val1 = data->calc_gas_resistance;
   1e7f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   1e7fa:	6013      	str	r3, [r2, #0]
		val->val2 = 0;
   1e7fc:	2000      	movs	r0, #0
   1e7fe:	6050      	str	r0, [r2, #4]
}
   1e800:	4770      	bx	lr
		val->val1 = data->calc_temp / 100;
   1e802:	6b18      	ldr	r0, [r3, #48]	; 0x30
   1e804:	2164      	movs	r1, #100	; 0x64
   1e806:	fb90 f3f1 	sdiv	r3, r0, r1
   1e80a:	6013      	str	r3, [r2, #0]
		val->val2 = data->calc_temp % 100 * 10000;
   1e80c:	fb01 0313 	mls	r3, r1, r3, r0
   1e810:	f242 7110 	movw	r1, #10000	; 0x2710
		val->val2 = (data->calc_humidity % 1000) * 1000;
   1e814:	434b      	muls	r3, r1
   1e816:	6053      	str	r3, [r2, #4]
	return 0;
   1e818:	2000      	movs	r0, #0
		break;
   1e81a:	4770      	bx	lr
		val->val1 = data->calc_press / 1000;
   1e81c:	6b58      	ldr	r0, [r3, #52]	; 0x34
		val->val1 = data->calc_humidity / 1000;
   1e81e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e822:	fbb0 f1f3 	udiv	r1, r0, r3
   1e826:	6011      	str	r1, [r2, #0]
		val->val2 = (data->calc_humidity % 1000) * 1000;
   1e828:	fb03 0111 	mls	r1, r3, r1, r0
   1e82c:	e7f2      	b.n	1e814 <bme680_channel_get+0x36>
		val->val1 = data->calc_humidity / 1000;
   1e82e:	6b98      	ldr	r0, [r3, #56]	; 0x38
   1e830:	e7f5      	b.n	1e81e <bme680_channel_get+0x40>

0001e832 <bme680_reg_read>:
{
   1e832:	b530      	push	{r4, r5, lr}
   1e834:	b089      	sub	sp, #36	; 0x24
   1e836:	4604      	mov	r4, r0
   1e838:	f88d 1007 	strb.w	r1, [sp, #7]
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
   1e83c:	f10d 0107 	add.w	r1, sp, #7
   1e840:	461d      	mov	r5, r3
   1e842:	9102      	str	r1, [sp, #8]
	msg[0].len = num_write;
   1e844:	2101      	movs	r1, #1
	msg[0].flags = I2C_MSG_WRITE;

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
   1e846:	e9cd 2505 	strd	r2, r5, [sp, #20]
	msg[0].len = num_write;
   1e84a:	9103      	str	r1, [sp, #12]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e84c:	2207      	movs	r2, #7
	msg[0].flags = I2C_MSG_WRITE;
   1e84e:	2100      	movs	r1, #0
	return i2c_burst_read(data->i2c_master, data->i2c_slave_addr, start,
   1e850:	6800      	ldr	r0, [r0, #0]
   1e852:	88a3      	ldrh	r3, [r4, #4]
   1e854:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
   1e858:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
   1e85c:	6882      	ldr	r2, [r0, #8]
   1e85e:	a902      	add	r1, sp, #8
   1e860:	6854      	ldr	r4, [r2, #4]
   1e862:	2202      	movs	r2, #2
   1e864:	47a0      	blx	r4
}
   1e866:	b009      	add	sp, #36	; 0x24
   1e868:	bd30      	pop	{r4, r5, pc}

0001e86a <bme680_reg_write>:
{
   1e86a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
   1e86c:	4603      	mov	r3, r0
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
   1e86e:	f88d 2001 	strb.w	r2, [sp, #1]
	msg.len = num_bytes;
   1e872:	2202      	movs	r2, #2
	return i2c_reg_write_byte(data->i2c_master, data->i2c_slave_addr,
   1e874:	6800      	ldr	r0, [r0, #0]
   1e876:	889b      	ldrh	r3, [r3, #4]
	uint8_t tx_buf[2] = {reg_addr, value};
   1e878:	f88d 1000 	strb.w	r1, [sp]
	msg.buf = (uint8_t *)buf;
   1e87c:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
   1e880:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
   1e882:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
   1e886:	6882      	ldr	r2, [r0, #8]
   1e888:	a901      	add	r1, sp, #4
   1e88a:	6854      	ldr	r4, [r2, #4]
   1e88c:	2201      	movs	r2, #1
   1e88e:	47a0      	blx	r4
}
   1e890:	b004      	add	sp, #16
   1e892:	bd10      	pop	{r4, pc}

0001e894 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   1e894:	4700      	bx	r0

0001e896 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   1e896:	f000 bb29 	b.w	1eeec <z_impl_k_busy_wait>

0001e89a <nrfx_clock_enable>:
{
   1e89a:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   1e89c:	2000      	movs	r0, #0
   1e89e:	f7e6 fdf9 	bl	5494 <arch_irq_is_enabled>
   1e8a2:	b918      	cbnz	r0, 1e8ac <nrfx_clock_enable+0x12>
}
   1e8a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   1e8a8:	f7e6 bdd0 	b.w	544c <arch_irq_enable>
   1e8ac:	bd08      	pop	{r3, pc}

0001e8ae <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1e8ae:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   1e8b0:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1e8b2:	6b48      	ldr	r0, [r1, #52]	; 0x34
   1e8b4:	4298      	cmp	r0, r3
{
   1e8b6:	b510      	push	{r4, lr}
   1e8b8:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1e8bc:	d205      	bcs.n	1e8ca <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   1e8be:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   1e8c0:	5c09      	ldrb	r1, [r1, r0]
   1e8c2:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   1e8c6:	4618      	mov	r0, r3
}
   1e8c8:	e004      	b.n	1e8d4 <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   1e8ca:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   1e8ce:	b110      	cbz	r0, 1e8d6 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e8d0:	61d3      	str	r3, [r2, #28]
            return false;
   1e8d2:	2000      	movs	r0, #0
}
   1e8d4:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   1e8d6:	6a0c      	ldr	r4, [r1, #32]
   1e8d8:	0664      	lsls	r4, r4, #25
   1e8da:	d503      	bpl.n	1e8e4 <twi_send_byte+0x36>
   1e8dc:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   1e8de:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   1e8e2:	e7f7      	b.n	1e8d4 <twi_send_byte+0x26>
   1e8e4:	6153      	str	r3, [r2, #20]
   1e8e6:	e7ee      	b.n	1e8c6 <twi_send_byte+0x18>

0001e8e8 <twi_transfer>:
{
   1e8e8:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e8ea:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   1e8ee:	4604      	mov	r4, r0
   1e8f0:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   1e8f2:	b12e      	cbz	r6, 1e900 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e8f4:	2300      	movs	r3, #0
   1e8f6:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1e8fa:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   1e8fe:	2601      	movs	r6, #1
    if (p_cb->error)
   1e900:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   1e904:	b320      	cbz	r0, 1e950 <twi_transfer+0x68>
   1e906:	2300      	movs	r3, #0
   1e908:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1e90c:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   1e910:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   1e914:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   1e918:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1e91c:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   1e920:	2e00      	cmp	r6, #0
   1e922:	d068      	beq.n	1e9f6 <twi_transfer+0x10e>
        if (!p_cb->error)
   1e924:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   1e928:	2300      	movs	r3, #0
   1e92a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   1e92e:	bb88      	cbnz	r0, 1e994 <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   1e930:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e932:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   1e934:	429a      	cmp	r2, r3
        return false;
   1e936:	bf1c      	itt	ne
   1e938:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1e93a:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   1e93c:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1e940:	bf1c      	itt	ne
   1e942:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1e946:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   1e94a:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   1e94e:	e022      	b.n	1e996 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e950:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   1e954:	b142      	cbz	r2, 1e968 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e956:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   1e95a:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e95e:	2301      	movs	r3, #1
   1e960:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   1e962:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   1e966:	e7db      	b.n	1e920 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e968:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   1e96c:	b1a3      	cbz	r3, 1e998 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e96e:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   1e972:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   1e976:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e978:	3301      	adds	r3, #1
   1e97a:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e97c:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   1e980:	b113      	cbz	r3, 1e988 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e982:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   1e986:	e7e8      	b.n	1e95a <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   1e988:	4629      	mov	r1, r5
   1e98a:	4620      	mov	r0, r4
   1e98c:	f7ff ff8f 	bl	1e8ae <twi_send_byte>
   1e990:	2800      	cmp	r0, #0
   1e992:	d1c5      	bne.n	1e920 <twi_transfer+0x38>
                    return false;
   1e994:	2000      	movs	r0, #0
}
   1e996:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e998:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   1e99c:	2a00      	cmp	r2, #0
   1e99e:	d0bf      	beq.n	1e920 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e9a0:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   1e9a4:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1e9a8:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   1e9ac:	b112      	cbz	r2, 1e9b4 <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e9ae:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   1e9b2:	e7d2      	b.n	1e95a <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   1e9b4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   1e9b6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   1e9b8:	4293      	cmp	r3, r2
   1e9ba:	d2b1      	bcs.n	1e920 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   1e9bc:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   1e9be:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   1e9c2:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   1e9c4:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1e9c6:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   1e9c8:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1e9ca:	1e51      	subs	r1, r2, #1
   1e9cc:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   1e9ce:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1e9d0:	d108      	bne.n	1e9e4 <twi_transfer+0xfc>
   1e9d2:	6a29      	ldr	r1, [r5, #32]
   1e9d4:	0649      	lsls	r1, r1, #25
   1e9d6:	d410      	bmi.n	1e9fa <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   1e9d8:	2302      	movs	r3, #2
   1e9da:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e9de:	2301      	movs	r3, #1
   1e9e0:	6223      	str	r3, [r4, #32]
   1e9e2:	e79d      	b.n	1e920 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1e9e4:	4293      	cmp	r3, r2
   1e9e6:	d1fa      	bne.n	1e9de <twi_transfer+0xf6>
   1e9e8:	6a2b      	ldr	r3, [r5, #32]
   1e9ea:	065b      	lsls	r3, r3, #25
   1e9ec:	d598      	bpl.n	1e920 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   1e9ee:	2302      	movs	r3, #2
   1e9f0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   1e9f4:	e7cf      	b.n	1e996 <twi_transfer+0xae>
    return true;
   1e9f6:	2001      	movs	r0, #1
   1e9f8:	e7cd      	b.n	1e996 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1e9fa:	4293      	cmp	r3, r2
   1e9fc:	d1ef      	bne.n	1e9de <twi_transfer+0xf6>
   1e9fe:	e7f6      	b.n	1e9ee <twi_transfer+0x106>

0001ea00 <arch_system_halt>:
	__asm__ volatile(
   1ea00:	f04f 0220 	mov.w	r2, #32
   1ea04:	f3ef 8311 	mrs	r3, BASEPRI
   1ea08:	f382 8811 	msr	BASEPRI, r2
   1ea0c:	f3bf 8f6f 	isb	sy
	/* TODO: What's the best way to totally halt the system if SMP
	 * is enabled?
	 */

	(void)arch_irq_lock();
	for (;;) {
   1ea10:	e7fe      	b.n	1ea10 <arch_system_halt+0x10>

0001ea12 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1ea12:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
	arch_system_halt(reason);
   1ea14:	f7ff fff4 	bl	1ea00 <arch_system_halt>

0001ea18 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1ea18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ea1a:	4605      	mov	r5, r0
   1ea1c:	460e      	mov	r6, r1
   1ea1e:	f04f 0320 	mov.w	r3, #32
   1ea22:	f3ef 8711 	mrs	r7, BASEPRI
   1ea26:	f383 8811 	msr	BASEPRI, r3
   1ea2a:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1ea2e:	f7fa fca9 	bl	19384 <z_impl_k_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	z_coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1ea32:	4631      	mov	r1, r6
   1ea34:	4604      	mov	r4, r0
   1ea36:	4628      	mov	r0, r5
   1ea38:	f7ff ffeb 	bl	1ea12 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1ea3c:	f387 8811 	msr	BASEPRI, r7
   1ea40:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1ea44:	4620      	mov	r0, r4
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1ea46:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   1ea4a:	f7e6 bef3 	b.w	5834 <z_impl_k_thread_abort>

0001ea4e <z_sys_power_save_idle_exit>:
	z_clock_idle_exit();
   1ea4e:	f7fb be5c 	b.w	1a70a <z_clock_idle_exit>

0001ea52 <k_heap_init>:
{
   1ea52:	b410      	push	{r4}
   1ea54:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   1ea58:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   1ea5c:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   1ea5e:	f7fb bc97 	b.w	1a390 <sys_heap_init>

0001ea62 <k_heap_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_alloc(struct k_heap *h, size_t bytes, k_timeout_t timeout)
{
   1ea62:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1ea66:	4604      	mov	r4, r0
   1ea68:	b085      	sub	sp, #20
   1ea6a:	460e      	mov	r6, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   1ea6c:	4610      	mov	r0, r2
   1ea6e:	4619      	mov	r1, r3
   1ea70:	f000 fb07 	bl	1f082 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   1ea74:	f104 0a14 	add.w	sl, r4, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   1ea78:	4605      	mov	r5, r0
   1ea7a:	460f      	mov	r7, r1
	__asm__ volatile(
   1ea7c:	f04f 0220 	mov.w	r2, #32
   1ea80:	f3ef 8311 	mrs	r3, BASEPRI
   1ea84:	f382 8811 	msr	BASEPRI, r2
   1ea88:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1ea8c:	f104 0b0c 	add.w	fp, r4, #12
		ret = sys_heap_alloc(&h->heap, bytes);
   1ea90:	4631      	mov	r1, r6
   1ea92:	4620      	mov	r0, r4
   1ea94:	9303      	str	r3, [sp, #12]
   1ea96:	f7fb fc47 	bl	1a328 <sys_heap_alloc>
   1ea9a:	9002      	str	r0, [sp, #8]
		now = z_tick_get();
   1ea9c:	f7fa ff54 	bl	19948 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   1eaa0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   1eaa4:	b13a      	cbz	r2, 1eab6 <k_heap_alloc+0x54>
	__asm__ volatile(
   1eaa6:	f383 8811 	msr	BASEPRI, r3
   1eaaa:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   1eaae:	4610      	mov	r0, r2
   1eab0:	b005      	add	sp, #20
   1eab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   1eab6:	ebb5 0800 	subs.w	r8, r5, r0
   1eaba:	eb67 0901 	sbc.w	r9, r7, r1
   1eabe:	f1b8 0f01 	cmp.w	r8, #1
   1eac2:	f179 0100 	sbcs.w	r1, r9, #0
   1eac6:	dbee      	blt.n	1eaa6 <k_heap_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   1eac8:	e9cd 8900 	strd	r8, r9, [sp]
   1eacc:	465a      	mov	r2, fp
   1eace:	4619      	mov	r1, r3
   1ead0:	4650      	mov	r0, sl
   1ead2:	f7fa fb5d 	bl	19190 <z_pend_curr>
	__asm__ volatile(
   1ead6:	f04f 0220 	mov.w	r2, #32
   1eada:	f3ef 8311 	mrs	r3, BASEPRI
   1eade:	f382 8811 	msr	BASEPRI, r2
   1eae2:	f3bf 8f6f 	isb	sy
   1eae6:	e7d3      	b.n	1ea90 <k_heap_alloc+0x2e>

0001eae8 <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   1eae8:	b538      	push	{r3, r4, r5, lr}
   1eaea:	4604      	mov	r4, r0
   1eaec:	f04f 0320 	mov.w	r3, #32
   1eaf0:	f3ef 8511 	mrs	r5, BASEPRI
   1eaf4:	f383 8811 	msr	BASEPRI, r3
   1eaf8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   1eafc:	f7fb fbc1 	bl	1a282 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   1eb00:	f104 000c 	add.w	r0, r4, #12
   1eb04:	f000 f9cc 	bl	1eea0 <z_unpend_all>
   1eb08:	b130      	cbz	r0, 1eb18 <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   1eb0a:	4629      	mov	r1, r5
   1eb0c:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   1eb10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   1eb14:	f7fa b900 	b.w	18d18 <z_reschedule>
	__asm__ volatile(
   1eb18:	f385 8811 	msr	BASEPRI, r5
   1eb1c:	f3bf 8f6f 	isb	sy
}
   1eb20:	bd38      	pop	{r3, r4, r5, pc}

0001eb22 <k_mem_pool_alloc>:
 * backend.
 */

int k_mem_pool_alloc(struct k_mem_pool *p, struct k_mem_block *block,
		     size_t size, k_timeout_t timeout)
{
   1eb22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1eb24:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
	block->id.heap = p->heap;
   1eb28:	6800      	ldr	r0, [r0, #0]
   1eb2a:	6048      	str	r0, [r1, #4]
{
   1eb2c:	4614      	mov	r4, r2
   1eb2e:	460d      	mov	r5, r1
	block->data = k_heap_alloc(p->heap, size, timeout);
   1eb30:	4632      	mov	r2, r6
   1eb32:	463b      	mov	r3, r7
   1eb34:	4621      	mov	r1, r4
   1eb36:	f7ff ff94 	bl	1ea62 <k_heap_alloc>
   1eb3a:	6028      	str	r0, [r5, #0]

	/* The legacy API returns -EAGAIN on timeout expiration, but
	 * -ENOMEM if the timeout was K_NO_WAIT. Don't ask.
	 */
	if (size != 0 && block->data == NULL) {
   1eb3c:	b144      	cbz	r4, 1eb50 <k_mem_pool_alloc+0x2e>
   1eb3e:	b938      	cbnz	r0, 1eb50 <k_mem_pool_alloc+0x2e>
		return K_TIMEOUT_EQ(timeout, K_NO_WAIT) ? -ENOMEM : -EAGAIN;
   1eb40:	ea56 0307 	orrs.w	r3, r6, r7
   1eb44:	bf0c      	ite	eq
   1eb46:	f06f 000b 	mvneq.w	r0, #11
   1eb4a:	f06f 000a 	mvnne.w	r0, #10
	} else {
		return 0;
	}
}
   1eb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return 0;
   1eb50:	2000      	movs	r0, #0
   1eb52:	e7fc      	b.n	1eb4e <k_mem_pool_alloc+0x2c>

0001eb54 <k_mem_pool_free_id>:

void k_mem_pool_free_id(struct k_mem_block_id *id)
{
	k_heap_free(id->heap, id->data);
   1eb54:	e9d0 1000 	ldrd	r1, r0, [r0]
   1eb58:	f7ff bfc6 	b.w	1eae8 <k_heap_free>

0001eb5c <queue_insert>:
{
   1eb5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1eb60:	4604      	mov	r4, r0
   1eb62:	460d      	mov	r5, r1
   1eb64:	4690      	mov	r8, r2
   1eb66:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1eb68:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   1eb6c:	f04f 0320 	mov.w	r3, #32
   1eb70:	f3ef 8711 	mrs	r7, BASEPRI
   1eb74:	f383 8811 	msr	BASEPRI, r3
   1eb78:	f3bf 8f6f 	isb	sy
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   1eb7c:	4630      	mov	r0, r6
   1eb7e:	f000 f96a 	bl	1ee56 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   1eb82:	b158      	cbz	r0, 1eb9c <queue_insert+0x40>
   1eb84:	2400      	movs	r4, #0
   1eb86:	67c4      	str	r4, [r0, #124]	; 0x7c
   1eb88:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   1eb8c:	f000 f90b 	bl	1eda6 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   1eb90:	4630      	mov	r0, r6
   1eb92:	4639      	mov	r1, r7
   1eb94:	f7fa f8c0 	bl	18d18 <z_reschedule>
	return 0;
   1eb98:	2000      	movs	r0, #0
   1eb9a:	e00c      	b.n	1ebb6 <queue_insert+0x5a>
	if (alloc) {
   1eb9c:	f1b9 0f00 	cmp.w	r9, #0
   1eba0:	d01b      	beq.n	1ebda <queue_insert+0x7e>
		anode = z_thread_malloc(sizeof(*anode));
   1eba2:	2008      	movs	r0, #8
   1eba4:	f7fa fff4 	bl	19b90 <z_thread_malloc>
		if (anode == NULL) {
   1eba8:	b938      	cbnz	r0, 1ebba <queue_insert+0x5e>
	__asm__ volatile(
   1ebaa:	f387 8811 	msr	BASEPRI, r7
   1ebae:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   1ebb2:	f06f 000b 	mvn.w	r0, #11
}
   1ebb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   1ebba:	2301      	movs	r3, #1
		anode->data = data;
   1ebbc:	f8c0 8004 	str.w	r8, [r0, #4]
   1ebc0:	6003      	str	r3, [r0, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1ebc2:	6803      	ldr	r3, [r0, #0]
   1ebc4:	f003 0203 	and.w	r2, r3, #3
   1ebc8:	b95d      	cbnz	r5, 1ebe2 <queue_insert+0x86>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ebca:	6823      	ldr	r3, [r4, #0]
   1ebcc:	4313      	orrs	r3, r2
   1ebce:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1ebd0:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   1ebd2:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   1ebd4:	b973      	cbnz	r3, 1ebf4 <queue_insert+0x98>
	list->tail = node;
   1ebd6:	6060      	str	r0, [r4, #4]
}
   1ebd8:	e00c      	b.n	1ebf4 <queue_insert+0x98>
	node->next_and_flags = flags;
   1ebda:	f8c8 9000 	str.w	r9, [r8]
}
   1ebde:	4640      	mov	r0, r8
   1ebe0:	e7ef      	b.n	1ebc2 <queue_insert+0x66>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1ebe2:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   1ebe4:	f033 0303 	bics.w	r3, r3, #3
   1ebe8:	d110      	bne.n	1ec0c <queue_insert+0xb0>
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ebea:	6002      	str	r2, [r0, #0]
Z_GENLIST_APPEND(sflist, sfnode)
   1ebec:	6862      	ldr	r2, [r4, #4]
   1ebee:	b93a      	cbnz	r2, 1ec00 <queue_insert+0xa4>
	list->head = node;
   1ebf0:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ebf4:	2104      	movs	r1, #4
   1ebf6:	f104 0010 	add.w	r0, r4, #16
   1ebfa:	f000 fb9a 	bl	1f332 <z_handle_obj_poll_events>
   1ebfe:	e7c7      	b.n	1eb90 <queue_insert+0x34>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ec00:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ec02:	f003 0303 	and.w	r3, r3, #3
   1ec06:	4303      	orrs	r3, r0
   1ec08:	6013      	str	r3, [r2, #0]
   1ec0a:	e7e4      	b.n	1ebd6 <queue_insert+0x7a>
   1ec0c:	4313      	orrs	r3, r2
   1ec0e:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ec10:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ec12:	f003 0303 	and.w	r3, r3, #3
   1ec16:	4303      	orrs	r3, r0
   1ec18:	602b      	str	r3, [r5, #0]
}
   1ec1a:	e7eb      	b.n	1ebf4 <queue_insert+0x98>

0001ec1c <z_queue_node_peek>:
{
   1ec1c:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   1ec1e:	4604      	mov	r4, r0
   1ec20:	b130      	cbz	r0, 1ec30 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ec22:	6802      	ldr	r2, [r0, #0]
   1ec24:	0793      	lsls	r3, r2, #30
   1ec26:	d003      	beq.n	1ec30 <z_queue_node_peek+0x14>
		ret = anode->data;
   1ec28:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   1ec2a:	b109      	cbz	r1, 1ec30 <z_queue_node_peek+0x14>
			k_free(anode);
   1ec2c:	f000 fba7 	bl	1f37e <k_free>
}
   1ec30:	4620      	mov	r0, r4
   1ec32:	bd10      	pop	{r4, pc}

0001ec34 <z_impl_k_queue_init>:
	list->head = NULL;
   1ec34:	2300      	movs	r3, #0
	list->tail = NULL;
   1ec36:	e9c0 3300 	strd	r3, r3, [r0]
   1ec3a:	f100 0308 	add.w	r3, r0, #8
   1ec3e:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   1ec42:	f100 0310 	add.w	r3, r0, #16
   1ec46:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   1ec4a:	4770      	bx	lr

0001ec4c <k_queue_append>:
{
   1ec4c:	460a      	mov	r2, r1
	(void)queue_insert(queue, sys_sflist_peek_tail(&queue->data_q),
   1ec4e:	2300      	movs	r3, #0
   1ec50:	6841      	ldr	r1, [r0, #4]
   1ec52:	f7ff bf83 	b.w	1eb5c <queue_insert>

0001ec56 <k_queue_prepend>:
	(void)queue_insert(queue, NULL, data, false);
   1ec56:	2300      	movs	r3, #0
{
   1ec58:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false);
   1ec5a:	4619      	mov	r1, r3
   1ec5c:	f7ff bf7e 	b.w	1eb5c <queue_insert>

0001ec60 <k_queue_append_list>:
{
   1ec60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1ec64:	4605      	mov	r5, r0
   1ec66:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   1ec68:	460c      	mov	r4, r1
   1ec6a:	b391      	cbz	r1, 1ecd2 <k_queue_append_list+0x72>
   1ec6c:	b38a      	cbz	r2, 1ecd2 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1ec6e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   1ec72:	f04f 0320 	mov.w	r3, #32
   1ec76:	f3ef 8811 	mrs	r8, BASEPRI
   1ec7a:	f383 8811 	msr	BASEPRI, r3
   1ec7e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   1ec82:	4638      	mov	r0, r7
   1ec84:	f000 f8e7 	bl	1ee56 <z_unpend_first_thread>
   1ec88:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   1ec8c:	b920      	cbnz	r0, 1ec98 <k_queue_append_list+0x38>
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1ec8e:	686b      	ldr	r3, [r5, #4]
   1ec90:	b9cb      	cbnz	r3, 1ecc6 <k_queue_append_list+0x66>
	list->head = node;
   1ec92:	602c      	str	r4, [r5, #0]
	list->tail = node;
   1ec94:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   1ec96:	e00a      	b.n	1ecae <k_queue_append_list+0x4e>
   1ec98:	6144      	str	r4, [r0, #20]
   1ec9a:	f8c0 907c 	str.w	r9, [r0, #124]	; 0x7c
	z_ready_thread(thread);
   1ec9e:	f000 f882 	bl	1eda6 <z_ready_thread>
		head = *(void **)head;
   1eca2:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   1eca4:	4638      	mov	r0, r7
   1eca6:	f000 f8d6 	bl	1ee56 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   1ecaa:	2c00      	cmp	r4, #0
   1ecac:	d1ee      	bne.n	1ec8c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   1ecae:	2104      	movs	r1, #4
   1ecb0:	f105 0010 	add.w	r0, r5, #16
   1ecb4:	f000 fb3d 	bl	1f332 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   1ecb8:	4638      	mov	r0, r7
   1ecba:	4641      	mov	r1, r8
   1ecbc:	f7fa f82c 	bl	18d18 <z_reschedule>
	return 0;
   1ecc0:	2000      	movs	r0, #0
}
   1ecc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ecc6:	6819      	ldr	r1, [r3, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ecc8:	f001 0103 	and.w	r1, r1, #3
   1eccc:	430c      	orrs	r4, r1
   1ecce:	601c      	str	r4, [r3, #0]
}
   1ecd0:	e7e0      	b.n	1ec94 <k_queue_append_list+0x34>
		return -EINVAL;
   1ecd2:	f06f 0015 	mvn.w	r0, #21
   1ecd6:	e7f4      	b.n	1ecc2 <k_queue_append_list+0x62>

0001ecd8 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   1ecd8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   1ecdc:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   1ece0:	4298      	cmp	r0, r3
   1ece2:	bfac      	ite	ge
   1ece4:	2000      	movge	r0, #0
   1ece6:	2001      	movlt	r0, #1
   1ece8:	4770      	bx	lr

0001ecea <z_find_first_thread_to_unpend>:
{
   1ecea:	b510      	push	{r4, lr}
   1ecec:	f04f 0320 	mov.w	r3, #32
   1ecf0:	f3ef 8411 	mrs	r4, BASEPRI
   1ecf4:	f383 8811 	msr	BASEPRI, r3
   1ecf8:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1ecfc:	f000 f84d 	bl	1ed9a <z_priq_dumb_best>
	__asm__ volatile(
   1ed00:	f384 8811 	msr	BASEPRI, r4
   1ed04:	f3bf 8f6f 	isb	sy
}
   1ed08:	bd10      	pop	{r4, pc}

0001ed0a <z_unpend_thread_no_timeout>:
{
   1ed0a:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ed0c:	f04f 0320 	mov.w	r3, #32
   1ed10:	f3ef 8411 	mrs	r4, BASEPRI
   1ed14:	f383 8811 	msr	BASEPRI, r3
   1ed18:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1ed1c:	f000 f81b 	bl	1ed56 <unpend_thread_no_timeout>
	__asm__ volatile(
   1ed20:	f384 8811 	msr	BASEPRI, r4
   1ed24:	f3bf 8f6f 	isb	sy
}
   1ed28:	bd10      	pop	{r4, pc}

0001ed2a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1ed2a:	4603      	mov	r3, r0
   1ed2c:	b920      	cbnz	r0, 1ed38 <z_reschedule_irqlock+0xe>
   1ed2e:	f3ef 8205 	mrs	r2, IPSR
   1ed32:	b90a      	cbnz	r2, 1ed38 <z_reschedule_irqlock+0xe>
   1ed34:	f7e6 bb3c 	b.w	53b0 <arch_swap>
   1ed38:	f383 8811 	msr	BASEPRI, r3
   1ed3c:	f3bf 8f6f 	isb	sy
}
   1ed40:	4770      	bx	lr

0001ed42 <z_reschedule_unlocked>:
	__asm__ volatile(
   1ed42:	f04f 0320 	mov.w	r3, #32
   1ed46:	f3ef 8011 	mrs	r0, BASEPRI
   1ed4a:	f383 8811 	msr	BASEPRI, r3
   1ed4e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   1ed52:	f7ff bfea 	b.w	1ed2a <z_reschedule_irqlock>

0001ed56 <unpend_thread_no_timeout>:
{
   1ed56:	4601      	mov	r1, r0
   1ed58:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   1ed5a:	6880      	ldr	r0, [r0, #8]
   1ed5c:	f7fa f802 	bl	18d64 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1ed60:	7b4b      	ldrb	r3, [r1, #13]
   1ed62:	f023 0302 	bic.w	r3, r3, #2
   1ed66:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   1ed68:	2300      	movs	r3, #0
   1ed6a:	608b      	str	r3, [r1, #8]
}
   1ed6c:	bd08      	pop	{r3, pc}

0001ed6e <z_unpend_thread>:
{
   1ed6e:	b538      	push	{r3, r4, r5, lr}
   1ed70:	4604      	mov	r4, r0
   1ed72:	f04f 0320 	mov.w	r3, #32
   1ed76:	f3ef 8511 	mrs	r5, BASEPRI
   1ed7a:	f383 8811 	msr	BASEPRI, r3
   1ed7e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1ed82:	f7ff ffe8 	bl	1ed56 <unpend_thread_no_timeout>
	__asm__ volatile(
   1ed86:	f385 8811 	msr	BASEPRI, r5
   1ed8a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   1ed8e:	f104 0018 	add.w	r0, r4, #24
}
   1ed92:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   1ed96:	f000 b92e 	b.w	1eff6 <z_abort_timeout>

0001ed9a <z_priq_dumb_best>:
	return list->head == list;
   1ed9a:	6803      	ldr	r3, [r0, #0]
}
   1ed9c:	4298      	cmp	r0, r3
   1ed9e:	bf14      	ite	ne
   1eda0:	4618      	movne	r0, r3
   1eda2:	2000      	moveq	r0, #0
   1eda4:	4770      	bx	lr

0001eda6 <z_ready_thread>:
{
   1eda6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eda8:	f04f 0320 	mov.w	r3, #32
   1edac:	f3ef 8411 	mrs	r4, BASEPRI
   1edb0:	f383 8811 	msr	BASEPRI, r3
   1edb4:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   1edb8:	f7fa f82e 	bl	18e18 <ready_thread>
	__asm__ volatile(
   1edbc:	f384 8811 	msr	BASEPRI, r4
   1edc0:	f3bf 8f6f 	isb	sy
}
   1edc4:	bd10      	pop	{r4, pc}

0001edc6 <z_thread_timeout>:
{
   1edc6:	b570      	push	{r4, r5, r6, lr}
   1edc8:	4604      	mov	r4, r0
	__asm__ volatile(
   1edca:	f04f 0320 	mov.w	r3, #32
   1edce:	f3ef 8611 	mrs	r6, BASEPRI
   1edd2:	f383 8811 	msr	BASEPRI, r3
   1edd6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   1edda:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   1edde:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   1ede2:	b113      	cbz	r3, 1edea <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   1ede4:	4628      	mov	r0, r5
   1ede6:	f7ff ffb6 	bl	1ed56 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   1edea:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   1edee:	f023 0314 	bic.w	r3, r3, #20
   1edf2:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   1edf6:	4628      	mov	r0, r5
   1edf8:	f7fa f80e 	bl	18e18 <ready_thread>
	__asm__ volatile(
   1edfc:	f386 8811 	msr	BASEPRI, r6
   1ee00:	f3bf 8f6f 	isb	sy
}
   1ee04:	bd70      	pop	{r4, r5, r6, pc}

0001ee06 <add_to_waitq_locked>:
{
   1ee06:	b538      	push	{r3, r4, r5, lr}
   1ee08:	4604      	mov	r4, r0
   1ee0a:	460d      	mov	r5, r1
	unready_thread(thread);
   1ee0c:	f7fa f980 	bl	19110 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   1ee10:	7b63      	ldrb	r3, [r4, #13]
   1ee12:	f043 0302 	orr.w	r3, r3, #2
   1ee16:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   1ee18:	b17d      	cbz	r5, 1ee3a <add_to_waitq_locked+0x34>
   1ee1a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   1ee1c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ee1e:	429d      	cmp	r5, r3
   1ee20:	d012      	beq.n	1ee48 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ee22:	b18b      	cbz	r3, 1ee48 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ee24:	f994 200e 	ldrsb.w	r2, [r4, #14]
   1ee28:	f993 100e 	ldrsb.w	r1, [r3, #14]
   1ee2c:	4291      	cmp	r1, r2
   1ee2e:	dd05      	ble.n	1ee3c <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   1ee30:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ee32:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   1ee36:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   1ee38:	605c      	str	r4, [r3, #4]
}
   1ee3a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   1ee3c:	6869      	ldr	r1, [r5, #4]
   1ee3e:	428b      	cmp	r3, r1
   1ee40:	d002      	beq.n	1ee48 <add_to_waitq_locked+0x42>
   1ee42:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ee44:	2b00      	cmp	r3, #0
   1ee46:	d1ef      	bne.n	1ee28 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   1ee48:	686b      	ldr	r3, [r5, #4]
   1ee4a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   1ee4c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   1ee4e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   1ee50:	601c      	str	r4, [r3, #0]
	list->tail = node;
   1ee52:	606c      	str	r4, [r5, #4]
}
   1ee54:	e7f1      	b.n	1ee3a <add_to_waitq_locked+0x34>

0001ee56 <z_unpend_first_thread>:
{
   1ee56:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   1ee58:	f04f 0320 	mov.w	r3, #32
   1ee5c:	f3ef 8211 	mrs	r2, BASEPRI
   1ee60:	f383 8811 	msr	BASEPRI, r3
   1ee64:	f3bf 8f6f 	isb	sy
		ret = _priq_wait_best(&wait_q->waitq);
   1ee68:	f7ff ff97 	bl	1ed9a <z_priq_dumb_best>
   1ee6c:	4604      	mov	r4, r0
	__asm__ volatile(
   1ee6e:	f382 8811 	msr	BASEPRI, r2
   1ee72:	f3bf 8f6f 	isb	sy

static inline struct k_thread *z_unpend1_no_timeout(_wait_q_t *wait_q)
{
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);

	if (thread != NULL) {
   1ee76:	b188      	cbz	r0, 1ee9c <z_unpend_first_thread+0x46>
	__asm__ volatile(
   1ee78:	f04f 0320 	mov.w	r3, #32
   1ee7c:	f3ef 8511 	mrs	r5, BASEPRI
   1ee80:	f383 8811 	msr	BASEPRI, r3
   1ee84:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   1ee88:	f7ff ff65 	bl	1ed56 <unpend_thread_no_timeout>
	__asm__ volatile(
   1ee8c:	f385 8811 	msr	BASEPRI, r5
   1ee90:	f3bf 8f6f 	isb	sy
   1ee94:	f104 0018 	add.w	r0, r4, #24
   1ee98:	f000 f8ad 	bl	1eff6 <z_abort_timeout>
}
   1ee9c:	4620      	mov	r0, r4
   1ee9e:	bd38      	pop	{r3, r4, r5, pc}

0001eea0 <z_unpend_all>:
{
   1eea0:	b538      	push	{r3, r4, r5, lr}
   1eea2:	4605      	mov	r5, r0
	int need_sched = 0;
   1eea4:	2000      	movs	r0, #0
	return list->head == list;
   1eea6:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1eea8:	42a5      	cmp	r5, r4
   1eeaa:	d000      	beq.n	1eeae <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   1eeac:	b904      	cbnz	r4, 1eeb0 <z_unpend_all+0x10>
}
   1eeae:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   1eeb0:	4620      	mov	r0, r4
   1eeb2:	f7ff ff5c 	bl	1ed6e <z_unpend_thread>
		z_ready_thread(thread);
   1eeb6:	4620      	mov	r0, r4
   1eeb8:	f7ff ff75 	bl	1eda6 <z_ready_thread>
		need_sched = 1;
   1eebc:	2001      	movs	r0, #1
   1eebe:	e7f2      	b.n	1eea6 <z_unpend_all+0x6>

0001eec0 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   1eec0:	b15a      	cbz	r2, 1eeda <z_impl_k_sem_init+0x1a>
   1eec2:	428a      	cmp	r2, r1
   1eec4:	d309      	bcc.n	1eeda <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   1eec6:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   1eeca:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   1eece:	e9c0 0000 	strd	r0, r0, [r0]
   1eed2:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   1eed6:	2000      	movs	r0, #0
   1eed8:	4770      	bx	lr
		return -EINVAL;
   1eeda:	f06f 0015 	mvn.w	r0, #21
}
   1eede:	4770      	bx	lr

0001eee0 <k_is_in_isr>:
   1eee0:	f3ef 8005 	mrs	r0, IPSR
}
   1eee4:	3800      	subs	r0, #0
   1eee6:	bf18      	it	ne
   1eee8:	2001      	movne	r0, #1
   1eeea:	4770      	bx	lr

0001eeec <z_impl_k_busy_wait>:
	arch_busy_wait(usec_to_wait);
   1eeec:	f7e6 bdb6 	b.w	5a5c <arch_busy_wait>

0001eef0 <z_impl_k_thread_name_set>:
}
   1eef0:	f06f 0046 	mvn.w	r0, #70	; 0x46
   1eef4:	4770      	bx	lr

0001eef6 <k_work_submit_to_queue>:
{
   1eef6:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1eef8:	f101 0308 	add.w	r3, r1, #8
   1eefc:	f3bf 8f5b 	dmb	ish
   1ef00:	e853 2f00 	ldrex	r2, [r3]
   1ef04:	f042 0c01 	orr.w	ip, r2, #1
   1ef08:	e843 ce00 	strex	lr, ip, [r3]
   1ef0c:	f1be 0f00 	cmp.w	lr, #0
   1ef10:	d1f6      	bne.n	1ef00 <k_work_submit_to_queue+0xa>
   1ef12:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   1ef16:	07d3      	lsls	r3, r2, #31
   1ef18:	d403      	bmi.n	1ef22 <k_work_submit_to_queue+0x2c>
}
   1ef1a:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   1ef1e:	f7ff be95 	b.w	1ec4c <k_queue_append>
}
   1ef22:	f85d fb04 	ldr.w	pc, [sp], #4

0001ef26 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   1ef26:	f1a0 0110 	sub.w	r1, r0, #16
   1ef2a:	6980      	ldr	r0, [r0, #24]
   1ef2c:	f7ff bfe3 	b.w	1eef6 <k_work_submit_to_queue>

0001ef30 <work_cancel>:
{
   1ef30:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ef32:	f3bf 8f5b 	dmb	ish
   1ef36:	6883      	ldr	r3, [r0, #8]
   1ef38:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   1ef3c:	07db      	lsls	r3, r3, #31
{
   1ef3e:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   1ef40:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   1ef44:	d532      	bpl.n	1efac <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   1ef46:	6a82      	ldr	r2, [r0, #40]	; 0x28
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1ef48:	6813      	ldr	r3, [r2, #0]
   1ef4a:	2100      	movs	r1, #0
   1ef4c:	b913      	cbnz	r3, 1ef54 <work_cancel+0x24>
			return -EINVAL;
   1ef4e:	f06f 0015 	mvn.w	r0, #21
}
   1ef52:	bd70      	pop	{r4, r5, r6, pc}
   1ef54:	429c      	cmp	r4, r3
   1ef56:	d124      	bne.n	1efa2 <work_cancel+0x72>
Z_GENLIST_REMOVE(sflist, sfnode)
   1ef58:	6823      	ldr	r3, [r4, #0]
   1ef5a:	6856      	ldr	r6, [r2, #4]
   1ef5c:	f023 0003 	bic.w	r0, r3, #3
   1ef60:	b9b1      	cbnz	r1, 1ef90 <work_cancel+0x60>
   1ef62:	42b4      	cmp	r4, r6
	list->head = node;
   1ef64:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   1ef66:	d100      	bne.n	1ef6a <work_cancel+0x3a>
	list->tail = node;
   1ef68:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ef6a:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ef6c:	f003 0303 	and.w	r3, r3, #3
   1ef70:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   1ef72:	2000      	movs	r0, #0
   1ef74:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ef76:	f3bf 8f5b 	dmb	ish
   1ef7a:	e855 3f00 	ldrex	r3, [r5]
   1ef7e:	f023 0301 	bic.w	r3, r3, #1
   1ef82:	e845 3200 	strex	r2, r3, [r5]
   1ef86:	2a00      	cmp	r2, #0
   1ef88:	d1f7      	bne.n	1ef7a <work_cancel+0x4a>
   1ef8a:	f3bf 8f5b 	dmb	ish
   1ef8e:	e7e0      	b.n	1ef52 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   1ef90:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ef92:	f003 0303 	and.w	r3, r3, #3
   1ef96:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   1ef98:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   1ef9a:	600b      	str	r3, [r1, #0]
	list->tail = node;
   1ef9c:	bf08      	it	eq
   1ef9e:	6051      	streq	r1, [r2, #4]
}
   1efa0:	e7e3      	b.n	1ef6a <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1efa2:	6818      	ldr	r0, [r3, #0]
   1efa4:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   1efa6:	f020 0303 	bic.w	r3, r0, #3
   1efaa:	e7cf      	b.n	1ef4c <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   1efac:	3010      	adds	r0, #16
   1efae:	f000 f822 	bl	1eff6 <z_abort_timeout>
		if (err) {
   1efb2:	2800      	cmp	r0, #0
   1efb4:	d0dd      	beq.n	1ef72 <work_cancel+0x42>
			return -EALREADY;
   1efb6:	f06f 0044 	mvn.w	r0, #68	; 0x44
   1efba:	e7ca      	b.n	1ef52 <work_cancel+0x22>

0001efbc <k_delayed_work_init>:
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
   1efbc:	2300      	movs	r3, #0
   1efbe:	e9c0 3100 	strd	r3, r1, [r0]
	node->prev = NULL;
   1efc2:	e9c0 3304 	strd	r3, r3, [r0, #16]
   1efc6:	6083      	str	r3, [r0, #8]
	work->work_q = NULL;
   1efc8:	6283      	str	r3, [r0, #40]	; 0x28
}
   1efca:	4770      	bx	lr

0001efcc <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   1efcc:	b510      	push	{r4, lr}
	__asm__ volatile(
   1efce:	f04f 0220 	mov.w	r2, #32
   1efd2:	f3ef 8411 	mrs	r4, BASEPRI
   1efd6:	f382 8811 	msr	BASEPRI, r2
   1efda:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   1efde:	6a83      	ldr	r3, [r0, #40]	; 0x28
   1efe0:	b133      	cbz	r3, 1eff0 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   1efe2:	f7ff ffa5 	bl	1ef30 <work_cancel>
	__asm__ volatile(
   1efe6:	f384 8811 	msr	BASEPRI, r4
   1efea:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   1efee:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1eff0:	f06f 0015 	mvn.w	r0, #21
   1eff4:	e7f7      	b.n	1efe6 <k_delayed_work_cancel+0x1a>

0001eff6 <z_abort_timeout>:
{
   1eff6:	b510      	push	{r4, lr}
	__asm__ volatile(
   1eff8:	f04f 0220 	mov.w	r2, #32
   1effc:	f3ef 8411 	mrs	r4, BASEPRI
   1f000:	f382 8811 	msr	BASEPRI, r2
   1f004:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   1f008:	6803      	ldr	r3, [r0, #0]
   1f00a:	b13b      	cbz	r3, 1f01c <z_abort_timeout+0x26>
			remove_timeout(to);
   1f00c:	f7fa fb66 	bl	196dc <remove_timeout>
			ret = 0;
   1f010:	2000      	movs	r0, #0
	__asm__ volatile(
   1f012:	f384 8811 	msr	BASEPRI, r4
   1f016:	f3bf 8f6f 	isb	sy
}
   1f01a:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   1f01c:	f06f 0015 	mvn.w	r0, #21
   1f020:	e7f7      	b.n	1f012 <z_abort_timeout+0x1c>

0001f022 <z_get_next_timeout_expiry>:
{
   1f022:	b510      	push	{r4, lr}
	__asm__ volatile(
   1f024:	f04f 0320 	mov.w	r3, #32
   1f028:	f3ef 8411 	mrs	r4, BASEPRI
   1f02c:	f383 8811 	msr	BASEPRI, r3
   1f030:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   1f034:	f7fa fb6c 	bl	19710 <next_timeout>
	__asm__ volatile(
   1f038:	f384 8811 	msr	BASEPRI, r4
   1f03c:	f3bf 8f6f 	isb	sy
}
   1f040:	bd10      	pop	{r4, pc}

0001f042 <z_set_timeout_expiry>:
{
   1f042:	b570      	push	{r4, r5, r6, lr}
   1f044:	4604      	mov	r4, r0
   1f046:	460d      	mov	r5, r1
	__asm__ volatile(
   1f048:	f04f 0320 	mov.w	r3, #32
   1f04c:	f3ef 8611 	mrs	r6, BASEPRI
   1f050:	f383 8811 	msr	BASEPRI, r3
   1f054:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   1f058:	f7fa fb5a 	bl	19710 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   1f05c:	2801      	cmp	r0, #1
   1f05e:	dd05      	ble.n	1f06c <z_set_timeout_expiry+0x2a>
   1f060:	42a0      	cmp	r0, r4
   1f062:	dd03      	ble.n	1f06c <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   1f064:	4629      	mov	r1, r5
   1f066:	4620      	mov	r0, r4
   1f068:	f7e5 ff94 	bl	4f94 <z_clock_set_timeout>
	__asm__ volatile(
   1f06c:	f386 8811 	msr	BASEPRI, r6
   1f070:	f3bf 8f6f 	isb	sy
}
   1f074:	bd70      	pop	{r4, r5, r6, pc}

0001f076 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   1f076:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   1f078:	f7fa fc66 	bl	19948 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   1f07c:	bd08      	pop	{r3, pc}

0001f07e <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   1f07e:	f7fa bc63 	b.w	19948 <z_tick_get>

0001f082 <z_timeout_end_calc>:
 * timeout object.  When used correctly, this should be called once,
 * synchronously with the user passing a new timeout value.  It should
 * not be used iteratively to adjust a timeout.
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
   1f082:	b538      	push	{r3, r4, r5, lr}
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f084:	1c4b      	adds	r3, r1, #1
   1f086:	bf08      	it	eq
   1f088:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
{
   1f08c:	4604      	mov	r4, r0
   1f08e:	460d      	mov	r5, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   1f090:	d013      	beq.n	1f0ba <z_timeout_end_calc+0x38>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f092:	ea54 0105 	orrs.w	r1, r4, r5
   1f096:	d103      	bne.n	1f0a0 <z_timeout_end_calc+0x1e>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
#endif
	return z_tick_get() + MAX(1, dt);
}
   1f098:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   1f09c:	f7fa bc54 	b.w	19948 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   1f0a0:	f06f 0101 	mvn.w	r1, #1
   1f0a4:	1a0a      	subs	r2, r1, r0
   1f0a6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f0aa:	eb61 0305 	sbc.w	r3, r1, r5
   1f0ae:	2a00      	cmp	r2, #0
   1f0b0:	f173 0100 	sbcs.w	r1, r3, #0
   1f0b4:	db02      	blt.n	1f0bc <z_timeout_end_calc+0x3a>
		return Z_TICK_ABS(dt);
   1f0b6:	4610      	mov	r0, r2
   1f0b8:	4619      	mov	r1, r3
}
   1f0ba:	bd38      	pop	{r3, r4, r5, pc}
	return z_tick_get() + MAX(1, dt);
   1f0bc:	f7fa fc44 	bl	19948 <z_tick_get>
   1f0c0:	2c01      	cmp	r4, #1
   1f0c2:	f175 0300 	sbcs.w	r3, r5, #0
   1f0c6:	bfbc      	itt	lt
   1f0c8:	2401      	movlt	r4, #1
   1f0ca:	2500      	movlt	r5, #0
   1f0cc:	1820      	adds	r0, r4, r0
   1f0ce:	eb45 0101 	adc.w	r1, r5, r1
   1f0d2:	e7f2      	b.n	1f0ba <z_timeout_end_calc+0x38>

0001f0d4 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   1f0d4:	b510      	push	{r4, lr}
   1f0d6:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   1f0d8:	f7ff ff8d 	bl	1eff6 <z_abort_timeout>

	if (inactive) {
   1f0dc:	b9d8      	cbnz	r0, 1f116 <z_impl_k_timer_stop+0x42>
		return;
	}

	if (timer->stop_fn != NULL) {
   1f0de:	6a63      	ldr	r3, [r4, #36]	; 0x24
   1f0e0:	b10b      	cbz	r3, 1f0e6 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   1f0e2:	4620      	mov	r0, r4
   1f0e4:	4798      	blx	r3
	struct k_thread *thread = z_find_first_thread_to_unpend(wait_q, NULL);
   1f0e6:	f104 0018 	add.w	r0, r4, #24
   1f0ea:	2100      	movs	r1, #0
   1f0ec:	f7ff fdfd 	bl	1ecea <z_find_first_thread_to_unpend>
	if (thread != NULL) {
   1f0f0:	4604      	mov	r4, r0
   1f0f2:	b180      	cbz	r0, 1f116 <z_impl_k_timer_stop+0x42>
		z_unpend_thread_no_timeout(thread);
   1f0f4:	f7ff fe09 	bl	1ed0a <z_unpend_thread_no_timeout>
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);

	if (pending_thread != NULL) {
		z_ready_thread(pending_thread);
   1f0f8:	4620      	mov	r0, r4
   1f0fa:	f7ff fe54 	bl	1eda6 <z_ready_thread>
	__asm__ volatile(
   1f0fe:	f04f 0320 	mov.w	r3, #32
   1f102:	f3ef 8011 	mrs	r0, BASEPRI
   1f106:	f383 8811 	msr	BASEPRI, r3
   1f10a:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   1f10e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   1f112:	f7ff be0a 	b.w	1ed2a <z_reschedule_irqlock>
   1f116:	bd10      	pop	{r4, pc}

0001f118 <clear_event_registrations>:
	while (num_events--) {
   1f118:	2314      	movs	r3, #20
{
   1f11a:	b530      	push	{r4, r5, lr}
   1f11c:	fb03 0101 	mla	r1, r3, r1, r0
	event->poller = NULL;
   1f120:	2400      	movs	r4, #0
	while (num_events--) {
   1f122:	4281      	cmp	r1, r0
   1f124:	d100      	bne.n	1f128 <clear_event_registrations+0x10>
}
   1f126:	bd30      	pop	{r4, r5, pc}
	switch (event->type) {
   1f128:	f811 3c07 	ldrb.w	r3, [r1, #-7]
	event->poller = NULL;
   1f12c:	f841 4c0c 	str.w	r4, [r1, #-12]
	switch (event->type) {
   1f130:	f003 030f 	and.w	r3, r3, #15
   1f134:	2b02      	cmp	r3, #2
   1f136:	d80a      	bhi.n	1f14e <clear_event_registrations+0x36>
   1f138:	b15b      	cbz	r3, 1f152 <clear_event_registrations+0x3a>
	if (remove && sys_dnode_is_linked(&event->_node)) {
   1f13a:	f851 3c14 	ldr.w	r3, [r1, #-20]
   1f13e:	b143      	cbz	r3, 1f152 <clear_event_registrations+0x3a>
	node->prev->next = node->next;
   1f140:	f851 5c10 	ldr.w	r5, [r1, #-16]
   1f144:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   1f146:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   1f148:	e941 4405 	strd	r4, r4, [r1, #-20]
}
   1f14c:	e001      	b.n	1f152 <clear_event_registrations+0x3a>
	switch (event->type) {
   1f14e:	2b04      	cmp	r3, #4
   1f150:	d0f3      	beq.n	1f13a <clear_event_registrations+0x22>
	__asm__ volatile(
   1f152:	f382 8811 	msr	BASEPRI, r2
   1f156:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   1f15a:	f04f 0320 	mov.w	r3, #32
   1f15e:	f3ef 8211 	mrs	r2, BASEPRI
   1f162:	f383 8811 	msr	BASEPRI, r3
   1f166:	f3bf 8f6f 	isb	sy
   1f16a:	3914      	subs	r1, #20
   1f16c:	e7d9      	b.n	1f122 <clear_event_registrations+0xa>

0001f16e <signal_poll_event>:
{
   1f16e:	b570      	push	{r4, r5, r6, lr}
	struct _poller *poller = event->poller;
   1f170:	6884      	ldr	r4, [r0, #8]
{
   1f172:	4605      	mov	r5, r0
   1f174:	460e      	mov	r6, r1
	if (poller) {
   1f176:	b19c      	cbz	r4, 1f1a0 <signal_poll_event+0x32>
		if (poller->cb != NULL) {
   1f178:	68a3      	ldr	r3, [r4, #8]
   1f17a:	b95b      	cbnz	r3, 1f194 <signal_poll_event+0x26>
		poller->is_polling = false;
   1f17c:	7023      	strb	r3, [r4, #0]
	int retcode = 0;
   1f17e:	4618      	mov	r0, r3
	event->poller = NULL;
   1f180:	2300      	movs	r3, #0
   1f182:	60ab      	str	r3, [r5, #8]
	event->state |= state;
   1f184:	68eb      	ldr	r3, [r5, #12]
   1f186:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1f18a:	430e      	orrs	r6, r1
   1f18c:	f366 3310 	bfi	r3, r6, #12, #5
   1f190:	60eb      	str	r3, [r5, #12]
	return retcode;
   1f192:	e004      	b.n	1f19e <signal_poll_event+0x30>
			retcode = poller->cb(event, state);
   1f194:	4798      	blx	r3
		poller->is_polling = false;
   1f196:	2300      	movs	r3, #0
		if (retcode < 0) {
   1f198:	2800      	cmp	r0, #0
		poller->is_polling = false;
   1f19a:	7023      	strb	r3, [r4, #0]
		if (retcode < 0) {
   1f19c:	daf0      	bge.n	1f180 <signal_poll_event+0x12>
}
   1f19e:	bd70      	pop	{r4, r5, r6, pc}
	int retcode = 0;
   1f1a0:	4620      	mov	r0, r4
   1f1a2:	e7ed      	b.n	1f180 <signal_poll_event+0x12>

0001f1a4 <k_poll_poller_cb>:
{
   1f1a4:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *thread = event->poller->thread;
   1f1a6:	6883      	ldr	r3, [r0, #8]
   1f1a8:	685c      	ldr	r4, [r3, #4]
	if (!z_is_thread_pending(thread)) {
   1f1aa:	7b63      	ldrb	r3, [r4, #13]
   1f1ac:	079a      	lsls	r2, r3, #30
{
   1f1ae:	460d      	mov	r5, r1
	if (!z_is_thread_pending(thread)) {
   1f1b0:	d515      	bpl.n	1f1de <k_poll_poller_cb+0x3a>
	if (z_is_thread_timeout_expired(thread)) {
   1f1b2:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
   1f1b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f1ba:	f06f 0001 	mvn.w	r0, #1
   1f1be:	428b      	cmp	r3, r1
   1f1c0:	bf08      	it	eq
   1f1c2:	4282      	cmpeq	r2, r0
   1f1c4:	d014      	beq.n	1f1f0 <k_poll_poller_cb+0x4c>
	z_unpend_thread(thread);
   1f1c6:	4620      	mov	r0, r4
   1f1c8:	f7ff fdd1 	bl	1ed6e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   1f1cc:	2d08      	cmp	r5, #8
   1f1ce:	bf0c      	ite	eq
   1f1d0:	f06f 0303 	mvneq.w	r3, #3
   1f1d4:	2300      	movne	r3, #0
   1f1d6:	67e3      	str	r3, [r4, #124]	; 0x7c
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1f1d8:	7b63      	ldrb	r3, [r4, #13]
   1f1da:	06db      	lsls	r3, r3, #27
   1f1dc:	d001      	beq.n	1f1e2 <k_poll_poller_cb+0x3e>
		return 0;
   1f1de:	2000      	movs	r0, #0
}
   1f1e0:	bd38      	pop	{r3, r4, r5, pc}
	if (!z_is_thread_ready(thread)) {
   1f1e2:	69a5      	ldr	r5, [r4, #24]
   1f1e4:	2d00      	cmp	r5, #0
   1f1e6:	d1fa      	bne.n	1f1de <k_poll_poller_cb+0x3a>
	z_ready_thread(thread);
   1f1e8:	4620      	mov	r0, r4
   1f1ea:	f7ff fddc 	bl	1eda6 <z_ready_thread>
	return 0;
   1f1ee:	e7f6      	b.n	1f1de <k_poll_poller_cb+0x3a>
		return -EAGAIN;
   1f1f0:	f06f 000a 	mvn.w	r0, #10
   1f1f4:	e7f4      	b.n	1f1e0 <k_poll_poller_cb+0x3c>

0001f1f6 <add_event>:
{
   1f1f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f1f8:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   1f1fa:	e9d0 2300 	ldrd	r2, r3, [r0]
   1f1fe:	4290      	cmp	r0, r2
   1f200:	4604      	mov	r4, r0
   1f202:	460d      	mov	r5, r1
   1f204:	d106      	bne.n	1f214 <add_event+0x1e>
	node->prev = list->tail;
   1f206:	6863      	ldr	r3, [r4, #4]
   1f208:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   1f20a:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   1f20c:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   1f20e:	601d      	str	r5, [r3, #0]
	list->tail = node;
   1f210:	6065      	str	r5, [r4, #4]
}
   1f212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   1f214:	2b00      	cmp	r3, #0
   1f216:	d0f6      	beq.n	1f206 <add_event+0x10>
		z_is_t1_higher_prio_than_t2(pending->poller->thread,
   1f218:	689b      	ldr	r3, [r3, #8]
   1f21a:	6879      	ldr	r1, [r7, #4]
   1f21c:	6858      	ldr	r0, [r3, #4]
   1f21e:	f7ff fd5b 	bl	1ecd8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   1f222:	2800      	cmp	r0, #0
   1f224:	d1ef      	bne.n	1f206 <add_event+0x10>
	return list->head == list;
   1f226:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1f228:	42b4      	cmp	r4, r6
   1f22a:	d0ec      	beq.n	1f206 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   1f22c:	2e00      	cmp	r6, #0
   1f22e:	d0ea      	beq.n	1f206 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller->thread,
   1f230:	68b3      	ldr	r3, [r6, #8]
   1f232:	6878      	ldr	r0, [r7, #4]
   1f234:	6859      	ldr	r1, [r3, #4]
   1f236:	f7ff fd4f 	bl	1ecd8 <z_is_t1_higher_prio_than_t2>
   1f23a:	b128      	cbz	r0, 1f248 <add_event+0x52>
	node->prev = successor->prev;
   1f23c:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   1f23e:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   1f242:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   1f244:	6075      	str	r5, [r6, #4]
			return;
   1f246:	e7e4      	b.n	1f212 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   1f248:	6863      	ldr	r3, [r4, #4]
   1f24a:	429e      	cmp	r6, r3
   1f24c:	d0db      	beq.n	1f206 <add_event+0x10>
   1f24e:	6836      	ldr	r6, [r6, #0]
   1f250:	e7ec      	b.n	1f22c <add_event+0x36>

0001f252 <register_events>:
{
   1f252:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   1f256:	f04f 0a00 	mov.w	sl, #0
{
   1f25a:	460e      	mov	r6, r1
   1f25c:	4614      	mov	r4, r2
   1f25e:	461f      	mov	r7, r3
   1f260:	4683      	mov	fp, r0
	int events_registered = 0;
   1f262:	4655      	mov	r5, sl
	event->poller = NULL;
   1f264:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   1f266:	45b2      	cmp	sl, r6
   1f268:	db02      	blt.n	1f270 <register_events+0x1e>
}
   1f26a:	4628      	mov	r0, r5
   1f26c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1f270:	f04f 0320 	mov.w	r3, #32
   1f274:	f3ef 8911 	mrs	r9, BASEPRI
   1f278:	f383 8811 	msr	BASEPRI, r3
   1f27c:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   1f280:	f89b 200d 	ldrb.w	r2, [fp, #13]
   1f284:	f002 020f 	and.w	r2, r2, #15
   1f288:	2a02      	cmp	r2, #2
   1f28a:	d006      	beq.n	1f29a <register_events+0x48>
   1f28c:	2a04      	cmp	r2, #4
   1f28e:	d008      	beq.n	1f2a2 <register_events+0x50>
   1f290:	2a01      	cmp	r2, #1
   1f292:	d120      	bne.n	1f2d6 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   1f294:	f8db 3010 	ldr.w	r3, [fp, #16]
   1f298:	e001      	b.n	1f29e <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   1f29a:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   1f29e:	689b      	ldr	r3, [r3, #8]
   1f2a0:	e002      	b.n	1f2a8 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   1f2a2:	f8db 3010 	ldr.w	r3, [fp, #16]
   1f2a6:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   1f2a8:	b1ab      	cbz	r3, 1f2d6 <register_events+0x84>
	event->state |= state;
   1f2aa:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   1f2ae:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   1f2b2:	f3c3 3104 	ubfx	r1, r3, #12, #5
   1f2b6:	430a      	orrs	r2, r1
   1f2b8:	f362 3310 	bfi	r3, r2, #12, #5
   1f2bc:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   1f2c0:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   1f2c4:	f389 8811 	msr	BASEPRI, r9
   1f2c8:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   1f2cc:	f10a 0a01 	add.w	sl, sl, #1
   1f2d0:	f10b 0b14 	add.w	fp, fp, #20
   1f2d4:	e7c7      	b.n	1f266 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   1f2d6:	2f00      	cmp	r7, #0
   1f2d8:	d1f4      	bne.n	1f2c4 <register_events+0x72>
   1f2da:	7823      	ldrb	r3, [r4, #0]
   1f2dc:	2b00      	cmp	r3, #0
   1f2de:	d0f1      	beq.n	1f2c4 <register_events+0x72>
	switch (event->type) {
   1f2e0:	f89b 300d 	ldrb.w	r3, [fp, #13]
   1f2e4:	f003 030f 	and.w	r3, r3, #15
   1f2e8:	2b02      	cmp	r3, #2
   1f2ea:	d008      	beq.n	1f2fe <register_events+0xac>
   1f2ec:	2b04      	cmp	r3, #4
   1f2ee:	d006      	beq.n	1f2fe <register_events+0xac>
   1f2f0:	2b01      	cmp	r3, #1
   1f2f2:	d10b      	bne.n	1f30c <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   1f2f4:	f8db 0010 	ldr.w	r0, [fp, #16]
   1f2f8:	4622      	mov	r2, r4
   1f2fa:	4659      	mov	r1, fp
   1f2fc:	e004      	b.n	1f308 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   1f2fe:	f8db 0010 	ldr.w	r0, [fp, #16]
   1f302:	4622      	mov	r2, r4
   1f304:	4659      	mov	r1, fp
   1f306:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   1f308:	f7ff ff75 	bl	1f1f6 <add_event>
	event->poller = poller;
   1f30c:	f8cb 4008 	str.w	r4, [fp, #8]
				events_registered += 1;
   1f310:	3501      	adds	r5, #1
   1f312:	e7d7      	b.n	1f2c4 <register_events+0x72>

0001f314 <k_poll_event_init>:
{
   1f314:	b510      	push	{r4, lr}
	event->type = type;
   1f316:	0452      	lsls	r2, r2, #17
   1f318:	0209      	lsls	r1, r1, #8
   1f31a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   1f31e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   1f322:	430a      	orrs	r2, r1
   1f324:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   1f326:	2400      	movs	r4, #0
	event->type = type;
   1f328:	430a      	orrs	r2, r1
	event->obj = obj;
   1f32a:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   1f32e:	6084      	str	r4, [r0, #8]
}
   1f330:	bd10      	pop	{r4, pc}

0001f332 <z_handle_obj_poll_events>:
{
   1f332:	4603      	mov	r3, r0
	return list->head == list;
   1f334:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   1f336:	4283      	cmp	r3, r0
   1f338:	d008      	beq.n	1f34c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   1f33a:	e9d0 3200 	ldrd	r3, r2, [r0]
   1f33e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1f340:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1f342:	2300      	movs	r3, #0
	node->prev = NULL;
   1f344:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   1f348:	f7ff bf11 	b.w	1f16e <signal_poll_event>
}
   1f34c:	4770      	bx	lr

0001f34e <k_mem_pool_malloc>:
{
   1f34e:	b5df      	push	{r0, r1, r2, r3, r4, r6, r7, lr}
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   1f350:	2408      	movs	r4, #8
   1f352:	190a      	adds	r2, r1, r4
   1f354:	d208      	bcs.n	1f368 <k_mem_pool_malloc+0x1a>
	if (k_mem_pool_alloc(pool, &block, size, K_NO_WAIT) != 0) {
   1f356:	2600      	movs	r6, #0
   1f358:	2700      	movs	r7, #0
   1f35a:	e9cd 6700 	strd	r6, r7, [sp]
   1f35e:	eb0d 0104 	add.w	r1, sp, r4
   1f362:	f7ff fbde 	bl	1eb22 <k_mem_pool_alloc>
   1f366:	b110      	cbz	r0, 1f36e <k_mem_pool_malloc+0x20>
		return NULL;
   1f368:	2000      	movs	r0, #0
}
   1f36a:	b004      	add	sp, #16
   1f36c:	bdd0      	pop	{r4, r6, r7, pc}
	(void)memcpy(block.data, &block.id, sizeof(struct k_mem_block_id));
   1f36e:	9802      	ldr	r0, [sp, #8]
   1f370:	4622      	mov	r2, r4
   1f372:	a902      	add	r1, sp, #8
   1f374:	f7fc fb59 	bl	1ba2a <memcpy>
	return (char *)block.data + WB_UP(sizeof(struct k_mem_block_id));
   1f378:	9802      	ldr	r0, [sp, #8]
   1f37a:	3008      	adds	r0, #8
   1f37c:	e7f5      	b.n	1f36a <k_mem_pool_malloc+0x1c>

0001f37e <k_free>:
	if (ptr != NULL) {
   1f37e:	b110      	cbz	r0, 1f386 <k_free+0x8>
		k_mem_pool_free_id(ptr);
   1f380:	3808      	subs	r0, #8
   1f382:	f7ff bbe7 	b.w	1eb54 <k_mem_pool_free_id>
}
   1f386:	4770      	bx	lr

0001f388 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   1f388:	4770      	bx	lr
